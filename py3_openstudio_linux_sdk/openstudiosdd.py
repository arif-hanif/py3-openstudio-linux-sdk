# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudiosdd', [dirname(__file__)])
        except ImportError:
            import _openstudiosdd
            return _openstudiosdd
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudiosdd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudiosdd = swig_import_helper()
    del swig_import_helper
else:
    import _openstudiosdd
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiosdd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudiosdd.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiosdd.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiosdd.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudiosdd.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiosdd.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiosdd.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiosdd.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiosdd.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiosdd.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiosdd.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiosdd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiosdd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiosdd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiosdd.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiosdd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiosdd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudiosdd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudiosdd.SHARED_PTR_DISOWN_swigconstant(_openstudiosdd)
SHARED_PTR_DISOWN = _openstudiosdd.SHARED_PTR_DISOWN
import openstudioutilities
import openstudioutilitiescore
import openstudioutilitiestime
import openstudioutilitiesdata
import openstudioutilitiesunits
import openstudioutilitiesplot
import openstudioutilitiesgeometry
import openstudioutilitiessql
import openstudioutilitiesbcl
import openstudioutilitiesidd
import openstudioutilitiesidf
import openstudioutilitiesfiletypes
import openstudiomodel
import openstudiomodelcore
import openstudiomodelsimulation
import openstudiomodelresources
import openstudiomodelgeometry
import openstudiomodelhvac
import openstudiomodelzonehvac
import openstudiomodelavailabilitymanager
import openstudiomodelplantequipmentoperationscheme
import openstudiomodelstraightcomponent
import openstudiomodelairflow
import openstudiomodelrefrigeration
import openstudiomodelgenerators
class SddReverseTranslator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SddReverseTranslator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SddReverseTranslator, name)
    __repr__ = _swig_repr

    def __init__(self, masterAutosize: 'bool'=False):
        this = _openstudiosdd.new_SddReverseTranslator(masterAutosize)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiosdd.delete_SddReverseTranslator
    __del__ = lambda self: None

    def loadModel(self, path: 'path', progressBar: 'ProgressBar'=None) -> "boost::optional< openstudio::model::Model >":
        return _openstudiosdd.SddReverseTranslator_loadModel(self, path, progressBar)

    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudiosdd.SddReverseTranslator_warnings(self)

    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudiosdd.SddReverseTranslator_errors(self)
SddReverseTranslator_swigregister = _openstudiosdd.SddReverseTranslator_swigregister
SddReverseTranslator_swigregister(SddReverseTranslator)

class SddForwardTranslator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SddForwardTranslator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SddForwardTranslator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudiosdd.new_SddForwardTranslator()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiosdd.delete_SddForwardTranslator
    __del__ = lambda self: None

    def modelToSDD(self, model: 'Model', path: 'path', progressBar: 'ProgressBar'=None) -> "bool":
        return _openstudiosdd.SddForwardTranslator_modelToSDD(self, model, path, progressBar)

    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudiosdd.SddForwardTranslator_warnings(self)

    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudiosdd.SddForwardTranslator_errors(self)
SddForwardTranslator_swigregister = _openstudiosdd.SddForwardTranslator_swigregister
SddForwardTranslator_swigregister(SddForwardTranslator)

# This file is compatible with both classic and new-style classes.


