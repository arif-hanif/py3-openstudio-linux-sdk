# This file was automatically generated by SWIG (http://www.swig.org).

# Version 3.0.7

#

# Do not make changes to this file unless you know what you are doing--modify

# the SWIG interface file instead.











from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():

        from os.path import dirname

        import imp

        fp = None

        try:

            fp, pathname, description = imp.find_module('_openstudioutilitiesidf', [dirname(__file__)])

        except ImportError:

            import _openstudioutilitiesidf

            return _openstudioutilitiesidf

        if fp is not None:

            try:

                _mod = imp.load_module('_openstudioutilitiesidf', fp, pathname, description)

            finally:

                fp.close()

            return _mod

    _openstudioutilitiesidf = swig_import_helper()

    del swig_import_helper

else:

    import _openstudioutilitiesidf

del version_info

try:

    _swig_property = property

except NameError:

    pass  # Python < 2.2 doesn't have 'property'.





def _swig_setattr_nondynamic(self, class_type, name, value, static=1):

    if (name == "thisown"):

        return self.this.own(value)

    if (name == "this"):

        if type(value).__name__ == 'SwigPyObject':

            self.__dict__[name] = value

            return

    method = class_type.__swig_setmethods__.get(name, None)

    if method:

        return method(self, value)

    if (not static):

        if _newclass:

            object.__setattr__(self, name, value)

        else:

            self.__dict__[name] = value

    else:

        raise AttributeError("You cannot add attributes to %s" % self)





def _swig_setattr(self, class_type, name, value):

    return _swig_setattr_nondynamic(self, class_type, name, value, 0)





def _swig_getattr_nondynamic(self, class_type, name, static=1):

    if (name == "thisown"):

        return self.this.own()

    method = class_type.__swig_getmethods__.get(name, None)

    if method:

        return method(self)

    if (not static):

        return object.__getattr__(self, name)

    else:

        raise AttributeError(name)



def _swig_getattr(self, class_type, name):

    return _swig_getattr_nondynamic(self, class_type, name, 0)





def _swig_repr(self):

    try:

        strthis = "proxy of " + self.this.__repr__()

    except:

        strthis = ""

    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)



try:

    _object = object

    _newclass = 1

except AttributeError:

    class _object:

        pass

    _newclass = 0





try:

    import weakref

    weakref_proxy = weakref.proxy

except:

    weakref_proxy = lambda x: x





class SwigPyIterator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiesidf.delete_SwigPyIterator

    __del__ = lambda self: None



    def value(self) -> "PyObject *":

        return _openstudioutilitiesidf.SwigPyIterator_value(self)



    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.SwigPyIterator_incr(self, n)



    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.SwigPyIterator_decr(self, n)



    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":

        return _openstudioutilitiesidf.SwigPyIterator_distance(self, x)



    def equal(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiesidf.SwigPyIterator_equal(self, x)



    def copy(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.SwigPyIterator_copy(self)



    def next(self) -> "PyObject *":

        return _openstudioutilitiesidf.SwigPyIterator_next(self)



    def __next__(self) -> "PyObject *":

        return _openstudioutilitiesidf.SwigPyIterator___next__(self)



    def previous(self) -> "PyObject *":

        return _openstudioutilitiesidf.SwigPyIterator_previous(self)



    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.SwigPyIterator_advance(self, n)



    def __eq__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiesidf.SwigPyIterator___eq__(self, x)



    def __ne__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiesidf.SwigPyIterator___ne__(self, x)



    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiesidf.SwigPyIterator___iadd__(self, n)



    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiesidf.SwigPyIterator___isub__(self, n)



    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.SwigPyIterator___add__(self, n)



    def __sub__(self, *args) -> "ptrdiff_t":

        return _openstudioutilitiesidf.SwigPyIterator___sub__(self, *args)

    def __iter__(self):

        return self

SwigPyIterator_swigregister = _openstudioutilitiesidf.SwigPyIterator_swigregister

SwigPyIterator_swigregister(SwigPyIterator)





_openstudioutilitiesidf.SHARED_PTR_DISOWN_swigconstant(_openstudioutilitiesidf)

SHARED_PTR_DISOWN = _openstudioutilitiesidf.SHARED_PTR_DISOWN

from .import openstudioutilitiescore

from .import openstudioutilitiesidd

from .import openstudioutilitiesunits

class OptionalIdfObject(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIdfObject, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIdfObject, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_OptionalIdfObject(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesidf.OptionalIdfObject_reset(self)



    def __ref__(self) -> "openstudio::IdfObject":

        return _openstudioutilitiesidf.OptionalIdfObject___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesidf.OptionalIdfObject_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesidf.OptionalIdfObject_isNull(self)



    def get(self) -> "openstudio::IdfObject":

        return _openstudioutilitiesidf.OptionalIdfObject_get(self)



    def set(self, t: 'IdfObject') -> "void":

        return _openstudioutilitiesidf.OptionalIdfObject_set(self, t)

    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalIdfObject

    __del__ = lambda self: None

OptionalIdfObject_swigregister = _openstudioutilitiesidf.OptionalIdfObject_swigregister

OptionalIdfObject_swigregister(OptionalIdfObject)



class OptionalIdfFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIdfFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIdfFile, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_OptionalIdfFile(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesidf.OptionalIdfFile_reset(self)



    def __ref__(self) -> "openstudio::IdfFile":

        return _openstudioutilitiesidf.OptionalIdfFile___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesidf.OptionalIdfFile_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesidf.OptionalIdfFile_isNull(self)



    def get(self) -> "openstudio::IdfFile":

        return _openstudioutilitiesidf.OptionalIdfFile_get(self)



    def set(self, t: 'IdfFile') -> "void":

        return _openstudioutilitiesidf.OptionalIdfFile_set(self, t)

    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalIdfFile

    __del__ = lambda self: None

OptionalIdfFile_swigregister = _openstudioutilitiesidf.OptionalIdfFile_swigregister

OptionalIdfFile_swigregister(OptionalIdfFile)



class OptionalImfFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalImfFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalImfFile, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_OptionalImfFile(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesidf.OptionalImfFile_reset(self)



    def __ref__(self) -> "openstudio::ImfFile":

        return _openstudioutilitiesidf.OptionalImfFile___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesidf.OptionalImfFile_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesidf.OptionalImfFile_isNull(self)



    def get(self) -> "openstudio::ImfFile":

        return _openstudioutilitiesidf.OptionalImfFile_get(self)



    def set(self, t: 'ImfFile') -> "void":

        return _openstudioutilitiesidf.OptionalImfFile_set(self, t)

    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalImfFile

    __del__ = lambda self: None

OptionalImfFile_swigregister = _openstudioutilitiesidf.OptionalImfFile_swigregister

OptionalImfFile_swigregister(OptionalImfFile)



class OptionalWorkspace(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWorkspace, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWorkspace, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_OptionalWorkspace(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesidf.OptionalWorkspace_reset(self)



    def __ref__(self) -> "openstudio::Workspace":

        return _openstudioutilitiesidf.OptionalWorkspace___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesidf.OptionalWorkspace_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesidf.OptionalWorkspace_isNull(self)



    def get(self) -> "openstudio::Workspace":

        return _openstudioutilitiesidf.OptionalWorkspace_get(self)



    def set(self, t: 'Workspace') -> "void":

        return _openstudioutilitiesidf.OptionalWorkspace_set(self, t)

    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalWorkspace

    __del__ = lambda self: None

OptionalWorkspace_swigregister = _openstudioutilitiesidf.OptionalWorkspace_swigregister

OptionalWorkspace_swigregister(OptionalWorkspace)



class OptionalWorkspaceObject(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWorkspaceObject, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWorkspaceObject, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_OptionalWorkspaceObject(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesidf.OptionalWorkspaceObject_reset(self)



    def __ref__(self) -> "openstudio::WorkspaceObject":

        return _openstudioutilitiesidf.OptionalWorkspaceObject___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesidf.OptionalWorkspaceObject_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesidf.OptionalWorkspaceObject_isNull(self)



    def get(self) -> "openstudio::WorkspaceObject":

        return _openstudioutilitiesidf.OptionalWorkspaceObject_get(self)



    def set(self, t: 'WorkspaceObject') -> "void":

        return _openstudioutilitiesidf.OptionalWorkspaceObject_set(self, t)

    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalWorkspaceObject

    __del__ = lambda self: None

OptionalWorkspaceObject_swigregister = _openstudioutilitiesidf.OptionalWorkspaceObject_swigregister

OptionalWorkspaceObject_swigregister(OptionalWorkspaceObject)



class OptionalWorkspaceExtensibleGroup(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWorkspaceExtensibleGroup, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWorkspaceExtensibleGroup, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_OptionalWorkspaceExtensibleGroup(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_reset(self)



    def __ref__(self) -> "openstudio::WorkspaceExtensibleGroup":

        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_isNull(self)



    def get(self) -> "openstudio::WorkspaceExtensibleGroup":

        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_get(self)



    def set(self, t: 'WorkspaceExtensibleGroup') -> "void":

        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_set(self, t)

    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalWorkspaceExtensibleGroup

    __del__ = lambda self: None

OptionalWorkspaceExtensibleGroup_swigregister = _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_swigregister

OptionalWorkspaceExtensibleGroup_swigregister(OptionalWorkspaceExtensibleGroup)



class OptionalDataError(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDataError, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDataError, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_OptionalDataError(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesidf.OptionalDataError_reset(self)



    def __ref__(self) -> "openstudio::DataError":

        return _openstudioutilitiesidf.OptionalDataError___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesidf.OptionalDataError_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesidf.OptionalDataError_isNull(self)



    def get(self) -> "openstudio::DataError":

        return _openstudioutilitiesidf.OptionalDataError_get(self)



    def set(self, t: 'DataError') -> "void":

        return _openstudioutilitiesidf.OptionalDataError_set(self, t)

    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalDataError

    __del__ = lambda self: None

OptionalDataError_swigregister = _openstudioutilitiesidf.OptionalDataError_swigregister

OptionalDataError_swigregister(OptionalDataError)



class IdfObjectVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IdfObjectVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IdfObjectVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.IdfObjectVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesidf.IdfObjectVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesidf.IdfObjectVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::IdfObject >::size_type":

        return _openstudioutilitiesidf.IdfObjectVector___len__(self)



    def pop(self) -> "std::vector< openstudio::IdfObject >::value_type":

        return _openstudioutilitiesidf.IdfObjectVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::IdfObject >::difference_type', j: 'std::vector< openstudio::IdfObject >::difference_type') -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > > *":

        return _openstudioutilitiesidf.IdfObjectVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesidf.IdfObjectVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::IdfObject >::difference_type', j: 'std::vector< openstudio::IdfObject >::difference_type') -> "void":

        return _openstudioutilitiesidf.IdfObjectVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.IdfObjectVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::IdfObject >::value_type const &":

        return _openstudioutilitiesidf.IdfObjectVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.IdfObjectVector___setitem__(self, *args)



    def append(self, x: 'IdfObject') -> "void":

        return _openstudioutilitiesidf.IdfObjectVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.IdfObjectVector_empty(self)



    def size(self) -> "std::vector< openstudio::IdfObject >::size_type":

        return _openstudioutilitiesidf.IdfObjectVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectVector_clear(self)



    def swap(self, v: 'IdfObjectVector') -> "void":

        return _openstudioutilitiesidf.IdfObjectVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::IdfObject >::allocator_type":

        return _openstudioutilitiesidf.IdfObjectVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::IdfObject >::iterator":

        return _openstudioutilitiesidf.IdfObjectVector_begin(self)



    def end(self) -> "std::vector< openstudio::IdfObject >::iterator":

        return _openstudioutilitiesidf.IdfObjectVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::IdfObject >::reverse_iterator":

        return _openstudioutilitiesidf.IdfObjectVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::IdfObject >::reverse_iterator":

        return _openstudioutilitiesidf.IdfObjectVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::IdfObject >::iterator":

        return _openstudioutilitiesidf.IdfObjectVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_IdfObjectVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'IdfObject') -> "void":

        return _openstudioutilitiesidf.IdfObjectVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::IdfObject >::value_type const &":

        return _openstudioutilitiesidf.IdfObjectVector_front(self)



    def back(self) -> "std::vector< openstudio::IdfObject >::value_type const &":

        return _openstudioutilitiesidf.IdfObjectVector_back(self)



    def assign(self, n: 'std::vector< openstudio::IdfObject >::size_type', x: 'IdfObject') -> "void":

        return _openstudioutilitiesidf.IdfObjectVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::IdfObject >::size_type', x: 'IdfObject') -> "void":

        return _openstudioutilitiesidf.IdfObjectVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesidf.IdfObjectVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::IdfObject >::size_type') -> "void":

        return _openstudioutilitiesidf.IdfObjectVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::IdfObject >::size_type":

        return _openstudioutilitiesidf.IdfObjectVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectVector

    __del__ = lambda self: None

IdfObjectVector_swigregister = _openstudioutilitiesidf.IdfObjectVector_swigregister

IdfObjectVector_swigregister(IdfObjectVector)



class IdfExtensibleGroupVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IdfExtensibleGroupVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IdfExtensibleGroupVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::IdfExtensibleGroup >::size_type":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector___len__(self)



    def pop(self) -> "std::vector< openstudio::IdfExtensibleGroup >::value_type":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::IdfExtensibleGroup >::difference_type', j: 'std::vector< openstudio::IdfExtensibleGroup >::difference_type') -> "std::vector< openstudio::IdfExtensibleGroup,std::allocator< openstudio::IdfExtensibleGroup > > *":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::IdfExtensibleGroup >::difference_type', j: 'std::vector< openstudio::IdfExtensibleGroup >::difference_type') -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::IdfExtensibleGroup >::value_type const &":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector___setitem__(self, *args)



    def append(self, x: 'IdfExtensibleGroup') -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_empty(self)



    def size(self) -> "std::vector< openstudio::IdfExtensibleGroup >::size_type":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_clear(self)



    def swap(self, v: 'IdfExtensibleGroupVector') -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::IdfExtensibleGroup >::allocator_type":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::IdfExtensibleGroup >::iterator":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_begin(self)



    def end(self) -> "std::vector< openstudio::IdfExtensibleGroup >::iterator":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::IdfExtensibleGroup >::reverse_iterator":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::IdfExtensibleGroup >::reverse_iterator":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::IdfExtensibleGroup >::iterator":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_IdfExtensibleGroupVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'IdfExtensibleGroup') -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::IdfExtensibleGroup >::value_type const &":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_front(self)



    def back(self) -> "std::vector< openstudio::IdfExtensibleGroup >::value_type const &":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_back(self)



    def assign(self, n: 'std::vector< openstudio::IdfExtensibleGroup >::size_type', x: 'IdfExtensibleGroup') -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::IdfExtensibleGroup >::size_type', x: 'IdfExtensibleGroup') -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::IdfExtensibleGroup >::size_type') -> "void":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::IdfExtensibleGroup >::size_type":

        return _openstudioutilitiesidf.IdfExtensibleGroupVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfExtensibleGroupVector

    __del__ = lambda self: None

IdfExtensibleGroupVector_swigregister = _openstudioutilitiesidf.IdfExtensibleGroupVector_swigregister

IdfExtensibleGroupVector_swigregister(IdfExtensibleGroupVector)



class WorkspaceObjectVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceObjectVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceObjectVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.WorkspaceObjectVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::WorkspaceObject >::size_type":

        return _openstudioutilitiesidf.WorkspaceObjectVector___len__(self)



    def pop(self) -> "std::vector< openstudio::WorkspaceObject >::value_type":

        return _openstudioutilitiesidf.WorkspaceObjectVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::WorkspaceObject >::difference_type', j: 'std::vector< openstudio::WorkspaceObject >::difference_type') -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > > *":

        return _openstudioutilitiesidf.WorkspaceObjectVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::WorkspaceObject >::difference_type', j: 'std::vector< openstudio::WorkspaceObject >::difference_type') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::WorkspaceObject >::value_type const &":

        return _openstudioutilitiesidf.WorkspaceObjectVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector___setitem__(self, *args)



    def append(self, x: 'WorkspaceObject') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectVector_empty(self)



    def size(self) -> "std::vector< openstudio::WorkspaceObject >::size_type":

        return _openstudioutilitiesidf.WorkspaceObjectVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector_clear(self)



    def swap(self, v: 'WorkspaceObjectVector') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::WorkspaceObject >::allocator_type":

        return _openstudioutilitiesidf.WorkspaceObjectVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::WorkspaceObject >::iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVector_begin(self)



    def end(self) -> "std::vector< openstudio::WorkspaceObject >::iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::WorkspaceObject >::reverse_iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::WorkspaceObject >::reverse_iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::WorkspaceObject >::iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_WorkspaceObjectVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WorkspaceObject') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::WorkspaceObject >::value_type const &":

        return _openstudioutilitiesidf.WorkspaceObjectVector_front(self)



    def back(self) -> "std::vector< openstudio::WorkspaceObject >::value_type const &":

        return _openstudioutilitiesidf.WorkspaceObjectVector_back(self)



    def assign(self, n: 'std::vector< openstudio::WorkspaceObject >::size_type', x: 'WorkspaceObject') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::WorkspaceObject >::size_type', x: 'WorkspaceObject') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::WorkspaceObject >::size_type') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::WorkspaceObject >::size_type":

        return _openstudioutilitiesidf.WorkspaceObjectVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObjectVector

    __del__ = lambda self: None

WorkspaceObjectVector_swigregister = _openstudioutilitiesidf.WorkspaceObjectVector_swigregister

WorkspaceObjectVector_swigregister(WorkspaceObjectVector)



class WorkspaceObjectVectorVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceObjectVectorVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceObjectVectorVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___bool__(self)



    def __len__(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::size_type":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___len__(self)



    def pop(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::value_type":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_pop(self)



    def __getslice__(self, i: 'std::vector< std::vector< openstudio::WorkspaceObject > >::difference_type', j: 'std::vector< std::vector< openstudio::WorkspaceObject > >::difference_type') -> "std::vector< std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >,std::allocator< std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > > > > *":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< std::vector< openstudio::WorkspaceObject > >::difference_type', j: 'std::vector< std::vector< openstudio::WorkspaceObject > >::difference_type') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::value_type const &":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___setitem__(self, *args)



    def append(self, x: 'WorkspaceObjectVector') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_empty(self)



    def size(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::size_type":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_clear(self)



    def swap(self, v: 'WorkspaceObjectVectorVector') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_swap(self, v)



    def get_allocator(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::allocator_type":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_get_allocator(self)



    def begin(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_begin(self)



    def end(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_end(self)



    def rbegin(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::reverse_iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_rbegin(self)



    def rend(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::reverse_iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_pop_back(self)



    def erase(self, *args) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::iterator":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_WorkspaceObjectVectorVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WorkspaceObjectVector') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_push_back(self, x)



    def front(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::value_type const &":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_front(self)



    def back(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::value_type const &":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_back(self)



    def assign(self, n: 'std::vector< std::vector< openstudio::WorkspaceObject > >::size_type', x: 'WorkspaceObjectVector') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_insert(self, *args)



    def reserve(self, n: 'std::vector< std::vector< openstudio::WorkspaceObject > >::size_type') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_reserve(self, n)



    def capacity(self) -> "std::vector< std::vector< openstudio::WorkspaceObject > >::size_type":

        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObjectVectorVector

    __del__ = lambda self: None

WorkspaceObjectVectorVector_swigregister = _openstudioutilitiesidf.WorkspaceObjectVectorVector_swigregister

WorkspaceObjectVectorVector_swigregister(WorkspaceObjectVectorVector)





def applyHandleMap(*args) -> "openstudio::HandleVector":

    return _openstudioutilitiesidf.applyHandleMap(*args)

applyHandleMap = _openstudioutilitiesidf.applyHandleMap

class StrictnessLevel(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, StrictnessLevel, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, StrictnessLevel, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_StrictnessLevel(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiesidf.StrictnessLevel_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiesidf.StrictnessLevel_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiesidf.StrictnessLevel_valueDescription(self)



    def __eq__(self, other: 'StrictnessLevel') -> "bool":

        return _openstudioutilitiesidf.StrictnessLevel___eq__(self, other)



    def __ne__(self, other: 'StrictnessLevel') -> "bool":

        return _openstudioutilitiesidf.StrictnessLevel___ne__(self, other)



    def __gt__(self, other: 'StrictnessLevel') -> "bool":

        return _openstudioutilitiesidf.StrictnessLevel___gt__(self, other)



    def __ge__(self, other: 'StrictnessLevel') -> "bool":

        return _openstudioutilitiesidf.StrictnessLevel___ge__(self, other)



    def __lt__(self, other: 'StrictnessLevel') -> "bool":

        return _openstudioutilitiesidf.StrictnessLevel___lt__(self, other)



    def __le__(self, other: 'StrictnessLevel') -> "bool":

        return _openstudioutilitiesidf.StrictnessLevel___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesidf.StrictnessLevel_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiesidf.StrictnessLevel_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesidf.StrictnessLevel_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiesidf.StrictnessLevel_getValues)

    __swig_destroy__ = _openstudioutilitiesidf.delete_StrictnessLevel

    __del__ = lambda self: None

StrictnessLevel_swigregister = _openstudioutilitiesidf.StrictnessLevel_swigregister

StrictnessLevel_swigregister(StrictnessLevel)



def StrictnessLevel_enumName() -> "std::string":

    return _openstudioutilitiesidf.StrictnessLevel_enumName()

StrictnessLevel_enumName = _openstudioutilitiesidf.StrictnessLevel_enumName



def StrictnessLevel_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiesidf.StrictnessLevel_getValues()

StrictnessLevel_getValues = _openstudioutilitiesidf.StrictnessLevel_getValues



class Scope(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Scope, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Scope, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_Scope(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiesidf.Scope_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiesidf.Scope_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiesidf.Scope_valueDescription(self)



    def __eq__(self, other: 'Scope') -> "bool":

        return _openstudioutilitiesidf.Scope___eq__(self, other)



    def __ne__(self, other: 'Scope') -> "bool":

        return _openstudioutilitiesidf.Scope___ne__(self, other)



    def __gt__(self, other: 'Scope') -> "bool":

        return _openstudioutilitiesidf.Scope___gt__(self, other)



    def __ge__(self, other: 'Scope') -> "bool":

        return _openstudioutilitiesidf.Scope___ge__(self, other)



    def __lt__(self, other: 'Scope') -> "bool":

        return _openstudioutilitiesidf.Scope___lt__(self, other)



    def __le__(self, other: 'Scope') -> "bool":

        return _openstudioutilitiesidf.Scope___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesidf.Scope_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiesidf.Scope_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesidf.Scope_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiesidf.Scope_getValues)

    __swig_destroy__ = _openstudioutilitiesidf.delete_Scope

    __del__ = lambda self: None

Scope_swigregister = _openstudioutilitiesidf.Scope_swigregister

Scope_swigregister(Scope)



def Scope_enumName() -> "std::string":

    return _openstudioutilitiesidf.Scope_enumName()

Scope_enumName = _openstudioutilitiesidf.Scope_enumName



def Scope_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiesidf.Scope_getValues()

Scope_getValues = _openstudioutilitiesidf.Scope_getValues



class DataErrorType(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, DataErrorType, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, DataErrorType, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_DataErrorType(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiesidf.DataErrorType_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiesidf.DataErrorType_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiesidf.DataErrorType_valueDescription(self)



    def __eq__(self, other: 'DataErrorType') -> "bool":

        return _openstudioutilitiesidf.DataErrorType___eq__(self, other)



    def __ne__(self, other: 'DataErrorType') -> "bool":

        return _openstudioutilitiesidf.DataErrorType___ne__(self, other)



    def __gt__(self, other: 'DataErrorType') -> "bool":

        return _openstudioutilitiesidf.DataErrorType___gt__(self, other)



    def __ge__(self, other: 'DataErrorType') -> "bool":

        return _openstudioutilitiesidf.DataErrorType___ge__(self, other)



    def __lt__(self, other: 'DataErrorType') -> "bool":

        return _openstudioutilitiesidf.DataErrorType___lt__(self, other)



    def __le__(self, other: 'DataErrorType') -> "bool":

        return _openstudioutilitiesidf.DataErrorType___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesidf.DataErrorType_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiesidf.DataErrorType_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesidf.DataErrorType_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiesidf.DataErrorType_getValues)

    __swig_destroy__ = _openstudioutilitiesidf.delete_DataErrorType

    __del__ = lambda self: None

DataErrorType_swigregister = _openstudioutilitiesidf.DataErrorType_swigregister

DataErrorType_swigregister(DataErrorType)



def DataErrorType_enumName() -> "std::string":

    return _openstudioutilitiesidf.DataErrorType_enumName()

DataErrorType_enumName = _openstudioutilitiesidf.DataErrorType_enumName



def DataErrorType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiesidf.DataErrorType_getValues()

DataErrorType_getValues = _openstudioutilitiesidf.DataErrorType_getValues



class DataError(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, DataError, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, DataError, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_DataError(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def scope(self) -> "openstudio::Scope":

        return _openstudioutilitiesidf.DataError_scope(self)



    def type(self) -> "openstudio::DataErrorType":

        return _openstudioutilitiesidf.DataError_type(self)



    def fieldIdentifier(self) -> "unsigned int":

        return _openstudioutilitiesidf.DataError_fieldIdentifier(self)



    def objectIdentifier(self) -> "openstudio::Handle":

        return _openstudioutilitiesidf.DataError_objectIdentifier(self)



    def objectName(self) -> "std::string":

        return _openstudioutilitiesidf.DataError_objectName(self)



    def objectType(self) -> "boost::optional< openstudio::IddObjectType >":

        return _openstudioutilitiesidf.DataError_objectType(self)



    def __eq__(self, otherError: 'DataError') -> "bool":

        return _openstudioutilitiesidf.DataError___eq__(self, otherError)



    def __ne__(self, otherError: 'DataError') -> "bool":

        return _openstudioutilitiesidf.DataError___ne__(self, otherError)



    def __str__(self) -> "std::string":

        return _openstudioutilitiesidf.DataError___str__(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_DataError

    __del__ = lambda self: None

DataError_swigregister = _openstudioutilitiesidf.DataError_swigregister

DataError_swigregister(DataError)



class DataErrorLess(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, DataErrorLess, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, DataErrorLess, name)

    __repr__ = _swig_repr



    def __call__(self, left: 'DataError', right: 'DataError') -> "bool":

        return _openstudioutilitiesidf.DataErrorLess___call__(self, left, right)



    def __init__(self):

        this = _openstudioutilitiesidf.new_DataErrorLess()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesidf.delete_DataErrorLess

    __del__ = lambda self: None

DataErrorLess_swigregister = _openstudioutilitiesidf.DataErrorLess_swigregister

DataErrorLess_swigregister(DataErrorLess)



class ValidityReport(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ValidityReport, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ValidityReport, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_ValidityReport(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def insertError(self, error: 'DataError') -> "void":

        return _openstudioutilitiesidf.ValidityReport_insertError(self, error)



    def level(self) -> "openstudio::StrictnessLevel":

        return _openstudioutilitiesidf.ValidityReport_level(self)



    def scope(self) -> "openstudio::Scope":

        return _openstudioutilitiesidf.ValidityReport_scope(self)



    def objectName(self) -> "std::string":

        return _openstudioutilitiesidf.ValidityReport_objectName(self)



    def objectType(self) -> "boost::optional< openstudio::IddObjectType >":

        return _openstudioutilitiesidf.ValidityReport_objectType(self)



    def numErrors(self) -> "unsigned int":

        return _openstudioutilitiesidf.ValidityReport_numErrors(self)



    def nextError(self) -> "boost::optional< openstudio::DataError >":

        return _openstudioutilitiesidf.ValidityReport_nextError(self)



    def __str__(self) -> "std::string":

        return _openstudioutilitiesidf.ValidityReport___str__(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_ValidityReport

    __del__ = lambda self: None

ValidityReport_swigregister = _openstudioutilitiesidf.ValidityReport_swigregister

ValidityReport_swigregister(ValidityReport)



class IdfObject(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IdfObject, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IdfObject, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_IdfObject(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObject

    __del__ = lambda self: None



    def clone(self, keepHandle: 'bool'=False) -> "openstudio::IdfObject":

        return _openstudioutilitiesidf.IdfObject_clone(self, keepHandle)



    def handle(self) -> "openstudio::Handle":

        return _openstudioutilitiesidf.IdfObject_handle(self)



    def iddObject(self) -> "openstudio::IddObject":

        return _openstudioutilitiesidf.IdfObject_iddObject(self)



    def comment(self) -> "std::string":

        return _openstudioutilitiesidf.IdfObject_comment(self)



    def fieldComment(self, index: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< std::string >":

        return _openstudioutilitiesidf.IdfObject_fieldComment(self, index, returnDefault)



    def name(self, returnDefault: 'bool'=False) -> "boost::optional< std::string >":

        return _openstudioutilitiesidf.IdfObject_name(self, returnDefault)



    def nameString(self, returnDefault: 'bool'=False) -> "std::string":

        return _openstudioutilitiesidf.IdfObject_nameString(self, returnDefault)



    def briefDescription(self) -> "std::string":

        return _openstudioutilitiesidf.IdfObject_briefDescription(self)



    def isEmpty(self, index: 'unsigned int') -> "bool":

        return _openstudioutilitiesidf.IdfObject_isEmpty(self, index)



    def getString(self, index: 'unsigned int', returnDefault: 'bool'=False, returnUninitializedEmpty: 'bool'=False) -> "boost::optional< std::string >":

        return _openstudioutilitiesidf.IdfObject_getString(self, index, returnDefault, returnUninitializedEmpty)



    def getDouble(self, index: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< double >":

        return _openstudioutilitiesidf.IdfObject_getDouble(self, index, returnDefault)



    def getQuantity(self, index: 'unsigned int', returnDefault: 'bool'=False, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudioutilitiesidf.IdfObject_getQuantity(self, index, returnDefault, returnIP)



    def getUnsigned(self, index: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< unsigned int >":

        return _openstudioutilitiesidf.IdfObject_getUnsigned(self, index, returnDefault)



    def getInt(self, index: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< int >":

        return _openstudioutilitiesidf.IdfObject_getInt(self, index, returnDefault)



    def getURL(self, index: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< QUrl >":

        return _openstudioutilitiesidf.IdfObject_getURL(self, index, returnDefault)



    def getExtensibleGroup(self, groupIndex: 'unsigned int') -> "openstudio::IdfExtensibleGroup":

        return _openstudioutilitiesidf.IdfObject_getExtensibleGroup(self, groupIndex)



    def extensibleGroups(self) -> "std::vector< openstudio::IdfExtensibleGroup,std::allocator< openstudio::IdfExtensibleGroup > >":

        return _openstudioutilitiesidf.IdfObject_extensibleGroups(self)



    def setComment(self, msg: 'std::string const &') -> "void":

        return _openstudioutilitiesidf.IdfObject_setComment(self, msg)



    def setFieldComment(self, index: 'unsigned int', cmnt: 'std::string const &') -> "bool":

        return _openstudioutilitiesidf.IdfObject_setFieldComment(self, index, cmnt)



    def setName(self, newName: 'std::string const &') -> "boost::optional< std::string >":

        return _openstudioutilitiesidf.IdfObject_setName(self, newName)



    def createName(self, overwrite: 'bool'=True) -> "boost::optional< std::string >":

        return _openstudioutilitiesidf.IdfObject_createName(self, overwrite)



    def setString(self, index: 'unsigned int', value: 'std::string const &') -> "bool":

        return _openstudioutilitiesidf.IdfObject_setString(self, index, value)



    def setDouble(self, index: 'unsigned int', value: 'double') -> "bool":

        return _openstudioutilitiesidf.IdfObject_setDouble(self, index, value)



    def setQuantity(self, index: 'unsigned int', q: 'Quantity') -> "bool":

        return _openstudioutilitiesidf.IdfObject_setQuantity(self, index, q)



    def setUnsigned(self, index: 'unsigned int', value: 'unsigned int') -> "bool":

        return _openstudioutilitiesidf.IdfObject_setUnsigned(self, index, value)



    def setInt(self, index: 'unsigned int', value: 'int') -> "bool":

        return _openstudioutilitiesidf.IdfObject_setInt(self, index, value)



    def pushExtensibleGroup(self, *args) -> "openstudio::IdfExtensibleGroup":

        return _openstudioutilitiesidf.IdfObject_pushExtensibleGroup(self, *args)



    def insertExtensibleGroup(self, *args) -> "openstudio::IdfExtensibleGroup":

        return _openstudioutilitiesidf.IdfObject_insertExtensibleGroup(self, *args)



    def popExtensibleGroup(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesidf.IdfObject_popExtensibleGroup(self)



    def eraseExtensibleGroup(self, groupIndex: 'unsigned int') -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesidf.IdfObject_eraseExtensibleGroup(self, groupIndex)



    def clearExtensibleGroups(self) -> "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >":

        return _openstudioutilitiesidf.IdfObject_clearExtensibleGroups(self)



    def numFields(self) -> "unsigned int":

        return _openstudioutilitiesidf.IdfObject_numFields(self)



    def numNonextensibleFields(self) -> "unsigned int":

        return _openstudioutilitiesidf.IdfObject_numNonextensibleFields(self)



    def minFields(self) -> "unsigned int":

        return _openstudioutilitiesidf.IdfObject_minFields(self)



    def maxFields(self) -> "boost::optional< unsigned int >":

        return _openstudioutilitiesidf.IdfObject_maxFields(self)



    def numExtensibleGroups(self) -> "unsigned int":

        return _openstudioutilitiesidf.IdfObject_numExtensibleGroups(self)



    def minExtensibleGroups(self) -> "unsigned int":

        return _openstudioutilitiesidf.IdfObject_minExtensibleGroups(self)



    def maxExtensibleGroups(self) -> "boost::optional< unsigned int >":

        return _openstudioutilitiesidf.IdfObject_maxExtensibleGroups(self)



    def isObjectListField(self, index: 'unsigned int') -> "bool":

        return _openstudioutilitiesidf.IdfObject_isObjectListField(self, index)



    def objectListFields(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudioutilitiesidf.IdfObject_objectListFields(self)



    def isDataField(self, index: 'unsigned int') -> "bool":

        return _openstudioutilitiesidf.IdfObject_isDataField(self, index)



    def dataFields(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudioutilitiesidf.IdfObject_dataFields(self)



    def requiredFields(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudioutilitiesidf.IdfObject_requiredFields(self)



    def isValid(self, level: 'StrictnessLevel', checkNames: 'bool'=False) -> "bool":

        return _openstudioutilitiesidf.IdfObject_isValid(self, level, checkNames)



    def validityReport(self, level: 'StrictnessLevel', checkNames: 'bool'=False) -> "openstudio::ValidityReport":

        return _openstudioutilitiesidf.IdfObject_validityReport(self, level, checkNames)



    def dataFieldsEqual(self, other: 'IdfObject') -> "bool":

        return _openstudioutilitiesidf.IdfObject_dataFieldsEqual(self, other)



    def objectListFieldsEqual(self, other: 'IdfObject') -> "bool":

        return _openstudioutilitiesidf.IdfObject_objectListFieldsEqual(self, other)



    def objectListFieldsNonConflicting(self, other: 'IdfObject') -> "bool":

        return _openstudioutilitiesidf.IdfObject_objectListFieldsNonConflicting(self, other)



    def __eq__(self, other: 'IdfObject') -> "bool":

        return _openstudioutilitiesidf.IdfObject___eq__(self, other)



    def __ne__(self, other: 'IdfObject') -> "bool":

        return _openstudioutilitiesidf.IdfObject___ne__(self, other)

    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesidf.IdfObject_load

    if _newclass:

        load = staticmethod(_openstudioutilitiesidf.IdfObject_load)

    __swig_getmethods__["printedFieldSpace"] = lambda x: _openstudioutilitiesidf.IdfObject_printedFieldSpace

    if _newclass:

        printedFieldSpace = staticmethod(_openstudioutilitiesidf.IdfObject_printedFieldSpace)



    def printName(self, os: 'std::ostream &', hasFields: 'bool'=True) -> "std::ostream &":

        return _openstudioutilitiesidf.IdfObject_printName(self, os, hasFields)



    def printField(self, os: 'std::ostream &', index: 'unsigned int', isLastField: 'bool'=False) -> "std::ostream &":

        return _openstudioutilitiesidf.IdfObject_printField(self, os, index, isLastField)



    def __str__(self) -> "std::string":

        return _openstudioutilitiesidf.IdfObject___str__(self)

IdfObject_swigregister = _openstudioutilitiesidf.IdfObject_swigregister

IdfObject_swigregister(IdfObject)



def IdfObject_load(*args) -> "boost::optional< openstudio::IdfObject >":

    return _openstudioutilitiesidf.IdfObject_load(*args)

IdfObject_load = _openstudioutilitiesidf.IdfObject_load



def IdfObject_printedFieldSpace() -> "int":

    return _openstudioutilitiesidf.IdfObject_printedFieldSpace()

IdfObject_printedFieldSpace = _openstudioutilitiesidf.IdfObject_printedFieldSpace



class IdfObjectNameLess(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IdfObjectNameLess, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IdfObjectNameLess, name)

    __repr__ = _swig_repr



    def __call__(self, left: 'IdfObject', right: 'IdfObject') -> "bool":

        return _openstudioutilitiesidf.IdfObjectNameLess___call__(self, left, right)



    def __init__(self):

        this = _openstudioutilitiesidf.new_IdfObjectNameLess()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectNameLess

    __del__ = lambda self: None

IdfObjectNameLess_swigregister = _openstudioutilitiesidf.IdfObjectNameLess_swigregister

IdfObjectNameLess_swigregister(IdfObjectNameLess)



class IdfObjectImplLess(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IdfObjectImplLess, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IdfObjectImplLess, name)

    __repr__ = _swig_repr



    def __call__(self, left: 'IdfObject', right: 'IdfObject') -> "bool":

        return _openstudioutilitiesidf.IdfObjectImplLess___call__(self, left, right)



    def __init__(self):

        this = _openstudioutilitiesidf.new_IdfObjectImplLess()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectImplLess

    __del__ = lambda self: None

IdfObjectImplLess_swigregister = _openstudioutilitiesidf.IdfObjectImplLess_swigregister

IdfObjectImplLess_swigregister(IdfObjectImplLess)



class IdfObjectTypeLess(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IdfObjectTypeLess, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IdfObjectTypeLess, name)

    __repr__ = _swig_repr



    def __call__(self, left: 'IdfObject', right: 'IdfObject') -> "bool":

        return _openstudioutilitiesidf.IdfObjectTypeLess___call__(self, left, right)



    def __init__(self):

        this = _openstudioutilitiesidf.new_IdfObjectTypeLess()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectTypeLess

    __del__ = lambda self: None

IdfObjectTypeLess_swigregister = _openstudioutilitiesidf.IdfObjectTypeLess_swigregister

IdfObjectTypeLess_swigregister(IdfObjectTypeLess)





def objectName(obj: 'IdfObject') -> "std::string":

    return _openstudioutilitiesidf.objectName(obj)

objectName = _openstudioutilitiesidf.objectName

class QUrlPathPair(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QUrlPathPair, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QUrlPathPair, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_QUrlPathPair(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_setmethods__["first"] = _openstudioutilitiesidf.QUrlPathPair_first_set

    __swig_getmethods__["first"] = _openstudioutilitiesidf.QUrlPathPair_first_get

    if _newclass:

        first = _swig_property(_openstudioutilitiesidf.QUrlPathPair_first_get, _openstudioutilitiesidf.QUrlPathPair_first_set)

    __swig_setmethods__["second"] = _openstudioutilitiesidf.QUrlPathPair_second_set

    __swig_getmethods__["second"] = _openstudioutilitiesidf.QUrlPathPair_second_get

    if _newclass:

        second = _swig_property(_openstudioutilitiesidf.QUrlPathPair_second_get, _openstudioutilitiesidf.QUrlPathPair_second_set)

    def __len__(self):

        return 2

    def __repr__(self):

        return str((self.first, self.second))

    def __getitem__(self, index): 

        if not (index % 2):

            return self.first

        else:

            return self.second

    def __setitem__(self, index, val):

        if not (index % 2):

            self.first = val

        else:

            self.second = val

    __swig_destroy__ = _openstudioutilitiesidf.delete_QUrlPathPair

    __del__ = lambda self: None

QUrlPathPair_swigregister = _openstudioutilitiesidf.QUrlPathPair_swigregister

QUrlPathPair_swigregister(QUrlPathPair)



class QUrlPathPairVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QUrlPathPairVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QUrlPathPairVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.QUrlPathPairVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesidf.QUrlPathPairVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesidf.QUrlPathPairVector___bool__(self)



    def __len__(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::size_type":

        return _openstudioutilitiesidf.QUrlPathPairVector___len__(self)



    def pop(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::value_type":

        return _openstudioutilitiesidf.QUrlPathPairVector_pop(self)



    def __getslice__(self, i: 'std::vector< std::pair< QUrl,openstudio::path > >::difference_type', j: 'std::vector< std::pair< QUrl,openstudio::path > >::difference_type') -> "std::vector< std::pair< QUrl,openstudio::path >,std::allocator< std::pair< QUrl,openstudio::path > > > *":

        return _openstudioutilitiesidf.QUrlPathPairVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< std::pair< QUrl,openstudio::path > >::difference_type', j: 'std::vector< std::pair< QUrl,openstudio::path > >::difference_type') -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< std::pair< QUrl,openstudio::path > >::value_type const &":

        return _openstudioutilitiesidf.QUrlPathPairVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector___setitem__(self, *args)



    def append(self, x: 'QUrlPathPair') -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.QUrlPathPairVector_empty(self)



    def size(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::size_type":

        return _openstudioutilitiesidf.QUrlPathPairVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector_clear(self)



    def swap(self, v: 'QUrlPathPairVector') -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector_swap(self, v)



    def get_allocator(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::allocator_type":

        return _openstudioutilitiesidf.QUrlPathPairVector_get_allocator(self)



    def begin(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::iterator":

        return _openstudioutilitiesidf.QUrlPathPairVector_begin(self)



    def end(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::iterator":

        return _openstudioutilitiesidf.QUrlPathPairVector_end(self)



    def rbegin(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::reverse_iterator":

        return _openstudioutilitiesidf.QUrlPathPairVector_rbegin(self)



    def rend(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::reverse_iterator":

        return _openstudioutilitiesidf.QUrlPathPairVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector_pop_back(self)



    def erase(self, *args) -> "std::vector< std::pair< QUrl,openstudio::path > >::iterator":

        return _openstudioutilitiesidf.QUrlPathPairVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_QUrlPathPairVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'QUrlPathPair') -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector_push_back(self, x)



    def front(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::value_type const &":

        return _openstudioutilitiesidf.QUrlPathPairVector_front(self)



    def back(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::value_type const &":

        return _openstudioutilitiesidf.QUrlPathPairVector_back(self)



    def assign(self, n: 'std::vector< std::pair< QUrl,openstudio::path > >::size_type', x: 'QUrlPathPair') -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector_insert(self, *args)



    def reserve(self, n: 'std::vector< std::pair< QUrl,openstudio::path > >::size_type') -> "void":

        return _openstudioutilitiesidf.QUrlPathPairVector_reserve(self, n)



    def capacity(self) -> "std::vector< std::pair< QUrl,openstudio::path > >::size_type":

        return _openstudioutilitiesidf.QUrlPathPairVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_QUrlPathPairVector

    __del__ = lambda self: None

QUrlPathPairVector_swigregister = _openstudioutilitiesidf.QUrlPathPairVector_swigregister

QUrlPathPairVector_swigregister(QUrlPathPairVector)





def getIdfObjectHandles(objects: 'IdfObjectVector') -> "std::vector< openstudio::Handle,std::allocator< openstudio::Handle > >":

    return _openstudioutilitiesidf.getIdfObjectHandles(objects)

getIdfObjectHandles = _openstudioutilitiesidf.getIdfObjectHandles



def getWorkspaceObjectHandles(objects: 'WorkspaceObjectVector') -> "std::vector< openstudio::Handle,std::allocator< openstudio::Handle > >":

    return _openstudioutilitiesidf.getWorkspaceObjectHandles(objects)

getWorkspaceObjectHandles = _openstudioutilitiesidf.getWorkspaceObjectHandles

class HandleSet(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, HandleSet, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, HandleSet, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.HandleSet_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesidf.HandleSet___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesidf.HandleSet___bool__(self)



    def __len__(self) -> "std::set< openstudio::UUID >::size_type":

        return _openstudioutilitiesidf.HandleSet___len__(self)



    def append(self, x: 'UUID') -> "void":

        return _openstudioutilitiesidf.HandleSet_append(self, x)



    def __contains__(self, x: 'UUID') -> "bool":

        return _openstudioutilitiesidf.HandleSet___contains__(self, x)



    def __getitem__(self, i: 'std::set< openstudio::UUID >::difference_type') -> "std::set< openstudio::UUID >::value_type":

        return _openstudioutilitiesidf.HandleSet___getitem__(self, i)



    def add(self, x: 'UUID') -> "void":

        return _openstudioutilitiesidf.HandleSet_add(self, x)



    def discard(self, x: 'UUID') -> "void":

        return _openstudioutilitiesidf.HandleSet_discard(self, x)



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_HandleSet(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.HandleSet_empty(self)



    def size(self) -> "std::set< openstudio::UUID >::size_type":

        return _openstudioutilitiesidf.HandleSet_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesidf.HandleSet_clear(self)



    def swap(self, v: 'HandleSet') -> "void":

        return _openstudioutilitiesidf.HandleSet_swap(self, v)



    def count(self, x: 'UUID') -> "std::set< openstudio::UUID >::size_type":

        return _openstudioutilitiesidf.HandleSet_count(self, x)



    def begin(self) -> "std::set< openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleSet_begin(self)



    def end(self) -> "std::set< openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleSet_end(self)



    def rbegin(self) -> "std::set< openstudio::UUID >::reverse_iterator":

        return _openstudioutilitiesidf.HandleSet_rbegin(self)



    def rend(self) -> "std::set< openstudio::UUID >::reverse_iterator":

        return _openstudioutilitiesidf.HandleSet_rend(self)



    def erase(self, *args) -> "void":

        return _openstudioutilitiesidf.HandleSet_erase(self, *args)



    def find(self, x: 'UUID') -> "std::set< openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleSet_find(self, x)



    def lower_bound(self, x: 'UUID') -> "std::set< openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleSet_lower_bound(self, x)



    def upper_bound(self, x: 'UUID') -> "std::set< openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleSet_upper_bound(self, x)



    def equal_range(self, x: 'UUID') -> "std::pair< std::set< openstudio::UUID >::iterator,std::set< openstudio::UUID >::iterator >":

        return _openstudioutilitiesidf.HandleSet_equal_range(self, x)



    def insert(self, __x: 'UUID') -> "std::pair< std::set< openstudio::UUID >::iterator,bool >":

        return _openstudioutilitiesidf.HandleSet_insert(self, __x)

    __swig_destroy__ = _openstudioutilitiesidf.delete_HandleSet

    __del__ = lambda self: None

HandleSet_swigregister = _openstudioutilitiesidf.HandleSet_swigregister

HandleSet_swigregister(HandleSet)



class HandleMap(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, HandleMap, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, HandleMap, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.HandleMap_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesidf.HandleMap___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesidf.HandleMap___bool__(self)



    def __len__(self) -> "std::map< openstudio::UUID,openstudio::UUID >::size_type":

        return _openstudioutilitiesidf.HandleMap___len__(self)

    def __iter__(self):

        return self.key_iterator()

    def iterkeys(self):

        return self.key_iterator()

    def itervalues(self):

        return self.value_iterator()

    def iteritems(self):

        return self.iterator()



    def __getitem__(self, key: 'UUID') -> "std::map< openstudio::UUID,openstudio::UUID >::mapped_type const &":

        return _openstudioutilitiesidf.HandleMap___getitem__(self, key)



    def __delitem__(self, key: 'UUID') -> "void":

        return _openstudioutilitiesidf.HandleMap___delitem__(self, key)



    def has_key(self, key: 'UUID') -> "bool":

        return _openstudioutilitiesidf.HandleMap_has_key(self, key)



    def keys(self) -> "PyObject *":

        return _openstudioutilitiesidf.HandleMap_keys(self)



    def values(self) -> "PyObject *":

        return _openstudioutilitiesidf.HandleMap_values(self)



    def items(self) -> "PyObject *":

        return _openstudioutilitiesidf.HandleMap_items(self)



    def __contains__(self, key: 'UUID') -> "bool":

        return _openstudioutilitiesidf.HandleMap___contains__(self, key)



    def key_iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.HandleMap_key_iterator(self)



    def value_iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.HandleMap_value_iterator(self)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.HandleMap___setitem__(self, *args)



    def asdict(self) -> "PyObject *":

        return _openstudioutilitiesidf.HandleMap_asdict(self)



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_HandleMap(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.HandleMap_empty(self)



    def size(self) -> "std::map< openstudio::UUID,openstudio::UUID >::size_type":

        return _openstudioutilitiesidf.HandleMap_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesidf.HandleMap_clear(self)



    def swap(self, v: 'HandleMap') -> "void":

        return _openstudioutilitiesidf.HandleMap_swap(self, v)



    def get_allocator(self) -> "std::map< openstudio::UUID,openstudio::UUID >::allocator_type":

        return _openstudioutilitiesidf.HandleMap_get_allocator(self)



    def begin(self) -> "std::map< openstudio::UUID,openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleMap_begin(self)



    def end(self) -> "std::map< openstudio::UUID,openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleMap_end(self)



    def rbegin(self) -> "std::map< openstudio::UUID,openstudio::UUID >::reverse_iterator":

        return _openstudioutilitiesidf.HandleMap_rbegin(self)



    def rend(self) -> "std::map< openstudio::UUID,openstudio::UUID >::reverse_iterator":

        return _openstudioutilitiesidf.HandleMap_rend(self)



    def count(self, x: 'UUID') -> "std::map< openstudio::UUID,openstudio::UUID >::size_type":

        return _openstudioutilitiesidf.HandleMap_count(self, x)



    def erase(self, *args) -> "void":

        return _openstudioutilitiesidf.HandleMap_erase(self, *args)



    def find(self, x: 'UUID') -> "std::map< openstudio::UUID,openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleMap_find(self, x)



    def lower_bound(self, x: 'UUID') -> "std::map< openstudio::UUID,openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleMap_lower_bound(self, x)



    def upper_bound(self, x: 'UUID') -> "std::map< openstudio::UUID,openstudio::UUID >::iterator":

        return _openstudioutilitiesidf.HandleMap_upper_bound(self, x)

    __swig_destroy__ = _openstudioutilitiesidf.delete_HandleMap

    __del__ = lambda self: None

HandleMap_swigregister = _openstudioutilitiesidf.HandleMap_swigregister

HandleMap_swigregister(HandleMap)



class URLSearchPathVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, URLSearchPathVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, URLSearchPathVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesidf.URLSearchPathVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesidf.URLSearchPathVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesidf.URLSearchPathVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::URLSearchPath >::size_type":

        return _openstudioutilitiesidf.URLSearchPathVector___len__(self)



    def pop(self) -> "std::vector< openstudio::URLSearchPath >::value_type":

        return _openstudioutilitiesidf.URLSearchPathVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::URLSearchPath >::difference_type', j: 'std::vector< openstudio::URLSearchPath >::difference_type') -> "std::vector< openstudio::URLSearchPath,std::allocator< openstudio::URLSearchPath > > *":

        return _openstudioutilitiesidf.URLSearchPathVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::URLSearchPath >::difference_type', j: 'std::vector< openstudio::URLSearchPath >::difference_type') -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::URLSearchPath >::value_type const &":

        return _openstudioutilitiesidf.URLSearchPathVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector___setitem__(self, *args)



    def append(self, x: 'URLSearchPath') -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.URLSearchPathVector_empty(self)



    def size(self) -> "std::vector< openstudio::URLSearchPath >::size_type":

        return _openstudioutilitiesidf.URLSearchPathVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector_clear(self)



    def swap(self, v: 'URLSearchPathVector') -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::URLSearchPath >::allocator_type":

        return _openstudioutilitiesidf.URLSearchPathVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::URLSearchPath >::iterator":

        return _openstudioutilitiesidf.URLSearchPathVector_begin(self)



    def end(self) -> "std::vector< openstudio::URLSearchPath >::iterator":

        return _openstudioutilitiesidf.URLSearchPathVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::URLSearchPath >::reverse_iterator":

        return _openstudioutilitiesidf.URLSearchPathVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::URLSearchPath >::reverse_iterator":

        return _openstudioutilitiesidf.URLSearchPathVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::URLSearchPath >::iterator":

        return _openstudioutilitiesidf.URLSearchPathVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_URLSearchPathVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'URLSearchPath') -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::URLSearchPath >::value_type const &":

        return _openstudioutilitiesidf.URLSearchPathVector_front(self)



    def back(self) -> "std::vector< openstudio::URLSearchPath >::value_type const &":

        return _openstudioutilitiesidf.URLSearchPathVector_back(self)



    def assign(self, n: 'std::vector< openstudio::URLSearchPath >::size_type', x: 'URLSearchPath') -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::URLSearchPath >::size_type', x: 'URLSearchPath') -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::URLSearchPath >::size_type') -> "void":

        return _openstudioutilitiesidf.URLSearchPathVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::URLSearchPath >::size_type":

        return _openstudioutilitiesidf.URLSearchPathVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_URLSearchPathVector

    __del__ = lambda self: None

URLSearchPathVector_swigregister = _openstudioutilitiesidf.URLSearchPathVector_swigregister

URLSearchPathVector_swigregister(URLSearchPathVector)



class OptionalURLSearchPath(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalURLSearchPath, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalURLSearchPath, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_OptionalURLSearchPath(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesidf.OptionalURLSearchPath_reset(self)



    def __ref__(self) -> "openstudio::URLSearchPath":

        return _openstudioutilitiesidf.OptionalURLSearchPath___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesidf.OptionalURLSearchPath_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesidf.OptionalURLSearchPath_isNull(self)



    def get(self) -> "openstudio::URLSearchPath":

        return _openstudioutilitiesidf.OptionalURLSearchPath_get(self)



    def set(self, t: 'URLSearchPath') -> "void":

        return _openstudioutilitiesidf.OptionalURLSearchPath_set(self, t)

    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalURLSearchPath

    __del__ = lambda self: None

OptionalURLSearchPath_swigregister = _openstudioutilitiesidf.OptionalURLSearchPath_swigregister

OptionalURLSearchPath_swigregister(OptionalURLSearchPath)



class URLSearchPath(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, URLSearchPath, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, URLSearchPath, name)

    __repr__ = _swig_repr

    ToInputFile = _openstudioutilitiesidf.URLSearchPath_ToInputFile

    ToCurrentWorkingDir = _openstudioutilitiesidf.URLSearchPath_ToCurrentWorkingDir



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_URLSearchPath(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def getUrl(self) -> "QUrl":

        return _openstudioutilitiesidf.URLSearchPath_getUrl(self)



    def getRelativity(self) -> "openstudio::URLSearchPath::Relative":

        return _openstudioutilitiesidf.URLSearchPath_getRelativity(self)



    def getIddObjectType(self) -> "boost::optional< openstudio::IddObjectType >":

        return _openstudioutilitiesidf.URLSearchPath_getIddObjectType(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_URLSearchPath

    __del__ = lambda self: None

URLSearchPath_swigregister = _openstudioutilitiesidf.URLSearchPath_swigregister

URLSearchPath_swigregister(URLSearchPath)



class IdfExtensibleGroup(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IdfExtensibleGroup, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IdfExtensibleGroup, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfExtensibleGroup

    __del__ = lambda self: None



    def fields(self, returnDefault: 'bool'=False) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_fields(self, returnDefault)



    def fieldComments(self, returnDefault: 'bool'=False) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_fieldComments(self, returnDefault)



    def fieldComment(self, fieldIndex: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< std::string >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_fieldComment(self, fieldIndex, returnDefault)



    def getString(self, fieldIndex: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< std::string >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_getString(self, fieldIndex, returnDefault)



    def isEmpty(self, fieldIndex: 'unsigned int') -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup_isEmpty(self, fieldIndex)



    def getDouble(self, fieldIndex: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< double >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_getDouble(self, fieldIndex, returnDefault)



    def getUnsigned(self, fieldIndex: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< unsigned int >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_getUnsigned(self, fieldIndex, returnDefault)



    def getInt(self, fieldIndex: 'unsigned int', returnDefault: 'bool'=False) -> "boost::optional< int >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_getInt(self, fieldIndex, returnDefault)



    def setFieldComment(self, fieldIndex: 'unsigned int', cmnt: 'std::string const &') -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup_setFieldComment(self, fieldIndex, cmnt)



    def setFields(self, values: 'StringVector') -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup_setFields(self, values)



    def setString(self, *args) -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup_setString(self, *args)



    def setDouble(self, fieldIndex: 'unsigned int', value: 'double') -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup_setDouble(self, fieldIndex, value)



    def setUnsigned(self, fieldIndex: 'unsigned int', value: 'unsigned int') -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup_setUnsigned(self, fieldIndex, value)



    def setInt(self, fieldIndex: 'unsigned int', value: 'int') -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup_setInt(self, fieldIndex, value)



    def pushClone(self) -> "openstudio::IdfExtensibleGroup":

        return _openstudioutilitiesidf.IdfExtensibleGroup_pushClone(self)



    def insertClone(self, groupIndex: 'unsigned int') -> "openstudio::IdfExtensibleGroup":

        return _openstudioutilitiesidf.IdfExtensibleGroup_insertClone(self, groupIndex)



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup_empty(self)



    def groupIndex(self) -> "unsigned int":

        return _openstudioutilitiesidf.IdfExtensibleGroup_groupIndex(self)



    def numFields(self) -> "unsigned int":

        return _openstudioutilitiesidf.IdfExtensibleGroup_numFields(self)



    def isValid(self, fieldIndex: 'unsigned int') -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup_isValid(self, fieldIndex)



    def objectListFields(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_objectListFields(self)



    def dataFields(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_dataFields(self)



    def requiredFields(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_requiredFields(self)



    def __eq__(self, other: 'IdfExtensibleGroup') -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup___eq__(self, other)



    def __ne__(self, other: 'IdfExtensibleGroup') -> "bool":

        return _openstudioutilitiesidf.IdfExtensibleGroup___ne__(self, other)



    def to_WorkspaceExtensibleGroup(self) -> "boost::optional< openstudio::WorkspaceExtensibleGroup >":

        return _openstudioutilitiesidf.IdfExtensibleGroup_to_WorkspaceExtensibleGroup(self)

IdfExtensibleGroup_swigregister = _openstudioutilitiesidf.IdfExtensibleGroup_swigregister

IdfExtensibleGroup_swigregister(IdfExtensibleGroup)



class ImfFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ImfFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ImfFile, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_ImfFile(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def iddFile(self) -> "openstudio::IddFile":

        return _openstudioutilitiesidf.ImfFile_iddFile(self)



    def iddFileType(self) -> "openstudio::IddFileType":

        return _openstudioutilitiesidf.ImfFile_iddFileType(self)



    def sectionNames(self) -> "openstudio::StringVector":

        return _openstudioutilitiesidf.ImfFile_sectionNames(self)



    def section(self, section: 'std::string const &') -> "openstudio::IdfObjectVector":

        return _openstudioutilitiesidf.ImfFile_section(self, section)



    def numSections(self) -> "unsigned int":

        return _openstudioutilitiesidf.ImfFile_numSections(self)

    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesidf.ImfFile_load

    if _newclass:

        load = staticmethod(_openstudioutilitiesidf.ImfFile_load)



    def save(self, p: 'path', overwrite: 'bool'=False) -> "bool":

        return _openstudioutilitiesidf.ImfFile_save(self, p, overwrite)



    def __str__(self) -> "std::string":

        return _openstudioutilitiesidf.ImfFile___str__(self)

    __swig_destroy__ = _openstudioutilitiesidf.delete_ImfFile

    __del__ = lambda self: None

ImfFile_swigregister = _openstudioutilitiesidf.ImfFile_swigregister

ImfFile_swigregister(ImfFile)



def ImfFile_load(*args) -> "boost::optional< openstudio::ImfFile >":

    return _openstudioutilitiesidf.ImfFile_load(*args)

ImfFile_load = _openstudioutilitiesidf.ImfFile_load



class IdfFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IdfFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IdfFile, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_IdfFile(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def header(self) -> "std::string":

        return _openstudioutilitiesidf.IdfFile_header(self)



    def version(self) -> "openstudio::VersionString":

        return _openstudioutilitiesidf.IdfFile_version(self)



    def iddFile(self) -> "openstudio::IddFile":

        return _openstudioutilitiesidf.IdfFile_iddFile(self)



    def iddFileType(self) -> "openstudio::IddFileType":

        return _openstudioutilitiesidf.IdfFile_iddFileType(self)



    def versionObject(self) -> "boost::optional< openstudio::IdfObject >":

        return _openstudioutilitiesidf.IdfFile_versionObject(self)



    def getObject(self, *args) -> "boost::optional< openstudio::IdfObject >":

        return _openstudioutilitiesidf.IdfFile_getObject(self, *args)



    def objects(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudioutilitiesidf.IdfFile_objects(self)



    def getObjectsByType(self, *args) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudioutilitiesidf.IdfFile_getObjectsByType(self, *args)



    def getObjectsByName(self, name: 'std::string const &') -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudioutilitiesidf.IdfFile_getObjectsByName(self, name)



    def setHeader(self, header: 'std::string const &') -> "void":

        return _openstudioutilitiesidf.IdfFile_setHeader(self, header)



    def addObject(self, object: 'IdfObject') -> "void":

        return _openstudioutilitiesidf.IdfFile_addObject(self, object)



    def addObjects(self, objects: 'IdfObjectVector') -> "void":

        return _openstudioutilitiesidf.IdfFile_addObjects(self, objects)



    def insertObjectByIddObjectType(self, object: 'IdfObject') -> "void":

        return _openstudioutilitiesidf.IdfFile_insertObjectByIddObjectType(self, object)



    def removeObject(self, object: 'IdfObject') -> "bool":

        return _openstudioutilitiesidf.IdfFile_removeObject(self, object)



    def removeObjects(self, objects: 'IdfObjectVector') -> "int":

        return _openstudioutilitiesidf.IdfFile_removeObjects(self, objects)



    def empty(self) -> "bool":

        return _openstudioutilitiesidf.IdfFile_empty(self)



    def numObjects(self) -> "unsigned int":

        return _openstudioutilitiesidf.IdfFile_numObjects(self)



    def numObjectsOfType(self, *args) -> "unsigned int":

        return _openstudioutilitiesidf.IdfFile_numObjectsOfType(self, *args)



    def isValid(self, level: 'StrictnessLevel') -> "bool":

        return _openstudioutilitiesidf.IdfFile_isValid(self, level)



    def validityReport(self, level: 'StrictnessLevel') -> "openstudio::ValidityReport":

        return _openstudioutilitiesidf.IdfFile_validityReport(self, level)

    __swig_getmethods__["loadVersionOnly"] = lambda x: _openstudioutilitiesidf.IdfFile_loadVersionOnly

    if _newclass:

        loadVersionOnly = staticmethod(_openstudioutilitiesidf.IdfFile_loadVersionOnly)



    def save(self, p: 'path', overwrite: 'bool'=False) -> "bool":

        return _openstudioutilitiesidf.IdfFile_save(self, p, overwrite)



    def __str__(self) -> "std::string":

        return _openstudioutilitiesidf.IdfFile___str__(self)

    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesidf.IdfFile_load

    if _newclass:

        load = staticmethod(_openstudioutilitiesidf.IdfFile_load)

    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfFile

    __del__ = lambda self: None

IdfFile_swigregister = _openstudioutilitiesidf.IdfFile_swigregister

IdfFile_swigregister(IdfFile)



def IdfFile_loadVersionOnly(*args) -> "boost::optional< openstudio::VersionString >":

    return _openstudioutilitiesidf.IdfFile_loadVersionOnly(*args)

IdfFile_loadVersionOnly = _openstudioutilitiesidf.IdfFile_loadVersionOnly



def IdfFile_load(*args) -> "boost::optional< openstudio::IdfFile >":

    return _openstudioutilitiesidf.IdfFile_load(*args)

IdfFile_load = _openstudioutilitiesidf.IdfFile_load



class ObjectOrderBase(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectOrderBase, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ObjectOrderBase, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_ObjectOrderBase(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesidf.delete_ObjectOrderBase

    __del__ = lambda self: None



    def orderByIddEnum(self) -> "bool":

        return _openstudioutilitiesidf.ObjectOrderBase_orderByIddEnum(self)



    def setOrderByIddEnum(self) -> "void":

        return _openstudioutilitiesidf.ObjectOrderBase_setOrderByIddEnum(self)



    def iddOrder(self) -> "openstudio::OptionalIddObjectTypeVector":

        return _openstudioutilitiesidf.ObjectOrderBase_iddOrder(self)



    def setIddOrder(self, order: 'IddObjectTypeVector') -> "void":

        return _openstudioutilitiesidf.ObjectOrderBase_setIddOrder(self, order)



    def push_back(self, type: 'IddObjectType') -> "bool":

        return _openstudioutilitiesidf.ObjectOrderBase_push_back(self, type)



    def insert(self, *args) -> "bool":

        return _openstudioutilitiesidf.ObjectOrderBase_insert(self, *args)



    def move(self, *args) -> "bool":

        return _openstudioutilitiesidf.ObjectOrderBase_move(self, *args)



    def swap(self, type1: 'IddObjectType', type2: 'IddObjectType') -> "bool":

        return _openstudioutilitiesidf.ObjectOrderBase_swap(self, type1, type2)



    def erase(self, type: 'IddObjectType') -> "bool":

        return _openstudioutilitiesidf.ObjectOrderBase_erase(self, type)



    def setDirectOrder(self) -> "void":

        return _openstudioutilitiesidf.ObjectOrderBase_setDirectOrder(self)



    def less(self, *args) -> "bool":

        return _openstudioutilitiesidf.ObjectOrderBase_less(self, *args)



    def inOrder(self, type: 'IddObjectType') -> "bool":

        return _openstudioutilitiesidf.ObjectOrderBase_inOrder(self, type)



    def indexInOrder(self, type: 'IddObjectType') -> "openstudio::OptionalUnsigned":

        return _openstudioutilitiesidf.ObjectOrderBase_indexInOrder(self, type)

ObjectOrderBase_swigregister = _openstudioutilitiesidf.ObjectOrderBase_swigregister

ObjectOrderBase_swigregister(ObjectOrderBase)



class WorkspaceObjectOrder(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceObjectOrder, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceObjectOrder, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObjectOrder

    __del__ = lambda self: None



    def orderByIddEnum(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_orderByIddEnum(self)



    def setOrderByIddEnum(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_setOrderByIddEnum(self)



    def iddOrder(self) -> "boost::optional< std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > > >":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_iddOrder(self)



    def setIddOrder(self, order: 'IddObjectTypeVector') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_setIddOrder(self, order)



    def isDirectOrder(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_isDirectOrder(self)



    def directOrder(self) -> "boost::optional< std::vector< openstudio::Handle,std::allocator< openstudio::Handle > > >":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_directOrder(self)



    def setDirectOrder(self, order: 'UUIDVector') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_setDirectOrder(self, order)



    def push_back(self, *args) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_push_back(self, *args)



    def insert(self, *args) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_insert(self, *args)



    def move(self, *args) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_move(self, *args)



    def swap(self, *args) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_swap(self, *args)



    def erase(self, *args) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_erase(self, *args)



    def sort(self, *args) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_sort(self, *args)



    def inOrder(self, handle: 'UUID') -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_inOrder(self, handle)



    def indexInOrder(self, handle: 'UUID') -> "boost::optional< unsigned int >":

        return _openstudioutilitiesidf.WorkspaceObjectOrder_indexInOrder(self, handle)

WorkspaceObjectOrder_swigregister = _openstudioutilitiesidf.WorkspaceObjectOrder_swigregister

WorkspaceObjectOrder_swigregister(WorkspaceObjectOrder)



class WorkspaceExtensibleGroup(IdfExtensibleGroup):

    __swig_setmethods__ = {}

    for _s in [IdfExtensibleGroup]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceExtensibleGroup, name, value)

    __swig_getmethods__ = {}

    for _s in [IdfExtensibleGroup]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceExtensibleGroup, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceExtensibleGroup

    __del__ = lambda self: None



    def getTarget(self, fieldIndex: 'unsigned int') -> "boost::optional< openstudio::WorkspaceObject >":

        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_getTarget(self, fieldIndex)



    def getTargets(self) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_getTargets(self)



    def getSourceFieldIndices(self, targetHandle: 'UUID') -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_getSourceFieldIndices(self, targetHandle)



    def setPointer(self, fieldIndex: 'unsigned int', targetHandle: 'UUID') -> "bool":

        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_setPointer(self, fieldIndex, targetHandle)



    def isSource(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_isSource(self)



    def canBeSource(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_canBeSource(self)

WorkspaceExtensibleGroup_swigregister = _openstudioutilitiesidf.WorkspaceExtensibleGroup_swigregister

WorkspaceExtensibleGroup_swigregister(WorkspaceExtensibleGroup)



class WorkspaceObject(IdfObject):

    __swig_setmethods__ = {}

    for _s in [IdfObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceObject, name, value)

    __swig_getmethods__ = {}

    for _s in [IdfObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceObject, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObject

    __del__ = lambda self: None



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudioutilitiesidf.WorkspaceObject_remove(self)



    def workspace(self) -> "openstudio::Workspace":

        return _openstudioutilitiesidf.WorkspaceObject_workspace(self)



    def getTarget(self, index: 'unsigned int') -> "boost::optional< openstudio::WorkspaceObject >":

        return _openstudioutilitiesidf.WorkspaceObject_getTarget(self, index)



    def targets(self) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.WorkspaceObject_targets(self)



    def getSourceIndices(self, targetHandle: 'UUID') -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudioutilitiesidf.WorkspaceObject_getSourceIndices(self, targetHandle)



    def sources(self) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.WorkspaceObject_sources(self)



    def getSources(self, type: 'IddObjectType') -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.WorkspaceObject_getSources(self, type)



    def setPointer(self, index: 'unsigned int', targetHandle: 'UUID') -> "bool":

        return _openstudioutilitiesidf.WorkspaceObject_setPointer(self, index, targetHandle)



    def __lt__(self, right: 'WorkspaceObject') -> "bool":

        return _openstudioutilitiesidf.WorkspaceObject___lt__(self, right)



    def initialized(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObject_initialized(self)



    def numSources(self) -> "unsigned int":

        return _openstudioutilitiesidf.WorkspaceObject_numSources(self)



    def isSource(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObject_isSource(self)



    def canBeSource(self, *args) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObject_canBeSource(self, *args)



    def isTarget(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObject_isTarget(self)



    def canBeTarget(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesidf.WorkspaceObject_canBeTarget(self)



    def objectListFieldsEqual(self, other: 'WorkspaceObject') -> "bool":

        return _openstudioutilitiesidf.WorkspaceObject_objectListFieldsEqual(self, other)



    def objectListFieldsNonConflicting(self, other: 'WorkspaceObject') -> "bool":

        return _openstudioutilitiesidf.WorkspaceObject_objectListFieldsNonConflicting(self, other)



    def idfObject(self, *args) -> "openstudio::IdfObject":

        return _openstudioutilitiesidf.WorkspaceObject_idfObject(self, *args)



    def __str__(self) -> "std::string":

        return _openstudioutilitiesidf.WorkspaceObject___str__(self)

WorkspaceObject_swigregister = _openstudioutilitiesidf.WorkspaceObject_swigregister

WorkspaceObject_swigregister(WorkspaceObject)



class Workspace(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Workspace, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Workspace, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesidf.new_Workspace(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def clone(self, keepHandles: 'bool'=False) -> "openstudio::Workspace":

        return _openstudioutilitiesidf.Workspace_clone(self, keepHandles)



    def cloneSubset(self, *args) -> "openstudio::Workspace":

        return _openstudioutilitiesidf.Workspace_cloneSubset(self, *args)

    __swig_destroy__ = _openstudioutilitiesidf.delete_Workspace

    __del__ = lambda self: None



    def strictnessLevel(self) -> "openstudio::StrictnessLevel":

        return _openstudioutilitiesidf.Workspace_strictnessLevel(self)



    def version(self) -> "openstudio::VersionString":

        return _openstudioutilitiesidf.Workspace_version(self)



    def iddFile(self) -> "openstudio::IddFile":

        return _openstudioutilitiesidf.Workspace_iddFile(self)



    def iddFileType(self) -> "openstudio::IddFileType":

        return _openstudioutilitiesidf.Workspace_iddFileType(self)



    def getIddObject(self, type: 'IddObjectType') -> "boost::optional< openstudio::IddObject >":

        return _openstudioutilitiesidf.Workspace_getIddObject(self, type)



    def name(self, handle: 'UUID') -> "boost::optional< std::string >":

        return _openstudioutilitiesidf.Workspace_name(self, handle)



    def getObject(self, handle: 'UUID') -> "boost::optional< openstudio::WorkspaceObject >":

        return _openstudioutilitiesidf.Workspace_getObject(self, handle)



    def objects(self, sorted: 'bool'=False) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_objects(self, sorted)



    def handles(self, sorted: 'bool'=False) -> "std::vector< openstudio::Handle,std::allocator< openstudio::Handle > >":

        return _openstudioutilitiesidf.Workspace_handles(self, sorted)



    def objectsWithURLFields(self) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_objectsWithURLFields(self)



    def versionObject(self) -> "boost::optional< openstudio::WorkspaceObject >":

        return _openstudioutilitiesidf.Workspace_versionObject(self)



    def getObjects(self, handles: 'UUIDVector') -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_getObjects(self, handles)



    def getObjectsByName(self, name: 'std::string const &', exactMatch: 'bool'=True) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_getObjectsByName(self, name, exactMatch)



    def getObjectsByType(self, *args) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_getObjectsByType(self, *args)



    def getObjectByTypeAndName(self, objectType: 'IddObjectType', name: 'std::string const &') -> "boost::optional< openstudio::WorkspaceObject >":

        return _openstudioutilitiesidf.Workspace_getObjectByTypeAndName(self, objectType, name)



    def getObjectsByTypeAndName(self, objectType: 'IddObjectType', name: 'std::string const &') -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_getObjectsByTypeAndName(self, objectType, name)



    def getObjectsByReference(self, *args) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_getObjectsByReference(self, *args)



    def getObjectByNameAndReference(self, name: 'std::string', referenceNames: 'StringVector') -> "boost::optional< openstudio::WorkspaceObject >":

        return _openstudioutilitiesidf.Workspace_getObjectByNameAndReference(self, name, referenceNames)



    def fastNaming(self) -> "bool":

        return _openstudioutilitiesidf.Workspace_fastNaming(self)



    def setStrictnessLevel(self, level: 'StrictnessLevel') -> "bool":

        return _openstudioutilitiesidf.Workspace_setStrictnessLevel(self, level)



    def addObject(self, idfObject: 'IdfObject') -> "boost::optional< openstudio::WorkspaceObject >":

        return _openstudioutilitiesidf.Workspace_addObject(self, idfObject)



    def insertObject(self, idfObject: 'IdfObject') -> "boost::optional< openstudio::WorkspaceObject >":

        return _openstudioutilitiesidf.Workspace_insertObject(self, idfObject)



    def addObjects(self, *args) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_addObjects(self, *args)



    def insertObjects(self, *args) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_insertObjects(self, *args)



    def addAndInsertObjects(self, *args) -> "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > >":

        return _openstudioutilitiesidf.Workspace_addAndInsertObjects(self, *args)



    def swap(self, *args) -> "bool":

        return _openstudioutilitiesidf.Workspace_swap(self, *args)



    def removeObject(self, handle: 'UUID') -> "bool":

        return _openstudioutilitiesidf.Workspace_removeObject(self, handle)



    def removeObjects(self, handles: 'UUIDVector') -> "bool":

        return _openstudioutilitiesidf.Workspace_removeObjects(self, handles)



    def setFastNaming(self, fastNaming: 'bool') -> "void":

        return _openstudioutilitiesidf.Workspace_setFastNaming(self, fastNaming)



    def order(self, *args) -> "openstudio::WorkspaceObjectOrder const":

        return _openstudioutilitiesidf.Workspace_order(self, *args)



    def sort(self, *args) -> "std::vector< openstudio::Handle,std::allocator< openstudio::Handle > >":

        return _openstudioutilitiesidf.Workspace_sort(self, *args)



    def numObjects(self) -> "unsigned int":

        return _openstudioutilitiesidf.Workspace_numObjects(self)



    def numObjectsOfType(self, *args) -> "unsigned int":

        return _openstudioutilitiesidf.Workspace_numObjectsOfType(self, *args)



    def isMember(self, handle: 'UUID') -> "bool":

        return _openstudioutilitiesidf.Workspace_isMember(self, handle)



    def canBeTarget(self, handle: 'UUID', referenceListNames: 'StringSet') -> "bool":

        return _openstudioutilitiesidf.Workspace_canBeTarget(self, handle, referenceListNames)



    def isInIddFile(self, type: 'IddObjectType') -> "bool":

        return _openstudioutilitiesidf.Workspace_isInIddFile(self, type)



    def nextName(self, *args) -> "std::string":

        return _openstudioutilitiesidf.Workspace_nextName(self, *args)



    def isValid(self, *args) -> "bool":

        return _openstudioutilitiesidf.Workspace_isValid(self, *args)



    def validityReport(self, *args) -> "openstudio::ValidityReport":

        return _openstudioutilitiesidf.Workspace_validityReport(self, *args)



    def __eq__(self, other: 'Workspace') -> "bool":

        return _openstudioutilitiesidf.Workspace___eq__(self, other)



    def __ne__(self, other: 'Workspace') -> "bool":

        return _openstudioutilitiesidf.Workspace___ne__(self, other)



    def save(self, p: 'path', overwrite: 'bool'=False) -> "bool":

        return _openstudioutilitiesidf.Workspace_save(self, p, overwrite)

    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesidf.Workspace_load

    if _newclass:

        load = staticmethod(_openstudioutilitiesidf.Workspace_load)



    def toIdfFile(self) -> "openstudio::IdfFile":

        return _openstudioutilitiesidf.Workspace_toIdfFile(self)



    def locateUrls(self, t_paths: 'URLSearchPathVector', t_create_relative_paths: 'bool', t_infile: 'path') -> "std::vector< std::pair< QUrl,openstudio::path >,std::allocator< std::pair< QUrl,openstudio::path > > >":

        return _openstudioutilitiesidf.Workspace_locateUrls(self, t_paths, t_create_relative_paths, t_infile)



    def connectProgressBar(self, progressBar: 'openstudio::ProgressBar &') -> "bool":

        return _openstudioutilitiesidf.Workspace_connectProgressBar(self, progressBar)



    def disconnectProgressBar(self, progressBar: 'openstudio::ProgressBar &') -> "bool":

        return _openstudioutilitiesidf.Workspace_disconnectProgressBar(self, progressBar)



    def __str__(self) -> "std::string":

        return _openstudioutilitiesidf.Workspace___str__(self)

Workspace_swigregister = _openstudioutilitiesidf.Workspace_swigregister

Workspace_swigregister(Workspace)



def Workspace_load(*args) -> "boost::optional< openstudio::Workspace >":

    return _openstudioutilitiesidf.Workspace_load(*args)

Workspace_load = _openstudioutilitiesidf.Workspace_load





def __lshift__(*args) -> "std::ostream &":

    return _openstudioutilitiesidf.__lshift__(*args)

__lshift__ = _openstudioutilitiesidf.__lshift__

class IdfObjectWatcher(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IdfObjectWatcher, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IdfObjectWatcher, name)

    __repr__ = _swig_repr



    def __init__(self, idfObject: 'IdfObject'):

        if self.__class__ == IdfObjectWatcher:

            _self = None

        else:

            _self = self

        this = _openstudioutilitiesidf.new_IdfObjectWatcher(_self, idfObject)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectWatcher

    __del__ = lambda self: None



    def enabled(self) -> "bool":

        return _openstudioutilitiesidf.IdfObjectWatcher_enabled(self)



    def enable(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_enable(self)



    def disable(self) -> "bool":

        return _openstudioutilitiesidf.IdfObjectWatcher_disable(self)



    def dirty(self) -> "bool":

        return _openstudioutilitiesidf.IdfObjectWatcher_dirty(self)



    def dataChanged(self) -> "bool":

        return _openstudioutilitiesidf.IdfObjectWatcher_dataChanged(self)



    def nameChanged(self) -> "bool":

        return _openstudioutilitiesidf.IdfObjectWatcher_nameChanged(self)



    def clearState(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_clearState(self)



    def onChangeIdfObject(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_onChangeIdfObject(self)



    def onDataFieldChange(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_onDataFieldChange(self)



    def onNameChange(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_onNameChange(self)



    def onBecomeDirty(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_onBecomeDirty(self)



    def onBecomeClean(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_onBecomeClean(self)



    def change(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_change(self)



    def dataChange(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_dataChange(self)



    def nameChange(self) -> "void":

        return _openstudioutilitiesidf.IdfObjectWatcher_nameChange(self)

    def __disown__(self):

        self.this.disown()

        _openstudioutilitiesidf.disown_IdfObjectWatcher(self)

        return weakref_proxy(self)

IdfObjectWatcher_swigregister = _openstudioutilitiesidf.IdfObjectWatcher_swigregister

IdfObjectWatcher_swigregister(IdfObjectWatcher)



class WorkspaceObjectWatcher(IdfObjectWatcher):

    __swig_setmethods__ = {}

    for _s in [IdfObjectWatcher]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceObjectWatcher, name, value)

    __swig_getmethods__ = {}

    for _s in [IdfObjectWatcher]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceObjectWatcher, name)

    __repr__ = _swig_repr



    def __init__(self, workspaceObject: 'WorkspaceObject'):

        if self.__class__ == WorkspaceObjectWatcher:

            _self = None

        else:

            _self = self

        this = _openstudioutilitiesidf.new_WorkspaceObjectWatcher(_self, workspaceObject)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObjectWatcher

    __del__ = lambda self: None



    def relationshipChanged(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceObjectWatcher_relationshipChanged(self)



    def clearState(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectWatcher_clearState(self)



    def onRelationshipChange(self, index: 'int', newHandle: 'UUID', oldHandle: 'UUID') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectWatcher_onRelationshipChange(self, index, newHandle, oldHandle)



    def onRemoveFromWorkspace(self, handle: 'UUID') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectWatcher_onRemoveFromWorkspace(self, handle)



    def relationshipChange(self, index: 'int', newHandle: 'UUID', oldHandle: 'UUID') -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectWatcher_relationshipChange(self, index, newHandle, oldHandle)



    def removedFromWorkspace(self, *args) -> "void":

        return _openstudioutilitiesidf.WorkspaceObjectWatcher_removedFromWorkspace(self, *args)

    def __disown__(self):

        self.this.disown()

        _openstudioutilitiesidf.disown_WorkspaceObjectWatcher(self)

        return weakref_proxy(self)

WorkspaceObjectWatcher_swigregister = _openstudioutilitiesidf.WorkspaceObjectWatcher_swigregister

WorkspaceObjectWatcher_swigregister(WorkspaceObjectWatcher)



class WorkspaceWatcher(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceWatcher, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceWatcher, name)

    __repr__ = _swig_repr



    def __init__(self, workspace: 'Workspace'):

        if self.__class__ == WorkspaceWatcher:

            _self = None

        else:

            _self = self

        this = _openstudioutilitiesidf.new_WorkspaceWatcher(_self, workspace)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceWatcher

    __del__ = lambda self: None



    def enabled(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceWatcher_enabled(self)



    def enable(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_enable(self)



    def disable(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceWatcher_disable(self)



    def dirty(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceWatcher_dirty(self)



    def objectAdded(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceWatcher_objectAdded(self)



    def objectRemoved(self) -> "bool":

        return _openstudioutilitiesidf.WorkspaceWatcher_objectRemoved(self)



    def clearState(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_clearState(self)



    def onChangeWorkspace(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_onChangeWorkspace(self)



    def onBecomeDirty(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_onBecomeDirty(self)



    def onBecomeClean(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_onBecomeClean(self)



    def onObjectAdd(self, addedObject: 'WorkspaceObject') -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_onObjectAdd(self, addedObject)



    def onObjectRemove(self, removedObject: 'WorkspaceObject') -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_onObjectRemove(self, removedObject)



    def change(self) -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_change(self)



    def objectAdd(self, addedObject: 'WorkspaceObject', type: 'IddObjectType', uuid: 'UUID') -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_objectAdd(self, addedObject, type, uuid)



    def objectRemove(self, removedObject: 'WorkspaceObject', type: 'IddObjectType', uuid: 'UUID') -> "void":

        return _openstudioutilitiesidf.WorkspaceWatcher_objectRemove(self, removedObject, type, uuid)

    def __disown__(self):

        self.this.disown()

        _openstudioutilitiesidf.disown_WorkspaceWatcher(self)

        return weakref_proxy(self)

WorkspaceWatcher_swigregister = _openstudioutilitiesidf.WorkspaceWatcher_swigregister

WorkspaceWatcher_swigregister(WorkspaceWatcher)



# This file is compatible with both classic and new-style classes.





