# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudiomodelcore', [dirname(__file__)])
        except ImportError:
            import _openstudiomodelcore
            return _openstudiomodelcore
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudiomodelcore', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudiomodelcore = swig_import_helper()
    del swig_import_helper
else:
    import _openstudiomodelcore
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudiomodelcore.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudiomodelcore.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelcore.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelcore.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelcore.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelcore.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelcore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelcore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelcore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelcore.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelcore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudiomodelcore.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudiomodelcore.SHARED_PTR_DISOWN_swigconstant(_openstudiomodelcore)
SHARED_PTR_DISOWN = _openstudiomodelcore.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
class ModelVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Model >::size_type":
        return _openstudiomodelcore.ModelVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Model >::value_type":
        return _openstudiomodelcore.ModelVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Model >::difference_type', j: 'std::vector< openstudio::model::Model >::difference_type') -> "std::vector< openstudio::model::Model,std::allocator< openstudio::model::Model > > *":
        return _openstudiomodelcore.ModelVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Model >::difference_type', j: 'std::vector< openstudio::model::Model >::difference_type') -> "void":
        return _openstudiomodelcore.ModelVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Model >::value_type const &":
        return _openstudiomodelcore.ModelVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector___setitem__(self, *args)

    def append(self, x: 'Model') -> "void":
        return _openstudiomodelcore.ModelVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Model >::size_type":
        return _openstudiomodelcore.ModelVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelVector_clear(self)

    def swap(self, v: 'ModelVector') -> "void":
        return _openstudiomodelcore.ModelVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Model >::allocator_type":
        return _openstudiomodelcore.ModelVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Model >::iterator":
        return _openstudiomodelcore.ModelVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Model >::iterator":
        return _openstudiomodelcore.ModelVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Model >::reverse_iterator":
        return _openstudiomodelcore.ModelVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Model >::reverse_iterator":
        return _openstudiomodelcore.ModelVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Model >::iterator":
        return _openstudiomodelcore.ModelVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ModelVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Model') -> "void":
        return _openstudiomodelcore.ModelVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Model >::value_type const &":
        return _openstudiomodelcore.ModelVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Model >::value_type const &":
        return _openstudiomodelcore.ModelVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Model >::size_type', x: 'Model') -> "void":
        return _openstudiomodelcore.ModelVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Model >::size_type') -> "void":
        return _openstudiomodelcore.ModelVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Model >::size_type":
        return _openstudiomodelcore.ModelVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelVector
    __del__ = lambda self: None
ModelVector_swigregister = _openstudiomodelcore.ModelVector_swigregister
ModelVector_swigregister(ModelVector)

class OptionalModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalModel_reset(self)

    def __ref__(self) -> "openstudio::model::Model":
        return _openstudiomodelcore.OptionalModel___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalModel_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalModel_isNull(self)

    def get(self) -> "openstudio::model::Model":
        return _openstudiomodelcore.OptionalModel_get(self)

    def set(self, t: 'Model') -> "void":
        return _openstudiomodelcore.OptionalModel_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModel
    __del__ = lambda self: None
OptionalModel_swigregister = _openstudiomodelcore.OptionalModel_swigregister
OptionalModel_swigregister(OptionalModel)

class ComponentVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ComponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ComponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Component >::size_type":
        return _openstudiomodelcore.ComponentVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Component >::value_type":
        return _openstudiomodelcore.ComponentVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Component >::difference_type', j: 'std::vector< openstudio::model::Component >::difference_type') -> "std::vector< openstudio::model::Component,std::allocator< openstudio::model::Component > > *":
        return _openstudiomodelcore.ComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Component >::difference_type', j: 'std::vector< openstudio::model::Component >::difference_type') -> "void":
        return _openstudiomodelcore.ComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Component >::value_type const &":
        return _openstudiomodelcore.ComponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentVector___setitem__(self, *args)

    def append(self, x: 'Component') -> "void":
        return _openstudiomodelcore.ComponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ComponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Component >::size_type":
        return _openstudiomodelcore.ComponentVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ComponentVector_clear(self)

    def swap(self, v: 'ComponentVector') -> "void":
        return _openstudiomodelcore.ComponentVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Component >::allocator_type":
        return _openstudiomodelcore.ComponentVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Component >::iterator":
        return _openstudiomodelcore.ComponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Component >::iterator":
        return _openstudiomodelcore.ComponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Component >::reverse_iterator":
        return _openstudiomodelcore.ComponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Component >::reverse_iterator":
        return _openstudiomodelcore.ComponentVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ComponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Component >::iterator":
        return _openstudiomodelcore.ComponentVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ComponentVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Component') -> "void":
        return _openstudiomodelcore.ComponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Component >::value_type const &":
        return _openstudiomodelcore.ComponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Component >::value_type const &":
        return _openstudiomodelcore.ComponentVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Component >::size_type', x: 'Component') -> "void":
        return _openstudiomodelcore.ComponentVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Component >::size_type', x: 'Component') -> "void":
        return _openstudiomodelcore.ComponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ComponentVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Component >::size_type') -> "void":
        return _openstudiomodelcore.ComponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Component >::size_type":
        return _openstudiomodelcore.ComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ComponentVector
    __del__ = lambda self: None
ComponentVector_swigregister = _openstudiomodelcore.ComponentVector_swigregister
ComponentVector_swigregister(ComponentVector)

class OptionalComponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalComponent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalComponent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalComponent_reset(self)

    def __ref__(self) -> "openstudio::model::Component":
        return _openstudiomodelcore.OptionalComponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalComponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalComponent_isNull(self)

    def get(self) -> "openstudio::model::Component":
        return _openstudiomodelcore.OptionalComponent_get(self)

    def set(self, t: 'Component') -> "void":
        return _openstudiomodelcore.OptionalComponent_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalComponent
    __del__ = lambda self: None
OptionalComponent_swigregister = _openstudiomodelcore.OptionalComponent_swigregister
OptionalComponent_swigregister(OptionalComponent)

class ModelObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ModelObject >::value_type":
        return _openstudiomodelcore.ModelObjectVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ModelObject >::difference_type', j: 'std::vector< openstudio::model::ModelObject >::difference_type') -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > > *":
        return _openstudiomodelcore.ModelObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ModelObject >::difference_type', j: 'std::vector< openstudio::model::ModelObject >::difference_type') -> "void":
        return _openstudiomodelcore.ModelObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ModelObject >::value_type const &":
        return _openstudiomodelcore.ModelObjectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVector___setitem__(self, *args)

    def append(self, x: 'ModelObject') -> "void":
        return _openstudiomodelcore.ModelObjectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelObjectVector_clear(self)

    def swap(self, v: 'ModelObjectVector') -> "void":
        return _openstudiomodelcore.ModelObjectVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ModelObject >::allocator_type":
        return _openstudiomodelcore.ModelObjectVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ModelObject >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ModelObject >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelObjectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ModelObjectVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ModelObject') -> "void":
        return _openstudiomodelcore.ModelObjectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ModelObject >::value_type const &":
        return _openstudiomodelcore.ModelObjectVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ModelObject >::value_type const &":
        return _openstudiomodelcore.ModelObjectVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ModelObject >::size_type', x: 'ModelObject') -> "void":
        return _openstudiomodelcore.ModelObjectVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ModelObject >::size_type', x: 'ModelObject') -> "void":
        return _openstudiomodelcore.ModelObjectVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ModelObject >::size_type') -> "void":
        return _openstudiomodelcore.ModelObjectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectVector
    __del__ = lambda self: None
ModelObjectVector_swigregister = _openstudiomodelcore.ModelObjectVector_swigregister
ModelObjectVector_swigregister(ModelObjectVector)

class ModelObjectVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelObjectVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelObjectVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelObjectVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::size_type":
        return _openstudiomodelcore.ModelObjectVectorVector___len__(self)

    def pop(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::value_type":
        return _openstudiomodelcore.ModelObjectVectorVector_pop(self)

    def __getslice__(self, i: 'std::vector< std::vector< openstudio::model::ModelObject > >::difference_type', j: 'std::vector< std::vector< openstudio::model::ModelObject > >::difference_type') -> "std::vector< std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >,std::allocator< std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > > > > *":
        return _openstudiomodelcore.ModelObjectVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::vector< openstudio::model::ModelObject > >::difference_type', j: 'std::vector< std::vector< openstudio::model::ModelObject > >::difference_type') -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< openstudio::model::ModelObject > >::value_type const &":
        return _openstudiomodelcore.ModelObjectVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector___setitem__(self, *args)

    def append(self, x: 'ModelObjectVector') -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelObjectVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::size_type":
        return _openstudiomodelcore.ModelObjectVectorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_clear(self)

    def swap(self, v: 'ModelObjectVectorVector') -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::allocator_type":
        return _openstudiomodelcore.ModelObjectVectorVector_get_allocator(self)

    def begin(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< openstudio::model::ModelObject > >::iterator":
        return _openstudiomodelcore.ModelObjectVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ModelObjectVectorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ModelObjectVector') -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::value_type const &":
        return _openstudiomodelcore.ModelObjectVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::value_type const &":
        return _openstudiomodelcore.ModelObjectVectorVector_back(self)

    def assign(self, n: 'std::vector< std::vector< openstudio::model::ModelObject > >::size_type', x: 'ModelObjectVector') -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::vector< openstudio::model::ModelObject > >::size_type') -> "void":
        return _openstudiomodelcore.ModelObjectVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< openstudio::model::ModelObject > >::size_type":
        return _openstudiomodelcore.ModelObjectVectorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectVectorVector
    __del__ = lambda self: None
ModelObjectVectorVector_swigregister = _openstudiomodelcore.ModelObjectVectorVector_swigregister
ModelObjectVectorVector_swigregister(ModelObjectVectorVector)

class ModelObjectSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelObjectSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelObjectSet, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelObjectSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectSet___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectSet___bool__(self)

    def __len__(self) -> "std::set< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectSet___len__(self)

    def append(self, x: 'ModelObject') -> "void":
        return _openstudiomodelcore.ModelObjectSet_append(self, x)

    def __contains__(self, x: 'ModelObject') -> "bool":
        return _openstudiomodelcore.ModelObjectSet___contains__(self, x)

    def __getitem__(self, i: 'std::set< openstudio::model::ModelObject >::difference_type') -> "std::set< openstudio::model::ModelObject >::value_type":
        return _openstudiomodelcore.ModelObjectSet___getitem__(self, i)

    def add(self, x: 'ModelObject') -> "void":
        return _openstudiomodelcore.ModelObjectSet_add(self, x)

    def discard(self, x: 'ModelObject') -> "void":
        return _openstudiomodelcore.ModelObjectSet_discard(self, x)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ModelObjectSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelObjectSet_empty(self)

    def size(self) -> "std::set< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectSet_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelObjectSet_clear(self)

    def swap(self, v: 'ModelObjectSet') -> "void":
        return _openstudiomodelcore.ModelObjectSet_swap(self, v)

    def count(self, x: 'ModelObject') -> "std::set< openstudio::model::ModelObject >::size_type":
        return _openstudiomodelcore.ModelObjectSet_count(self, x)

    def begin(self) -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_begin(self)

    def end(self) -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_end(self)

    def rbegin(self) -> "std::set< openstudio::model::ModelObject >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectSet_rbegin(self)

    def rend(self) -> "std::set< openstudio::model::ModelObject >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectSet_rend(self)

    def erase(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectSet_erase(self, *args)

    def find(self, x: 'ModelObject') -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_find(self, x)

    def lower_bound(self, x: 'ModelObject') -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_lower_bound(self, x)

    def upper_bound(self, x: 'ModelObject') -> "std::set< openstudio::model::ModelObject >::iterator":
        return _openstudiomodelcore.ModelObjectSet_upper_bound(self, x)

    def equal_range(self, x: 'ModelObject') -> "std::pair< std::set< openstudio::model::ModelObject >::iterator,std::set< openstudio::model::ModelObject >::iterator >":
        return _openstudiomodelcore.ModelObjectSet_equal_range(self, x)

    def insert(self, __x: 'ModelObject') -> "std::pair< std::set< openstudio::model::ModelObject >::iterator,bool >":
        return _openstudiomodelcore.ModelObjectSet_insert(self, __x)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectSet
    __del__ = lambda self: None
ModelObjectSet_swigregister = _openstudiomodelcore.ModelObjectSet_swigregister
ModelObjectSet_swigregister(ModelObjectSet)

class OptionalModelObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalModelObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalModelObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalModelObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalModelObject_reset(self)

    def __ref__(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.OptionalModelObject___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalModelObject_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalModelObject_isNull(self)

    def get(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.OptionalModelObject_get(self)

    def set(self, t: 'ModelObject') -> "void":
        return _openstudiomodelcore.OptionalModelObject_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModelObject
    __del__ = lambda self: None
OptionalModelObject_swigregister = _openstudiomodelcore.OptionalModelObject_swigregister
OptionalModelObject_swigregister(OptionalModelObject)


def getModelObjectHandles(objects: 'ModelObjectVector') -> "std::vector< openstudio::Handle,std::allocator< openstudio::Handle > >":
    return _openstudiomodelcore.getModelObjectHandles(objects)
getModelObjectHandles = _openstudiomodelcore.getModelObjectHandles
class ScheduleTypeKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleTypeKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleTypeKey, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleTypeKey(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["first"] = _openstudiomodelcore.ScheduleTypeKey_first_set
    __swig_getmethods__["first"] = _openstudiomodelcore.ScheduleTypeKey_first_get
    if _newclass:
        first = _swig_property(_openstudiomodelcore.ScheduleTypeKey_first_get, _openstudiomodelcore.ScheduleTypeKey_first_set)
    __swig_setmethods__["second"] = _openstudiomodelcore.ScheduleTypeKey_second_set
    __swig_getmethods__["second"] = _openstudiomodelcore.ScheduleTypeKey_second_get
    if _newclass:
        second = _swig_property(_openstudiomodelcore.ScheduleTypeKey_second_get, _openstudiomodelcore.ScheduleTypeKey_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeKey
    __del__ = lambda self: None
ScheduleTypeKey_swigregister = _openstudiomodelcore.ScheduleTypeKey_swigregister
ScheduleTypeKey_swigregister(ScheduleTypeKey)

class ScheduleTypeKeyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleTypeKeyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleTypeKeyVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleTypeKeyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeKeyVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeKeyVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector___len__(self)

    def pop(self) -> "std::vector< std::pair< std::string,std::string > >::value_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector_pop(self)

    def __getslice__(self, i: 'std::vector< std::pair< std::string,std::string > >::difference_type', j: 'std::vector< std::pair< std::string,std::string > >::difference_type') -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *":
        return _openstudiomodelcore.ScheduleTypeKeyVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::pair< std::string,std::string > >::difference_type', j: 'std::vector< std::pair< std::string,std::string > >::difference_type') -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeKeyVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector___setitem__(self, *args)

    def append(self, x: 'ScheduleTypeKey') -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeKeyVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_clear(self)

    def swap(self, v: 'ScheduleTypeKeyVector') -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_swap(self, v)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::string > >::allocator_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector_get_allocator(self)

    def begin(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _openstudiomodelcore.ScheduleTypeKeyVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleTypeKeyVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleTypeKey') -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeKeyVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeKeyVector_back(self)

    def assign(self, n: 'std::vector< std::pair< std::string,std::string > >::size_type', x: 'ScheduleTypeKey') -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::pair< std::string,std::string > >::size_type') -> "void":
        return _openstudiomodelcore.ScheduleTypeKeyVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _openstudiomodelcore.ScheduleTypeKeyVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeKeyVector
    __del__ = lambda self: None
ScheduleTypeKeyVector_swigregister = _openstudiomodelcore.ScheduleTypeKeyVector_swigregister
ScheduleTypeKeyVector_swigregister(ScheduleTypeKeyVector)

class AccessPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccessPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccessPolicy, name)
    __repr__ = _swig_repr
    FREE = _openstudiomodelcore.AccessPolicy_FREE
    LOCKED = _openstudiomodelcore.AccessPolicy_LOCKED
    HIDDEN = _openstudiomodelcore.AccessPolicy_HIDDEN

    def __init__(self):
        this = _openstudiomodelcore.new_AccessPolicy()
        try:
            self.this.append(this)
        except:
            self.this = this

    def getAccess(self, index: 'unsigned int') -> "openstudio::model::AccessPolicy::ACCESS_LEVEL":
        return _openstudiomodelcore.AccessPolicy_getAccess(self, index)
    __swig_destroy__ = _openstudiomodelcore.delete_AccessPolicy
    __del__ = lambda self: None
AccessPolicy_swigregister = _openstudiomodelcore.AccessPolicy_swigregister
AccessPolicy_swigregister(AccessPolicy)

class AccessPolicyStore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccessPolicyStore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccessPolicyStore, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["Instance"] = lambda x: _openstudiomodelcore.AccessPolicyStore_Instance
    if _newclass:
        Instance = staticmethod(_openstudiomodelcore.AccessPolicyStore_Instance)

    def loadFile(self, *args) -> "bool":
        return _openstudiomodelcore.AccessPolicyStore_loadFile(self, *args)

    def getPolicy(self, arg2: 'IddObjectType') -> "openstudio::model::AccessPolicy const *":
        return _openstudiomodelcore.AccessPolicyStore_getPolicy(self, arg2)

    def clear(self) -> "void":
        return _openstudiomodelcore.AccessPolicyStore_clear(self)
AccessPolicyStore_swigregister = _openstudiomodelcore.AccessPolicyStore_swigregister
AccessPolicyStore_swigregister(AccessPolicyStore)

def AccessPolicyStore_Instance() -> "openstudio::model::AccessPolicyStore &":
    return _openstudiomodelcore.AccessPolicyStore_Instance()
AccessPolicyStore_Instance = _openstudiomodelcore.AccessPolicyStore_Instance

class ModelObject(openstudioutilitiesidf.WorkspaceObject):
    __swig_setmethods__ = {}
    for _s in [openstudioutilitiesidf.WorkspaceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelObject, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudioutilitiesidf.WorkspaceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObject
    __del__ = lambda self: None

    def clone(self, *args) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ModelObject_clone(self, *args)

    def createComponent(self) -> "openstudio::model::Component":
        return _openstudiomodelcore.ModelObject_createComponent(self)

    def model(self) -> "openstudio::model::Model":
        return _openstudiomodelcore.ModelObject_model(self)

    def parent(self) -> "boost::optional< openstudio::model::ParentObject >":
        return _openstudiomodelcore.ModelObject_parent(self)

    def resources(self) -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > >":
        return _openstudiomodelcore.ModelObject_resources(self)

    def outputVariableNames(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        return _openstudiomodelcore.ModelObject_outputVariableNames(self)

    def outputVariables(self) -> "std::vector< openstudio::model::OutputVariable,std::allocator< openstudio::model::OutputVariable > >":
        return _openstudiomodelcore.ModelObject_outputVariables(self)

    def getData(self, variable: 'OutputVariable', envPeriod: 'std::string const &') -> "boost::optional< openstudio::TimeSeries >":
        return _openstudiomodelcore.ModelObject_getData(self, variable, envPeriod)

    def lifeCycleCosts(self) -> "std::vector< openstudio::model::LifeCycleCost,std::allocator< openstudio::model::LifeCycleCost > >":
        return _openstudiomodelcore.ModelObject_lifeCycleCosts(self)

    def removeLifeCycleCosts(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.ModelObject_removeLifeCycleCosts(self)

    def iddObjectType(self) -> "openstudio::IddObjectType":
        return _openstudiomodelcore.ModelObject_iddObjectType(self)

    def additionalProperties(self) -> "openstudio::model::AdditionalProperties":
        return _openstudiomodelcore.ModelObject_additionalProperties(self)

    def hasAdditionalProperties(self) -> "bool":
        return _openstudiomodelcore.ModelObject_hasAdditionalProperties(self)

    def removeAdditionalProperties(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.ModelObject_removeAdditionalProperties(self)

    def setParent(self, newParent: 'ParentObject') -> "bool":
        return _openstudiomodelcore.ModelObject_setParent(self, newParent)

    def __lt__(self, right: 'ModelObject') -> "bool":
        return _openstudiomodelcore.ModelObject___lt__(self, right)

    def __eq__(self, other: 'ModelObject') -> "bool":
        return _openstudiomodelcore.ModelObject___eq__(self, other)

    def __ne__(self, other: 'ModelObject') -> "bool":
        return _openstudiomodelcore.ModelObject___ne__(self, other)

    def getScheduleTypeKeys(self, schedule: 'Schedule') -> "std::vector< openstudio::model::ScheduleTypeKey,std::allocator< openstudio::model::ScheduleTypeKey > >":
        return _openstudiomodelcore.ModelObject_getScheduleTypeKeys(self, schedule)

    def getAutosizedValue(self, valueName: 'std::string', unitString: 'std::string') -> "boost::optional< double >":
        return _openstudiomodelcore.ModelObject_getAutosizedValue(self, valueName, unitString)

    def emsActuatorNames(self) -> "std::vector< openstudio::model::EMSActuatorNames,std::allocator< openstudio::model::EMSActuatorNames > >":
        return _openstudiomodelcore.ModelObject_emsActuatorNames(self)

    def emsInternalVariableNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.ModelObject_emsInternalVariableNames(self)

    def connectedObject(self, port: 'unsigned int') -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.ModelObject_connectedObject(self, port)

    def connectedObjectPort(self, port: 'unsigned int') -> "boost::optional< unsigned int >":
        return _openstudiomodelcore.ModelObject_connectedObjectPort(self, port)

    def __str__(self) -> "std::string":
        return _openstudiomodelcore.ModelObject___str__(self)

    def toIdfObject(self) -> "openstudio::IdfObject":
        return _openstudiomodelcore.ModelObject_toIdfObject(self)
ModelObject_swigregister = _openstudiomodelcore.ModelObject_swigregister
ModelObject_swigregister(ModelObject)

class EMSActuatorNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMSActuatorNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EMSActuatorNames, name)
    __repr__ = _swig_repr

    def __init__(self, componentTypeName: 'std::string const &', controlTypeName: 'std::string const &'):
        this = _openstudiomodelcore.new_EMSActuatorNames(componentTypeName, controlTypeName)
        try:
            self.this.append(this)
        except:
            self.this = this

    def controlTypeName(self) -> "std::string":
        return _openstudiomodelcore.EMSActuatorNames_controlTypeName(self)

    def componentTypeName(self) -> "std::string":
        return _openstudiomodelcore.EMSActuatorNames_componentTypeName(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EMSActuatorNames
    __del__ = lambda self: None
EMSActuatorNames_swigregister = _openstudiomodelcore.EMSActuatorNames_swigregister
EMSActuatorNames_swigregister(EMSActuatorNames)

class Model(openstudioutilitiesidf.Workspace):
    __swig_setmethods__ = {}
    for _s in [openstudioutilitiesidf.Workspace]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudioutilitiesidf.Workspace]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_Model(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_Model
    __del__ = lambda self: None

    def workflowJSON(self) -> "openstudio::WorkflowJSON":
        return _openstudiomodelcore.Model_workflowJSON(self)

    def sqlFile(self) -> "boost::optional< openstudio::SqlFile >":
        return _openstudiomodelcore.Model_sqlFile(self)

    def building(self) -> "boost::optional< openstudio::model::Building >":
        return _openstudiomodelcore.Model_building(self)

    def foundationKivaSettings(self) -> "boost::optional< openstudio::model::FoundationKivaSettings >":
        return _openstudiomodelcore.Model_foundationKivaSettings(self)

    def lifeCycleCostParameters(self) -> "boost::optional< openstudio::model::LifeCycleCostParameters >":
        return _openstudiomodelcore.Model_lifeCycleCostParameters(self)

    def runPeriod(self) -> "boost::optional< openstudio::model::RunPeriod >":
        return _openstudiomodelcore.Model_runPeriod(self)

    def yearDescription(self) -> "boost::optional< openstudio::model::YearDescription >":
        return _openstudiomodelcore.Model_yearDescription(self)

    def calendarYear(self) -> "boost::optional< int >":
        return _openstudiomodelcore.Model_calendarYear(self)

    def dayofWeekforStartDay(self) -> "std::string":
        return _openstudiomodelcore.Model_dayofWeekforStartDay(self)

    def isDayofWeekforStartDayDefaulted(self) -> "bool":
        return _openstudiomodelcore.Model_isDayofWeekforStartDayDefaulted(self)

    def isLeapYear(self) -> "bool":
        return _openstudiomodelcore.Model_isLeapYear(self)

    def isIsLeapYearDefaulted(self) -> "bool":
        return _openstudiomodelcore.Model_isIsLeapYearDefaulted(self)

    def setCalendarYear(self, calendarYear: 'int') -> "bool":
        return _openstudiomodelcore.Model_setCalendarYear(self, calendarYear)

    def resetCalendarYear(self) -> "void":
        return _openstudiomodelcore.Model_resetCalendarYear(self)

    def setDayofWeekforStartDay(self, dayofWeekforStartDay: 'std::string') -> "bool":
        return _openstudiomodelcore.Model_setDayofWeekforStartDay(self, dayofWeekforStartDay)

    def resetDayofWeekforStartDay(self) -> "void":
        return _openstudiomodelcore.Model_resetDayofWeekforStartDay(self)

    def setIsLeapYear(self, isLeapYear: 'bool') -> "bool":
        return _openstudiomodelcore.Model_setIsLeapYear(self, isLeapYear)

    def resetIsLeapYear(self) -> "void":
        return _openstudiomodelcore.Model_resetIsLeapYear(self)

    def assumedYear(self) -> "int":
        return _openstudiomodelcore.Model_assumedYear(self)

    def makeDate(self, *args) -> "openstudio::Date":
        return _openstudiomodelcore.Model_makeDate(self, *args)

    def weatherFile(self) -> "boost::optional< openstudio::model::WeatherFile >":
        return _openstudiomodelcore.Model_weatherFile(self)

    def alwaysOnDiscreteSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.Model_alwaysOnDiscreteSchedule(self)

    def alwaysOnDiscreteScheduleName(self) -> "std::string":
        return _openstudiomodelcore.Model_alwaysOnDiscreteScheduleName(self)

    def alwaysOffDiscreteSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.Model_alwaysOffDiscreteSchedule(self)

    def alwaysOffDiscreteScheduleName(self) -> "std::string":
        return _openstudiomodelcore.Model_alwaysOffDiscreteScheduleName(self)

    def alwaysOnContinuousSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.Model_alwaysOnContinuousSchedule(self)

    def alwaysOnContinuousScheduleName(self) -> "std::string":
        return _openstudiomodelcore.Model_alwaysOnContinuousScheduleName(self)

    def outdoorAirNode(self) -> "openstudio::model::Node":
        return _openstudiomodelcore.Model_outdoorAirNode(self)

    def plenumSpaceType(self) -> "openstudio::model::SpaceType":
        return _openstudiomodelcore.Model_plenumSpaceType(self)

    def plenumSpaceTypeName(self) -> "std::string":
        return _openstudiomodelcore.Model_plenumSpaceTypeName(self)

    def setWorkflowJSON(self, workflowJSON: 'WorkflowJSON') -> "bool":
        return _openstudiomodelcore.Model_setWorkflowJSON(self, workflowJSON)

    def resetWorkflowJSON(self) -> "void":
        return _openstudiomodelcore.Model_resetWorkflowJSON(self)

    def setSqlFile(self, sqlFile: 'SqlFile') -> "bool":
        return _openstudiomodelcore.Model_setSqlFile(self, sqlFile)

    def resetSqlFile(self) -> "bool":
        return _openstudiomodelcore.Model_resetSqlFile(self)
    __swig_getmethods__["load"] = lambda x: _openstudiomodelcore.Model_load
    if _newclass:
        load = staticmethod(_openstudiomodelcore.Model_load)

    def __eq__(self, other: 'Model') -> "bool":
        return _openstudiomodelcore.Model___eq__(self, other)

    def modelObjects(self, sorted: 'bool'=False) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.Model_modelObjects(self, sorted)

    def insertComponent(self, component: 'Component') -> "boost::optional< openstudio::model::ComponentData >":
        return _openstudiomodelcore.Model_insertComponent(self, component)

    def purgeUnusedResourceObjects(self, *args) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.Model_purgeUnusedResourceObjects(self, *args)

    def connect(self, sourceObject: 'ModelObject', sourcePort: 'unsigned int', targetObject: 'ModelObject', targetPort: 'unsigned int') -> "void":
        return _openstudiomodelcore.Model_connect(self, sourceObject, sourcePort, targetObject, targetPort)

    def disconnect(self, object: 'ModelObject', port: 'unsigned int') -> "void":
        return _openstudiomodelcore.Model_disconnect(self, object, port)

    def autosize(self) -> "void":
        return _openstudiomodelcore.Model_autosize(self)

    def applySizingValues(self) -> "void":
        return _openstudiomodelcore.Model_applySizingValues(self)
Model_swigregister = _openstudiomodelcore.Model_swigregister
Model_swigregister(Model)

def Model_load(*args) -> "boost::optional< openstudio::model::Model >":
    return _openstudiomodelcore.Model_load(*args)
Model_load = _openstudiomodelcore.Model_load


def compareInputAndOutput(*args) -> "bool":
    return _openstudiomodelcore.compareInputAndOutput(*args)
compareInputAndOutput = _openstudiomodelcore.compareInputAndOutput

def exampleModel() -> "openstudio::model::Model":
    return _openstudiomodelcore.exampleModel()
exampleModel = _openstudiomodelcore.exampleModel

def addExampleModelObjects(model: 'Model') -> "void":
    return _openstudiomodelcore.addExampleModelObjects(model)
addExampleModelObjects = _openstudiomodelcore.addExampleModelObjects
class ModelExtensibleGroup(openstudioutilitiesidf.WorkspaceExtensibleGroup):
    __swig_setmethods__ = {}
    for _s in [openstudioutilitiesidf.WorkspaceExtensibleGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelExtensibleGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudioutilitiesidf.WorkspaceExtensibleGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelExtensibleGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ModelExtensibleGroup
    __del__ = lambda self: None
ModelExtensibleGroup_swigregister = _openstudiomodelcore.ModelExtensibleGroup_swigregister
ModelExtensibleGroup_swigregister(ModelExtensibleGroup)

class Component(Model):
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)
    __repr__ = _swig_repr

    def __init__(self, idfFile: 'IdfFile'):
        this = _openstudiomodelcore.new_Component(idfFile)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_Component
    __del__ = lambda self: None

    def componentData(self) -> "openstudio::model::ComponentData":
        return _openstudiomodelcore.Component_componentData(self)

    def primaryObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.Component_primaryObject(self)
    __swig_getmethods__["load"] = lambda x: _openstudiomodelcore.Component_load
    if _newclass:
        load = staticmethod(_openstudiomodelcore.Component_load)

    def save(self, p: 'path', overwrite: 'bool'=False) -> "bool":
        return _openstudiomodelcore.Component_save(self, p, overwrite)
Component_swigregister = _openstudiomodelcore.Component_swigregister
Component_swigregister(Component)

def Component_load(p: 'path') -> "boost::optional< openstudio::model::Component >":
    return _openstudiomodelcore.Component_load(p)
Component_load = _openstudiomodelcore.Component_load


def initializeModel(*args) -> "openstudio::path":
    return _openstudiomodelcore.initializeModel(*args)
initializeModel = _openstudiomodelcore.initializeModel

def initializeModelObjects(model: 'Model') -> "void":
    return _openstudiomodelcore.initializeModelObjects(model)
initializeModelObjects = _openstudiomodelcore.initializeModelObjects

def saveModel(model: 'Model', osmPath: 'path', modelTempDir: 'path') -> "bool":
    return _openstudiomodelcore.saveModel(model, osmPath, modelTempDir)
saveModel = _openstudiomodelcore.saveModel

def removeModelTempDir(modelTempDir: 'path') -> "void":
    return _openstudiomodelcore.removeModelTempDir(modelTempDir)
removeModelTempDir = _openstudiomodelcore.removeModelTempDir

def toModel(workspace: 'Workspace') -> "openstudio::model::Model":
    return _openstudiomodelcore.toModel(workspace)
toModel = _openstudiomodelcore.toModel

def toOptionalModel(workspace: 'Workspace') -> "boost::optional< openstudio::model::Model >":
    return _openstudiomodelcore.toOptionalModel(workspace)
toOptionalModel = _openstudiomodelcore.toOptionalModel

def toComponent(workspace: 'Workspace') -> "openstudio::model::Component":
    return _openstudiomodelcore.toComponent(workspace)
toComponent = _openstudiomodelcore.toComponent

def toOptionalComponent(workspace: 'Workspace') -> "boost::optional< openstudio::model::Component >":
    return _openstudiomodelcore.toOptionalComponent(workspace)
toOptionalComponent = _openstudiomodelcore.toOptionalComponent
class ModelExtensibleGroupVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelExtensibleGroupVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelExtensibleGroupVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelExtensibleGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelExtensibleGroupVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelExtensibleGroupVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::size_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::value_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ModelExtensibleGroup >::difference_type', j: 'std::vector< openstudio::model::ModelExtensibleGroup >::difference_type') -> "std::vector< openstudio::model::ModelExtensibleGroup,std::allocator< openstudio::model::ModelExtensibleGroup > > *":
        return _openstudiomodelcore.ModelExtensibleGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ModelExtensibleGroup >::difference_type', j: 'std::vector< openstudio::model::ModelExtensibleGroup >::difference_type') -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ModelExtensibleGroup >::value_type const &":
        return _openstudiomodelcore.ModelExtensibleGroupVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector___setitem__(self, *args)

    def append(self, x: 'ModelExtensibleGroup') -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelExtensibleGroupVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::size_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_clear(self)

    def swap(self, v: 'ModelExtensibleGroupVector') -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::allocator_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::reverse_iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::reverse_iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ModelExtensibleGroup >::iterator":
        return _openstudiomodelcore.ModelExtensibleGroupVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ModelExtensibleGroupVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ModelExtensibleGroup') -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::value_type const &":
        return _openstudiomodelcore.ModelExtensibleGroupVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::value_type const &":
        return _openstudiomodelcore.ModelExtensibleGroupVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ModelExtensibleGroup >::size_type', x: 'ModelExtensibleGroup') -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ModelExtensibleGroup >::size_type', x: 'ModelExtensibleGroup') -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ModelExtensibleGroup >::size_type') -> "void":
        return _openstudiomodelcore.ModelExtensibleGroupVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ModelExtensibleGroup >::size_type":
        return _openstudiomodelcore.ModelExtensibleGroupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelExtensibleGroupVector
    __del__ = lambda self: None
ModelExtensibleGroupVector_swigregister = _openstudiomodelcore.ModelExtensibleGroupVector_swigregister
ModelExtensibleGroupVector_swigregister(ModelExtensibleGroupVector)

class OptionalModelExtensibleGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalModelExtensibleGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalModelExtensibleGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalModelExtensibleGroup(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_reset(self)

    def __ref__(self) -> "openstudio::model::ModelExtensibleGroup":
        return _openstudiomodelcore.OptionalModelExtensibleGroup___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_isNull(self)

    def get(self) -> "openstudio::model::ModelExtensibleGroup":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_get(self)

    def set(self, t: 'ModelExtensibleGroup') -> "void":
        return _openstudiomodelcore.OptionalModelExtensibleGroup_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModelExtensibleGroup
    __del__ = lambda self: None
OptionalModelExtensibleGroup_swigregister = _openstudiomodelcore.OptionalModelExtensibleGroup_swigregister
OptionalModelExtensibleGroup_swigregister(OptionalModelExtensibleGroup)

class ParentObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParentObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParentObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ParentObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ParentObjectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ParentObjectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ParentObject >::size_type":
        return _openstudiomodelcore.ParentObjectVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ParentObject >::value_type":
        return _openstudiomodelcore.ParentObjectVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ParentObject >::difference_type', j: 'std::vector< openstudio::model::ParentObject >::difference_type') -> "std::vector< openstudio::model::ParentObject,std::allocator< openstudio::model::ParentObject > > *":
        return _openstudiomodelcore.ParentObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ParentObjectVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ParentObject >::difference_type', j: 'std::vector< openstudio::model::ParentObject >::difference_type') -> "void":
        return _openstudiomodelcore.ParentObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ParentObjectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ParentObject >::value_type const &":
        return _openstudiomodelcore.ParentObjectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ParentObjectVector___setitem__(self, *args)

    def append(self, x: 'ParentObject') -> "void":
        return _openstudiomodelcore.ParentObjectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ParentObjectVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ParentObject >::size_type":
        return _openstudiomodelcore.ParentObjectVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ParentObjectVector_clear(self)

    def swap(self, v: 'ParentObjectVector') -> "void":
        return _openstudiomodelcore.ParentObjectVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ParentObject >::allocator_type":
        return _openstudiomodelcore.ParentObjectVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ParentObject >::iterator":
        return _openstudiomodelcore.ParentObjectVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ParentObject >::iterator":
        return _openstudiomodelcore.ParentObjectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ParentObject >::reverse_iterator":
        return _openstudiomodelcore.ParentObjectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ParentObject >::reverse_iterator":
        return _openstudiomodelcore.ParentObjectVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ParentObjectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ParentObject >::iterator":
        return _openstudiomodelcore.ParentObjectVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ParentObjectVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ParentObject') -> "void":
        return _openstudiomodelcore.ParentObjectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ParentObject >::value_type const &":
        return _openstudiomodelcore.ParentObjectVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ParentObject >::value_type const &":
        return _openstudiomodelcore.ParentObjectVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ParentObject >::size_type', x: 'ParentObject') -> "void":
        return _openstudiomodelcore.ParentObjectVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ParentObject >::size_type', x: 'ParentObject') -> "void":
        return _openstudiomodelcore.ParentObjectVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ParentObjectVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ParentObject >::size_type') -> "void":
        return _openstudiomodelcore.ParentObjectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ParentObject >::size_type":
        return _openstudiomodelcore.ParentObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ParentObjectVector
    __del__ = lambda self: None
ParentObjectVector_swigregister = _openstudiomodelcore.ParentObjectVector_swigregister
ParentObjectVector_swigregister(ParentObjectVector)

class OptionalParentObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalParentObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalParentObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalParentObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalParentObject_reset(self)

    def __ref__(self) -> "openstudio::model::ParentObject":
        return _openstudiomodelcore.OptionalParentObject___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalParentObject_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalParentObject_isNull(self)

    def get(self) -> "openstudio::model::ParentObject":
        return _openstudiomodelcore.OptionalParentObject_get(self)

    def set(self, t: 'ParentObject') -> "void":
        return _openstudiomodelcore.OptionalParentObject_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalParentObject
    __del__ = lambda self: None
OptionalParentObject_swigregister = _openstudiomodelcore.OptionalParentObject_swigregister
OptionalParentObject_swigregister(OptionalParentObject)

class ResourceObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ResourceObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ResourceObjectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ResourceObjectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ResourceObject >::size_type":
        return _openstudiomodelcore.ResourceObjectVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ResourceObject >::value_type":
        return _openstudiomodelcore.ResourceObjectVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ResourceObject >::difference_type', j: 'std::vector< openstudio::model::ResourceObject >::difference_type') -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > > *":
        return _openstudiomodelcore.ResourceObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ResourceObjectVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ResourceObject >::difference_type', j: 'std::vector< openstudio::model::ResourceObject >::difference_type') -> "void":
        return _openstudiomodelcore.ResourceObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ResourceObjectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ResourceObject >::value_type const &":
        return _openstudiomodelcore.ResourceObjectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ResourceObjectVector___setitem__(self, *args)

    def append(self, x: 'ResourceObject') -> "void":
        return _openstudiomodelcore.ResourceObjectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ResourceObjectVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ResourceObject >::size_type":
        return _openstudiomodelcore.ResourceObjectVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ResourceObjectVector_clear(self)

    def swap(self, v: 'ResourceObjectVector') -> "void":
        return _openstudiomodelcore.ResourceObjectVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ResourceObject >::allocator_type":
        return _openstudiomodelcore.ResourceObjectVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ResourceObject >::iterator":
        return _openstudiomodelcore.ResourceObjectVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ResourceObject >::iterator":
        return _openstudiomodelcore.ResourceObjectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ResourceObject >::reverse_iterator":
        return _openstudiomodelcore.ResourceObjectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ResourceObject >::reverse_iterator":
        return _openstudiomodelcore.ResourceObjectVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ResourceObjectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ResourceObject >::iterator":
        return _openstudiomodelcore.ResourceObjectVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ResourceObjectVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ResourceObject') -> "void":
        return _openstudiomodelcore.ResourceObjectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ResourceObject >::value_type const &":
        return _openstudiomodelcore.ResourceObjectVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ResourceObject >::value_type const &":
        return _openstudiomodelcore.ResourceObjectVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ResourceObject >::size_type', x: 'ResourceObject') -> "void":
        return _openstudiomodelcore.ResourceObjectVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ResourceObject >::size_type', x: 'ResourceObject') -> "void":
        return _openstudiomodelcore.ResourceObjectVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ResourceObjectVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ResourceObject >::size_type') -> "void":
        return _openstudiomodelcore.ResourceObjectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ResourceObject >::size_type":
        return _openstudiomodelcore.ResourceObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ResourceObjectVector
    __del__ = lambda self: None
ResourceObjectVector_swigregister = _openstudiomodelcore.ResourceObjectVector_swigregister
ResourceObjectVector_swigregister(ResourceObjectVector)

class OptionalResourceObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalResourceObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalResourceObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalResourceObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalResourceObject_reset(self)

    def __ref__(self) -> "openstudio::model::ResourceObject":
        return _openstudiomodelcore.OptionalResourceObject___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalResourceObject_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalResourceObject_isNull(self)

    def get(self) -> "openstudio::model::ResourceObject":
        return _openstudiomodelcore.OptionalResourceObject_get(self)

    def set(self, t: 'ResourceObject') -> "void":
        return _openstudiomodelcore.OptionalResourceObject_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalResourceObject
    __del__ = lambda self: None
OptionalResourceObject_swigregister = _openstudiomodelcore.OptionalResourceObject_swigregister
OptionalResourceObject_swigregister(OptionalResourceObject)

class OptionalVersion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalVersion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalVersion(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalVersion_reset(self)

    def __ref__(self) -> "openstudio::model::Version":
        return _openstudiomodelcore.OptionalVersion___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalVersion_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalVersion_isNull(self)

    def get(self) -> "openstudio::model::Version":
        return _openstudiomodelcore.OptionalVersion_get(self)

    def set(self, t: 'Version') -> "void":
        return _openstudiomodelcore.OptionalVersion_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalVersion
    __del__ = lambda self: None
OptionalVersion_swigregister = _openstudiomodelcore.OptionalVersion_swigregister
OptionalVersion_swigregister(OptionalVersion)

class OptionalLifeCycleCostParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLifeCycleCostParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLifeCycleCostParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalLifeCycleCostParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_reset(self)

    def __ref__(self) -> "openstudio::model::LifeCycleCostParameters":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_isNull(self)

    def get(self) -> "openstudio::model::LifeCycleCostParameters":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_get(self)

    def set(self, t: 'LifeCycleCostParameters') -> "void":
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalLifeCycleCostParameters
    __del__ = lambda self: None
OptionalLifeCycleCostParameters_swigregister = _openstudiomodelcore.OptionalLifeCycleCostParameters_swigregister
OptionalLifeCycleCostParameters_swigregister(OptionalLifeCycleCostParameters)

class OptionalRadianceParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRadianceParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRadianceParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalRadianceParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalRadianceParameters_reset(self)

    def __ref__(self) -> "openstudio::model::RadianceParameters":
        return _openstudiomodelcore.OptionalRadianceParameters___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalRadianceParameters_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalRadianceParameters_isNull(self)

    def get(self) -> "openstudio::model::RadianceParameters":
        return _openstudiomodelcore.OptionalRadianceParameters_get(self)

    def set(self, t: 'RadianceParameters') -> "void":
        return _openstudiomodelcore.OptionalRadianceParameters_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalRadianceParameters
    __del__ = lambda self: None
OptionalRadianceParameters_swigregister = _openstudiomodelcore.OptionalRadianceParameters_swigregister
OptionalRadianceParameters_swigregister(OptionalRadianceParameters)

class OutputMeterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputMeterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputMeterVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.OutputMeterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.OutputMeterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.OutputMeterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::OutputMeter >::size_type":
        return _openstudiomodelcore.OutputMeterVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::OutputMeter >::value_type":
        return _openstudiomodelcore.OutputMeterVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::OutputMeter >::difference_type', j: 'std::vector< openstudio::model::OutputMeter >::difference_type') -> "std::vector< openstudio::model::OutputMeter,std::allocator< openstudio::model::OutputMeter > > *":
        return _openstudiomodelcore.OutputMeterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.OutputMeterVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::OutputMeter >::difference_type', j: 'std::vector< openstudio::model::OutputMeter >::difference_type') -> "void":
        return _openstudiomodelcore.OutputMeterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.OutputMeterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::OutputMeter >::value_type const &":
        return _openstudiomodelcore.OutputMeterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.OutputMeterVector___setitem__(self, *args)

    def append(self, x: 'OutputMeter') -> "void":
        return _openstudiomodelcore.OutputMeterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.OutputMeterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::OutputMeter >::size_type":
        return _openstudiomodelcore.OutputMeterVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.OutputMeterVector_clear(self)

    def swap(self, v: 'OutputMeterVector') -> "void":
        return _openstudiomodelcore.OutputMeterVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::OutputMeter >::allocator_type":
        return _openstudiomodelcore.OutputMeterVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::OutputMeter >::iterator":
        return _openstudiomodelcore.OutputMeterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::OutputMeter >::iterator":
        return _openstudiomodelcore.OutputMeterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::OutputMeter >::reverse_iterator":
        return _openstudiomodelcore.OutputMeterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::OutputMeter >::reverse_iterator":
        return _openstudiomodelcore.OutputMeterVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.OutputMeterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::OutputMeter >::iterator":
        return _openstudiomodelcore.OutputMeterVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OutputMeterVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'OutputMeter') -> "void":
        return _openstudiomodelcore.OutputMeterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::OutputMeter >::value_type const &":
        return _openstudiomodelcore.OutputMeterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::OutputMeter >::value_type const &":
        return _openstudiomodelcore.OutputMeterVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::OutputMeter >::size_type', x: 'OutputMeter') -> "void":
        return _openstudiomodelcore.OutputMeterVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::OutputMeter >::size_type', x: 'OutputMeter') -> "void":
        return _openstudiomodelcore.OutputMeterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.OutputMeterVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::OutputMeter >::size_type') -> "void":
        return _openstudiomodelcore.OutputMeterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::OutputMeter >::size_type":
        return _openstudiomodelcore.OutputMeterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_OutputMeterVector
    __del__ = lambda self: None
OutputMeterVector_swigregister = _openstudiomodelcore.OutputMeterVector_swigregister
OutputMeterVector_swigregister(OutputMeterVector)

class OptionalOutputMeter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalOutputMeter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalOutputMeter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalOutputMeter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalOutputMeter_reset(self)

    def __ref__(self) -> "openstudio::model::OutputMeter":
        return _openstudiomodelcore.OptionalOutputMeter___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputMeter_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputMeter_isNull(self)

    def get(self) -> "openstudio::model::OutputMeter":
        return _openstudiomodelcore.OptionalOutputMeter_get(self)

    def set(self, t: 'OutputMeter') -> "void":
        return _openstudiomodelcore.OptionalOutputMeter_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalOutputMeter
    __del__ = lambda self: None
OptionalOutputMeter_swigregister = _openstudiomodelcore.OptionalOutputMeter_swigregister
OptionalOutputMeter_swigregister(OptionalOutputMeter)

class MeterCustomVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeterCustomVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeterCustomVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.MeterCustomVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.MeterCustomVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.MeterCustomVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MeterCustom >::size_type":
        return _openstudiomodelcore.MeterCustomVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::MeterCustom >::value_type":
        return _openstudiomodelcore.MeterCustomVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::MeterCustom >::difference_type', j: 'std::vector< openstudio::model::MeterCustom >::difference_type') -> "std::vector< openstudio::model::MeterCustom,std::allocator< openstudio::model::MeterCustom > > *":
        return _openstudiomodelcore.MeterCustomVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::MeterCustom >::difference_type', j: 'std::vector< openstudio::model::MeterCustom >::difference_type') -> "void":
        return _openstudiomodelcore.MeterCustomVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MeterCustom >::value_type const &":
        return _openstudiomodelcore.MeterCustomVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomVector___setitem__(self, *args)

    def append(self, x: 'MeterCustom') -> "void":
        return _openstudiomodelcore.MeterCustomVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.MeterCustomVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MeterCustom >::size_type":
        return _openstudiomodelcore.MeterCustomVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.MeterCustomVector_clear(self)

    def swap(self, v: 'MeterCustomVector') -> "void":
        return _openstudiomodelcore.MeterCustomVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::MeterCustom >::allocator_type":
        return _openstudiomodelcore.MeterCustomVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::MeterCustom >::iterator":
        return _openstudiomodelcore.MeterCustomVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MeterCustom >::iterator":
        return _openstudiomodelcore.MeterCustomVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MeterCustom >::reverse_iterator":
        return _openstudiomodelcore.MeterCustomVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MeterCustom >::reverse_iterator":
        return _openstudiomodelcore.MeterCustomVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.MeterCustomVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MeterCustom >::iterator":
        return _openstudiomodelcore.MeterCustomVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_MeterCustomVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'MeterCustom') -> "void":
        return _openstudiomodelcore.MeterCustomVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MeterCustom >::value_type const &":
        return _openstudiomodelcore.MeterCustomVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MeterCustom >::value_type const &":
        return _openstudiomodelcore.MeterCustomVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::MeterCustom >::size_type', x: 'MeterCustom') -> "void":
        return _openstudiomodelcore.MeterCustomVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::MeterCustom >::size_type', x: 'MeterCustom') -> "void":
        return _openstudiomodelcore.MeterCustomVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::MeterCustom >::size_type') -> "void":
        return _openstudiomodelcore.MeterCustomVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MeterCustom >::size_type":
        return _openstudiomodelcore.MeterCustomVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustomVector
    __del__ = lambda self: None
MeterCustomVector_swigregister = _openstudiomodelcore.MeterCustomVector_swigregister
MeterCustomVector_swigregister(MeterCustomVector)

class OptionalMeterCustom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMeterCustom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMeterCustom, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalMeterCustom(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalMeterCustom_reset(self)

    def __ref__(self) -> "openstudio::model::MeterCustom":
        return _openstudiomodelcore.OptionalMeterCustom___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalMeterCustom_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalMeterCustom_isNull(self)

    def get(self) -> "openstudio::model::MeterCustom":
        return _openstudiomodelcore.OptionalMeterCustom_get(self)

    def set(self, t: 'MeterCustom') -> "void":
        return _openstudiomodelcore.OptionalMeterCustom_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalMeterCustom
    __del__ = lambda self: None
OptionalMeterCustom_swigregister = _openstudiomodelcore.OptionalMeterCustom_swigregister
OptionalMeterCustom_swigregister(OptionalMeterCustom)

class MeterCustomDecrementVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeterCustomDecrementVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeterCustomDecrementVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.MeterCustomDecrementVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.MeterCustomDecrementVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.MeterCustomDecrementVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::size_type":
        return _openstudiomodelcore.MeterCustomDecrementVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::value_type":
        return _openstudiomodelcore.MeterCustomDecrementVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::MeterCustomDecrement >::difference_type', j: 'std::vector< openstudio::model::MeterCustomDecrement >::difference_type') -> "std::vector< openstudio::model::MeterCustomDecrement,std::allocator< openstudio::model::MeterCustomDecrement > > *":
        return _openstudiomodelcore.MeterCustomDecrementVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::MeterCustomDecrement >::difference_type', j: 'std::vector< openstudio::model::MeterCustomDecrement >::difference_type') -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MeterCustomDecrement >::value_type const &":
        return _openstudiomodelcore.MeterCustomDecrementVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector___setitem__(self, *args)

    def append(self, x: 'MeterCustomDecrement') -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.MeterCustomDecrementVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::size_type":
        return _openstudiomodelcore.MeterCustomDecrementVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_clear(self)

    def swap(self, v: 'MeterCustomDecrementVector') -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::allocator_type":
        return _openstudiomodelcore.MeterCustomDecrementVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::reverse_iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::reverse_iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MeterCustomDecrement >::iterator":
        return _openstudiomodelcore.MeterCustomDecrementVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_MeterCustomDecrementVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'MeterCustomDecrement') -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::value_type const &":
        return _openstudiomodelcore.MeterCustomDecrementVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::value_type const &":
        return _openstudiomodelcore.MeterCustomDecrementVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::MeterCustomDecrement >::size_type', x: 'MeterCustomDecrement') -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::MeterCustomDecrement >::size_type', x: 'MeterCustomDecrement') -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::MeterCustomDecrement >::size_type') -> "void":
        return _openstudiomodelcore.MeterCustomDecrementVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MeterCustomDecrement >::size_type":
        return _openstudiomodelcore.MeterCustomDecrementVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustomDecrementVector
    __del__ = lambda self: None
MeterCustomDecrementVector_swigregister = _openstudiomodelcore.MeterCustomDecrementVector_swigregister
MeterCustomDecrementVector_swigregister(MeterCustomDecrementVector)

class OptionalMeterCustomDecrement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMeterCustomDecrement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMeterCustomDecrement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalMeterCustomDecrement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_reset(self)

    def __ref__(self) -> "openstudio::model::MeterCustomDecrement":
        return _openstudiomodelcore.OptionalMeterCustomDecrement___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_isNull(self)

    def get(self) -> "openstudio::model::MeterCustomDecrement":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_get(self)

    def set(self, t: 'MeterCustomDecrement') -> "void":
        return _openstudiomodelcore.OptionalMeterCustomDecrement_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalMeterCustomDecrement
    __del__ = lambda self: None
OptionalMeterCustomDecrement_swigregister = _openstudiomodelcore.OptionalMeterCustomDecrement_swigregister
OptionalMeterCustomDecrement_swigregister(OptionalMeterCustomDecrement)

class LifeCycleCostVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LifeCycleCostVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LifeCycleCostVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.LifeCycleCostVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LifeCycleCost >::size_type":
        return _openstudiomodelcore.LifeCycleCostVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::LifeCycleCost >::value_type":
        return _openstudiomodelcore.LifeCycleCostVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::LifeCycleCost >::difference_type', j: 'std::vector< openstudio::model::LifeCycleCost >::difference_type') -> "std::vector< openstudio::model::LifeCycleCost,std::allocator< openstudio::model::LifeCycleCost > > *":
        return _openstudiomodelcore.LifeCycleCostVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::LifeCycleCost >::difference_type', j: 'std::vector< openstudio::model::LifeCycleCost >::difference_type') -> "void":
        return _openstudiomodelcore.LifeCycleCostVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LifeCycleCost >::value_type const &":
        return _openstudiomodelcore.LifeCycleCostVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector___setitem__(self, *args)

    def append(self, x: 'LifeCycleCost') -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LifeCycleCost >::size_type":
        return _openstudiomodelcore.LifeCycleCostVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_clear(self)

    def swap(self, v: 'LifeCycleCostVector') -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::LifeCycleCost >::allocator_type":
        return _openstudiomodelcore.LifeCycleCostVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::LifeCycleCost >::iterator":
        return _openstudiomodelcore.LifeCycleCostVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LifeCycleCost >::iterator":
        return _openstudiomodelcore.LifeCycleCostVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LifeCycleCost >::reverse_iterator":
        return _openstudiomodelcore.LifeCycleCostVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LifeCycleCost >::reverse_iterator":
        return _openstudiomodelcore.LifeCycleCostVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LifeCycleCost >::iterator":
        return _openstudiomodelcore.LifeCycleCostVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_LifeCycleCostVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'LifeCycleCost') -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LifeCycleCost >::value_type const &":
        return _openstudiomodelcore.LifeCycleCostVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LifeCycleCost >::value_type const &":
        return _openstudiomodelcore.LifeCycleCostVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::LifeCycleCost >::size_type', x: 'LifeCycleCost') -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::LifeCycleCost >::size_type', x: 'LifeCycleCost') -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::LifeCycleCost >::size_type') -> "void":
        return _openstudiomodelcore.LifeCycleCostVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LifeCycleCost >::size_type":
        return _openstudiomodelcore.LifeCycleCostVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_LifeCycleCostVector
    __del__ = lambda self: None
LifeCycleCostVector_swigregister = _openstudiomodelcore.LifeCycleCostVector_swigregister
LifeCycleCostVector_swigregister(LifeCycleCostVector)

class OptionalLifeCycleCost(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLifeCycleCost, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLifeCycleCost, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalLifeCycleCost(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalLifeCycleCost_reset(self)

    def __ref__(self) -> "openstudio::model::LifeCycleCost":
        return _openstudiomodelcore.OptionalLifeCycleCost___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalLifeCycleCost_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalLifeCycleCost_isNull(self)

    def get(self) -> "openstudio::model::LifeCycleCost":
        return _openstudiomodelcore.OptionalLifeCycleCost_get(self)

    def set(self, t: 'LifeCycleCost') -> "void":
        return _openstudiomodelcore.OptionalLifeCycleCost_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalLifeCycleCost
    __del__ = lambda self: None
OptionalLifeCycleCost_swigregister = _openstudiomodelcore.OptionalLifeCycleCost_swigregister
OptionalLifeCycleCost_swigregister(OptionalLifeCycleCost)

class UtilityBillVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtilityBillVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UtilityBillVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.UtilityBillVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.UtilityBillVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.UtilityBillVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::UtilityBill >::size_type":
        return _openstudiomodelcore.UtilityBillVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::UtilityBill >::value_type":
        return _openstudiomodelcore.UtilityBillVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::UtilityBill >::difference_type', j: 'std::vector< openstudio::model::UtilityBill >::difference_type') -> "std::vector< openstudio::model::UtilityBill,std::allocator< openstudio::model::UtilityBill > > *":
        return _openstudiomodelcore.UtilityBillVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.UtilityBillVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::UtilityBill >::difference_type', j: 'std::vector< openstudio::model::UtilityBill >::difference_type') -> "void":
        return _openstudiomodelcore.UtilityBillVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.UtilityBillVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::UtilityBill >::value_type const &":
        return _openstudiomodelcore.UtilityBillVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.UtilityBillVector___setitem__(self, *args)

    def append(self, x: 'UtilityBill') -> "void":
        return _openstudiomodelcore.UtilityBillVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.UtilityBillVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::UtilityBill >::size_type":
        return _openstudiomodelcore.UtilityBillVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.UtilityBillVector_clear(self)

    def swap(self, v: 'UtilityBillVector') -> "void":
        return _openstudiomodelcore.UtilityBillVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::UtilityBill >::allocator_type":
        return _openstudiomodelcore.UtilityBillVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::UtilityBill >::iterator":
        return _openstudiomodelcore.UtilityBillVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::UtilityBill >::iterator":
        return _openstudiomodelcore.UtilityBillVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::UtilityBill >::reverse_iterator":
        return _openstudiomodelcore.UtilityBillVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::UtilityBill >::reverse_iterator":
        return _openstudiomodelcore.UtilityBillVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.UtilityBillVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::UtilityBill >::iterator":
        return _openstudiomodelcore.UtilityBillVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_UtilityBillVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'UtilityBill') -> "void":
        return _openstudiomodelcore.UtilityBillVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::UtilityBill >::value_type const &":
        return _openstudiomodelcore.UtilityBillVector_front(self)

    def back(self) -> "std::vector< openstudio::model::UtilityBill >::value_type const &":
        return _openstudiomodelcore.UtilityBillVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::UtilityBill >::size_type', x: 'UtilityBill') -> "void":
        return _openstudiomodelcore.UtilityBillVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::UtilityBill >::size_type', x: 'UtilityBill') -> "void":
        return _openstudiomodelcore.UtilityBillVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.UtilityBillVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::UtilityBill >::size_type') -> "void":
        return _openstudiomodelcore.UtilityBillVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::UtilityBill >::size_type":
        return _openstudiomodelcore.UtilityBillVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_UtilityBillVector
    __del__ = lambda self: None
UtilityBillVector_swigregister = _openstudiomodelcore.UtilityBillVector_swigregister
UtilityBillVector_swigregister(UtilityBillVector)

class OptionalUtilityBill(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalUtilityBill, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalUtilityBill, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalUtilityBill(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalUtilityBill_reset(self)

    def __ref__(self) -> "openstudio::model::UtilityBill":
        return _openstudiomodelcore.OptionalUtilityBill___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalUtilityBill_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalUtilityBill_isNull(self)

    def get(self) -> "openstudio::model::UtilityBill":
        return _openstudiomodelcore.OptionalUtilityBill_get(self)

    def set(self, t: 'UtilityBill') -> "void":
        return _openstudiomodelcore.OptionalUtilityBill_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalUtilityBill
    __del__ = lambda self: None
OptionalUtilityBill_swigregister = _openstudiomodelcore.OptionalUtilityBill_swigregister
OptionalUtilityBill_swigregister(OptionalUtilityBill)

class BillingPeriodVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BillingPeriodVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BillingPeriodVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.BillingPeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.BillingPeriodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.BillingPeriodVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::BillingPeriod >::size_type":
        return _openstudiomodelcore.BillingPeriodVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::BillingPeriod >::value_type":
        return _openstudiomodelcore.BillingPeriodVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::BillingPeriod >::difference_type', j: 'std::vector< openstudio::model::BillingPeriod >::difference_type') -> "std::vector< openstudio::model::BillingPeriod,std::allocator< openstudio::model::BillingPeriod > > *":
        return _openstudiomodelcore.BillingPeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.BillingPeriodVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::BillingPeriod >::difference_type', j: 'std::vector< openstudio::model::BillingPeriod >::difference_type') -> "void":
        return _openstudiomodelcore.BillingPeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.BillingPeriodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::BillingPeriod >::value_type const &":
        return _openstudiomodelcore.BillingPeriodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.BillingPeriodVector___setitem__(self, *args)

    def append(self, x: 'BillingPeriod') -> "void":
        return _openstudiomodelcore.BillingPeriodVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.BillingPeriodVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::BillingPeriod >::size_type":
        return _openstudiomodelcore.BillingPeriodVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.BillingPeriodVector_clear(self)

    def swap(self, v: 'BillingPeriodVector') -> "void":
        return _openstudiomodelcore.BillingPeriodVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::BillingPeriod >::allocator_type":
        return _openstudiomodelcore.BillingPeriodVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::BillingPeriod >::iterator":
        return _openstudiomodelcore.BillingPeriodVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::BillingPeriod >::iterator":
        return _openstudiomodelcore.BillingPeriodVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::BillingPeriod >::reverse_iterator":
        return _openstudiomodelcore.BillingPeriodVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::BillingPeriod >::reverse_iterator":
        return _openstudiomodelcore.BillingPeriodVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.BillingPeriodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::BillingPeriod >::iterator":
        return _openstudiomodelcore.BillingPeriodVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_BillingPeriodVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'BillingPeriod') -> "void":
        return _openstudiomodelcore.BillingPeriodVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::BillingPeriod >::value_type const &":
        return _openstudiomodelcore.BillingPeriodVector_front(self)

    def back(self) -> "std::vector< openstudio::model::BillingPeriod >::value_type const &":
        return _openstudiomodelcore.BillingPeriodVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::BillingPeriod >::size_type', x: 'BillingPeriod') -> "void":
        return _openstudiomodelcore.BillingPeriodVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::BillingPeriod >::size_type', x: 'BillingPeriod') -> "void":
        return _openstudiomodelcore.BillingPeriodVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.BillingPeriodVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::BillingPeriod >::size_type') -> "void":
        return _openstudiomodelcore.BillingPeriodVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::BillingPeriod >::size_type":
        return _openstudiomodelcore.BillingPeriodVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_BillingPeriodVector
    __del__ = lambda self: None
BillingPeriodVector_swigregister = _openstudiomodelcore.BillingPeriodVector_swigregister
BillingPeriodVector_swigregister(BillingPeriodVector)

class OptionalBillingPeriod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBillingPeriod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBillingPeriod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalBillingPeriod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalBillingPeriod_reset(self)

    def __ref__(self) -> "openstudio::model::BillingPeriod":
        return _openstudiomodelcore.OptionalBillingPeriod___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalBillingPeriod_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalBillingPeriod_isNull(self)

    def get(self) -> "openstudio::model::BillingPeriod":
        return _openstudiomodelcore.OptionalBillingPeriod_get(self)

    def set(self, t: 'BillingPeriod') -> "void":
        return _openstudiomodelcore.OptionalBillingPeriod_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalBillingPeriod
    __del__ = lambda self: None
OptionalBillingPeriod_swigregister = _openstudiomodelcore.OptionalBillingPeriod_swigregister
OptionalBillingPeriod_swigregister(OptionalBillingPeriod)

class ComponentDataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentDataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentDataVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ComponentDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ComponentDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ComponentDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ComponentData >::size_type":
        return _openstudiomodelcore.ComponentDataVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ComponentData >::value_type":
        return _openstudiomodelcore.ComponentDataVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ComponentData >::difference_type', j: 'std::vector< openstudio::model::ComponentData >::difference_type') -> "std::vector< openstudio::model::ComponentData,std::allocator< openstudio::model::ComponentData > > *":
        return _openstudiomodelcore.ComponentDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentDataVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ComponentData >::difference_type', j: 'std::vector< openstudio::model::ComponentData >::difference_type') -> "void":
        return _openstudiomodelcore.ComponentDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ComponentData >::value_type const &":
        return _openstudiomodelcore.ComponentDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ComponentDataVector___setitem__(self, *args)

    def append(self, x: 'ComponentData') -> "void":
        return _openstudiomodelcore.ComponentDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ComponentDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ComponentData >::size_type":
        return _openstudiomodelcore.ComponentDataVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ComponentDataVector_clear(self)

    def swap(self, v: 'ComponentDataVector') -> "void":
        return _openstudiomodelcore.ComponentDataVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ComponentData >::allocator_type":
        return _openstudiomodelcore.ComponentDataVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ComponentData >::iterator":
        return _openstudiomodelcore.ComponentDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ComponentData >::iterator":
        return _openstudiomodelcore.ComponentDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ComponentData >::reverse_iterator":
        return _openstudiomodelcore.ComponentDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ComponentData >::reverse_iterator":
        return _openstudiomodelcore.ComponentDataVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ComponentDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ComponentData >::iterator":
        return _openstudiomodelcore.ComponentDataVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ComponentDataVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ComponentData') -> "void":
        return _openstudiomodelcore.ComponentDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ComponentData >::value_type const &":
        return _openstudiomodelcore.ComponentDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ComponentData >::value_type const &":
        return _openstudiomodelcore.ComponentDataVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ComponentData >::size_type', x: 'ComponentData') -> "void":
        return _openstudiomodelcore.ComponentDataVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ComponentData >::size_type', x: 'ComponentData') -> "void":
        return _openstudiomodelcore.ComponentDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ComponentDataVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ComponentData >::size_type') -> "void":
        return _openstudiomodelcore.ComponentDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ComponentData >::size_type":
        return _openstudiomodelcore.ComponentDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ComponentDataVector
    __del__ = lambda self: None
ComponentDataVector_swigregister = _openstudiomodelcore.ComponentDataVector_swigregister
ComponentDataVector_swigregister(ComponentDataVector)

class OptionalComponentData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalComponentData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalComponentData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalComponentData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalComponentData_reset(self)

    def __ref__(self) -> "openstudio::model::ComponentData":
        return _openstudiomodelcore.OptionalComponentData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalComponentData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalComponentData_isNull(self)

    def get(self) -> "openstudio::model::ComponentData":
        return _openstudiomodelcore.OptionalComponentData_get(self)

    def set(self, t: 'ComponentData') -> "void":
        return _openstudiomodelcore.OptionalComponentData_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalComponentData
    __del__ = lambda self: None
OptionalComponentData_swigregister = _openstudiomodelcore.OptionalComponentData_swigregister
OptionalComponentData_swigregister(OptionalComponentData)

class ScheduleTypeLimitsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleTypeLimitsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleTypeLimitsVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::size_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::value_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleTypeLimits >::difference_type', j: 'std::vector< openstudio::model::ScheduleTypeLimits >::difference_type') -> "std::vector< openstudio::model::ScheduleTypeLimits,std::allocator< openstudio::model::ScheduleTypeLimits > > *":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleTypeLimits >::difference_type', j: 'std::vector< openstudio::model::ScheduleTypeLimits >::difference_type') -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleTypeLimits >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector___setitem__(self, *args)

    def append(self, x: 'ScheduleTypeLimits') -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::size_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_clear(self)

    def swap(self, v: 'ScheduleTypeLimitsVector') -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::allocator_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::reverse_iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::reverse_iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleTypeLimits >::iterator":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleTypeLimitsVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleTypeLimits') -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::value_type const &":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleTypeLimits >::size_type', x: 'ScheduleTypeLimits') -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleTypeLimits >::size_type', x: 'ScheduleTypeLimits') -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleTypeLimits >::size_type') -> "void":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleTypeLimits >::size_type":
        return _openstudiomodelcore.ScheduleTypeLimitsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeLimitsVector
    __del__ = lambda self: None
ScheduleTypeLimitsVector_swigregister = _openstudiomodelcore.ScheduleTypeLimitsVector_swigregister
ScheduleTypeLimitsVector_swigregister(ScheduleTypeLimitsVector)

class OptionalScheduleTypeLimits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleTypeLimits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleTypeLimits, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalScheduleTypeLimits(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleTypeLimits":
        return _openstudiomodelcore.OptionalScheduleTypeLimits___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_isNull(self)

    def get(self) -> "openstudio::model::ScheduleTypeLimits":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_get(self)

    def set(self, t: 'ScheduleTypeLimits') -> "void":
        return _openstudiomodelcore.OptionalScheduleTypeLimits_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleTypeLimits
    __del__ = lambda self: None
OptionalScheduleTypeLimits_swigregister = _openstudiomodelcore.OptionalScheduleTypeLimits_swigregister
OptionalScheduleTypeLimits_swigregister(OptionalScheduleTypeLimits)

class ScheduleBaseVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleBaseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleBaseVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleBaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleBaseVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleBaseVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleBase >::size_type":
        return _openstudiomodelcore.ScheduleBaseVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleBase >::value_type":
        return _openstudiomodelcore.ScheduleBaseVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleBase >::difference_type', j: 'std::vector< openstudio::model::ScheduleBase >::difference_type') -> "std::vector< openstudio::model::ScheduleBase,std::allocator< openstudio::model::ScheduleBase > > *":
        return _openstudiomodelcore.ScheduleBaseVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleBase >::difference_type', j: 'std::vector< openstudio::model::ScheduleBase >::difference_type') -> "void":
        return _openstudiomodelcore.ScheduleBaseVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleBase >::value_type const &":
        return _openstudiomodelcore.ScheduleBaseVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector___setitem__(self, *args)

    def append(self, x: 'ScheduleBase') -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleBaseVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleBase >::size_type":
        return _openstudiomodelcore.ScheduleBaseVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_clear(self)

    def swap(self, v: 'ScheduleBaseVector') -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleBase >::allocator_type":
        return _openstudiomodelcore.ScheduleBaseVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleBase >::iterator":
        return _openstudiomodelcore.ScheduleBaseVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleBase >::iterator":
        return _openstudiomodelcore.ScheduleBaseVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleBase >::reverse_iterator":
        return _openstudiomodelcore.ScheduleBaseVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleBase >::reverse_iterator":
        return _openstudiomodelcore.ScheduleBaseVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleBase >::iterator":
        return _openstudiomodelcore.ScheduleBaseVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleBaseVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleBase') -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleBase >::value_type const &":
        return _openstudiomodelcore.ScheduleBaseVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleBase >::value_type const &":
        return _openstudiomodelcore.ScheduleBaseVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleBase >::size_type', x: 'ScheduleBase') -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleBase >::size_type', x: 'ScheduleBase') -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleBase >::size_type') -> "void":
        return _openstudiomodelcore.ScheduleBaseVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleBase >::size_type":
        return _openstudiomodelcore.ScheduleBaseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleBaseVector
    __del__ = lambda self: None
ScheduleBaseVector_swigregister = _openstudiomodelcore.ScheduleBaseVector_swigregister
ScheduleBaseVector_swigregister(ScheduleBaseVector)

class OptionalScheduleBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalScheduleBase(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleBase_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleBase":
        return _openstudiomodelcore.OptionalScheduleBase___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleBase_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleBase_isNull(self)

    def get(self) -> "openstudio::model::ScheduleBase":
        return _openstudiomodelcore.OptionalScheduleBase_get(self)

    def set(self, t: 'ScheduleBase') -> "void":
        return _openstudiomodelcore.OptionalScheduleBase_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleBase
    __del__ = lambda self: None
OptionalScheduleBase_swigregister = _openstudiomodelcore.OptionalScheduleBase_swigregister
OptionalScheduleBase_swigregister(OptionalScheduleBase)

class ScheduleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Schedule >::size_type":
        return _openstudiomodelcore.ScheduleVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Schedule >::value_type":
        return _openstudiomodelcore.ScheduleVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Schedule >::difference_type', j: 'std::vector< openstudio::model::Schedule >::difference_type') -> "std::vector< openstudio::model::Schedule,std::allocator< openstudio::model::Schedule > > *":
        return _openstudiomodelcore.ScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Schedule >::difference_type', j: 'std::vector< openstudio::model::Schedule >::difference_type') -> "void":
        return _openstudiomodelcore.ScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Schedule >::value_type const &":
        return _openstudiomodelcore.ScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleVector___setitem__(self, *args)

    def append(self, x: 'Schedule') -> "void":
        return _openstudiomodelcore.ScheduleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Schedule >::size_type":
        return _openstudiomodelcore.ScheduleVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleVector_clear(self)

    def swap(self, v: 'ScheduleVector') -> "void":
        return _openstudiomodelcore.ScheduleVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Schedule >::allocator_type":
        return _openstudiomodelcore.ScheduleVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Schedule >::iterator":
        return _openstudiomodelcore.ScheduleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Schedule >::iterator":
        return _openstudiomodelcore.ScheduleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Schedule >::reverse_iterator":
        return _openstudiomodelcore.ScheduleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Schedule >::reverse_iterator":
        return _openstudiomodelcore.ScheduleVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Schedule >::iterator":
        return _openstudiomodelcore.ScheduleVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Schedule') -> "void":
        return _openstudiomodelcore.ScheduleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Schedule >::value_type const &":
        return _openstudiomodelcore.ScheduleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Schedule >::value_type const &":
        return _openstudiomodelcore.ScheduleVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Schedule >::size_type', x: 'Schedule') -> "void":
        return _openstudiomodelcore.ScheduleVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Schedule >::size_type', x: 'Schedule') -> "void":
        return _openstudiomodelcore.ScheduleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Schedule >::size_type') -> "void":
        return _openstudiomodelcore.ScheduleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Schedule >::size_type":
        return _openstudiomodelcore.ScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleVector
    __del__ = lambda self: None
ScheduleVector_swigregister = _openstudiomodelcore.ScheduleVector_swigregister
ScheduleVector_swigregister(ScheduleVector)

class OptionalSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSchedule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalSchedule(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalSchedule_reset(self)

    def __ref__(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.OptionalSchedule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalSchedule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalSchedule_isNull(self)

    def get(self) -> "openstudio::model::Schedule":
        return _openstudiomodelcore.OptionalSchedule_get(self)

    def set(self, t: 'Schedule') -> "void":
        return _openstudiomodelcore.OptionalSchedule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalSchedule
    __del__ = lambda self: None
OptionalSchedule_swigregister = _openstudiomodelcore.OptionalSchedule_swigregister
OptionalSchedule_swigregister(OptionalSchedule)

class ScheduleDayVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleDayVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleDayVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleDayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleDayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleDayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleDay >::size_type":
        return _openstudiomodelcore.ScheduleDayVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleDay >::value_type":
        return _openstudiomodelcore.ScheduleDayVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleDay >::difference_type', j: 'std::vector< openstudio::model::ScheduleDay >::difference_type') -> "std::vector< openstudio::model::ScheduleDay,std::allocator< openstudio::model::ScheduleDay > > *":
        return _openstudiomodelcore.ScheduleDayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleDayVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleDay >::difference_type', j: 'std::vector< openstudio::model::ScheduleDay >::difference_type') -> "void":
        return _openstudiomodelcore.ScheduleDayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleDayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleDay >::value_type const &":
        return _openstudiomodelcore.ScheduleDayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleDayVector___setitem__(self, *args)

    def append(self, x: 'ScheduleDay') -> "void":
        return _openstudiomodelcore.ScheduleDayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleDayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleDay >::size_type":
        return _openstudiomodelcore.ScheduleDayVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleDayVector_clear(self)

    def swap(self, v: 'ScheduleDayVector') -> "void":
        return _openstudiomodelcore.ScheduleDayVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleDay >::allocator_type":
        return _openstudiomodelcore.ScheduleDayVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleDay >::iterator":
        return _openstudiomodelcore.ScheduleDayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleDay >::iterator":
        return _openstudiomodelcore.ScheduleDayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleDay >::reverse_iterator":
        return _openstudiomodelcore.ScheduleDayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleDay >::reverse_iterator":
        return _openstudiomodelcore.ScheduleDayVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleDayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleDay >::iterator":
        return _openstudiomodelcore.ScheduleDayVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleDayVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleDay') -> "void":
        return _openstudiomodelcore.ScheduleDayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleDay >::value_type const &":
        return _openstudiomodelcore.ScheduleDayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleDay >::value_type const &":
        return _openstudiomodelcore.ScheduleDayVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleDay >::size_type', x: 'ScheduleDay') -> "void":
        return _openstudiomodelcore.ScheduleDayVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleDay >::size_type', x: 'ScheduleDay') -> "void":
        return _openstudiomodelcore.ScheduleDayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleDayVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleDay >::size_type') -> "void":
        return _openstudiomodelcore.ScheduleDayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleDay >::size_type":
        return _openstudiomodelcore.ScheduleDayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleDayVector
    __del__ = lambda self: None
ScheduleDayVector_swigregister = _openstudiomodelcore.ScheduleDayVector_swigregister
ScheduleDayVector_swigregister(ScheduleDayVector)

class OptionalScheduleDay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleDay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleDay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalScheduleDay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleDay_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.OptionalScheduleDay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleDay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleDay_isNull(self)

    def get(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.OptionalScheduleDay_get(self)

    def set(self, t: 'ScheduleDay') -> "void":
        return _openstudiomodelcore.OptionalScheduleDay_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleDay
    __del__ = lambda self: None
OptionalScheduleDay_swigregister = _openstudiomodelcore.OptionalScheduleDay_swigregister
OptionalScheduleDay_swigregister(OptionalScheduleDay)

class ScheduleWeekVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleWeekVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleWeekVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleWeekVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleWeekVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleWeekVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleWeek >::size_type":
        return _openstudiomodelcore.ScheduleWeekVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleWeek >::value_type":
        return _openstudiomodelcore.ScheduleWeekVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleWeek >::difference_type', j: 'std::vector< openstudio::model::ScheduleWeek >::difference_type') -> "std::vector< openstudio::model::ScheduleWeek,std::allocator< openstudio::model::ScheduleWeek > > *":
        return _openstudiomodelcore.ScheduleWeekVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleWeek >::difference_type', j: 'std::vector< openstudio::model::ScheduleWeek >::difference_type') -> "void":
        return _openstudiomodelcore.ScheduleWeekVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleWeek >::value_type const &":
        return _openstudiomodelcore.ScheduleWeekVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector___setitem__(self, *args)

    def append(self, x: 'ScheduleWeek') -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleWeekVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleWeek >::size_type":
        return _openstudiomodelcore.ScheduleWeekVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_clear(self)

    def swap(self, v: 'ScheduleWeekVector') -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleWeek >::allocator_type":
        return _openstudiomodelcore.ScheduleWeekVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleWeek >::iterator":
        return _openstudiomodelcore.ScheduleWeekVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleWeek >::iterator":
        return _openstudiomodelcore.ScheduleWeekVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleWeek >::reverse_iterator":
        return _openstudiomodelcore.ScheduleWeekVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleWeek >::reverse_iterator":
        return _openstudiomodelcore.ScheduleWeekVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleWeek >::iterator":
        return _openstudiomodelcore.ScheduleWeekVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleWeekVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleWeek') -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleWeek >::value_type const &":
        return _openstudiomodelcore.ScheduleWeekVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleWeek >::value_type const &":
        return _openstudiomodelcore.ScheduleWeekVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleWeek >::size_type', x: 'ScheduleWeek') -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleWeek >::size_type', x: 'ScheduleWeek') -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleWeek >::size_type') -> "void":
        return _openstudiomodelcore.ScheduleWeekVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleWeek >::size_type":
        return _openstudiomodelcore.ScheduleWeekVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleWeekVector
    __del__ = lambda self: None
ScheduleWeekVector_swigregister = _openstudiomodelcore.ScheduleWeekVector_swigregister
ScheduleWeekVector_swigregister(ScheduleWeekVector)

class OptionalScheduleWeek(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleWeek, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleWeek, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalScheduleWeek(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleWeek_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleWeek":
        return _openstudiomodelcore.OptionalScheduleWeek___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleWeek_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleWeek_isNull(self)

    def get(self) -> "openstudio::model::ScheduleWeek":
        return _openstudiomodelcore.OptionalScheduleWeek_get(self)

    def set(self, t: 'ScheduleWeek') -> "void":
        return _openstudiomodelcore.OptionalScheduleWeek_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleWeek
    __del__ = lambda self: None
OptionalScheduleWeek_swigregister = _openstudiomodelcore.OptionalScheduleWeek_swigregister
OptionalScheduleWeek_swigregister(OptionalScheduleWeek)

class ScheduleYearVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleYearVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleYearVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleYearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleYearVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleYearVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleYear >::size_type":
        return _openstudiomodelcore.ScheduleYearVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleYear >::value_type":
        return _openstudiomodelcore.ScheduleYearVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleYear >::difference_type', j: 'std::vector< openstudio::model::ScheduleYear >::difference_type') -> "std::vector< openstudio::model::ScheduleYear,std::allocator< openstudio::model::ScheduleYear > > *":
        return _openstudiomodelcore.ScheduleYearVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleYearVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleYear >::difference_type', j: 'std::vector< openstudio::model::ScheduleYear >::difference_type') -> "void":
        return _openstudiomodelcore.ScheduleYearVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleYearVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleYear >::value_type const &":
        return _openstudiomodelcore.ScheduleYearVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleYearVector___setitem__(self, *args)

    def append(self, x: 'ScheduleYear') -> "void":
        return _openstudiomodelcore.ScheduleYearVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleYearVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleYear >::size_type":
        return _openstudiomodelcore.ScheduleYearVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleYearVector_clear(self)

    def swap(self, v: 'ScheduleYearVector') -> "void":
        return _openstudiomodelcore.ScheduleYearVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleYear >::allocator_type":
        return _openstudiomodelcore.ScheduleYearVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleYear >::iterator":
        return _openstudiomodelcore.ScheduleYearVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleYear >::iterator":
        return _openstudiomodelcore.ScheduleYearVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleYear >::reverse_iterator":
        return _openstudiomodelcore.ScheduleYearVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleYear >::reverse_iterator":
        return _openstudiomodelcore.ScheduleYearVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleYearVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleYear >::iterator":
        return _openstudiomodelcore.ScheduleYearVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleYearVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleYear') -> "void":
        return _openstudiomodelcore.ScheduleYearVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleYear >::value_type const &":
        return _openstudiomodelcore.ScheduleYearVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleYear >::value_type const &":
        return _openstudiomodelcore.ScheduleYearVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleYear >::size_type', x: 'ScheduleYear') -> "void":
        return _openstudiomodelcore.ScheduleYearVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleYear >::size_type', x: 'ScheduleYear') -> "void":
        return _openstudiomodelcore.ScheduleYearVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleYearVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleYear >::size_type') -> "void":
        return _openstudiomodelcore.ScheduleYearVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleYear >::size_type":
        return _openstudiomodelcore.ScheduleYearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleYearVector
    __del__ = lambda self: None
ScheduleYearVector_swigregister = _openstudiomodelcore.ScheduleYearVector_swigregister
ScheduleYearVector_swigregister(ScheduleYearVector)

class OptionalScheduleYear(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleYear, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleYear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalScheduleYear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleYear_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleYear":
        return _openstudiomodelcore.OptionalScheduleYear___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleYear_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleYear_isNull(self)

    def get(self) -> "openstudio::model::ScheduleYear":
        return _openstudiomodelcore.OptionalScheduleYear_get(self)

    def set(self, t: 'ScheduleYear') -> "void":
        return _openstudiomodelcore.OptionalScheduleYear_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleYear
    __del__ = lambda self: None
OptionalScheduleYear_swigregister = _openstudiomodelcore.OptionalScheduleYear_swigregister
OptionalScheduleYear_swigregister(OptionalScheduleYear)

class ScheduleRuleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleRuleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleRuleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleRuleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleRule >::size_type":
        return _openstudiomodelcore.ScheduleRuleVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleRule >::value_type":
        return _openstudiomodelcore.ScheduleRuleVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleRule >::difference_type', j: 'std::vector< openstudio::model::ScheduleRule >::difference_type') -> "std::vector< openstudio::model::ScheduleRule,std::allocator< openstudio::model::ScheduleRule > > *":
        return _openstudiomodelcore.ScheduleRuleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleRule >::difference_type', j: 'std::vector< openstudio::model::ScheduleRule >::difference_type') -> "void":
        return _openstudiomodelcore.ScheduleRuleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleRule >::value_type const &":
        return _openstudiomodelcore.ScheduleRuleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector___setitem__(self, *args)

    def append(self, x: 'ScheduleRule') -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleRule >::size_type":
        return _openstudiomodelcore.ScheduleRuleVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_clear(self)

    def swap(self, v: 'ScheduleRuleVector') -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleRule >::allocator_type":
        return _openstudiomodelcore.ScheduleRuleVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleRule >::iterator":
        return _openstudiomodelcore.ScheduleRuleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleRule >::iterator":
        return _openstudiomodelcore.ScheduleRuleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleRule >::reverse_iterator":
        return _openstudiomodelcore.ScheduleRuleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleRule >::reverse_iterator":
        return _openstudiomodelcore.ScheduleRuleVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleRule >::iterator":
        return _openstudiomodelcore.ScheduleRuleVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleRuleVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleRule') -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleRule >::value_type const &":
        return _openstudiomodelcore.ScheduleRuleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleRule >::value_type const &":
        return _openstudiomodelcore.ScheduleRuleVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleRule >::size_type', x: 'ScheduleRule') -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleRule >::size_type', x: 'ScheduleRule') -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleRule >::size_type') -> "void":
        return _openstudiomodelcore.ScheduleRuleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleRule >::size_type":
        return _openstudiomodelcore.ScheduleRuleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRuleVector
    __del__ = lambda self: None
ScheduleRuleVector_swigregister = _openstudiomodelcore.ScheduleRuleVector_swigregister
ScheduleRuleVector_swigregister(ScheduleRuleVector)

class OptionalScheduleRule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleRule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalScheduleRule(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleRule_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleRule":
        return _openstudiomodelcore.OptionalScheduleRule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleRule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleRule_isNull(self)

    def get(self) -> "openstudio::model::ScheduleRule":
        return _openstudiomodelcore.OptionalScheduleRule_get(self)

    def set(self, t: 'ScheduleRule') -> "void":
        return _openstudiomodelcore.OptionalScheduleRule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleRule
    __del__ = lambda self: None
OptionalScheduleRule_swigregister = _openstudiomodelcore.OptionalScheduleRule_swigregister
OptionalScheduleRule_swigregister(OptionalScheduleRule)

class ScheduleRulesetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleRulesetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleRulesetVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ScheduleRulesetVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ScheduleRulesetVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ScheduleRulesetVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleRuleset >::size_type":
        return _openstudiomodelcore.ScheduleRulesetVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleRuleset >::value_type":
        return _openstudiomodelcore.ScheduleRulesetVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleRuleset >::difference_type', j: 'std::vector< openstudio::model::ScheduleRuleset >::difference_type') -> "std::vector< openstudio::model::ScheduleRuleset,std::allocator< openstudio::model::ScheduleRuleset > > *":
        return _openstudiomodelcore.ScheduleRulesetVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleRuleset >::difference_type', j: 'std::vector< openstudio::model::ScheduleRuleset >::difference_type') -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleRuleset >::value_type const &":
        return _openstudiomodelcore.ScheduleRulesetVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector___setitem__(self, *args)

    def append(self, x: 'ScheduleRuleset') -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ScheduleRulesetVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleRuleset >::size_type":
        return _openstudiomodelcore.ScheduleRulesetVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_clear(self)

    def swap(self, v: 'ScheduleRulesetVector') -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleRuleset >::allocator_type":
        return _openstudiomodelcore.ScheduleRulesetVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleRuleset >::iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleRuleset >::iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleRuleset >::reverse_iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleRuleset >::reverse_iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleRuleset >::iterator":
        return _openstudiomodelcore.ScheduleRulesetVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleRulesetVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleRuleset') -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleRuleset >::value_type const &":
        return _openstudiomodelcore.ScheduleRulesetVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleRuleset >::value_type const &":
        return _openstudiomodelcore.ScheduleRulesetVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleRuleset >::size_type', x: 'ScheduleRuleset') -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleRuleset >::size_type', x: 'ScheduleRuleset') -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleRuleset >::size_type') -> "void":
        return _openstudiomodelcore.ScheduleRulesetVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleRuleset >::size_type":
        return _openstudiomodelcore.ScheduleRulesetVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRulesetVector
    __del__ = lambda self: None
ScheduleRulesetVector_swigregister = _openstudiomodelcore.ScheduleRulesetVector_swigregister
ScheduleRulesetVector_swigregister(ScheduleRulesetVector)

class OptionalScheduleRuleset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleRuleset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleRuleset, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalScheduleRuleset(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalScheduleRuleset_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleRuleset":
        return _openstudiomodelcore.OptionalScheduleRuleset___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleRuleset_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalScheduleRuleset_isNull(self)

    def get(self) -> "openstudio::model::ScheduleRuleset":
        return _openstudiomodelcore.OptionalScheduleRuleset_get(self)

    def set(self, t: 'ScheduleRuleset') -> "void":
        return _openstudiomodelcore.OptionalScheduleRuleset_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleRuleset
    __del__ = lambda self: None
OptionalScheduleRuleset_swigregister = _openstudiomodelcore.OptionalScheduleRuleset_swigregister
OptionalScheduleRuleset_swigregister(OptionalScheduleRuleset)

class OutputVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.OutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.OutputVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.OutputVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::OutputVariable >::size_type":
        return _openstudiomodelcore.OutputVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::OutputVariable >::value_type":
        return _openstudiomodelcore.OutputVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::OutputVariable >::difference_type', j: 'std::vector< openstudio::model::OutputVariable >::difference_type') -> "std::vector< openstudio::model::OutputVariable,std::allocator< openstudio::model::OutputVariable > > *":
        return _openstudiomodelcore.OutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.OutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::OutputVariable >::difference_type', j: 'std::vector< openstudio::model::OutputVariable >::difference_type') -> "void":
        return _openstudiomodelcore.OutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.OutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::OutputVariable >::value_type const &":
        return _openstudiomodelcore.OutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.OutputVariableVector___setitem__(self, *args)

    def append(self, x: 'OutputVariable') -> "void":
        return _openstudiomodelcore.OutputVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.OutputVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::OutputVariable >::size_type":
        return _openstudiomodelcore.OutputVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.OutputVariableVector_clear(self)

    def swap(self, v: 'OutputVariableVector') -> "void":
        return _openstudiomodelcore.OutputVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::OutputVariable >::allocator_type":
        return _openstudiomodelcore.OutputVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::OutputVariable >::iterator":
        return _openstudiomodelcore.OutputVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::OutputVariable >::iterator":
        return _openstudiomodelcore.OutputVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::OutputVariable >::reverse_iterator":
        return _openstudiomodelcore.OutputVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::OutputVariable >::reverse_iterator":
        return _openstudiomodelcore.OutputVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.OutputVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::OutputVariable >::iterator":
        return _openstudiomodelcore.OutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OutputVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'OutputVariable') -> "void":
        return _openstudiomodelcore.OutputVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::OutputVariable >::value_type const &":
        return _openstudiomodelcore.OutputVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::OutputVariable >::value_type const &":
        return _openstudiomodelcore.OutputVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::OutputVariable >::size_type', x: 'OutputVariable') -> "void":
        return _openstudiomodelcore.OutputVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::OutputVariable >::size_type', x: 'OutputVariable') -> "void":
        return _openstudiomodelcore.OutputVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.OutputVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::OutputVariable >::size_type') -> "void":
        return _openstudiomodelcore.OutputVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::OutputVariable >::size_type":
        return _openstudiomodelcore.OutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_OutputVariableVector
    __del__ = lambda self: None
OutputVariableVector_swigregister = _openstudiomodelcore.OutputVariableVector_swigregister
OutputVariableVector_swigregister(OutputVariableVector)

class OptionalOutputVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalOutputVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalOutputVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalOutputVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalOutputVariable_reset(self)

    def __ref__(self) -> "openstudio::model::OutputVariable":
        return _openstudiomodelcore.OptionalOutputVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputVariable_isNull(self)

    def get(self) -> "openstudio::model::OutputVariable":
        return _openstudiomodelcore.OptionalOutputVariable_get(self)

    def set(self, t: 'OutputVariable') -> "void":
        return _openstudiomodelcore.OptionalOutputVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalOutputVariable
    __del__ = lambda self: None
OptionalOutputVariable_swigregister = _openstudiomodelcore.OptionalOutputVariable_swigregister
OptionalOutputVariable_swigregister(OptionalOutputVariable)

class AdditionalPropertiesVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdditionalPropertiesVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdditionalPropertiesVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.AdditionalPropertiesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.AdditionalPropertiesVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.AdditionalPropertiesVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AdditionalProperties >::size_type":
        return _openstudiomodelcore.AdditionalPropertiesVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::AdditionalProperties >::value_type":
        return _openstudiomodelcore.AdditionalPropertiesVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::AdditionalProperties >::difference_type', j: 'std::vector< openstudio::model::AdditionalProperties >::difference_type') -> "std::vector< openstudio::model::AdditionalProperties,std::allocator< openstudio::model::AdditionalProperties > > *":
        return _openstudiomodelcore.AdditionalPropertiesVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::AdditionalProperties >::difference_type', j: 'std::vector< openstudio::model::AdditionalProperties >::difference_type') -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AdditionalProperties >::value_type const &":
        return _openstudiomodelcore.AdditionalPropertiesVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector___setitem__(self, *args)

    def append(self, x: 'AdditionalProperties') -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.AdditionalPropertiesVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AdditionalProperties >::size_type":
        return _openstudiomodelcore.AdditionalPropertiesVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_clear(self)

    def swap(self, v: 'AdditionalPropertiesVector') -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::AdditionalProperties >::allocator_type":
        return _openstudiomodelcore.AdditionalPropertiesVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::AdditionalProperties >::iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AdditionalProperties >::iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AdditionalProperties >::reverse_iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AdditionalProperties >::reverse_iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AdditionalProperties >::iterator":
        return _openstudiomodelcore.AdditionalPropertiesVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_AdditionalPropertiesVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'AdditionalProperties') -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AdditionalProperties >::value_type const &":
        return _openstudiomodelcore.AdditionalPropertiesVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AdditionalProperties >::value_type const &":
        return _openstudiomodelcore.AdditionalPropertiesVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::AdditionalProperties >::size_type', x: 'AdditionalProperties') -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::AdditionalProperties >::size_type', x: 'AdditionalProperties') -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::AdditionalProperties >::size_type') -> "void":
        return _openstudiomodelcore.AdditionalPropertiesVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AdditionalProperties >::size_type":
        return _openstudiomodelcore.AdditionalPropertiesVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_AdditionalPropertiesVector
    __del__ = lambda self: None
AdditionalPropertiesVector_swigregister = _openstudiomodelcore.AdditionalPropertiesVector_swigregister
AdditionalPropertiesVector_swigregister(AdditionalPropertiesVector)

class OptionalAdditionalProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAdditionalProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAdditionalProperties, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalAdditionalProperties(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalAdditionalProperties_reset(self)

    def __ref__(self) -> "openstudio::model::AdditionalProperties":
        return _openstudiomodelcore.OptionalAdditionalProperties___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalAdditionalProperties_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalAdditionalProperties_isNull(self)

    def get(self) -> "openstudio::model::AdditionalProperties":
        return _openstudiomodelcore.OptionalAdditionalProperties_get(self)

    def set(self, t: 'AdditionalProperties') -> "void":
        return _openstudiomodelcore.OptionalAdditionalProperties_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalAdditionalProperties
    __del__ = lambda self: None
OptionalAdditionalProperties_swigregister = _openstudiomodelcore.OptionalAdditionalProperties_swigregister
OptionalAdditionalProperties_swigregister(OptionalAdditionalProperties)

class GenericModelObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericModelObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericModelObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.GenericModelObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.GenericModelObjectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.GenericModelObjectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GenericModelObject >::size_type":
        return _openstudiomodelcore.GenericModelObjectVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::GenericModelObject >::value_type":
        return _openstudiomodelcore.GenericModelObjectVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::GenericModelObject >::difference_type', j: 'std::vector< openstudio::model::GenericModelObject >::difference_type') -> "std::vector< openstudio::model::GenericModelObject,std::allocator< openstudio::model::GenericModelObject > > *":
        return _openstudiomodelcore.GenericModelObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::GenericModelObject >::difference_type', j: 'std::vector< openstudio::model::GenericModelObject >::difference_type') -> "void":
        return _openstudiomodelcore.GenericModelObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GenericModelObject >::value_type const &":
        return _openstudiomodelcore.GenericModelObjectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector___setitem__(self, *args)

    def append(self, x: 'GenericModelObject') -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.GenericModelObjectVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GenericModelObject >::size_type":
        return _openstudiomodelcore.GenericModelObjectVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_clear(self)

    def swap(self, v: 'GenericModelObjectVector') -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::GenericModelObject >::allocator_type":
        return _openstudiomodelcore.GenericModelObjectVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::GenericModelObject >::iterator":
        return _openstudiomodelcore.GenericModelObjectVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GenericModelObject >::iterator":
        return _openstudiomodelcore.GenericModelObjectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GenericModelObject >::reverse_iterator":
        return _openstudiomodelcore.GenericModelObjectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GenericModelObject >::reverse_iterator":
        return _openstudiomodelcore.GenericModelObjectVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GenericModelObject >::iterator":
        return _openstudiomodelcore.GenericModelObjectVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_GenericModelObjectVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'GenericModelObject') -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GenericModelObject >::value_type const &":
        return _openstudiomodelcore.GenericModelObjectVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GenericModelObject >::value_type const &":
        return _openstudiomodelcore.GenericModelObjectVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::GenericModelObject >::size_type', x: 'GenericModelObject') -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::GenericModelObject >::size_type', x: 'GenericModelObject') -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::GenericModelObject >::size_type') -> "void":
        return _openstudiomodelcore.GenericModelObjectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GenericModelObject >::size_type":
        return _openstudiomodelcore.GenericModelObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_GenericModelObjectVector
    __del__ = lambda self: None
GenericModelObjectVector_swigregister = _openstudiomodelcore.GenericModelObjectVector_swigregister
GenericModelObjectVector_swigregister(GenericModelObjectVector)

class OptionalGenericModelObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGenericModelObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGenericModelObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalGenericModelObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalGenericModelObject_reset(self)

    def __ref__(self) -> "openstudio::model::GenericModelObject":
        return _openstudiomodelcore.OptionalGenericModelObject___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalGenericModelObject_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalGenericModelObject_isNull(self)

    def get(self) -> "openstudio::model::GenericModelObject":
        return _openstudiomodelcore.OptionalGenericModelObject_get(self)

    def set(self, t: 'GenericModelObject') -> "void":
        return _openstudiomodelcore.OptionalGenericModelObject_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalGenericModelObject
    __del__ = lambda self: None
OptionalGenericModelObject_swigregister = _openstudiomodelcore.OptionalGenericModelObject_swigregister
OptionalGenericModelObject_swigregister(OptionalGenericModelObject)

class ModelObjectListVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelObjectListVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelObjectListVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ModelObjectListVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectListVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ModelObjectListVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ModelObjectList >::size_type":
        return _openstudiomodelcore.ModelObjectListVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ModelObjectList >::value_type":
        return _openstudiomodelcore.ModelObjectListVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ModelObjectList >::difference_type', j: 'std::vector< openstudio::model::ModelObjectList >::difference_type') -> "std::vector< openstudio::model::ModelObjectList,std::allocator< openstudio::model::ModelObjectList > > *":
        return _openstudiomodelcore.ModelObjectListVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectListVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ModelObjectList >::difference_type', j: 'std::vector< openstudio::model::ModelObjectList >::difference_type') -> "void":
        return _openstudiomodelcore.ModelObjectListVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectListVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ModelObjectList >::value_type const &":
        return _openstudiomodelcore.ModelObjectListVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectListVector___setitem__(self, *args)

    def append(self, x: 'ModelObjectList') -> "void":
        return _openstudiomodelcore.ModelObjectListVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ModelObjectListVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ModelObjectList >::size_type":
        return _openstudiomodelcore.ModelObjectListVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ModelObjectListVector_clear(self)

    def swap(self, v: 'ModelObjectListVector') -> "void":
        return _openstudiomodelcore.ModelObjectListVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ModelObjectList >::allocator_type":
        return _openstudiomodelcore.ModelObjectListVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ModelObjectList >::iterator":
        return _openstudiomodelcore.ModelObjectListVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ModelObjectList >::iterator":
        return _openstudiomodelcore.ModelObjectListVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ModelObjectList >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectListVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ModelObjectList >::reverse_iterator":
        return _openstudiomodelcore.ModelObjectListVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ModelObjectListVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ModelObjectList >::iterator":
        return _openstudiomodelcore.ModelObjectListVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ModelObjectListVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ModelObjectList') -> "void":
        return _openstudiomodelcore.ModelObjectListVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ModelObjectList >::value_type const &":
        return _openstudiomodelcore.ModelObjectListVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ModelObjectList >::value_type const &":
        return _openstudiomodelcore.ModelObjectListVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ModelObjectList >::size_type', x: 'ModelObjectList') -> "void":
        return _openstudiomodelcore.ModelObjectListVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ModelObjectList >::size_type', x: 'ModelObjectList') -> "void":
        return _openstudiomodelcore.ModelObjectListVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ModelObjectListVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ModelObjectList >::size_type') -> "void":
        return _openstudiomodelcore.ModelObjectListVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ModelObjectList >::size_type":
        return _openstudiomodelcore.ModelObjectListVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectListVector
    __del__ = lambda self: None
ModelObjectListVector_swigregister = _openstudiomodelcore.ModelObjectListVector_swigregister
ModelObjectListVector_swigregister(ModelObjectListVector)

class OptionalModelObjectList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalModelObjectList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalModelObjectList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalModelObjectList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalModelObjectList_reset(self)

    def __ref__(self) -> "openstudio::model::ModelObjectList":
        return _openstudiomodelcore.OptionalModelObjectList___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalModelObjectList_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalModelObjectList_isNull(self)

    def get(self) -> "openstudio::model::ModelObjectList":
        return _openstudiomodelcore.OptionalModelObjectList_get(self)

    def set(self, t: 'ModelObjectList') -> "void":
        return _openstudiomodelcore.OptionalModelObjectList_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModelObjectList
    __del__ = lambda self: None
OptionalModelObjectList_swigregister = _openstudiomodelcore.OptionalModelObjectList_swigregister
OptionalModelObjectList_swigregister(OptionalModelObjectList)

class EnergyManagementSystemSensorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemSensorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemSensorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemSensor >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemSensor >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemSensor,std::allocator< openstudio::model::EnergyManagementSystemSensor > > *":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemSensor >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemSensor >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemSensor') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemSensorVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemSensorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemSensor') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type', x: 'EnergyManagementSystemSensor') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type', x: 'EnergyManagementSystemSensor') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemSensor >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSensorVector
    __del__ = lambda self: None
EnergyManagementSystemSensorVector_swigregister = _openstudiomodelcore.EnergyManagementSystemSensorVector_swigregister
EnergyManagementSystemSensorVector_swigregister(EnergyManagementSystemSensorVector)

class OptionalEnergyManagementSystemSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemSensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemSensor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemSensor":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemSensor":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_get(self)

    def set(self, t: 'EnergyManagementSystemSensor') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemSensor
    __del__ = lambda self: None
OptionalEnergyManagementSystemSensor_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemSensor_swigregister
OptionalEnergyManagementSystemSensor_swigregister(OptionalEnergyManagementSystemSensor)

class EnergyManagementSystemActuatorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemActuatorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemActuatorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemActuator >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemActuator >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemActuator,std::allocator< openstudio::model::EnergyManagementSystemActuator > > *":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemActuator >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemActuator >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemActuator') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemActuatorVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemActuatorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemActuator') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type', x: 'EnergyManagementSystemActuator') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type', x: 'EnergyManagementSystemActuator') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemActuator >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemActuatorVector
    __del__ = lambda self: None
EnergyManagementSystemActuatorVector_swigregister = _openstudiomodelcore.EnergyManagementSystemActuatorVector_swigregister
EnergyManagementSystemActuatorVector_swigregister(EnergyManagementSystemActuatorVector)

class OptionalEnergyManagementSystemActuator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemActuator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemActuator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemActuator":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemActuator":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_get(self)

    def set(self, t: 'EnergyManagementSystemActuator') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemActuator
    __del__ = lambda self: None
OptionalEnergyManagementSystemActuator_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemActuator_swigregister
OptionalEnergyManagementSystemActuator_swigregister(OptionalEnergyManagementSystemActuator)

class EnergyManagementSystemConstructionIndexVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemConstructionIndexVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemConstructionIndexVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemConstructionIndexVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemConstructionIndexVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemConstructionIndexVariableVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemConstructionIndexVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemConstructionIndexVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type', x: 'EnergyManagementSystemConstructionIndexVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type', x: 'EnergyManagementSystemConstructionIndexVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemConstructionIndexVariableVector
    __del__ = lambda self: None
EnergyManagementSystemConstructionIndexVariableVector_swigregister = _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_swigregister
EnergyManagementSystemConstructionIndexVariableVector_swigregister(EnergyManagementSystemConstructionIndexVariableVector)

class OptionalEnergyManagementSystemConstructionIndexVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemConstructionIndexVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemConstructionIndexVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemConstructionIndexVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemConstructionIndexVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemConstructionIndexVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_get(self)

    def set(self, t: 'EnergyManagementSystemConstructionIndexVariable') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemConstructionIndexVariable
    __del__ = lambda self: None
OptionalEnergyManagementSystemConstructionIndexVariable_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_swigregister
OptionalEnergyManagementSystemConstructionIndexVariable_swigregister(OptionalEnergyManagementSystemConstructionIndexVariable)

class EnergyManagementSystemCurveOrTableIndexVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemCurveOrTableIndexVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemCurveOrTableIndexVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemCurveOrTableIndexVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemCurveOrTableIndexVariableVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemCurveOrTableIndexVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemCurveOrTableIndexVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type', x: 'EnergyManagementSystemCurveOrTableIndexVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type', x: 'EnergyManagementSystemCurveOrTableIndexVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemCurveOrTableIndexVariableVector
    __del__ = lambda self: None
EnergyManagementSystemCurveOrTableIndexVariableVector_swigregister = _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_swigregister
EnergyManagementSystemCurveOrTableIndexVariableVector_swigregister(EnergyManagementSystemCurveOrTableIndexVariableVector)

class OptionalEnergyManagementSystemCurveOrTableIndexVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemCurveOrTableIndexVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemCurveOrTableIndexVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemCurveOrTableIndexVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_get(self)

    def set(self, t: 'EnergyManagementSystemCurveOrTableIndexVariable') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemCurveOrTableIndexVariable
    __del__ = lambda self: None
OptionalEnergyManagementSystemCurveOrTableIndexVariable_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_swigregister
OptionalEnergyManagementSystemCurveOrTableIndexVariable_swigregister(OptionalEnergyManagementSystemCurveOrTableIndexVariable)

class EnergyManagementSystemGlobalVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemGlobalVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemGlobalVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable,std::allocator< openstudio::model::EnergyManagementSystemGlobalVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemGlobalVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemGlobalVariableVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemGlobalVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemGlobalVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type', x: 'EnergyManagementSystemGlobalVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type', x: 'EnergyManagementSystemGlobalVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemGlobalVariableVector
    __del__ = lambda self: None
EnergyManagementSystemGlobalVariableVector_swigregister = _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_swigregister
EnergyManagementSystemGlobalVariableVector_swigregister(EnergyManagementSystemGlobalVariableVector)

class OptionalEnergyManagementSystemGlobalVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemGlobalVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemGlobalVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemGlobalVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemGlobalVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemGlobalVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_get(self)

    def set(self, t: 'EnergyManagementSystemGlobalVariable') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemGlobalVariable
    __del__ = lambda self: None
OptionalEnergyManagementSystemGlobalVariable_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_swigregister
OptionalEnergyManagementSystemGlobalVariable_swigregister(OptionalEnergyManagementSystemGlobalVariable)

class EnergyManagementSystemInternalVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemInternalVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemInternalVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable,std::allocator< openstudio::model::EnergyManagementSystemInternalVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemInternalVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemInternalVariableVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemInternalVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemInternalVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type', x: 'EnergyManagementSystemInternalVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type', x: 'EnergyManagementSystemInternalVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemInternalVariableVector
    __del__ = lambda self: None
EnergyManagementSystemInternalVariableVector_swigregister = _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_swigregister
EnergyManagementSystemInternalVariableVector_swigregister(EnergyManagementSystemInternalVariableVector)

class OptionalEnergyManagementSystemInternalVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemInternalVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemInternalVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemInternalVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemInternalVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemInternalVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_get(self)

    def set(self, t: 'EnergyManagementSystemInternalVariable') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemInternalVariable
    __del__ = lambda self: None
OptionalEnergyManagementSystemInternalVariable_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_swigregister
OptionalEnergyManagementSystemInternalVariable_swigregister(OptionalEnergyManagementSystemInternalVariable)

class EnergyManagementSystemMeteredOutputVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemMeteredOutputVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemMeteredOutputVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemMeteredOutputVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemMeteredOutputVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemMeteredOutputVariableVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemMeteredOutputVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemMeteredOutputVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type', x: 'EnergyManagementSystemMeteredOutputVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type', x: 'EnergyManagementSystemMeteredOutputVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemMeteredOutputVariableVector
    __del__ = lambda self: None
EnergyManagementSystemMeteredOutputVariableVector_swigregister = _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_swigregister
EnergyManagementSystemMeteredOutputVariableVector_swigregister(EnergyManagementSystemMeteredOutputVariableVector)

class OptionalEnergyManagementSystemMeteredOutputVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemMeteredOutputVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemMeteredOutputVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemMeteredOutputVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemMeteredOutputVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemMeteredOutputVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_get(self)

    def set(self, t: 'EnergyManagementSystemMeteredOutputVariable') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemMeteredOutputVariable
    __del__ = lambda self: None
OptionalEnergyManagementSystemMeteredOutputVariable_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_swigregister
OptionalEnergyManagementSystemMeteredOutputVariable_swigregister(OptionalEnergyManagementSystemMeteredOutputVariable)

class EnergyManagementSystemTrendVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemTrendVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemTrendVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable,std::allocator< openstudio::model::EnergyManagementSystemTrendVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemTrendVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemTrendVariableVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemTrendVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemTrendVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type', x: 'EnergyManagementSystemTrendVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type', x: 'EnergyManagementSystemTrendVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemTrendVariableVector
    __del__ = lambda self: None
EnergyManagementSystemTrendVariableVector_swigregister = _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_swigregister
EnergyManagementSystemTrendVariableVector_swigregister(EnergyManagementSystemTrendVariableVector)

class OptionalEnergyManagementSystemTrendVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemTrendVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemTrendVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemTrendVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemTrendVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemTrendVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_get(self)

    def set(self, t: 'EnergyManagementSystemTrendVariable') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemTrendVariable
    __del__ = lambda self: None
OptionalEnergyManagementSystemTrendVariable_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_swigregister
OptionalEnergyManagementSystemTrendVariable_swigregister(OptionalEnergyManagementSystemTrendVariable)

class EnergyManagementSystemSubroutineVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemSubroutineVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemSubroutineVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemSubroutine >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemSubroutine >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine,std::allocator< openstudio::model::EnergyManagementSystemSubroutine > > *":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemSubroutine >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemSubroutine >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemSubroutine') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemSubroutineVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemSubroutineVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemSubroutine') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type', x: 'EnergyManagementSystemSubroutine') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type', x: 'EnergyManagementSystemSubroutine') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSubroutineVector
    __del__ = lambda self: None
EnergyManagementSystemSubroutineVector_swigregister = _openstudiomodelcore.EnergyManagementSystemSubroutineVector_swigregister
EnergyManagementSystemSubroutineVector_swigregister(EnergyManagementSystemSubroutineVector)

class OptionalEnergyManagementSystemSubroutine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemSubroutine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemSubroutine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemSubroutine(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemSubroutine":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemSubroutine":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_get(self)

    def set(self, t: 'EnergyManagementSystemSubroutine') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemSubroutine
    __del__ = lambda self: None
OptionalEnergyManagementSystemSubroutine_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_swigregister
OptionalEnergyManagementSystemSubroutine_swigregister(OptionalEnergyManagementSystemSubroutine)

class EnergyManagementSystemProgramVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemProgramVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemProgramVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemProgram >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemProgram >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemProgram,std::allocator< openstudio::model::EnergyManagementSystemProgram > > *":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemProgram >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemProgram >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemProgram') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemProgramVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemProgramVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemProgram') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type', x: 'EnergyManagementSystemProgram') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type', x: 'EnergyManagementSystemProgram') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgramVector
    __del__ = lambda self: None
EnergyManagementSystemProgramVector_swigregister = _openstudiomodelcore.EnergyManagementSystemProgramVector_swigregister
EnergyManagementSystemProgramVector_swigregister(EnergyManagementSystemProgramVector)

class OptionalEnergyManagementSystemProgram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemProgram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemProgram, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemProgram(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemProgram":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemProgram":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_get(self)

    def set(self, t: 'EnergyManagementSystemProgram') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemProgram
    __del__ = lambda self: None
OptionalEnergyManagementSystemProgram_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemProgram_swigregister
OptionalEnergyManagementSystemProgram_swigregister(OptionalEnergyManagementSystemProgram)

class EnergyManagementSystemProgramCallingManagerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemProgramCallingManagerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemProgramCallingManagerVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager,std::allocator< openstudio::model::EnergyManagementSystemProgramCallingManager > > *":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemProgramCallingManager') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemProgramCallingManagerVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemProgramCallingManagerVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemProgramCallingManager') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type', x: 'EnergyManagementSystemProgramCallingManager') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type', x: 'EnergyManagementSystemProgramCallingManager') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgramCallingManagerVector
    __del__ = lambda self: None
EnergyManagementSystemProgramCallingManagerVector_swigregister = _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_swigregister
EnergyManagementSystemProgramCallingManagerVector_swigregister(EnergyManagementSystemProgramCallingManagerVector)

class OptionalEnergyManagementSystemProgramCallingManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemProgramCallingManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemProgramCallingManager, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemProgramCallingManager(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemProgramCallingManager":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemProgramCallingManager":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_get(self)

    def set(self, t: 'EnergyManagementSystemProgramCallingManager') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemProgramCallingManager
    __del__ = lambda self: None
OptionalEnergyManagementSystemProgramCallingManager_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_swigregister
OptionalEnergyManagementSystemProgramCallingManager_swigregister(OptionalEnergyManagementSystemProgramCallingManager)

class EnergyManagementSystemOutputVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemOutputVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemOutputVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::value_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::difference_type') -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemOutputVariable > > *":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::difference_type', j: 'std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::difference_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___setitem__(self, *args)

    def append(self, x: 'EnergyManagementSystemOutputVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_clear(self)

    def swap(self, v: 'EnergyManagementSystemOutputVariableVector') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::allocator_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::reverse_iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::iterator":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemOutputVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EnergyManagementSystemOutputVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::value_type const &":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type', x: 'EnergyManagementSystemOutputVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type', x: 'EnergyManagementSystemOutputVariable') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type') -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable >::size_type":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemOutputVariableVector
    __del__ = lambda self: None
EnergyManagementSystemOutputVariableVector_swigregister = _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_swigregister
EnergyManagementSystemOutputVariableVector_swigregister(EnergyManagementSystemOutputVariableVector)

class OptionalEnergyManagementSystemOutputVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnergyManagementSystemOutputVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnergyManagementSystemOutputVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalEnergyManagementSystemOutputVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_reset(self)

    def __ref__(self) -> "openstudio::model::EnergyManagementSystemOutputVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_isNull(self)

    def get(self) -> "openstudio::model::EnergyManagementSystemOutputVariable":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_get(self)

    def set(self, t: 'EnergyManagementSystemOutputVariable') -> "void":
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemOutputVariable
    __del__ = lambda self: None
OptionalEnergyManagementSystemOutputVariable_swigregister = _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_swigregister
OptionalEnergyManagementSystemOutputVariable_swigregister(OptionalEnergyManagementSystemOutputVariable)

class OptionalOutputEnergyManagementSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalOutputEnergyManagementSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalOutputEnergyManagementSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalOutputEnergyManagementSystem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_reset(self)

    def __ref__(self) -> "openstudio::model::OutputEnergyManagementSystem":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_isNull(self)

    def get(self) -> "openstudio::model::OutputEnergyManagementSystem":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_get(self)

    def set(self, t: 'OutputEnergyManagementSystem') -> "void":
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalOutputEnergyManagementSystem
    __del__ = lambda self: None
OptionalOutputEnergyManagementSystem_swigregister = _openstudiomodelcore.OptionalOutputEnergyManagementSystem_swigregister
OptionalOutputEnergyManagementSystem_swigregister(OptionalOutputEnergyManagementSystem)

class OptionalExternalInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterface(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterface_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterface":
        return _openstudiomodelcore.OptionalExternalInterface___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterface_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterface_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterface":
        return _openstudiomodelcore.OptionalExternalInterface_get(self)

    def set(self, t: 'ExternalInterface') -> "void":
        return _openstudiomodelcore.OptionalExternalInterface_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterface
    __del__ = lambda self: None
OptionalExternalInterface_swigregister = _openstudiomodelcore.OptionalExternalInterface_swigregister
OptionalExternalInterface_swigregister(OptionalExternalInterface)

class ExternalInterfaceActuatorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceActuatorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceActuatorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::value_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceActuator >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceActuator >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceActuator,std::allocator< openstudio::model::ExternalInterfaceActuator > > *":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceActuator >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceActuator >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_clear(self)

    def swap(self, v: 'ExternalInterfaceActuatorVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceActuatorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceActuator >::size_type', x: 'ExternalInterfaceActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceActuator >::size_type', x: 'ExternalInterfaceActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceActuator >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceActuatorVector
    __del__ = lambda self: None
ExternalInterfaceActuatorVector_swigregister = _openstudiomodelcore.ExternalInterfaceActuatorVector_swigregister
ExternalInterfaceActuatorVector_swigregister(ExternalInterfaceActuatorVector)

class OptionalExternalInterfaceActuator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceActuator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceActuator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_get(self)

    def set(self, t: 'ExternalInterfaceActuator') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceActuator
    __del__ = lambda self: None
OptionalExternalInterfaceActuator_swigregister = _openstudiomodelcore.OptionalExternalInterfaceActuator_swigregister
OptionalExternalInterfaceActuator_swigregister(OptionalExternalInterfaceActuator)

class ExternalInterfaceFunctionalMockupUnitExportFromVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitExportFromVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitExportFromVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceFunctionalMockupUnitExportFromVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_clear(self)

    def swap(self, v: 'ExternalInterfaceFunctionalMockupUnitExportFromVariableVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportFromVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceFunctionalMockupUnitExportFromVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitExportFromVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitExportFromVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportFromVariableVector
    __del__ = lambda self: None
ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swigregister
ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportFromVariableVector)

class OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_get(self)

    def set(self, t: 'ExternalInterfaceFunctionalMockupUnitExportFromVariable') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable
    __del__ = lambda self: None
OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister = _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister
OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable)

class ExternalInterfaceFunctionalMockupUnitExportToActuatorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitExportToActuatorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitExportToActuatorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceFunctionalMockupUnitExportToActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_clear(self)

    def swap(self, v: 'ExternalInterfaceFunctionalMockupUnitExportToActuatorVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToActuatorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceFunctionalMockupUnitExportToActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitExportToActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitExportToActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToActuatorVector
    __del__ = lambda self: None
ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swigregister
ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportToActuatorVector)

class OptionalExternalInterfaceFunctionalMockupUnitExportToActuator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceFunctionalMockupUnitExportToActuator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceFunctionalMockupUnitExportToActuator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportToActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_get(self)

    def set(self, t: 'ExternalInterfaceFunctionalMockupUnitExportToActuator') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportToActuator
    __del__ = lambda self: None
OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister = _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister
OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportToActuator)

class ExternalInterfaceFunctionalMockupUnitExportToScheduleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitExportToScheduleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitExportToScheduleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceFunctionalMockupUnitExportToSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_clear(self)

    def swap(self, v: 'ExternalInterfaceFunctionalMockupUnitExportToScheduleVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToScheduleVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceFunctionalMockupUnitExportToSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitExportToSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitExportToSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToScheduleVector
    __del__ = lambda self: None
ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swigregister
ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportToScheduleVector)

class OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_get(self)

    def set(self, t: 'ExternalInterfaceFunctionalMockupUnitExportToSchedule') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule
    __del__ = lambda self: None
OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister = _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister
OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule)

class ExternalInterfaceFunctionalMockupUnitExportToVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitExportToVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitExportToVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceFunctionalMockupUnitExportToVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_clear(self)

    def swap(self, v: 'ExternalInterfaceFunctionalMockupUnitExportToVariableVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceFunctionalMockupUnitExportToVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitExportToVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitExportToVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToVariableVector
    __del__ = lambda self: None
ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swigregister
ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportToVariableVector)

class OptionalExternalInterfaceFunctionalMockupUnitExportToVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceFunctionalMockupUnitExportToVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceFunctionalMockupUnitExportToVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportToVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_get(self)

    def set(self, t: 'ExternalInterfaceFunctionalMockupUnitExportToVariable') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportToVariable
    __del__ = lambda self: None
OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister = _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister
OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportToVariable)

class ExternalInterfaceFunctionalMockupUnitImportVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImportVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImportVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceFunctionalMockupUnitImport') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_clear(self)

    def swap(self, v: 'ExternalInterfaceFunctionalMockupUnitImportVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceFunctionalMockupUnitImport') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImport') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImport') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportVector
    __del__ = lambda self: None
ExternalInterfaceFunctionalMockupUnitImportVector_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_swigregister
ExternalInterfaceFunctionalMockupUnitImportVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportVector)

class OptionalExternalInterfaceFunctionalMockupUnitImport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceFunctionalMockupUnitImport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceFunctionalMockupUnitImport, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImport(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_get(self)

    def set(self, t: 'ExternalInterfaceFunctionalMockupUnitImport') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImport
    __del__ = lambda self: None
OptionalExternalInterfaceFunctionalMockupUnitImport_swigregister = _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_swigregister
OptionalExternalInterfaceFunctionalMockupUnitImport_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImport)

class ExternalInterfaceFunctionalMockupUnitImportFromVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImportFromVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImportFromVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceFunctionalMockupUnitImportFromVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_clear(self)

    def swap(self, v: 'ExternalInterfaceFunctionalMockupUnitImportFromVariableVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportFromVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceFunctionalMockupUnitImportFromVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImportFromVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImportFromVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportFromVariableVector
    __del__ = lambda self: None
ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swigregister
ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportFromVariableVector)

class OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_get(self)

    def set(self, t: 'ExternalInterfaceFunctionalMockupUnitImportFromVariable') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable
    __del__ = lambda self: None
OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister = _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister
OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable)

class ExternalInterfaceFunctionalMockupUnitImportToActuatorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImportToActuatorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImportToActuatorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceFunctionalMockupUnitImportToActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_clear(self)

    def swap(self, v: 'ExternalInterfaceFunctionalMockupUnitImportToActuatorVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToActuatorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceFunctionalMockupUnitImportToActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImportToActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImportToActuator') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToActuatorVector
    __del__ = lambda self: None
ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swigregister
ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportToActuatorVector)

class OptionalExternalInterfaceFunctionalMockupUnitImportToActuator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceFunctionalMockupUnitImportToActuator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceFunctionalMockupUnitImportToActuator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportToActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_get(self)

    def set(self, t: 'ExternalInterfaceFunctionalMockupUnitImportToActuator') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportToActuator
    __del__ = lambda self: None
OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister = _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister
OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportToActuator)

class ExternalInterfaceFunctionalMockupUnitImportToScheduleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImportToScheduleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImportToScheduleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceFunctionalMockupUnitImportToSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_clear(self)

    def swap(self, v: 'ExternalInterfaceFunctionalMockupUnitImportToScheduleVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToScheduleVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceFunctionalMockupUnitImportToSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImportToSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImportToSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToScheduleVector
    __del__ = lambda self: None
ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swigregister
ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportToScheduleVector)

class OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_get(self)

    def set(self, t: 'ExternalInterfaceFunctionalMockupUnitImportToSchedule') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule
    __del__ = lambda self: None
OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister = _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister
OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule)

class ExternalInterfaceFunctionalMockupUnitImportToVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImportToVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImportToVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceFunctionalMockupUnitImportToVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_clear(self)

    def swap(self, v: 'ExternalInterfaceFunctionalMockupUnitImportToVariableVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceFunctionalMockupUnitImportToVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImportToVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type', x: 'ExternalInterfaceFunctionalMockupUnitImportToVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToVariableVector
    __del__ = lambda self: None
ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swigregister
ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportToVariableVector)

class OptionalExternalInterfaceFunctionalMockupUnitImportToVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceFunctionalMockupUnitImportToVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceFunctionalMockupUnitImportToVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportToVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_get(self)

    def set(self, t: 'ExternalInterfaceFunctionalMockupUnitImportToVariable') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportToVariable
    __del__ = lambda self: None
OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister = _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister
OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportToVariable)

class ExternalInterfaceScheduleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceScheduleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceScheduleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::value_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceSchedule >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceSchedule >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceSchedule,std::allocator< openstudio::model::ExternalInterfaceSchedule > > *":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceSchedule >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceSchedule >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_clear(self)

    def swap(self, v: 'ExternalInterfaceScheduleVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::iterator":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceScheduleVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type', x: 'ExternalInterfaceSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type', x: 'ExternalInterfaceSchedule') -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceSchedule >::size_type":
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceScheduleVector
    __del__ = lambda self: None
ExternalInterfaceScheduleVector_swigregister = _openstudiomodelcore.ExternalInterfaceScheduleVector_swigregister
ExternalInterfaceScheduleVector_swigregister(ExternalInterfaceScheduleVector)

class OptionalExternalInterfaceSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceSchedule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceSchedule(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceSchedule":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_get(self)

    def set(self, t: 'ExternalInterfaceSchedule') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceSchedule
    __del__ = lambda self: None
OptionalExternalInterfaceSchedule_swigregister = _openstudiomodelcore.OptionalExternalInterfaceSchedule_swigregister
OptionalExternalInterfaceSchedule_swigregister(OptionalExternalInterfaceSchedule)

class ExternalInterfaceVariableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceVariableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceVariableVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::value_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceVariable >::difference_type') -> "std::vector< openstudio::model::ExternalInterfaceVariable,std::allocator< openstudio::model::ExternalInterfaceVariable > > *":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalInterfaceVariable >::difference_type', j: 'std::vector< openstudio::model::ExternalInterfaceVariable >::difference_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector___setitem__(self, *args)

    def append(self, x: 'ExternalInterfaceVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_clear(self)

    def swap(self, v: 'ExternalInterfaceVariableVector') -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::allocator_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::reverse_iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::iterator":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceVariableVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalInterfaceVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::value_type const &":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalInterfaceVariable >::size_type', x: 'ExternalInterfaceVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalInterfaceVariable >::size_type', x: 'ExternalInterfaceVariable') -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalInterfaceVariable >::size_type') -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalInterfaceVariable >::size_type":
        return _openstudiomodelcore.ExternalInterfaceVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceVariableVector
    __del__ = lambda self: None
ExternalInterfaceVariableVector_swigregister = _openstudiomodelcore.ExternalInterfaceVariableVector_swigregister
ExternalInterfaceVariableVector_swigregister(ExternalInterfaceVariableVector)

class OptionalExternalInterfaceVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalInterfaceVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalInterfaceVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_OptionalExternalInterfaceVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalInterfaceVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_isNull(self)

    def get(self) -> "openstudio::model::ExternalInterfaceVariable":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_get(self)

    def set(self, t: 'ExternalInterfaceVariable') -> "void":
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_set(self, t)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceVariable
    __del__ = lambda self: None
OptionalExternalInterfaceVariable_swigregister = _openstudiomodelcore.OptionalExternalInterfaceVariable_swigregister
OptionalExternalInterfaceVariable_swigregister(OptionalExternalInterfaceVariable)


def toModelObject(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ModelObject >":
    return _openstudiomodelcore.toModelObject(idfObject)
toModelObject = _openstudiomodelcore.toModelObject

def getModelObject(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ModelObject >":
    return _openstudiomodelcore.getModelObject(t_model, t_handle)
getModelObject = _openstudiomodelcore.getModelObject

def getModelObjects(t_model: 'Model') -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
    return _openstudiomodelcore.getModelObjects(t_model)
getModelObjects = _openstudiomodelcore.getModelObjects

def getModelObjectByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ModelObject >":
    return _openstudiomodelcore.getModelObjectByName(t_model, t_name)
getModelObjectByName = _openstudiomodelcore.getModelObjectByName

def getModelObjectsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
    return _openstudiomodelcore.getModelObjectsByName(t_model, t_name, t_exactMatch)
getModelObjectsByName = _openstudiomodelcore.getModelObjectsByName

def toModelExtensibleGroup(extensibleGroup: 'IdfExtensibleGroup') -> "boost::optional< openstudio::model::ModelExtensibleGroup >":
    return _openstudiomodelcore.toModelExtensibleGroup(extensibleGroup)
toModelExtensibleGroup = _openstudiomodelcore.toModelExtensibleGroup
class ParentObject(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParentObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParentObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ParentObject
    __del__ = lambda self: None

    def children(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.ParentObject_children(self)

    def allowableChildTypes(self) -> "std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > >":
        return _openstudiomodelcore.ParentObject_allowableChildTypes(self)
ParentObject_swigregister = _openstudiomodelcore.ParentObject_swigregister
ParentObject_swigregister(ParentObject)


def getRecursiveChildren(object: 'ParentObject', includeLifeCycleCostsAndAdditionalProperties: 'bool'=False) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
    return _openstudiomodelcore.getRecursiveChildren(object, includeLifeCycleCostsAndAdditionalProperties)
getRecursiveChildren = _openstudiomodelcore.getRecursiveChildren

def getRecursiveChildrenAndResources(object: 'ModelObject') -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
    return _openstudiomodelcore.getRecursiveChildrenAndResources(object)
getRecursiveChildrenAndResources = _openstudiomodelcore.getRecursiveChildrenAndResources

def toParentObject(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ParentObject >":
    return _openstudiomodelcore.toParentObject(idfObject)
toParentObject = _openstudiomodelcore.toParentObject

def getParentObject(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ParentObject >":
    return _openstudiomodelcore.getParentObject(t_model, t_handle)
getParentObject = _openstudiomodelcore.getParentObject

def getParentObjects(t_model: 'Model') -> "std::vector< openstudio::model::ParentObject,std::allocator< openstudio::model::ParentObject > >":
    return _openstudiomodelcore.getParentObjects(t_model)
getParentObjects = _openstudiomodelcore.getParentObjects

def getParentObjectByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ParentObject >":
    return _openstudiomodelcore.getParentObjectByName(t_model, t_name)
getParentObjectByName = _openstudiomodelcore.getParentObjectByName

def getParentObjectsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ParentObject,std::allocator< openstudio::model::ParentObject > >":
    return _openstudiomodelcore.getParentObjectsByName(t_model, t_name, t_exactMatch)
getParentObjectsByName = _openstudiomodelcore.getParentObjectsByName
class ResourceObject(ParentObject):
    __swig_setmethods__ = {}
    for _s in [ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def directUseCount(self, excludeChildren: 'bool'=False) -> "unsigned int":
        return _openstudiomodelcore.ResourceObject_directUseCount(self, excludeChildren)

    def nonResourceObjectUseCount(self, excludeChildren: 'bool'=False) -> "unsigned int":
        return _openstudiomodelcore.ResourceObject_nonResourceObjectUseCount(self, excludeChildren)
    __swig_destroy__ = _openstudiomodelcore.delete_ResourceObject
    __del__ = lambda self: None
ResourceObject_swigregister = _openstudiomodelcore.ResourceObject_swigregister
ResourceObject_swigregister(ResourceObject)


def getRecursiveResources(object: 'ModelObject') -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > >":
    return _openstudiomodelcore.getRecursiveResources(object)
getRecursiveResources = _openstudiomodelcore.getRecursiveResources

def getRecursiveResourceSubTrees(object: 'ModelObject', includeComponentCostLineItems: 'bool'=False) -> "std::vector< std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >,std::allocator< std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > > > >":
    return _openstudiomodelcore.getRecursiveResourceSubTrees(object, includeComponentCostLineItems)
getRecursiveResourceSubTrees = _openstudiomodelcore.getRecursiveResourceSubTrees

def toResourceObject(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ResourceObject >":
    return _openstudiomodelcore.toResourceObject(idfObject)
toResourceObject = _openstudiomodelcore.toResourceObject

def getResourceObject(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ResourceObject >":
    return _openstudiomodelcore.getResourceObject(t_model, t_handle)
getResourceObject = _openstudiomodelcore.getResourceObject

def getResourceObjects(t_model: 'Model') -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > >":
    return _openstudiomodelcore.getResourceObjects(t_model)
getResourceObjects = _openstudiomodelcore.getResourceObjects

def getResourceObjectByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ResourceObject >":
    return _openstudiomodelcore.getResourceObjectByName(t_model, t_name)
getResourceObjectByName = _openstudiomodelcore.getResourceObjectByName

def getResourceObjectsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > >":
    return _openstudiomodelcore.getResourceObjectsByName(t_model, t_name, t_exactMatch)
getResourceObjectsByName = _openstudiomodelcore.getResourceObjectsByName
class Version(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_Version
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.Version_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.Version_iddObjectType)

    def versionIdentifier(self) -> "std::string":
        return _openstudiomodelcore.Version_versionIdentifier(self)
Version_swigregister = _openstudiomodelcore.Version_swigregister
Version_swigregister(Version)

def Version_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.Version_iddObjectType()
Version_iddObjectType = _openstudiomodelcore.Version_iddObjectType


def toVersion(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Version >":
    return _openstudiomodelcore.toVersion(idfObject)
toVersion = _openstudiomodelcore.toVersion

def getVersion(t_model: 'Model') -> "openstudio::model::Version":
    return _openstudiomodelcore.getVersion(t_model)
getVersion = _openstudiomodelcore.getVersion

def getOptionalVersion(t_model: 'Model') -> "boost::optional< openstudio::model::Version >":
    return _openstudiomodelcore.getOptionalVersion(t_model)
getOptionalVersion = _openstudiomodelcore.getOptionalVersion
class LifeCycleCostParameters(ParentObject):
    __swig_setmethods__ = {}
    for _s in [ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LifeCycleCostParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LifeCycleCostParameters, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_LifeCycleCostParameters
    __del__ = lambda self: None
    __swig_getmethods__["nistYear"] = lambda x: _openstudiomodelcore.LifeCycleCostParameters_nistYear
    if _newclass:
        nistYear = staticmethod(_openstudiomodelcore.LifeCycleCostParameters_nistYear)
    __swig_getmethods__["fempRealDiscountRate"] = lambda x: _openstudiomodelcore.LifeCycleCostParameters_fempRealDiscountRate
    if _newclass:
        fempRealDiscountRate = staticmethod(_openstudiomodelcore.LifeCycleCostParameters_fempRealDiscountRate)
    __swig_getmethods__["fempNominalDiscountRate"] = lambda x: _openstudiomodelcore.LifeCycleCostParameters_fempNominalDiscountRate
    if _newclass:
        fempNominalDiscountRate = staticmethod(_openstudiomodelcore.LifeCycleCostParameters_fempNominalDiscountRate)
    __swig_getmethods__["fempInflation"] = lambda x: _openstudiomodelcore.LifeCycleCostParameters_fempInflation
    if _newclass:
        fempInflation = staticmethod(_openstudiomodelcore.LifeCycleCostParameters_fempInflation)

    def analysisType(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCostParameters_analysisType(self)

    def isAnalysisTypeDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isAnalysisTypeDefaulted(self)

    def isFEMPAnalysis(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isFEMPAnalysis(self)

    def discountingConvention(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCostParameters_discountingConvention(self)

    def isDiscountingConventionDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isDiscountingConventionDefaulted(self)

    def inflationApproach(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCostParameters_inflationApproach(self)

    def isInflationApproachDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isInflationApproachDefaulted(self)

    def isConstantDollarAnalysis(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isConstantDollarAnalysis(self)

    def realDiscountRate(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_realDiscountRate(self)

    def nominalDiscountRate(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_nominalDiscountRate(self)

    def inflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_inflation(self)

    def baseDateMonth(self) -> "openstudio::MonthOfYear":
        return _openstudiomodelcore.LifeCycleCostParameters_baseDateMonth(self)

    def isBaseDateMonthDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isBaseDateMonthDefaulted(self)

    def baseDateYear(self) -> "int":
        return _openstudiomodelcore.LifeCycleCostParameters_baseDateYear(self)

    def isBaseDateYearDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isBaseDateYearDefaulted(self)

    def serviceDateMonth(self) -> "openstudio::MonthOfYear":
        return _openstudiomodelcore.LifeCycleCostParameters_serviceDateMonth(self)

    def isServiceDateMonthDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isServiceDateMonthDefaulted(self)

    def serviceDateYear(self) -> "int":
        return _openstudiomodelcore.LifeCycleCostParameters_serviceDateYear(self)

    def isServiceDateYearDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isServiceDateYearDefaulted(self)

    def lengthOfStudyPeriodInYears(self) -> "int":
        return _openstudiomodelcore.LifeCycleCostParameters_lengthOfStudyPeriodInYears(self)

    def isLengthOfStudyPeriodInYearsDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isLengthOfStudyPeriodInYearsDefaulted(self)

    def taxRate(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_taxRate(self)

    def depreciationMethod(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCostParameters_depreciationMethod(self)

    def isDepreciationMethodDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isDepreciationMethodDefaulted(self)

    def useNISTFuelEscalationRates(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_useNISTFuelEscalationRates(self)

    def isUseNISTFuelEscalationRatesDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isUseNISTFuelEscalationRatesDefaulted(self)

    def nistRegion(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.LifeCycleCostParameters_nistRegion(self)

    def validNistRegionValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCostParameters_validNistRegionValues(self)

    def isNISTRegionDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isNISTRegionDefaulted(self)

    def nistSector(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.LifeCycleCostParameters_nistSector(self)

    def validNistSectorValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCostParameters_validNistSectorValues(self)

    def isNISTSectorDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_isNISTSectorDefaulted(self)

    def electricityInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_electricityInflation(self)

    def naturalGasInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_naturalGasInflation(self)

    def steamInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_steamInflation(self)

    def gasolineInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_gasolineInflation(self)

    def dieselInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_dieselInflation(self)

    def coalInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_coalInflation(self)

    def fuelOil1Inflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_fuelOil1Inflation(self)

    def fuelOil2Inflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_fuelOil2Inflation(self)

    def propaneInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_propaneInflation(self)

    def waterInflation(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCostParameters_waterInflation(self)

    def setAnalysisType(self, analysisType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setAnalysisType(self, analysisType)

    def resetAnalysisType(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetAnalysisType(self)

    def setDiscountingConvention(self, discountingConvention: 'std::string const &') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setDiscountingConvention(self, discountingConvention)

    def resetDiscountingConvention(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetDiscountingConvention(self)

    def setInflationApproach(self, inflationApproach: 'std::string const &') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setInflationApproach(self, inflationApproach)

    def resetInflationApproach(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetInflationApproach(self)

    def setRealDiscountRate(self, realDiscountRate: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setRealDiscountRate(self, realDiscountRate)

    def setNominalDiscountRate(self, nominalDiscountRate: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setNominalDiscountRate(self, nominalDiscountRate)

    def setInflation(self, inflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setInflation(self, inflation)

    def setBaseDateMonth(self, baseDateMonth: 'MonthOfYear') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setBaseDateMonth(self, baseDateMonth)

    def resetBaseDateMonth(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetBaseDateMonth(self)

    def setBaseDateYear(self, baseDateYear: 'int') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setBaseDateYear(self, baseDateYear)

    def resetBaseDateYear(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetBaseDateYear(self)

    def setServiceDateMonth(self, serviceDateMonth: 'MonthOfYear') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setServiceDateMonth(self, serviceDateMonth)

    def resetServiceDateMonth(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetServiceDateMonth(self)

    def setServiceDateYear(self, serviceDateYear: 'int') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setServiceDateYear(self, serviceDateYear)

    def resetServiceDateYear(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetServiceDateYear(self)

    def setLengthOfStudyPeriodInYears(self, lengthOfStudyPeriodInYears: 'int') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setLengthOfStudyPeriodInYears(self, lengthOfStudyPeriodInYears)

    def resetLengthOfStudyPeriodInYears(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetLengthOfStudyPeriodInYears(self)

    def setTaxRate(self, taxRate: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setTaxRate(self, taxRate)

    def resetTaxRate(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetTaxRate(self)

    def setDepreciationMethod(self, depreciationMethod: 'std::string const &') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setDepreciationMethod(self, depreciationMethod)

    def resetDepreciationMethod(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetDepreciationMethod(self)

    def setUseNISTFuelEscalationRates(self, useNISTFuelEscalationRates: 'bool') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setUseNISTFuelEscalationRates(self, useNISTFuelEscalationRates)

    def resetUseNISTFuelEscalationRates(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetUseNISTFuelEscalationRates(self)

    def setNISTRegion(self, nistRegion: 'std::string const &') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setNISTRegion(self, nistRegion)

    def resetNISTRegion(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetNISTRegion(self)

    def setNISTSector(self, nistSector: 'std::string const &') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setNISTSector(self, nistSector)

    def resetNISTSector(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetNISTSector(self)

    def setElectricityInflation(self, electricityInflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setElectricityInflation(self, electricityInflation)

    def resetElectricityInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetElectricityInflation(self)

    def setNaturalGasInflation(self, naturalGasInflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setNaturalGasInflation(self, naturalGasInflation)

    def resetNaturalGasInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetNaturalGasInflation(self)

    def setSteamInflation(self, steamInflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setSteamInflation(self, steamInflation)

    def resetSteamInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetSteamInflation(self)

    def setGasolineInflation(self, gasolineInflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setGasolineInflation(self, gasolineInflation)

    def resetGasolineInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetGasolineInflation(self)

    def setDieselInflation(self, dieselInflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setDieselInflation(self, dieselInflation)

    def resetDieselInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetDieselInflation(self)

    def setCoalInflation(self, coalInflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setCoalInflation(self, coalInflation)

    def resetCoalInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetCoalInflation(self)

    def setFuelOil1Inflation(self, fuelOil1Inflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setFuelOil1Inflation(self, fuelOil1Inflation)

    def resetFuelOil1Inflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetFuelOil1Inflation(self)

    def setFuelOil2Inflation(self, fuelOil2Inflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setFuelOil2Inflation(self, fuelOil2Inflation)

    def resetFuelOil2Inflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetFuelOil2Inflation(self)

    def setPropaneInflation(self, propaneInflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setPropaneInflation(self, propaneInflation)

    def resetPropaneInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetPropaneInflation(self)

    def setWaterInflation(self, waterInflation: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCostParameters_setWaterInflation(self, waterInflation)

    def resetWaterInflation(self) -> "void":
        return _openstudiomodelcore.LifeCycleCostParameters_resetWaterInflation(self)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.LifeCycleCostParameters_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.LifeCycleCostParameters_iddObjectType)
    __swig_getmethods__["validAnalysisTypeValues"] = lambda x: _openstudiomodelcore.LifeCycleCostParameters_validAnalysisTypeValues
    if _newclass:
        validAnalysisTypeValues = staticmethod(_openstudiomodelcore.LifeCycleCostParameters_validAnalysisTypeValues)
    __swig_getmethods__["validDiscountingConventionValues"] = lambda x: _openstudiomodelcore.LifeCycleCostParameters_validDiscountingConventionValues
    if _newclass:
        validDiscountingConventionValues = staticmethod(_openstudiomodelcore.LifeCycleCostParameters_validDiscountingConventionValues)
    __swig_getmethods__["validInflationApproachValues"] = lambda x: _openstudiomodelcore.LifeCycleCostParameters_validInflationApproachValues
    if _newclass:
        validInflationApproachValues = staticmethod(_openstudiomodelcore.LifeCycleCostParameters_validInflationApproachValues)
    __swig_getmethods__["validDepreciationMethodValues"] = lambda x: _openstudiomodelcore.LifeCycleCostParameters_validDepreciationMethodValues
    if _newclass:
        validDepreciationMethodValues = staticmethod(_openstudiomodelcore.LifeCycleCostParameters_validDepreciationMethodValues)
LifeCycleCostParameters_swigregister = _openstudiomodelcore.LifeCycleCostParameters_swigregister
LifeCycleCostParameters_swigregister(LifeCycleCostParameters)

def LifeCycleCostParameters_nistYear() -> "int":
    return _openstudiomodelcore.LifeCycleCostParameters_nistYear()
LifeCycleCostParameters_nistYear = _openstudiomodelcore.LifeCycleCostParameters_nistYear

def LifeCycleCostParameters_fempRealDiscountRate() -> "double":
    return _openstudiomodelcore.LifeCycleCostParameters_fempRealDiscountRate()
LifeCycleCostParameters_fempRealDiscountRate = _openstudiomodelcore.LifeCycleCostParameters_fempRealDiscountRate

def LifeCycleCostParameters_fempNominalDiscountRate() -> "double":
    return _openstudiomodelcore.LifeCycleCostParameters_fempNominalDiscountRate()
LifeCycleCostParameters_fempNominalDiscountRate = _openstudiomodelcore.LifeCycleCostParameters_fempNominalDiscountRate

def LifeCycleCostParameters_fempInflation() -> "double":
    return _openstudiomodelcore.LifeCycleCostParameters_fempInflation()
LifeCycleCostParameters_fempInflation = _openstudiomodelcore.LifeCycleCostParameters_fempInflation

def LifeCycleCostParameters_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.LifeCycleCostParameters_iddObjectType()
LifeCycleCostParameters_iddObjectType = _openstudiomodelcore.LifeCycleCostParameters_iddObjectType

def LifeCycleCostParameters_validAnalysisTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCostParameters_validAnalysisTypeValues()
LifeCycleCostParameters_validAnalysisTypeValues = _openstudiomodelcore.LifeCycleCostParameters_validAnalysisTypeValues

def LifeCycleCostParameters_validDiscountingConventionValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCostParameters_validDiscountingConventionValues()
LifeCycleCostParameters_validDiscountingConventionValues = _openstudiomodelcore.LifeCycleCostParameters_validDiscountingConventionValues

def LifeCycleCostParameters_validInflationApproachValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCostParameters_validInflationApproachValues()
LifeCycleCostParameters_validInflationApproachValues = _openstudiomodelcore.LifeCycleCostParameters_validInflationApproachValues

def LifeCycleCostParameters_validDepreciationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCostParameters_validDepreciationMethodValues()
LifeCycleCostParameters_validDepreciationMethodValues = _openstudiomodelcore.LifeCycleCostParameters_validDepreciationMethodValues


def toLifeCycleCostParameters(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::LifeCycleCostParameters >":
    return _openstudiomodelcore.toLifeCycleCostParameters(idfObject)
toLifeCycleCostParameters = _openstudiomodelcore.toLifeCycleCostParameters

def getLifeCycleCostParameters(t_model: 'Model') -> "openstudio::model::LifeCycleCostParameters":
    return _openstudiomodelcore.getLifeCycleCostParameters(t_model)
getLifeCycleCostParameters = _openstudiomodelcore.getLifeCycleCostParameters

def getOptionalLifeCycleCostParameters(t_model: 'Model') -> "boost::optional< openstudio::model::LifeCycleCostParameters >":
    return _openstudiomodelcore.getOptionalLifeCycleCostParameters(t_model)
getOptionalLifeCycleCostParameters = _openstudiomodelcore.getOptionalLifeCycleCostParameters
class RadianceParameters(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadianceParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadianceParameters, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_RadianceParameters
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.RadianceParameters_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.RadianceParameters_iddObjectType)
    __swig_getmethods__["skyDiscretizationResolutionValues"] = lambda x: _openstudiomodelcore.RadianceParameters_skyDiscretizationResolutionValues
    if _newclass:
        skyDiscretizationResolutionValues = staticmethod(_openstudiomodelcore.RadianceParameters_skyDiscretizationResolutionValues)

    def accumulatedRaysperRecord(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_accumulatedRaysperRecord(self)

    def isAccumulatedRaysperRecordDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAccumulatedRaysperRecordDefaulted(self)

    def directThreshold(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_directThreshold(self)

    def getDirectThreshold(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelcore.RadianceParameters_getDirectThreshold(self, returnIP)

    def isDirectThresholdDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isDirectThresholdDefaulted(self)

    def directCertainty(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_directCertainty(self)

    def getDirectCertainty(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelcore.RadianceParameters_getDirectCertainty(self, returnIP)

    def isDirectCertaintyDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isDirectCertaintyDefaulted(self)

    def directJitter(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_directJitter(self)

    def getDirectJitter(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelcore.RadianceParameters_getDirectJitter(self, returnIP)

    def isDirectJitterDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isDirectJitterDefaulted(self)

    def directPretest(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_directPretest(self)

    def getDirectPretest(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelcore.RadianceParameters_getDirectPretest(self, returnIP)

    def isDirectPretestDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isDirectPretestDefaulted(self)

    def ambientBouncesVMX(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientBouncesVMX(self)

    def isAmbientBouncesVMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientBouncesVMXDefaulted(self)

    def ambientBouncesDMX(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientBouncesDMX(self)

    def isAmbientBouncesDMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientBouncesDMXDefaulted(self)

    def ambientDivisionsVMX(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientDivisionsVMX(self)

    def isAmbientDivisionsVMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientDivisionsVMXDefaulted(self)

    def ambientDivisionsDMX(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientDivisionsDMX(self)

    def isAmbientDivisionsDMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientDivisionsDMXDefaulted(self)

    def ambientSupersamples(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_ambientSupersamples(self)

    def isAmbientSupersamplesDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isAmbientSupersamplesDefaulted(self)

    def limitWeightVMX(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_limitWeightVMX(self)

    def getLimitWeightVMX(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelcore.RadianceParameters_getLimitWeightVMX(self, returnIP)

    def isLimitWeightVMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isLimitWeightVMXDefaulted(self)

    def limitWeightDMX(self) -> "double":
        return _openstudiomodelcore.RadianceParameters_limitWeightDMX(self)

    def getLimitWeightDMX(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelcore.RadianceParameters_getLimitWeightDMX(self, returnIP)

    def isLimitWeightDMXDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isLimitWeightDMXDefaulted(self)

    def klemsSamplingDensity(self) -> "int":
        return _openstudiomodelcore.RadianceParameters_klemsSamplingDensity(self)

    def isKlemsSamplingDensityDefaulted(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isKlemsSamplingDensityDefaulted(self)

    def skyDiscretizationResolution(self) -> "std::string":
        return _openstudiomodelcore.RadianceParameters_skyDiscretizationResolution(self)

    def isCoarseSettings(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isCoarseSettings(self)

    def isFineSettings(self) -> "bool":
        return _openstudiomodelcore.RadianceParameters_isFineSettings(self)

    def setAccumulatedRaysperRecord(self, accumulatedRaysperRecord: 'int') -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAccumulatedRaysperRecord(self, accumulatedRaysperRecord)

    def resetAccumulatedRaysperRecord(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAccumulatedRaysperRecord(self)

    def setDirectThreshold(self, *args) -> "bool":
        return _openstudiomodelcore.RadianceParameters_setDirectThreshold(self, *args)

    def resetDirectThreshold(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetDirectThreshold(self)

    def setDirectCertainty(self, *args) -> "bool":
        return _openstudiomodelcore.RadianceParameters_setDirectCertainty(self, *args)

    def resetDirectCertainty(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetDirectCertainty(self)

    def setDirectJitter(self, *args) -> "bool":
        return _openstudiomodelcore.RadianceParameters_setDirectJitter(self, *args)

    def resetDirectJitter(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetDirectJitter(self)

    def setDirectPretest(self, *args) -> "bool":
        return _openstudiomodelcore.RadianceParameters_setDirectPretest(self, *args)

    def resetDirectPretest(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetDirectPretest(self)

    def setAmbientBouncesVMX(self, ambientBouncesVMX: 'int') -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientBouncesVMX(self, ambientBouncesVMX)

    def resetAmbientBouncesVMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientBouncesVMX(self)

    def setAmbientBouncesDMX(self, ambientBouncesDMX: 'int') -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientBouncesDMX(self, ambientBouncesDMX)

    def resetAmbientBouncesDMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientBouncesDMX(self)

    def setAmbientDivisionsVMX(self, ambientDivisionsVMX: 'int') -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientDivisionsVMX(self, ambientDivisionsVMX)

    def resetAmbientDivisionsVMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientDivisionsVMX(self)

    def setAmbientDivisionsDMX(self, ambientDivisionsDMX: 'int') -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientDivisionsDMX(self, ambientDivisionsDMX)

    def resetAmbientDivisionsDMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientDivisionsDMX(self)

    def setAmbientSupersamples(self, ambientSupersamples: 'int') -> "bool":
        return _openstudiomodelcore.RadianceParameters_setAmbientSupersamples(self, ambientSupersamples)

    def resetAmbientSupersamples(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetAmbientSupersamples(self)

    def setLimitWeightVMX(self, *args) -> "bool":
        return _openstudiomodelcore.RadianceParameters_setLimitWeightVMX(self, *args)

    def resetLimitWeightVMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetLimitWeightVMX(self)

    def setLimitWeightDMX(self, *args) -> "bool":
        return _openstudiomodelcore.RadianceParameters_setLimitWeightDMX(self, *args)

    def resetLimitWeightDMX(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetLimitWeightDMX(self)

    def setKlemsSamplingDensity(self, klemsSamplingDensity: 'int') -> "bool":
        return _openstudiomodelcore.RadianceParameters_setKlemsSamplingDensity(self, klemsSamplingDensity)

    def resetKlemsSamplingDensity(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetKlemsSamplingDensity(self)

    def setSkyDiscretizationResolution(self, skyDiscretizationResolution: 'std::string') -> "bool":
        return _openstudiomodelcore.RadianceParameters_setSkyDiscretizationResolution(self, skyDiscretizationResolution)

    def resetSkyDiscretizationResolution(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_resetSkyDiscretizationResolution(self)

    def applyCoarseSettings(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_applyCoarseSettings(self)

    def applyFineSettings(self) -> "void":
        return _openstudiomodelcore.RadianceParameters_applyFineSettings(self)
RadianceParameters_swigregister = _openstudiomodelcore.RadianceParameters_swigregister
RadianceParameters_swigregister(RadianceParameters)

def RadianceParameters_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.RadianceParameters_iddObjectType()
RadianceParameters_iddObjectType = _openstudiomodelcore.RadianceParameters_iddObjectType

def RadianceParameters_skyDiscretizationResolutionValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.RadianceParameters_skyDiscretizationResolutionValues()
RadianceParameters_skyDiscretizationResolutionValues = _openstudiomodelcore.RadianceParameters_skyDiscretizationResolutionValues


def toRadianceParameters(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RadianceParameters >":
    return _openstudiomodelcore.toRadianceParameters(idfObject)
toRadianceParameters = _openstudiomodelcore.toRadianceParameters

def getRadianceParameters(t_model: 'Model') -> "openstudio::model::RadianceParameters":
    return _openstudiomodelcore.getRadianceParameters(t_model)
getRadianceParameters = _openstudiomodelcore.getRadianceParameters

def getOptionalRadianceParameters(t_model: 'Model') -> "boost::optional< openstudio::model::RadianceParameters >":
    return _openstudiomodelcore.getOptionalRadianceParameters(t_model)
getOptionalRadianceParameters = _openstudiomodelcore.getOptionalRadianceParameters
class OutputMeter(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputMeter, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputMeter, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelcore.new_OutputMeter(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_OutputMeter
    __del__ = lambda self: None

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.OutputMeter_remove(self)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.OutputMeter_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.OutputMeter_iddObjectType)
    __swig_getmethods__["meterRegex"] = lambda x: _openstudiomodelcore.OutputMeter_meterRegex
    if _newclass:
        meterRegex = staticmethod(_openstudiomodelcore.OutputMeter_meterRegex)
    __swig_getmethods__["getName"] = lambda x: _openstudiomodelcore.OutputMeter_getName
    if _newclass:
        getName = staticmethod(_openstudiomodelcore.OutputMeter_getName)

    def name(self) -> "std::string":
        return _openstudiomodelcore.OutputMeter_name(self)

    def reportingFrequency(self) -> "std::string":
        return _openstudiomodelcore.OutputMeter_reportingFrequency(self)

    def isReportingFrequencyDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_isReportingFrequencyDefaulted(self)

    def meterFileOnly(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_meterFileOnly(self)

    def isMeterFileOnlyDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_isMeterFileOnlyDefaulted(self)

    def cumulative(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_cumulative(self)

    def isCumulativeDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_isCumulativeDefaulted(self)

    def specificEndUse(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.OutputMeter_specificEndUse(self)

    def endUseType(self) -> "boost::optional< openstudio::EndUseType >":
        return _openstudiomodelcore.OutputMeter_endUseType(self)

    def fuelType(self) -> "boost::optional< openstudio::FuelType >":
        return _openstudiomodelcore.OutputMeter_fuelType(self)

    def installLocationType(self) -> "boost::optional< openstudio::InstallLocationType >":
        return _openstudiomodelcore.OutputMeter_installLocationType(self)

    def specificInstallLocation(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.OutputMeter_specificInstallLocation(self)

    def setName(self, name: 'std::string') -> "bool":
        return _openstudiomodelcore.OutputMeter_setName(self, name)

    def setReportingFrequency(self, reportingFrequency: 'std::string const &') -> "bool":
        return _openstudiomodelcore.OutputMeter_setReportingFrequency(self, reportingFrequency)

    def resetReportingFrequency(self) -> "void":
        return _openstudiomodelcore.OutputMeter_resetReportingFrequency(self)

    def setMeterFileOnly(self, meterFileOnly: 'bool') -> "bool":
        return _openstudiomodelcore.OutputMeter_setMeterFileOnly(self, meterFileOnly)

    def resetMeterFileOnly(self) -> "void":
        return _openstudiomodelcore.OutputMeter_resetMeterFileOnly(self)

    def setCumulative(self, cumulative: 'bool') -> "bool":
        return _openstudiomodelcore.OutputMeter_setCumulative(self, cumulative)

    def resetCumulative(self) -> "void":
        return _openstudiomodelcore.OutputMeter_resetCumulative(self)

    def setSpecificEndUse(self, specifcEndUse: 'std::string const &') -> "bool":
        return _openstudiomodelcore.OutputMeter_setSpecificEndUse(self, specifcEndUse)

    def resetSpecificEndUse(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetSpecificEndUse(self)

    def setEndUseType(self, type: 'EndUseType') -> "bool":
        return _openstudiomodelcore.OutputMeter_setEndUseType(self, type)

    def resetEndUseType(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetEndUseType(self)

    def setFuelType(self, type: 'FuelType') -> "bool":
        return _openstudiomodelcore.OutputMeter_setFuelType(self, type)

    def resetFuelType(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetFuelType(self)

    def setInstallLocationType(self, type: 'InstallLocationType') -> "bool":
        return _openstudiomodelcore.OutputMeter_setInstallLocationType(self, type)

    def resetInstallLocationType(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetInstallLocationType(self)

    def setSpecificInstallLocation(self, locationName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.OutputMeter_setSpecificInstallLocation(self, locationName)

    def resetSpecificInstallLocation(self) -> "bool":
        return _openstudiomodelcore.OutputMeter_resetSpecificInstallLocation(self)

    def getData(self, *args) -> "boost::optional< openstudio::TimeSeries >":
        return _openstudiomodelcore.OutputMeter_getData(self, *args)
OutputMeter_swigregister = _openstudiomodelcore.OutputMeter_swigregister
OutputMeter_swigregister(OutputMeter)

def OutputMeter_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.OutputMeter_iddObjectType()
OutputMeter_iddObjectType = _openstudiomodelcore.OutputMeter_iddObjectType

def OutputMeter_meterRegex() -> "boost::regex":
    return _openstudiomodelcore.OutputMeter_meterRegex()
OutputMeter_meterRegex = _openstudiomodelcore.OutputMeter_meterRegex

def OutputMeter_getName(specificEndUseType: 'OptionalString', endUseType: 'OptionalEndUseType', fuelType: 'OptionalFuelType', installLocationType: 'OptionalInstallLocationType', specificInstallLocation: 'OptionalString') -> "std::string":
    return _openstudiomodelcore.OutputMeter_getName(specificEndUseType, endUseType, fuelType, installLocationType, specificInstallLocation)
OutputMeter_getName = _openstudiomodelcore.OutputMeter_getName


def MeterFuelTypeEquals(meter: 'OutputMeter', ft: 'FuelType') -> "bool":
    return _openstudiomodelcore.MeterFuelTypeEquals(meter, ft)
MeterFuelTypeEquals = _openstudiomodelcore.MeterFuelTypeEquals

def toOutputMeter(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::OutputMeter >":
    return _openstudiomodelcore.toOutputMeter(idfObject)
toOutputMeter = _openstudiomodelcore.toOutputMeter

def getOutputMeter(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::OutputMeter >":
    return _openstudiomodelcore.getOutputMeter(t_model, t_handle)
getOutputMeter = _openstudiomodelcore.getOutputMeter

def getOutputMeters(t_model: 'Model') -> "std::vector< openstudio::model::OutputMeter,std::allocator< openstudio::model::OutputMeter > >":
    return _openstudiomodelcore.getOutputMeters(t_model)
getOutputMeters = _openstudiomodelcore.getOutputMeters

def getOutputMeterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::OutputMeter >":
    return _openstudiomodelcore.getOutputMeterByName(t_model, t_name)
getOutputMeterByName = _openstudiomodelcore.getOutputMeterByName

def getOutputMetersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::OutputMeter,std::allocator< openstudio::model::OutputMeter > >":
    return _openstudiomodelcore.getOutputMetersByName(t_model, t_name, t_exactMatch)
getOutputMetersByName = _openstudiomodelcore.getOutputMetersByName
class MeterCustom(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeterCustom, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeterCustom, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelcore.new_MeterCustom(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustom
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.MeterCustom_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.MeterCustom_iddObjectType)
    __swig_getmethods__["fuelTypeValues"] = lambda x: _openstudiomodelcore.MeterCustom_fuelTypeValues
    if _newclass:
        fuelTypeValues = staticmethod(_openstudiomodelcore.MeterCustom_fuelTypeValues)

    def fuelType(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustom_fuelType(self)

    def keyVarGroups(self) -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >":
        return _openstudiomodelcore.MeterCustom_keyVarGroups(self)

    def numKeyVarGroups(self) -> "unsigned int":
        return _openstudiomodelcore.MeterCustom_numKeyVarGroups(self)

    def keyName(self, index: 'unsigned int') -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustom_keyName(self, index)

    def outputVariableorMeterName(self, index: 'unsigned int') -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustom_outputVariableorMeterName(self, index)

    def setFuelType(self, fuelType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.MeterCustom_setFuelType(self, fuelType)

    def resetFuelType(self) -> "void":
        return _openstudiomodelcore.MeterCustom_resetFuelType(self)

    def addKeyVarGroup(self, keyName: 'std::string const &', outputVariableorMeterName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.MeterCustom_addKeyVarGroup(self, keyName, outputVariableorMeterName)

    def removeKeyVarGroup(self, groupIndex: 'unsigned int') -> "bool":
        return _openstudiomodelcore.MeterCustom_removeKeyVarGroup(self, groupIndex)

    def removeAllKeyVarGroups(self) -> "void":
        return _openstudiomodelcore.MeterCustom_removeAllKeyVarGroups(self)

    def setKeyName(self, index: 'unsigned int', str: 'std::string const &') -> "bool":
        return _openstudiomodelcore.MeterCustom_setKeyName(self, index, str)

    def setOutputVariableorMeterName(self, index: 'unsigned int', str: 'std::string const &') -> "bool":
        return _openstudiomodelcore.MeterCustom_setOutputVariableorMeterName(self, index, str)
MeterCustom_swigregister = _openstudiomodelcore.MeterCustom_swigregister
MeterCustom_swigregister(MeterCustom)

def MeterCustom_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.MeterCustom_iddObjectType()
MeterCustom_iddObjectType = _openstudiomodelcore.MeterCustom_iddObjectType

def MeterCustom_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.MeterCustom_fuelTypeValues()
MeterCustom_fuelTypeValues = _openstudiomodelcore.MeterCustom_fuelTypeValues


def toMeterCustom(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::MeterCustom >":
    return _openstudiomodelcore.toMeterCustom(idfObject)
toMeterCustom = _openstudiomodelcore.toMeterCustom

def getMeterCustom(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::MeterCustom >":
    return _openstudiomodelcore.getMeterCustom(t_model, t_handle)
getMeterCustom = _openstudiomodelcore.getMeterCustom

def getMeterCustoms(t_model: 'Model') -> "std::vector< openstudio::model::MeterCustom,std::allocator< openstudio::model::MeterCustom > >":
    return _openstudiomodelcore.getMeterCustoms(t_model)
getMeterCustoms = _openstudiomodelcore.getMeterCustoms

def getMeterCustomByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::MeterCustom >":
    return _openstudiomodelcore.getMeterCustomByName(t_model, t_name)
getMeterCustomByName = _openstudiomodelcore.getMeterCustomByName

def getMeterCustomsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::MeterCustom,std::allocator< openstudio::model::MeterCustom > >":
    return _openstudiomodelcore.getMeterCustomsByName(t_model, t_name, t_exactMatch)
getMeterCustomsByName = _openstudiomodelcore.getMeterCustomsByName
class MeterCustomDecrement(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeterCustomDecrement, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeterCustomDecrement, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', sourceMeterName: 'std::string const &'):
        this = _openstudiomodelcore.new_MeterCustomDecrement(model, sourceMeterName)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustomDecrement
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.MeterCustomDecrement_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.MeterCustomDecrement_iddObjectType)
    __swig_getmethods__["fuelTypeValues"] = lambda x: _openstudiomodelcore.MeterCustomDecrement_fuelTypeValues
    if _newclass:
        fuelTypeValues = staticmethod(_openstudiomodelcore.MeterCustomDecrement_fuelTypeValues)

    def fuelType(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustomDecrement_fuelType(self)

    def sourceMeterName(self) -> "std::string":
        return _openstudiomodelcore.MeterCustomDecrement_sourceMeterName(self)

    def keyVarGroups(self) -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >":
        return _openstudiomodelcore.MeterCustomDecrement_keyVarGroups(self)

    def numKeyVarGroups(self) -> "unsigned int":
        return _openstudiomodelcore.MeterCustomDecrement_numKeyVarGroups(self)

    def keyName(self, index: 'unsigned int') -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustomDecrement_keyName(self, index)

    def outputVariableorMeterName(self, index: 'unsigned int') -> "boost::optional< std::string >":
        return _openstudiomodelcore.MeterCustomDecrement_outputVariableorMeterName(self, index)

    def setFuelType(self, fuelType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_setFuelType(self, fuelType)

    def resetFuelType(self) -> "void":
        return _openstudiomodelcore.MeterCustomDecrement_resetFuelType(self)

    def setSourceMeterName(self, sourceMeterName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_setSourceMeterName(self, sourceMeterName)

    def addKeyVarGroup(self, keyName: 'std::string const &', outputVariableorMeterName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_addKeyVarGroup(self, keyName, outputVariableorMeterName)

    def removeKeyVarGroup(self, groupIndex: 'unsigned int') -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_removeKeyVarGroup(self, groupIndex)

    def removeAllKeyVarGroups(self) -> "void":
        return _openstudiomodelcore.MeterCustomDecrement_removeAllKeyVarGroups(self)

    def setKeyName(self, index: 'unsigned int', str: 'std::string const &') -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_setKeyName(self, index, str)

    def setOutputVariableorMeterName(self, index: 'unsigned int', str: 'std::string const &') -> "bool":
        return _openstudiomodelcore.MeterCustomDecrement_setOutputVariableorMeterName(self, index, str)
MeterCustomDecrement_swigregister = _openstudiomodelcore.MeterCustomDecrement_swigregister
MeterCustomDecrement_swigregister(MeterCustomDecrement)

def MeterCustomDecrement_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.MeterCustomDecrement_iddObjectType()
MeterCustomDecrement_iddObjectType = _openstudiomodelcore.MeterCustomDecrement_iddObjectType

def MeterCustomDecrement_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.MeterCustomDecrement_fuelTypeValues()
MeterCustomDecrement_fuelTypeValues = _openstudiomodelcore.MeterCustomDecrement_fuelTypeValues


def toMeterCustomDecrement(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::MeterCustomDecrement >":
    return _openstudiomodelcore.toMeterCustomDecrement(idfObject)
toMeterCustomDecrement = _openstudiomodelcore.toMeterCustomDecrement

def getMeterCustomDecrement(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::MeterCustomDecrement >":
    return _openstudiomodelcore.getMeterCustomDecrement(t_model, t_handle)
getMeterCustomDecrement = _openstudiomodelcore.getMeterCustomDecrement

def getMeterCustomDecrements(t_model: 'Model') -> "std::vector< openstudio::model::MeterCustomDecrement,std::allocator< openstudio::model::MeterCustomDecrement > >":
    return _openstudiomodelcore.getMeterCustomDecrements(t_model)
getMeterCustomDecrements = _openstudiomodelcore.getMeterCustomDecrements

def getMeterCustomDecrementByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::MeterCustomDecrement >":
    return _openstudiomodelcore.getMeterCustomDecrementByName(t_model, t_name)
getMeterCustomDecrementByName = _openstudiomodelcore.getMeterCustomDecrementByName

def getMeterCustomDecrementsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::MeterCustomDecrement,std::allocator< openstudio::model::MeterCustomDecrement > >":
    return _openstudiomodelcore.getMeterCustomDecrementsByName(t_model, t_name, t_exactMatch)
getMeterCustomDecrementsByName = _openstudiomodelcore.getMeterCustomDecrementsByName
class LifeCycleCost(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LifeCycleCost, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LifeCycleCost, name)
    __repr__ = _swig_repr

    def __init__(self, modelObject: 'ModelObject'):
        this = _openstudiomodelcore.new_LifeCycleCost(modelObject)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_LifeCycleCost
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.LifeCycleCost_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.LifeCycleCost_iddObjectType)
    __swig_getmethods__["validCategoryValues"] = lambda x: _openstudiomodelcore.LifeCycleCost_validCategoryValues
    if _newclass:
        validCategoryValues = staticmethod(_openstudiomodelcore.LifeCycleCost_validCategoryValues)
    __swig_getmethods__["validItemTypeValues"] = lambda x: _openstudiomodelcore.LifeCycleCost_validItemTypeValues
    if _newclass:
        validItemTypeValues = staticmethod(_openstudiomodelcore.LifeCycleCost_validItemTypeValues)
    __swig_getmethods__["createLifeCycleCost"] = lambda x: _openstudiomodelcore.LifeCycleCost_createLifeCycleCost
    if _newclass:
        createLifeCycleCost = staticmethod(_openstudiomodelcore.LifeCycleCost_createLifeCycleCost)

    def category(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCost_category(self)

    def itemType(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCost_itemType(self)

    def item(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.LifeCycleCost_item(self)

    def cost(self) -> "double":
        return _openstudiomodelcore.LifeCycleCost_cost(self)

    def validCostUnitsValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.LifeCycleCost_validCostUnitsValues(self)

    def costUnits(self) -> "std::string":
        return _openstudiomodelcore.LifeCycleCost_costUnits(self)

    def yearsFromStart(self) -> "int":
        return _openstudiomodelcore.LifeCycleCost_yearsFromStart(self)

    def isYearsFromStartDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_isYearsFromStartDefaulted(self)

    def monthsFromStart(self) -> "int":
        return _openstudiomodelcore.LifeCycleCost_monthsFromStart(self)

    def isMonthsFromStartDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_isMonthsFromStartDefaulted(self)

    def repeatPeriodYears(self) -> "int":
        return _openstudiomodelcore.LifeCycleCost_repeatPeriodYears(self)

    def isRepeatPeriodYearsDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_isRepeatPeriodYearsDefaulted(self)

    def repeatPeriodMonths(self) -> "int":
        return _openstudiomodelcore.LifeCycleCost_repeatPeriodMonths(self)

    def isRepeatPeriodMonthsDefaulted(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_isRepeatPeriodMonthsDefaulted(self)

    def setCategory(self, category: 'std::string const &') -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setCategory(self, category)

    def setCost(self, cost: 'double') -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setCost(self, cost)

    def setCostUnits(self, costUnits: 'std::string const &') -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setCostUnits(self, costUnits)

    def setYearsFromStart(self, yearsFromStart: 'int') -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setYearsFromStart(self, yearsFromStart)

    def resetYearsFromStart(self) -> "void":
        return _openstudiomodelcore.LifeCycleCost_resetYearsFromStart(self)

    def setMonthsFromStart(self, monthsFromStart: 'int') -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setMonthsFromStart(self, monthsFromStart)

    def resetMonthsFromStart(self) -> "void":
        return _openstudiomodelcore.LifeCycleCost_resetMonthsFromStart(self)

    def setRepeatPeriodYears(self, repeatPeriodYears: 'int') -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setRepeatPeriodYears(self, repeatPeriodYears)

    def resetRepeatPeriodYears(self) -> "void":
        return _openstudiomodelcore.LifeCycleCost_resetRepeatPeriodYears(self)

    def setRepeatPeriodMonths(self, repeatPeriodMonths: 'int') -> "bool":
        return _openstudiomodelcore.LifeCycleCost_setRepeatPeriodMonths(self, repeatPeriodMonths)

    def resetRepeatPeriodMonths(self) -> "void":
        return _openstudiomodelcore.LifeCycleCost_resetRepeatPeriodMonths(self)

    def totalCost(self) -> "double":
        return _openstudiomodelcore.LifeCycleCost_totalCost(self)

    def convertToCostPerEach(self) -> "bool":
        return _openstudiomodelcore.LifeCycleCost_convertToCostPerEach(self)

    def costedQuantity(self) -> "boost::optional< int >":
        return _openstudiomodelcore.LifeCycleCost_costedQuantity(self)

    def costedArea(self) -> "boost::optional< double >":
        return _openstudiomodelcore.LifeCycleCost_costedArea(self)

    def costedThermalZones(self) -> "boost::optional< int >":
        return _openstudiomodelcore.LifeCycleCost_costedThermalZones(self)
LifeCycleCost_swigregister = _openstudiomodelcore.LifeCycleCost_swigregister
LifeCycleCost_swigregister(LifeCycleCost)

def LifeCycleCost_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.LifeCycleCost_iddObjectType()
LifeCycleCost_iddObjectType = _openstudiomodelcore.LifeCycleCost_iddObjectType

def LifeCycleCost_validCategoryValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCost_validCategoryValues()
LifeCycleCost_validCategoryValues = _openstudiomodelcore.LifeCycleCost_validCategoryValues

def LifeCycleCost_validItemTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.LifeCycleCost_validItemTypeValues()
LifeCycleCost_validItemTypeValues = _openstudiomodelcore.LifeCycleCost_validItemTypeValues

def LifeCycleCost_createLifeCycleCost(name: 'std::string const &', modelObject: 'ModelObject', cost: 'double', costUnits: 'std::string const &', category: 'std::string const &', repeatPeriodYears: 'int'=0, yearsFromStart: 'int'=0) -> "boost::optional< openstudio::model::LifeCycleCost >":
    return _openstudiomodelcore.LifeCycleCost_createLifeCycleCost(name, modelObject, cost, costUnits, category, repeatPeriodYears, yearsFromStart)
LifeCycleCost_createLifeCycleCost = _openstudiomodelcore.LifeCycleCost_createLifeCycleCost


def toLifeCycleCost(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::LifeCycleCost >":
    return _openstudiomodelcore.toLifeCycleCost(idfObject)
toLifeCycleCost = _openstudiomodelcore.toLifeCycleCost

def getLifeCycleCost(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::LifeCycleCost >":
    return _openstudiomodelcore.getLifeCycleCost(t_model, t_handle)
getLifeCycleCost = _openstudiomodelcore.getLifeCycleCost

def getLifeCycleCosts(t_model: 'Model') -> "std::vector< openstudio::model::LifeCycleCost,std::allocator< openstudio::model::LifeCycleCost > >":
    return _openstudiomodelcore.getLifeCycleCosts(t_model)
getLifeCycleCosts = _openstudiomodelcore.getLifeCycleCosts

def getLifeCycleCostByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::LifeCycleCost >":
    return _openstudiomodelcore.getLifeCycleCostByName(t_model, t_name)
getLifeCycleCostByName = _openstudiomodelcore.getLifeCycleCostByName

def getLifeCycleCostsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::LifeCycleCost,std::allocator< openstudio::model::LifeCycleCost > >":
    return _openstudiomodelcore.getLifeCycleCostsByName(t_model, t_name, t_exactMatch)
getLifeCycleCostsByName = _openstudiomodelcore.getLifeCycleCostsByName
class BillingPeriod(ModelExtensibleGroup):
    __swig_setmethods__ = {}
    for _s in [ModelExtensibleGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BillingPeriod, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelExtensibleGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BillingPeriod, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def startDate(self) -> "openstudio::Date":
        return _openstudiomodelcore.BillingPeriod_startDate(self)

    def endDate(self) -> "openstudio::Date":
        return _openstudiomodelcore.BillingPeriod_endDate(self)

    def numberOfDays(self) -> "unsigned int":
        return _openstudiomodelcore.BillingPeriod_numberOfDays(self)

    def consumption(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_consumption(self)

    def peakDemand(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_peakDemand(self)

    def totalCost(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_totalCost(self)

    def setStartDate(self, startDate: 'Date') -> "bool":
        return _openstudiomodelcore.BillingPeriod_setStartDate(self, startDate)

    def setEndDate(self, endDate: 'Date') -> "bool":
        return _openstudiomodelcore.BillingPeriod_setEndDate(self, endDate)

    def setNumberOfDays(self, numberOfDays: 'unsigned int') -> "bool":
        return _openstudiomodelcore.BillingPeriod_setNumberOfDays(self, numberOfDays)

    def setConsumption(self, consumption: 'double') -> "bool":
        return _openstudiomodelcore.BillingPeriod_setConsumption(self, consumption)

    def resetConsumption(self) -> "void":
        return _openstudiomodelcore.BillingPeriod_resetConsumption(self)

    def setPeakDemand(self, peakDemand: 'double') -> "bool":
        return _openstudiomodelcore.BillingPeriod_setPeakDemand(self, peakDemand)

    def resetPeakDemand(self) -> "void":
        return _openstudiomodelcore.BillingPeriod_resetPeakDemand(self)

    def setTotalCost(self, totalCost: 'double') -> "bool":
        return _openstudiomodelcore.BillingPeriod_setTotalCost(self, totalCost)

    def resetTotalCost(self) -> "void":
        return _openstudiomodelcore.BillingPeriod_resetTotalCost(self)

    def withinRunPeriod(self) -> "bool":
        return _openstudiomodelcore.BillingPeriod_withinRunPeriod(self)

    def withinPeriodicRunPeriod(self) -> "bool":
        return _openstudiomodelcore.BillingPeriod_withinPeriodicRunPeriod(self)

    def overlapsRunPeriod(self) -> "bool":
        return _openstudiomodelcore.BillingPeriod_overlapsRunPeriod(self)

    def modelConsumptionValues(self) -> "openstudio::Vector":
        return _openstudiomodelcore.BillingPeriod_modelConsumptionValues(self)

    def modelConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_modelConsumption(self)

    def modelPeakDemand(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_modelPeakDemand(self)

    def modelTotalCost(self) -> "boost::optional< double >":
        return _openstudiomodelcore.BillingPeriod_modelTotalCost(self)
    __swig_destroy__ = _openstudiomodelcore.delete_BillingPeriod
    __del__ = lambda self: None
BillingPeriod_swigregister = _openstudiomodelcore.BillingPeriod_swigregister
BillingPeriod_swigregister(BillingPeriod)

class UtilityBill(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtilityBill, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UtilityBill, name)
    __repr__ = _swig_repr

    def __init__(self, fuelType: 'FuelType', model: 'Model'):
        this = _openstudiomodelcore.new_UtilityBill(fuelType, model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_UtilityBill
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.UtilityBill_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.UtilityBill_iddObjectType)

    def consumptionUnitValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.UtilityBill_consumptionUnitValues(self)

    def peakDemandUnitValues(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.UtilityBill_peakDemandUnitValues(self)
    __swig_getmethods__["calibrationGuidelines"] = lambda x: _openstudiomodelcore.UtilityBill_calibrationGuidelines
    if _newclass:
        calibrationGuidelines = staticmethod(_openstudiomodelcore.UtilityBill_calibrationGuidelines)
    __swig_getmethods__["maxNMBE"] = lambda x: _openstudiomodelcore.UtilityBill_maxNMBE
    if _newclass:
        maxNMBE = staticmethod(_openstudiomodelcore.UtilityBill_maxNMBE)
    __swig_getmethods__["maxCVRMSE"] = lambda x: _openstudiomodelcore.UtilityBill_maxCVRMSE
    if _newclass:
        maxCVRMSE = staticmethod(_openstudiomodelcore.UtilityBill_maxCVRMSE)

    def fuelType(self) -> "openstudio::FuelType":
        return _openstudiomodelcore.UtilityBill_fuelType(self)

    def meterInstallLocation(self) -> "openstudio::InstallLocationType":
        return _openstudiomodelcore.UtilityBill_meterInstallLocation(self)

    def isMeterInstallLocationDefaulted(self) -> "bool":
        return _openstudiomodelcore.UtilityBill_isMeterInstallLocationDefaulted(self)

    def meterSpecificInstallLocation(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_meterSpecificInstallLocation(self)

    def meterEndUseCategory(self) -> "boost::optional< openstudio::EndUseCategoryType >":
        return _openstudiomodelcore.UtilityBill_meterEndUseCategory(self)

    def meterSpecificEndUse(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_meterSpecificEndUse(self)

    def consumptionUnit(self) -> "std::string":
        return _openstudiomodelcore.UtilityBill_consumptionUnit(self)

    def consumptionUnitDescription(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_consumptionUnitDescription(self)

    def consumptionUnitConversionFactor(self) -> "double":
        return _openstudiomodelcore.UtilityBill_consumptionUnitConversionFactor(self)

    def isConsumptionUnitConversionFactorDefaulted(self) -> "bool":
        return _openstudiomodelcore.UtilityBill_isConsumptionUnitConversionFactorDefaulted(self)

    def peakDemandUnit(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_peakDemandUnit(self)

    def peakDemandUnitDescription(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.UtilityBill_peakDemandUnitDescription(self)

    def peakDemandUnitConversionFactor(self) -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_peakDemandUnitConversionFactor(self)

    def timestepsInPeakDemandWindow(self) -> "boost::optional< unsigned int >":
        return _openstudiomodelcore.UtilityBill_timestepsInPeakDemandWindow(self)

    def isTimestepsInPeakDemandWindowDefaulted(self) -> "bool":
        return _openstudiomodelcore.UtilityBill_isTimestepsInPeakDemandWindowDefaulted(self)

    def minutesInPeakDemandWindow(self) -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_minutesInPeakDemandWindow(self)

    def billingPeriods(self) -> "std::vector< openstudio::model::BillingPeriod,std::allocator< openstudio::model::BillingPeriod > >":
        return _openstudiomodelcore.UtilityBill_billingPeriods(self)

    def setMeterInstallLocation(self, meterInstallLocation: 'InstallLocationType') -> "bool":
        return _openstudiomodelcore.UtilityBill_setMeterInstallLocation(self, meterInstallLocation)

    def resetMeterInstallLocation(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetMeterInstallLocation(self)

    def setMeterSpecificInstallLocation(self, meterSpecificInstallLocation: 'std::string const &') -> "bool":
        return _openstudiomodelcore.UtilityBill_setMeterSpecificInstallLocation(self, meterSpecificInstallLocation)

    def resetMeterSpecificInstallLocation(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetMeterSpecificInstallLocation(self)

    def setMeterEndUseCategory(self, meterEndUseCategory: 'EndUseCategoryType') -> "bool":
        return _openstudiomodelcore.UtilityBill_setMeterEndUseCategory(self, meterEndUseCategory)

    def resetMeterEndUseCategory(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetMeterEndUseCategory(self)

    def setMeterSpecificEndUse(self, meterSpecificEndUse: 'std::string const &') -> "bool":
        return _openstudiomodelcore.UtilityBill_setMeterSpecificEndUse(self, meterSpecificEndUse)

    def resetMeterSpecificEndUse(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetMeterSpecificEndUse(self)

    def setConsumptionUnit(self, consumptionUnit: 'std::string const &') -> "bool":
        return _openstudiomodelcore.UtilityBill_setConsumptionUnit(self, consumptionUnit)

    def setConsumptionUnitConversionFactor(self, consumptionUnitConversionFactor: 'double') -> "bool":
        return _openstudiomodelcore.UtilityBill_setConsumptionUnitConversionFactor(self, consumptionUnitConversionFactor)

    def resetConsumptionUnitConversionFactor(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetConsumptionUnitConversionFactor(self)

    def setPeakDemandUnit(self, peakDemandUnit: 'std::string const &') -> "bool":
        return _openstudiomodelcore.UtilityBill_setPeakDemandUnit(self, peakDemandUnit)

    def setTimestepsInPeakDemandWindow(self, timestepsInPeakDemandWindow: 'unsigned int') -> "bool":
        return _openstudiomodelcore.UtilityBill_setTimestepsInPeakDemandWindow(self, timestepsInPeakDemandWindow)

    def resetTimestepsInPeakDemandWindow(self) -> "void":
        return _openstudiomodelcore.UtilityBill_resetTimestepsInPeakDemandWindow(self)

    def clearBillingPeriods(self) -> "void":
        return _openstudiomodelcore.UtilityBill_clearBillingPeriods(self)

    def addBillingPeriod(self) -> "openstudio::model::BillingPeriod":
        return _openstudiomodelcore.UtilityBill_addBillingPeriod(self)

    def consumptionMeter(self) -> "openstudio::model::OutputMeter":
        return _openstudiomodelcore.UtilityBill_consumptionMeter(self)

    def peakDemandMeter(self) -> "boost::optional< openstudio::model::OutputMeter >":
        return _openstudiomodelcore.UtilityBill_peakDemandMeter(self)

    def numberBillingPeriodsInCalculations(self) -> "unsigned int":
        return _openstudiomodelcore.UtilityBill_numberBillingPeriodsInCalculations(self)

    def CVRMSE(self) -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_CVRMSE(self)

    def NMBE(self) -> "boost::optional< double >":
        return _openstudiomodelcore.UtilityBill_NMBE(self)
UtilityBill_swigregister = _openstudiomodelcore.UtilityBill_swigregister
UtilityBill_swigregister(UtilityBill)

def UtilityBill_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.UtilityBill_iddObjectType()
UtilityBill_iddObjectType = _openstudiomodelcore.UtilityBill_iddObjectType

def UtilityBill_calibrationGuidelines() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.UtilityBill_calibrationGuidelines()
UtilityBill_calibrationGuidelines = _openstudiomodelcore.UtilityBill_calibrationGuidelines

def UtilityBill_maxNMBE(calibrationGuideline: 'std::string const &') -> "boost::optional< double >":
    return _openstudiomodelcore.UtilityBill_maxNMBE(calibrationGuideline)
UtilityBill_maxNMBE = _openstudiomodelcore.UtilityBill_maxNMBE

def UtilityBill_maxCVRMSE(calibrationGuideline: 'std::string const &') -> "boost::optional< double >":
    return _openstudiomodelcore.UtilityBill_maxCVRMSE(calibrationGuideline)
UtilityBill_maxCVRMSE = _openstudiomodelcore.UtilityBill_maxCVRMSE


def toUtilityBill(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::UtilityBill >":
    return _openstudiomodelcore.toUtilityBill(idfObject)
toUtilityBill = _openstudiomodelcore.toUtilityBill

def getUtilityBill(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::UtilityBill >":
    return _openstudiomodelcore.getUtilityBill(t_model, t_handle)
getUtilityBill = _openstudiomodelcore.getUtilityBill

def getUtilityBills(t_model: 'Model') -> "std::vector< openstudio::model::UtilityBill,std::allocator< openstudio::model::UtilityBill > >":
    return _openstudiomodelcore.getUtilityBills(t_model)
getUtilityBills = _openstudiomodelcore.getUtilityBills

def getUtilityBillByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::UtilityBill >":
    return _openstudiomodelcore.getUtilityBillByName(t_model, t_name)
getUtilityBillByName = _openstudiomodelcore.getUtilityBillByName

def getUtilityBillsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::UtilityBill,std::allocator< openstudio::model::UtilityBill > >":
    return _openstudiomodelcore.getUtilityBillsByName(t_model, t_name, t_exactMatch)
getUtilityBillsByName = _openstudiomodelcore.getUtilityBillsByName

def toBillingPeriod(extensibleGroup: 'IdfExtensibleGroup') -> "boost::optional< openstudio::model::BillingPeriod >":
    return _openstudiomodelcore.toBillingPeriod(extensibleGroup)
toBillingPeriod = _openstudiomodelcore.toBillingPeriod
class ComponentData(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentData, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ComponentData
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ComponentData_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ComponentData_iddObjectType)

    def uuid(self) -> "openstudio::UUID":
        return _openstudiomodelcore.ComponentData_uuid(self)

    def versionUUID(self) -> "openstudio::UUID":
        return _openstudiomodelcore.ComponentData_versionUUID(self)

    def creationTimestamp(self) -> "boost::optional< int >":
        return _openstudiomodelcore.ComponentData_creationTimestamp(self)

    def versionTimestamp(self) -> "boost::optional< int >":
        return _openstudiomodelcore.ComponentData_versionTimestamp(self)

    def primaryComponentObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ComponentData_primaryComponentObject(self)

    def componentObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.ComponentData_componentObjects(self)

    def getComponentObject(self, objectIndex: 'unsigned int') -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ComponentData_getComponentObject(self, objectIndex)

    def createVersionUUID(self) -> "openstudio::UUID":
        return _openstudiomodelcore.ComponentData_createVersionUUID(self)

    def numComponentObjects(self) -> "unsigned int":
        return _openstudiomodelcore.ComponentData_numComponentObjects(self)
ComponentData_swigregister = _openstudiomodelcore.ComponentData_swigregister
ComponentData_swigregister(ComponentData)

def ComponentData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ComponentData_iddObjectType()
ComponentData_iddObjectType = _openstudiomodelcore.ComponentData_iddObjectType


def toComponentData(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ComponentData >":
    return _openstudiomodelcore.toComponentData(idfObject)
toComponentData = _openstudiomodelcore.toComponentData

def getComponentData(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ComponentData >":
    return _openstudiomodelcore.getComponentData(t_model, t_handle)
getComponentData = _openstudiomodelcore.getComponentData

def getComponentDatas(t_model: 'Model') -> "std::vector< openstudio::model::ComponentData,std::allocator< openstudio::model::ComponentData > >":
    return _openstudiomodelcore.getComponentDatas(t_model)
getComponentDatas = _openstudiomodelcore.getComponentDatas

def getComponentDataByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ComponentData >":
    return _openstudiomodelcore.getComponentDataByName(t_model, t_name)
getComponentDataByName = _openstudiomodelcore.getComponentDataByName

def getComponentDatasByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ComponentData,std::allocator< openstudio::model::ComponentData > >":
    return _openstudiomodelcore.getComponentDatasByName(t_model, t_name, t_exactMatch)
getComponentDatasByName = _openstudiomodelcore.getComponentDatasByName
class ScheduleTypeLimits(ResourceObject):
    __swig_setmethods__ = {}
    for _s in [ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleTypeLimits, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleTypeLimits, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelcore.new_ScheduleTypeLimits(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeLimits
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ScheduleTypeLimits_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ScheduleTypeLimits_iddObjectType)
    __swig_getmethods__["numericTypeValues"] = lambda x: _openstudiomodelcore.ScheduleTypeLimits_numericTypeValues
    if _newclass:
        numericTypeValues = staticmethod(_openstudiomodelcore.ScheduleTypeLimits_numericTypeValues)
    __swig_getmethods__["unitTypeValues"] = lambda x: _openstudiomodelcore.ScheduleTypeLimits_unitTypeValues
    if _newclass:
        unitTypeValues = staticmethod(_openstudiomodelcore.ScheduleTypeLimits_unitTypeValues)

    def lowerLimitValue(self) -> "boost::optional< double >":
        return _openstudiomodelcore.ScheduleTypeLimits_lowerLimitValue(self)

    def getLowerLimitValue(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelcore.ScheduleTypeLimits_getLowerLimitValue(self, returnIP)

    def upperLimitValue(self) -> "boost::optional< double >":
        return _openstudiomodelcore.ScheduleTypeLimits_upperLimitValue(self)

    def getUpperLimitValue(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelcore.ScheduleTypeLimits_getUpperLimitValue(self, returnIP)

    def numericType(self) -> "boost::optional< std::string >":
        return _openstudiomodelcore.ScheduleTypeLimits_numericType(self)

    def unitType(self) -> "std::string":
        return _openstudiomodelcore.ScheduleTypeLimits_unitType(self)

    def isUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_isUnitTypeDefaulted(self)

    def units(self, *args) -> "boost::optional< openstudio::Unit >":
        return _openstudiomodelcore.ScheduleTypeLimits_units(self, *args)

    def setLowerLimitValue(self, *args) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_setLowerLimitValue(self, *args)

    def resetLowerLimitValue(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimits_resetLowerLimitValue(self)

    def setUpperLimitValue(self, *args) -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_setUpperLimitValue(self, *args)

    def resetUpperLimitValue(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimits_resetUpperLimitValue(self)

    def setNumericType(self, numericType: 'std::string') -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_setNumericType(self, numericType)

    def resetNumericType(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimits_resetNumericType(self)

    def setUnitType(self, unitType: 'std::string') -> "bool":
        return _openstudiomodelcore.ScheduleTypeLimits_setUnitType(self, unitType)

    def resetUnitType(self) -> "void":
        return _openstudiomodelcore.ScheduleTypeLimits_resetUnitType(self)
ScheduleTypeLimits_swigregister = _openstudiomodelcore.ScheduleTypeLimits_swigregister
ScheduleTypeLimits_swigregister(ScheduleTypeLimits)

def ScheduleTypeLimits_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleTypeLimits_iddObjectType()
ScheduleTypeLimits_iddObjectType = _openstudiomodelcore.ScheduleTypeLimits_iddObjectType

def ScheduleTypeLimits_numericTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.ScheduleTypeLimits_numericTypeValues()
ScheduleTypeLimits_numericTypeValues = _openstudiomodelcore.ScheduleTypeLimits_numericTypeValues

def ScheduleTypeLimits_unitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.ScheduleTypeLimits_unitTypeValues()
ScheduleTypeLimits_unitTypeValues = _openstudiomodelcore.ScheduleTypeLimits_unitTypeValues


def isCompatible(parentLimits: 'ScheduleTypeLimits', candidate: 'ScheduleTypeLimits') -> "bool":
    return _openstudiomodelcore.isCompatible(parentLimits, candidate)
isCompatible = _openstudiomodelcore.isCompatible

def toScheduleTypeLimits(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
    return _openstudiomodelcore.toScheduleTypeLimits(idfObject)
toScheduleTypeLimits = _openstudiomodelcore.toScheduleTypeLimits

def getScheduleTypeLimits(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
    return _openstudiomodelcore.getScheduleTypeLimits(t_model, t_handle)
getScheduleTypeLimits = _openstudiomodelcore.getScheduleTypeLimits

def getScheduleTypeLimitss(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleTypeLimits,std::allocator< openstudio::model::ScheduleTypeLimits > >":
    return _openstudiomodelcore.getScheduleTypeLimitss(t_model)
getScheduleTypeLimitss = _openstudiomodelcore.getScheduleTypeLimitss

def getScheduleTypeLimitsByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
    return _openstudiomodelcore.getScheduleTypeLimitsByName(t_model, t_name)
getScheduleTypeLimitsByName = _openstudiomodelcore.getScheduleTypeLimitsByName

def getScheduleTypeLimitssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleTypeLimits,std::allocator< openstudio::model::ScheduleTypeLimits > >":
    return _openstudiomodelcore.getScheduleTypeLimitssByName(t_model, t_name, t_exactMatch)
getScheduleTypeLimitssByName = _openstudiomodelcore.getScheduleTypeLimitssByName
class ScheduleBase(ResourceObject):
    __swig_setmethods__ = {}
    for _s in [ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleBase
    __del__ = lambda self: None

    def scheduleTypeLimits(self) -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
        return _openstudiomodelcore.ScheduleBase_scheduleTypeLimits(self)

    def setScheduleTypeLimits(self, scheduleTypeLimits: 'ScheduleTypeLimits') -> "bool":
        return _openstudiomodelcore.ScheduleBase_setScheduleTypeLimits(self, scheduleTypeLimits)

    def resetScheduleTypeLimits(self) -> "bool":
        return _openstudiomodelcore.ScheduleBase_resetScheduleTypeLimits(self)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelcore.ScheduleBase_ensureNoLeapDays(self)
ScheduleBase_swigregister = _openstudiomodelcore.ScheduleBase_swigregister
ScheduleBase_swigregister(ScheduleBase)


def toScheduleBase(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleBase >":
    return _openstudiomodelcore.toScheduleBase(idfObject)
toScheduleBase = _openstudiomodelcore.toScheduleBase

def getScheduleBase(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleBase >":
    return _openstudiomodelcore.getScheduleBase(t_model, t_handle)
getScheduleBase = _openstudiomodelcore.getScheduleBase

def getScheduleBases(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleBase,std::allocator< openstudio::model::ScheduleBase > >":
    return _openstudiomodelcore.getScheduleBases(t_model)
getScheduleBases = _openstudiomodelcore.getScheduleBases

def getScheduleBaseByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleBase >":
    return _openstudiomodelcore.getScheduleBaseByName(t_model, t_name)
getScheduleBaseByName = _openstudiomodelcore.getScheduleBaseByName

def getScheduleBasesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleBase,std::allocator< openstudio::model::ScheduleBase > >":
    return _openstudiomodelcore.getScheduleBasesByName(t_model, t_name, t_exactMatch)
getScheduleBasesByName = _openstudiomodelcore.getScheduleBasesByName
class Schedule(ScheduleBase):
    __swig_setmethods__ = {}
    for _s in [ScheduleBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schedule, name, value)
    __swig_getmethods__ = {}
    for _s in [ScheduleBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schedule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_Schedule
    __del__ = lambda self: None
Schedule_swigregister = _openstudiomodelcore.Schedule_swigregister
Schedule_swigregister(Schedule)


def toSchedule(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Schedule >":
    return _openstudiomodelcore.toSchedule(idfObject)
toSchedule = _openstudiomodelcore.toSchedule

def getSchedule(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Schedule >":
    return _openstudiomodelcore.getSchedule(t_model, t_handle)
getSchedule = _openstudiomodelcore.getSchedule

def getSchedules(t_model: 'Model') -> "std::vector< openstudio::model::Schedule,std::allocator< openstudio::model::Schedule > >":
    return _openstudiomodelcore.getSchedules(t_model)
getSchedules = _openstudiomodelcore.getSchedules

def getScheduleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Schedule >":
    return _openstudiomodelcore.getScheduleByName(t_model, t_name)
getScheduleByName = _openstudiomodelcore.getScheduleByName

def getSchedulesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Schedule,std::allocator< openstudio::model::Schedule > >":
    return _openstudiomodelcore.getSchedulesByName(t_model, t_name, t_exactMatch)
getSchedulesByName = _openstudiomodelcore.getSchedulesByName
class ScheduleDay(ScheduleBase):
    __swig_setmethods__ = {}
    for _s in [ScheduleBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleDay, name, value)
    __swig_getmethods__ = {}
    for _s in [ScheduleBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleDay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleDay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleDay
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ScheduleDay_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ScheduleDay_iddObjectType)

    def isScheduleTypeLimitsDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleDay_isScheduleTypeLimitsDefaulted(self)

    def interpolatetoTimestep(self) -> "bool":
        return _openstudiomodelcore.ScheduleDay_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleDay_isInterpolatetoTimestepDefaulted(self)

    def times(self) -> "std::vector< openstudio::Time,std::allocator< openstudio::Time > >":
        return _openstudiomodelcore.ScheduleDay_times(self)

    def values(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelcore.ScheduleDay_values(self)

    def getValues(self, returnIP: 'bool'=False) -> "openstudio::OSQuantityVector":
        return _openstudiomodelcore.ScheduleDay_getValues(self, returnIP)

    def getValue(self, time: 'Time') -> "double":
        return _openstudiomodelcore.ScheduleDay_getValue(self, time)

    def getValueAsQuantity(self, time: 'Time', returnIP: 'bool'=False) -> "boost::optional< openstudio::Quantity >":
        return _openstudiomodelcore.ScheduleDay_getValueAsQuantity(self, time, returnIP)

    def setInterpolatetoTimestep(self, interpolatetoTimestep: 'bool') -> "bool":
        return _openstudiomodelcore.ScheduleDay_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self) -> "void":
        return _openstudiomodelcore.ScheduleDay_resetInterpolatetoTimestep(self)

    def addValue(self, *args) -> "bool":
        return _openstudiomodelcore.ScheduleDay_addValue(self, *args)

    def removeValue(self, time: 'Time') -> "boost::optional< double >":
        return _openstudiomodelcore.ScheduleDay_removeValue(self, time)

    def clearValues(self) -> "void":
        return _openstudiomodelcore.ScheduleDay_clearValues(self)
ScheduleDay_swigregister = _openstudiomodelcore.ScheduleDay_swigregister
ScheduleDay_swigregister(ScheduleDay)

def ScheduleDay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleDay_iddObjectType()
ScheduleDay_iddObjectType = _openstudiomodelcore.ScheduleDay_iddObjectType


def toScheduleDay(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleDay >":
    return _openstudiomodelcore.toScheduleDay(idfObject)
toScheduleDay = _openstudiomodelcore.toScheduleDay

def getScheduleDay(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleDay >":
    return _openstudiomodelcore.getScheduleDay(t_model, t_handle)
getScheduleDay = _openstudiomodelcore.getScheduleDay

def getScheduleDays(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleDay,std::allocator< openstudio::model::ScheduleDay > >":
    return _openstudiomodelcore.getScheduleDays(t_model)
getScheduleDays = _openstudiomodelcore.getScheduleDays

def getScheduleDayByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleDay >":
    return _openstudiomodelcore.getScheduleDayByName(t_model, t_name)
getScheduleDayByName = _openstudiomodelcore.getScheduleDayByName

def getScheduleDaysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleDay,std::allocator< openstudio::model::ScheduleDay > >":
    return _openstudiomodelcore.getScheduleDaysByName(t_model, t_name, t_exactMatch)
getScheduleDaysByName = _openstudiomodelcore.getScheduleDaysByName
class ScheduleWeek(ResourceObject):
    __swig_setmethods__ = {}
    for _s in [ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleWeek, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleWeek, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelcore.new_ScheduleWeek(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleWeek
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ScheduleWeek_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ScheduleWeek_iddObjectType)

    def sundaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_sundaySchedule(self)

    def mondaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_mondaySchedule(self)

    def tuesdaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_tuesdaySchedule(self)

    def wednesdaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_wednesdaySchedule(self)

    def thursdaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_thursdaySchedule(self)

    def fridaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_fridaySchedule(self)

    def saturdaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_saturdaySchedule(self)

    def holidaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_holidaySchedule(self)

    def summerDesignDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_summerDesignDaySchedule(self)

    def winterDesignDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_winterDesignDaySchedule(self)

    def customDay1Schedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_customDay1Schedule(self)

    def customDay2Schedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelcore.ScheduleWeek_customDay2Schedule(self)

    def setSundaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setSundaySchedule(self, schedule)

    def setMondaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setMondaySchedule(self, schedule)

    def setTuesdaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setTuesdaySchedule(self, schedule)

    def setWednesdaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setWednesdaySchedule(self, schedule)

    def setThursdaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setThursdaySchedule(self, schedule)

    def setFridaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setFridaySchedule(self, schedule)

    def setSaturdaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setSaturdaySchedule(self, schedule)

    def setHolidaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setHolidaySchedule(self, schedule)

    def setSummerDesignDaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setSummerDesignDaySchedule(self, schedule)

    def setWinterDesignDaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setWinterDesignDaySchedule(self, schedule)

    def setCustomDay1Schedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setCustomDay1Schedule(self, schedule)

    def setCustomDay2Schedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setCustomDay2Schedule(self, schedule)

    def setAllSchedules(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setAllSchedules(self, schedule)

    def setWeekdaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setWeekdaySchedule(self, schedule)

    def setWeekendSchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleWeek_setWeekendSchedule(self, schedule)
ScheduleWeek_swigregister = _openstudiomodelcore.ScheduleWeek_swigregister
ScheduleWeek_swigregister(ScheduleWeek)

def ScheduleWeek_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleWeek_iddObjectType()
ScheduleWeek_iddObjectType = _openstudiomodelcore.ScheduleWeek_iddObjectType


def toScheduleWeek(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleWeek >":
    return _openstudiomodelcore.toScheduleWeek(idfObject)
toScheduleWeek = _openstudiomodelcore.toScheduleWeek

def getScheduleWeek(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleWeek >":
    return _openstudiomodelcore.getScheduleWeek(t_model, t_handle)
getScheduleWeek = _openstudiomodelcore.getScheduleWeek

def getScheduleWeeks(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleWeek,std::allocator< openstudio::model::ScheduleWeek > >":
    return _openstudiomodelcore.getScheduleWeeks(t_model)
getScheduleWeeks = _openstudiomodelcore.getScheduleWeeks

def getScheduleWeekByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleWeek >":
    return _openstudiomodelcore.getScheduleWeekByName(t_model, t_name)
getScheduleWeekByName = _openstudiomodelcore.getScheduleWeekByName

def getScheduleWeeksByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleWeek,std::allocator< openstudio::model::ScheduleWeek > >":
    return _openstudiomodelcore.getScheduleWeeksByName(t_model, t_name, t_exactMatch)
getScheduleWeeksByName = _openstudiomodelcore.getScheduleWeeksByName
class ScheduleYear(Schedule):
    __swig_setmethods__ = {}
    for _s in [Schedule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleYear, name, value)
    __swig_getmethods__ = {}
    for _s in [Schedule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleYear, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelcore.new_ScheduleYear(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleYear
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ScheduleYear_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ScheduleYear_iddObjectType)

    def dates(self) -> "std::vector< openstudio::Date,std::allocator< openstudio::Date > >":
        return _openstudiomodelcore.ScheduleYear_dates(self)

    def scheduleWeeks(self) -> "std::vector< openstudio::model::ScheduleWeek,std::allocator< openstudio::model::ScheduleWeek > >":
        return _openstudiomodelcore.ScheduleYear_scheduleWeeks(self)

    def addScheduleWeek(self, untilDate: 'Date', scheduleWeek: 'ScheduleWeek') -> "bool":
        return _openstudiomodelcore.ScheduleYear_addScheduleWeek(self, untilDate, scheduleWeek)

    def clearScheduleWeeks(self) -> "void":
        return _openstudiomodelcore.ScheduleYear_clearScheduleWeeks(self)

    def getScheduleWeek(self, date: 'Date') -> "boost::optional< openstudio::model::ScheduleWeek >":
        return _openstudiomodelcore.ScheduleYear_getScheduleWeek(self, date)
ScheduleYear_swigregister = _openstudiomodelcore.ScheduleYear_swigregister
ScheduleYear_swigregister(ScheduleYear)

def ScheduleYear_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleYear_iddObjectType()
ScheduleYear_iddObjectType = _openstudiomodelcore.ScheduleYear_iddObjectType


def toScheduleYear(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleYear >":
    return _openstudiomodelcore.toScheduleYear(idfObject)
toScheduleYear = _openstudiomodelcore.toScheduleYear

def getScheduleYear(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleYear >":
    return _openstudiomodelcore.getScheduleYear(t_model, t_handle)
getScheduleYear = _openstudiomodelcore.getScheduleYear

def getScheduleYears(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleYear,std::allocator< openstudio::model::ScheduleYear > >":
    return _openstudiomodelcore.getScheduleYears(t_model)
getScheduleYears = _openstudiomodelcore.getScheduleYears

def getScheduleYearByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleYear >":
    return _openstudiomodelcore.getScheduleYearByName(t_model, t_name)
getScheduleYearByName = _openstudiomodelcore.getScheduleYearByName

def getScheduleYearsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleYear,std::allocator< openstudio::model::ScheduleYear > >":
    return _openstudiomodelcore.getScheduleYearsByName(t_model, t_name, t_exactMatch)
getScheduleYearsByName = _openstudiomodelcore.getScheduleYearsByName
class ScheduleRule(ParentObject):
    __swig_setmethods__ = {}
    for _s in [ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleRule, name, value)
    __swig_getmethods__ = {}
    for _s in [ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleRule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleRule(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRule
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ScheduleRule_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ScheduleRule_iddObjectType)
    __swig_getmethods__["validDateSpecificationTypeValues"] = lambda x: _openstudiomodelcore.ScheduleRule_validDateSpecificationTypeValues
    if _newclass:
        validDateSpecificationTypeValues = staticmethod(_openstudiomodelcore.ScheduleRule_validDateSpecificationTypeValues)

    def scheduleRuleset(self) -> "openstudio::model::ScheduleRuleset":
        return _openstudiomodelcore.ScheduleRule_scheduleRuleset(self)

    def ruleIndex(self) -> "int":
        return _openstudiomodelcore.ScheduleRule_ruleIndex(self)

    def daySchedule(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.ScheduleRule_daySchedule(self)

    def applySunday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applySunday(self)

    def applyMonday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyMonday(self)

    def applyTuesday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyTuesday(self)

    def applyWednesday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyWednesday(self)

    def applyThursday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyThursday(self)

    def applyFriday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applyFriday(self)

    def applySaturday(self) -> "bool":
        return _openstudiomodelcore.ScheduleRule_applySaturday(self)

    def dateSpecificationType(self) -> "std::string":
        return _openstudiomodelcore.ScheduleRule_dateSpecificationType(self)

    def startDate(self) -> "boost::optional< openstudio::Date >":
        return _openstudiomodelcore.ScheduleRule_startDate(self)

    def endDate(self) -> "boost::optional< openstudio::Date >":
        return _openstudiomodelcore.ScheduleRule_endDate(self)

    def specificDates(self) -> "std::vector< openstudio::Date,std::allocator< openstudio::Date > >":
        return _openstudiomodelcore.ScheduleRule_specificDates(self)

    def setApplySunday(self, applySunday: 'bool') -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplySunday(self, applySunday)

    def setApplySundayNoFail(self, applySunday: 'bool') -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplySundayNoFail(self, applySunday)

    def setApplyMonday(self, applyMonday: 'bool') -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyMonday(self, applyMonday)

    def setApplyMondayNoFail(self, applyMonday: 'bool') -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyMondayNoFail(self, applyMonday)

    def setApplyTuesday(self, applyTuesday: 'bool') -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyTuesday(self, applyTuesday)

    def setApplyTuesdayNoFail(self, applyTuesday: 'bool') -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyTuesdayNoFail(self, applyTuesday)

    def setApplyWednesday(self, applyWednesday: 'bool') -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyWednesday(self, applyWednesday)

    def setApplyWednesdayNoFail(self, applyWednesday: 'bool') -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyWednesdayNoFail(self, applyWednesday)

    def setApplyThursday(self, applyThursday: 'bool') -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyThursday(self, applyThursday)

    def setApplyThursdayNoFail(self, applyThursday: 'bool') -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyThursdayNoFail(self, applyThursday)

    def setApplyFriday(self, applyFriday: 'bool') -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplyFriday(self, applyFriday)

    def setApplyFridayNoFail(self, applyFriday: 'bool') -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplyFridayNoFail(self, applyFriday)

    def setApplySaturday(self, applySaturday: 'bool') -> "bool":
        return _openstudiomodelcore.ScheduleRule_setApplySaturday(self, applySaturday)

    def setApplySaturdayNoFail(self, applySaturday: 'bool') -> "void":
        return _openstudiomodelcore.ScheduleRule_setApplySaturdayNoFail(self, applySaturday)

    def setStartDate(self, date: 'Date') -> "bool":
        return _openstudiomodelcore.ScheduleRule_setStartDate(self, date)

    def setEndDate(self, date: 'Date') -> "bool":
        return _openstudiomodelcore.ScheduleRule_setEndDate(self, date)

    def addSpecificDate(self, date: 'Date') -> "bool":
        return _openstudiomodelcore.ScheduleRule_addSpecificDate(self, date)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelcore.ScheduleRule_ensureNoLeapDays(self)

    def containsDate(self, date: 'Date') -> "bool":
        return _openstudiomodelcore.ScheduleRule_containsDate(self, date)

    def containsDates(self, dates: 'DateVector') -> "std::vector< bool,std::allocator< bool > >":
        return _openstudiomodelcore.ScheduleRule_containsDates(self, dates)
ScheduleRule_swigregister = _openstudiomodelcore.ScheduleRule_swigregister
ScheduleRule_swigregister(ScheduleRule)

def ScheduleRule_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleRule_iddObjectType()
ScheduleRule_iddObjectType = _openstudiomodelcore.ScheduleRule_iddObjectType

def ScheduleRule_validDateSpecificationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.ScheduleRule_validDateSpecificationTypeValues()
ScheduleRule_validDateSpecificationTypeValues = _openstudiomodelcore.ScheduleRule_validDateSpecificationTypeValues


def toScheduleRule(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleRule >":
    return _openstudiomodelcore.toScheduleRule(idfObject)
toScheduleRule = _openstudiomodelcore.toScheduleRule

def getScheduleRule(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleRule >":
    return _openstudiomodelcore.getScheduleRule(t_model, t_handle)
getScheduleRule = _openstudiomodelcore.getScheduleRule

def getScheduleRules(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleRule,std::allocator< openstudio::model::ScheduleRule > >":
    return _openstudiomodelcore.getScheduleRules(t_model)
getScheduleRules = _openstudiomodelcore.getScheduleRules

def getScheduleRuleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleRule >":
    return _openstudiomodelcore.getScheduleRuleByName(t_model, t_name)
getScheduleRuleByName = _openstudiomodelcore.getScheduleRuleByName

def getScheduleRulesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleRule,std::allocator< openstudio::model::ScheduleRule > >":
    return _openstudiomodelcore.getScheduleRulesByName(t_model, t_name, t_exactMatch)
getScheduleRulesByName = _openstudiomodelcore.getScheduleRulesByName
class ScheduleRuleset(Schedule):
    __swig_setmethods__ = {}
    for _s in [Schedule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleRuleset, name, value)
    __swig_getmethods__ = {}
    for _s in [Schedule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleRuleset, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ScheduleRuleset(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRuleset
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ScheduleRuleset_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ScheduleRuleset_iddObjectType)

    def defaultDaySchedule(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.ScheduleRuleset_defaultDaySchedule(self)

    def summerDesignDaySchedule(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.ScheduleRuleset_summerDesignDaySchedule(self)

    def isSummerDesignDayScheduleDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_isSummerDesignDayScheduleDefaulted(self)

    def winterDesignDaySchedule(self) -> "openstudio::model::ScheduleDay":
        return _openstudiomodelcore.ScheduleRuleset_winterDesignDaySchedule(self)

    def isWinterDesignDayScheduleDefaulted(self) -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_isWinterDesignDayScheduleDefaulted(self)

    def setSummerDesignDaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_setSummerDesignDaySchedule(self, schedule)

    def resetSummerDesignDaySchedule(self) -> "void":
        return _openstudiomodelcore.ScheduleRuleset_resetSummerDesignDaySchedule(self)

    def setWinterDesignDaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_setWinterDesignDaySchedule(self, schedule)

    def resetWinterDesignDaySchedule(self) -> "void":
        return _openstudiomodelcore.ScheduleRuleset_resetWinterDesignDaySchedule(self)

    def scheduleRules(self) -> "std::vector< openstudio::model::ScheduleRule,std::allocator< openstudio::model::ScheduleRule > >":
        return _openstudiomodelcore.ScheduleRuleset_scheduleRules(self)

    def setScheduleRuleIndex(self, scheduleRule: 'ScheduleRule', index: 'unsigned int') -> "bool":
        return _openstudiomodelcore.ScheduleRuleset_setScheduleRuleIndex(self, scheduleRule, index)

    def getActiveRuleIndices(self, startDate: 'Date', endDate: 'Date') -> "std::vector< int,std::allocator< int > >":
        return _openstudiomodelcore.ScheduleRuleset_getActiveRuleIndices(self, startDate, endDate)

    def getDaySchedules(self, startDate: 'Date', endDate: 'Date') -> "std::vector< openstudio::model::ScheduleDay,std::allocator< openstudio::model::ScheduleDay > >":
        return _openstudiomodelcore.ScheduleRuleset_getDaySchedules(self, startDate, endDate)
ScheduleRuleset_swigregister = _openstudiomodelcore.ScheduleRuleset_swigregister
ScheduleRuleset_swigregister(ScheduleRuleset)

def ScheduleRuleset_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ScheduleRuleset_iddObjectType()
ScheduleRuleset_iddObjectType = _openstudiomodelcore.ScheduleRuleset_iddObjectType


def toScheduleRuleset(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleRuleset >":
    return _openstudiomodelcore.toScheduleRuleset(idfObject)
toScheduleRuleset = _openstudiomodelcore.toScheduleRuleset

def getScheduleRuleset(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleRuleset >":
    return _openstudiomodelcore.getScheduleRuleset(t_model, t_handle)
getScheduleRuleset = _openstudiomodelcore.getScheduleRuleset

def getScheduleRulesets(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleRuleset,std::allocator< openstudio::model::ScheduleRuleset > >":
    return _openstudiomodelcore.getScheduleRulesets(t_model)
getScheduleRulesets = _openstudiomodelcore.getScheduleRulesets

def getScheduleRulesetByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleRuleset >":
    return _openstudiomodelcore.getScheduleRulesetByName(t_model, t_name)
getScheduleRulesetByName = _openstudiomodelcore.getScheduleRulesetByName

def getScheduleRulesetsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleRuleset,std::allocator< openstudio::model::ScheduleRuleset > >":
    return _openstudiomodelcore.getScheduleRulesetsByName(t_model, t_name, t_exactMatch)
getScheduleRulesetsByName = _openstudiomodelcore.getScheduleRulesetsByName
class OutputVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputVariable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_OutputVariable
    __del__ = lambda self: None

    def __init__(self, variableName: 'std::string const &', model: 'Model'):
        this = _openstudiomodelcore.new_OutputVariable(variableName, model)
        try:
            self.this.append(this)
        except:
            self.this = this

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.OutputVariable_remove(self)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.OutputVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.OutputVariable_iddObjectType)
    __swig_getmethods__["reportingFrequencyValues"] = lambda x: _openstudiomodelcore.OutputVariable_reportingFrequencyValues
    if _newclass:
        reportingFrequencyValues = staticmethod(_openstudiomodelcore.OutputVariable_reportingFrequencyValues)

    def keyValue(self) -> "std::string":
        return _openstudiomodelcore.OutputVariable_keyValue(self)

    def isKeyValueDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputVariable_isKeyValueDefaulted(self)

    def variableName(self) -> "std::string":
        return _openstudiomodelcore.OutputVariable_variableName(self)

    def reportingFrequency(self) -> "std::string":
        return _openstudiomodelcore.OutputVariable_reportingFrequency(self)

    def isReportingFrequencyDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputVariable_isReportingFrequencyDefaulted(self)

    def schedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelcore.OutputVariable_schedule(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.OutputVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputVariable_isExportToBCVTBDefaulted(self)

    def setKeyValue(self, keyValue: 'std::string const &') -> "bool":
        return _openstudiomodelcore.OutputVariable_setKeyValue(self, keyValue)

    def resetKeyValue(self) -> "void":
        return _openstudiomodelcore.OutputVariable_resetKeyValue(self)

    def setVariableName(self, variableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.OutputVariable_setVariableName(self, variableName)

    def setReportingFrequency(self, reportingFrequency: 'std::string const &') -> "bool":
        return _openstudiomodelcore.OutputVariable_setReportingFrequency(self, reportingFrequency)

    def resetReportingFrequency(self) -> "void":
        return _openstudiomodelcore.OutputVariable_resetReportingFrequency(self)

    def setSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelcore.OutputVariable_setSchedule(self, schedule)

    def resetSchedule(self) -> "void":
        return _openstudiomodelcore.OutputVariable_resetSchedule(self)

    def setExportToBCVTB(self, exportToBCVTB: 'bool') -> "bool":
        return _openstudiomodelcore.OutputVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.OutputVariable_resetExportToBCVTB(self)
OutputVariable_swigregister = _openstudiomodelcore.OutputVariable_swigregister
OutputVariable_swigregister(OutputVariable)

def OutputVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.OutputVariable_iddObjectType()
OutputVariable_iddObjectType = _openstudiomodelcore.OutputVariable_iddObjectType

def OutputVariable_reportingFrequencyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.OutputVariable_reportingFrequencyValues()
OutputVariable_reportingFrequencyValues = _openstudiomodelcore.OutputVariable_reportingFrequencyValues


def toOutputVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::OutputVariable >":
    return _openstudiomodelcore.toOutputVariable(idfObject)
toOutputVariable = _openstudiomodelcore.toOutputVariable

def getOutputVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::OutputVariable >":
    return _openstudiomodelcore.getOutputVariable(t_model, t_handle)
getOutputVariable = _openstudiomodelcore.getOutputVariable

def getOutputVariables(t_model: 'Model') -> "std::vector< openstudio::model::OutputVariable,std::allocator< openstudio::model::OutputVariable > >":
    return _openstudiomodelcore.getOutputVariables(t_model)
getOutputVariables = _openstudiomodelcore.getOutputVariables

def getOutputVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::OutputVariable >":
    return _openstudiomodelcore.getOutputVariableByName(t_model, t_name)
getOutputVariableByName = _openstudiomodelcore.getOutputVariableByName

def getOutputVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::OutputVariable,std::allocator< openstudio::model::OutputVariable > >":
    return _openstudiomodelcore.getOutputVariablesByName(t_model, t_name, t_exactMatch)
getOutputVariablesByName = _openstudiomodelcore.getOutputVariablesByName
class AdditionalProperties(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdditionalProperties, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdditionalProperties, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_AdditionalProperties
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.AdditionalProperties_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.AdditionalProperties_iddObjectType)

    def modelObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.AdditionalProperties_modelObject(self)

    def featureNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.AdditionalProperties_featureNames(self)

    def hasFeature(self, name: 'std::string const &') -> "bool":
        return _openstudiomodelcore.AdditionalProperties_hasFeature(self, name)

    def getFeatureDataType(self, name: 'std::string const &') -> "boost::optional< std::string >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureDataType(self, name)

    def getFeatureAsString(self, name: 'std::string const &') -> "boost::optional< std::string >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsString(self, name)

    def getFeatureAsDouble(self, name: 'std::string const &') -> "boost::optional< double >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsDouble(self, name)

    def getFeatureAsInteger(self, name: 'std::string const &') -> "boost::optional< int >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsInteger(self, name)

    def getFeatureAsBoolean(self, name: 'std::string const &') -> "boost::optional< bool >":
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsBoolean(self, name)

    def suggestedFeatureNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.AdditionalProperties_suggestedFeatureNames(self)

    def setFeature(self, *args) -> "bool":
        return _openstudiomodelcore.AdditionalProperties_setFeature(self, *args)

    def resetFeature(self, name: 'std::string const &') -> "bool":
        return _openstudiomodelcore.AdditionalProperties_resetFeature(self, name)

    def merge(self, other: 'AdditionalProperties', overwrite: 'bool'=False) -> "void":
        return _openstudiomodelcore.AdditionalProperties_merge(self, other, overwrite)
AdditionalProperties_swigregister = _openstudiomodelcore.AdditionalProperties_swigregister
AdditionalProperties_swigregister(AdditionalProperties)

def AdditionalProperties_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.AdditionalProperties_iddObjectType()
AdditionalProperties_iddObjectType = _openstudiomodelcore.AdditionalProperties_iddObjectType


def toAdditionalProperties(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AdditionalProperties >":
    return _openstudiomodelcore.toAdditionalProperties(idfObject)
toAdditionalProperties = _openstudiomodelcore.toAdditionalProperties

def getAdditionalProperties(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AdditionalProperties >":
    return _openstudiomodelcore.getAdditionalProperties(t_model, t_handle)
getAdditionalProperties = _openstudiomodelcore.getAdditionalProperties

def getAdditionalPropertiess(t_model: 'Model') -> "std::vector< openstudio::model::AdditionalProperties,std::allocator< openstudio::model::AdditionalProperties > >":
    return _openstudiomodelcore.getAdditionalPropertiess(t_model)
getAdditionalPropertiess = _openstudiomodelcore.getAdditionalPropertiess

def getAdditionalPropertiesByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AdditionalProperties >":
    return _openstudiomodelcore.getAdditionalPropertiesByName(t_model, t_name)
getAdditionalPropertiesByName = _openstudiomodelcore.getAdditionalPropertiesByName

def getAdditionalPropertiessByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AdditionalProperties,std::allocator< openstudio::model::AdditionalProperties > >":
    return _openstudiomodelcore.getAdditionalPropertiessByName(t_model, t_name, t_exactMatch)
getAdditionalPropertiessByName = _openstudiomodelcore.getAdditionalPropertiessByName
class GenericModelObject(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericModelObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericModelObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_GenericModelObject
    __del__ = lambda self: None
GenericModelObject_swigregister = _openstudiomodelcore.GenericModelObject_swigregister
GenericModelObject_swigregister(GenericModelObject)


def toGenericModelObject(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GenericModelObject >":
    return _openstudiomodelcore.toGenericModelObject(idfObject)
toGenericModelObject = _openstudiomodelcore.toGenericModelObject

def getGenericModelObject(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GenericModelObject >":
    return _openstudiomodelcore.getGenericModelObject(t_model, t_handle)
getGenericModelObject = _openstudiomodelcore.getGenericModelObject

def getGenericModelObjects(t_model: 'Model') -> "std::vector< openstudio::model::GenericModelObject,std::allocator< openstudio::model::GenericModelObject > >":
    return _openstudiomodelcore.getGenericModelObjects(t_model)
getGenericModelObjects = _openstudiomodelcore.getGenericModelObjects

def getGenericModelObjectByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GenericModelObject >":
    return _openstudiomodelcore.getGenericModelObjectByName(t_model, t_name)
getGenericModelObjectByName = _openstudiomodelcore.getGenericModelObjectByName

def getGenericModelObjectsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GenericModelObject,std::allocator< openstudio::model::GenericModelObject > >":
    return _openstudiomodelcore.getGenericModelObjectsByName(t_model, t_name, t_exactMatch)
getGenericModelObjectsByName = _openstudiomodelcore.getGenericModelObjectsByName
class ModelObjectList(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelObjectList, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelObjectList, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelcore.new_ModelObjectList(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectList
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ModelObjectList_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ModelObjectList_iddObjectType)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelcore.ModelObjectList_remove(self)

    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ModelObjectList_clone(self, model)

    def size(self) -> "unsigned int":
        return _openstudiomodelcore.ModelObjectList_size(self)

    def addModelObject(self, modelObject: 'ModelObject') -> "bool":
        return _openstudiomodelcore.ModelObjectList_addModelObject(self, modelObject)

    def hasModelObject(self, modelObject: 'ModelObject') -> "bool":
        return _openstudiomodelcore.ModelObjectList_hasModelObject(self, modelObject)

    def removeModelObject(self, modelObject: 'ModelObject') -> "void":
        return _openstudiomodelcore.ModelObjectList_removeModelObject(self, modelObject)

    def removeAllModelObjects(self) -> "void":
        return _openstudiomodelcore.ModelObjectList_removeAllModelObjects(self)

    def modelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.ModelObjectList_modelObjects(self)
ModelObjectList_swigregister = _openstudiomodelcore.ModelObjectList_swigregister
ModelObjectList_swigregister(ModelObjectList)

def ModelObjectList_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ModelObjectList_iddObjectType()
ModelObjectList_iddObjectType = _openstudiomodelcore.ModelObjectList_iddObjectType


def toModelObjectList(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ModelObjectList >":
    return _openstudiomodelcore.toModelObjectList(idfObject)
toModelObjectList = _openstudiomodelcore.toModelObjectList

def getModelObjectList(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ModelObjectList >":
    return _openstudiomodelcore.getModelObjectList(t_model, t_handle)
getModelObjectList = _openstudiomodelcore.getModelObjectList

def getModelObjectLists(t_model: 'Model') -> "std::vector< openstudio::model::ModelObjectList,std::allocator< openstudio::model::ModelObjectList > >":
    return _openstudiomodelcore.getModelObjectLists(t_model)
getModelObjectLists = _openstudiomodelcore.getModelObjectLists

def getModelObjectListByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ModelObjectList >":
    return _openstudiomodelcore.getModelObjectListByName(t_model, t_name)
getModelObjectListByName = _openstudiomodelcore.getModelObjectListByName

def getModelObjectListsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ModelObjectList,std::allocator< openstudio::model::ModelObjectList > >":
    return _openstudiomodelcore.getModelObjectListsByName(t_model, t_name, t_exactMatch)
getModelObjectListsByName = _openstudiomodelcore.getModelObjectListsByName
class EnergyManagementSystemSensor(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemSensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemSensor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSensor
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemSensor_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemSensor_iddObjectType)

    def keyName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemSensor_keyName(self)

    def outputVariable(self) -> "boost::optional< openstudio::model::OutputVariable >":
        return _openstudiomodelcore.EnergyManagementSystemSensor_outputVariable(self)

    def outputMeter(self) -> "boost::optional< openstudio::model::OutputMeter >":
        return _openstudiomodelcore.EnergyManagementSystemSensor_outputMeter(self)

    def outputVariableOrMeterName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemSensor_outputVariableOrMeterName(self)

    def setKeyName(self, keyName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensor_setKeyName(self, keyName)

    def setOutputVariable(self, outputVariable: 'OutputVariable') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensor_setOutputVariable(self, outputVariable)

    def setOutputMeter(self, outputMeter: 'OutputMeter') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensor_setOutputMeter(self, outputMeter)

    def setOutputVariableOrMeterName(self, outputVariableOrMeterName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSensor_setOutputVariableOrMeterName(self, outputVariableOrMeterName)
EnergyManagementSystemSensor_swigregister = _openstudiomodelcore.EnergyManagementSystemSensor_swigregister
EnergyManagementSystemSensor_swigregister(EnergyManagementSystemSensor)

def EnergyManagementSystemSensor_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemSensor_iddObjectType()
EnergyManagementSystemSensor_iddObjectType = _openstudiomodelcore.EnergyManagementSystemSensor_iddObjectType


def toEnergyManagementSystemSensor(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
    return _openstudiomodelcore.toEnergyManagementSystemSensor(idfObject)
toEnergyManagementSystemSensor = _openstudiomodelcore.toEnergyManagementSystemSensor

def getEnergyManagementSystemSensor(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
    return _openstudiomodelcore.getEnergyManagementSystemSensor(t_model, t_handle)
getEnergyManagementSystemSensor = _openstudiomodelcore.getEnergyManagementSystemSensor

def getEnergyManagementSystemSensors(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemSensor,std::allocator< openstudio::model::EnergyManagementSystemSensor > >":
    return _openstudiomodelcore.getEnergyManagementSystemSensors(t_model)
getEnergyManagementSystemSensors = _openstudiomodelcore.getEnergyManagementSystemSensors

def getEnergyManagementSystemSensorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
    return _openstudiomodelcore.getEnergyManagementSystemSensorByName(t_model, t_name)
getEnergyManagementSystemSensorByName = _openstudiomodelcore.getEnergyManagementSystemSensorByName

def getEnergyManagementSystemSensorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemSensor,std::allocator< openstudio::model::EnergyManagementSystemSensor > >":
    return _openstudiomodelcore.getEnergyManagementSystemSensorsByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemSensorsByName = _openstudiomodelcore.getEnergyManagementSystemSensorsByName
class EnergyManagementSystemActuator(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemActuator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemActuator
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemActuator_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemActuator_iddObjectType)

    def actuatedComponent(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemActuator_actuatedComponent(self)

    def actuatedComponentControlType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemActuator_actuatedComponentControlType(self)

    def actuatedComponentType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemActuator_actuatedComponentType(self)

    def zoneName(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemActuator_zoneName(self)

    def setActuatedComponent(self, modelObject: 'ModelObject') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setActuatedComponent(self, modelObject)

    def setActuatedComponentControlType(self, actuatedComponentControlType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setActuatedComponentType(self, actuatedComponentType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setActuatedComponentType(self, actuatedComponentType)

    def setThermalZone(self, thermalZone: 'openstudio::model::ThermalZone const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setThermalZone(self, thermalZone)

    def setSpace(self, space: 'openstudio::model::Space const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemActuator_setSpace(self, space)

    def resetZoneName(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemActuator_resetZoneName(self)
EnergyManagementSystemActuator_swigregister = _openstudiomodelcore.EnergyManagementSystemActuator_swigregister
EnergyManagementSystemActuator_swigregister(EnergyManagementSystemActuator)

def EnergyManagementSystemActuator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemActuator_iddObjectType()
EnergyManagementSystemActuator_iddObjectType = _openstudiomodelcore.EnergyManagementSystemActuator_iddObjectType


def toEnergyManagementSystemActuator(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
    return _openstudiomodelcore.toEnergyManagementSystemActuator(idfObject)
toEnergyManagementSystemActuator = _openstudiomodelcore.toEnergyManagementSystemActuator

def getEnergyManagementSystemActuator(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
    return _openstudiomodelcore.getEnergyManagementSystemActuator(t_model, t_handle)
getEnergyManagementSystemActuator = _openstudiomodelcore.getEnergyManagementSystemActuator

def getEnergyManagementSystemActuators(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemActuator,std::allocator< openstudio::model::EnergyManagementSystemActuator > >":
    return _openstudiomodelcore.getEnergyManagementSystemActuators(t_model)
getEnergyManagementSystemActuators = _openstudiomodelcore.getEnergyManagementSystemActuators

def getEnergyManagementSystemActuatorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
    return _openstudiomodelcore.getEnergyManagementSystemActuatorByName(t_model, t_name)
getEnergyManagementSystemActuatorByName = _openstudiomodelcore.getEnergyManagementSystemActuatorByName

def getEnergyManagementSystemActuatorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemActuator,std::allocator< openstudio::model::EnergyManagementSystemActuator > >":
    return _openstudiomodelcore.getEnergyManagementSystemActuatorsByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemActuatorsByName = _openstudiomodelcore.getEnergyManagementSystemActuatorsByName
class EnergyManagementSystemConstructionIndexVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemConstructionIndexVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemConstructionIndexVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemConstructionIndexVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemConstructionIndexVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_iddObjectType)

    def constructionObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_constructionObject(self)

    def setConstructionObject(self, construction: 'ModelObject') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_setConstructionObject(self, construction)
EnergyManagementSystemConstructionIndexVariable_swigregister = _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_swigregister
EnergyManagementSystemConstructionIndexVariable_swigregister(EnergyManagementSystemConstructionIndexVariable)

def EnergyManagementSystemConstructionIndexVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_iddObjectType()
EnergyManagementSystemConstructionIndexVariable_iddObjectType = _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_iddObjectType


def toEnergyManagementSystemConstructionIndexVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemConstructionIndexVariable(idfObject)
toEnergyManagementSystemConstructionIndexVariable = _openstudiomodelcore.toEnergyManagementSystemConstructionIndexVariable

def getEnergyManagementSystemConstructionIndexVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariable(t_model, t_handle)
getEnergyManagementSystemConstructionIndexVariable = _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariable

def getEnergyManagementSystemConstructionIndexVariables(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemConstructionIndexVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariables(t_model)
getEnergyManagementSystemConstructionIndexVariables = _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariables

def getEnergyManagementSystemConstructionIndexVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariableByName(t_model, t_name)
getEnergyManagementSystemConstructionIndexVariableByName = _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariableByName

def getEnergyManagementSystemConstructionIndexVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemConstructionIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemConstructionIndexVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariablesByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemConstructionIndexVariablesByName = _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariablesByName
class EnergyManagementSystemCurveOrTableIndexVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemCurveOrTableIndexVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemCurveOrTableIndexVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemCurveOrTableIndexVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemCurveOrTableIndexVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType)

    def curveOrTableObject(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_curveOrTableObject(self)

    def setCurveOrTableObject(self, allCurves: 'openstudio::model::Curve const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_setCurveOrTableObject(self, allCurves)
EnergyManagementSystemCurveOrTableIndexVariable_swigregister = _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_swigregister
EnergyManagementSystemCurveOrTableIndexVariable_swigregister(EnergyManagementSystemCurveOrTableIndexVariable)

def EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType()
EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType = _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType


def toEnergyManagementSystemCurveOrTableIndexVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemCurveOrTableIndexVariable(idfObject)
toEnergyManagementSystemCurveOrTableIndexVariable = _openstudiomodelcore.toEnergyManagementSystemCurveOrTableIndexVariable

def getEnergyManagementSystemCurveOrTableIndexVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariable(t_model, t_handle)
getEnergyManagementSystemCurveOrTableIndexVariable = _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariable

def getEnergyManagementSystemCurveOrTableIndexVariables(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariables(t_model)
getEnergyManagementSystemCurveOrTableIndexVariables = _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariables

def getEnergyManagementSystemCurveOrTableIndexVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariableByName(t_model, t_name)
getEnergyManagementSystemCurveOrTableIndexVariableByName = _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariableByName

def getEnergyManagementSystemCurveOrTableIndexVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable,std::allocator< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariablesByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemCurveOrTableIndexVariablesByName = _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariablesByName
class EnergyManagementSystemGlobalVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemGlobalVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemGlobalVariable, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', variableName: 'std::string const &'):
        this = _openstudiomodelcore.new_EnergyManagementSystemGlobalVariable(model, variableName)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemGlobalVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemGlobalVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemGlobalVariable_iddObjectType)
EnergyManagementSystemGlobalVariable_swigregister = _openstudiomodelcore.EnergyManagementSystemGlobalVariable_swigregister
EnergyManagementSystemGlobalVariable_swigregister(EnergyManagementSystemGlobalVariable)

def EnergyManagementSystemGlobalVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_iddObjectType()
EnergyManagementSystemGlobalVariable_iddObjectType = _openstudiomodelcore.EnergyManagementSystemGlobalVariable_iddObjectType


def toEnergyManagementSystemGlobalVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemGlobalVariable(idfObject)
toEnergyManagementSystemGlobalVariable = _openstudiomodelcore.toEnergyManagementSystemGlobalVariable

def getEnergyManagementSystemGlobalVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariable(t_model, t_handle)
getEnergyManagementSystemGlobalVariable = _openstudiomodelcore.getEnergyManagementSystemGlobalVariable

def getEnergyManagementSystemGlobalVariables(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable,std::allocator< openstudio::model::EnergyManagementSystemGlobalVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariables(t_model)
getEnergyManagementSystemGlobalVariables = _openstudiomodelcore.getEnergyManagementSystemGlobalVariables

def getEnergyManagementSystemGlobalVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariableByName(t_model, t_name)
getEnergyManagementSystemGlobalVariableByName = _openstudiomodelcore.getEnergyManagementSystemGlobalVariableByName

def getEnergyManagementSystemGlobalVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemGlobalVariable,std::allocator< openstudio::model::EnergyManagementSystemGlobalVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariablesByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemGlobalVariablesByName = _openstudiomodelcore.getEnergyManagementSystemGlobalVariablesByName
class EnergyManagementSystemInternalVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemInternalVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemInternalVariable, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', internalDataType: 'std::string const'):
        this = _openstudiomodelcore.new_EnergyManagementSystemInternalVariable(model, internalDataType)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemInternalVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemInternalVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemInternalVariable_iddObjectType)

    def internalDataIndexKeyName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_internalDataIndexKeyName(self)

    def internalDataType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_internalDataType(self)

    def setInternalDataIndexKeyName(self, internalDataIndexKeyName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_setInternalDataIndexKeyName(self, internalDataIndexKeyName)

    def resetInternalDataIndexKeyName(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_resetInternalDataIndexKeyName(self)

    def setInternalDataType(self, internalDataType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_setInternalDataType(self, internalDataType)
EnergyManagementSystemInternalVariable_swigregister = _openstudiomodelcore.EnergyManagementSystemInternalVariable_swigregister
EnergyManagementSystemInternalVariable_swigregister(EnergyManagementSystemInternalVariable)

def EnergyManagementSystemInternalVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemInternalVariable_iddObjectType()
EnergyManagementSystemInternalVariable_iddObjectType = _openstudiomodelcore.EnergyManagementSystemInternalVariable_iddObjectType


def toEnergyManagementSystemInternalVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemInternalVariable(idfObject)
toEnergyManagementSystemInternalVariable = _openstudiomodelcore.toEnergyManagementSystemInternalVariable

def getEnergyManagementSystemInternalVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariable(t_model, t_handle)
getEnergyManagementSystemInternalVariable = _openstudiomodelcore.getEnergyManagementSystemInternalVariable

def getEnergyManagementSystemInternalVariables(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable,std::allocator< openstudio::model::EnergyManagementSystemInternalVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariables(t_model)
getEnergyManagementSystemInternalVariables = _openstudiomodelcore.getEnergyManagementSystemInternalVariables

def getEnergyManagementSystemInternalVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariableByName(t_model, t_name)
getEnergyManagementSystemInternalVariableByName = _openstudiomodelcore.getEnergyManagementSystemInternalVariableByName

def getEnergyManagementSystemInternalVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemInternalVariable,std::allocator< openstudio::model::EnergyManagementSystemInternalVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariablesByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemInternalVariablesByName = _openstudiomodelcore.getEnergyManagementSystemInternalVariablesByName
class EnergyManagementSystemMeteredOutputVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemMeteredOutputVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemMeteredOutputVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemMeteredOutputVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemMeteredOutputVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_iddObjectType)
    __swig_getmethods__["updateFrequencyValues"] = lambda x: _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues
    if _newclass:
        updateFrequencyValues = staticmethod(_openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues)
    __swig_getmethods__["resourceTypeValues"] = lambda x: _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceTypeValues
    if _newclass:
        resourceTypeValues = staticmethod(_openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceTypeValues)
    __swig_getmethods__["groupTypeValues"] = lambda x: _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupTypeValues
    if _newclass:
        groupTypeValues = staticmethod(_openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupTypeValues)
    __swig_getmethods__["endUseCategoryValues"] = lambda x: _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues
    if _newclass:
        endUseCategoryValues = staticmethod(_openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues)

    def emsVariableName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsVariableName(self)

    def updateFrequency(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequency(self)

    def emsProgramOrSubroutineName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsProgramOrSubroutineName(self)

    def emsProgram(self) -> "boost::optional< EnergyManagementSystemProgram >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsProgram(self)

    def emsSubroutine(self) -> "boost::optional< EnergyManagementSystemSubroutine >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsSubroutine(self)

    def resourceType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceType(self)

    def groupType(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupType(self)

    def endUseCategory(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategory(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseSubcategory(self)

    def units(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_units(self)

    def emsVariableObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsVariableObject(self)

    def emsActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsActuator(self)

    def emsSensor(self) -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsSensor(self)

    def emsGlobalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsGlobalVariable(self)

    def emsTrendVariable(self) -> "boost::optional< EnergyManagementSystemTrendVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsTrendVariable(self)

    def emsInternalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsInternalVariable(self)

    def emsCurveOrTableIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsCurveOrTableIndexVariable(self)

    def emsConstructionIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsConstructionIndexVariable(self)

    def setUpdateFrequency(self, updateFrequency: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setUpdateFrequency(self, updateFrequency)

    def setEMSProgramOrSubroutineName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEMSProgramOrSubroutineName(self, *args)

    def resetEMSProgramOrSubroutineName(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resetEMSProgramOrSubroutineName(self)

    def setResourceType(self, resourceType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setResourceType(self, resourceType)

    def setGroupType(self, groupType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setGroupType(self, groupType)

    def setEndUseCategory(self, endUseCategory: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEndUseCategory(self, endUseCategory)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resetEndUseSubcategory(self)

    def setUnits(self, units: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setUnits(self, units)

    def resetUnits(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resetUnits(self)

    def setEMSVariableName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEMSVariableName(self, *args)
EnergyManagementSystemMeteredOutputVariable_swigregister = _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_swigregister
EnergyManagementSystemMeteredOutputVariable_swigregister(EnergyManagementSystemMeteredOutputVariable)

def EnergyManagementSystemMeteredOutputVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_iddObjectType()
EnergyManagementSystemMeteredOutputVariable_iddObjectType = _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_iddObjectType

def EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues()
EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues = _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues

def EnergyManagementSystemMeteredOutputVariable_resourceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceTypeValues()
EnergyManagementSystemMeteredOutputVariable_resourceTypeValues = _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceTypeValues

def EnergyManagementSystemMeteredOutputVariable_groupTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupTypeValues()
EnergyManagementSystemMeteredOutputVariable_groupTypeValues = _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupTypeValues

def EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues()
EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues = _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues


def toEnergyManagementSystemMeteredOutputVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemMeteredOutputVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemMeteredOutputVariable(idfObject)
toEnergyManagementSystemMeteredOutputVariable = _openstudiomodelcore.toEnergyManagementSystemMeteredOutputVariable

def getEnergyManagementSystemMeteredOutputVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemMeteredOutputVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariable(t_model, t_handle)
getEnergyManagementSystemMeteredOutputVariable = _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariable

def getEnergyManagementSystemMeteredOutputVariables(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemMeteredOutputVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariables(t_model)
getEnergyManagementSystemMeteredOutputVariables = _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariables

def getEnergyManagementSystemMeteredOutputVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemMeteredOutputVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariableByName(t_model, t_name)
getEnergyManagementSystemMeteredOutputVariableByName = _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariableByName

def getEnergyManagementSystemMeteredOutputVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemMeteredOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemMeteredOutputVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariablesByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemMeteredOutputVariablesByName = _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariablesByName
class EnergyManagementSystemTrendVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemTrendVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemTrendVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemTrendVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemTrendVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemTrendVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemTrendVariable_iddObjectType)

    def emsVariableName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsVariableName(self)

    def numberOfTimestepsToBeLogged(self) -> "int":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_numberOfTimestepsToBeLogged(self)

    def emsVariableObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsVariableObject(self)

    def emsActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsActuator(self)

    def emsSensor(self) -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsSensor(self)

    def emsGlobalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsGlobalVariable(self)

    def emsTrendVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsTrendVariable(self)

    def emsInternalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsInternalVariable(self)

    def emsCurveOrTableIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsCurveOrTableIndexVariable(self)

    def emsConstructionIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsConstructionIndexVariable(self)

    def setNumberOfTimestepsToBeLogged(self, numberofTimestepstobeLogged: 'int') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_setNumberOfTimestepsToBeLogged(self, numberofTimestepstobeLogged)

    def setEMSVariableName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_setEMSVariableName(self, *args)
EnergyManagementSystemTrendVariable_swigregister = _openstudiomodelcore.EnergyManagementSystemTrendVariable_swigregister
EnergyManagementSystemTrendVariable_swigregister(EnergyManagementSystemTrendVariable)

def EnergyManagementSystemTrendVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemTrendVariable_iddObjectType()
EnergyManagementSystemTrendVariable_iddObjectType = _openstudiomodelcore.EnergyManagementSystemTrendVariable_iddObjectType


def toEnergyManagementSystemTrendVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemTrendVariable(idfObject)
toEnergyManagementSystemTrendVariable = _openstudiomodelcore.toEnergyManagementSystemTrendVariable

def getEnergyManagementSystemTrendVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariable(t_model, t_handle)
getEnergyManagementSystemTrendVariable = _openstudiomodelcore.getEnergyManagementSystemTrendVariable

def getEnergyManagementSystemTrendVariables(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable,std::allocator< openstudio::model::EnergyManagementSystemTrendVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariables(t_model)
getEnergyManagementSystemTrendVariables = _openstudiomodelcore.getEnergyManagementSystemTrendVariables

def getEnergyManagementSystemTrendVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariableByName(t_model, t_name)
getEnergyManagementSystemTrendVariableByName = _openstudiomodelcore.getEnergyManagementSystemTrendVariableByName

def getEnergyManagementSystemTrendVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemTrendVariable,std::allocator< openstudio::model::EnergyManagementSystemTrendVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariablesByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemTrendVariablesByName = _openstudiomodelcore.getEnergyManagementSystemTrendVariablesByName
class EnergyManagementSystemSubroutine(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemSubroutine, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemSubroutine, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelcore.new_EnergyManagementSystemSubroutine(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSubroutine
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemSubroutine_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemSubroutine_iddObjectType)

    def body(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_body(self)

    def lines(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_lines(self)

    def referencedObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_referencedObjects(self)

    def invalidReferencedObjects(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_invalidReferencedObjects(self)

    def setBody(self, body: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_setBody(self, body)

    def resetBody(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_resetBody(self)

    def addLine(self, body: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_addLine(self, body)

    def setLines(self, body: 'StringVector') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_setLines(self, body)
EnergyManagementSystemSubroutine_swigregister = _openstudiomodelcore.EnergyManagementSystemSubroutine_swigregister
EnergyManagementSystemSubroutine_swigregister(EnergyManagementSystemSubroutine)

def EnergyManagementSystemSubroutine_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemSubroutine_iddObjectType()
EnergyManagementSystemSubroutine_iddObjectType = _openstudiomodelcore.EnergyManagementSystemSubroutine_iddObjectType


def toEnergyManagementSystemSubroutine(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemSubroutine >":
    return _openstudiomodelcore.toEnergyManagementSystemSubroutine(idfObject)
toEnergyManagementSystemSubroutine = _openstudiomodelcore.toEnergyManagementSystemSubroutine

def getEnergyManagementSystemSubroutine(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemSubroutine >":
    return _openstudiomodelcore.getEnergyManagementSystemSubroutine(t_model, t_handle)
getEnergyManagementSystemSubroutine = _openstudiomodelcore.getEnergyManagementSystemSubroutine

def getEnergyManagementSystemSubroutines(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine,std::allocator< openstudio::model::EnergyManagementSystemSubroutine > >":
    return _openstudiomodelcore.getEnergyManagementSystemSubroutines(t_model)
getEnergyManagementSystemSubroutines = _openstudiomodelcore.getEnergyManagementSystemSubroutines

def getEnergyManagementSystemSubroutineByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemSubroutine >":
    return _openstudiomodelcore.getEnergyManagementSystemSubroutineByName(t_model, t_name)
getEnergyManagementSystemSubroutineByName = _openstudiomodelcore.getEnergyManagementSystemSubroutineByName

def getEnergyManagementSystemSubroutinesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemSubroutine,std::allocator< openstudio::model::EnergyManagementSystemSubroutine > >":
    return _openstudiomodelcore.getEnergyManagementSystemSubroutinesByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemSubroutinesByName = _openstudiomodelcore.getEnergyManagementSystemSubroutinesByName
class EnergyManagementSystemProgram(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemProgram, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelcore.new_EnergyManagementSystemProgram(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgram
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemProgram_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemProgram_iddObjectType)

    def body(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemProgram_body(self)

    def lines(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemProgram_lines(self)

    def referencedObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":
        return _openstudiomodelcore.EnergyManagementSystemProgram_referencedObjects(self)

    def invalidReferencedObjects(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelcore.EnergyManagementSystemProgram_invalidReferencedObjects(self)

    def setBody(self, body: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgram_setBody(self, body)

    def resetBody(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgram_resetBody(self)

    def addLine(self, body: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgram_addLine(self, body)

    def setLines(self, body: 'StringVector') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgram_setLines(self, body)
EnergyManagementSystemProgram_swigregister = _openstudiomodelcore.EnergyManagementSystemProgram_swigregister
EnergyManagementSystemProgram_swigregister(EnergyManagementSystemProgram)

def EnergyManagementSystemProgram_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemProgram_iddObjectType()
EnergyManagementSystemProgram_iddObjectType = _openstudiomodelcore.EnergyManagementSystemProgram_iddObjectType


def toEnergyManagementSystemProgram(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
    return _openstudiomodelcore.toEnergyManagementSystemProgram(idfObject)
toEnergyManagementSystemProgram = _openstudiomodelcore.toEnergyManagementSystemProgram

def getEnergyManagementSystemProgram(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
    return _openstudiomodelcore.getEnergyManagementSystemProgram(t_model, t_handle)
getEnergyManagementSystemProgram = _openstudiomodelcore.getEnergyManagementSystemProgram

def getEnergyManagementSystemPrograms(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemProgram,std::allocator< openstudio::model::EnergyManagementSystemProgram > >":
    return _openstudiomodelcore.getEnergyManagementSystemPrograms(t_model)
getEnergyManagementSystemPrograms = _openstudiomodelcore.getEnergyManagementSystemPrograms

def getEnergyManagementSystemProgramByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramByName(t_model, t_name)
getEnergyManagementSystemProgramByName = _openstudiomodelcore.getEnergyManagementSystemProgramByName

def getEnergyManagementSystemProgramsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemProgram,std::allocator< openstudio::model::EnergyManagementSystemProgram > >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramsByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemProgramsByName = _openstudiomodelcore.getEnergyManagementSystemProgramsByName
class EnergyManagementSystemProgramCallingManager(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemProgramCallingManager, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemProgramCallingManager, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelcore.new_EnergyManagementSystemProgramCallingManager(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgramCallingManager
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemProgramCallingManager_iddObjectType)
    __swig_getmethods__["validCallingPointValues"] = lambda x: _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_validCallingPointValues
    if _newclass:
        validCallingPointValues = staticmethod(_openstudiomodelcore.EnergyManagementSystemProgramCallingManager_validCallingPointValues)

    def callingPoint(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_callingPoint(self)

    def programs(self) -> "std::vector< openstudio::model::EnergyManagementSystemProgram,std::allocator< openstudio::model::EnergyManagementSystemProgram > >":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_programs(self)

    def getProgram(self, index: 'unsigned int') -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_getProgram(self, index)

    def setCallingPoint(self, callingPoint: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_setCallingPoint(self, callingPoint)

    def eraseProgram(self, index: 'unsigned int') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_eraseProgram(self, index)

    def erasePrograms(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_erasePrograms(self)

    def addProgram(self, program: 'EnergyManagementSystemProgram') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_addProgram(self, program)

    def setProgram(self, program: 'EnergyManagementSystemProgram', index: 'unsigned int') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_setProgram(self, program, index)

    def setPrograms(self, programs: 'EnergyManagementSystemProgramVector') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_setPrograms(self, programs)
EnergyManagementSystemProgramCallingManager_swigregister = _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_swigregister
EnergyManagementSystemProgramCallingManager_swigregister(EnergyManagementSystemProgramCallingManager)

def EnergyManagementSystemProgramCallingManager_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_iddObjectType()
EnergyManagementSystemProgramCallingManager_iddObjectType = _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_iddObjectType

def EnergyManagementSystemProgramCallingManager_validCallingPointValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_validCallingPointValues()
EnergyManagementSystemProgramCallingManager_validCallingPointValues = _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_validCallingPointValues


def toEnergyManagementSystemProgramCallingManager(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":
    return _openstudiomodelcore.toEnergyManagementSystemProgramCallingManager(idfObject)
toEnergyManagementSystemProgramCallingManager = _openstudiomodelcore.toEnergyManagementSystemProgramCallingManager

def getEnergyManagementSystemProgramCallingManager(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManager(t_model, t_handle)
getEnergyManagementSystemProgramCallingManager = _openstudiomodelcore.getEnergyManagementSystemProgramCallingManager

def getEnergyManagementSystemProgramCallingManagers(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager,std::allocator< openstudio::model::EnergyManagementSystemProgramCallingManager > >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagers(t_model)
getEnergyManagementSystemProgramCallingManagers = _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagers

def getEnergyManagementSystemProgramCallingManagerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagerByName(t_model, t_name)
getEnergyManagementSystemProgramCallingManagerByName = _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagerByName

def getEnergyManagementSystemProgramCallingManagersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemProgramCallingManager,std::allocator< openstudio::model::EnergyManagementSystemProgramCallingManager > >":
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagersByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemProgramCallingManagersByName = _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagersByName
class EnergyManagementSystemOutputVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyManagementSystemOutputVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyManagementSystemOutputVariable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_EnergyManagementSystemOutputVariable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemOutputVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.EnergyManagementSystemOutputVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.EnergyManagementSystemOutputVariable_iddObjectType)
    __swig_getmethods__["typeOfDataInVariableValues"] = lambda x: _openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariableValues
    if _newclass:
        typeOfDataInVariableValues = staticmethod(_openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariableValues)
    __swig_getmethods__["updateFrequencyValues"] = lambda x: _openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequencyValues
    if _newclass:
        updateFrequencyValues = staticmethod(_openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequencyValues)

    def emsVariableName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsVariableName(self)

    def typeOfDataInVariable(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariable(self)

    def updateFrequency(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequency(self)

    def emsProgramOrSubroutineName(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsProgramOrSubroutineName(self)

    def emsProgram(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsProgram(self)

    def emsSubroutine(self) -> "boost::optional< openstudio::model::EnergyManagementSystemSubroutine >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsSubroutine(self)

    def units(self) -> "std::string":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_units(self)

    def emsVariableObject(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsVariableObject(self)

    def emsActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsActuator(self)

    def emsSensor(self) -> "boost::optional< openstudio::model::EnergyManagementSystemSensor >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsSensor(self)

    def emsGlobalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemGlobalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsGlobalVariable(self)

    def emsTrendVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemTrendVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsTrendVariable(self)

    def emsInternalVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemInternalVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsInternalVariable(self)

    def emsCurveOrTableIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemCurveOrTableIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsCurveOrTableIndexVariable(self)

    def emsConstructionIndexVariable(self) -> "boost::optional< openstudio::model::EnergyManagementSystemConstructionIndexVariable >":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsConstructionIndexVariable(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_isExportToBCVTBDefaulted(self)

    def setTypeOfDataInVariable(self, typeofDatainVariable: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setTypeOfDataInVariable(self, typeofDatainVariable)

    def setUpdateFrequency(self, updateFrequency: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setUpdateFrequency(self, updateFrequency)

    def setEMSProgramOrSubroutineName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setEMSProgramOrSubroutineName(self, *args)

    def resetEMSProgramOrSubroutineName(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_resetEMSProgramOrSubroutineName(self)

    def setUnits(self, units: 'std::string const &') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setUnits(self, units)

    def resetUnits(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_resetUnits(self)

    def setEMSVariableName(self, *args) -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setEMSVariableName(self, *args)

    def setExportToBCVTB(self, exportToBCVTB: 'bool') -> "bool":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_resetExportToBCVTB(self)
EnergyManagementSystemOutputVariable_swigregister = _openstudiomodelcore.EnergyManagementSystemOutputVariable_swigregister
EnergyManagementSystemOutputVariable_swigregister(EnergyManagementSystemOutputVariable)

def EnergyManagementSystemOutputVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.EnergyManagementSystemOutputVariable_iddObjectType()
EnergyManagementSystemOutputVariable_iddObjectType = _openstudiomodelcore.EnergyManagementSystemOutputVariable_iddObjectType

def EnergyManagementSystemOutputVariable_typeOfDataInVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariableValues()
EnergyManagementSystemOutputVariable_typeOfDataInVariableValues = _openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariableValues

def EnergyManagementSystemOutputVariable_updateFrequencyValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequencyValues()
EnergyManagementSystemOutputVariable_updateFrequencyValues = _openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequencyValues


def toEnergyManagementSystemOutputVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::EnergyManagementSystemOutputVariable >":
    return _openstudiomodelcore.toEnergyManagementSystemOutputVariable(idfObject)
toEnergyManagementSystemOutputVariable = _openstudiomodelcore.toEnergyManagementSystemOutputVariable

def getEnergyManagementSystemOutputVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::EnergyManagementSystemOutputVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariable(t_model, t_handle)
getEnergyManagementSystemOutputVariable = _openstudiomodelcore.getEnergyManagementSystemOutputVariable

def getEnergyManagementSystemOutputVariables(t_model: 'Model') -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemOutputVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariables(t_model)
getEnergyManagementSystemOutputVariables = _openstudiomodelcore.getEnergyManagementSystemOutputVariables

def getEnergyManagementSystemOutputVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::EnergyManagementSystemOutputVariable >":
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariableByName(t_model, t_name)
getEnergyManagementSystemOutputVariableByName = _openstudiomodelcore.getEnergyManagementSystemOutputVariableByName

def getEnergyManagementSystemOutputVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::EnergyManagementSystemOutputVariable,std::allocator< openstudio::model::EnergyManagementSystemOutputVariable > >":
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariablesByName(t_model, t_name, t_exactMatch)
getEnergyManagementSystemOutputVariablesByName = _openstudiomodelcore.getEnergyManagementSystemOutputVariablesByName
class OutputEnergyManagementSystem(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputEnergyManagementSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputEnergyManagementSystem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_OutputEnergyManagementSystem
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.OutputEnergyManagementSystem_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.OutputEnergyManagementSystem_iddObjectType)
    __swig_getmethods__["actuatorAvailabilityDictionaryReportingValues"] = lambda x: _openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues
    if _newclass:
        actuatorAvailabilityDictionaryReportingValues = staticmethod(_openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues)
    __swig_getmethods__["internalVariableAvailabilityDictionaryReportingValues"] = lambda x: _openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues
    if _newclass:
        internalVariableAvailabilityDictionaryReportingValues = staticmethod(_openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues)
    __swig_getmethods__["eMSRuntimeLanguageDebugOutputLevelValues"] = lambda x: _openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues
    if _newclass:
        eMSRuntimeLanguageDebugOutputLevelValues = staticmethod(_openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues)

    def actuatorAvailabilityDictionaryReporting(self) -> "std::string":
        return _openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReporting(self)

    def isActuatorAvailabilityDictionaryReportingDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_isActuatorAvailabilityDictionaryReportingDefaulted(self)

    def internalVariableAvailabilityDictionaryReporting(self) -> "std::string":
        return _openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReporting(self)

    def isInternalVariableAvailabilityDictionaryReportingDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_isInternalVariableAvailabilityDictionaryReportingDefaulted(self)

    def eMSRuntimeLanguageDebugOutputLevel(self) -> "std::string":
        return _openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevel(self)

    def isEMSRuntimeLanguageDebugOutputLevelDefaulted(self) -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_isEMSRuntimeLanguageDebugOutputLevelDefaulted(self)

    def setActuatorAvailabilityDictionaryReporting(self, actuatorAvailabilityDictionaryReporting: 'std::string const &') -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_setActuatorAvailabilityDictionaryReporting(self, actuatorAvailabilityDictionaryReporting)

    def resetActuatorAvailabilityDictionaryReporting(self) -> "void":
        return _openstudiomodelcore.OutputEnergyManagementSystem_resetActuatorAvailabilityDictionaryReporting(self)

    def setInternalVariableAvailabilityDictionaryReporting(self, internalVariableAvailabilityDictionaryReporting: 'std::string const &') -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_setInternalVariableAvailabilityDictionaryReporting(self, internalVariableAvailabilityDictionaryReporting)

    def resetInternalVariableAvailabilityDictionaryReporting(self) -> "void":
        return _openstudiomodelcore.OutputEnergyManagementSystem_resetInternalVariableAvailabilityDictionaryReporting(self)

    def setEMSRuntimeLanguageDebugOutputLevel(self, eMSRuntimeLanguageDebugOutputLevel: 'std::string const &') -> "bool":
        return _openstudiomodelcore.OutputEnergyManagementSystem_setEMSRuntimeLanguageDebugOutputLevel(self, eMSRuntimeLanguageDebugOutputLevel)

    def resetEMSRuntimeLanguageDebugOutputLevel(self) -> "void":
        return _openstudiomodelcore.OutputEnergyManagementSystem_resetEMSRuntimeLanguageDebugOutputLevel(self)
OutputEnergyManagementSystem_swigregister = _openstudiomodelcore.OutputEnergyManagementSystem_swigregister
OutputEnergyManagementSystem_swigregister(OutputEnergyManagementSystem)

def OutputEnergyManagementSystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.OutputEnergyManagementSystem_iddObjectType()
OutputEnergyManagementSystem_iddObjectType = _openstudiomodelcore.OutputEnergyManagementSystem_iddObjectType

def OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues()
OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues = _openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues

def OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues()
OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues = _openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues

def OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues()
OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues = _openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues


def toOutputEnergyManagementSystem(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::OutputEnergyManagementSystem >":
    return _openstudiomodelcore.toOutputEnergyManagementSystem(idfObject)
toOutputEnergyManagementSystem = _openstudiomodelcore.toOutputEnergyManagementSystem

def getOutputEnergyManagementSystem(t_model: 'Model') -> "openstudio::model::OutputEnergyManagementSystem":
    return _openstudiomodelcore.getOutputEnergyManagementSystem(t_model)
getOutputEnergyManagementSystem = _openstudiomodelcore.getOutputEnergyManagementSystem

def getOptionalOutputEnergyManagementSystem(t_model: 'Model') -> "boost::optional< openstudio::model::OutputEnergyManagementSystem >":
    return _openstudiomodelcore.getOptionalOutputEnergyManagementSystem(t_model)
getOptionalOutputEnergyManagementSystem = _openstudiomodelcore.getOptionalOutputEnergyManagementSystem
class ExternalInterface(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterface
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterface_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterface_iddObjectType)
    __swig_getmethods__["nameofExternalInterfaceValues"] = lambda x: _openstudiomodelcore.ExternalInterface_nameofExternalInterfaceValues
    if _newclass:
        nameofExternalInterfaceValues = staticmethod(_openstudiomodelcore.ExternalInterface_nameofExternalInterfaceValues)

    def nameofExternalInterface(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterface_nameofExternalInterface(self)

    def setNameofExternalInterface(self, nameofExternalInterface: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterface_setNameofExternalInterface(self, nameofExternalInterface)
ExternalInterface_swigregister = _openstudiomodelcore.ExternalInterface_swigregister
ExternalInterface_swigregister(ExternalInterface)

def ExternalInterface_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterface_iddObjectType()
ExternalInterface_iddObjectType = _openstudiomodelcore.ExternalInterface_iddObjectType

def ExternalInterface_nameofExternalInterfaceValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelcore.ExternalInterface_nameofExternalInterfaceValues()
ExternalInterface_nameofExternalInterfaceValues = _openstudiomodelcore.ExternalInterface_nameofExternalInterfaceValues


def toExternalInterface(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterface >":
    return _openstudiomodelcore.toExternalInterface(idfObject)
toExternalInterface = _openstudiomodelcore.toExternalInterface

def getExternalInterface(t_model: 'Model') -> "openstudio::model::ExternalInterface":
    return _openstudiomodelcore.getExternalInterface(t_model)
getExternalInterface = _openstudiomodelcore.getExternalInterface

def getOptionalExternalInterface(t_model: 'Model') -> "boost::optional< openstudio::model::ExternalInterface >":
    return _openstudiomodelcore.getOptionalExternalInterface(t_model)
getOptionalExternalInterface = _openstudiomodelcore.getOptionalExternalInterface
class ExternalInterfaceActuator(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceActuator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceActuator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceActuator
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceActuator_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceActuator_iddObjectType)

    def actuatedComponentUnique(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ExternalInterfaceActuator_actuatedComponentUnique(self)

    def actuatedComponentType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceActuator_actuatedComponentType(self)

    def actuatedComponentControlType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceActuator_actuatedComponentControlType(self)

    def optionalInitialValue(self) -> "boost::optional< double >":
        return _openstudiomodelcore.ExternalInterfaceActuator_optionalInitialValue(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_isExportToBCVTBDefaulted(self)

    def setActuatedComponentUnique(self, modelObject: 'ModelObject') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setActuatedComponentUnique(self, modelObject)

    def setActuatedComponentType(self, actuatedComponentType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setActuatedComponentType(self, actuatedComponentType)

    def setActuatedComponentControlType(self, actuatedComponentControlType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setOptionalInitialValue(self, optionalInitialValue: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setOptionalInitialValue(self, optionalInitialValue)

    def resetOptionalInitialValue(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuator_resetOptionalInitialValue(self)

    def setExportToBCVTB(self, exportToBCVTB: 'bool') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceActuator_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceActuator_resetExportToBCVTB(self)
ExternalInterfaceActuator_swigregister = _openstudiomodelcore.ExternalInterfaceActuator_swigregister
ExternalInterfaceActuator_swigregister(ExternalInterfaceActuator)

def ExternalInterfaceActuator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceActuator_iddObjectType()
ExternalInterfaceActuator_iddObjectType = _openstudiomodelcore.ExternalInterfaceActuator_iddObjectType


def toExternalInterfaceActuator(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceActuator >":
    return _openstudiomodelcore.toExternalInterfaceActuator(idfObject)
toExternalInterfaceActuator = _openstudiomodelcore.toExternalInterfaceActuator

def getExternalInterfaceActuator(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceActuator >":
    return _openstudiomodelcore.getExternalInterfaceActuator(t_model, t_handle)
getExternalInterfaceActuator = _openstudiomodelcore.getExternalInterfaceActuator

def getExternalInterfaceActuators(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceActuator,std::allocator< openstudio::model::ExternalInterfaceActuator > >":
    return _openstudiomodelcore.getExternalInterfaceActuators(t_model)
getExternalInterfaceActuators = _openstudiomodelcore.getExternalInterfaceActuators

def getExternalInterfaceActuatorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceActuator >":
    return _openstudiomodelcore.getExternalInterfaceActuatorByName(t_model, t_name)
getExternalInterfaceActuatorByName = _openstudiomodelcore.getExternalInterfaceActuatorByName

def getExternalInterfaceActuatorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceActuator,std::allocator< openstudio::model::ExternalInterfaceActuator > >":
    return _openstudiomodelcore.getExternalInterfaceActuatorsByName(t_model, t_name, t_exactMatch)
getExternalInterfaceActuatorsByName = _openstudiomodelcore.getExternalInterfaceActuatorsByName
class ExternalInterfaceFunctionalMockupUnitExportFromVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitExportFromVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitExportFromVariable, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', outputVariableIndexKeyName: 'std::string const &', outputVariableName: 'std::string const &', fMUVariableName: 'std::string const &'):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportFromVariable(model, outputVariableIndexKeyName, outputVariableName, fMUVariableName)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportFromVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType)

    def outputVariableIndexKeyName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_outputVariableIndexKeyName(self)

    def outputVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_outputVariableName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_fMUVariableName(self)

    def setOutputVariableIndexKeyName(self, outputVariableIndexKeyName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_setOutputVariableIndexKeyName(self, outputVariableIndexKeyName)

    def setOutputVariableName(self, outputVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_setOutputVariableName(self, outputVariableName)

    def setFMUVariableName(self, fMUVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_setFMUVariableName(self, fMUVariableName)
ExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister
ExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister(ExternalInterfaceFunctionalMockupUnitExportFromVariable)

def ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType()
ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType


def toExternalInterfaceFunctionalMockupUnitExportFromVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportFromVariable(idfObject)
toExternalInterfaceFunctionalMockupUnitExportFromVariable = _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportFromVariable

def getExternalInterfaceFunctionalMockupUnitExportFromVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariable(t_model, t_handle)
getExternalInterfaceFunctionalMockupUnitExportFromVariable = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariable

def getExternalInterfaceFunctionalMockupUnitExportFromVariables(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariables(t_model)
getExternalInterfaceFunctionalMockupUnitExportFromVariables = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariables

def getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(t_model, t_name)
getExternalInterfaceFunctionalMockupUnitExportFromVariableByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariableByName

def getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportFromVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(t_model, t_name, t_exactMatch)
getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName
class ExternalInterfaceFunctionalMockupUnitExportToActuator(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitExportToActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitExportToActuator, name)
    __repr__ = _swig_repr

    def __init__(self, modelObject: 'ModelObject', actuatedComponentType: 'std::string const &', actuatedComponentControlType: 'std::string const &', fMUVariableName: 'std::string const &', initialValue: 'double'):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToActuator(modelObject, actuatedComponentType, actuatedComponentControlType, fMUVariableName, initialValue)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToActuator
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType)

    def actuatedComponentUnique(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_actuatedComponentUnique(self)

    def actuatedComponentType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_actuatedComponentType(self)

    def actuatedComponentControlType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_actuatedComponentControlType(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_initialValue(self)

    def setActuatedComponentUnique(self, modelObject: 'ModelObject') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setActuatedComponentUnique(self, modelObject)

    def setActuatedComponentType(self, actuatedComponentType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setActuatedComponentType(self, actuatedComponentType)

    def setActuatedComponentControlType(self, actuatedComponentControlType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setFMUVariableName(self, fMUVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setInitialValue(self, initialValue)
ExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister
ExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister(ExternalInterfaceFunctionalMockupUnitExportToActuator)

def ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType()
ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType


def toExternalInterfaceFunctionalMockupUnitExportToActuator(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToActuator(idfObject)
toExternalInterfaceFunctionalMockupUnitExportToActuator = _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToActuator

def getExternalInterfaceFunctionalMockupUnitExportToActuator(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuator(t_model, t_handle)
getExternalInterfaceFunctionalMockupUnitExportToActuator = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuator

def getExternalInterfaceFunctionalMockupUnitExportToActuators(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuators(t_model)
getExternalInterfaceFunctionalMockupUnitExportToActuators = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuators

def getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(t_model, t_name)
getExternalInterfaceFunctionalMockupUnitExportToActuatorByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuatorByName

def getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToActuator > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(t_model, t_name, t_exactMatch)
getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName
class ExternalInterfaceFunctionalMockupUnitExportToSchedule(Schedule):
    __swig_setmethods__ = {}
    for _s in [Schedule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitExportToSchedule, name, value)
    __swig_getmethods__ = {}
    for _s in [Schedule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitExportToSchedule, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', fMUVariableName: 'std::string const &', initialValue: 'double'):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToSchedule(model, fMUVariableName, initialValue)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToSchedule
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_initialValue(self)

    def setFMUVariableName(self, fMUVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_setInitialValue(self, initialValue)
ExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister
ExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister(ExternalInterfaceFunctionalMockupUnitExportToSchedule)

def ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType()
ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType


def toExternalInterfaceFunctionalMockupUnitExportToSchedule(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToSchedule(idfObject)
toExternalInterfaceFunctionalMockupUnitExportToSchedule = _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToSchedule

def getExternalInterfaceFunctionalMockupUnitExportToSchedule(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedule(t_model, t_handle)
getExternalInterfaceFunctionalMockupUnitExportToSchedule = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedule

def getExternalInterfaceFunctionalMockupUnitExportToSchedules(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedules(t_model)
getExternalInterfaceFunctionalMockupUnitExportToSchedules = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedules

def getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(t_model, t_name)
getExternalInterfaceFunctionalMockupUnitExportToScheduleByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToScheduleByName

def getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(t_model, t_name, t_exactMatch)
getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName
class ExternalInterfaceFunctionalMockupUnitExportToVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitExportToVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitExportToVariable, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', fMUVariableName: 'std::string const &', initialValue: 'double'):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToVariable(model, fMUVariableName, initialValue)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_initialValue(self)

    def setFMUVariableName(self, fMUVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_setInitialValue(self, initialValue)
ExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister
ExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister(ExternalInterfaceFunctionalMockupUnitExportToVariable)

def ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType()
ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType


def toExternalInterfaceFunctionalMockupUnitExportToVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToVariable(idfObject)
toExternalInterfaceFunctionalMockupUnitExportToVariable = _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToVariable

def getExternalInterfaceFunctionalMockupUnitExportToVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariable(t_model, t_handle)
getExternalInterfaceFunctionalMockupUnitExportToVariable = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariable

def getExternalInterfaceFunctionalMockupUnitExportToVariables(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariables(t_model)
getExternalInterfaceFunctionalMockupUnitExportToVariables = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariables

def getExternalInterfaceFunctionalMockupUnitExportToVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariableByName(t_model, t_name)
getExternalInterfaceFunctionalMockupUnitExportToVariableByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariableByName

def getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitExportToVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(t_model, t_name, t_exactMatch)
getExternalInterfaceFunctionalMockupUnitExportToVariablesByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariablesByName
class ExternalInterfaceFunctionalMockupUnitImport(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImport, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImport, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', fmuName: 'std::string const &'):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImport(model, fmuName)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImport
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_iddObjectType)

    def fMUTimeout(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_fMUTimeout(self)

    def isFMUTimeoutDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_isFMUTimeoutDefaulted(self)

    def fMULoggingOn(self) -> "int":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_fMULoggingOn(self)

    def isFMULoggingOnDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_isFMULoggingOnDefaulted(self)

    def fMUFileName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_fMUFileName(self)

    def setFMUTimeout(self, fMUTimeout: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_setFMUTimeout(self, fMUTimeout)

    def resetFMUTimeout(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_resetFMUTimeout(self)

    def setFMULoggingOn(self, fMULoggingOn: 'int') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_setFMULoggingOn(self, fMULoggingOn)

    def resetFMULoggingOn(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_resetFMULoggingOn(self)

    def setFMUFileName(self, fMUName: 'std::string') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_setFMUFileName(self, fMUName)
ExternalInterfaceFunctionalMockupUnitImport_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_swigregister
ExternalInterfaceFunctionalMockupUnitImport_swigregister(ExternalInterfaceFunctionalMockupUnitImport)

def ExternalInterfaceFunctionalMockupUnitImport_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_iddObjectType()
ExternalInterfaceFunctionalMockupUnitImport_iddObjectType = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_iddObjectType


def toExternalInterfaceFunctionalMockupUnitImport(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImport(idfObject)
toExternalInterfaceFunctionalMockupUnitImport = _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImport

def getExternalInterfaceFunctionalMockupUnitImport(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImport(t_model, t_handle)
getExternalInterfaceFunctionalMockupUnitImport = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImport

def getExternalInterfaceFunctionalMockupUnitImports(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImports(t_model)
getExternalInterfaceFunctionalMockupUnitImports = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImports

def getExternalInterfaceFunctionalMockupUnitImportByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportByName(t_model, t_name)
getExternalInterfaceFunctionalMockupUnitImportByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportByName

def getExternalInterfaceFunctionalMockupUnitImportsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImport > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportsByName(t_model, t_name, t_exactMatch)
getExternalInterfaceFunctionalMockupUnitImportsByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportsByName
class ExternalInterfaceFunctionalMockupUnitImportFromVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImportFromVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImportFromVariable, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', outputVariableIndexKeyName: 'std::string const &', outputVariableName: 'std::string const &', fMUFile: 'ExternalInterfaceFunctionalMockupUnitImport', fMUInstanceName: 'std::string const &', fMUVariableName: 'std::string const &'):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportFromVariable(model, outputVariableIndexKeyName, outputVariableName, fMUFile, fMUInstanceName, fMUVariableName)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportFromVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType)

    def outputVariableIndexKeyName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_outputVariableIndexKeyName(self)

    def outputVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_outputVariableName(self)

    def fMUFile(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_fMUFile(self)

    def fMUInstanceName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_fMUInstanceName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_fMUVariableName(self)

    def setOutputVariableIndexKeyName(self, outputVariableIndexKeyName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setOutputVariableIndexKeyName(self, outputVariableIndexKeyName)

    def setOutputVariableName(self, outputVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setOutputVariableName(self, outputVariableName)

    def setFMUFile(self, fMUFile: 'ExternalInterfaceFunctionalMockupUnitImport') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setFMUVariableName(self, fMUVariableName)
ExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister
ExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister(ExternalInterfaceFunctionalMockupUnitImportFromVariable)

def ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType()
ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType


def toExternalInterfaceFunctionalMockupUnitImportFromVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportFromVariable(idfObject)
toExternalInterfaceFunctionalMockupUnitImportFromVariable = _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportFromVariable

def getExternalInterfaceFunctionalMockupUnitImportFromVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariable(t_model, t_handle)
getExternalInterfaceFunctionalMockupUnitImportFromVariable = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariable

def getExternalInterfaceFunctionalMockupUnitImportFromVariables(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariables(t_model)
getExternalInterfaceFunctionalMockupUnitImportFromVariables = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariables

def getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(t_model, t_name)
getExternalInterfaceFunctionalMockupUnitImportFromVariableByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariableByName

def getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportFromVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(t_model, t_name, t_exactMatch)
getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName
class ExternalInterfaceFunctionalMockupUnitImportToActuator(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImportToActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImportToActuator, name)
    __repr__ = _swig_repr

    def __init__(self, modelObject: 'ModelObject', actuatedComponentType: 'std::string const &', actuatedComponentControlType: 'std::string const &', fMUFile: 'ExternalInterfaceFunctionalMockupUnitImport', fMUInstanceName: 'std::string const &', fMUVariableName: 'std::string const &', initialValue: 'double'):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToActuator(modelObject, actuatedComponentType, actuatedComponentControlType, fMUFile, fMUInstanceName, fMUVariableName, initialValue)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToActuator
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType)

    def actuatedComponentUnique(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_actuatedComponentUnique(self)

    def actuatedComponentType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_actuatedComponentType(self)

    def actuatedComponentControlType(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_actuatedComponentControlType(self)

    def fMUFile(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_fMUFile(self)

    def fMUInstanceName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_fMUInstanceName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_initialValue(self)

    def setActuatedComponentUnique(self, modelObject: 'ModelObject') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setActuatedComponentUnique(self, modelObject)

    def setActuatedComponentType(self, actuatedComponentType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setActuatedComponentType(self, actuatedComponentType)

    def setActuatedComponentControlType(self, actuatedComponentControlType: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setFMUFile(self, fMUFile: 'ExternalInterfaceFunctionalMockupUnitImport') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setInitialValue(self, initialValue)
ExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister
ExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister(ExternalInterfaceFunctionalMockupUnitImportToActuator)

def ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType()
ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType


def toExternalInterfaceFunctionalMockupUnitImportToActuator(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToActuator(idfObject)
toExternalInterfaceFunctionalMockupUnitImportToActuator = _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToActuator

def getExternalInterfaceFunctionalMockupUnitImportToActuator(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuator(t_model, t_handle)
getExternalInterfaceFunctionalMockupUnitImportToActuator = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuator

def getExternalInterfaceFunctionalMockupUnitImportToActuators(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuators(t_model)
getExternalInterfaceFunctionalMockupUnitImportToActuators = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuators

def getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(t_model, t_name)
getExternalInterfaceFunctionalMockupUnitImportToActuatorByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuatorByName

def getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToActuator > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(t_model, t_name, t_exactMatch)
getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName
class ExternalInterfaceFunctionalMockupUnitImportToSchedule(Schedule):
    __swig_setmethods__ = {}
    for _s in [Schedule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImportToSchedule, name, value)
    __swig_getmethods__ = {}
    for _s in [Schedule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImportToSchedule, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', fMUFile: 'ExternalInterfaceFunctionalMockupUnitImport', fMUInstanceName: 'std::string const &', fMUVariableName: 'std::string const &', initialValue: 'double'):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToSchedule(model, fMUFile, fMUInstanceName, fMUVariableName, initialValue)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToSchedule
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType)

    def fMUFile(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_fMUFile(self)

    def fMUInstanceName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_fMUInstanceName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_initialValue(self)

    def setFMUFile(self, fMUFile: 'ExternalInterfaceFunctionalMockupUnitImport') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setInitialValue(self, initialValue)
ExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister
ExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister(ExternalInterfaceFunctionalMockupUnitImportToSchedule)

def ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType()
ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType


def toExternalInterfaceFunctionalMockupUnitImportToSchedule(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToSchedule(idfObject)
toExternalInterfaceFunctionalMockupUnitImportToSchedule = _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToSchedule

def getExternalInterfaceFunctionalMockupUnitImportToSchedule(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedule(t_model, t_handle)
getExternalInterfaceFunctionalMockupUnitImportToSchedule = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedule

def getExternalInterfaceFunctionalMockupUnitImportToSchedules(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedules(t_model)
getExternalInterfaceFunctionalMockupUnitImportToSchedules = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedules

def getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(t_model, t_name)
getExternalInterfaceFunctionalMockupUnitImportToScheduleByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToScheduleByName

def getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(t_model, t_name, t_exactMatch)
getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName
class ExternalInterfaceFunctionalMockupUnitImportToVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceFunctionalMockupUnitImportToVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceFunctionalMockupUnitImportToVariable, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', fMUFile: 'ExternalInterfaceFunctionalMockupUnitImport', fMUInstanceName: 'std::string const &', fMUVariableName: 'std::string const &', initialValue: 'double'):
        this = _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToVariable(model, fMUFile, fMUInstanceName, fMUVariableName, initialValue)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType)

    def fMUFile(self) -> "openstudio::model::ExternalInterfaceFunctionalMockupUnitImport":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_fMUFile(self)

    def fMUInstanceName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_fMUInstanceName(self)

    def fMUVariableName(self) -> "std::string":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_fMUVariableName(self)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_initialValue(self)

    def setFMUFile(self, fMUFile: 'ExternalInterfaceFunctionalMockupUnitImport') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName: 'std::string const &') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setInitialValue(self, initialValue)
ExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister
ExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister(ExternalInterfaceFunctionalMockupUnitImportToVariable)

def ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType()
ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType = _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType


def toExternalInterfaceFunctionalMockupUnitImportToVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >":
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToVariable(idfObject)
toExternalInterfaceFunctionalMockupUnitImportToVariable = _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToVariable

def getExternalInterfaceFunctionalMockupUnitImportToVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariable(t_model, t_handle)
getExternalInterfaceFunctionalMockupUnitImportToVariable = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariable

def getExternalInterfaceFunctionalMockupUnitImportToVariables(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariables(t_model)
getExternalInterfaceFunctionalMockupUnitImportToVariables = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariables

def getExternalInterfaceFunctionalMockupUnitImportToVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariableByName(t_model, t_name)
getExternalInterfaceFunctionalMockupUnitImportToVariableByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariableByName

def getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable,std::allocator< openstudio::model::ExternalInterfaceFunctionalMockupUnitImportToVariable > >":
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(t_model, t_name, t_exactMatch)
getExternalInterfaceFunctionalMockupUnitImportToVariablesByName = _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariablesByName
class ExternalInterfaceSchedule(Schedule):
    __swig_setmethods__ = {}
    for _s in [Schedule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceSchedule, name, value)
    __swig_getmethods__ = {}
    for _s in [Schedule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceSchedule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelcore.new_ExternalInterfaceSchedule(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceSchedule
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceSchedule_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceSchedule_iddObjectType)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceSchedule_initialValue(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceSchedule_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceSchedule_isExportToBCVTBDefaulted(self)

    def setInitialValue(self, initialValue: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceSchedule_setInitialValue(self, initialValue)

    def setExportToBCVTB(self, exportToBCVTB: 'bool') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceSchedule_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceSchedule_resetExportToBCVTB(self)
ExternalInterfaceSchedule_swigregister = _openstudiomodelcore.ExternalInterfaceSchedule_swigregister
ExternalInterfaceSchedule_swigregister(ExternalInterfaceSchedule)

def ExternalInterfaceSchedule_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceSchedule_iddObjectType()
ExternalInterfaceSchedule_iddObjectType = _openstudiomodelcore.ExternalInterfaceSchedule_iddObjectType


def toExternalInterfaceSchedule(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceSchedule >":
    return _openstudiomodelcore.toExternalInterfaceSchedule(idfObject)
toExternalInterfaceSchedule = _openstudiomodelcore.toExternalInterfaceSchedule

def getExternalInterfaceSchedule(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceSchedule >":
    return _openstudiomodelcore.getExternalInterfaceSchedule(t_model, t_handle)
getExternalInterfaceSchedule = _openstudiomodelcore.getExternalInterfaceSchedule

def getExternalInterfaceSchedules(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceSchedule,std::allocator< openstudio::model::ExternalInterfaceSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceSchedules(t_model)
getExternalInterfaceSchedules = _openstudiomodelcore.getExternalInterfaceSchedules

def getExternalInterfaceScheduleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceSchedule >":
    return _openstudiomodelcore.getExternalInterfaceScheduleByName(t_model, t_name)
getExternalInterfaceScheduleByName = _openstudiomodelcore.getExternalInterfaceScheduleByName

def getExternalInterfaceSchedulesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceSchedule,std::allocator< openstudio::model::ExternalInterfaceSchedule > >":
    return _openstudiomodelcore.getExternalInterfaceSchedulesByName(t_model, t_name, t_exactMatch)
getExternalInterfaceSchedulesByName = _openstudiomodelcore.getExternalInterfaceSchedulesByName
class ExternalInterfaceVariable(ModelObject):
    __swig_setmethods__ = {}
    for _s in [ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterfaceVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterfaceVariable, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', variableName: 'std::string const &', initialValue: 'double'):
        this = _openstudiomodelcore.new_ExternalInterfaceVariable(model, variableName, initialValue)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceVariable
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelcore.ExternalInterfaceVariable_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelcore.ExternalInterfaceVariable_iddObjectType)

    def initialValue(self) -> "double":
        return _openstudiomodelcore.ExternalInterfaceVariable_initialValue(self)

    def exportToBCVTB(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self) -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariable_isExportToBCVTBDefaulted(self)

    def setInitialValue(self, initialValue: 'double') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariable_setInitialValue(self, initialValue)

    def setExportToBCVTB(self, exportToBCVTB: 'bool') -> "bool":
        return _openstudiomodelcore.ExternalInterfaceVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self) -> "void":
        return _openstudiomodelcore.ExternalInterfaceVariable_resetExportToBCVTB(self)
ExternalInterfaceVariable_swigregister = _openstudiomodelcore.ExternalInterfaceVariable_swigregister
ExternalInterfaceVariable_swigregister(ExternalInterfaceVariable)

def ExternalInterfaceVariable_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelcore.ExternalInterfaceVariable_iddObjectType()
ExternalInterfaceVariable_iddObjectType = _openstudiomodelcore.ExternalInterfaceVariable_iddObjectType


def toExternalInterfaceVariable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalInterfaceVariable >":
    return _openstudiomodelcore.toExternalInterfaceVariable(idfObject)
toExternalInterfaceVariable = _openstudiomodelcore.toExternalInterfaceVariable

def getExternalInterfaceVariable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalInterfaceVariable >":
    return _openstudiomodelcore.getExternalInterfaceVariable(t_model, t_handle)
getExternalInterfaceVariable = _openstudiomodelcore.getExternalInterfaceVariable

def getExternalInterfaceVariables(t_model: 'Model') -> "std::vector< openstudio::model::ExternalInterfaceVariable,std::allocator< openstudio::model::ExternalInterfaceVariable > >":
    return _openstudiomodelcore.getExternalInterfaceVariables(t_model)
getExternalInterfaceVariables = _openstudiomodelcore.getExternalInterfaceVariables

def getExternalInterfaceVariableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalInterfaceVariable >":
    return _openstudiomodelcore.getExternalInterfaceVariableByName(t_model, t_name)
getExternalInterfaceVariableByName = _openstudiomodelcore.getExternalInterfaceVariableByName

def getExternalInterfaceVariablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalInterfaceVariable,std::allocator< openstudio::model::ExternalInterfaceVariable > >":
    return _openstudiomodelcore.getExternalInterfaceVariablesByName(t_model, t_name, t_exactMatch)
getExternalInterfaceVariablesByName = _openstudiomodelcore.getExternalInterfaceVariablesByName
# This file is compatible with both classic and new-style classes.


