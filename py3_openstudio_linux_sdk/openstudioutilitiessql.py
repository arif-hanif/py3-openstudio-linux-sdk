# This file was automatically generated by SWIG (http://www.swig.org).

# Version 3.0.7

#

# Do not make changes to this file unless you know what you are doing--modify

# the SWIG interface file instead.











from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():

        from os.path import dirname

        import imp

        fp = None

        try:

            fp, pathname, description = imp.find_module('_openstudioutilitiessql', [dirname(__file__)])

        except ImportError:

            import _openstudioutilitiessql

            return _openstudioutilitiessql

        if fp is not None:

            try:

                _mod = imp.load_module('_openstudioutilitiessql', fp, pathname, description)

            finally:

                fp.close()

            return _mod

    _openstudioutilitiessql = swig_import_helper()

    del swig_import_helper

else:

    import _openstudioutilitiessql

del version_info

try:

    _swig_property = property

except NameError:

    pass  # Python < 2.2 doesn't have 'property'.





def _swig_setattr_nondynamic(self, class_type, name, value, static=1):

    if (name == "thisown"):

        return self.this.own(value)

    if (name == "this"):

        if type(value).__name__ == 'SwigPyObject':

            self.__dict__[name] = value

            return

    method = class_type.__swig_setmethods__.get(name, None)

    if method:

        return method(self, value)

    if (not static):

        if _newclass:

            object.__setattr__(self, name, value)

        else:

            self.__dict__[name] = value

    else:

        raise AttributeError("You cannot add attributes to %s" % self)





def _swig_setattr(self, class_type, name, value):

    return _swig_setattr_nondynamic(self, class_type, name, value, 0)





def _swig_getattr_nondynamic(self, class_type, name, static=1):

    if (name == "thisown"):

        return self.this.own()

    method = class_type.__swig_getmethods__.get(name, None)

    if method:

        return method(self)

    if (not static):

        return object.__getattr__(self, name)

    else:

        raise AttributeError(name)



def _swig_getattr(self, class_type, name):

    return _swig_getattr_nondynamic(self, class_type, name, 0)





def _swig_repr(self):

    try:

        strthis = "proxy of " + self.this.__repr__()

    except:

        strthis = ""

    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)



try:

    _object = object

    _newclass = 1

except AttributeError:

    class _object:

        pass

    _newclass = 0





try:

    import weakref

    weakref_proxy = weakref.proxy

except:

    weakref_proxy = lambda x: x





class SwigPyIterator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiessql.delete_SwigPyIterator

    __del__ = lambda self: None



    def value(self) -> "PyObject *":

        return _openstudioutilitiessql.SwigPyIterator_value(self)



    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiessql.SwigPyIterator_incr(self, n)



    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiessql.SwigPyIterator_decr(self, n)



    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":

        return _openstudioutilitiessql.SwigPyIterator_distance(self, x)



    def equal(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiessql.SwigPyIterator_equal(self, x)



    def copy(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiessql.SwigPyIterator_copy(self)



    def next(self) -> "PyObject *":

        return _openstudioutilitiessql.SwigPyIterator_next(self)



    def __next__(self) -> "PyObject *":

        return _openstudioutilitiessql.SwigPyIterator___next__(self)



    def previous(self) -> "PyObject *":

        return _openstudioutilitiessql.SwigPyIterator_previous(self)



    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiessql.SwigPyIterator_advance(self, n)



    def __eq__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiessql.SwigPyIterator___eq__(self, x)



    def __ne__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiessql.SwigPyIterator___ne__(self, x)



    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiessql.SwigPyIterator___iadd__(self, n)



    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiessql.SwigPyIterator___isub__(self, n)



    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiessql.SwigPyIterator___add__(self, n)



    def __sub__(self, *args) -> "ptrdiff_t":

        return _openstudioutilitiessql.SwigPyIterator___sub__(self, *args)

    def __iter__(self):

        return self

SwigPyIterator_swigregister = _openstudioutilitiessql.SwigPyIterator_swigregister

SwigPyIterator_swigregister(SwigPyIterator)





_openstudioutilitiessql.SHARED_PTR_DISOWN_swigconstant(_openstudioutilitiessql)

SHARED_PTR_DISOWN = _openstudioutilitiessql.SHARED_PTR_DISOWN

from .import openstudioutilitiesgeometry

from .import openstudioutilitiesplot

from .import openstudioutilitiesdata

from .import openstudioutilitiestime

from .import openstudioutilitiescore

from .import openstudioutilitiesunits

class OptionalSqlFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSqlFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSqlFile, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_OptionalSqlFile(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiessql.OptionalSqlFile_reset(self)



    def __ref__(self) -> "openstudio::SqlFile":

        return _openstudioutilitiessql.OptionalSqlFile___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiessql.OptionalSqlFile_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiessql.OptionalSqlFile_isNull(self)



    def get(self) -> "openstudio::SqlFile":

        return _openstudioutilitiessql.OptionalSqlFile_get(self)



    def set(self, t: 'SqlFile') -> "void":

        return _openstudioutilitiessql.OptionalSqlFile_set(self, t)

    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalSqlFile

    __del__ = lambda self: None

OptionalSqlFile_swigregister = _openstudioutilitiessql.OptionalSqlFile_swigregister

OptionalSqlFile_swigregister(OptionalSqlFile)



class OptionalEnvironmentType(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnvironmentType, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnvironmentType, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_OptionalEnvironmentType(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiessql.OptionalEnvironmentType_reset(self)



    def __ref__(self) -> "openstudio::EnvironmentType":

        return _openstudioutilitiessql.OptionalEnvironmentType___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiessql.OptionalEnvironmentType_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiessql.OptionalEnvironmentType_isNull(self)



    def get(self) -> "openstudio::EnvironmentType":

        return _openstudioutilitiessql.OptionalEnvironmentType_get(self)



    def set(self, t: 'EnvironmentType') -> "void":

        return _openstudioutilitiessql.OptionalEnvironmentType_set(self, t)

    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalEnvironmentType

    __del__ = lambda self: None

OptionalEnvironmentType_swigregister = _openstudioutilitiessql.OptionalEnvironmentType_swigregister

OptionalEnvironmentType_swigregister(OptionalEnvironmentType)



class OptionalReportingFrequency(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalReportingFrequency, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalReportingFrequency, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_OptionalReportingFrequency(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiessql.OptionalReportingFrequency_reset(self)



    def __ref__(self) -> "openstudio::ReportingFrequency":

        return _openstudioutilitiessql.OptionalReportingFrequency___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiessql.OptionalReportingFrequency_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiessql.OptionalReportingFrequency_isNull(self)



    def get(self) -> "openstudio::ReportingFrequency":

        return _openstudioutilitiessql.OptionalReportingFrequency_get(self)



    def set(self, t: 'ReportingFrequency') -> "void":

        return _openstudioutilitiessql.OptionalReportingFrequency_set(self, t)

    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalReportingFrequency

    __del__ = lambda self: None

OptionalReportingFrequency_swigregister = _openstudioutilitiessql.OptionalReportingFrequency_swigregister

OptionalReportingFrequency_swigregister(OptionalReportingFrequency)



class OptionalKeyValueIdentifier(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalKeyValueIdentifier, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalKeyValueIdentifier, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_OptionalKeyValueIdentifier(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiessql.OptionalKeyValueIdentifier_reset(self)



    def __ref__(self) -> "openstudio::KeyValueIdentifier":

        return _openstudioutilitiessql.OptionalKeyValueIdentifier___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiessql.OptionalKeyValueIdentifier_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiessql.OptionalKeyValueIdentifier_isNull(self)



    def get(self) -> "openstudio::KeyValueIdentifier":

        return _openstudioutilitiessql.OptionalKeyValueIdentifier_get(self)



    def set(self, t: 'KeyValueIdentifier') -> "void":

        return _openstudioutilitiessql.OptionalKeyValueIdentifier_set(self, t)

    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalKeyValueIdentifier

    __del__ = lambda self: None

OptionalKeyValueIdentifier_swigregister = _openstudioutilitiessql.OptionalKeyValueIdentifier_swigregister

OptionalKeyValueIdentifier_swigregister(OptionalKeyValueIdentifier)



class OptionalEnvironmentIdentifier(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEnvironmentIdentifier, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEnvironmentIdentifier, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_OptionalEnvironmentIdentifier(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_reset(self)



    def __ref__(self) -> "openstudio::EnvironmentIdentifier":

        return _openstudioutilitiessql.OptionalEnvironmentIdentifier___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_isNull(self)



    def get(self) -> "openstudio::EnvironmentIdentifier":

        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_get(self)



    def set(self, t: 'EnvironmentIdentifier') -> "void":

        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_set(self, t)

    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalEnvironmentIdentifier

    __del__ = lambda self: None

OptionalEnvironmentIdentifier_swigregister = _openstudioutilitiessql.OptionalEnvironmentIdentifier_swigregister

OptionalEnvironmentIdentifier_swigregister(OptionalEnvironmentIdentifier)



class OptionalTimeSeriesIdentifier(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalTimeSeriesIdentifier, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalTimeSeriesIdentifier, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_OptionalTimeSeriesIdentifier(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_reset(self)



    def __ref__(self) -> "openstudio::TimeSeriesIdentifier":

        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_isNull(self)



    def get(self) -> "openstudio::TimeSeriesIdentifier":

        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_get(self)



    def set(self, t: 'TimeSeriesIdentifier') -> "void":

        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_set(self, t)

    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalTimeSeriesIdentifier

    __del__ = lambda self: None

OptionalTimeSeriesIdentifier_swigregister = _openstudioutilitiessql.OptionalTimeSeriesIdentifier_swigregister

OptionalTimeSeriesIdentifier_swigregister(OptionalTimeSeriesIdentifier)



class ReportingFrequencySet(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportingFrequencySet, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ReportingFrequencySet, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiessql.ReportingFrequencySet_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiessql.ReportingFrequencySet___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiessql.ReportingFrequencySet___bool__(self)



    def __len__(self) -> "std::set< openstudio::ReportingFrequency >::size_type":

        return _openstudioutilitiessql.ReportingFrequencySet___len__(self)



    def append(self, x: 'ReportingFrequency') -> "void":

        return _openstudioutilitiessql.ReportingFrequencySet_append(self, x)



    def __contains__(self, x: 'ReportingFrequency') -> "bool":

        return _openstudioutilitiessql.ReportingFrequencySet___contains__(self, x)



    def __getitem__(self, i: 'std::set< openstudio::ReportingFrequency >::difference_type') -> "std::set< openstudio::ReportingFrequency >::value_type":

        return _openstudioutilitiessql.ReportingFrequencySet___getitem__(self, i)



    def add(self, x: 'ReportingFrequency') -> "void":

        return _openstudioutilitiessql.ReportingFrequencySet_add(self, x)



    def discard(self, x: 'ReportingFrequency') -> "void":

        return _openstudioutilitiessql.ReportingFrequencySet_discard(self, x)



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_ReportingFrequencySet(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def empty(self) -> "bool":

        return _openstudioutilitiessql.ReportingFrequencySet_empty(self)



    def size(self) -> "std::set< openstudio::ReportingFrequency >::size_type":

        return _openstudioutilitiessql.ReportingFrequencySet_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiessql.ReportingFrequencySet_clear(self)



    def swap(self, v: 'ReportingFrequencySet') -> "void":

        return _openstudioutilitiessql.ReportingFrequencySet_swap(self, v)



    def count(self, x: 'ReportingFrequency') -> "std::set< openstudio::ReportingFrequency >::size_type":

        return _openstudioutilitiessql.ReportingFrequencySet_count(self, x)



    def begin(self) -> "std::set< openstudio::ReportingFrequency >::iterator":

        return _openstudioutilitiessql.ReportingFrequencySet_begin(self)



    def end(self) -> "std::set< openstudio::ReportingFrequency >::iterator":

        return _openstudioutilitiessql.ReportingFrequencySet_end(self)



    def rbegin(self) -> "std::set< openstudio::ReportingFrequency >::reverse_iterator":

        return _openstudioutilitiessql.ReportingFrequencySet_rbegin(self)



    def rend(self) -> "std::set< openstudio::ReportingFrequency >::reverse_iterator":

        return _openstudioutilitiessql.ReportingFrequencySet_rend(self)



    def erase(self, *args) -> "void":

        return _openstudioutilitiessql.ReportingFrequencySet_erase(self, *args)



    def find(self, x: 'ReportingFrequency') -> "std::set< openstudio::ReportingFrequency >::iterator":

        return _openstudioutilitiessql.ReportingFrequencySet_find(self, x)



    def lower_bound(self, x: 'ReportingFrequency') -> "std::set< openstudio::ReportingFrequency >::iterator":

        return _openstudioutilitiessql.ReportingFrequencySet_lower_bound(self, x)



    def upper_bound(self, x: 'ReportingFrequency') -> "std::set< openstudio::ReportingFrequency >::iterator":

        return _openstudioutilitiessql.ReportingFrequencySet_upper_bound(self, x)



    def equal_range(self, x: 'ReportingFrequency') -> "std::pair< std::set< openstudio::ReportingFrequency >::iterator,std::set< openstudio::ReportingFrequency >::iterator >":

        return _openstudioutilitiessql.ReportingFrequencySet_equal_range(self, x)



    def insert(self, __x: 'ReportingFrequency') -> "std::pair< std::set< openstudio::ReportingFrequency >::iterator,bool >":

        return _openstudioutilitiessql.ReportingFrequencySet_insert(self, __x)

    __swig_destroy__ = _openstudioutilitiessql.delete_ReportingFrequencySet

    __del__ = lambda self: None

ReportingFrequencySet_swigregister = _openstudioutilitiessql.ReportingFrequencySet_swigregister

ReportingFrequencySet_swigregister(ReportingFrequencySet)



class ReportingFrequencyVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportingFrequencyVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ReportingFrequencyVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiessql.ReportingFrequencyVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiessql.ReportingFrequencyVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiessql.ReportingFrequencyVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::ReportingFrequency >::size_type":

        return _openstudioutilitiessql.ReportingFrequencyVector___len__(self)



    def pop(self) -> "std::vector< openstudio::ReportingFrequency >::value_type":

        return _openstudioutilitiessql.ReportingFrequencyVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::ReportingFrequency >::difference_type', j: 'std::vector< openstudio::ReportingFrequency >::difference_type') -> "std::vector< openstudio::ReportingFrequency,std::allocator< openstudio::ReportingFrequency > > *":

        return _openstudioutilitiessql.ReportingFrequencyVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::ReportingFrequency >::difference_type', j: 'std::vector< openstudio::ReportingFrequency >::difference_type') -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::ReportingFrequency >::value_type const &":

        return _openstudioutilitiessql.ReportingFrequencyVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector___setitem__(self, *args)



    def append(self, x: 'ReportingFrequency') -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiessql.ReportingFrequencyVector_empty(self)



    def size(self) -> "std::vector< openstudio::ReportingFrequency >::size_type":

        return _openstudioutilitiessql.ReportingFrequencyVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector_clear(self)



    def swap(self, v: 'ReportingFrequencyVector') -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::ReportingFrequency >::allocator_type":

        return _openstudioutilitiessql.ReportingFrequencyVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::ReportingFrequency >::iterator":

        return _openstudioutilitiessql.ReportingFrequencyVector_begin(self)



    def end(self) -> "std::vector< openstudio::ReportingFrequency >::iterator":

        return _openstudioutilitiessql.ReportingFrequencyVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::ReportingFrequency >::reverse_iterator":

        return _openstudioutilitiessql.ReportingFrequencyVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::ReportingFrequency >::reverse_iterator":

        return _openstudioutilitiessql.ReportingFrequencyVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::ReportingFrequency >::iterator":

        return _openstudioutilitiessql.ReportingFrequencyVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_ReportingFrequencyVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ReportingFrequency') -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::ReportingFrequency >::value_type const &":

        return _openstudioutilitiessql.ReportingFrequencyVector_front(self)



    def back(self) -> "std::vector< openstudio::ReportingFrequency >::value_type const &":

        return _openstudioutilitiessql.ReportingFrequencyVector_back(self)



    def assign(self, n: 'std::vector< openstudio::ReportingFrequency >::size_type', x: 'ReportingFrequency') -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::ReportingFrequency >::size_type') -> "void":

        return _openstudioutilitiessql.ReportingFrequencyVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::ReportingFrequency >::size_type":

        return _openstudioutilitiessql.ReportingFrequencyVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiessql.delete_ReportingFrequencyVector

    __del__ = lambda self: None

ReportingFrequencyVector_swigregister = _openstudioutilitiessql.ReportingFrequencyVector_swigregister

ReportingFrequencyVector_swigregister(ReportingFrequencyVector)



class IntDateTimePair(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IntDateTimePair, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IntDateTimePair, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_IntDateTimePair(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_setmethods__["first"] = _openstudioutilitiessql.IntDateTimePair_first_set

    __swig_getmethods__["first"] = _openstudioutilitiessql.IntDateTimePair_first_get

    if _newclass:

        first = _swig_property(_openstudioutilitiessql.IntDateTimePair_first_get, _openstudioutilitiessql.IntDateTimePair_first_set)

    __swig_setmethods__["second"] = _openstudioutilitiessql.IntDateTimePair_second_set

    __swig_getmethods__["second"] = _openstudioutilitiessql.IntDateTimePair_second_get

    if _newclass:

        second = _swig_property(_openstudioutilitiessql.IntDateTimePair_second_get, _openstudioutilitiessql.IntDateTimePair_second_set)

    def __len__(self):

        return 2

    def __repr__(self):

        return str((self.first, self.second))

    def __getitem__(self, index): 

        if not (index % 2):

            return self.first

        else:

            return self.second

    def __setitem__(self, index, val):

        if not (index % 2):

            self.first = val

        else:

            self.second = val

    __swig_destroy__ = _openstudioutilitiessql.delete_IntDateTimePair

    __del__ = lambda self: None

IntDateTimePair_swigregister = _openstudioutilitiessql.IntDateTimePair_swigregister

IntDateTimePair_swigregister(IntDateTimePair)



class IntDateTimePairVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IntDateTimePairVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IntDateTimePairVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiessql.IntDateTimePairVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiessql.IntDateTimePairVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiessql.IntDateTimePairVector___bool__(self)



    def __len__(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::size_type":

        return _openstudioutilitiessql.IntDateTimePairVector___len__(self)



    def pop(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::value_type":

        return _openstudioutilitiessql.IntDateTimePairVector_pop(self)



    def __getslice__(self, i: 'std::vector< std::pair< int,openstudio::DateTime > >::difference_type', j: 'std::vector< std::pair< int,openstudio::DateTime > >::difference_type') -> "std::vector< std::pair< int,openstudio::DateTime >,std::allocator< std::pair< int,openstudio::DateTime > > > *":

        return _openstudioutilitiessql.IntDateTimePairVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< std::pair< int,openstudio::DateTime > >::difference_type', j: 'std::vector< std::pair< int,openstudio::DateTime > >::difference_type') -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< std::pair< int,openstudio::DateTime > >::value_type const &":

        return _openstudioutilitiessql.IntDateTimePairVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector___setitem__(self, *args)



    def append(self, x: 'IntDateTimePair') -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiessql.IntDateTimePairVector_empty(self)



    def size(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::size_type":

        return _openstudioutilitiessql.IntDateTimePairVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector_clear(self)



    def swap(self, v: 'IntDateTimePairVector') -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector_swap(self, v)



    def get_allocator(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::allocator_type":

        return _openstudioutilitiessql.IntDateTimePairVector_get_allocator(self)



    def begin(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::iterator":

        return _openstudioutilitiessql.IntDateTimePairVector_begin(self)



    def end(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::iterator":

        return _openstudioutilitiessql.IntDateTimePairVector_end(self)



    def rbegin(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::reverse_iterator":

        return _openstudioutilitiessql.IntDateTimePairVector_rbegin(self)



    def rend(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::reverse_iterator":

        return _openstudioutilitiessql.IntDateTimePairVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector_pop_back(self)



    def erase(self, *args) -> "std::vector< std::pair< int,openstudio::DateTime > >::iterator":

        return _openstudioutilitiessql.IntDateTimePairVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_IntDateTimePairVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'IntDateTimePair') -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector_push_back(self, x)



    def front(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::value_type const &":

        return _openstudioutilitiessql.IntDateTimePairVector_front(self)



    def back(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::value_type const &":

        return _openstudioutilitiessql.IntDateTimePairVector_back(self)



    def assign(self, n: 'std::vector< std::pair< int,openstudio::DateTime > >::size_type', x: 'IntDateTimePair') -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector_insert(self, *args)



    def reserve(self, n: 'std::vector< std::pair< int,openstudio::DateTime > >::size_type') -> "void":

        return _openstudioutilitiessql.IntDateTimePairVector_reserve(self, n)



    def capacity(self) -> "std::vector< std::pair< int,openstudio::DateTime > >::size_type":

        return _openstudioutilitiessql.IntDateTimePairVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiessql.delete_IntDateTimePairVector

    __del__ = lambda self: None

IntDateTimePairVector_swigregister = _openstudioutilitiessql.IntDateTimePairVector_swigregister

IntDateTimePairVector_swigregister(IntDateTimePairVector)



class SqlTimeSeriesQueryVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SqlTimeSeriesQueryVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SqlTimeSeriesQueryVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::size_type":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___len__(self)



    def pop(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::value_type":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::SqlFileTimeSeriesQuery >::difference_type', j: 'std::vector< openstudio::SqlFileTimeSeriesQuery >::difference_type') -> "std::vector< openstudio::SqlFileTimeSeriesQuery,std::allocator< openstudio::SqlFileTimeSeriesQuery > > *":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::SqlFileTimeSeriesQuery >::difference_type', j: 'std::vector< openstudio::SqlFileTimeSeriesQuery >::difference_type') -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::value_type const &":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___setitem__(self, *args)



    def append(self, x: 'SqlFileTimeSeriesQuery') -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_empty(self)



    def size(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::size_type":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_clear(self)



    def swap(self, v: 'SqlTimeSeriesQueryVector') -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::allocator_type":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::iterator":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_begin(self)



    def end(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::iterator":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::reverse_iterator":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::reverse_iterator":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::iterator":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_SqlTimeSeriesQueryVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SqlFileTimeSeriesQuery') -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::value_type const &":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_front(self)



    def back(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::value_type const &":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_back(self)



    def assign(self, n: 'std::vector< openstudio::SqlFileTimeSeriesQuery >::size_type', x: 'SqlFileTimeSeriesQuery') -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::SqlFileTimeSeriesQuery >::size_type') -> "void":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::SqlFileTimeSeriesQuery >::size_type":

        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiessql.delete_SqlTimeSeriesQueryVector

    __del__ = lambda self: None

SqlTimeSeriesQueryVector_swigregister = _openstudioutilitiessql.SqlTimeSeriesQueryVector_swigregister

SqlTimeSeriesQueryVector_swigregister(SqlTimeSeriesQueryVector)



class SqlFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SqlFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SqlFile, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_SqlFile(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiessql.delete_SqlFile

    __del__ = lambda self: None



    def removeIndexes(self) -> "void":

        return _openstudioutilitiessql.SqlFile_removeIndexes(self)



    def createIndexes(self) -> "void":

        return _openstudioutilitiessql.SqlFile_createIndexes(self)



    def connectionOpen(self) -> "bool":

        return _openstudioutilitiessql.SqlFile_connectionOpen(self)



    def path(self) -> "openstudio::path":

        return _openstudioutilitiessql.SqlFile_path(self)



    def supportedVersion(self) -> "bool":

        return _openstudioutilitiessql.SqlFile_supportedVersion(self)



    def close(self) -> "bool":

        return _openstudioutilitiessql.SqlFile_close(self)



    def reopen(self) -> "bool":

        return _openstudioutilitiessql.SqlFile_reopen(self)



    def energyPlusSqliteFile(self) -> "std::string":

        return _openstudioutilitiessql.SqlFile_energyPlusSqliteFile(self)



    def hoursSimulated(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_hoursSimulated(self)



    def netSiteEnergy(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_netSiteEnergy(self)



    def netSourceEnergy(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_netSourceEnergy(self)



    def totalSiteEnergy(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_totalSiteEnergy(self)



    def totalSourceEnergy(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_totalSourceEnergy(self)



    def annualTotalCost(self, fuel: 'FuelType') -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_annualTotalCost(self, fuel)



    def annualTotalCostPerBldgArea(self, fuel: 'FuelType') -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_annualTotalCostPerBldgArea(self, fuel)



    def annualTotalCostPerNetConditionedBldgArea(self, fuel: 'FuelType') -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_annualTotalCostPerNetConditionedBldgArea(self, fuel)



    def annualTotalUtilityCost(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_annualTotalUtilityCost(self)



    def economicsEnergyCost(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_economicsEnergyCost(self)



    def getElecOrGasUse(self, getGas: 'bool'=True) -> "openstudio::OptionalDouble":

        return _openstudioutilitiessql.SqlFile_getElecOrGasUse(self, getGas)



    def getElecOrGasCost(self, bGetGas: 'bool'=True) -> "openstudio::OptionalDouble":

        return _openstudioutilitiessql.SqlFile_getElecOrGasCost(self, bGetGas)



    def endUses(self) -> "boost::optional< openstudio::EndUses >":

        return _openstudioutilitiessql.SqlFile_endUses(self)



    def energyConsumptionByMonth(self, t_fuelType: 'EndUseFuelType', t_categoryType: 'EndUseCategoryType', t_monthOfYear: 'MonthOfYear') -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_energyConsumptionByMonth(self, t_fuelType, t_categoryType, t_monthOfYear)



    def peakEnergyDemandByMonth(self, t_fuelType: 'EndUseFuelType', t_categoryType: 'EndUseCategoryType', t_monthOfYear: 'MonthOfYear') -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_peakEnergyDemandByMonth(self, t_fuelType, t_categoryType, t_monthOfYear)



    def electricityHeating(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityHeating(self)



    def electricityCooling(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityCooling(self)



    def electricityInteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityInteriorLighting(self)



    def electricityExteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityExteriorLighting(self)



    def electricityInteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityInteriorEquipment(self)



    def electricityExteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityExteriorEquipment(self)



    def electricityFans(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityFans(self)



    def electricityPumps(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityPumps(self)



    def electricityHeatRejection(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityHeatRejection(self)



    def electricityHumidification(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityHumidification(self)



    def electricityHeatRecovery(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityHeatRecovery(self)



    def electricityWaterSystems(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityWaterSystems(self)



    def electricityRefrigeration(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityRefrigeration(self)



    def electricityGenerators(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityGenerators(self)



    def electricityTotalEndUses(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_electricityTotalEndUses(self)



    def naturalGasHeating(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasHeating(self)



    def naturalGasCooling(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasCooling(self)



    def naturalGasInteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasInteriorLighting(self)



    def naturalGasExteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasExteriorLighting(self)



    def naturalGasInteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasInteriorEquipment(self)



    def naturalGasExteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasExteriorEquipment(self)



    def naturalGasFans(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasFans(self)



    def naturalGasPumps(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasPumps(self)



    def naturalGasHeatRejection(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasHeatRejection(self)



    def naturalGasHumidification(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasHumidification(self)



    def naturalGasHeatRecovery(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasHeatRecovery(self)



    def naturalGasWaterSystems(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasWaterSystems(self)



    def naturalGasRefrigeration(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasRefrigeration(self)



    def naturalGasGenerators(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasGenerators(self)



    def naturalGasTotalEndUses(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_naturalGasTotalEndUses(self)



    def otherFuelHeating(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelHeating(self)



    def otherFuelCooling(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelCooling(self)



    def otherFuelInteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelInteriorLighting(self)



    def otherFuelExteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelExteriorLighting(self)



    def otherFuelInteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelInteriorEquipment(self)



    def otherFuelExteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelExteriorEquipment(self)



    def otherFuelFans(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelFans(self)



    def otherFuelPumps(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelPumps(self)



    def otherFuelHeatRejection(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelHeatRejection(self)



    def otherFuelHumidification(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelHumidification(self)



    def otherFuelHeatRecovery(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelHeatRecovery(self)



    def otherFuelWaterSystems(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelWaterSystems(self)



    def otherFuelRefrigeration(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelRefrigeration(self)



    def otherFuelGenerators(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelGenerators(self)



    def otherFuelTotalEndUses(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_otherFuelTotalEndUses(self)



    def districtCoolingHeating(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingHeating(self)



    def districtCoolingCooling(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingCooling(self)



    def districtCoolingInteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingInteriorLighting(self)



    def districtCoolingExteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingExteriorLighting(self)



    def districtCoolingInteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingInteriorEquipment(self)



    def districtCoolingExteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingExteriorEquipment(self)



    def districtCoolingFans(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingFans(self)



    def districtCoolingPumps(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingPumps(self)



    def districtCoolingHeatRejection(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingHeatRejection(self)



    def districtCoolingHumidification(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingHumidification(self)



    def districtCoolingHeatRecovery(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingHeatRecovery(self)



    def districtCoolingWaterSystems(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingWaterSystems(self)



    def districtCoolingRefrigeration(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingRefrigeration(self)



    def districtCoolingGenerators(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingGenerators(self)



    def districtCoolingTotalEndUses(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtCoolingTotalEndUses(self)



    def districtHeatingHeating(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingHeating(self)



    def districtHeatingCooling(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingCooling(self)



    def districtHeatingInteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingInteriorLighting(self)



    def districtHeatingExteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingExteriorLighting(self)



    def districtHeatingInteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingInteriorEquipment(self)



    def districtHeatingExteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingExteriorEquipment(self)



    def districtHeatingFans(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingFans(self)



    def districtHeatingPumps(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingPumps(self)



    def districtHeatingHeatRejection(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingHeatRejection(self)



    def districtHeatingHumidification(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingHumidification(self)



    def districtHeatingHeatRecovery(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingHeatRecovery(self)



    def districtHeatingWaterSystems(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingWaterSystems(self)



    def districtHeatingRefrigeration(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingRefrigeration(self)



    def districtHeatingGenerators(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingGenerators(self)



    def districtHeatingTotalEndUses(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_districtHeatingTotalEndUses(self)



    def waterHeating(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterHeating(self)



    def waterCooling(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterCooling(self)



    def waterInteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterInteriorLighting(self)



    def waterExteriorLighting(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterExteriorLighting(self)



    def waterInteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterInteriorEquipment(self)



    def waterExteriorEquipment(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterExteriorEquipment(self)



    def waterFans(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterFans(self)



    def waterPumps(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterPumps(self)



    def waterHeatRejection(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterHeatRejection(self)



    def waterHumidification(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterHumidification(self)



    def waterHeatRecovery(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterHeatRecovery(self)



    def waterWaterSystems(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterWaterSystems(self)



    def waterRefrigeration(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterRefrigeration(self)



    def waterGenerators(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterGenerators(self)



    def waterTotalEndUses(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_waterTotalEndUses(self)



    def hoursHeatingSetpointNotMet(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_hoursHeatingSetpointNotMet(self)



    def hoursCoolingSetpointNotMet(self) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_hoursCoolingSetpointNotMet(self)



    def daylightSavingsPeriod(self) -> "boost::optional< std::pair< openstudio::DateTime,openstudio::DateTime > >":

        return _openstudioutilitiessql.SqlFile_daylightSavingsPeriod(self)



    def energyPlusVersion(self) -> "std::string":

        return _openstudioutilitiessql.SqlFile_energyPlusVersion(self)



    def availableTimeSeries(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiessql.SqlFile_availableTimeSeries(self)



    def environmentType(self, envPeriod: 'std::string const &') -> "boost::optional< openstudio::EnvironmentType >":

        return _openstudioutilitiessql.SqlFile_environmentType(self, envPeriod)



    def availableEnvPeriods(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiessql.SqlFile_availableEnvPeriods(self)



    def availableReportingFrequencies(self, envPeriod: 'std::string const &') -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiessql.SqlFile_availableReportingFrequencies(self, envPeriod)



    def reportingFrequencyFromDB(self, dbReportingFrequency: 'std::string const &') -> "boost::optional< openstudio::ReportingFrequency >":

        return _openstudioutilitiessql.SqlFile_reportingFrequencyFromDB(self, dbReportingFrequency)



    def availableVariableNames(self, envPeriod: 'std::string const &', reportingFrequency: 'std::string const &') -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiessql.SqlFile_availableVariableNames(self, envPeriod, reportingFrequency)



    def availableKeyValues(self, envPeriod: 'std::string const &', reportingFrequency: 'std::string const &', timeSeriesName: 'std::string const &') -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiessql.SqlFile_availableKeyValues(self, envPeriod, reportingFrequency, timeSeriesName)



    def runPeriodValue(self, envPeriod: 'std::string const &', timeSeriesName: 'std::string const &', keyValue: 'std::string const &') -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_runPeriodValue(self, envPeriod, timeSeriesName, keyValue)



    def expandQuery(self, query: 'SqlFileTimeSeriesQuery') -> "std::vector< openstudio::SqlFileTimeSeriesQuery,std::allocator< openstudio::SqlFileTimeSeriesQuery > >":

        return _openstudioutilitiessql.SqlFile_expandQuery(self, query)



    def timeSeries(self, *args) -> "std::vector< openstudio::TimeSeries,std::allocator< openstudio::TimeSeries > >":

        return _openstudioutilitiessql.SqlFile_timeSeries(self, *args)



    def illuminanceMapNames(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiessql.SqlFile_illuminanceMapNames(self, *args)



    def illuminanceMapZoneNames(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiessql.SqlFile_illuminanceMapZoneNames(self, *args)



    def illuminanceMapRefPt(self, *args) -> "boost::optional< std::string >":

        return _openstudioutilitiessql.SqlFile_illuminanceMapRefPt(self, *args)



    def illuminanceMapMinValue(self, *args) -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_illuminanceMapMinValue(self, *args)



    def illuminanceMapMaxValue(self, *args) -> "void":

        return _openstudioutilitiessql.SqlFile_illuminanceMapMaxValue(self, *args)



    def illuminanceMapIndex(self, name: 'std::string const &') -> "boost::optional< int >":

        return _openstudioutilitiessql.SqlFile_illuminanceMapIndex(self, name)



    def illuminanceMapX(self, *args) -> "openstudio::Vector":

        return _openstudioutilitiessql.SqlFile_illuminanceMapX(self, *args)



    def illuminanceMapY(self, *args) -> "openstudio::Vector":

        return _openstudioutilitiessql.SqlFile_illuminanceMapY(self, *args)



    def illuminanceMapHourlyReportIndex(self, mapIndex: 'int const &', dateTime: 'DateTime') -> "boost::optional< int >":

        return _openstudioutilitiessql.SqlFile_illuminanceMapHourlyReportIndex(self, mapIndex, dateTime)



    def illuminanceMapDate(self, hourlyReportIndex: 'int const &') -> "boost::optional< openstudio::DateTime >":

        return _openstudioutilitiessql.SqlFile_illuminanceMapDate(self, hourlyReportIndex)



    def illuminanceMapHourlyReportIndicesDates(self, *args) -> "std::vector< std::pair< int,openstudio::DateTime >,std::allocator< std::pair< int,openstudio::DateTime > > >":

        return _openstudioutilitiessql.SqlFile_illuminanceMapHourlyReportIndicesDates(self, *args)



    def illuminanceMapHourlyReportIndices(self, *args) -> "std::vector< int,std::allocator< int > >":

        return _openstudioutilitiessql.SqlFile_illuminanceMapHourlyReportIndices(self, *args)



    def illuminanceMap(self, *args) -> "void":

        return _openstudioutilitiessql.SqlFile_illuminanceMap(self, *args)



    def getSummaryData(self) -> "std::vector< SummaryData,std::allocator< SummaryData > >":

        return _openstudioutilitiessql.SqlFile_getSummaryData(self)



    def insertZone(self, t_name: 'std::string const &', t_relNorth: 'double', t_originX: 'double', t_originY: 'double', t_originZ: 'double', t_centroidX: 'double', t_centroidY: 'double', t_centroidZ: 'double', t_ofType: 'int', t_multiplier: 'double', t_listMultiplier: 'double', t_minimumX: 'double', t_maximumX: 'double', t_minimumY: 'double', t_maximumY: 'double', t_minimumZ: 'double', t_maximumZ: 'double', t_ceilingHeight: 'double', t_volume: 'double', t_insideConvectionAlgo: 'int', t_outsideConvectionAlgo: 'int', t_floorArea: 'double', t_extGrossWallArea: 'double', t_extNetWallArea: 'double', t_extWindowArea: 'double', t_isPartOfTotalArea: 'bool') -> "int":

        return _openstudioutilitiessql.SqlFile_insertZone(self, t_name, t_relNorth, t_originX, t_originY, t_originZ, t_centroidX, t_centroidY, t_centroidZ, t_ofType, t_multiplier, t_listMultiplier, t_minimumX, t_maximumX, t_minimumY, t_maximumY, t_minimumZ, t_maximumZ, t_ceilingHeight, t_volume, t_insideConvectionAlgo, t_outsideConvectionAlgo, t_floorArea, t_extGrossWallArea, t_extNetWallArea, t_extWindowArea, t_isPartOfTotalArea)



    def insertIlluminanceMap(self, t_zoneName: 'std::string const &', name: 'std::string const &', t_environmentName: 'std::string const &', t_times: 'DateTimeVector', t_xs: 'DoubleVector', t_ys: 'DoubleVector', t_z: 'double', t_maps: 'MatrixVector') -> "void":

        return _openstudioutilitiessql.SqlFile_insertIlluminanceMap(self, t_zoneName, name, t_environmentName, t_times, t_xs, t_ys, t_z, t_maps)



    def execAndReturnFirstDouble(self, statement: 'std::string const &') -> "boost::optional< double >":

        return _openstudioutilitiessql.SqlFile_execAndReturnFirstDouble(self, statement)



    def execAndReturnFirstInt(self, statement: 'std::string const &') -> "boost::optional< int >":

        return _openstudioutilitiessql.SqlFile_execAndReturnFirstInt(self, statement)



    def execAndReturnFirstString(self, statement: 'std::string const &') -> "boost::optional< std::string >":

        return _openstudioutilitiessql.SqlFile_execAndReturnFirstString(self, statement)



    def execAndReturnVectorOfDouble(self, statement: 'std::string const &') -> "boost::optional< std::vector< double,std::allocator< double > > >":

        return _openstudioutilitiessql.SqlFile_execAndReturnVectorOfDouble(self, statement)



    def execAndReturnVectorOfInt(self, statement: 'std::string const &') -> "boost::optional< std::vector< int,std::allocator< int > > >":

        return _openstudioutilitiessql.SqlFile_execAndReturnVectorOfInt(self, statement)



    def execAndReturnVectorOfString(self, statement: 'std::string const &') -> "boost::optional< std::vector< std::string,std::allocator< std::string > > >":

        return _openstudioutilitiessql.SqlFile_execAndReturnVectorOfString(self, statement)



    def execute(self, statement: 'std::string const &') -> "int":

        return _openstudioutilitiessql.SqlFile_execute(self, statement)



    def insertTimeSeriesData(self, t_variableType: 'std::string const &', t_indexGroup: 'std::string const &', t_timestepType: 'std::string const &', t_keyValue: 'std::string const &', t_variableName: 'std::string const &', t_reportingFrequency: 'ReportingFrequency', t_scheduleName: 'OptionalString', t_variableUnits: 'std::string const &', t_timeSeries: 'TimeSeries') -> "void":

        return _openstudioutilitiessql.SqlFile_insertTimeSeriesData(self, t_variableType, t_indexGroup, t_timestepType, t_keyValue, t_variableName, t_reportingFrequency, t_scheduleName, t_variableUnits, t_timeSeries)



    def __eq__(self, other: 'SqlFile') -> "bool":

        return _openstudioutilitiessql.SqlFile___eq__(self, other)



    def __lt__(self, other: 'SqlFile') -> "bool":

        return _openstudioutilitiessql.SqlFile___lt__(self, other)

SqlFile_swigregister = _openstudioutilitiessql.SqlFile_swigregister

SqlFile_swigregister(SqlFile)



class EnvironmentIdentifier(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvironmentIdentifier, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, EnvironmentIdentifier, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_EnvironmentIdentifier(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def type(self) -> "boost::optional< openstudio::EnvironmentType >":

        return _openstudioutilitiessql.EnvironmentIdentifier_type(self)



    def name(self) -> "boost::optional< std::string >":

        return _openstudioutilitiessql.EnvironmentIdentifier_name(self)

    __swig_destroy__ = _openstudioutilitiessql.delete_EnvironmentIdentifier

    __del__ = lambda self: None

EnvironmentIdentifier_swigregister = _openstudioutilitiessql.EnvironmentIdentifier_swigregister

EnvironmentIdentifier_swigregister(EnvironmentIdentifier)



class TimeSeriesIdentifier(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesIdentifier, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesIdentifier, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_TimeSeriesIdentifier(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def name(self) -> "boost::optional< std::string >":

        return _openstudioutilitiessql.TimeSeriesIdentifier_name(self)



    def regex(self) -> "boost::optional< boost::regex >":

        return _openstudioutilitiessql.TimeSeriesIdentifier_regex(self)

    __swig_destroy__ = _openstudioutilitiessql.delete_TimeSeriesIdentifier

    __del__ = lambda self: None

TimeSeriesIdentifier_swigregister = _openstudioutilitiessql.TimeSeriesIdentifier_swigregister

TimeSeriesIdentifier_swigregister(TimeSeriesIdentifier)



class KeyValueIdentifier(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyValueIdentifier, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, KeyValueIdentifier, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_KeyValueIdentifier(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def names(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiessql.KeyValueIdentifier_names(self)



    def regex(self) -> "boost::optional< boost::regex >":

        return _openstudioutilitiessql.KeyValueIdentifier_regex(self)

    __swig_destroy__ = _openstudioutilitiessql.delete_KeyValueIdentifier

    __del__ = lambda self: None

KeyValueIdentifier_swigregister = _openstudioutilitiessql.KeyValueIdentifier_swigregister

KeyValueIdentifier_swigregister(KeyValueIdentifier)



class SqlFileTimeSeriesQuery(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SqlFileTimeSeriesQuery, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SqlFileTimeSeriesQuery, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_SqlFileTimeSeriesQuery(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def environment(self) -> "boost::optional< openstudio::EnvironmentIdentifier >":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_environment(self)



    def reportingFrequency(self) -> "boost::optional< openstudio::ReportingFrequency >":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_reportingFrequency(self)



    def timeSeries(self) -> "boost::optional< openstudio::TimeSeriesIdentifier >":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_timeSeries(self)



    def keyValues(self) -> "boost::optional< openstudio::KeyValueIdentifier >":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_keyValues(self)



    def vetted(self) -> "bool":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_vetted(self)



    def setEnvironment(self, envId: 'EnvironmentIdentifier') -> "void":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_setEnvironment(self, envId)



    def setReportingFrequency(self, rf: 'ReportingFrequency') -> "void":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_setReportingFrequency(self, rf)



    def setTimeSeries(self, tsId: 'TimeSeriesIdentifier') -> "void":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_setTimeSeries(self, tsId)



    def setKeyValues(self, kvId: 'KeyValueIdentifier') -> "void":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_setKeyValues(self, kvId)



    def clearEnvironment(self) -> "void":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_clearEnvironment(self)



    def clearReportingFrequency(self) -> "void":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_clearReportingFrequency(self)



    def clearTimeSeries(self) -> "void":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_clearTimeSeries(self)



    def clearKeyValues(self) -> "void":

        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_clearKeyValues(self)

    __swig_destroy__ = _openstudioutilitiessql.delete_SqlFileTimeSeriesQuery

    __del__ = lambda self: None

SqlFileTimeSeriesQuery_swigregister = _openstudioutilitiessql.SqlFileTimeSeriesQuery_swigregister

SqlFileTimeSeriesQuery_swigregister(SqlFileTimeSeriesQuery)





def environmentPeriods(queries: 'SqlTimeSeriesQueryVector') -> "std::set< std::string,std::less< std::string >,std::allocator< std::string > >":

    return _openstudioutilitiessql.environmentPeriods(queries)

environmentPeriods = _openstudioutilitiessql.environmentPeriods



def reportingFrequencies(queries: 'SqlTimeSeriesQueryVector') -> "std::set< openstudio::ReportingFrequency,std::less< openstudio::ReportingFrequency >,std::allocator< openstudio::ReportingFrequency > >":

    return _openstudioutilitiessql.reportingFrequencies(queries)

reportingFrequencies = _openstudioutilitiessql.reportingFrequencies



def timeSeriesNames(queries: 'SqlTimeSeriesQueryVector') -> "std::set< std::string,std::less< std::string >,std::allocator< std::string > >":

    return _openstudioutilitiessql.timeSeriesNames(queries)

timeSeriesNames = _openstudioutilitiessql.timeSeriesNames

class ReportingFrequency(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportingFrequency, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ReportingFrequency, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_ReportingFrequency(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiessql.ReportingFrequency_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiessql.ReportingFrequency_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiessql.ReportingFrequency_valueDescription(self)



    def __eq__(self, other: 'ReportingFrequency') -> "bool":

        return _openstudioutilitiessql.ReportingFrequency___eq__(self, other)



    def __ne__(self, other: 'ReportingFrequency') -> "bool":

        return _openstudioutilitiessql.ReportingFrequency___ne__(self, other)



    def __gt__(self, other: 'ReportingFrequency') -> "bool":

        return _openstudioutilitiessql.ReportingFrequency___gt__(self, other)



    def __ge__(self, other: 'ReportingFrequency') -> "bool":

        return _openstudioutilitiessql.ReportingFrequency___ge__(self, other)



    def __lt__(self, other: 'ReportingFrequency') -> "bool":

        return _openstudioutilitiessql.ReportingFrequency___lt__(self, other)



    def __le__(self, other: 'ReportingFrequency') -> "bool":

        return _openstudioutilitiessql.ReportingFrequency___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiessql.ReportingFrequency_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiessql.ReportingFrequency_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiessql.ReportingFrequency_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiessql.ReportingFrequency_getValues)

    __swig_destroy__ = _openstudioutilitiessql.delete_ReportingFrequency

    __del__ = lambda self: None

ReportingFrequency_swigregister = _openstudioutilitiessql.ReportingFrequency_swigregister

ReportingFrequency_swigregister(ReportingFrequency)



def ReportingFrequency_enumName() -> "std::string":

    return _openstudioutilitiessql.ReportingFrequency_enumName()

ReportingFrequency_enumName = _openstudioutilitiessql.ReportingFrequency_enumName



def ReportingFrequency_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiessql.ReportingFrequency_getValues()

ReportingFrequency_getValues = _openstudioutilitiessql.ReportingFrequency_getValues



class EnvironmentType(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvironmentType, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, EnvironmentType, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiessql.new_EnvironmentType(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiessql.EnvironmentType_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiessql.EnvironmentType_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiessql.EnvironmentType_valueDescription(self)



    def __eq__(self, other: 'EnvironmentType') -> "bool":

        return _openstudioutilitiessql.EnvironmentType___eq__(self, other)



    def __ne__(self, other: 'EnvironmentType') -> "bool":

        return _openstudioutilitiessql.EnvironmentType___ne__(self, other)



    def __gt__(self, other: 'EnvironmentType') -> "bool":

        return _openstudioutilitiessql.EnvironmentType___gt__(self, other)



    def __ge__(self, other: 'EnvironmentType') -> "bool":

        return _openstudioutilitiessql.EnvironmentType___ge__(self, other)



    def __lt__(self, other: 'EnvironmentType') -> "bool":

        return _openstudioutilitiessql.EnvironmentType___lt__(self, other)



    def __le__(self, other: 'EnvironmentType') -> "bool":

        return _openstudioutilitiessql.EnvironmentType___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiessql.EnvironmentType_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiessql.EnvironmentType_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiessql.EnvironmentType_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiessql.EnvironmentType_getValues)

    __swig_destroy__ = _openstudioutilitiessql.delete_EnvironmentType

    __del__ = lambda self: None

EnvironmentType_swigregister = _openstudioutilitiessql.EnvironmentType_swigregister

EnvironmentType_swigregister(EnvironmentType)



def EnvironmentType_enumName() -> "std::string":

    return _openstudioutilitiessql.EnvironmentType_enumName()

EnvironmentType_enumName = _openstudioutilitiessql.EnvironmentType_enumName



def EnvironmentType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiessql.EnvironmentType_getValues()

EnvironmentType_getValues = _openstudioutilitiessql.EnvironmentType_getValues



# This file is compatible with both classic and new-style classes.





