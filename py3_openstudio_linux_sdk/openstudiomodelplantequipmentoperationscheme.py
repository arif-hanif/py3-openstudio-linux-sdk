# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudiomodelplantequipmentoperationscheme', [dirname(__file__)])
        except ImportError:
            import _openstudiomodelplantequipmentoperationscheme
            return _openstudiomodelplantequipmentoperationscheme
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudiomodelplantequipmentoperationscheme', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudiomodelplantequipmentoperationscheme = swig_import_helper()
    del swig_import_helper
else:
    import _openstudiomodelplantequipmentoperationscheme
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudiomodelplantequipmentoperationscheme.SHARED_PTR_DISOWN_swigconstant(_openstudiomodelplantequipmentoperationscheme)
SHARED_PTR_DISOWN = _openstudiomodelplantequipmentoperationscheme.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac
class PlantEquipmentOperationCoolingLoadVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationCoolingLoadVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationCoolingLoadVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad,std::allocator< openstudio::model::PlantEquipmentOperationCoolingLoad > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::difference_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___setitem__(self, *args)

    def append(self, x: 'PlantEquipmentOperationCoolingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_clear(self)

    def swap(self, v: 'PlantEquipmentOperationCoolingLoadVector') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationCoolingLoadVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PlantEquipmentOperationCoolingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type', x: 'PlantEquipmentOperationCoolingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type', x: 'PlantEquipmentOperationCoolingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationCoolingLoadVector
    __del__ = lambda self: None
PlantEquipmentOperationCoolingLoadVector_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_swigregister
PlantEquipmentOperationCoolingLoadVector_swigregister(PlantEquipmentOperationCoolingLoadVector)

class OptionalPlantEquipmentOperationCoolingLoad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationCoolingLoad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationCoolingLoad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationCoolingLoad(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationCoolingLoad":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationCoolingLoad":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_get(self)

    def set(self, t: 'PlantEquipmentOperationCoolingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationCoolingLoad
    __del__ = lambda self: None
OptionalPlantEquipmentOperationCoolingLoad_swigregister = _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_swigregister
OptionalPlantEquipmentOperationCoolingLoad_swigregister(OptionalPlantEquipmentOperationCoolingLoad)

class PlantEquipmentOperationHeatingLoadVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationHeatingLoadVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationHeatingLoadVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad,std::allocator< openstudio::model::PlantEquipmentOperationHeatingLoad > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::difference_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___setitem__(self, *args)

    def append(self, x: 'PlantEquipmentOperationHeatingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_clear(self)

    def swap(self, v: 'PlantEquipmentOperationHeatingLoadVector') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationHeatingLoadVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PlantEquipmentOperationHeatingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type', x: 'PlantEquipmentOperationHeatingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type', x: 'PlantEquipmentOperationHeatingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationHeatingLoadVector
    __del__ = lambda self: None
PlantEquipmentOperationHeatingLoadVector_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_swigregister
PlantEquipmentOperationHeatingLoadVector_swigregister(PlantEquipmentOperationHeatingLoadVector)

class OptionalPlantEquipmentOperationHeatingLoad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationHeatingLoad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationHeatingLoad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationHeatingLoad(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationHeatingLoad":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationHeatingLoad":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_get(self)

    def set(self, t: 'PlantEquipmentOperationHeatingLoad') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationHeatingLoad
    __del__ = lambda self: None
OptionalPlantEquipmentOperationHeatingLoad_swigregister = _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_swigregister
OptionalPlantEquipmentOperationHeatingLoad_swigregister(OptionalPlantEquipmentOperationHeatingLoad)

class PlantEquipmentOperationOutdoorDryBulbVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorDryBulbVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorDryBulbVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulb > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::difference_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___setitem__(self, *args)

    def append(self, x: 'PlantEquipmentOperationOutdoorDryBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_clear(self)

    def swap(self, v: 'PlantEquipmentOperationOutdoorDryBulbVector') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulbVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PlantEquipmentOperationOutdoorDryBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type', x: 'PlantEquipmentOperationOutdoorDryBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type', x: 'PlantEquipmentOperationOutdoorDryBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulbVector
    __del__ = lambda self: None
PlantEquipmentOperationOutdoorDryBulbVector_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_swigregister
PlantEquipmentOperationOutdoorDryBulbVector_swigregister(PlantEquipmentOperationOutdoorDryBulbVector)

class OptionalPlantEquipmentOperationOutdoorDryBulb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationOutdoorDryBulb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationOutdoorDryBulb, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDryBulb(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDryBulb":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDryBulb":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_get(self)

    def set(self, t: 'PlantEquipmentOperationOutdoorDryBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDryBulb
    __del__ = lambda self: None
OptionalPlantEquipmentOperationOutdoorDryBulb_swigregister = _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_swigregister
OptionalPlantEquipmentOperationOutdoorDryBulb_swigregister(OptionalPlantEquipmentOperationOutdoorDryBulb)

class PlantEquipmentOperationOutdoorWetBulbVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorWetBulbVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorWetBulbVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulb > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::difference_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___setitem__(self, *args)

    def append(self, x: 'PlantEquipmentOperationOutdoorWetBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_clear(self)

    def swap(self, v: 'PlantEquipmentOperationOutdoorWetBulbVector') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulbVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PlantEquipmentOperationOutdoorWetBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type', x: 'PlantEquipmentOperationOutdoorWetBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type', x: 'PlantEquipmentOperationOutdoorWetBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulbVector
    __del__ = lambda self: None
PlantEquipmentOperationOutdoorWetBulbVector_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_swigregister
PlantEquipmentOperationOutdoorWetBulbVector_swigregister(PlantEquipmentOperationOutdoorWetBulbVector)

class OptionalPlantEquipmentOperationOutdoorWetBulb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationOutdoorWetBulb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationOutdoorWetBulb, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorWetBulb(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorWetBulb":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorWetBulb":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_get(self)

    def set(self, t: 'PlantEquipmentOperationOutdoorWetBulb') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorWetBulb
    __del__ = lambda self: None
OptionalPlantEquipmentOperationOutdoorWetBulb_swigregister = _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_swigregister
OptionalPlantEquipmentOperationOutdoorWetBulb_swigregister(OptionalPlantEquipmentOperationOutdoorWetBulb)

class PlantEquipmentOperationOutdoorDewpointVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorDewpointVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorDewpointVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpoint > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::difference_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___setitem__(self, *args)

    def append(self, x: 'PlantEquipmentOperationOutdoorDewpoint') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_clear(self)

    def swap(self, v: 'PlantEquipmentOperationOutdoorDewpointVector') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpointVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PlantEquipmentOperationOutdoorDewpoint') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type', x: 'PlantEquipmentOperationOutdoorDewpoint') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type', x: 'PlantEquipmentOperationOutdoorDewpoint') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpointVector
    __del__ = lambda self: None
PlantEquipmentOperationOutdoorDewpointVector_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_swigregister
PlantEquipmentOperationOutdoorDewpointVector_swigregister(PlantEquipmentOperationOutdoorDewpointVector)

class OptionalPlantEquipmentOperationOutdoorDewpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationOutdoorDewpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationOutdoorDewpoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDewpoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDewpoint":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDewpoint":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_get(self)

    def set(self, t: 'PlantEquipmentOperationOutdoorDewpoint') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDewpoint
    __del__ = lambda self: None
OptionalPlantEquipmentOperationOutdoorDewpoint_swigregister = _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_swigregister
OptionalPlantEquipmentOperationOutdoorDewpoint_swigregister(OptionalPlantEquipmentOperationOutdoorDewpoint)

class PlantEquipmentOperationOutdoorRelativeHumidityVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorRelativeHumidityVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorRelativeHumidityVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::difference_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___setitem__(self, *args)

    def append(self, x: 'PlantEquipmentOperationOutdoorRelativeHumidity') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_clear(self)

    def swap(self, v: 'PlantEquipmentOperationOutdoorRelativeHumidityVector') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorRelativeHumidityVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PlantEquipmentOperationOutdoorRelativeHumidity') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type', x: 'PlantEquipmentOperationOutdoorRelativeHumidity') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type', x: 'PlantEquipmentOperationOutdoorRelativeHumidity') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorRelativeHumidityVector
    __del__ = lambda self: None
PlantEquipmentOperationOutdoorRelativeHumidityVector_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_swigregister
PlantEquipmentOperationOutdoorRelativeHumidityVector_swigregister(PlantEquipmentOperationOutdoorRelativeHumidityVector)

class OptionalPlantEquipmentOperationOutdoorRelativeHumidity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationOutdoorRelativeHumidity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationOutdoorRelativeHumidity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorRelativeHumidity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_get(self)

    def set(self, t: 'PlantEquipmentOperationOutdoorRelativeHumidity') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorRelativeHumidity
    __del__ = lambda self: None
OptionalPlantEquipmentOperationOutdoorRelativeHumidity_swigregister = _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_swigregister
OptionalPlantEquipmentOperationOutdoorRelativeHumidity_swigregister(OptionalPlantEquipmentOperationOutdoorRelativeHumidity)

class PlantEquipmentOperationOutdoorDryBulbDifferenceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorDryBulbDifferenceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorDryBulbDifferenceVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::difference_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___setitem__(self, *args)

    def append(self, x: 'PlantEquipmentOperationOutdoorDryBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_clear(self)

    def swap(self, v: 'PlantEquipmentOperationOutdoorDryBulbDifferenceVector') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulbDifferenceVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PlantEquipmentOperationOutdoorDryBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type', x: 'PlantEquipmentOperationOutdoorDryBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type', x: 'PlantEquipmentOperationOutdoorDryBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulbDifferenceVector
    __del__ = lambda self: None
PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swigregister
PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swigregister(PlantEquipmentOperationOutdoorDryBulbDifferenceVector)

class OptionalPlantEquipmentOperationOutdoorDryBulbDifference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationOutdoorDryBulbDifference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationOutdoorDryBulbDifference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDryBulbDifference(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_get(self)

    def set(self, t: 'PlantEquipmentOperationOutdoorDryBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDryBulbDifference
    __del__ = lambda self: None
OptionalPlantEquipmentOperationOutdoorDryBulbDifference_swigregister = _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_swigregister
OptionalPlantEquipmentOperationOutdoorDryBulbDifference_swigregister(OptionalPlantEquipmentOperationOutdoorDryBulbDifference)

class PlantEquipmentOperationOutdoorWetBulbDifferenceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorWetBulbDifferenceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorWetBulbDifferenceVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::difference_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___setitem__(self, *args)

    def append(self, x: 'PlantEquipmentOperationOutdoorWetBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_clear(self)

    def swap(self, v: 'PlantEquipmentOperationOutdoorWetBulbDifferenceVector') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulbDifferenceVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PlantEquipmentOperationOutdoorWetBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type', x: 'PlantEquipmentOperationOutdoorWetBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type', x: 'PlantEquipmentOperationOutdoorWetBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulbDifferenceVector
    __del__ = lambda self: None
PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swigregister
PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swigregister(PlantEquipmentOperationOutdoorWetBulbDifferenceVector)

class OptionalPlantEquipmentOperationOutdoorWetBulbDifference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationOutdoorWetBulbDifference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationOutdoorWetBulbDifference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorWetBulbDifference(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_get(self)

    def set(self, t: 'PlantEquipmentOperationOutdoorWetBulbDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorWetBulbDifference
    __del__ = lambda self: None
OptionalPlantEquipmentOperationOutdoorWetBulbDifference_swigregister = _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_swigregister
OptionalPlantEquipmentOperationOutdoorWetBulbDifference_swigregister(OptionalPlantEquipmentOperationOutdoorWetBulbDifference)

class PlantEquipmentOperationOutdoorDewpointDifferenceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorDewpointDifferenceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorDewpointDifferenceVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::value_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference > > *":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::difference_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___setitem__(self, *args)

    def append(self, x: 'PlantEquipmentOperationOutdoorDewpointDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_clear(self)

    def swap(self, v: 'PlantEquipmentOperationOutdoorDewpointDifferenceVector') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::allocator_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::reverse_iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::iterator":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpointDifferenceVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PlantEquipmentOperationOutdoorDewpointDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::value_type const &":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type', x: 'PlantEquipmentOperationOutdoorDewpointDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type', x: 'PlantEquipmentOperationOutdoorDewpointDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >::size_type":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpointDifferenceVector
    __del__ = lambda self: None
PlantEquipmentOperationOutdoorDewpointDifferenceVector_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_swigregister
PlantEquipmentOperationOutdoorDewpointDifferenceVector_swigregister(PlantEquipmentOperationOutdoorDewpointDifferenceVector)

class OptionalPlantEquipmentOperationOutdoorDewpointDifference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationOutdoorDewpointDifference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationOutdoorDewpointDifference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDewpointDifference(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_reset(self)

    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_isNull(self)

    def get(self) -> "openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_get(self)

    def set(self, t: 'PlantEquipmentOperationOutdoorDewpointDifference') -> "void":
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_set(self, t)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDewpointDifference
    __del__ = lambda self: None
OptionalPlantEquipmentOperationOutdoorDewpointDifference_swigregister = _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_swigregister
OptionalPlantEquipmentOperationOutdoorDewpointDifference_swigregister(OptionalPlantEquipmentOperationOutdoorDewpointDifference)

class PlantEquipmentOperationCoolingLoad(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationCoolingLoad, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationCoolingLoad, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationCoolingLoad(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationCoolingLoad
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_iddObjectType)
PlantEquipmentOperationCoolingLoad_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_swigregister
PlantEquipmentOperationCoolingLoad_swigregister(PlantEquipmentOperationCoolingLoad)

def PlantEquipmentOperationCoolingLoad_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_iddObjectType()
PlantEquipmentOperationCoolingLoad_iddObjectType = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_iddObjectType


def toPlantEquipmentOperationCoolingLoad(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationCoolingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationCoolingLoad(idfObject)
toPlantEquipmentOperationCoolingLoad = _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationCoolingLoad

def getPlantEquipmentOperationCoolingLoad(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationCoolingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoad(t_model, t_handle)
getPlantEquipmentOperationCoolingLoad = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoad

def getPlantEquipmentOperationCoolingLoads(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad,std::allocator< openstudio::model::PlantEquipmentOperationCoolingLoad > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoads(t_model)
getPlantEquipmentOperationCoolingLoads = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoads

def getPlantEquipmentOperationCoolingLoadByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationCoolingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoadByName(t_model, t_name)
getPlantEquipmentOperationCoolingLoadByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoadByName

def getPlantEquipmentOperationCoolingLoadsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationCoolingLoad,std::allocator< openstudio::model::PlantEquipmentOperationCoolingLoad > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoadsByName(t_model, t_name, t_exactMatch)
getPlantEquipmentOperationCoolingLoadsByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoadsByName
class PlantEquipmentOperationHeatingLoad(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationHeatingLoad, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationHeatingLoad, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationHeatingLoad(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationHeatingLoad
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_iddObjectType)
PlantEquipmentOperationHeatingLoad_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_swigregister
PlantEquipmentOperationHeatingLoad_swigregister(PlantEquipmentOperationHeatingLoad)

def PlantEquipmentOperationHeatingLoad_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_iddObjectType()
PlantEquipmentOperationHeatingLoad_iddObjectType = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_iddObjectType


def toPlantEquipmentOperationHeatingLoad(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationHeatingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationHeatingLoad(idfObject)
toPlantEquipmentOperationHeatingLoad = _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationHeatingLoad

def getPlantEquipmentOperationHeatingLoad(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationHeatingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoad(t_model, t_handle)
getPlantEquipmentOperationHeatingLoad = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoad

def getPlantEquipmentOperationHeatingLoads(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad,std::allocator< openstudio::model::PlantEquipmentOperationHeatingLoad > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoads(t_model)
getPlantEquipmentOperationHeatingLoads = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoads

def getPlantEquipmentOperationHeatingLoadByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationHeatingLoad >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoadByName(t_model, t_name)
getPlantEquipmentOperationHeatingLoadByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoadByName

def getPlantEquipmentOperationHeatingLoadsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationHeatingLoad,std::allocator< openstudio::model::PlantEquipmentOperationHeatingLoad > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoadsByName(t_model, t_name, t_exactMatch)
getPlantEquipmentOperationHeatingLoadsByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoadsByName
class PlantEquipmentOperationOutdoorDryBulb(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorDryBulb, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorDryBulb, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulb(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulb
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_iddObjectType)
PlantEquipmentOperationOutdoorDryBulb_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_swigregister
PlantEquipmentOperationOutdoorDryBulb_swigregister(PlantEquipmentOperationOutdoorDryBulb)

def PlantEquipmentOperationOutdoorDryBulb_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_iddObjectType()
PlantEquipmentOperationOutdoorDryBulb_iddObjectType = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_iddObjectType


def toPlantEquipmentOperationOutdoorDryBulb(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDryBulb(idfObject)
toPlantEquipmentOperationOutdoorDryBulb = _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDryBulb

def getPlantEquipmentOperationOutdoorDryBulb(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulb(t_model, t_handle)
getPlantEquipmentOperationOutdoorDryBulb = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulb

def getPlantEquipmentOperationOutdoorDryBulbs(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulb > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbs(t_model)
getPlantEquipmentOperationOutdoorDryBulbs = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbs

def getPlantEquipmentOperationOutdoorDryBulbByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulb >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbByName(t_model, t_name)
getPlantEquipmentOperationOutdoorDryBulbByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbByName

def getPlantEquipmentOperationOutdoorDryBulbsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulb > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbsByName(t_model, t_name, t_exactMatch)
getPlantEquipmentOperationOutdoorDryBulbsByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbsByName
class PlantEquipmentOperationOutdoorWetBulb(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorWetBulb, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorWetBulb, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulb(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulb
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_iddObjectType)
PlantEquipmentOperationOutdoorWetBulb_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_swigregister
PlantEquipmentOperationOutdoorWetBulb_swigregister(PlantEquipmentOperationOutdoorWetBulb)

def PlantEquipmentOperationOutdoorWetBulb_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_iddObjectType()
PlantEquipmentOperationOutdoorWetBulb_iddObjectType = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_iddObjectType


def toPlantEquipmentOperationOutdoorWetBulb(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorWetBulb(idfObject)
toPlantEquipmentOperationOutdoorWetBulb = _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorWetBulb

def getPlantEquipmentOperationOutdoorWetBulb(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulb(t_model, t_handle)
getPlantEquipmentOperationOutdoorWetBulb = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulb

def getPlantEquipmentOperationOutdoorWetBulbs(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulb > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbs(t_model)
getPlantEquipmentOperationOutdoorWetBulbs = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbs

def getPlantEquipmentOperationOutdoorWetBulbByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulb >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbByName(t_model, t_name)
getPlantEquipmentOperationOutdoorWetBulbByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbByName

def getPlantEquipmentOperationOutdoorWetBulbsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulb,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulb > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbsByName(t_model, t_name, t_exactMatch)
getPlantEquipmentOperationOutdoorWetBulbsByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbsByName
class PlantEquipmentOperationOutdoorDewpoint(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorDewpoint, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorDewpoint, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpoint(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpoint
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_iddObjectType)
PlantEquipmentOperationOutdoorDewpoint_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_swigregister
PlantEquipmentOperationOutdoorDewpoint_swigregister(PlantEquipmentOperationOutdoorDewpoint)

def PlantEquipmentOperationOutdoorDewpoint_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_iddObjectType()
PlantEquipmentOperationOutdoorDewpoint_iddObjectType = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_iddObjectType


def toPlantEquipmentOperationOutdoorDewpoint(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDewpoint(idfObject)
toPlantEquipmentOperationOutdoorDewpoint = _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDewpoint

def getPlantEquipmentOperationOutdoorDewpoint(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpoint(t_model, t_handle)
getPlantEquipmentOperationOutdoorDewpoint = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpoint

def getPlantEquipmentOperationOutdoorDewpoints(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpoint > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpoints(t_model)
getPlantEquipmentOperationOutdoorDewpoints = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpoints

def getPlantEquipmentOperationOutdoorDewpointByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpoint >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointByName(t_model, t_name)
getPlantEquipmentOperationOutdoorDewpointByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointByName

def getPlantEquipmentOperationOutdoorDewpointsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpoint,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpoint > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointsByName(t_model, t_name, t_exactMatch)
getPlantEquipmentOperationOutdoorDewpointsByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointsByName
class PlantEquipmentOperationOutdoorRelativeHumidity(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorRelativeHumidity, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorRelativeHumidity, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorRelativeHumidity(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorRelativeHumidity
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType)
PlantEquipmentOperationOutdoorRelativeHumidity_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_swigregister
PlantEquipmentOperationOutdoorRelativeHumidity_swigregister(PlantEquipmentOperationOutdoorRelativeHumidity)

def PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType()
PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType


def toPlantEquipmentOperationOutdoorRelativeHumidity(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorRelativeHumidity(idfObject)
toPlantEquipmentOperationOutdoorRelativeHumidity = _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorRelativeHumidity

def getPlantEquipmentOperationOutdoorRelativeHumidity(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumidity(t_model, t_handle)
getPlantEquipmentOperationOutdoorRelativeHumidity = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumidity

def getPlantEquipmentOperationOutdoorRelativeHumiditys(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumiditys(t_model)
getPlantEquipmentOperationOutdoorRelativeHumiditys = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumiditys

def getPlantEquipmentOperationOutdoorRelativeHumidityByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumidityByName(t_model, t_name)
getPlantEquipmentOperationOutdoorRelativeHumidityByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumidityByName

def getPlantEquipmentOperationOutdoorRelativeHumiditysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorRelativeHumidity > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumiditysByName(t_model, t_name, t_exactMatch)
getPlantEquipmentOperationOutdoorRelativeHumiditysByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumiditysByName
class PlantEquipmentOperationOutdoorDryBulbDifference(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorDryBulbDifference, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorDryBulbDifference, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulbDifference(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulbDifference
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType)

    def referenceTemperatureNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_referenceTemperatureNode(self)

    def setReferenceTemperatureNode(self, node: 'Node') -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_setReferenceTemperatureNode(self, node)

    def resetReferenceTemperatureNode(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_resetReferenceTemperatureNode(self)
PlantEquipmentOperationOutdoorDryBulbDifference_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_swigregister
PlantEquipmentOperationOutdoorDryBulbDifference_swigregister(PlantEquipmentOperationOutdoorDryBulbDifference)

def PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType()
PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType


def toPlantEquipmentOperationOutdoorDryBulbDifference(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDryBulbDifference(idfObject)
toPlantEquipmentOperationOutdoorDryBulbDifference = _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDryBulbDifference

def getPlantEquipmentOperationOutdoorDryBulbDifference(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifference(t_model, t_handle)
getPlantEquipmentOperationOutdoorDryBulbDifference = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifference

def getPlantEquipmentOperationOutdoorDryBulbDifferences(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferences(t_model)
getPlantEquipmentOperationOutdoorDryBulbDifferences = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferences

def getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(t_model, t_name)
getPlantEquipmentOperationOutdoorDryBulbDifferenceByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferenceByName

def getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDryBulbDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(t_model, t_name, t_exactMatch)
getPlantEquipmentOperationOutdoorDryBulbDifferencesByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferencesByName
class PlantEquipmentOperationOutdoorWetBulbDifference(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorWetBulbDifference, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorWetBulbDifference, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulbDifference(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulbDifference
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType)

    def referenceTemperatureNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_referenceTemperatureNode(self)

    def setReferenceTemperatureNode(self, node: 'Node') -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_setReferenceTemperatureNode(self, node)

    def resetReferenceTemperatureNode(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_resetReferenceTemperatureNode(self)
PlantEquipmentOperationOutdoorWetBulbDifference_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_swigregister
PlantEquipmentOperationOutdoorWetBulbDifference_swigregister(PlantEquipmentOperationOutdoorWetBulbDifference)

def PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType()
PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType


def toPlantEquipmentOperationOutdoorWetBulbDifference(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorWetBulbDifference(idfObject)
toPlantEquipmentOperationOutdoorWetBulbDifference = _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorWetBulbDifference

def getPlantEquipmentOperationOutdoorWetBulbDifference(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifference(t_model, t_handle)
getPlantEquipmentOperationOutdoorWetBulbDifference = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifference

def getPlantEquipmentOperationOutdoorWetBulbDifferences(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferences(t_model)
getPlantEquipmentOperationOutdoorWetBulbDifferences = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferences

def getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(t_model, t_name)
getPlantEquipmentOperationOutdoorWetBulbDifferenceByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferenceByName

def getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorWetBulbDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(t_model, t_name, t_exactMatch)
getPlantEquipmentOperationOutdoorWetBulbDifferencesByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferencesByName
class PlantEquipmentOperationOutdoorDewpointDifference(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationOutdoorDewpointDifference, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationOutdoorDewpointDifference, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpointDifference(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpointDifference
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType)

    def referenceTemperatureNode(self) -> "boost::optional< openstudio::model::Node >":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_referenceTemperatureNode(self)

    def setReferenceTemperatureNode(self, node: 'Node') -> "bool":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_setReferenceTemperatureNode(self, node)

    def resetReferenceTemperatureNode(self) -> "void":
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_resetReferenceTemperatureNode(self)
PlantEquipmentOperationOutdoorDewpointDifference_swigregister = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_swigregister
PlantEquipmentOperationOutdoorDewpointDifference_swigregister(PlantEquipmentOperationOutdoorDewpointDifference)

def PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType()
PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType = _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType


def toPlantEquipmentOperationOutdoorDewpointDifference(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >":
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDewpointDifference(idfObject)
toPlantEquipmentOperationOutdoorDewpointDifference = _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDewpointDifference

def getPlantEquipmentOperationOutdoorDewpointDifference(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifference(t_model, t_handle)
getPlantEquipmentOperationOutdoorDewpointDifference = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifference

def getPlantEquipmentOperationOutdoorDewpointDifferences(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferences(t_model)
getPlantEquipmentOperationOutdoorDewpointDifferences = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferences

def getPlantEquipmentOperationOutdoorDewpointDifferenceByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferenceByName(t_model, t_name)
getPlantEquipmentOperationOutdoorDewpointDifferenceByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferenceByName

def getPlantEquipmentOperationOutdoorDewpointDifferencesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference,std::allocator< openstudio::model::PlantEquipmentOperationOutdoorDewpointDifference > >":
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferencesByName(t_model, t_name, t_exactMatch)
getPlantEquipmentOperationOutdoorDewpointDifferencesByName = _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferencesByName
# This file is compatible with both classic and new-style classes.


