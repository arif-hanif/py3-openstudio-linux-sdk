# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudioradiance', [dirname(__file__)])
        except ImportError:
            import _openstudioradiance
            return _openstudioradiance
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudioradiance', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudioradiance = swig_import_helper()
    del swig_import_helper
else:
    import _openstudioradiance
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioradiance.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudioradiance.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioradiance.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioradiance.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudioradiance.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioradiance.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudioradiance.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudioradiance.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudioradiance.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudioradiance.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioradiance.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioradiance.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioradiance.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioradiance.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioradiance.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioradiance.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudioradiance.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudioradiance.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudioradiance.SHARED_PTR_DISOWN_swigconstant(_openstudioradiance)
SHARED_PTR_DISOWN = _openstudioradiance.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudiomodel
from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac
from .import openstudiomodelzonehvac
from .import openstudiomodelavailabilitymanager
from .import openstudiomodelplantequipmentoperationscheme
from .import openstudiomodelstraightcomponent
from .import openstudiomodelairflow
from .import openstudiomodelrefrigeration
from .import openstudiomodelgenerators
class RadianceForwardTranslator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadianceForwardTranslator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadianceForwardTranslator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudioradiance.new_RadianceForwardTranslator()
        try:
            self.this.append(this)
        except:
            self.this = this

    def translateModel(self, outPath: 'path', model: 'Model') -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":
        return _openstudioradiance.RadianceForwardTranslator_translateModel(self, outPath, model)

    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioradiance.RadianceForwardTranslator_warnings(self)

    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioradiance.RadianceForwardTranslator_errors(self)
    __swig_getmethods__["getPolygon"] = lambda x: _openstudioradiance.RadianceForwardTranslator_getPolygon
    if _newclass:
        getPolygon = staticmethod(_openstudioradiance.RadianceForwardTranslator_getPolygon)
    __swig_getmethods__["getViewVectors"] = lambda x: _openstudioradiance.RadianceForwardTranslator_getViewVectors
    if _newclass:
        getViewVectors = staticmethod(_openstudioradiance.RadianceForwardTranslator_getViewVectors)
    __swig_getmethods__["getReferencePoint"] = lambda x: _openstudioradiance.RadianceForwardTranslator_getReferencePoint
    if _newclass:
        getReferencePoint = staticmethod(_openstudioradiance.RadianceForwardTranslator_getReferencePoint)
    __swig_getmethods__["getReferencePoints"] = lambda x: _openstudioradiance.RadianceForwardTranslator_getReferencePoints
    if _newclass:
        getReferencePoints = staticmethod(_openstudioradiance.RadianceForwardTranslator_getReferencePoints)
    __swig_getmethods__["getSensorVector"] = lambda x: _openstudioradiance.RadianceForwardTranslator_getSensorVector
    if _newclass:
        getSensorVector = staticmethod(_openstudioradiance.RadianceForwardTranslator_getSensorVector)
    __swig_destroy__ = _openstudioradiance.delete_RadianceForwardTranslator
    __del__ = lambda self: None
RadianceForwardTranslator_swigregister = _openstudioradiance.RadianceForwardTranslator_swigregister
RadianceForwardTranslator_swigregister(RadianceForwardTranslator)

def RadianceForwardTranslator_getPolygon(*args) -> "openstudio::Point3dVector":
    return _openstudioradiance.RadianceForwardTranslator_getPolygon(*args)
RadianceForwardTranslator_getPolygon = _openstudioradiance.RadianceForwardTranslator_getPolygon

def RadianceForwardTranslator_getViewVectors(*args) -> "openstudio::Vector3dVector":
    return _openstudioradiance.RadianceForwardTranslator_getViewVectors(*args)
RadianceForwardTranslator_getViewVectors = _openstudioradiance.RadianceForwardTranslator_getViewVectors

def RadianceForwardTranslator_getReferencePoint(*args) -> "openstudio::Point3d":
    return _openstudioradiance.RadianceForwardTranslator_getReferencePoint(*args)
RadianceForwardTranslator_getReferencePoint = _openstudioradiance.RadianceForwardTranslator_getReferencePoint

def RadianceForwardTranslator_getReferencePoints(IlluminanceMap: 'IlluminanceMap') -> "openstudio::Point3dVector":
    return _openstudioradiance.RadianceForwardTranslator_getReferencePoints(IlluminanceMap)
RadianceForwardTranslator_getReferencePoints = _openstudioradiance.RadianceForwardTranslator_getReferencePoints

def RadianceForwardTranslator_getSensorVector(*args) -> "openstudio::Vector3d":
    return _openstudioradiance.RadianceForwardTranslator_getSensorVector(*args)
RadianceForwardTranslator_getSensorVector = _openstudioradiance.RadianceForwardTranslator_getSensorVector


def modelToRadPreProcess(model: 'Model') -> "openstudio::model::Model":
    return _openstudioradiance.modelToRadPreProcess(model)
modelToRadPreProcess = _openstudioradiance.modelToRadPreProcess

def parseGenDayMtxLine(t_line: 'std::string const &') -> "std::vector< double,std::allocator< double > >":
    return _openstudioradiance.parseGenDayMtxLine(t_line)
parseGenDayMtxLine = _openstudioradiance.parseGenDayMtxLine
# This file is compatible with both classic and new-style classes.


