# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudiomodelzonehvac', [dirname(__file__)])
        except ImportError:
            import _openstudiomodelzonehvac
            return _openstudiomodelzonehvac
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudiomodelzonehvac', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudiomodelzonehvac = swig_import_helper()
    del swig_import_helper
else:
    import _openstudiomodelzonehvac
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudiomodelzonehvac.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudiomodelzonehvac.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelzonehvac.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelzonehvac.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelzonehvac.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelzonehvac.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelzonehvac.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelzonehvac.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelzonehvac.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelzonehvac.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelzonehvac.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudiomodelzonehvac.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudiomodelzonehvac.SHARED_PTR_DISOWN_swigconstant(_openstudiomodelzonehvac)
SHARED_PTR_DISOWN = _openstudiomodelzonehvac.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac
class AirLoopHVACUnitarySystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACUnitarySystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACUnitarySystemVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::size_type":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::value_type":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACUnitarySystem >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACUnitarySystem >::difference_type') -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem,std::allocator< openstudio::model::AirLoopHVACUnitarySystem > > *":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACUnitarySystem >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACUnitarySystem >::difference_type') -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::value_type const &":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___setitem__(self, *args)

    def append(self, x: 'AirLoopHVACUnitarySystem') -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::size_type":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_clear(self)

    def swap(self, v: 'AirLoopHVACUnitarySystemVector') -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::allocator_type":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::iterator":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::iterator":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::reverse_iterator":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::reverse_iterator":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::iterator":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_AirLoopHVACUnitarySystemVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'AirLoopHVACUnitarySystem') -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::value_type const &":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::value_type const &":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::AirLoopHVACUnitarySystem >::size_type', x: 'AirLoopHVACUnitarySystem') -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::AirLoopHVACUnitarySystem >::size_type', x: 'AirLoopHVACUnitarySystem') -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::AirLoopHVACUnitarySystem >::size_type') -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem >::size_type":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_AirLoopHVACUnitarySystemVector
    __del__ = lambda self: None
AirLoopHVACUnitarySystemVector_swigregister = _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_swigregister
AirLoopHVACUnitarySystemVector_swigregister(AirLoopHVACUnitarySystemVector)

class OptionalAirLoopHVACUnitarySystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirLoopHVACUnitarySystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirLoopHVACUnitarySystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalAirLoopHVACUnitarySystem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_reset(self)

    def __ref__(self) -> "openstudio::model::AirLoopHVACUnitarySystem":
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_isNull(self)

    def get(self) -> "openstudio::model::AirLoopHVACUnitarySystem":
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_get(self)

    def set(self, t: 'AirLoopHVACUnitarySystem') -> "void":
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalAirLoopHVACUnitarySystem
    __del__ = lambda self: None
OptionalAirLoopHVACUnitarySystem_swigregister = _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_swigregister
OptionalAirLoopHVACUnitarySystem_swigregister(OptionalAirLoopHVACUnitarySystem)

class FanZoneExhaustVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FanZoneExhaustVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FanZoneExhaustVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaustVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaustVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FanZoneExhaust >::size_type":
        return _openstudiomodelzonehvac.FanZoneExhaustVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::FanZoneExhaust >::value_type":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::FanZoneExhaust >::difference_type', j: 'std::vector< openstudio::model::FanZoneExhaust >::difference_type') -> "std::vector< openstudio::model::FanZoneExhaust,std::allocator< openstudio::model::FanZoneExhaust > > *":
        return _openstudiomodelzonehvac.FanZoneExhaustVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::FanZoneExhaust >::difference_type', j: 'std::vector< openstudio::model::FanZoneExhaust >::difference_type') -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FanZoneExhaust >::value_type const &":
        return _openstudiomodelzonehvac.FanZoneExhaustVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector___setitem__(self, *args)

    def append(self, x: 'FanZoneExhaust') -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FanZoneExhaust >::size_type":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_clear(self)

    def swap(self, v: 'FanZoneExhaustVector') -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::FanZoneExhaust >::allocator_type":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::FanZoneExhaust >::iterator":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FanZoneExhaust >::iterator":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FanZoneExhaust >::reverse_iterator":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FanZoneExhaust >::reverse_iterator":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FanZoneExhaust >::iterator":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_FanZoneExhaustVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'FanZoneExhaust') -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FanZoneExhaust >::value_type const &":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FanZoneExhaust >::value_type const &":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::FanZoneExhaust >::size_type', x: 'FanZoneExhaust') -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::FanZoneExhaust >::size_type', x: 'FanZoneExhaust') -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::FanZoneExhaust >::size_type') -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FanZoneExhaust >::size_type":
        return _openstudiomodelzonehvac.FanZoneExhaustVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_FanZoneExhaustVector
    __del__ = lambda self: None
FanZoneExhaustVector_swigregister = _openstudiomodelzonehvac.FanZoneExhaustVector_swigregister
FanZoneExhaustVector_swigregister(FanZoneExhaustVector)

class OptionalFanZoneExhaust(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalFanZoneExhaust, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalFanZoneExhaust, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalFanZoneExhaust(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_reset(self)

    def __ref__(self) -> "openstudio::model::FanZoneExhaust":
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_isNull(self)

    def get(self) -> "openstudio::model::FanZoneExhaust":
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_get(self)

    def set(self, t: 'FanZoneExhaust') -> "void":
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalFanZoneExhaust
    __del__ = lambda self: None
OptionalFanZoneExhaust_swigregister = _openstudiomodelzonehvac.OptionalFanZoneExhaust_swigregister
OptionalFanZoneExhaust_swigregister(OptionalFanZoneExhaust)

class WaterHeaterHeatPumpVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterHeaterHeatPumpVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaterHeaterHeatPumpVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::size_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::value_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::WaterHeaterHeatPump >::difference_type', j: 'std::vector< openstudio::model::WaterHeaterHeatPump >::difference_type') -> "std::vector< openstudio::model::WaterHeaterHeatPump,std::allocator< openstudio::model::WaterHeaterHeatPump > > *":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::WaterHeaterHeatPump >::difference_type', j: 'std::vector< openstudio::model::WaterHeaterHeatPump >::difference_type') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::value_type const &":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___setitem__(self, *args)

    def append(self, x: 'WaterHeaterHeatPump') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::size_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_clear(self)

    def swap(self, v: 'WaterHeaterHeatPumpVector') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::allocator_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::reverse_iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::reverse_iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_WaterHeaterHeatPumpVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WaterHeaterHeatPump') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::value_type const &":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::value_type const &":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::WaterHeaterHeatPump >::size_type', x: 'WaterHeaterHeatPump') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::WaterHeaterHeatPump >::size_type', x: 'WaterHeaterHeatPump') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::WaterHeaterHeatPump >::size_type') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WaterHeaterHeatPump >::size_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_WaterHeaterHeatPumpVector
    __del__ = lambda self: None
WaterHeaterHeatPumpVector_swigregister = _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_swigregister
WaterHeaterHeatPumpVector_swigregister(WaterHeaterHeatPumpVector)

class OptionalWaterHeaterHeatPump(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWaterHeaterHeatPump, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWaterHeaterHeatPump, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalWaterHeaterHeatPump(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_reset(self)

    def __ref__(self) -> "openstudio::model::WaterHeaterHeatPump":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_isNull(self)

    def get(self) -> "openstudio::model::WaterHeaterHeatPump":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_get(self)

    def set(self, t: 'WaterHeaterHeatPump') -> "void":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalWaterHeaterHeatPump
    __del__ = lambda self: None
OptionalWaterHeaterHeatPump_swigregister = _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_swigregister
OptionalWaterHeaterHeatPump_swigregister(OptionalWaterHeaterHeatPump)

class WaterHeaterHeatPumpWrappedCondenserVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterHeaterHeatPumpWrappedCondenserVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaterHeaterHeatPumpWrappedCondenserVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::size_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::value_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::difference_type', j: 'std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::difference_type') -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser,std::allocator< openstudio::model::WaterHeaterHeatPumpWrappedCondenser > > *":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::difference_type', j: 'std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::difference_type') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::value_type const &":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___setitem__(self, *args)

    def append(self, x: 'WaterHeaterHeatPumpWrappedCondenser') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::size_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_clear(self)

    def swap(self, v: 'WaterHeaterHeatPumpWrappedCondenserVector') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::allocator_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::reverse_iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::reverse_iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::iterator":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_WaterHeaterHeatPumpWrappedCondenserVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WaterHeaterHeatPumpWrappedCondenser') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::value_type const &":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::value_type const &":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::size_type', x: 'WaterHeaterHeatPumpWrappedCondenser') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::size_type', x: 'WaterHeaterHeatPumpWrappedCondenser') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::size_type') -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >::size_type":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_WaterHeaterHeatPumpWrappedCondenserVector
    __del__ = lambda self: None
WaterHeaterHeatPumpWrappedCondenserVector_swigregister = _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_swigregister
WaterHeaterHeatPumpWrappedCondenserVector_swigregister(WaterHeaterHeatPumpWrappedCondenserVector)

class OptionalWaterHeaterHeatPumpWrappedCondenser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWaterHeaterHeatPumpWrappedCondenser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWaterHeaterHeatPumpWrappedCondenser, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalWaterHeaterHeatPumpWrappedCondenser(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_reset(self)

    def __ref__(self) -> "openstudio::model::WaterHeaterHeatPumpWrappedCondenser":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_isNull(self)

    def get(self) -> "openstudio::model::WaterHeaterHeatPumpWrappedCondenser":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_get(self)

    def set(self, t: 'WaterHeaterHeatPumpWrappedCondenser') -> "void":
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalWaterHeaterHeatPumpWrappedCondenser
    __del__ = lambda self: None
OptionalWaterHeaterHeatPumpWrappedCondenser_swigregister = _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_swigregister
OptionalWaterHeaterHeatPumpWrappedCondenser_swigregister(OptionalWaterHeaterHeatPumpWrappedCondenser)

class ZoneHVACBaseboardConvectiveElectricVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACBaseboardConvectiveElectricVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACBaseboardConvectiveElectricVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::difference_type') -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric,std::allocator< openstudio::model::ZoneHVACBaseboardConvectiveElectric > > *":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACBaseboardConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_clear(self)

    def swap(self, v: 'ZoneHVACBaseboardConvectiveElectricVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACBaseboardConvectiveElectricVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACBaseboardConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::size_type', x: 'ZoneHVACBaseboardConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::size_type', x: 'ZoneHVACBaseboardConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardConvectiveElectricVector
    __del__ = lambda self: None
ZoneHVACBaseboardConvectiveElectricVector_swigregister = _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_swigregister
ZoneHVACBaseboardConvectiveElectricVector_swigregister(ZoneHVACBaseboardConvectiveElectricVector)

class OptionalZoneHVACBaseboardConvectiveElectric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACBaseboardConvectiveElectric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACBaseboardConvectiveElectric, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACBaseboardConvectiveElectric(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACBaseboardConvectiveElectric":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACBaseboardConvectiveElectric":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_get(self)

    def set(self, t: 'ZoneHVACBaseboardConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACBaseboardConvectiveElectric
    __del__ = lambda self: None
OptionalZoneHVACBaseboardConvectiveElectric_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_swigregister
OptionalZoneHVACBaseboardConvectiveElectric_swigregister(OptionalZoneHVACBaseboardConvectiveElectric)

class ZoneHVACBaseboardConvectiveWaterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACBaseboardConvectiveWaterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACBaseboardConvectiveWaterVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::difference_type') -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater,std::allocator< openstudio::model::ZoneHVACBaseboardConvectiveWater > > *":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACBaseboardConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_clear(self)

    def swap(self, v: 'ZoneHVACBaseboardConvectiveWaterVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACBaseboardConvectiveWaterVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACBaseboardConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::size_type', x: 'ZoneHVACBaseboardConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::size_type', x: 'ZoneHVACBaseboardConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardConvectiveWaterVector
    __del__ = lambda self: None
ZoneHVACBaseboardConvectiveWaterVector_swigregister = _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_swigregister
ZoneHVACBaseboardConvectiveWaterVector_swigregister(ZoneHVACBaseboardConvectiveWaterVector)

class OptionalZoneHVACBaseboardConvectiveWater(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACBaseboardConvectiveWater, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACBaseboardConvectiveWater, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACBaseboardConvectiveWater(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACBaseboardConvectiveWater":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACBaseboardConvectiveWater":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_get(self)

    def set(self, t: 'ZoneHVACBaseboardConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACBaseboardConvectiveWater
    __del__ = lambda self: None
OptionalZoneHVACBaseboardConvectiveWater_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_swigregister
OptionalZoneHVACBaseboardConvectiveWater_swigregister(OptionalZoneHVACBaseboardConvectiveWater)

class ZoneHVACBaseboardRadiantConvectiveElectricVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACBaseboardRadiantConvectiveElectricVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACBaseboardRadiantConvectiveElectricVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::difference_type') -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric,std::allocator< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric > > *":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACBaseboardRadiantConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_clear(self)

    def swap(self, v: 'ZoneHVACBaseboardRadiantConvectiveElectricVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACBaseboardRadiantConvectiveElectricVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACBaseboardRadiantConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::size_type', x: 'ZoneHVACBaseboardRadiantConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::size_type', x: 'ZoneHVACBaseboardRadiantConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardRadiantConvectiveElectricVector
    __del__ = lambda self: None
ZoneHVACBaseboardRadiantConvectiveElectricVector_swigregister = _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_swigregister
ZoneHVACBaseboardRadiantConvectiveElectricVector_swigregister(ZoneHVACBaseboardRadiantConvectiveElectricVector)

class OptionalZoneHVACBaseboardRadiantConvectiveElectric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACBaseboardRadiantConvectiveElectric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACBaseboardRadiantConvectiveElectric, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACBaseboardRadiantConvectiveElectric(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_get(self)

    def set(self, t: 'ZoneHVACBaseboardRadiantConvectiveElectric') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACBaseboardRadiantConvectiveElectric
    __del__ = lambda self: None
OptionalZoneHVACBaseboardRadiantConvectiveElectric_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_swigregister
OptionalZoneHVACBaseboardRadiantConvectiveElectric_swigregister(OptionalZoneHVACBaseboardRadiantConvectiveElectric)

class ZoneHVACBaseboardRadiantConvectiveWaterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACBaseboardRadiantConvectiveWaterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACBaseboardRadiantConvectiveWaterVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::difference_type') -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater,std::allocator< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater > > *":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACBaseboardRadiantConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_clear(self)

    def swap(self, v: 'ZoneHVACBaseboardRadiantConvectiveWaterVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACBaseboardRadiantConvectiveWaterVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACBaseboardRadiantConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::size_type', x: 'ZoneHVACBaseboardRadiantConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::size_type', x: 'ZoneHVACBaseboardRadiantConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardRadiantConvectiveWaterVector
    __del__ = lambda self: None
ZoneHVACBaseboardRadiantConvectiveWaterVector_swigregister = _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_swigregister
ZoneHVACBaseboardRadiantConvectiveWaterVector_swigregister(ZoneHVACBaseboardRadiantConvectiveWaterVector)

class OptionalZoneHVACBaseboardRadiantConvectiveWater(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACBaseboardRadiantConvectiveWater, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACBaseboardRadiantConvectiveWater, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACBaseboardRadiantConvectiveWater(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_get(self)

    def set(self, t: 'ZoneHVACBaseboardRadiantConvectiveWater') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACBaseboardRadiantConvectiveWater
    __del__ = lambda self: None
OptionalZoneHVACBaseboardRadiantConvectiveWater_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_swigregister
OptionalZoneHVACBaseboardRadiantConvectiveWater_swigregister(OptionalZoneHVACBaseboardRadiantConvectiveWater)

class ZoneHVACDehumidifierDXVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACDehumidifierDXVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACDehumidifierDXVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACDehumidifierDX >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACDehumidifierDX >::difference_type') -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX,std::allocator< openstudio::model::ZoneHVACDehumidifierDX > > *":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACDehumidifierDX >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACDehumidifierDX >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACDehumidifierDX') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_clear(self)

    def swap(self, v: 'ZoneHVACDehumidifierDXVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACDehumidifierDXVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACDehumidifierDX') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACDehumidifierDX >::size_type', x: 'ZoneHVACDehumidifierDX') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACDehumidifierDX >::size_type', x: 'ZoneHVACDehumidifierDX') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACDehumidifierDX >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACDehumidifierDXVector
    __del__ = lambda self: None
ZoneHVACDehumidifierDXVector_swigregister = _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_swigregister
ZoneHVACDehumidifierDXVector_swigregister(ZoneHVACDehumidifierDXVector)

class OptionalZoneHVACDehumidifierDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACDehumidifierDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACDehumidifierDX, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACDehumidifierDX(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACDehumidifierDX":
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACDehumidifierDX":
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_get(self)

    def set(self, t: 'ZoneHVACDehumidifierDX') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACDehumidifierDX
    __del__ = lambda self: None
OptionalZoneHVACDehumidifierDX_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_swigregister
OptionalZoneHVACDehumidifierDX_swigregister(OptionalZoneHVACDehumidifierDX)

class ZoneHVACEnergyRecoveryVentilatorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACEnergyRecoveryVentilatorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACEnergyRecoveryVentilatorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::difference_type') -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator,std::allocator< openstudio::model::ZoneHVACEnergyRecoveryVentilator > > *":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACEnergyRecoveryVentilator') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_clear(self)

    def swap(self, v: 'ZoneHVACEnergyRecoveryVentilatorVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACEnergyRecoveryVentilatorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACEnergyRecoveryVentilator') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::size_type', x: 'ZoneHVACEnergyRecoveryVentilator') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::size_type', x: 'ZoneHVACEnergyRecoveryVentilator') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACEnergyRecoveryVentilatorVector
    __del__ = lambda self: None
ZoneHVACEnergyRecoveryVentilatorVector_swigregister = _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_swigregister
ZoneHVACEnergyRecoveryVentilatorVector_swigregister(ZoneHVACEnergyRecoveryVentilatorVector)

class OptionalZoneHVACEnergyRecoveryVentilator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACEnergyRecoveryVentilator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACEnergyRecoveryVentilator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACEnergyRecoveryVentilator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACEnergyRecoveryVentilator":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACEnergyRecoveryVentilator":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_get(self)

    def set(self, t: 'ZoneHVACEnergyRecoveryVentilator') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACEnergyRecoveryVentilator
    __del__ = lambda self: None
OptionalZoneHVACEnergyRecoveryVentilator_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_swigregister
OptionalZoneHVACEnergyRecoveryVentilator_swigregister(OptionalZoneHVACEnergyRecoveryVentilator)

class ZoneHVACEnergyRecoveryVentilatorControllerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACEnergyRecoveryVentilatorControllerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACEnergyRecoveryVentilatorControllerVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::difference_type') -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController,std::allocator< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController > > *":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACEnergyRecoveryVentilatorController') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_clear(self)

    def swap(self, v: 'ZoneHVACEnergyRecoveryVentilatorControllerVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACEnergyRecoveryVentilatorControllerVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACEnergyRecoveryVentilatorController') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::size_type', x: 'ZoneHVACEnergyRecoveryVentilatorController') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::size_type', x: 'ZoneHVACEnergyRecoveryVentilatorController') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACEnergyRecoveryVentilatorControllerVector
    __del__ = lambda self: None
ZoneHVACEnergyRecoveryVentilatorControllerVector_swigregister = _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_swigregister
ZoneHVACEnergyRecoveryVentilatorControllerVector_swigregister(ZoneHVACEnergyRecoveryVentilatorControllerVector)

class OptionalZoneHVACEnergyRecoveryVentilatorController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACEnergyRecoveryVentilatorController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACEnergyRecoveryVentilatorController, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACEnergyRecoveryVentilatorController(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACEnergyRecoveryVentilatorController":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACEnergyRecoveryVentilatorController":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_get(self)

    def set(self, t: 'ZoneHVACEnergyRecoveryVentilatorController') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACEnergyRecoveryVentilatorController
    __del__ = lambda self: None
OptionalZoneHVACEnergyRecoveryVentilatorController_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_swigregister
OptionalZoneHVACEnergyRecoveryVentilatorController_swigregister(OptionalZoneHVACEnergyRecoveryVentilatorController)

class ZoneHVACFourPipeFanCoilVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACFourPipeFanCoilVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACFourPipeFanCoilVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::difference_type') -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil,std::allocator< openstudio::model::ZoneHVACFourPipeFanCoil > > *":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACFourPipeFanCoil') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_clear(self)

    def swap(self, v: 'ZoneHVACFourPipeFanCoilVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACFourPipeFanCoilVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACFourPipeFanCoil') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::size_type', x: 'ZoneHVACFourPipeFanCoil') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::size_type', x: 'ZoneHVACFourPipeFanCoil') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACFourPipeFanCoilVector
    __del__ = lambda self: None
ZoneHVACFourPipeFanCoilVector_swigregister = _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_swigregister
ZoneHVACFourPipeFanCoilVector_swigregister(ZoneHVACFourPipeFanCoilVector)

class OptionalZoneHVACFourPipeFanCoil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACFourPipeFanCoil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACFourPipeFanCoil, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACFourPipeFanCoil(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACFourPipeFanCoil":
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACFourPipeFanCoil":
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_get(self)

    def set(self, t: 'ZoneHVACFourPipeFanCoil') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACFourPipeFanCoil
    __del__ = lambda self: None
OptionalZoneHVACFourPipeFanCoil_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_swigregister
OptionalZoneHVACFourPipeFanCoil_swigregister(OptionalZoneHVACFourPipeFanCoil)

class ZoneHVACHighTemperatureRadiantVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACHighTemperatureRadiantVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACHighTemperatureRadiantVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::difference_type') -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant,std::allocator< openstudio::model::ZoneHVACHighTemperatureRadiant > > *":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACHighTemperatureRadiant') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_clear(self)

    def swap(self, v: 'ZoneHVACHighTemperatureRadiantVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACHighTemperatureRadiantVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACHighTemperatureRadiant') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::size_type', x: 'ZoneHVACHighTemperatureRadiant') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::size_type', x: 'ZoneHVACHighTemperatureRadiant') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACHighTemperatureRadiantVector
    __del__ = lambda self: None
ZoneHVACHighTemperatureRadiantVector_swigregister = _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_swigregister
ZoneHVACHighTemperatureRadiantVector_swigregister(ZoneHVACHighTemperatureRadiantVector)

class OptionalZoneHVACHighTemperatureRadiant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACHighTemperatureRadiant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACHighTemperatureRadiant, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACHighTemperatureRadiant(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACHighTemperatureRadiant":
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACHighTemperatureRadiant":
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_get(self)

    def set(self, t: 'ZoneHVACHighTemperatureRadiant') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACHighTemperatureRadiant
    __del__ = lambda self: None
OptionalZoneHVACHighTemperatureRadiant_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_swigregister
OptionalZoneHVACHighTemperatureRadiant_swigregister(OptionalZoneHVACHighTemperatureRadiant)

class ZoneHVACIdealLoadsAirSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACIdealLoadsAirSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACIdealLoadsAirSystemVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::difference_type') -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem,std::allocator< openstudio::model::ZoneHVACIdealLoadsAirSystem > > *":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACIdealLoadsAirSystem') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_clear(self)

    def swap(self, v: 'ZoneHVACIdealLoadsAirSystemVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACIdealLoadsAirSystemVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACIdealLoadsAirSystem') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::size_type', x: 'ZoneHVACIdealLoadsAirSystem') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::size_type', x: 'ZoneHVACIdealLoadsAirSystem') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACIdealLoadsAirSystemVector
    __del__ = lambda self: None
ZoneHVACIdealLoadsAirSystemVector_swigregister = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_swigregister
ZoneHVACIdealLoadsAirSystemVector_swigregister(ZoneHVACIdealLoadsAirSystemVector)

class OptionalZoneHVACIdealLoadsAirSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACIdealLoadsAirSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACIdealLoadsAirSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACIdealLoadsAirSystem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACIdealLoadsAirSystem":
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACIdealLoadsAirSystem":
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_get(self)

    def set(self, t: 'ZoneHVACIdealLoadsAirSystem') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACIdealLoadsAirSystem
    __del__ = lambda self: None
OptionalZoneHVACIdealLoadsAirSystem_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_swigregister
OptionalZoneHVACIdealLoadsAirSystem_swigregister(OptionalZoneHVACIdealLoadsAirSystem)

class ZoneHVACLowTemperatureRadiantElectricVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACLowTemperatureRadiantElectricVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACLowTemperatureRadiantElectricVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::difference_type') -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric,std::allocator< openstudio::model::ZoneHVACLowTemperatureRadiantElectric > > *":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACLowTemperatureRadiantElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_clear(self)

    def swap(self, v: 'ZoneHVACLowTemperatureRadiantElectricVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACLowTemperatureRadiantElectricVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACLowTemperatureRadiantElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::size_type', x: 'ZoneHVACLowTemperatureRadiantElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::size_type', x: 'ZoneHVACLowTemperatureRadiantElectric') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTemperatureRadiantElectricVector
    __del__ = lambda self: None
ZoneHVACLowTemperatureRadiantElectricVector_swigregister = _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_swigregister
ZoneHVACLowTemperatureRadiantElectricVector_swigregister(ZoneHVACLowTemperatureRadiantElectricVector)

class OptionalZoneHVACLowTemperatureRadiantElectric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACLowTemperatureRadiantElectric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACLowTemperatureRadiantElectric, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACLowTemperatureRadiantElectric(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACLowTemperatureRadiantElectric":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACLowTemperatureRadiantElectric":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_get(self)

    def set(self, t: 'ZoneHVACLowTemperatureRadiantElectric') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACLowTemperatureRadiantElectric
    __del__ = lambda self: None
OptionalZoneHVACLowTemperatureRadiantElectric_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_swigregister
OptionalZoneHVACLowTemperatureRadiantElectric_swigregister(OptionalZoneHVACLowTemperatureRadiantElectric)

class ZoneHVACLowTempRadiantConstFlowVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACLowTempRadiantConstFlowVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACLowTempRadiantConstFlowVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::difference_type') -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow,std::allocator< openstudio::model::ZoneHVACLowTempRadiantConstFlow > > *":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACLowTempRadiantConstFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_clear(self)

    def swap(self, v: 'ZoneHVACLowTempRadiantConstFlowVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACLowTempRadiantConstFlowVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACLowTempRadiantConstFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::size_type', x: 'ZoneHVACLowTempRadiantConstFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::size_type', x: 'ZoneHVACLowTempRadiantConstFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTempRadiantConstFlowVector
    __del__ = lambda self: None
ZoneHVACLowTempRadiantConstFlowVector_swigregister = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_swigregister
ZoneHVACLowTempRadiantConstFlowVector_swigregister(ZoneHVACLowTempRadiantConstFlowVector)

class OptionalZoneHVACLowTempRadiantConstFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACLowTempRadiantConstFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACLowTempRadiantConstFlow, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACLowTempRadiantConstFlow(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACLowTempRadiantConstFlow":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACLowTempRadiantConstFlow":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_get(self)

    def set(self, t: 'ZoneHVACLowTempRadiantConstFlow') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACLowTempRadiantConstFlow
    __del__ = lambda self: None
OptionalZoneHVACLowTempRadiantConstFlow_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_swigregister
OptionalZoneHVACLowTempRadiantConstFlow_swigregister(OptionalZoneHVACLowTempRadiantConstFlow)

class ZoneHVACLowTempRadiantVarFlowVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACLowTempRadiantVarFlowVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACLowTempRadiantVarFlowVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::difference_type') -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow,std::allocator< openstudio::model::ZoneHVACLowTempRadiantVarFlow > > *":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACLowTempRadiantVarFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_clear(self)

    def swap(self, v: 'ZoneHVACLowTempRadiantVarFlowVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACLowTempRadiantVarFlowVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACLowTempRadiantVarFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::size_type', x: 'ZoneHVACLowTempRadiantVarFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::size_type', x: 'ZoneHVACLowTempRadiantVarFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTempRadiantVarFlowVector
    __del__ = lambda self: None
ZoneHVACLowTempRadiantVarFlowVector_swigregister = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_swigregister
ZoneHVACLowTempRadiantVarFlowVector_swigregister(ZoneHVACLowTempRadiantVarFlowVector)

class OptionalZoneHVACLowTempRadiantVarFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACLowTempRadiantVarFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACLowTempRadiantVarFlow, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACLowTempRadiantVarFlow(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACLowTempRadiantVarFlow":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACLowTempRadiantVarFlow":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_get(self)

    def set(self, t: 'ZoneHVACLowTempRadiantVarFlow') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACLowTempRadiantVarFlow
    __del__ = lambda self: None
OptionalZoneHVACLowTempRadiantVarFlow_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_swigregister
OptionalZoneHVACLowTempRadiantVarFlow_swigregister(OptionalZoneHVACLowTempRadiantVarFlow)

class ZoneHVACPackagedTerminalHeatPumpVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACPackagedTerminalHeatPumpVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACPackagedTerminalHeatPumpVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::difference_type') -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump,std::allocator< openstudio::model::ZoneHVACPackagedTerminalHeatPump > > *":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACPackagedTerminalHeatPump') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_clear(self)

    def swap(self, v: 'ZoneHVACPackagedTerminalHeatPumpVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACPackagedTerminalHeatPumpVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACPackagedTerminalHeatPump') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::size_type', x: 'ZoneHVACPackagedTerminalHeatPump') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::size_type', x: 'ZoneHVACPackagedTerminalHeatPump') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACPackagedTerminalHeatPumpVector
    __del__ = lambda self: None
ZoneHVACPackagedTerminalHeatPumpVector_swigregister = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_swigregister
ZoneHVACPackagedTerminalHeatPumpVector_swigregister(ZoneHVACPackagedTerminalHeatPumpVector)

class OptionalZoneHVACPackagedTerminalHeatPump(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACPackagedTerminalHeatPump, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACPackagedTerminalHeatPump, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACPackagedTerminalHeatPump(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACPackagedTerminalHeatPump":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACPackagedTerminalHeatPump":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_get(self)

    def set(self, t: 'ZoneHVACPackagedTerminalHeatPump') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACPackagedTerminalHeatPump
    __del__ = lambda self: None
OptionalZoneHVACPackagedTerminalHeatPump_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_swigregister
OptionalZoneHVACPackagedTerminalHeatPump_swigregister(OptionalZoneHVACPackagedTerminalHeatPump)

class ZoneHVACPackagedTerminalAirConditionerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACPackagedTerminalAirConditionerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACPackagedTerminalAirConditionerVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::difference_type') -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner,std::allocator< openstudio::model::ZoneHVACPackagedTerminalAirConditioner > > *":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACPackagedTerminalAirConditioner') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_clear(self)

    def swap(self, v: 'ZoneHVACPackagedTerminalAirConditionerVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACPackagedTerminalAirConditionerVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACPackagedTerminalAirConditioner') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::size_type', x: 'ZoneHVACPackagedTerminalAirConditioner') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::size_type', x: 'ZoneHVACPackagedTerminalAirConditioner') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACPackagedTerminalAirConditionerVector
    __del__ = lambda self: None
ZoneHVACPackagedTerminalAirConditionerVector_swigregister = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_swigregister
ZoneHVACPackagedTerminalAirConditionerVector_swigregister(ZoneHVACPackagedTerminalAirConditionerVector)

class OptionalZoneHVACPackagedTerminalAirConditioner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACPackagedTerminalAirConditioner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACPackagedTerminalAirConditioner, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACPackagedTerminalAirConditioner(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACPackagedTerminalAirConditioner":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACPackagedTerminalAirConditioner":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_get(self)

    def set(self, t: 'ZoneHVACPackagedTerminalAirConditioner') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACPackagedTerminalAirConditioner
    __del__ = lambda self: None
OptionalZoneHVACPackagedTerminalAirConditioner_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_swigregister
OptionalZoneHVACPackagedTerminalAirConditioner_swigregister(OptionalZoneHVACPackagedTerminalAirConditioner)

class ZoneHVACTerminalUnitVariableRefrigerantFlowVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACTerminalUnitVariableRefrigerantFlowVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACTerminalUnitVariableRefrigerantFlowVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::difference_type') -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow,std::allocator< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow > > *":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACTerminalUnitVariableRefrigerantFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_clear(self)

    def swap(self, v: 'ZoneHVACTerminalUnitVariableRefrigerantFlowVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACTerminalUnitVariableRefrigerantFlowVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACTerminalUnitVariableRefrigerantFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::size_type', x: 'ZoneHVACTerminalUnitVariableRefrigerantFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::size_type', x: 'ZoneHVACTerminalUnitVariableRefrigerantFlow') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACTerminalUnitVariableRefrigerantFlowVector
    __del__ = lambda self: None
ZoneHVACTerminalUnitVariableRefrigerantFlowVector_swigregister = _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_swigregister
ZoneHVACTerminalUnitVariableRefrigerantFlowVector_swigregister(ZoneHVACTerminalUnitVariableRefrigerantFlowVector)

class OptionalZoneHVACTerminalUnitVariableRefrigerantFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACTerminalUnitVariableRefrigerantFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACTerminalUnitVariableRefrigerantFlow, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACTerminalUnitVariableRefrigerantFlow(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow":
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow":
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_get(self)

    def set(self, t: 'ZoneHVACTerminalUnitVariableRefrigerantFlow') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACTerminalUnitVariableRefrigerantFlow
    __del__ = lambda self: None
OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_swigregister
OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_swigregister(OptionalZoneHVACTerminalUnitVariableRefrigerantFlow)

class ZoneHVACUnitHeaterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACUnitHeaterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACUnitHeaterVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACUnitHeater >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACUnitHeater >::difference_type') -> "std::vector< openstudio::model::ZoneHVACUnitHeater,std::allocator< openstudio::model::ZoneHVACUnitHeater > > *":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACUnitHeater >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACUnitHeater >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACUnitHeater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_clear(self)

    def swap(self, v: 'ZoneHVACUnitHeaterVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACUnitHeaterVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACUnitHeater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACUnitHeater >::size_type', x: 'ZoneHVACUnitHeater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACUnitHeater >::size_type', x: 'ZoneHVACUnitHeater') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACUnitHeater >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACUnitHeater >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACUnitHeaterVector
    __del__ = lambda self: None
ZoneHVACUnitHeaterVector_swigregister = _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_swigregister
ZoneHVACUnitHeaterVector_swigregister(ZoneHVACUnitHeaterVector)

class OptionalZoneHVACUnitHeater(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACUnitHeater, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACUnitHeater, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACUnitHeater(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACUnitHeater":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACUnitHeater":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_get(self)

    def set(self, t: 'ZoneHVACUnitHeater') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACUnitHeater
    __del__ = lambda self: None
OptionalZoneHVACUnitHeater_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_swigregister
OptionalZoneHVACUnitHeater_swigregister(OptionalZoneHVACUnitHeater)

class ZoneHVACUnitVentilatorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACUnitVentilatorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACUnitVentilatorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACUnitVentilator >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACUnitVentilator >::difference_type') -> "std::vector< openstudio::model::ZoneHVACUnitVentilator,std::allocator< openstudio::model::ZoneHVACUnitVentilator > > *":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACUnitVentilator >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACUnitVentilator >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACUnitVentilator') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_clear(self)

    def swap(self, v: 'ZoneHVACUnitVentilatorVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACUnitVentilatorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACUnitVentilator') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACUnitVentilator >::size_type', x: 'ZoneHVACUnitVentilator') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACUnitVentilator >::size_type', x: 'ZoneHVACUnitVentilator') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACUnitVentilator >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACUnitVentilator >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACUnitVentilatorVector
    __del__ = lambda self: None
ZoneHVACUnitVentilatorVector_swigregister = _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_swigregister
ZoneHVACUnitVentilatorVector_swigregister(ZoneHVACUnitVentilatorVector)

class OptionalZoneHVACUnitVentilator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACUnitVentilator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACUnitVentilator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACUnitVentilator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACUnitVentilator":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACUnitVentilator":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_get(self)

    def set(self, t: 'ZoneHVACUnitVentilator') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACUnitVentilator
    __del__ = lambda self: None
OptionalZoneHVACUnitVentilator_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_swigregister
OptionalZoneHVACUnitVentilator_swigregister(OptionalZoneHVACUnitVentilator)

class ZoneHVACWaterToAirHeatPumpVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACWaterToAirHeatPumpVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACWaterToAirHeatPumpVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::value_type":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::difference_type') -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump,std::allocator< openstudio::model::ZoneHVACWaterToAirHeatPump > > *":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::difference_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___setitem__(self, *args)

    def append(self, x: 'ZoneHVACWaterToAirHeatPump') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_clear(self)

    def swap(self, v: 'ZoneHVACWaterToAirHeatPumpVector') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::allocator_type":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::reverse_iterator":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::iterator":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACWaterToAirHeatPumpVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ZoneHVACWaterToAirHeatPump') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::value_type const &":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::size_type', x: 'ZoneHVACWaterToAirHeatPump') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::size_type', x: 'ZoneHVACWaterToAirHeatPump') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::size_type') -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump >::size_type":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACWaterToAirHeatPumpVector
    __del__ = lambda self: None
ZoneHVACWaterToAirHeatPumpVector_swigregister = _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_swigregister
ZoneHVACWaterToAirHeatPumpVector_swigregister(ZoneHVACWaterToAirHeatPumpVector)

class OptionalZoneHVACWaterToAirHeatPump(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACWaterToAirHeatPump, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACWaterToAirHeatPump, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_OptionalZoneHVACWaterToAirHeatPump(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneHVACWaterToAirHeatPump":
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_isNull(self)

    def get(self) -> "openstudio::model::ZoneHVACWaterToAirHeatPump":
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_get(self)

    def set(self, t: 'ZoneHVACWaterToAirHeatPump') -> "void":
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_set(self, t)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACWaterToAirHeatPump
    __del__ = lambda self: None
OptionalZoneHVACWaterToAirHeatPump_swigregister = _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_swigregister
OptionalZoneHVACWaterToAirHeatPump_swigregister(OptionalZoneHVACWaterToAirHeatPump)

class AirLoopHVACUnitarySystem(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACUnitarySystem, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACUnitarySystem, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelzonehvac.new_AirLoopHVACUnitarySystem(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_AirLoopHVACUnitarySystem
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.AirLoopHVACUnitarySystem_iddObjectType)
    __swig_getmethods__["controlTypeValues"] = lambda x: _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_controlTypeValues
    if _newclass:
        controlTypeValues = staticmethod(_openstudiomodelzonehvac.AirLoopHVACUnitarySystem_controlTypeValues)
    __swig_getmethods__["dehumidificationControlTypeValues"] = lambda x: _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dehumidificationControlTypeValues
    if _newclass:
        dehumidificationControlTypeValues = staticmethod(_openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dehumidificationControlTypeValues)
    __swig_getmethods__["fanPlacementValues"] = lambda x: _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fanPlacementValues
    if _newclass:
        fanPlacementValues = staticmethod(_openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fanPlacementValues)
    __swig_getmethods__["latentLoadControlValues"] = lambda x: _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_latentLoadControlValues
    if _newclass:
        latentLoadControlValues = staticmethod(_openstudiomodelzonehvac.AirLoopHVACUnitarySystem_latentLoadControlValues)
    __swig_getmethods__["supplyAirFlowRateMethodDuringCoolingOperationValues"] = lambda x: _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringCoolingOperationValues
    if _newclass:
        supplyAirFlowRateMethodDuringCoolingOperationValues = staticmethod(_openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringCoolingOperationValues)
    __swig_getmethods__["supplyAirFlowRateMethodDuringHeatingOperationValues"] = lambda x: _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringHeatingOperationValues
    if _newclass:
        supplyAirFlowRateMethodDuringHeatingOperationValues = staticmethod(_openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringHeatingOperationValues)
    __swig_getmethods__["supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues"] = lambda x: _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues
    if _newclass:
        supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues = staticmethod(_openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues)

    def controlType(self) -> "std::string":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_controlType(self)

    def isControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isControlTypeDefaulted(self)

    def controllingZoneorThermostatLocation(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_controllingZoneorThermostatLocation(self)

    def dehumidificationControlType(self) -> "std::string":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dehumidificationControlType(self)

    def isDehumidificationControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isDehumidificationControlTypeDefaulted(self)

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_availabilitySchedule(self)

    def supplyFan(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyFan(self)

    def fanPlacement(self) -> "boost::optional< std::string >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fanPlacement(self)

    def supplyAirFanOperatingModeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFanOperatingModeSchedule(self)

    def heatingCoil(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_heatingCoil(self)

    def dXHeatingCoilSizingRatio(self) -> "double":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dXHeatingCoilSizingRatio(self)

    def isDXHeatingCoilSizingRatioDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isDXHeatingCoilSizingRatioDefaulted(self)

    def coolingCoil(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_coolingCoil(self)

    def useDOASDXCoolingCoil(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_useDOASDXCoolingCoil(self)

    def isUseDOASDXCoolingCoilDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isUseDOASDXCoolingCoilDefaulted(self)

    def dOASDXCoolingCoilLeavingMinimumAirTemperature(self) -> "double":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dOASDXCoolingCoilLeavingMinimumAirTemperature(self)

    def isDOASDXCoolingCoilLeavingMinimumAirTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isDOASDXCoolingCoilLeavingMinimumAirTemperatureDefaulted(self)

    def latentLoadControl(self) -> "std::string":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_latentLoadControl(self)

    def isLatentLoadControlDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isLatentLoadControlDefaulted(self)

    def supplementalHeatingCoil(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplementalHeatingCoil(self)

    def supplyAirFlowRateMethodDuringCoolingOperation(self) -> "boost::optional< std::string >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringCoolingOperation(self)

    def supplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def supplyAirFlowRatePerFloorAreaDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRatePerFloorAreaDuringCoolingOperation(self)

    def fractionofAutosizedDesignCoolingSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofAutosizedDesignCoolingSupplyAirFlowRate(self)

    def designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self)

    def supplyAirFlowRateMethodDuringHeatingOperation(self) -> "boost::optional< std::string >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringHeatingOperation(self)

    def supplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def supplyAirFlowRatePerFloorAreaduringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRatePerFloorAreaduringHeatingOperation(self)

    def fractionofAutosizedDesignHeatingSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofAutosizedDesignHeatingSupplyAirFlowRate(self)

    def designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self)

    def supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self) -> "boost::optional< std::string >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisRequired(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisRequiredAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isSupplyAirFlowRateWhenNoCoolingorHeatingisRequiredAutosized(self)

    def supplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self)

    def fractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def fractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self)

    def designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self)

    def maximumSupplyAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_maximumSupplyAirTemperature(self)

    def isMaximumSupplyAirTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isMaximumSupplyAirTemperatureDefaulted(self)

    def isMaximumSupplyAirTemperatureAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isMaximumSupplyAirTemperatureAutosized(self)

    def maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self) -> "double":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self)

    def outdoorDryBulbTemperatureSensorNodeName(self) -> "boost::optional< std::string >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_outdoorDryBulbTemperatureSensorNodeName(self)

    def maximumCyclingRate(self) -> "double":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_maximumCyclingRate(self)

    def isMaximumCyclingRateDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isMaximumCyclingRateDefaulted(self)

    def heatPumpTimeConstant(self) -> "double":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_heatPumpTimeConstant(self)

    def isHeatPumpTimeConstantDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isHeatPumpTimeConstantDefaulted(self)

    def fractionofOnCyclePowerUse(self) -> "double":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofOnCyclePowerUse(self)

    def isFractionofOnCyclePowerUseDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isFractionofOnCyclePowerUseDefaulted(self)

    def heatPumpFanDelayTime(self) -> "double":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_heatPumpFanDelayTime(self)

    def isHeatPumpFanDelayTimeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isHeatPumpFanDelayTimeDefaulted(self)

    def ancilliaryOnCycleElectricPower(self) -> "double":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_ancilliaryOnCycleElectricPower(self)

    def isAncilliaryOnCycleElectricPowerDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isAncilliaryOnCycleElectricPowerDefaulted(self)

    def ancilliaryOffCycleElectricPower(self) -> "double":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_ancilliaryOffCycleElectricPower(self)

    def isAncilliaryOffCycleElectricPowerDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isAncilliaryOffCycleElectricPowerDefaulted(self)

    def designSpecificationMultispeedObject(self) -> "boost::optional< openstudio::model::UnitarySystemPerformanceMultispeed >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSpecificationMultispeedObject(self)

    def setControlType(self, controlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setControlType(self, controlType)

    def resetControlType(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetControlType(self)

    def setControllingZoneorThermostatLocation(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setControllingZoneorThermostatLocation(self, thermalZone)

    def resetControllingZoneorThermostatLocation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetControllingZoneorThermostatLocation(self)

    def setDehumidificationControlType(self, dehumidificationControlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDehumidificationControlType(self, dehumidificationControlType)

    def resetDehumidificationControlType(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDehumidificationControlType(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetAvailabilitySchedule(self)

    def setSupplyFan(self, supplyFan: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyFan(self, supplyFan)

    def resetSupplyFan(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyFan(self)

    def setFanPlacement(self, fanPlacement: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFanPlacement(self, fanPlacement)

    def resetFanPlacement(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFanPlacement(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFanOperatingModeSchedule(self)

    def setHeatingCoil(self, heatingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setHeatingCoil(self, heatingCoil)

    def resetHeatingCoil(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetHeatingCoil(self)

    def setDXHeatingCoilSizingRatio(self, dXHeatingCoilSizingRatio: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDXHeatingCoilSizingRatio(self, dXHeatingCoilSizingRatio)

    def resetDXHeatingCoilSizingRatio(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDXHeatingCoilSizingRatio(self)

    def setCoolingCoil(self, coolingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setCoolingCoil(self, coolingCoil)

    def resetCoolingCoil(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetCoolingCoil(self)

    def setUseDOASDXCoolingCoil(self, useDOASDXCoolingCoil: 'bool') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setUseDOASDXCoolingCoil(self, useDOASDXCoolingCoil)

    def resetUseDOASDXCoolingCoil(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetUseDOASDXCoolingCoil(self)

    def setDOASDXCoolingCoilLeavingMinimumAirTemperature(self, dOASDXCoolingCoilLeavingMinimumAirTemperature: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDOASDXCoolingCoilLeavingMinimumAirTemperature(self, dOASDXCoolingCoilLeavingMinimumAirTemperature)

    def resetDOASDXCoolingCoilLeavingMinimumAirTemperature(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDOASDXCoolingCoilLeavingMinimumAirTemperature(self)

    def setLatentLoadControl(self, latentLoadControl: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setLatentLoadControl(self, latentLoadControl)

    def resetLatentLoadControl(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetLatentLoadControl(self)

    def setSupplementalHeatingCoil(self, supplementalHeatingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplementalHeatingCoil(self, supplementalHeatingCoil)

    def resetSupplementalHeatingCoil(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplementalHeatingCoil(self)

    def setSupplyAirFlowRateMethodDuringCoolingOperation(self, supplyAirFlowRateMethodDuringCoolingOperation: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateMethodDuringCoolingOperation(self, supplyAirFlowRateMethodDuringCoolingOperation)

    def resetSupplyAirFlowRateMethodDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateMethodDuringCoolingOperation(self)

    def setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation)

    def resetSupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def setSupplyAirFlowRatePerFloorAreaDuringCoolingOperation(self, supplyAirFlowRatePerFloorAreaDuringCoolingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRatePerFloorAreaDuringCoolingOperation(self, supplyAirFlowRatePerFloorAreaDuringCoolingOperation)

    def resetSupplyAirFlowRatePerFloorAreaDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRatePerFloorAreaDuringCoolingOperation(self)

    def setFractionofAutosizedDesignCoolingSupplyAirFlowRate(self, fractionofAutosizedDesignCoolingSupplyAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofAutosizedDesignCoolingSupplyAirFlowRate(self, fractionofAutosizedDesignCoolingSupplyAirFlowRate)

    def resetFractionofAutosizedDesignCoolingSupplyAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofAutosizedDesignCoolingSupplyAirFlowRate(self)

    def setDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self, designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self, designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation)

    def resetDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self)

    def setSupplyAirFlowRateMethodDuringHeatingOperation(self, supplyAirFlowRateMethodDuringHeatingOperation: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateMethodDuringHeatingOperation(self, supplyAirFlowRateMethodDuringHeatingOperation)

    def resetSupplyAirFlowRateMethodDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateMethodDuringHeatingOperation(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation)

    def resetSupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def setSupplyAirFlowRatePerFloorAreaduringHeatingOperation(self, supplyAirFlowRatePerFloorAreaduringHeatingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRatePerFloorAreaduringHeatingOperation(self, supplyAirFlowRatePerFloorAreaduringHeatingOperation)

    def resetSupplyAirFlowRatePerFloorAreaduringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRatePerFloorAreaduringHeatingOperation(self)

    def setFractionofAutosizedDesignHeatingSupplyAirFlowRate(self, fractionofAutosizedDesignHeatingSupplyAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofAutosizedDesignHeatingSupplyAirFlowRate(self, fractionofAutosizedDesignHeatingSupplyAirFlowRate)

    def resetFractionofAutosizedDesignHeatingSupplyAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofAutosizedDesignHeatingSupplyAirFlowRate(self)

    def setDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self, designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self, designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation)

    def resetDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self)

    def setSupplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired)

    def resetSupplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRateWhenNoCoolingorHeatingisRequired: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRateWhenNoCoolingorHeatingisRequired)

    def resetSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def setSupplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired)

    def resetSupplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self)

    def setFractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, fractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, fractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired)

    def resetFractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def setFractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, fractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, fractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired)

    def resetFractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def setDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self, designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self, designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired)

    def resetDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self)

    def setDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self, designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self, designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired)

    def resetDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self)

    def setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature)

    def resetMaximumSupplyAirTemperature(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetMaximumSupplyAirTemperature(self)

    def autosizeMaximumSupplyAirTemperature(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizeMaximumSupplyAirTemperature(self)

    def setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation)

    def resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def setOutdoorDryBulbTemperatureSensorNodeName(self, outdoorDryBulbTemperatureSensorNodeName: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setOutdoorDryBulbTemperatureSensorNodeName(self, outdoorDryBulbTemperatureSensorNodeName)

    def resetOutdoorDryBulbTemperatureSensorNodeName(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetOutdoorDryBulbTemperatureSensorNodeName(self)

    def setMaximumCyclingRate(self, maximumCyclingRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setMaximumCyclingRate(self, maximumCyclingRate)

    def resetMaximumCyclingRate(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetMaximumCyclingRate(self)

    def setHeatPumpTimeConstant(self, heatPumpTimeConstant: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setHeatPumpTimeConstant(self, heatPumpTimeConstant)

    def resetHeatPumpTimeConstant(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetHeatPumpTimeConstant(self)

    def setFractionofOnCyclePowerUse(self, fractionofOnCyclePowerUse: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofOnCyclePowerUse(self, fractionofOnCyclePowerUse)

    def resetFractionofOnCyclePowerUse(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofOnCyclePowerUse(self)

    def setHeatPumpFanDelayTime(self, heatPumpFanDelayTime: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setHeatPumpFanDelayTime(self, heatPumpFanDelayTime)

    def resetHeatPumpFanDelayTime(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetHeatPumpFanDelayTime(self)

    def setAncilliaryOnCycleElectricPower(self, ancilliaryOnCycleElectricPower: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setAncilliaryOnCycleElectricPower(self, ancilliaryOnCycleElectricPower)

    def resetAncilliaryOnCycleElectricPower(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetAncilliaryOnCycleElectricPower(self)

    def setAncilliaryOffCycleElectricPower(self, ancilliaryOffCycleElectricPower: 'double') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setAncilliaryOffCycleElectricPower(self, ancilliaryOffCycleElectricPower)

    def resetAncilliaryOffCycleElectricPower(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetAncilliaryOffCycleElectricPower(self)

    def setDesignSpecificationMultispeedObject(self, unitarySystemPerformace: 'UnitarySystemPerformanceMultispeed') -> "bool":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSpecificationMultispeedObject(self, unitarySystemPerformace)

    def resetDesignSpecificationMultispeedObject(self) -> "void":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSpecificationMultispeedObject(self)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def autosizedMaximumSupplyAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizedMaximumSupplyAirTemperature(self)
AirLoopHVACUnitarySystem_swigregister = _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_swigregister
AirLoopHVACUnitarySystem_swigregister(AirLoopHVACUnitarySystem)

def AirLoopHVACUnitarySystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_iddObjectType()
AirLoopHVACUnitarySystem_iddObjectType = _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_iddObjectType

def AirLoopHVACUnitarySystem_controlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_controlTypeValues()
AirLoopHVACUnitarySystem_controlTypeValues = _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_controlTypeValues

def AirLoopHVACUnitarySystem_dehumidificationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dehumidificationControlTypeValues()
AirLoopHVACUnitarySystem_dehumidificationControlTypeValues = _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dehumidificationControlTypeValues

def AirLoopHVACUnitarySystem_fanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fanPlacementValues()
AirLoopHVACUnitarySystem_fanPlacementValues = _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fanPlacementValues

def AirLoopHVACUnitarySystem_latentLoadControlValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_latentLoadControlValues()
AirLoopHVACUnitarySystem_latentLoadControlValues = _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_latentLoadControlValues

def AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringCoolingOperationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringCoolingOperationValues()
AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringCoolingOperationValues = _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringCoolingOperationValues

def AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringHeatingOperationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringHeatingOperationValues()
AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringHeatingOperationValues = _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringHeatingOperationValues

def AirLoopHVACUnitarySystem_supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues()
AirLoopHVACUnitarySystem_supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues = _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues


def toAirLoopHVACUnitarySystem(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirLoopHVACUnitarySystem >":
    return _openstudiomodelzonehvac.toAirLoopHVACUnitarySystem(idfObject)
toAirLoopHVACUnitarySystem = _openstudiomodelzonehvac.toAirLoopHVACUnitarySystem

def getAirLoopHVACUnitarySystem(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirLoopHVACUnitarySystem >":
    return _openstudiomodelzonehvac.getAirLoopHVACUnitarySystem(t_model, t_handle)
getAirLoopHVACUnitarySystem = _openstudiomodelzonehvac.getAirLoopHVACUnitarySystem

def getAirLoopHVACUnitarySystems(t_model: 'Model') -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem,std::allocator< openstudio::model::AirLoopHVACUnitarySystem > >":
    return _openstudiomodelzonehvac.getAirLoopHVACUnitarySystems(t_model)
getAirLoopHVACUnitarySystems = _openstudiomodelzonehvac.getAirLoopHVACUnitarySystems

def getAirLoopHVACUnitarySystemByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirLoopHVACUnitarySystem >":
    return _openstudiomodelzonehvac.getAirLoopHVACUnitarySystemByName(t_model, t_name)
getAirLoopHVACUnitarySystemByName = _openstudiomodelzonehvac.getAirLoopHVACUnitarySystemByName

def getAirLoopHVACUnitarySystemsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirLoopHVACUnitarySystem,std::allocator< openstudio::model::AirLoopHVACUnitarySystem > >":
    return _openstudiomodelzonehvac.getAirLoopHVACUnitarySystemsByName(t_model, t_name, t_exactMatch)
getAirLoopHVACUnitarySystemsByName = _openstudiomodelzonehvac.getAirLoopHVACUnitarySystemsByName
class FanZoneExhaust(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FanZoneExhaust, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FanZoneExhaust, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelzonehvac.new_FanZoneExhaust(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_FanZoneExhaust
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.FanZoneExhaust_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.FanZoneExhaust_iddObjectType)
    __swig_getmethods__["systemAvailabilityManagerCouplingModeValues"] = lambda x: _openstudiomodelzonehvac.FanZoneExhaust_systemAvailabilityManagerCouplingModeValues
    if _newclass:
        systemAvailabilityManagerCouplingModeValues = staticmethod(_openstudiomodelzonehvac.FanZoneExhaust_systemAvailabilityManagerCouplingModeValues)

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.FanZoneExhaust_availabilitySchedule(self)

    def fanTotalEfficiency(self) -> "double":
        return _openstudiomodelzonehvac.FanZoneExhaust_fanTotalEfficiency(self)

    def fanEfficiency(self) -> "double":
        return _openstudiomodelzonehvac.FanZoneExhaust_fanEfficiency(self)

    def pressureRise(self) -> "double":
        return _openstudiomodelzonehvac.FanZoneExhaust_pressureRise(self)

    def maximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.FanZoneExhaust_maximumFlowRate(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelzonehvac.FanZoneExhaust_endUseSubcategory(self)

    def flowFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.FanZoneExhaust_flowFractionSchedule(self)

    def systemAvailabilityManagerCouplingMode(self) -> "std::string":
        return _openstudiomodelzonehvac.FanZoneExhaust_systemAvailabilityManagerCouplingMode(self)

    def minimumZoneTemperatureLimitSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.FanZoneExhaust_minimumZoneTemperatureLimitSchedule(self)

    def balancedExhaustFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.FanZoneExhaust_balancedExhaustFractionSchedule(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaust_resetAvailabilitySchedule(self)

    def setFanTotalEfficiency(self, fanTotalEfficiency: 'double') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setFanTotalEfficiency(self, fanTotalEfficiency)

    def setFanEfficiency(self, fanTotalEfficiency: 'double') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setFanEfficiency(self, fanTotalEfficiency)

    def setPressureRise(self, pressureRise: 'double') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setPressureRise(self, pressureRise)

    def setMaximumFlowRate(self, maximumFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setMaximumFlowRate(self, maximumFlowRate)

    def resetMaximumFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaust_resetMaximumFlowRate(self)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setEndUseSubcategory(self, endUseSubcategory)

    def setFlowFractionSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setFlowFractionSchedule(self, schedule)

    def resetFlowFractionSchedule(self) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaust_resetFlowFractionSchedule(self)

    def setSystemAvailabilityManagerCouplingMode(self, systemAvailabilityManagerCouplingMode: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setSystemAvailabilityManagerCouplingMode(self, systemAvailabilityManagerCouplingMode)

    def setMinimumZoneTemperatureLimitSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setMinimumZoneTemperatureLimitSchedule(self, schedule)

    def resetMinimumZoneTemperatureLimitSchedule(self) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaust_resetMinimumZoneTemperatureLimitSchedule(self)

    def setBalancedExhaustFractionSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.FanZoneExhaust_setBalancedExhaustFractionSchedule(self, schedule)

    def resetBalancedExhaustFractionSchedule(self) -> "void":
        return _openstudiomodelzonehvac.FanZoneExhaust_resetBalancedExhaustFractionSchedule(self)

    def getAirflowNetworkZoneExhaustFan(self, crack: 'openstudio::model::AirflowNetworkCrack const &') -> "openstudio::model::AirflowNetworkZoneExhaustFan":
        return _openstudiomodelzonehvac.FanZoneExhaust_getAirflowNetworkZoneExhaustFan(self, crack)

    def airflowNetworkZoneExhaustFan(self) -> "boost::optional< openstudio::model::AirflowNetworkZoneExhaustFan >":
        return _openstudiomodelzonehvac.FanZoneExhaust_airflowNetworkZoneExhaustFan(self)
FanZoneExhaust_swigregister = _openstudiomodelzonehvac.FanZoneExhaust_swigregister
FanZoneExhaust_swigregister(FanZoneExhaust)

def FanZoneExhaust_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.FanZoneExhaust_iddObjectType()
FanZoneExhaust_iddObjectType = _openstudiomodelzonehvac.FanZoneExhaust_iddObjectType

def FanZoneExhaust_systemAvailabilityManagerCouplingModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.FanZoneExhaust_systemAvailabilityManagerCouplingModeValues()
FanZoneExhaust_systemAvailabilityManagerCouplingModeValues = _openstudiomodelzonehvac.FanZoneExhaust_systemAvailabilityManagerCouplingModeValues


def toFanZoneExhaust(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::FanZoneExhaust >":
    return _openstudiomodelzonehvac.toFanZoneExhaust(idfObject)
toFanZoneExhaust = _openstudiomodelzonehvac.toFanZoneExhaust

def getFanZoneExhaust(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::FanZoneExhaust >":
    return _openstudiomodelzonehvac.getFanZoneExhaust(t_model, t_handle)
getFanZoneExhaust = _openstudiomodelzonehvac.getFanZoneExhaust

def getFanZoneExhausts(t_model: 'Model') -> "std::vector< openstudio::model::FanZoneExhaust,std::allocator< openstudio::model::FanZoneExhaust > >":
    return _openstudiomodelzonehvac.getFanZoneExhausts(t_model)
getFanZoneExhausts = _openstudiomodelzonehvac.getFanZoneExhausts

def getFanZoneExhaustByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::FanZoneExhaust >":
    return _openstudiomodelzonehvac.getFanZoneExhaustByName(t_model, t_name)
getFanZoneExhaustByName = _openstudiomodelzonehvac.getFanZoneExhaustByName

def getFanZoneExhaustsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::FanZoneExhaust,std::allocator< openstudio::model::FanZoneExhaust > >":
    return _openstudiomodelzonehvac.getFanZoneExhaustsByName(t_model, t_name, t_exactMatch)
getFanZoneExhaustsByName = _openstudiomodelzonehvac.getFanZoneExhaustsByName
class WaterHeaterHeatPump(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterHeaterHeatPump, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaterHeaterHeatPump, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_WaterHeaterHeatPump(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_WaterHeaterHeatPump
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPump_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPump_iddObjectType)
    __swig_getmethods__["inletAirConfigurationValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirConfigurationValues
    if _newclass:
        inletAirConfigurationValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirConfigurationValues)
    __swig_getmethods__["compressorLocationValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorLocationValues
    if _newclass:
        compressorLocationValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPump_compressorLocationValues)
    __swig_getmethods__["fanPlacementValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPump_fanPlacementValues
    if _newclass:
        fanPlacementValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPump_fanPlacementValues)
    __swig_getmethods__["parasiticHeatRejectionLocationValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPump_parasiticHeatRejectionLocationValues
    if _newclass:
        parasiticHeatRejectionLocationValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPump_parasiticHeatRejectionLocationValues)
    __swig_getmethods__["controlSensorLocationInStratifiedTankValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPump_controlSensorLocationInStratifiedTankValues
    if _newclass:
        controlSensorLocationInStratifiedTankValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPump_controlSensorLocationInStratifiedTankValues)

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_availabilitySchedule(self)

    def compressorSetpointTemperatureSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorSetpointTemperatureSchedule(self)

    def deadBandTemperatureDifference(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_deadBandTemperatureDifference(self)

    def condenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_condenserWaterFlowRate(self)

    def isCondenserWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_isCondenserWaterFlowRateAutosized(self)

    def evaporatorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_evaporatorAirFlowRate(self)

    def isEvaporatorAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_isEvaporatorAirFlowRateAutosized(self)

    def inletAirConfiguration(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirConfiguration(self)

    def inletAirTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirTemperatureSchedule(self)

    def inletAirHumiditySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirHumiditySchedule(self)

    def tank(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_tank(self)

    def dXCoil(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_dXCoil(self)

    def minimumInletAirTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_minimumInletAirTemperatureforCompressorOperation(self)

    def compressorLocation(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorLocation(self)

    def compressorAmbientTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorAmbientTemperatureSchedule(self)

    def fan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_fan(self)

    def fanPlacement(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_fanPlacement(self)

    def onCycleParasiticElectricLoad(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_onCycleParasiticElectricLoad(self)

    def offCycleParasiticElectricLoad(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_offCycleParasiticElectricLoad(self)

    def parasiticHeatRejectionLocation(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_parasiticHeatRejectionLocation(self)

    def inletAirMixerSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirMixerSchedule(self)

    def controlSensorLocationInStratifiedTank(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_controlSensorLocationInStratifiedTank(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetAvailabilitySchedule(self)

    def setCompressorSetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setCompressorSetpointTemperatureSchedule(self, schedule)

    def setDeadBandTemperatureDifference(self, deadBandTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setDeadBandTemperatureDifference(self, deadBandTemperatureDifference)

    def setCondenserWaterFlowRate(self, condenserWaterFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setCondenserWaterFlowRate(self, condenserWaterFlowRate)

    def resetCondenserWaterFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetCondenserWaterFlowRate(self)

    def autosizeCondenserWaterFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_autosizeCondenserWaterFlowRate(self)

    def setEvaporatorAirFlowRate(self, evaporatorAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setEvaporatorAirFlowRate(self, evaporatorAirFlowRate)

    def resetEvaporatorAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetEvaporatorAirFlowRate(self)

    def autosizeEvaporatorAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_autosizeEvaporatorAirFlowRate(self)

    def setInletAirConfiguration(self, inletAirConfiguration: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setInletAirConfiguration(self, inletAirConfiguration)

    def setInletAirTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setInletAirTemperatureSchedule(self, schedule)

    def resetInletAirTemperatureSchedule(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetInletAirTemperatureSchedule(self)

    def setInletAirHumiditySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setInletAirHumiditySchedule(self, schedule)

    def resetInletAirHumiditySchedule(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetInletAirHumiditySchedule(self)

    def setTank(self, waterHeater: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setTank(self, waterHeater)

    def setDXCoil(self, coil: 'ModelObject') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setDXCoil(self, coil)

    def setMinimumInletAirTemperatureforCompressorOperation(self, minimumInletAirTemperatureforCompressorOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setMinimumInletAirTemperatureforCompressorOperation(self, minimumInletAirTemperatureforCompressorOperation)

    def setCompressorLocation(self, compressorLocation: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setCompressorLocation(self, compressorLocation)

    def setCompressorAmbientTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setCompressorAmbientTemperatureSchedule(self, schedule)

    def resetCompressorAmbientTemperatureSchedule(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetCompressorAmbientTemperatureSchedule(self)

    def setFan(self, fan: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setFan(self, fan)

    def setFanPlacement(self, fanPlacement: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setFanPlacement(self, fanPlacement)

    def setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad)

    def setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad)

    def setParasiticHeatRejectionLocation(self, parasiticHeatRejectionLocation: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setParasiticHeatRejectionLocation(self, parasiticHeatRejectionLocation)

    def setInletAirMixerSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setInletAirMixerSchedule(self, schedule)

    def setControlSensorLocationInStratifiedTank(self, controlSensorLocationInStratifiedTank: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setControlSensorLocationInStratifiedTank(self, controlSensorLocationInStratifiedTank)

    def autosizedCondenserWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_autosizedCondenserWaterFlowRate(self)

    def autosizedEvaporatorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_autosizedEvaporatorAirFlowRate(self)
WaterHeaterHeatPump_swigregister = _openstudiomodelzonehvac.WaterHeaterHeatPump_swigregister
WaterHeaterHeatPump_swigregister(WaterHeaterHeatPump)

def WaterHeaterHeatPump_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.WaterHeaterHeatPump_iddObjectType()
WaterHeaterHeatPump_iddObjectType = _openstudiomodelzonehvac.WaterHeaterHeatPump_iddObjectType

def WaterHeaterHeatPump_inletAirConfigurationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirConfigurationValues()
WaterHeaterHeatPump_inletAirConfigurationValues = _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirConfigurationValues

def WaterHeaterHeatPump_compressorLocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorLocationValues()
WaterHeaterHeatPump_compressorLocationValues = _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorLocationValues

def WaterHeaterHeatPump_fanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPump_fanPlacementValues()
WaterHeaterHeatPump_fanPlacementValues = _openstudiomodelzonehvac.WaterHeaterHeatPump_fanPlacementValues

def WaterHeaterHeatPump_parasiticHeatRejectionLocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPump_parasiticHeatRejectionLocationValues()
WaterHeaterHeatPump_parasiticHeatRejectionLocationValues = _openstudiomodelzonehvac.WaterHeaterHeatPump_parasiticHeatRejectionLocationValues

def WaterHeaterHeatPump_controlSensorLocationInStratifiedTankValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPump_controlSensorLocationInStratifiedTankValues()
WaterHeaterHeatPump_controlSensorLocationInStratifiedTankValues = _openstudiomodelzonehvac.WaterHeaterHeatPump_controlSensorLocationInStratifiedTankValues


def toWaterHeaterHeatPump(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WaterHeaterHeatPump >":
    return _openstudiomodelzonehvac.toWaterHeaterHeatPump(idfObject)
toWaterHeaterHeatPump = _openstudiomodelzonehvac.toWaterHeaterHeatPump

def getWaterHeaterHeatPump(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WaterHeaterHeatPump >":
    return _openstudiomodelzonehvac.getWaterHeaterHeatPump(t_model, t_handle)
getWaterHeaterHeatPump = _openstudiomodelzonehvac.getWaterHeaterHeatPump

def getWaterHeaterHeatPumps(t_model: 'Model') -> "std::vector< openstudio::model::WaterHeaterHeatPump,std::allocator< openstudio::model::WaterHeaterHeatPump > >":
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumps(t_model)
getWaterHeaterHeatPumps = _openstudiomodelzonehvac.getWaterHeaterHeatPumps

def getWaterHeaterHeatPumpByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WaterHeaterHeatPump >":
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpByName(t_model, t_name)
getWaterHeaterHeatPumpByName = _openstudiomodelzonehvac.getWaterHeaterHeatPumpByName

def getWaterHeaterHeatPumpsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WaterHeaterHeatPump,std::allocator< openstudio::model::WaterHeaterHeatPump > >":
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpsByName(t_model, t_name, t_exactMatch)
getWaterHeaterHeatPumpsByName = _openstudiomodelzonehvac.getWaterHeaterHeatPumpsByName
class WaterHeaterHeatPumpWrappedCondenser(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterHeaterHeatPumpWrappedCondenser, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaterHeaterHeatPumpWrappedCondenser, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_WaterHeaterHeatPumpWrappedCondenser(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_WaterHeaterHeatPumpWrappedCondenser
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_iddObjectType)
    __swig_getmethods__["inletAirConfigurationValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirConfigurationValues
    if _newclass:
        inletAirConfigurationValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirConfigurationValues)
    __swig_getmethods__["compressorLocationValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorLocationValues
    if _newclass:
        compressorLocationValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorLocationValues)
    __swig_getmethods__["fanPlacementValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_fanPlacementValues
    if _newclass:
        fanPlacementValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_fanPlacementValues)
    __swig_getmethods__["parasiticHeatRejectionLocationValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_parasiticHeatRejectionLocationValues
    if _newclass:
        parasiticHeatRejectionLocationValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_parasiticHeatRejectionLocationValues)
    __swig_getmethods__["tankElementControlLogicValues"] = lambda x: _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_tankElementControlLogicValues
    if _newclass:
        tankElementControlLogicValues = staticmethod(_openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_tankElementControlLogicValues)

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_availabilitySchedule(self)

    def compressorSetpointTemperatureSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorSetpointTemperatureSchedule(self)

    def deadBandTemperatureDifference(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_deadBandTemperatureDifference(self)

    def condenserBottomLocation(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_condenserBottomLocation(self)

    def condenserTopLocation(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_condenserTopLocation(self)

    def evaporatorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_evaporatorAirFlowRate(self)

    def isEvaporatorAirFlowRateAutocalculated(self) -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_isEvaporatorAirFlowRateAutocalculated(self)

    def inletAirConfiguration(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirConfiguration(self)

    def inletAirTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirTemperatureSchedule(self)

    def inletAirHumiditySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirHumiditySchedule(self)

    def tank(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_tank(self)

    def dXCoil(self) -> "openstudio::model::ModelObject":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_dXCoil(self)

    def minimumInletAirTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_minimumInletAirTemperatureforCompressorOperation(self)

    def maximumInletAirTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_maximumInletAirTemperatureforCompressorOperation(self)

    def compressorLocation(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorLocation(self)

    def compressorAmbientTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorAmbientTemperatureSchedule(self)

    def fan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_fan(self)

    def fanPlacement(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_fanPlacement(self)

    def onCycleParasiticElectricLoad(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_onCycleParasiticElectricLoad(self)

    def offCycleParasiticElectricLoad(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_offCycleParasiticElectricLoad(self)

    def parasiticHeatRejectionLocation(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_parasiticHeatRejectionLocation(self)

    def inletAirMixerSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirMixerSchedule(self)

    def tankElementControlLogic(self) -> "std::string":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_tankElementControlLogic(self)

    def controlSensor1HeightInStratifiedTank(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_controlSensor1HeightInStratifiedTank(self)

    def controlSensor1Weight(self) -> "double":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_controlSensor1Weight(self)

    def controlSensor2HeightInStratifiedTank(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_controlSensor2HeightInStratifiedTank(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetAvailabilitySchedule(self)

    def setCompressorSetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCompressorSetpointTemperatureSchedule(self, schedule)

    def setDeadBandTemperatureDifference(self, deadBandTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setDeadBandTemperatureDifference(self, deadBandTemperatureDifference)

    def setCondenserBottomLocation(self, condenserBottomLocation: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCondenserBottomLocation(self, condenserBottomLocation)

    def setCondenserTopLocation(self, condenserTopLocation: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCondenserTopLocation(self, condenserTopLocation)

    def setEvaporatorAirFlowRate(self, evaporatorAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setEvaporatorAirFlowRate(self, evaporatorAirFlowRate)

    def autocalculateEvaporatorAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_autocalculateEvaporatorAirFlowRate(self)

    def setInletAirConfiguration(self, inletAirConfiguration: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setInletAirConfiguration(self, inletAirConfiguration)

    def setInletAirTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setInletAirTemperatureSchedule(self, schedule)

    def resetInletAirTemperatureSchedule(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetInletAirTemperatureSchedule(self)

    def setInletAirHumiditySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setInletAirHumiditySchedule(self, schedule)

    def resetInletAirHumiditySchedule(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetInletAirHumiditySchedule(self)

    def setTank(self, waterHeaterStratified: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setTank(self, waterHeaterStratified)

    def setDXCoil(self, heatPumpWaterHeaterDXCoilsWrapped: 'ModelObject') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setDXCoil(self, heatPumpWaterHeaterDXCoilsWrapped)

    def setMinimumInletAirTemperatureforCompressorOperation(self, minimumInletAirTemperatureforCompressorOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setMinimumInletAirTemperatureforCompressorOperation(self, minimumInletAirTemperatureforCompressorOperation)

    def setMaximumInletAirTemperatureforCompressorOperation(self, maximumInletAirTemperatureforCompressorOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setMaximumInletAirTemperatureforCompressorOperation(self, maximumInletAirTemperatureforCompressorOperation)

    def setCompressorLocation(self, compressorLocation: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCompressorLocation(self, compressorLocation)

    def setCompressorAmbientTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCompressorAmbientTemperatureSchedule(self, schedule)

    def resetCompressorAmbientTemperatureSchedule(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetCompressorAmbientTemperatureSchedule(self)

    def setFan(self, fansOnOff: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setFan(self, fansOnOff)

    def setFanPlacement(self, fanPlacement: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setFanPlacement(self, fanPlacement)

    def setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad)

    def setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad)

    def setParasiticHeatRejectionLocation(self, parasiticHeatRejectionLocation: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setParasiticHeatRejectionLocation(self, parasiticHeatRejectionLocation)

    def setInletAirMixerSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setInletAirMixerSchedule(self, schedule)

    def resetInletAirMixerSchedule(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetInletAirMixerSchedule(self)

    def setTankElementControlLogic(self, tankElementControlLogic: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setTankElementControlLogic(self, tankElementControlLogic)

    def setControlSensor1HeightInStratifiedTank(self, controlSensor1HeightInStratifiedTank: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setControlSensor1HeightInStratifiedTank(self, controlSensor1HeightInStratifiedTank)

    def resetControlSensor1HeightInStratifiedTank(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetControlSensor1HeightInStratifiedTank(self)

    def setControlSensor1Weight(self, controlSensor1Weight: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setControlSensor1Weight(self, controlSensor1Weight)

    def setControlSensor2HeightInStratifiedTank(self, controlSensor2HeightInStratifiedTank: 'double') -> "bool":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setControlSensor2HeightInStratifiedTank(self, controlSensor2HeightInStratifiedTank)

    def resetControlSensor2HeightInStratifiedTank(self) -> "void":
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetControlSensor2HeightInStratifiedTank(self)
WaterHeaterHeatPumpWrappedCondenser_swigregister = _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_swigregister
WaterHeaterHeatPumpWrappedCondenser_swigregister(WaterHeaterHeatPumpWrappedCondenser)

def WaterHeaterHeatPumpWrappedCondenser_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_iddObjectType()
WaterHeaterHeatPumpWrappedCondenser_iddObjectType = _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_iddObjectType

def WaterHeaterHeatPumpWrappedCondenser_inletAirConfigurationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirConfigurationValues()
WaterHeaterHeatPumpWrappedCondenser_inletAirConfigurationValues = _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirConfigurationValues

def WaterHeaterHeatPumpWrappedCondenser_compressorLocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorLocationValues()
WaterHeaterHeatPumpWrappedCondenser_compressorLocationValues = _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorLocationValues

def WaterHeaterHeatPumpWrappedCondenser_fanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_fanPlacementValues()
WaterHeaterHeatPumpWrappedCondenser_fanPlacementValues = _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_fanPlacementValues

def WaterHeaterHeatPumpWrappedCondenser_parasiticHeatRejectionLocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_parasiticHeatRejectionLocationValues()
WaterHeaterHeatPumpWrappedCondenser_parasiticHeatRejectionLocationValues = _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_parasiticHeatRejectionLocationValues

def WaterHeaterHeatPumpWrappedCondenser_tankElementControlLogicValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_tankElementControlLogicValues()
WaterHeaterHeatPumpWrappedCondenser_tankElementControlLogicValues = _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_tankElementControlLogicValues


def toWaterHeaterHeatPumpWrappedCondenser(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >":
    return _openstudiomodelzonehvac.toWaterHeaterHeatPumpWrappedCondenser(idfObject)
toWaterHeaterHeatPumpWrappedCondenser = _openstudiomodelzonehvac.toWaterHeaterHeatPumpWrappedCondenser

def getWaterHeaterHeatPumpWrappedCondenser(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >":
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondenser(t_model, t_handle)
getWaterHeaterHeatPumpWrappedCondenser = _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondenser

def getWaterHeaterHeatPumpWrappedCondensers(t_model: 'Model') -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser,std::allocator< openstudio::model::WaterHeaterHeatPumpWrappedCondenser > >":
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondensers(t_model)
getWaterHeaterHeatPumpWrappedCondensers = _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondensers

def getWaterHeaterHeatPumpWrappedCondenserByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WaterHeaterHeatPumpWrappedCondenser >":
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondenserByName(t_model, t_name)
getWaterHeaterHeatPumpWrappedCondenserByName = _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondenserByName

def getWaterHeaterHeatPumpWrappedCondensersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WaterHeaterHeatPumpWrappedCondenser,std::allocator< openstudio::model::WaterHeaterHeatPumpWrappedCondenser > >":
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondensersByName(t_model, t_name, t_exactMatch)
getWaterHeaterHeatPumpWrappedCondensersByName = _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondensersByName
class ZoneHVACBaseboardConvectiveElectric(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACBaseboardConvectiveElectric, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACBaseboardConvectiveElectric, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelzonehvac.new_ZoneHVACBaseboardConvectiveElectric(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardConvectiveElectric
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_iddObjectType)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_setAvailabilitySchedule(self, schedule)

    def nominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_nominalCapacity(self)

    def getNominalCapacity(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_getNominalCapacity(self, returnIP)

    def isNominalCapacityAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_isNominalCapacityAutosized(self)

    def setNominalCapacity(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_setNominalCapacity(self, *args)

    def autosizeNominalCapacity(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_autosizeNominalCapacity(self)

    def efficiency(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_efficiency(self)

    def getEfficiency(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_getEfficiency(self, returnIP)

    def isEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_isEfficiencyDefaulted(self)

    def setEfficiency(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_setEfficiency(self, *args)

    def resetEfficiency(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_resetEfficiency(self)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_thermalZone(self)

    def addToThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_removeFromThermalZone(self)

    def autosizedNominalCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_autosizedNominalCapacity(self)
ZoneHVACBaseboardConvectiveElectric_swigregister = _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_swigregister
ZoneHVACBaseboardConvectiveElectric_swigregister(ZoneHVACBaseboardConvectiveElectric)

def ZoneHVACBaseboardConvectiveElectric_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_iddObjectType()
ZoneHVACBaseboardConvectiveElectric_iddObjectType = _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_iddObjectType


def toZoneHVACBaseboardConvectiveElectric(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACBaseboardConvectiveElectric >":
    return _openstudiomodelzonehvac.toZoneHVACBaseboardConvectiveElectric(idfObject)
toZoneHVACBaseboardConvectiveElectric = _openstudiomodelzonehvac.toZoneHVACBaseboardConvectiveElectric

def getZoneHVACBaseboardConvectiveElectric(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACBaseboardConvectiveElectric >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectric(t_model, t_handle)
getZoneHVACBaseboardConvectiveElectric = _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectric

def getZoneHVACBaseboardConvectiveElectrics(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric,std::allocator< openstudio::model::ZoneHVACBaseboardConvectiveElectric > >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectrics(t_model)
getZoneHVACBaseboardConvectiveElectrics = _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectrics

def getZoneHVACBaseboardConvectiveElectricByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACBaseboardConvectiveElectric >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectricByName(t_model, t_name)
getZoneHVACBaseboardConvectiveElectricByName = _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectricByName

def getZoneHVACBaseboardConvectiveElectricsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveElectric,std::allocator< openstudio::model::ZoneHVACBaseboardConvectiveElectric > >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectricsByName(t_model, t_name, t_exactMatch)
getZoneHVACBaseboardConvectiveElectricsByName = _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectricsByName
class ZoneHVACBaseboardConvectiveWater(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACBaseboardConvectiveWater, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACBaseboardConvectiveWater, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', availabilitySchedule: 'Schedule', heatingCoilBaseboard: 'StraightComponent'):
        this = _openstudiomodelzonehvac.new_ZoneHVACBaseboardConvectiveWater(model, availabilitySchedule, heatingCoilBaseboard)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardConvectiveWater
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_iddObjectType)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_availabilitySchedule(self)

    def heatingCoil(self) -> "openstudio::model::StraightComponent":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_heatingCoil(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_setAvailabilitySchedule(self, schedule)

    def setHeatingCoil(self, heatingCoilBaseboard: 'StraightComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_setHeatingCoil(self, heatingCoilBaseboard)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_thermalZone(self)

    def addToThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_removeFromThermalZone(self)
ZoneHVACBaseboardConvectiveWater_swigregister = _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_swigregister
ZoneHVACBaseboardConvectiveWater_swigregister(ZoneHVACBaseboardConvectiveWater)

def ZoneHVACBaseboardConvectiveWater_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_iddObjectType()
ZoneHVACBaseboardConvectiveWater_iddObjectType = _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_iddObjectType


def toZoneHVACBaseboardConvectiveWater(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACBaseboardConvectiveWater >":
    return _openstudiomodelzonehvac.toZoneHVACBaseboardConvectiveWater(idfObject)
toZoneHVACBaseboardConvectiveWater = _openstudiomodelzonehvac.toZoneHVACBaseboardConvectiveWater

def getZoneHVACBaseboardConvectiveWater(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACBaseboardConvectiveWater >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWater(t_model, t_handle)
getZoneHVACBaseboardConvectiveWater = _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWater

def getZoneHVACBaseboardConvectiveWaters(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater,std::allocator< openstudio::model::ZoneHVACBaseboardConvectiveWater > >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWaters(t_model)
getZoneHVACBaseboardConvectiveWaters = _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWaters

def getZoneHVACBaseboardConvectiveWaterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACBaseboardConvectiveWater >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWaterByName(t_model, t_name)
getZoneHVACBaseboardConvectiveWaterByName = _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWaterByName

def getZoneHVACBaseboardConvectiveWatersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACBaseboardConvectiveWater,std::allocator< openstudio::model::ZoneHVACBaseboardConvectiveWater > >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWatersByName(t_model, t_name, t_exactMatch)
getZoneHVACBaseboardConvectiveWatersByName = _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWatersByName
class ZoneHVACBaseboardRadiantConvectiveElectric(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACBaseboardRadiantConvectiveElectric, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACBaseboardRadiantConvectiveElectric, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelzonehvac.new_ZoneHVACBaseboardRadiantConvectiveElectric(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardRadiantConvectiveElectric
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_iddObjectType)
    __swig_getmethods__["heatingDesignCapacityMethodValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityMethodValues
    if _newclass:
        heatingDesignCapacityMethodValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityMethodValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_availabilitySchedule(self)

    def heatingDesignCapacityMethod(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityMethod(self)

    def heatingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacity(self)

    def isHeatingDesignCapacityAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_isHeatingDesignCapacityAutosized(self)

    def heatingDesignCapacityPerFloorArea(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityPerFloorArea(self)

    def fractionofAutosizedHeatingDesignCapacity(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_fractionofAutosizedHeatingDesignCapacity(self)

    def efficiency(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_efficiency(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_fractionRadiant(self)

    def fractionofRadiantEnergyIncidentonPeople(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_fractionofRadiantEnergyIncidentonPeople(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setAvailabilitySchedule(self, schedule)

    def setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod)

    def setHeatingDesignCapacity(self, heatingDesignCapacity: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setHeatingDesignCapacity(self, heatingDesignCapacity)

    def autosizeHeatingDesignCapacity(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_autosizeHeatingDesignCapacity(self)

    def setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea)

    def setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity)

    def setEfficiency(self, efficiency: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setEfficiency(self, efficiency)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setFractionRadiant(self, fractionRadiant)

    def setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_thermalZone(self)

    def addToThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_removeFromThermalZone(self)

    def autosizedHeatingDesignCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_autosizedHeatingDesignCapacity(self)
ZoneHVACBaseboardRadiantConvectiveElectric_swigregister = _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_swigregister
ZoneHVACBaseboardRadiantConvectiveElectric_swigregister(ZoneHVACBaseboardRadiantConvectiveElectric)

def ZoneHVACBaseboardRadiantConvectiveElectric_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_iddObjectType()
ZoneHVACBaseboardRadiantConvectiveElectric_iddObjectType = _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_iddObjectType

def ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityMethodValues()
ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityMethodValues = _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityMethodValues


def toZoneHVACBaseboardRadiantConvectiveElectric(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >":
    return _openstudiomodelzonehvac.toZoneHVACBaseboardRadiantConvectiveElectric(idfObject)
toZoneHVACBaseboardRadiantConvectiveElectric = _openstudiomodelzonehvac.toZoneHVACBaseboardRadiantConvectiveElectric

def getZoneHVACBaseboardRadiantConvectiveElectric(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectric(t_model, t_handle)
getZoneHVACBaseboardRadiantConvectiveElectric = _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectric

def getZoneHVACBaseboardRadiantConvectiveElectrics(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric,std::allocator< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric > >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectrics(t_model)
getZoneHVACBaseboardRadiantConvectiveElectrics = _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectrics

def getZoneHVACBaseboardRadiantConvectiveElectricByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectricByName(t_model, t_name)
getZoneHVACBaseboardRadiantConvectiveElectricByName = _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectricByName

def getZoneHVACBaseboardRadiantConvectiveElectricsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric,std::allocator< openstudio::model::ZoneHVACBaseboardRadiantConvectiveElectric > >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectricsByName(t_model, t_name, t_exactMatch)
getZoneHVACBaseboardRadiantConvectiveElectricsByName = _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectricsByName
class ZoneHVACBaseboardRadiantConvectiveWater(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACBaseboardRadiantConvectiveWater, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACBaseboardRadiantConvectiveWater, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelzonehvac.new_ZoneHVACBaseboardRadiantConvectiveWater(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardRadiantConvectiveWater
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_iddObjectType)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_availabilitySchedule(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_fractionRadiant(self)

    def fractionofRadiantEnergyIncidentonPeople(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_fractionofRadiantEnergyIncidentonPeople(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_heatingCoil(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_setAvailabilitySchedule(self, schedule)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_setFractionRadiant(self, fractionRadiant)

    def setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople)

    def setHeatingCoil(self, heatingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_setHeatingCoil(self, heatingCoil)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_thermalZone(self)

    def addToThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_removeFromThermalZone(self)
ZoneHVACBaseboardRadiantConvectiveWater_swigregister = _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_swigregister
ZoneHVACBaseboardRadiantConvectiveWater_swigregister(ZoneHVACBaseboardRadiantConvectiveWater)

def ZoneHVACBaseboardRadiantConvectiveWater_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_iddObjectType()
ZoneHVACBaseboardRadiantConvectiveWater_iddObjectType = _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_iddObjectType


def toZoneHVACBaseboardRadiantConvectiveWater(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >":
    return _openstudiomodelzonehvac.toZoneHVACBaseboardRadiantConvectiveWater(idfObject)
toZoneHVACBaseboardRadiantConvectiveWater = _openstudiomodelzonehvac.toZoneHVACBaseboardRadiantConvectiveWater

def getZoneHVACBaseboardRadiantConvectiveWater(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWater(t_model, t_handle)
getZoneHVACBaseboardRadiantConvectiveWater = _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWater

def getZoneHVACBaseboardRadiantConvectiveWaters(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater,std::allocator< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater > >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWaters(t_model)
getZoneHVACBaseboardRadiantConvectiveWaters = _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWaters

def getZoneHVACBaseboardRadiantConvectiveWaterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWaterByName(t_model, t_name)
getZoneHVACBaseboardRadiantConvectiveWaterByName = _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWaterByName

def getZoneHVACBaseboardRadiantConvectiveWatersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater,std::allocator< openstudio::model::ZoneHVACBaseboardRadiantConvectiveWater > >":
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWatersByName(t_model, t_name, t_exactMatch)
getZoneHVACBaseboardRadiantConvectiveWatersByName = _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWatersByName
class ZoneHVACDehumidifierDX(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACDehumidifierDX, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACDehumidifierDX, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACDehumidifierDX(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACDehumidifierDX
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACDehumidifierDX_iddObjectType)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_availabilitySchedule(self)

    def ratedWaterRemoval(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_ratedWaterRemoval(self)

    def ratedEnergyFactor(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_ratedEnergyFactor(self)

    def ratedAirFlowRate(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_ratedAirFlowRate(self)

    def waterRemovalCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_waterRemovalCurve(self)

    def energyFactorCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_energyFactorCurve(self)

    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_partLoadFractionCorrelationCurve(self)

    def minimumDryBulbTemperatureforDehumidifierOperation(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_minimumDryBulbTemperatureforDehumidifierOperation(self)

    def maximumDryBulbTemperatureforDehumidifierOperation(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_maximumDryBulbTemperatureforDehumidifierOperation(self)

    def offCycleParasiticElectricLoad(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_offCycleParasiticElectricLoad(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setAvailabilitySchedule(self, schedule)

    def setRatedWaterRemoval(self, ratedWaterRemoval: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setRatedWaterRemoval(self, ratedWaterRemoval)

    def setRatedEnergyFactor(self, ratedEnergyFactor: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setRatedEnergyFactor(self, ratedEnergyFactor)

    def setRatedAirFlowRate(self, ratedAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setRatedAirFlowRate(self, ratedAirFlowRate)

    def setWaterRemovalCurve(self, curve: 'Curve') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setWaterRemovalCurve(self, curve)

    def setEnergyFactorCurve(self, curve: 'Curve') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setEnergyFactorCurve(self, curve)

    def setPartLoadFractionCorrelationCurve(self, curve: 'Curve') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setPartLoadFractionCorrelationCurve(self, curve)

    def setMinimumDryBulbTemperatureforDehumidifierOperation(self, minimumDryBulbTemperatureforDehumidifierOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setMinimumDryBulbTemperatureforDehumidifierOperation(self, minimumDryBulbTemperatureforDehumidifierOperation)

    def setMaximumDryBulbTemperatureforDehumidifierOperation(self, maximumDryBulbTemperatureforDehumidifierOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setMaximumDryBulbTemperatureforDehumidifierOperation(self, maximumDryBulbTemperatureforDehumidifierOperation)

    def setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad)
ZoneHVACDehumidifierDX_swigregister = _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_swigregister
ZoneHVACDehumidifierDX_swigregister(ZoneHVACDehumidifierDX)

def ZoneHVACDehumidifierDX_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_iddObjectType()
ZoneHVACDehumidifierDX_iddObjectType = _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_iddObjectType


def toZoneHVACDehumidifierDX(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACDehumidifierDX >":
    return _openstudiomodelzonehvac.toZoneHVACDehumidifierDX(idfObject)
toZoneHVACDehumidifierDX = _openstudiomodelzonehvac.toZoneHVACDehumidifierDX

def getZoneHVACDehumidifierDX(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACDehumidifierDX >":
    return _openstudiomodelzonehvac.getZoneHVACDehumidifierDX(t_model, t_handle)
getZoneHVACDehumidifierDX = _openstudiomodelzonehvac.getZoneHVACDehumidifierDX

def getZoneHVACDehumidifierDXs(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX,std::allocator< openstudio::model::ZoneHVACDehumidifierDX > >":
    return _openstudiomodelzonehvac.getZoneHVACDehumidifierDXs(t_model)
getZoneHVACDehumidifierDXs = _openstudiomodelzonehvac.getZoneHVACDehumidifierDXs

def getZoneHVACDehumidifierDXByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACDehumidifierDX >":
    return _openstudiomodelzonehvac.getZoneHVACDehumidifierDXByName(t_model, t_name)
getZoneHVACDehumidifierDXByName = _openstudiomodelzonehvac.getZoneHVACDehumidifierDXByName

def getZoneHVACDehumidifierDXsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACDehumidifierDX,std::allocator< openstudio::model::ZoneHVACDehumidifierDX > >":
    return _openstudiomodelzonehvac.getZoneHVACDehumidifierDXsByName(t_model, t_name, t_exactMatch)
getZoneHVACDehumidifierDXsByName = _openstudiomodelzonehvac.getZoneHVACDehumidifierDXsByName
class ZoneHVACEnergyRecoveryVentilator(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACEnergyRecoveryVentilator, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACEnergyRecoveryVentilator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACEnergyRecoveryVentilator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACEnergyRecoveryVentilator
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_iddObjectType)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_availabilitySchedule(self)

    def heatExchanger(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_heatExchanger(self)

    def supplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_supplyAirFlowRate(self)

    def isSupplyAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_isSupplyAirFlowRateAutosized(self)

    def exhaustAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_exhaustAirFlowRate(self)

    def isExhaustAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_isExhaustAirFlowRateAutosized(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_supplyAirFan(self)

    def exhaustAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_exhaustAirFan(self)

    def controller(self) -> "boost::optional< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_controller(self)

    def ventilationRateperUnitFloorArea(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_ventilationRateperUnitFloorArea(self)

    def ventilationRateperOccupant(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_ventilationRateperOccupant(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setAvailabilitySchedule(self, schedule)

    def setHeatExchanger(self, hxAirToAirSensibleAndLatent: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setHeatExchanger(self, hxAirToAirSensibleAndLatent)

    def setSupplyAirFlowRate(self, supplyAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setSupplyAirFlowRate(self, supplyAirFlowRate)

    def autosizeSupplyAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_autosizeSupplyAirFlowRate(self)

    def setExhaustAirFlowRate(self, exhaustAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setExhaustAirFlowRate(self, exhaustAirFlowRate)

    def autosizeExhaustAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_autosizeExhaustAirFlowRate(self)

    def setSupplyAirFan(self, supplyAirFan: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setSupplyAirFan(self, supplyAirFan)

    def setExhaustAirFan(self, exhaustAirFan: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setExhaustAirFan(self, exhaustAirFan)

    def setController(self, zoneHVACEnergyRecoveryVentilatorController: 'ZoneHVACEnergyRecoveryVentilatorController') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setController(self, zoneHVACEnergyRecoveryVentilatorController)

    def resetController(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_resetController(self)

    def setVentilationRateperUnitFloorArea(self, ventilationRateperUnitFloorArea: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setVentilationRateperUnitFloorArea(self, ventilationRateperUnitFloorArea)

    def setVentilationRateperOccupant(self, ventilationRateperOccupant: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setVentilationRateperOccupant(self, ventilationRateperOccupant)

    def autosizedSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_autosizedSupplyAirFlowRate(self)

    def autosizedExhaustAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_autosizedExhaustAirFlowRate(self)
ZoneHVACEnergyRecoveryVentilator_swigregister = _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_swigregister
ZoneHVACEnergyRecoveryVentilator_swigregister(ZoneHVACEnergyRecoveryVentilator)

def ZoneHVACEnergyRecoveryVentilator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_iddObjectType()
ZoneHVACEnergyRecoveryVentilator_iddObjectType = _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_iddObjectType


def toZoneHVACEnergyRecoveryVentilator(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACEnergyRecoveryVentilator >":
    return _openstudiomodelzonehvac.toZoneHVACEnergyRecoveryVentilator(idfObject)
toZoneHVACEnergyRecoveryVentilator = _openstudiomodelzonehvac.toZoneHVACEnergyRecoveryVentilator

def getZoneHVACEnergyRecoveryVentilator(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACEnergyRecoveryVentilator >":
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilator(t_model, t_handle)
getZoneHVACEnergyRecoveryVentilator = _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilator

def getZoneHVACEnergyRecoveryVentilators(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator,std::allocator< openstudio::model::ZoneHVACEnergyRecoveryVentilator > >":
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilators(t_model)
getZoneHVACEnergyRecoveryVentilators = _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilators

def getZoneHVACEnergyRecoveryVentilatorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACEnergyRecoveryVentilator >":
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorByName(t_model, t_name)
getZoneHVACEnergyRecoveryVentilatorByName = _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorByName

def getZoneHVACEnergyRecoveryVentilatorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilator,std::allocator< openstudio::model::ZoneHVACEnergyRecoveryVentilator > >":
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorsByName(t_model, t_name, t_exactMatch)
getZoneHVACEnergyRecoveryVentilatorsByName = _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorsByName
class ZoneHVACEnergyRecoveryVentilatorController(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACEnergyRecoveryVentilatorController, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACEnergyRecoveryVentilatorController, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelzonehvac.new_ZoneHVACEnergyRecoveryVentilatorController(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACEnergyRecoveryVentilatorController
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_iddObjectType)
    __swig_getmethods__["exhaustAirTemperatureLimitValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirTemperatureLimitValues
    if _newclass:
        exhaustAirTemperatureLimitValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirTemperatureLimitValues)
    __swig_getmethods__["exhaustAirEnthalpyLimitValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirEnthalpyLimitValues
    if _newclass:
        exhaustAirEnthalpyLimitValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirEnthalpyLimitValues)

    def temperatureHighLimit(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_temperatureHighLimit(self)

    def temperatureLowLimit(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_temperatureLowLimit(self)

    def enthalpyHighLimit(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_enthalpyHighLimit(self)

    def dewpointTemperatureLimit(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_dewpointTemperatureLimit(self)

    def electronicEnthalpyLimitCurve(self) -> "boost::optional< openstudio::model::Curve >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_electronicEnthalpyLimitCurve(self)

    def exhaustAirTemperatureLimit(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirTemperatureLimit(self)

    def exhaustAirEnthalpyLimit(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirEnthalpyLimit(self)

    def timeofDayEconomizerFlowControlSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_timeofDayEconomizerFlowControlSchedule(self)

    def highHumidityControlFlag(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_highHumidityControlFlag(self)

    def highHumidityOutdoorAirFlowRatio(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_highHumidityOutdoorAirFlowRatio(self)

    def controlHighIndoorHumidityBasedonOutdoorHumidityRatio(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_controlHighIndoorHumidityBasedonOutdoorHumidityRatio(self)

    def setTemperatureHighLimit(self, temperatureHighLimit: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setTemperatureHighLimit(self, temperatureHighLimit)

    def resetTemperatureHighLimit(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetTemperatureHighLimit(self)

    def setTemperatureLowLimit(self, temperatureLowLimit: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setTemperatureLowLimit(self, temperatureLowLimit)

    def resetTemperatureLowLimit(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetTemperatureLowLimit(self)

    def setEnthalpyHighLimit(self, enthalpyHighLimit: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setEnthalpyHighLimit(self, enthalpyHighLimit)

    def resetEnthalpyHighLimit(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetEnthalpyHighLimit(self)

    def setDewpointTemperatureLimit(self, dewpointTemperatureLimit: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setDewpointTemperatureLimit(self, dewpointTemperatureLimit)

    def resetDewpointTemperatureLimit(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetDewpointTemperatureLimit(self)

    def setElectronicEnthalpyLimitCurve(self, curve: 'Curve') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setElectronicEnthalpyLimitCurve(self, curve)

    def resetElectronicEnthalpyLimitCurve(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetElectronicEnthalpyLimitCurve(self)

    def setExhaustAirTemperatureLimit(self, exhaustAirTemperatureLimit: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setExhaustAirTemperatureLimit(self, exhaustAirTemperatureLimit)

    def setExhaustAirEnthalpyLimit(self, exhaustAirEnthalpyLimit: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setExhaustAirEnthalpyLimit(self, exhaustAirEnthalpyLimit)

    def setTimeofDayEconomizerFlowControlSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setTimeofDayEconomizerFlowControlSchedule(self, schedule)

    def resetTimeofDayEconomizerFlowControlSchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetTimeofDayEconomizerFlowControlSchedule(self)

    def setHighHumidityControlFlag(self, highHumidityControlFlag: 'bool') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setHighHumidityControlFlag(self, highHumidityControlFlag)

    def setHighHumidityOutdoorAirFlowRatio(self, highHumidityOutdoorAirFlowRatio: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setHighHumidityOutdoorAirFlowRatio(self, highHumidityOutdoorAirFlowRatio)

    def setControlHighIndoorHumidityBasedonOutdoorHumidityRatio(self, controlHighIndoorHumidityBasedonOutdoorHumidityRatio: 'bool') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setControlHighIndoorHumidityBasedonOutdoorHumidityRatio(self, controlHighIndoorHumidityBasedonOutdoorHumidityRatio)
ZoneHVACEnergyRecoveryVentilatorController_swigregister = _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_swigregister
ZoneHVACEnergyRecoveryVentilatorController_swigregister(ZoneHVACEnergyRecoveryVentilatorController)

def ZoneHVACEnergyRecoveryVentilatorController_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_iddObjectType()
ZoneHVACEnergyRecoveryVentilatorController_iddObjectType = _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_iddObjectType

def ZoneHVACEnergyRecoveryVentilatorController_exhaustAirTemperatureLimitValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirTemperatureLimitValues()
ZoneHVACEnergyRecoveryVentilatorController_exhaustAirTemperatureLimitValues = _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirTemperatureLimitValues

def ZoneHVACEnergyRecoveryVentilatorController_exhaustAirEnthalpyLimitValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirEnthalpyLimitValues()
ZoneHVACEnergyRecoveryVentilatorController_exhaustAirEnthalpyLimitValues = _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirEnthalpyLimitValues


def toZoneHVACEnergyRecoveryVentilatorController(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >":
    return _openstudiomodelzonehvac.toZoneHVACEnergyRecoveryVentilatorController(idfObject)
toZoneHVACEnergyRecoveryVentilatorController = _openstudiomodelzonehvac.toZoneHVACEnergyRecoveryVentilatorController

def getZoneHVACEnergyRecoveryVentilatorController(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >":
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorController(t_model, t_handle)
getZoneHVACEnergyRecoveryVentilatorController = _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorController

def getZoneHVACEnergyRecoveryVentilatorControllers(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController,std::allocator< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController > >":
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorControllers(t_model)
getZoneHVACEnergyRecoveryVentilatorControllers = _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorControllers

def getZoneHVACEnergyRecoveryVentilatorControllerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController >":
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorControllerByName(t_model, t_name)
getZoneHVACEnergyRecoveryVentilatorControllerByName = _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorControllerByName

def getZoneHVACEnergyRecoveryVentilatorControllersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController,std::allocator< openstudio::model::ZoneHVACEnergyRecoveryVentilatorController > >":
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorControllersByName(t_model, t_name, t_exactMatch)
getZoneHVACEnergyRecoveryVentilatorControllersByName = _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorControllersByName
class ZoneHVACFourPipeFanCoil(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACFourPipeFanCoil, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACFourPipeFanCoil, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', availabilitySchedule: 'Schedule', supplyAirFan: 'HVACComponent', coolingCoil: 'HVACComponent', heatingCoil: 'HVACComponent'):
        this = _openstudiomodelzonehvac.new_ZoneHVACFourPipeFanCoil(model, availabilitySchedule, supplyAirFan, coolingCoil, heatingCoil)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACFourPipeFanCoil
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_iddObjectType)
    __swig_getmethods__["capacityControlMethodValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_capacityControlMethodValues
    if _newclass:
        capacityControlMethodValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_capacityControlMethodValues)
    __swig_getmethods__["outdoorAirMixerObjectTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirMixerObjectTypeValues
    if _newclass:
        outdoorAirMixerObjectTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirMixerObjectTypeValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_availabilitySchedule(self)

    def capacityControlMethod(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_capacityControlMethod(self)

    def maximumSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumSupplyAirFlowRate(self)

    def getMaximumSupplyAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getMaximumSupplyAirFlowRate(self, returnIP)

    def isMaximumSupplyAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumSupplyAirFlowRateAutosized(self)

    def lowSpeedSupplyAirFlowRatio(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_lowSpeedSupplyAirFlowRatio(self)

    def getLowSpeedSupplyAirFlowRatio(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getLowSpeedSupplyAirFlowRatio(self, returnIP)

    def isLowSpeedSupplyAirFlowRatioDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isLowSpeedSupplyAirFlowRatioDefaulted(self)

    def mediumSpeedSupplyAirFlowRatio(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_mediumSpeedSupplyAirFlowRatio(self)

    def getMediumSpeedSupplyAirFlowRatio(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getMediumSpeedSupplyAirFlowRatio(self, returnIP)

    def isMediumSpeedSupplyAirFlowRatioDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMediumSpeedSupplyAirFlowRatioDefaulted(self)

    def maximumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumOutdoorAirFlowRate(self)

    def getMaximumOutdoorAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getMaximumOutdoorAirFlowRate(self, returnIP)

    def isMaximumOutdoorAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumOutdoorAirFlowRateAutosized(self)

    def outdoorAirSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirSchedule(self)

    def outdoorAirMixerObjectType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirMixerObjectType(self)

    def outdoorAirMixerName(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirMixerName(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_supplyAirFan(self)

    def coolingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_coolingCoil(self)

    def maximumColdWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumColdWaterFlowRate(self)

    def getMaximumColdWaterFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getMaximumColdWaterFlowRate(self, returnIP)

    def isMaximumColdWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumColdWaterFlowRateAutosized(self)

    def minimumColdWaterFlowRate(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_minimumColdWaterFlowRate(self)

    def getMinimumColdWaterFlowRate(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getMinimumColdWaterFlowRate(self, returnIP)

    def isMinimumColdWaterFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMinimumColdWaterFlowRateDefaulted(self)

    def coolingConvergenceTolerance(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_coolingConvergenceTolerance(self)

    def getCoolingConvergenceTolerance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getCoolingConvergenceTolerance(self, returnIP)

    def isCoolingConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isCoolingConvergenceToleranceDefaulted(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_heatingCoil(self)

    def maximumHotWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumHotWaterFlowRate(self)

    def getMaximumHotWaterFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getMaximumHotWaterFlowRate(self, returnIP)

    def isMaximumHotWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumHotWaterFlowRateAutosized(self)

    def minimumHotWaterFlowRate(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_minimumHotWaterFlowRate(self)

    def getMinimumHotWaterFlowRate(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getMinimumHotWaterFlowRate(self, returnIP)

    def isMinimumHotWaterFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMinimumHotWaterFlowRateDefaulted(self)

    def heatingConvergenceTolerance(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_heatingConvergenceTolerance(self)

    def getHeatingConvergenceTolerance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_getHeatingConvergenceTolerance(self, returnIP)

    def isHeatingConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isHeatingConvergenceToleranceDefaulted(self)

    def supplyAirFanOperatingModeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_supplyAirFanOperatingModeSchedule(self)

    def isMinimumSupplyAirTemperatureInCoolingModeAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMinimumSupplyAirTemperatureInCoolingModeAutosized(self)

    def minimumSupplyAirTemperatureInCoolingMode(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_minimumSupplyAirTemperatureInCoolingMode(self)

    def isMaximumSupplyAirTemperatureInHeatingModeAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumSupplyAirTemperatureInHeatingModeAutosized(self)

    def maximumSupplyAirTemperatureInHeatingMode(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumSupplyAirTemperatureInHeatingMode(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setAvailabilitySchedule(self, schedule)

    def setCapacityControlMethod(self, capacityControlMethod: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setCapacityControlMethod(self, capacityControlMethod)

    def setMaximumSupplyAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumSupplyAirFlowRate(self, *args)

    def autosizeMaximumSupplyAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumSupplyAirFlowRate(self)

    def setLowSpeedSupplyAirFlowRatio(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setLowSpeedSupplyAirFlowRatio(self, *args)

    def resetLowSpeedSupplyAirFlowRatio(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetLowSpeedSupplyAirFlowRatio(self)

    def setMediumSpeedSupplyAirFlowRatio(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMediumSpeedSupplyAirFlowRatio(self, *args)

    def resetMediumSpeedSupplyAirFlowRatio(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetMediumSpeedSupplyAirFlowRatio(self)

    def setMaximumOutdoorAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumOutdoorAirFlowRate(self, *args)

    def autosizeMaximumOutdoorAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumOutdoorAirFlowRate(self)

    def setOutdoorAirSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setOutdoorAirSchedule(self, schedule)

    def resetOutdoorAirSchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetOutdoorAirSchedule(self)

    def setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType)

    def setOutdoorAirMixerName(self, outdoorAirMixerName: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setOutdoorAirMixerName(self, outdoorAirMixerName)

    def setSupplyAirFan(self, fan: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setSupplyAirFan(self, fan)

    def setCoolingCoil(self, coolingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setCoolingCoil(self, coolingCoil)

    def setMaximumColdWaterFlowRate(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumColdWaterFlowRate(self, *args)

    def autosizeMaximumColdWaterFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumColdWaterFlowRate(self)

    def setMinimumColdWaterFlowRate(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMinimumColdWaterFlowRate(self, *args)

    def resetMinimumColdWaterFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetMinimumColdWaterFlowRate(self)

    def setCoolingConvergenceTolerance(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setCoolingConvergenceTolerance(self, *args)

    def resetCoolingConvergenceTolerance(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetCoolingConvergenceTolerance(self)

    def setHeatingCoil(self, heatingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setHeatingCoil(self, heatingCoil)

    def setMaximumHotWaterFlowRate(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumHotWaterFlowRate(self, *args)

    def autosizeMaximumHotWaterFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumHotWaterFlowRate(self)

    def setMinimumHotWaterFlowRate(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMinimumHotWaterFlowRate(self, *args)

    def resetMinimumHotWaterFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetMinimumHotWaterFlowRate(self)

    def setHeatingConvergenceTolerance(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setHeatingConvergenceTolerance(self, *args)

    def resetHeatingConvergenceTolerance(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetHeatingConvergenceTolerance(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetSupplyAirFanOperatingModeSchedule(self)

    def autosizeMinimumSupplyAirTemperatureInCoolingMode(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMinimumSupplyAirTemperatureInCoolingMode(self)

    def setMinimumSupplyAirTemperatureInCoolingMode(self, minimumSupplyAirTemperatureInCoolingMode: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMinimumSupplyAirTemperatureInCoolingMode(self, minimumSupplyAirTemperatureInCoolingMode)

    def autosizeMaximumSupplyAirTemperatureInHeatingMode(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumSupplyAirTemperatureInHeatingMode(self)

    def setMaximumSupplyAirTemperatureInHeatingMode(self, maximumSupplyAirTemperatureInHeatingMode: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumSupplyAirTemperatureInHeatingMode(self, maximumSupplyAirTemperatureInHeatingMode)

    def autosizedMaximumSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumSupplyAirFlowRate(self)

    def autosizedMaximumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumOutdoorAirFlowRate(self)

    def autosizedMaximumColdWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumColdWaterFlowRate(self)

    def autosizedMaximumHotWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumHotWaterFlowRate(self)

    def autosizedMinimumSupplyAirTemperatureinCoolingMode(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMinimumSupplyAirTemperatureinCoolingMode(self)

    def autosizedMaximumSupplyAirTemperatureinHeatingMode(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumSupplyAirTemperatureinHeatingMode(self)
ZoneHVACFourPipeFanCoil_swigregister = _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_swigregister
ZoneHVACFourPipeFanCoil_swigregister(ZoneHVACFourPipeFanCoil)

def ZoneHVACFourPipeFanCoil_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_iddObjectType()
ZoneHVACFourPipeFanCoil_iddObjectType = _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_iddObjectType

def ZoneHVACFourPipeFanCoil_capacityControlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_capacityControlMethodValues()
ZoneHVACFourPipeFanCoil_capacityControlMethodValues = _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_capacityControlMethodValues

def ZoneHVACFourPipeFanCoil_outdoorAirMixerObjectTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirMixerObjectTypeValues()
ZoneHVACFourPipeFanCoil_outdoorAirMixerObjectTypeValues = _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirMixerObjectTypeValues


def toZoneHVACFourPipeFanCoil(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACFourPipeFanCoil >":
    return _openstudiomodelzonehvac.toZoneHVACFourPipeFanCoil(idfObject)
toZoneHVACFourPipeFanCoil = _openstudiomodelzonehvac.toZoneHVACFourPipeFanCoil

def getZoneHVACFourPipeFanCoil(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACFourPipeFanCoil >":
    return _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoil(t_model, t_handle)
getZoneHVACFourPipeFanCoil = _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoil

def getZoneHVACFourPipeFanCoils(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil,std::allocator< openstudio::model::ZoneHVACFourPipeFanCoil > >":
    return _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoils(t_model)
getZoneHVACFourPipeFanCoils = _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoils

def getZoneHVACFourPipeFanCoilByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACFourPipeFanCoil >":
    return _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoilByName(t_model, t_name)
getZoneHVACFourPipeFanCoilByName = _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoilByName

def getZoneHVACFourPipeFanCoilsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil,std::allocator< openstudio::model::ZoneHVACFourPipeFanCoil > >":
    return _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoilsByName(t_model, t_name, t_exactMatch)
getZoneHVACFourPipeFanCoilsByName = _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoilsByName
class ZoneHVACHighTemperatureRadiant(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACHighTemperatureRadiant, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACHighTemperatureRadiant, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelzonehvac.new_ZoneHVACHighTemperatureRadiant(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACHighTemperatureRadiant
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_iddObjectType)
    __swig_getmethods__["fuelTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fuelTypeValues
    if _newclass:
        fuelTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fuelTypeValues)
    __swig_getmethods__["temperatureControlTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_temperatureControlTypeValues
    if _newclass:
        temperatureControlTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_temperatureControlTypeValues)

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_availabilitySchedule(self)

    def maximumPowerInput(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_maximumPowerInput(self)

    def isMaximumPowerInputAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_isMaximumPowerInputAutosized(self)

    def fuelType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fuelType(self)

    def combustionEfficiency(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_combustionEfficiency(self)

    def fractionofInputConvertedtoRadiantEnergy(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fractionofInputConvertedtoRadiantEnergy(self)

    def fractionofInputConvertedtoLatentEnergy(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fractionofInputConvertedtoLatentEnergy(self)

    def fractionofInputthatIsLost(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fractionofInputthatIsLost(self)

    def temperatureControlType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_temperatureControlType(self)

    def heatingThrottlingRange(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_heatingThrottlingRange(self)

    def heatingSetpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_heatingSetpointTemperatureSchedule(self)

    def fractionofRadiantEnergyIncidentonPeople(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fractionofRadiantEnergyIncidentonPeople(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_resetAvailabilitySchedule(self)

    def setMaximumPowerInput(self, maximumPowerInput: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setMaximumPowerInput(self, maximumPowerInput)

    def autosizeMaximumPowerInput(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_autosizeMaximumPowerInput(self)

    def setFuelType(self, fuelType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFuelType(self, fuelType)

    def setCombustionEfficiency(self, combustionEfficiency: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setCombustionEfficiency(self, combustionEfficiency)

    def setFractionofInputConvertedtoRadiantEnergy(self, fractionofInputConvertedtoRadiantEnergy: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFractionofInputConvertedtoRadiantEnergy(self, fractionofInputConvertedtoRadiantEnergy)

    def setFractionofInputConvertedtoLatentEnergy(self, fractionofInputConvertedtoLatentEnergy: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFractionofInputConvertedtoLatentEnergy(self, fractionofInputConvertedtoLatentEnergy)

    def setFractionofInputthatIsLost(self, fractionofInputthatIsLost: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFractionofInputthatIsLost(self, fractionofInputthatIsLost)

    def setTemperatureControlType(self, temperatureControlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setTemperatureControlType(self, temperatureControlType)

    def setHeatingThrottlingRange(self, heatingThrottlingRange: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setHeatingThrottlingRange(self, heatingThrottlingRange)

    def setHeatingSetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setHeatingSetpointTemperatureSchedule(self, schedule)

    def resetHeatingSetpointTemperatureSchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_resetHeatingSetpointTemperatureSchedule(self)

    def setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_thermalZone(self)

    def addToThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_removeFromThermalZone(self)

    def autosizedMaximumPowerInput(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_autosizedMaximumPowerInput(self)
ZoneHVACHighTemperatureRadiant_swigregister = _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_swigregister
ZoneHVACHighTemperatureRadiant_swigregister(ZoneHVACHighTemperatureRadiant)

def ZoneHVACHighTemperatureRadiant_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_iddObjectType()
ZoneHVACHighTemperatureRadiant_iddObjectType = _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_iddObjectType

def ZoneHVACHighTemperatureRadiant_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fuelTypeValues()
ZoneHVACHighTemperatureRadiant_fuelTypeValues = _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fuelTypeValues

def ZoneHVACHighTemperatureRadiant_temperatureControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_temperatureControlTypeValues()
ZoneHVACHighTemperatureRadiant_temperatureControlTypeValues = _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_temperatureControlTypeValues


def toZoneHVACHighTemperatureRadiant(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACHighTemperatureRadiant >":
    return _openstudiomodelzonehvac.toZoneHVACHighTemperatureRadiant(idfObject)
toZoneHVACHighTemperatureRadiant = _openstudiomodelzonehvac.toZoneHVACHighTemperatureRadiant

def getZoneHVACHighTemperatureRadiant(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACHighTemperatureRadiant >":
    return _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiant(t_model, t_handle)
getZoneHVACHighTemperatureRadiant = _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiant

def getZoneHVACHighTemperatureRadiants(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant,std::allocator< openstudio::model::ZoneHVACHighTemperatureRadiant > >":
    return _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiants(t_model)
getZoneHVACHighTemperatureRadiants = _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiants

def getZoneHVACHighTemperatureRadiantByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACHighTemperatureRadiant >":
    return _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiantByName(t_model, t_name)
getZoneHVACHighTemperatureRadiantByName = _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiantByName

def getZoneHVACHighTemperatureRadiantsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACHighTemperatureRadiant,std::allocator< openstudio::model::ZoneHVACHighTemperatureRadiant > >":
    return _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiantsByName(t_model, t_name, t_exactMatch)
getZoneHVACHighTemperatureRadiantsByName = _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiantsByName
class ZoneHVACIdealLoadsAirSystem(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACIdealLoadsAirSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACIdealLoadsAirSystem, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelzonehvac.new_ZoneHVACIdealLoadsAirSystem(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACIdealLoadsAirSystem
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_iddObjectType)
    __swig_getmethods__["heatingLimitValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatingLimitValues
    if _newclass:
        heatingLimitValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatingLimitValues)
    __swig_getmethods__["coolingLimitValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingLimitValues
    if _newclass:
        coolingLimitValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingLimitValues)
    __swig_getmethods__["dehumidificationControlTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_dehumidificationControlTypeValues
    if _newclass:
        dehumidificationControlTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_dehumidificationControlTypeValues)
    __swig_getmethods__["humidificationControlTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_humidificationControlTypeValues
    if _newclass:
        humidificationControlTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_humidificationControlTypeValues)
    __swig_getmethods__["demandControlledVentilationTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_demandControlledVentilationTypeValues
    if _newclass:
        demandControlledVentilationTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_demandControlledVentilationTypeValues)
    __swig_getmethods__["outdoorAirEconomizerTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_outdoorAirEconomizerTypeValues
    if _newclass:
        outdoorAirEconomizerTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_outdoorAirEconomizerTypeValues)
    __swig_getmethods__["heatRecoveryTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatRecoveryTypeValues
    if _newclass:
        heatRecoveryTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatRecoveryTypeValues)

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_availabilitySchedule(self)

    def maximumHeatingSupplyAirTemperature(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumHeatingSupplyAirTemperature(self)

    def getMaximumHeatingSupplyAirTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getMaximumHeatingSupplyAirTemperature(self, returnIP)

    def isMaximumHeatingSupplyAirTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumHeatingSupplyAirTemperatureDefaulted(self)

    def minimumCoolingSupplyAirTemperature(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_minimumCoolingSupplyAirTemperature(self)

    def getMinimumCoolingSupplyAirTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getMinimumCoolingSupplyAirTemperature(self, returnIP)

    def isMinimumCoolingSupplyAirTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMinimumCoolingSupplyAirTemperatureDefaulted(self)

    def maximumHeatingSupplyAirHumidityRatio(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumHeatingSupplyAirHumidityRatio(self)

    def getMaximumHeatingSupplyAirHumidityRatio(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getMaximumHeatingSupplyAirHumidityRatio(self, returnIP)

    def isMaximumHeatingSupplyAirHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumHeatingSupplyAirHumidityRatioDefaulted(self)

    def minimumCoolingSupplyAirHumidityRatio(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_minimumCoolingSupplyAirHumidityRatio(self)

    def getMinimumCoolingSupplyAirHumidityRatio(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getMinimumCoolingSupplyAirHumidityRatio(self, returnIP)

    def isMinimumCoolingSupplyAirHumidityRatioDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMinimumCoolingSupplyAirHumidityRatioDefaulted(self)

    def heatingLimit(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatingLimit(self)

    def isHeatingLimitDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isHeatingLimitDefaulted(self)

    def maximumHeatingAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumHeatingAirFlowRate(self)

    def getMaximumHeatingAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getMaximumHeatingAirFlowRate(self, returnIP)

    def isMaximumHeatingAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumHeatingAirFlowRateAutosized(self)

    def maximumSensibleHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumSensibleHeatingCapacity(self)

    def getMaximumSensibleHeatingCapacity(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getMaximumSensibleHeatingCapacity(self, returnIP)

    def isMaximumSensibleHeatingCapacityAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumSensibleHeatingCapacityAutosized(self)

    def coolingLimit(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingLimit(self)

    def isCoolingLimitDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isCoolingLimitDefaulted(self)

    def maximumCoolingAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumCoolingAirFlowRate(self)

    def getMaximumCoolingAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getMaximumCoolingAirFlowRate(self, returnIP)

    def isMaximumCoolingAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumCoolingAirFlowRateAutosized(self)

    def maximumTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumTotalCoolingCapacity(self)

    def getMaximumTotalCoolingCapacity(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getMaximumTotalCoolingCapacity(self, returnIP)

    def isMaximumTotalCoolingCapacityAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumTotalCoolingCapacityAutosized(self)

    def heatingAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatingAvailabilitySchedule(self)

    def coolingAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingAvailabilitySchedule(self)

    def dehumidificationControlType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_dehumidificationControlType(self)

    def isDehumidificationControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isDehumidificationControlTypeDefaulted(self)

    def coolingSensibleHeatRatio(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingSensibleHeatRatio(self)

    def getCoolingSensibleHeatRatio(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getCoolingSensibleHeatRatio(self, returnIP)

    def isCoolingSensibleHeatRatioDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isCoolingSensibleHeatRatioDefaulted(self)

    def humidificationControlType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_humidificationControlType(self)

    def isHumidificationControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isHumidificationControlTypeDefaulted(self)

    def designSpecificationOutdoorAirObject(self) -> "boost::optional< openstudio::model::DesignSpecificationOutdoorAir >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_designSpecificationOutdoorAirObject(self)

    def demandControlledVentilationType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_demandControlledVentilationType(self)

    def isDemandControlledVentilationTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isDemandControlledVentilationTypeDefaulted(self)

    def outdoorAirEconomizerType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_outdoorAirEconomizerType(self)

    def isOutdoorAirEconomizerTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isOutdoorAirEconomizerTypeDefaulted(self)

    def heatRecoveryType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatRecoveryType(self)

    def isHeatRecoveryTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isHeatRecoveryTypeDefaulted(self)

    def sensibleHeatRecoveryEffectiveness(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_sensibleHeatRecoveryEffectiveness(self)

    def getSensibleHeatRecoveryEffectiveness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getSensibleHeatRecoveryEffectiveness(self, returnIP)

    def isSensibleHeatRecoveryEffectivenessDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isSensibleHeatRecoveryEffectivenessDefaulted(self)

    def latentHeatRecoveryEffectiveness(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_latentHeatRecoveryEffectiveness(self)

    def getLatentHeatRecoveryEffectiveness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_getLatentHeatRecoveryEffectiveness(self, returnIP)

    def isLatentHeatRecoveryEffectivenessDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isLatentHeatRecoveryEffectivenessDefaulted(self)

    def setAvailabilitySchedule(self, availabilitySchedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setAvailabilitySchedule(self, availabilitySchedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetAvailabilitySchedule(self)

    def setMaximumHeatingSupplyAirTemperature(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumHeatingSupplyAirTemperature(self, *args)

    def resetMaximumHeatingSupplyAirTemperature(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumHeatingSupplyAirTemperature(self)

    def setMinimumCoolingSupplyAirTemperature(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMinimumCoolingSupplyAirTemperature(self, *args)

    def resetMinimumCoolingSupplyAirTemperature(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMinimumCoolingSupplyAirTemperature(self)

    def setMaximumHeatingSupplyAirHumidityRatio(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumHeatingSupplyAirHumidityRatio(self, *args)

    def resetMaximumHeatingSupplyAirHumidityRatio(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumHeatingSupplyAirHumidityRatio(self)

    def setMinimumCoolingSupplyAirHumidityRatio(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMinimumCoolingSupplyAirHumidityRatio(self, *args)

    def resetMinimumCoolingSupplyAirHumidityRatio(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMinimumCoolingSupplyAirHumidityRatio(self)

    def setHeatingLimit(self, heatingLimit: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setHeatingLimit(self, heatingLimit)

    def resetHeatingLimit(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetHeatingLimit(self)

    def setMaximumHeatingAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumHeatingAirFlowRate(self, *args)

    def resetMaximumHeatingAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumHeatingAirFlowRate(self)

    def autosizeMaximumHeatingAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizeMaximumHeatingAirFlowRate(self)

    def setMaximumSensibleHeatingCapacity(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumSensibleHeatingCapacity(self, *args)

    def resetMaximumSensibleHeatingCapacity(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumSensibleHeatingCapacity(self)

    def autosizeMaximumSensibleHeatingCapacity(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizeMaximumSensibleHeatingCapacity(self)

    def setCoolingLimit(self, coolingLimit: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setCoolingLimit(self, coolingLimit)

    def resetCoolingLimit(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetCoolingLimit(self)

    def setMaximumCoolingAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumCoolingAirFlowRate(self, *args)

    def resetMaximumCoolingAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumCoolingAirFlowRate(self)

    def autosizeMaximumCoolingAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizeMaximumCoolingAirFlowRate(self)

    def setMaximumTotalCoolingCapacity(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumTotalCoolingCapacity(self, *args)

    def resetMaximumTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumTotalCoolingCapacity(self)

    def autosizeMaximumTotalCoolingCapacity(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizeMaximumTotalCoolingCapacity(self)

    def setHeatingAvailabilitySchedule(self, heatingAvailabilitySchedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setHeatingAvailabilitySchedule(self, heatingAvailabilitySchedule)

    def resetHeatingAvailabilitySchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetHeatingAvailabilitySchedule(self)

    def setCoolingAvailabilitySchedule(self, coolingAvailabilitySchedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setCoolingAvailabilitySchedule(self, coolingAvailabilitySchedule)

    def resetCoolingAvailabilitySchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetCoolingAvailabilitySchedule(self)

    def setDehumidificationControlType(self, dehumidificationControlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setDehumidificationControlType(self, dehumidificationControlType)

    def resetDehumidificationControlType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetDehumidificationControlType(self)

    def setCoolingSensibleHeatRatio(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setCoolingSensibleHeatRatio(self, *args)

    def resetCoolingSensibleHeatRatio(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetCoolingSensibleHeatRatio(self)

    def setHumidificationControlType(self, humidificationControlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setHumidificationControlType(self, humidificationControlType)

    def resetHumidificationControlType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetHumidificationControlType(self)

    def setDesignSpecificationOutdoorAirObject(self, designSpecificationOutdoorAirObject: 'DesignSpecificationOutdoorAir') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setDesignSpecificationOutdoorAirObject(self, designSpecificationOutdoorAirObject)

    def resetDesignSpecificationOutdoorAirObject(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetDesignSpecificationOutdoorAirObject(self)

    def setDemandControlledVentilationType(self, demandControlledVentilationType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setDemandControlledVentilationType(self, demandControlledVentilationType)

    def resetDemandControlledVentilationType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetDemandControlledVentilationType(self)

    def setOutdoorAirEconomizerType(self, outdoorAirEconomizerType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setOutdoorAirEconomizerType(self, outdoorAirEconomizerType)

    def resetOutdoorAirEconomizerType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetOutdoorAirEconomizerType(self)

    def setHeatRecoveryType(self, heatRecoveryType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setHeatRecoveryType(self, heatRecoveryType)

    def resetHeatRecoveryType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetHeatRecoveryType(self)

    def setSensibleHeatRecoveryEffectiveness(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setSensibleHeatRecoveryEffectiveness(self, *args)

    def resetSensibleHeatRecoveryEffectiveness(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetSensibleHeatRecoveryEffectiveness(self)

    def setLatentHeatRecoveryEffectiveness(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setLatentHeatRecoveryEffectiveness(self, *args)

    def resetLatentHeatRecoveryEffectiveness(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetLatentHeatRecoveryEffectiveness(self)

    def autosizedMaximumHeatingAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizedMaximumHeatingAirFlowRate(self)

    def autosizedMaximumSensibleHeatingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizedMaximumSensibleHeatingCapacity(self)

    def autosizedMaximumCoolingAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizedMaximumCoolingAirFlowRate(self)

    def autosizedMaximumTotalCoolingCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizedMaximumTotalCoolingCapacity(self)
ZoneHVACIdealLoadsAirSystem_swigregister = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_swigregister
ZoneHVACIdealLoadsAirSystem_swigregister(ZoneHVACIdealLoadsAirSystem)

def ZoneHVACIdealLoadsAirSystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_iddObjectType()
ZoneHVACIdealLoadsAirSystem_iddObjectType = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_iddObjectType

def ZoneHVACIdealLoadsAirSystem_heatingLimitValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatingLimitValues()
ZoneHVACIdealLoadsAirSystem_heatingLimitValues = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatingLimitValues

def ZoneHVACIdealLoadsAirSystem_coolingLimitValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingLimitValues()
ZoneHVACIdealLoadsAirSystem_coolingLimitValues = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingLimitValues

def ZoneHVACIdealLoadsAirSystem_dehumidificationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_dehumidificationControlTypeValues()
ZoneHVACIdealLoadsAirSystem_dehumidificationControlTypeValues = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_dehumidificationControlTypeValues

def ZoneHVACIdealLoadsAirSystem_humidificationControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_humidificationControlTypeValues()
ZoneHVACIdealLoadsAirSystem_humidificationControlTypeValues = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_humidificationControlTypeValues

def ZoneHVACIdealLoadsAirSystem_demandControlledVentilationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_demandControlledVentilationTypeValues()
ZoneHVACIdealLoadsAirSystem_demandControlledVentilationTypeValues = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_demandControlledVentilationTypeValues

def ZoneHVACIdealLoadsAirSystem_outdoorAirEconomizerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_outdoorAirEconomizerTypeValues()
ZoneHVACIdealLoadsAirSystem_outdoorAirEconomizerTypeValues = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_outdoorAirEconomizerTypeValues

def ZoneHVACIdealLoadsAirSystem_heatRecoveryTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatRecoveryTypeValues()
ZoneHVACIdealLoadsAirSystem_heatRecoveryTypeValues = _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatRecoveryTypeValues


def toZoneHVACIdealLoadsAirSystem(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACIdealLoadsAirSystem >":
    return _openstudiomodelzonehvac.toZoneHVACIdealLoadsAirSystem(idfObject)
toZoneHVACIdealLoadsAirSystem = _openstudiomodelzonehvac.toZoneHVACIdealLoadsAirSystem

def getZoneHVACIdealLoadsAirSystem(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACIdealLoadsAirSystem >":
    return _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystem(t_model, t_handle)
getZoneHVACIdealLoadsAirSystem = _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystem

def getZoneHVACIdealLoadsAirSystems(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem,std::allocator< openstudio::model::ZoneHVACIdealLoadsAirSystem > >":
    return _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystems(t_model)
getZoneHVACIdealLoadsAirSystems = _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystems

def getZoneHVACIdealLoadsAirSystemByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACIdealLoadsAirSystem >":
    return _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystemByName(t_model, t_name)
getZoneHVACIdealLoadsAirSystemByName = _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystemByName

def getZoneHVACIdealLoadsAirSystemsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem,std::allocator< openstudio::model::ZoneHVACIdealLoadsAirSystem > >":
    return _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystemsByName(t_model, t_name, t_exactMatch)
getZoneHVACIdealLoadsAirSystemsByName = _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystemsByName
class ZoneHVACLowTemperatureRadiantElectric(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACLowTemperatureRadiantElectric, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACLowTemperatureRadiantElectric, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', availabilitySchedule: 'Schedule', heatingTemperatureSchedule: 'Schedule'):
        this = _openstudiomodelzonehvac.new_ZoneHVACLowTemperatureRadiantElectric(model, availabilitySchedule, heatingTemperatureSchedule)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTemperatureRadiantElectric
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_iddObjectType)
    __swig_getmethods__["radiantSurfaceTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_radiantSurfaceTypeValues
    if _newclass:
        radiantSurfaceTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_radiantSurfaceTypeValues)
    __swig_getmethods__["temperatureControlTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_temperatureControlTypeValues
    if _newclass:
        temperatureControlTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_temperatureControlTypeValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_availabilitySchedule(self)

    def heatingSetpointTemperatureSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_heatingSetpointTemperatureSchedule(self)

    def radiantSurfaceType(self) -> "boost::optional< std::string >":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_radiantSurfaceType(self)

    def surfaces(self) -> "std::vector< openstudio::model::Surface,std::allocator< openstudio::model::Surface > >":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_surfaces(self)

    def maximumElectricalPowertoPanel(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_maximumElectricalPowertoPanel(self)

    def isMaximumElectricalPowertoPanelDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_isMaximumElectricalPowertoPanelDefaulted(self)

    def isMaximumElectricalPowertoPanelAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_isMaximumElectricalPowertoPanelAutosized(self)

    def temperatureControlType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_temperatureControlType(self)

    def isTemperatureControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_isTemperatureControlTypeDefaulted(self)

    def heatingThrottlingRange(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_heatingThrottlingRange(self)

    def isHeatingThrottlingRangeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_isHeatingThrottlingRangeDefaulted(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setAvailabilitySchedule(self, schedule)

    def setHeatingSetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setHeatingSetpointTemperatureSchedule(self, schedule)

    def setRadiantSurfaceType(self, radiantSurfaceType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setRadiantSurfaceType(self, radiantSurfaceType)

    def resetRadiantSurfaceType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_resetRadiantSurfaceType(self)

    def setMaximumElectricalPowertoPanel(self, maximumElectricalPowertoPanel: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setMaximumElectricalPowertoPanel(self, maximumElectricalPowertoPanel)

    def resetMaximumElectricalPowertoPanel(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_resetMaximumElectricalPowertoPanel(self)

    def autosizeMaximumElectricalPowertoPanel(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_autosizeMaximumElectricalPowertoPanel(self)

    def setTemperatureControlType(self, temperatureControlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setTemperatureControlType(self, temperatureControlType)

    def resetTemperatureControlType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_resetTemperatureControlType(self)

    def setHeatingThrottlingRange(self, heatingThrottlingRange: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setHeatingThrottlingRange(self, heatingThrottlingRange)

    def resetHeatingThrottlingRange(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_resetHeatingThrottlingRange(self)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_thermalZone(self)

    def addToThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_removeFromThermalZone(self)

    def autosizedMaximumElectricalPowertoPanel(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_autosizedMaximumElectricalPowertoPanel(self)
ZoneHVACLowTemperatureRadiantElectric_swigregister = _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_swigregister
ZoneHVACLowTemperatureRadiantElectric_swigregister(ZoneHVACLowTemperatureRadiantElectric)

def ZoneHVACLowTemperatureRadiantElectric_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_iddObjectType()
ZoneHVACLowTemperatureRadiantElectric_iddObjectType = _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_iddObjectType

def ZoneHVACLowTemperatureRadiantElectric_radiantSurfaceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_radiantSurfaceTypeValues()
ZoneHVACLowTemperatureRadiantElectric_radiantSurfaceTypeValues = _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_radiantSurfaceTypeValues

def ZoneHVACLowTemperatureRadiantElectric_temperatureControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_temperatureControlTypeValues()
ZoneHVACLowTemperatureRadiantElectric_temperatureControlTypeValues = _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_temperatureControlTypeValues


def toZoneHVACLowTemperatureRadiantElectric(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >":
    return _openstudiomodelzonehvac.toZoneHVACLowTemperatureRadiantElectric(idfObject)
toZoneHVACLowTemperatureRadiantElectric = _openstudiomodelzonehvac.toZoneHVACLowTemperatureRadiantElectric

def getZoneHVACLowTemperatureRadiantElectric(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >":
    return _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectric(t_model, t_handle)
getZoneHVACLowTemperatureRadiantElectric = _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectric

def getZoneHVACLowTemperatureRadiantElectrics(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric,std::allocator< openstudio::model::ZoneHVACLowTemperatureRadiantElectric > >":
    return _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectrics(t_model)
getZoneHVACLowTemperatureRadiantElectrics = _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectrics

def getZoneHVACLowTemperatureRadiantElectricByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACLowTemperatureRadiantElectric >":
    return _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectricByName(t_model, t_name)
getZoneHVACLowTemperatureRadiantElectricByName = _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectricByName

def getZoneHVACLowTemperatureRadiantElectricsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACLowTemperatureRadiantElectric,std::allocator< openstudio::model::ZoneHVACLowTemperatureRadiantElectric > >":
    return _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectricsByName(t_model, t_name, t_exactMatch)
getZoneHVACLowTemperatureRadiantElectricsByName = _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectricsByName
class ZoneHVACLowTempRadiantConstFlow(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACLowTempRadiantConstFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACLowTempRadiantConstFlow, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', availabilitySchedule: 'Schedule', heatingCoil: 'HVACComponent', coolingCoil: 'HVACComponent', hydronicTubingLength: 'double'):
        this = _openstudiomodelzonehvac.new_ZoneHVACLowTempRadiantConstFlow(model, availabilitySchedule, heatingCoil, coolingCoil, hydronicTubingLength)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTempRadiantConstFlow
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_iddObjectType)
    __swig_getmethods__["radiantSurfaceTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_radiantSurfaceTypeValues
    if _newclass:
        radiantSurfaceTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_radiantSurfaceTypeValues)
    __swig_getmethods__["temperatureControlTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_temperatureControlTypeValues
    if _newclass:
        temperatureControlTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_temperatureControlTypeValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_availabilitySchedule(self)

    def radiantSurfaceType(self) -> "boost::optional< std::string >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_radiantSurfaceType(self)

    def surfaces(self) -> "std::vector< openstudio::model::Surface,std::allocator< openstudio::model::Surface > >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_surfaces(self)

    def hydronicTubingInsideDiameter(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_hydronicTubingInsideDiameter(self)

    def isHydronicTubingInsideDiameterDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isHydronicTubingInsideDiameterDefaulted(self)

    def hydronicTubingLength(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_hydronicTubingLength(self)

    def temperatureControlType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_temperatureControlType(self)

    def isTemperatureControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isTemperatureControlTypeDefaulted(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_heatingCoil(self)

    def coolingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_coolingCoil(self)

    def ratedFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_ratedFlowRate(self)

    def pumpFlowRateSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_pumpFlowRateSchedule(self)

    def ratedPumpHead(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_ratedPumpHead(self)

    def isRatedPumpHeadDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isRatedPumpHeadDefaulted(self)

    def ratedPowerConsumption(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_ratedPowerConsumption(self)

    def motorEfficiency(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_motorEfficiency(self)

    def isMotorEfficiencyDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isMotorEfficiencyDefaulted(self)

    def fractionofMotorInefficienciestoFluidStream(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_fractionofMotorInefficienciestoFluidStream(self)

    def isFractionofMotorInefficienciestoFluidStreamDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isFractionofMotorInefficienciestoFluidStreamDefaulted(self)

    def numberofCircuits(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_numberofCircuits(self)

    def circuitLength(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_circuitLength(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setAvailabilitySchedule(self, schedule)

    def setRadiantSurfaceType(self, radiantSurfaceType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setRadiantSurfaceType(self, radiantSurfaceType)

    def resetRadiantSurfaceType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetRadiantSurfaceType(self)

    def setHydronicTubingInsideDiameter(self, hydronicTubingInsideDiameter: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setHydronicTubingInsideDiameter(self, hydronicTubingInsideDiameter)

    def resetHydronicTubingInsideDiameter(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetHydronicTubingInsideDiameter(self)

    def setHydronicTubingLength(self, hydronicTubingLength: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setHydronicTubingLength(self, hydronicTubingLength)

    def resetHydronicTubingLength(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetHydronicTubingLength(self)

    def setTemperatureControlType(self, temperatureControlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setTemperatureControlType(self, temperatureControlType)

    def resetTemperatureControlType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetTemperatureControlType(self)

    def setHeatingCoil(self, heatingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setHeatingCoil(self, heatingCoil)

    def setCoolingCoil(self, coolingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setCoolingCoil(self, coolingCoil)

    def setRatedFlowRate(self, ratedFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setRatedFlowRate(self, ratedFlowRate)

    def resetRatedFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetRatedFlowRate(self)

    def setPumpFlowRateSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setPumpFlowRateSchedule(self, schedule)

    def resetPumpFlowRateSchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetPumpFlowRateSchedule(self)

    def setRatedPumpHead(self, ratedPumpHead: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setRatedPumpHead(self, ratedPumpHead)

    def resetRatedPumpHead(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetRatedPumpHead(self)

    def setRatedPowerConsumption(self, ratedPowerConsumption: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setRatedPowerConsumption(self, ratedPowerConsumption)

    def resetRatedPowerConsumption(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetRatedPowerConsumption(self)

    def setMotorEfficiency(self, motorEfficiency: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setMotorEfficiency(self, motorEfficiency)

    def resetMotorEfficiency(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetMotorEfficiency(self)

    def setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream)

    def resetFractionofMotorInefficienciestoFluidStream(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetFractionofMotorInefficienciestoFluidStream(self)

    def setNumberofCircuits(self, numberofCircuits: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setNumberofCircuits(self, numberofCircuits)

    def setCircuitLength(self, circuitLength: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setCircuitLength(self, circuitLength)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_thermalZone(self)

    def addToThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_removeFromThermalZone(self)
ZoneHVACLowTempRadiantConstFlow_swigregister = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_swigregister
ZoneHVACLowTempRadiantConstFlow_swigregister(ZoneHVACLowTempRadiantConstFlow)

def ZoneHVACLowTempRadiantConstFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_iddObjectType()
ZoneHVACLowTempRadiantConstFlow_iddObjectType = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_iddObjectType

def ZoneHVACLowTempRadiantConstFlow_radiantSurfaceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_radiantSurfaceTypeValues()
ZoneHVACLowTempRadiantConstFlow_radiantSurfaceTypeValues = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_radiantSurfaceTypeValues

def ZoneHVACLowTempRadiantConstFlow_temperatureControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_temperatureControlTypeValues()
ZoneHVACLowTempRadiantConstFlow_temperatureControlTypeValues = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_temperatureControlTypeValues


def toZoneHVACLowTempRadiantConstFlow(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACLowTempRadiantConstFlow >":
    return _openstudiomodelzonehvac.toZoneHVACLowTempRadiantConstFlow(idfObject)
toZoneHVACLowTempRadiantConstFlow = _openstudiomodelzonehvac.toZoneHVACLowTempRadiantConstFlow

def getZoneHVACLowTempRadiantConstFlow(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACLowTempRadiantConstFlow >":
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlow(t_model, t_handle)
getZoneHVACLowTempRadiantConstFlow = _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlow

def getZoneHVACLowTempRadiantConstFlows(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow,std::allocator< openstudio::model::ZoneHVACLowTempRadiantConstFlow > >":
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlows(t_model)
getZoneHVACLowTempRadiantConstFlows = _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlows

def getZoneHVACLowTempRadiantConstFlowByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACLowTempRadiantConstFlow >":
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlowByName(t_model, t_name)
getZoneHVACLowTempRadiantConstFlowByName = _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlowByName

def getZoneHVACLowTempRadiantConstFlowsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantConstFlow,std::allocator< openstudio::model::ZoneHVACLowTempRadiantConstFlow > >":
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlowsByName(t_model, t_name, t_exactMatch)
getZoneHVACLowTempRadiantConstFlowsByName = _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlowsByName
class ZoneHVACLowTempRadiantVarFlow(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACLowTempRadiantVarFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACLowTempRadiantVarFlow, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', availabilitySchedule: 'Schedule', heatingCoil: 'HVACComponent', coolingCoil: 'HVACComponent'):
        this = _openstudiomodelzonehvac.new_ZoneHVACLowTempRadiantVarFlow(model, availabilitySchedule, heatingCoil, coolingCoil)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTempRadiantVarFlow
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_iddObjectType)
    __swig_getmethods__["radiantSurfaceTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_radiantSurfaceTypeValues
    if _newclass:
        radiantSurfaceTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_radiantSurfaceTypeValues)
    __swig_getmethods__["temperatureControlTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_temperatureControlTypeValues
    if _newclass:
        temperatureControlTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_temperatureControlTypeValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_availabilitySchedule(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_heatingCoil(self)

    def coolingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_coolingCoil(self)

    def radiantSurfaceType(self) -> "boost::optional< std::string >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_radiantSurfaceType(self)

    def surfaces(self) -> "std::vector< openstudio::model::Surface,std::allocator< openstudio::model::Surface > >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_surfaces(self)

    def hydronicTubingInsideDiameter(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_hydronicTubingInsideDiameter(self)

    def isHydronicTubingInsideDiameterDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isHydronicTubingInsideDiameterDefaulted(self)

    def hydronicTubingLength(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_hydronicTubingLength(self)

    def isHydronicTubingLengthDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isHydronicTubingLengthDefaulted(self)

    def isHydronicTubingLengthAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isHydronicTubingLengthAutosized(self)

    def temperatureControlType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_temperatureControlType(self)

    def isTemperatureControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isTemperatureControlTypeDefaulted(self)

    def numberofCircuits(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_numberofCircuits(self)

    def circuitLength(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_circuitLength(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setAvailabilitySchedule(self, schedule)

    def setRadiantSurfaceType(self, radiantSurfaceType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setRadiantSurfaceType(self, radiantSurfaceType)

    def resetRadiantSurfaceType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetRadiantSurfaceType(self)

    def setHeatingCoil(self, heatingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setHeatingCoil(self, heatingCoil)

    def setCoolingCoil(self, coolingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setCoolingCoil(self, coolingCoil)

    def setHydronicTubingInsideDiameter(self, hydronicTubingInsideDiameter: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setHydronicTubingInsideDiameter(self, hydronicTubingInsideDiameter)

    def resetHydronicTubingInsideDiameter(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetHydronicTubingInsideDiameter(self)

    def setHydronicTubingLength(self, hydronicTubingLength: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setHydronicTubingLength(self, hydronicTubingLength)

    def resetHydronicTubingLength(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetHydronicTubingLength(self)

    def autosizeHydronicTubingLength(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_autosizeHydronicTubingLength(self)

    def setTemperatureControlType(self, temperatureControlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setTemperatureControlType(self, temperatureControlType)

    def resetTemperatureControlType(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetTemperatureControlType(self)

    def setNumberofCircuits(self, numberofCircuits: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setNumberofCircuits(self, numberofCircuits)

    def setCircuitLength(self, circuitLength: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setCircuitLength(self, circuitLength)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_thermalZone(self)

    def addToThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_removeFromThermalZone(self)

    def autosizedHydronicTubingLength(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_autosizedHydronicTubingLength(self)
ZoneHVACLowTempRadiantVarFlow_swigregister = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_swigregister
ZoneHVACLowTempRadiantVarFlow_swigregister(ZoneHVACLowTempRadiantVarFlow)

def ZoneHVACLowTempRadiantVarFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_iddObjectType()
ZoneHVACLowTempRadiantVarFlow_iddObjectType = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_iddObjectType

def ZoneHVACLowTempRadiantVarFlow_radiantSurfaceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_radiantSurfaceTypeValues()
ZoneHVACLowTempRadiantVarFlow_radiantSurfaceTypeValues = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_radiantSurfaceTypeValues

def ZoneHVACLowTempRadiantVarFlow_temperatureControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_temperatureControlTypeValues()
ZoneHVACLowTempRadiantVarFlow_temperatureControlTypeValues = _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_temperatureControlTypeValues


def toZoneHVACLowTempRadiantVarFlow(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACLowTempRadiantVarFlow >":
    return _openstudiomodelzonehvac.toZoneHVACLowTempRadiantVarFlow(idfObject)
toZoneHVACLowTempRadiantVarFlow = _openstudiomodelzonehvac.toZoneHVACLowTempRadiantVarFlow

def getZoneHVACLowTempRadiantVarFlow(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACLowTempRadiantVarFlow >":
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlow(t_model, t_handle)
getZoneHVACLowTempRadiantVarFlow = _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlow

def getZoneHVACLowTempRadiantVarFlows(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow,std::allocator< openstudio::model::ZoneHVACLowTempRadiantVarFlow > >":
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlows(t_model)
getZoneHVACLowTempRadiantVarFlows = _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlows

def getZoneHVACLowTempRadiantVarFlowByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACLowTempRadiantVarFlow >":
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlowByName(t_model, t_name)
getZoneHVACLowTempRadiantVarFlowByName = _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlowByName

def getZoneHVACLowTempRadiantVarFlowsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACLowTempRadiantVarFlow,std::allocator< openstudio::model::ZoneHVACLowTempRadiantVarFlow > >":
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlowsByName(t_model, t_name, t_exactMatch)
getZoneHVACLowTempRadiantVarFlowsByName = _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlowsByName
class ZoneHVACPackagedTerminalHeatPump(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACPackagedTerminalHeatPump, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACPackagedTerminalHeatPump, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', availabilitySchedule: 'Schedule', supplyAirFan: 'HVACComponent', heatingCoil: 'HVACComponent', coolingCoil: 'HVACComponent', supplementalHeatingCoil: 'HVACComponent'):
        this = _openstudiomodelzonehvac.new_ZoneHVACPackagedTerminalHeatPump(model, availabilitySchedule, supplyAirFan, heatingCoil, coolingCoil, supplementalHeatingCoil)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACPackagedTerminalHeatPump
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_iddObjectType)
    __swig_getmethods__["outdoorAirMixerObjectTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerObjectTypeValues
    if _newclass:
        outdoorAirMixerObjectTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerObjectTypeValues)
    __swig_getmethods__["validOutdoorAirMixerObjectTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validOutdoorAirMixerObjectTypeValues
    if _newclass:
        validOutdoorAirMixerObjectTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validOutdoorAirMixerObjectTypeValues)
    __swig_getmethods__["fanPlacementValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_fanPlacementValues
    if _newclass:
        fanPlacementValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_fanPlacementValues)
    __swig_getmethods__["validFanPlacementValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validFanPlacementValues
    if _newclass:
        validFanPlacementValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validFanPlacementValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_availabilitySchedule(self)

    def outdoorAirMixerObjectType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerObjectType(self)

    def outdoorAirMixerName(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerName(self)

    def supplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def supplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def outdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirFlowRateDuringCoolingOperation(self)

    def isOutdoorAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isOutdoorAirFlowRateDuringCoolingOperationAutosized(self)

    def outdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirFlowRateDuringHeatingOperation(self)

    def isOutdoorAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isOutdoorAirFlowRateDuringHeatingOperationAutosized(self)

    def outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFan(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_heatingCoil(self)

    def heatingConvergenceTolerance(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_heatingConvergenceTolerance(self)

    def isHeatingConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isHeatingConvergenceToleranceDefaulted(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def isMinimumOutdoorDryBulbTemperatureforCompressorOperationDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isMinimumOutdoorDryBulbTemperatureforCompressorOperationDefaulted(self)

    def coolingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_coolingCoil(self)

    def coolingConvergenceTolerance(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_coolingConvergenceTolerance(self)

    def isCoolingConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isCoolingConvergenceToleranceDefaulted(self)

    def supplementalHeatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplementalHeatingCoil(self)

    def maximumSupplyAirTemperaturefromSupplementalHeater(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_maximumSupplyAirTemperaturefromSupplementalHeater(self)

    def isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self)

    def maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self)

    def fanPlacement(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_fanPlacement(self)

    def isFanPlacementDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isFanPlacementDefaulted(self)

    def supplyAirFanOperatingModeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFanOperatingModeSchedule(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setAvailabilitySchedule(self, schedule)

    def setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType)

    def setOutdoorAirMixerName(self, outdoorAirMixerName: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirMixerName(self, outdoorAirMixerName)

    def setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation)

    def autosizeOutdoorAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeOutdoorAirFlowRateDuringCoolingOperation(self)

    def setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation)

    def autosizeOutdoorAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeOutdoorAirFlowRateDuringHeatingOperation(self)

    def setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setSupplyAirFan(self, hvacComponent: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFan(self, hvacComponent)

    def setHeatingCoil(self, hvacComponent: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setHeatingCoil(self, hvacComponent)

    def setHeatingConvergenceTolerance(self, heatingConvergenceTolerance: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setHeatingConvergenceTolerance(self, heatingConvergenceTolerance)

    def resetHeatingConvergenceTolerance(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetHeatingConvergenceTolerance(self)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def resetMinimumOutdoorDryBulbTemperatureforCompressorOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetMinimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def setCoolingCoil(self, hvacComponent: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setCoolingCoil(self, hvacComponent)

    def setCoolingConvergenceTolerance(self, coolingConvergenceTolerance: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setCoolingConvergenceTolerance(self, coolingConvergenceTolerance)

    def resetCoolingConvergenceTolerance(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetCoolingConvergenceTolerance(self)

    def setSupplementalHeatingCoil(self, hvacComponent: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplementalHeatingCoil(self, hvacComponent)

    def setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater)

    def autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation)

    def resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def setFanPlacement(self, fanPlacement: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setFanPlacement(self, fanPlacement)

    def resetFanPlacement(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetFanPlacement(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetSupplyAirFanOperatingModeSchedule(self)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedOutdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizedOutdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self)
ZoneHVACPackagedTerminalHeatPump_swigregister = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_swigregister
ZoneHVACPackagedTerminalHeatPump_swigregister(ZoneHVACPackagedTerminalHeatPump)

def ZoneHVACPackagedTerminalHeatPump_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_iddObjectType()
ZoneHVACPackagedTerminalHeatPump_iddObjectType = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_iddObjectType

def ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerObjectTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerObjectTypeValues()
ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerObjectTypeValues = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerObjectTypeValues

def ZoneHVACPackagedTerminalHeatPump_validOutdoorAirMixerObjectTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validOutdoorAirMixerObjectTypeValues()
ZoneHVACPackagedTerminalHeatPump_validOutdoorAirMixerObjectTypeValues = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validOutdoorAirMixerObjectTypeValues

def ZoneHVACPackagedTerminalHeatPump_fanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_fanPlacementValues()
ZoneHVACPackagedTerminalHeatPump_fanPlacementValues = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_fanPlacementValues

def ZoneHVACPackagedTerminalHeatPump_validFanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validFanPlacementValues()
ZoneHVACPackagedTerminalHeatPump_validFanPlacementValues = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validFanPlacementValues


def toZoneHVACPackagedTerminalHeatPump(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACPackagedTerminalHeatPump >":
    return _openstudiomodelzonehvac.toZoneHVACPackagedTerminalHeatPump(idfObject)
toZoneHVACPackagedTerminalHeatPump = _openstudiomodelzonehvac.toZoneHVACPackagedTerminalHeatPump

def getZoneHVACPackagedTerminalHeatPump(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACPackagedTerminalHeatPump >":
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPump(t_model, t_handle)
getZoneHVACPackagedTerminalHeatPump = _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPump

def getZoneHVACPackagedTerminalHeatPumps(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump,std::allocator< openstudio::model::ZoneHVACPackagedTerminalHeatPump > >":
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPumps(t_model)
getZoneHVACPackagedTerminalHeatPumps = _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPumps

def getZoneHVACPackagedTerminalHeatPumpByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACPackagedTerminalHeatPump >":
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPumpByName(t_model, t_name)
getZoneHVACPackagedTerminalHeatPumpByName = _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPumpByName

def getZoneHVACPackagedTerminalHeatPumpsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump,std::allocator< openstudio::model::ZoneHVACPackagedTerminalHeatPump > >":
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPumpsByName(t_model, t_name, t_exactMatch)
getZoneHVACPackagedTerminalHeatPumpsByName = _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPumpsByName
class ZoneHVACPackagedTerminalAirConditioner(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACPackagedTerminalAirConditioner, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACPackagedTerminalAirConditioner, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', availabilitySchedule: 'Schedule', supplyAirFan: 'HVACComponent', heatingCoil: 'HVACComponent', coolingCoil: 'HVACComponent'):
        this = _openstudiomodelzonehvac.new_ZoneHVACPackagedTerminalAirConditioner(model, availabilitySchedule, supplyAirFan, heatingCoil, coolingCoil)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACPackagedTerminalAirConditioner
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_iddObjectType)
    __swig_getmethods__["outdoorAirMixerObjectTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerObjectTypeValues
    if _newclass:
        outdoorAirMixerObjectTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerObjectTypeValues)
    __swig_getmethods__["validOutdoorAirMixerObjectTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validOutdoorAirMixerObjectTypeValues
    if _newclass:
        validOutdoorAirMixerObjectTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validOutdoorAirMixerObjectTypeValues)
    __swig_getmethods__["fanPlacementValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_fanPlacementValues
    if _newclass:
        fanPlacementValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_fanPlacementValues)
    __swig_getmethods__["validFanPlacementValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validFanPlacementValues
    if _newclass:
        validFanPlacementValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validFanPlacementValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_availabilitySchedule(self)

    def outdoorAirMixerObjectType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerObjectType(self)

    def outdoorAirMixerName(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerName(self)

    def supplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def supplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def outdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirFlowRateDuringCoolingOperation(self)

    def isOutdoorAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isOutdoorAirFlowRateDuringCoolingOperationAutosized(self)

    def outdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirFlowRateDuringHeatingOperation(self)

    def isOutdoorAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isOutdoorAirFlowRateDuringHeatingOperationAutosized(self)

    def outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFan(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_heatingCoil(self)

    def coolingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_coolingCoil(self)

    def fanPlacement(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_fanPlacement(self)

    def isFanPlacementDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isFanPlacementDefaulted(self)

    def supplyAirFanOperatingModeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFanOperatingModeSchedule(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setAvailabilitySchedule(self, schedule)

    def setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType)

    def setOutdoorAirMixerName(self, outdoorAirMixerName: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirMixerName(self, outdoorAirMixerName)

    def setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation)

    def autosizeOutdoorAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeOutdoorAirFlowRateDuringCoolingOperation(self)

    def setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation)

    def autosizeOutdoorAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeOutdoorAirFlowRateDuringHeatingOperation(self)

    def setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setSupplyAirFan(self, fan: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFan(self, fan)

    def setHeatingCoil(self, heatingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setHeatingCoil(self, heatingCoil)

    def setCoolingCoil(self, coolingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setCoolingCoil(self, coolingCoil)

    def setFanPlacement(self, fanPlacement: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setFanPlacement(self, fanPlacement)

    def resetFanPlacement(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_resetFanPlacement(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_resetSupplyAirFanOperatingModeSchedule(self)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedOutdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizedOutdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)
ZoneHVACPackagedTerminalAirConditioner_swigregister = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_swigregister
ZoneHVACPackagedTerminalAirConditioner_swigregister(ZoneHVACPackagedTerminalAirConditioner)

def ZoneHVACPackagedTerminalAirConditioner_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_iddObjectType()
ZoneHVACPackagedTerminalAirConditioner_iddObjectType = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_iddObjectType

def ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerObjectTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerObjectTypeValues()
ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerObjectTypeValues = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerObjectTypeValues

def ZoneHVACPackagedTerminalAirConditioner_validOutdoorAirMixerObjectTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validOutdoorAirMixerObjectTypeValues()
ZoneHVACPackagedTerminalAirConditioner_validOutdoorAirMixerObjectTypeValues = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validOutdoorAirMixerObjectTypeValues

def ZoneHVACPackagedTerminalAirConditioner_fanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_fanPlacementValues()
ZoneHVACPackagedTerminalAirConditioner_fanPlacementValues = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_fanPlacementValues

def ZoneHVACPackagedTerminalAirConditioner_validFanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validFanPlacementValues()
ZoneHVACPackagedTerminalAirConditioner_validFanPlacementValues = _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validFanPlacementValues


def toZoneHVACPackagedTerminalAirConditioner(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >":
    return _openstudiomodelzonehvac.toZoneHVACPackagedTerminalAirConditioner(idfObject)
toZoneHVACPackagedTerminalAirConditioner = _openstudiomodelzonehvac.toZoneHVACPackagedTerminalAirConditioner

def getZoneHVACPackagedTerminalAirConditioner(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >":
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditioner(t_model, t_handle)
getZoneHVACPackagedTerminalAirConditioner = _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditioner

def getZoneHVACPackagedTerminalAirConditioners(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner,std::allocator< openstudio::model::ZoneHVACPackagedTerminalAirConditioner > >":
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditioners(t_model)
getZoneHVACPackagedTerminalAirConditioners = _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditioners

def getZoneHVACPackagedTerminalAirConditionerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACPackagedTerminalAirConditioner >":
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditionerByName(t_model, t_name)
getZoneHVACPackagedTerminalAirConditionerByName = _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditionerByName

def getZoneHVACPackagedTerminalAirConditionersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner,std::allocator< openstudio::model::ZoneHVACPackagedTerminalAirConditioner > >":
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditionersByName(t_model, t_name, t_exactMatch)
getZoneHVACPackagedTerminalAirConditionersByName = _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditionersByName
class ZoneHVACTerminalUnitVariableRefrigerantFlow(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACTerminalUnitVariableRefrigerantFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACTerminalUnitVariableRefrigerantFlow, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACTerminalUnitVariableRefrigerantFlow(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACTerminalUnitVariableRefrigerantFlow
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_iddObjectType)
    __swig_getmethods__["supplyAirFanplacementValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanplacementValues
    if _newclass:
        supplyAirFanplacementValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanplacementValues)

    def terminalUnitAvailabilityschedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_terminalUnitAvailabilityschedule(self)

    def setTerminalUnitAvailabilityschedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setTerminalUnitAvailabilityschedule(self, schedule)

    def supplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def supplyAirFlowRateWhenNoCoolingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFlowRateWhenNoCoolingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingisNeededAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isSupplyAirFlowRateWhenNoCoolingisNeededAutosized(self)

    def setSupplyAirFlowRateWhenNoCoolingisNeeded(self, supplyAirFlowRateWhenNoCoolingisNeeded: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFlowRateWhenNoCoolingisNeeded(self, supplyAirFlowRateWhenNoCoolingisNeeded)

    def autosizeSupplyAirFlowRateWhenNoCoolingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeSupplyAirFlowRateWhenNoCoolingisNeeded(self)

    def supplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def supplyAirFlowRateWhenNoHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFlowRateWhenNoHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isSupplyAirFlowRateWhenNoHeatingisNeededAutosized(self)

    def setSupplyAirFlowRateWhenNoHeatingisNeeded(self, supplyAirFlowRateWhenNoHeatingisNeeded: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFlowRateWhenNoHeatingisNeeded(self, supplyAirFlowRateWhenNoHeatingisNeeded)

    def autosizeSupplyAirFlowRateWhenNoHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeSupplyAirFlowRateWhenNoHeatingisNeeded(self)

    def outdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_outdoorAirFlowRateDuringCoolingOperation(self)

    def isOutdoorAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isOutdoorAirFlowRateDuringCoolingOperationAutosized(self)

    def setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation)

    def autosizeOutdoorAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeOutdoorAirFlowRateDuringCoolingOperation(self)

    def outdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_outdoorAirFlowRateDuringHeatingOperation(self)

    def isOutdoorAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isOutdoorAirFlowRateDuringHeatingOperationAutosized(self)

    def setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation)

    def autosizeOutdoorAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeOutdoorAirFlowRateDuringHeatingOperation(self)

    def outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def supplyAirFanOperatingModeSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanOperatingModeSchedule(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFan(self)

    def coolingCoil(self) -> "boost::optional< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_coolingCoil(self)

    def setCoolingCoil(self, coil: 'CoilCoolingDXVariableRefrigerantFlow') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setCoolingCoil(self, coil)

    def heatingCoil(self) -> "boost::optional< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_heatingCoil(self)

    def setHeatingCoil(self, coil: 'CoilHeatingDXVariableRefrigerantFlow') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setHeatingCoil(self, coil)

    def zoneTerminalUnitOnParasiticElectricEnergyUse(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_zoneTerminalUnitOnParasiticElectricEnergyUse(self)

    def setZoneTerminalUnitOnParasiticElectricEnergyUse(self, zoneTerminalUnitOnParasiticElectricEnergyUse: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setZoneTerminalUnitOnParasiticElectricEnergyUse(self, zoneTerminalUnitOnParasiticElectricEnergyUse)

    def zoneTerminalUnitOffParasiticElectricEnergyUse(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_zoneTerminalUnitOffParasiticElectricEnergyUse(self)

    def setZoneTerminalUnitOffParasiticElectricEnergyUse(self, zoneTerminalUnitOffParasiticElectricEnergyUse: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setZoneTerminalUnitOffParasiticElectricEnergyUse(self, zoneTerminalUnitOffParasiticElectricEnergyUse)

    def ratedTotalHeatingCapacitySizingRatio(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_ratedTotalHeatingCapacitySizingRatio(self)

    def setRatedTotalHeatingCapacitySizingRatio(self, ratedTotalHeatingCapacitySizingRatio: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setRatedTotalHeatingCapacitySizingRatio(self, ratedTotalHeatingCapacitySizingRatio)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedSupplyAirFlowRateWhenNoCoolingisNeeded(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedSupplyAirFlowRateWhenNoHeatingisNeeded(self)

    def autosizedOutdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizedOutdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)
ZoneHVACTerminalUnitVariableRefrigerantFlow_swigregister = _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_swigregister
ZoneHVACTerminalUnitVariableRefrigerantFlow_swigregister(ZoneHVACTerminalUnitVariableRefrigerantFlow)

def ZoneHVACTerminalUnitVariableRefrigerantFlow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_iddObjectType()
ZoneHVACTerminalUnitVariableRefrigerantFlow_iddObjectType = _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_iddObjectType

def ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanplacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanplacementValues()
ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanplacementValues = _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanplacementValues


def toZoneHVACTerminalUnitVariableRefrigerantFlow(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >":
    return _openstudiomodelzonehvac.toZoneHVACTerminalUnitVariableRefrigerantFlow(idfObject)
toZoneHVACTerminalUnitVariableRefrigerantFlow = _openstudiomodelzonehvac.toZoneHVACTerminalUnitVariableRefrigerantFlow

def getZoneHVACTerminalUnitVariableRefrigerantFlow(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >":
    return _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlow(t_model, t_handle)
getZoneHVACTerminalUnitVariableRefrigerantFlow = _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlow

def getZoneHVACTerminalUnitVariableRefrigerantFlows(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow,std::allocator< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow > >":
    return _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlows(t_model)
getZoneHVACTerminalUnitVariableRefrigerantFlows = _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlows

def getZoneHVACTerminalUnitVariableRefrigerantFlowByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow >":
    return _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlowByName(t_model, t_name)
getZoneHVACTerminalUnitVariableRefrigerantFlowByName = _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlowByName

def getZoneHVACTerminalUnitVariableRefrigerantFlowsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow,std::allocator< openstudio::model::ZoneHVACTerminalUnitVariableRefrigerantFlow > >":
    return _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlowsByName(t_model, t_name, t_exactMatch)
getZoneHVACTerminalUnitVariableRefrigerantFlowsByName = _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlowsByName
class ZoneHVACUnitHeater(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACUnitHeater, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACUnitHeater, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', availabilitySchedule: 'Schedule', supplyAirFan: 'HVACComponent', heatingCoil: 'HVACComponent'):
        this = _openstudiomodelzonehvac.new_ZoneHVACUnitHeater(model, availabilitySchedule, supplyAirFan, heatingCoil)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACUnitHeater
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACUnitHeater_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACUnitHeater_iddObjectType)
    __swig_getmethods__["fanControlTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACUnitHeater_fanControlTypeValues
    if _newclass:
        fanControlTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACUnitHeater_fanControlTypeValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_availabilitySchedule(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_supplyAirFan(self)

    def maximumSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_maximumSupplyAirFlowRate(self)

    def isMaximumSupplyAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_isMaximumSupplyAirFlowRateAutosized(self)

    def fanControlType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_fanControlType(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_heatingCoil(self)

    def maximumHotWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_maximumHotWaterFlowRate(self)

    def isMaximumHotWaterFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_isMaximumHotWaterFlowRateAutosized(self)

    def minimumHotWaterFlowRate(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_minimumHotWaterFlowRate(self)

    def isMinimumHotWaterFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_isMinimumHotWaterFlowRateDefaulted(self)

    def heatingConvergenceTolerance(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_heatingConvergenceTolerance(self)

    def isHeatingConvergenceToleranceDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_isHeatingConvergenceToleranceDefaulted(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setAvailabilitySchedule(self, schedule)

    def setSupplyAirFan(self, fan: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setSupplyAirFan(self, fan)

    def setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate)

    def autosizeMaximumSupplyAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_autosizeMaximumSupplyAirFlowRate(self)

    def setFanControlType(self, fanControlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setFanControlType(self, fanControlType)

    def setHeatingCoil(self, heatingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setHeatingCoil(self, heatingCoil)

    def setMaximumHotWaterFlowRate(self, maximumHotWaterFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setMaximumHotWaterFlowRate(self, maximumHotWaterFlowRate)

    def resetMaximumHotWaterFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_resetMaximumHotWaterFlowRate(self)

    def autosizeMaximumHotWaterFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_autosizeMaximumHotWaterFlowRate(self)

    def setMinimumHotWaterFlowRate(self, minimumHotWaterFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setMinimumHotWaterFlowRate(self, minimumHotWaterFlowRate)

    def resetMinimumHotWaterFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_resetMinimumHotWaterFlowRate(self)

    def setHeatingConvergenceTolerance(self, heatingConvergenceTolerance: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setHeatingConvergenceTolerance(self, heatingConvergenceTolerance)

    def resetHeatingConvergenceTolerance(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_resetHeatingConvergenceTolerance(self)

    def autosizedMaximumSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_autosizedMaximumSupplyAirFlowRate(self)

    def autosizedMaximumHotWaterFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_autosizedMaximumHotWaterFlowRate(self)
ZoneHVACUnitHeater_swigregister = _openstudiomodelzonehvac.ZoneHVACUnitHeater_swigregister
ZoneHVACUnitHeater_swigregister(ZoneHVACUnitHeater)

def ZoneHVACUnitHeater_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACUnitHeater_iddObjectType()
ZoneHVACUnitHeater_iddObjectType = _openstudiomodelzonehvac.ZoneHVACUnitHeater_iddObjectType

def ZoneHVACUnitHeater_fanControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACUnitHeater_fanControlTypeValues()
ZoneHVACUnitHeater_fanControlTypeValues = _openstudiomodelzonehvac.ZoneHVACUnitHeater_fanControlTypeValues


def toZoneHVACUnitHeater(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACUnitHeater >":
    return _openstudiomodelzonehvac.toZoneHVACUnitHeater(idfObject)
toZoneHVACUnitHeater = _openstudiomodelzonehvac.toZoneHVACUnitHeater

def getZoneHVACUnitHeater(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACUnitHeater >":
    return _openstudiomodelzonehvac.getZoneHVACUnitHeater(t_model, t_handle)
getZoneHVACUnitHeater = _openstudiomodelzonehvac.getZoneHVACUnitHeater

def getZoneHVACUnitHeaters(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACUnitHeater,std::allocator< openstudio::model::ZoneHVACUnitHeater > >":
    return _openstudiomodelzonehvac.getZoneHVACUnitHeaters(t_model)
getZoneHVACUnitHeaters = _openstudiomodelzonehvac.getZoneHVACUnitHeaters

def getZoneHVACUnitHeaterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACUnitHeater >":
    return _openstudiomodelzonehvac.getZoneHVACUnitHeaterByName(t_model, t_name)
getZoneHVACUnitHeaterByName = _openstudiomodelzonehvac.getZoneHVACUnitHeaterByName

def getZoneHVACUnitHeatersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACUnitHeater,std::allocator< openstudio::model::ZoneHVACUnitHeater > >":
    return _openstudiomodelzonehvac.getZoneHVACUnitHeatersByName(t_model, t_name, t_exactMatch)
getZoneHVACUnitHeatersByName = _openstudiomodelzonehvac.getZoneHVACUnitHeatersByName
class ZoneHVACUnitVentilator(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACUnitVentilator, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACUnitVentilator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelzonehvac.new_ZoneHVACUnitVentilator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACUnitVentilator
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACUnitVentilator_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACUnitVentilator_iddObjectType)
    __swig_getmethods__["outdoorAirControlTypeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACUnitVentilator_outdoorAirControlTypeValues
    if _newclass:
        outdoorAirControlTypeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACUnitVentilator_outdoorAirControlTypeValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_availabilitySchedule(self)

    def maximumSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_maximumSupplyAirFlowRate(self)

    def isMaximumSupplyAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_isMaximumSupplyAirFlowRateAutosized(self)

    def outdoorAirControlType(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_outdoorAirControlType(self)

    def minimumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_minimumOutdoorAirFlowRate(self)

    def isMinimumOutdoorAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_isMinimumOutdoorAirFlowRateAutosized(self)

    def minimumOutdoorAirSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_minimumOutdoorAirSchedule(self)

    def maximumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_maximumOutdoorAirFlowRate(self)

    def isMaximumOutdoorAirFlowRateAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_isMaximumOutdoorAirFlowRateAutosized(self)

    def maximumOutdoorAirFractionorTemperatureSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_maximumOutdoorAirFractionorTemperatureSchedule(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_supplyAirFan(self)

    def supplyAirFanOperatingModeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_supplyAirFanOperatingModeSchedule(self)

    def heatingCoil(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_heatingCoil(self)

    def heatingConvergenceTolerance(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_heatingConvergenceTolerance(self)

    def coolingCoil(self) -> "boost::optional< openstudio::model::HVACComponent >":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_coolingCoil(self)

    def coolingConvergenceTolerance(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_coolingConvergenceTolerance(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setAvailabilitySchedule(self, schedule)

    def setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate)

    def autosizeMaximumSupplyAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizeMaximumSupplyAirFlowRate(self)

    def setOutdoorAirControlType(self, outdoorAirControlType: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setOutdoorAirControlType(self, outdoorAirControlType)

    def setMinimumOutdoorAirFlowRate(self, minimumOutdoorAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMinimumOutdoorAirFlowRate(self, minimumOutdoorAirFlowRate)

    def autosizeMinimumOutdoorAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizeMinimumOutdoorAirFlowRate(self)

    def setMinimumOutdoorAirSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMinimumOutdoorAirSchedule(self, schedule)

    def setMaximumOutdoorAirFlowRate(self, maximumOutdoorAirFlowRate: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMaximumOutdoorAirFlowRate(self, maximumOutdoorAirFlowRate)

    def autosizeMaximumOutdoorAirFlowRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizeMaximumOutdoorAirFlowRate(self)

    def setMaximumOutdoorAirFractionorTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMaximumOutdoorAirFractionorTemperatureSchedule(self, schedule)

    def setSupplyAirFan(self, supplyAirFan: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setSupplyAirFan(self, supplyAirFan)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_resetSupplyAirFanOperatingModeSchedule(self)

    def setHeatingCoil(self, heatingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setHeatingCoil(self, heatingCoil)

    def resetHeatingCoil(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_resetHeatingCoil(self)

    def setHeatingConvergenceTolerance(self, heatingConvergenceTolerance: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setHeatingConvergenceTolerance(self, heatingConvergenceTolerance)

    def setCoolingCoil(self, coolingCoil: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setCoolingCoil(self, coolingCoil)

    def resetCoolingCoil(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_resetCoolingCoil(self)

    def setCoolingConvergenceTolerance(self, coolingConvergenceTolerance: 'double') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setCoolingConvergenceTolerance(self, coolingConvergenceTolerance)

    def autosizedMaximumSupplyAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizedMaximumSupplyAirFlowRate(self)

    def autosizedMinimumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizedMinimumOutdoorAirFlowRate(self)

    def autosizedMaximumOutdoorAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizedMaximumOutdoorAirFlowRate(self)
ZoneHVACUnitVentilator_swigregister = _openstudiomodelzonehvac.ZoneHVACUnitVentilator_swigregister
ZoneHVACUnitVentilator_swigregister(ZoneHVACUnitVentilator)

def ZoneHVACUnitVentilator_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_iddObjectType()
ZoneHVACUnitVentilator_iddObjectType = _openstudiomodelzonehvac.ZoneHVACUnitVentilator_iddObjectType

def ZoneHVACUnitVentilator_outdoorAirControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_outdoorAirControlTypeValues()
ZoneHVACUnitVentilator_outdoorAirControlTypeValues = _openstudiomodelzonehvac.ZoneHVACUnitVentilator_outdoorAirControlTypeValues


def toZoneHVACUnitVentilator(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACUnitVentilator >":
    return _openstudiomodelzonehvac.toZoneHVACUnitVentilator(idfObject)
toZoneHVACUnitVentilator = _openstudiomodelzonehvac.toZoneHVACUnitVentilator

def getZoneHVACUnitVentilator(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACUnitVentilator >":
    return _openstudiomodelzonehvac.getZoneHVACUnitVentilator(t_model, t_handle)
getZoneHVACUnitVentilator = _openstudiomodelzonehvac.getZoneHVACUnitVentilator

def getZoneHVACUnitVentilators(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACUnitVentilator,std::allocator< openstudio::model::ZoneHVACUnitVentilator > >":
    return _openstudiomodelzonehvac.getZoneHVACUnitVentilators(t_model)
getZoneHVACUnitVentilators = _openstudiomodelzonehvac.getZoneHVACUnitVentilators

def getZoneHVACUnitVentilatorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACUnitVentilator >":
    return _openstudiomodelzonehvac.getZoneHVACUnitVentilatorByName(t_model, t_name)
getZoneHVACUnitVentilatorByName = _openstudiomodelzonehvac.getZoneHVACUnitVentilatorByName

def getZoneHVACUnitVentilatorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACUnitVentilator,std::allocator< openstudio::model::ZoneHVACUnitVentilator > >":
    return _openstudiomodelzonehvac.getZoneHVACUnitVentilatorsByName(t_model, t_name, t_exactMatch)
getZoneHVACUnitVentilatorsByName = _openstudiomodelzonehvac.getZoneHVACUnitVentilatorsByName
class ZoneHVACWaterToAirHeatPump(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACWaterToAirHeatPump, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACWaterToAirHeatPump, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', availabilitySchedule: 'Schedule', supplyAirFan: 'HVACComponent', heatingCoil: 'HVACComponent', coolingCoil: 'HVACComponent', supplementalHeatingCoil: 'HVACComponent'):
        this = _openstudiomodelzonehvac.new_ZoneHVACWaterToAirHeatPump(model, availabilitySchedule, supplyAirFan, heatingCoil, coolingCoil, supplementalHeatingCoil)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACWaterToAirHeatPump
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_iddObjectType)
    __swig_getmethods__["fanPlacementValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_fanPlacementValues
    if _newclass:
        fanPlacementValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_fanPlacementValues)
    __swig_getmethods__["heatPumpCoilWaterFlowModeValues"] = lambda x: _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpCoilWaterFlowModeValues
    if _newclass:
        heatPumpCoilWaterFlowModeValues = staticmethod(_openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpCoilWaterFlowModeValues)

    def availabilitySchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_availabilitySchedule(self)

    def supplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def supplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def outdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_outdoorAirFlowRateDuringCoolingOperation(self)

    def isOutdoorAirFlowRateDuringCoolingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isOutdoorAirFlowRateDuringCoolingOperationAutosized(self)

    def outdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_outdoorAirFlowRateDuringHeatingOperation(self)

    def isOutdoorAirFlowRateDuringHeatingOperationAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isOutdoorAirFlowRateDuringHeatingOperationAutosized(self)

    def outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def supplyAirFan(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFan(self)

    def heatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatingCoil(self)

    def coolingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_coolingCoil(self)

    def maximumCyclingRate(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_maximumCyclingRate(self)

    def isMaximumCyclingRateDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isMaximumCyclingRateDefaulted(self)

    def heatPumpTimeConstant(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpTimeConstant(self)

    def isHeatPumpTimeConstantDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isHeatPumpTimeConstantDefaulted(self)

    def fractionofOnCyclePowerUse(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_fractionofOnCyclePowerUse(self)

    def isFractionofOnCyclePowerUseDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isFractionofOnCyclePowerUseDefaulted(self)

    def heatPumpFanDelayTime(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpFanDelayTime(self)

    def isHeatPumpFanDelayTimeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isHeatPumpFanDelayTimeDefaulted(self)

    def supplementalHeatingCoil(self) -> "openstudio::model::HVACComponent":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplementalHeatingCoil(self)

    def maximumSupplyAirTemperaturefromSupplementalHeater(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_maximumSupplyAirTemperaturefromSupplementalHeater(self)

    def isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self)

    def maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self) -> "double":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self)

    def fanPlacement(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_fanPlacement(self)

    def isFanPlacementDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isFanPlacementDefaulted(self)

    def heatPumpCoilWaterFlowMode(self) -> "std::string":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpCoilWaterFlowMode(self)

    def isHeatPumpCoilWaterFlowModeDefaulted(self) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isHeatPumpCoilWaterFlowModeDefaulted(self)

    def supplyAirFanOperatingModeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFanOperatingModeSchedule(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setAvailabilitySchedule(self, schedule)

    def setSupplyAirFlowRateDuringCoolingOperation(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFlowRateDuringCoolingOperation(self, *args)

    def resetSupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFlowRateDuringHeatingOperation(self, *args)

    def resetSupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, *args)

    def resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setOutdoorAirFlowRateDuringCoolingOperation(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setOutdoorAirFlowRateDuringCoolingOperation(self, *args)

    def resetOutdoorAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizeOutdoorAirFlowRateDuringCoolingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeOutdoorAirFlowRateDuringCoolingOperation(self)

    def setOutdoorAirFlowRateDuringHeatingOperation(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setOutdoorAirFlowRateDuringHeatingOperation(self, *args)

    def resetOutdoorAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizeOutdoorAirFlowRateDuringHeatingOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeOutdoorAirFlowRateDuringHeatingOperation(self)

    def setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, *args)

    def resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setSupplyAirFan(self, fansOnOff: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFan(self, fansOnOff)

    def setHeatingCoil(self, heatingCoils: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setHeatingCoil(self, heatingCoils)

    def setCoolingCoil(self, coolingCoils: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setCoolingCoil(self, coolingCoils)

    def setMaximumCyclingRate(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setMaximumCyclingRate(self, *args)

    def resetMaximumCyclingRate(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetMaximumCyclingRate(self)

    def setHeatPumpTimeConstant(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setHeatPumpTimeConstant(self, *args)

    def resetHeatPumpTimeConstant(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetHeatPumpTimeConstant(self)

    def setFractionofOnCyclePowerUse(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setFractionofOnCyclePowerUse(self, *args)

    def resetFractionofOnCyclePowerUse(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetFractionofOnCyclePowerUse(self)

    def setHeatPumpFanDelayTime(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setHeatPumpFanDelayTime(self, *args)

    def resetHeatPumpFanDelayTime(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetHeatPumpFanDelayTime(self)

    def setSupplementalHeatingCoil(self, heatingCoilName: 'HVACComponent') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplementalHeatingCoil(self, heatingCoilName)

    def setMaximumSupplyAirTemperaturefromSupplementalHeater(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setMaximumSupplyAirTemperaturefromSupplementalHeater(self, *args)

    def resetMaximumSupplyAirTemperaturefromSupplementalHeater(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, *args) -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, *args)

    def resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def setFanPlacement(self, fanPlacement: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setFanPlacement(self, fanPlacement)

    def resetFanPlacement(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetFanPlacement(self)

    def setHeatPumpCoilWaterFlowMode(self, heatPumpCoilWaterFlowMode: 'std::string') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setHeatPumpCoilWaterFlowMode(self, heatPumpCoilWaterFlowMode)

    def resetHeatPumpCoilWaterFlowMode(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetHeatPumpCoilWaterFlowMode(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self) -> "void":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetSupplyAirFanOperatingModeSchedule(self)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedOutdoorAirFlowRateDuringCoolingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizedOutdoorAirFlowRateDuringHeatingOperation(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self) -> "boost::optional< double >":
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self)
ZoneHVACWaterToAirHeatPump_swigregister = _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_swigregister
ZoneHVACWaterToAirHeatPump_swigregister(ZoneHVACWaterToAirHeatPump)

def ZoneHVACWaterToAirHeatPump_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_iddObjectType()
ZoneHVACWaterToAirHeatPump_iddObjectType = _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_iddObjectType

def ZoneHVACWaterToAirHeatPump_fanPlacementValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_fanPlacementValues()
ZoneHVACWaterToAirHeatPump_fanPlacementValues = _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_fanPlacementValues

def ZoneHVACWaterToAirHeatPump_heatPumpCoilWaterFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpCoilWaterFlowModeValues()
ZoneHVACWaterToAirHeatPump_heatPumpCoilWaterFlowModeValues = _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpCoilWaterFlowModeValues


def toZoneHVACWaterToAirHeatPump(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACWaterToAirHeatPump >":
    return _openstudiomodelzonehvac.toZoneHVACWaterToAirHeatPump(idfObject)
toZoneHVACWaterToAirHeatPump = _openstudiomodelzonehvac.toZoneHVACWaterToAirHeatPump

def getZoneHVACWaterToAirHeatPump(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACWaterToAirHeatPump >":
    return _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPump(t_model, t_handle)
getZoneHVACWaterToAirHeatPump = _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPump

def getZoneHVACWaterToAirHeatPumps(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump,std::allocator< openstudio::model::ZoneHVACWaterToAirHeatPump > >":
    return _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPumps(t_model)
getZoneHVACWaterToAirHeatPumps = _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPumps

def getZoneHVACWaterToAirHeatPumpByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACWaterToAirHeatPump >":
    return _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPumpByName(t_model, t_name)
getZoneHVACWaterToAirHeatPumpByName = _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPumpByName

def getZoneHVACWaterToAirHeatPumpsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACWaterToAirHeatPump,std::allocator< openstudio::model::ZoneHVACWaterToAirHeatPump > >":
    return _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPumpsByName(t_model, t_name, t_exactMatch)
getZoneHVACWaterToAirHeatPumpsByName = _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPumpsByName
# This file is compatible with both classic and new-style classes.


