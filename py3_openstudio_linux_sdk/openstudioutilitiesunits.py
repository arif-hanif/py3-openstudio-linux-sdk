# This file was automatically generated by SWIG (http://www.swig.org).

# Version 3.0.7

#

# Do not make changes to this file unless you know what you are doing--modify

# the SWIG interface file instead.











from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():

        from os.path import dirname

        import imp

        fp = None

        try:

            fp, pathname, description = imp.find_module('_openstudioutilitiesunits', [dirname(__file__)])

        except ImportError:

            import _openstudioutilitiesunits

            return _openstudioutilitiesunits

        if fp is not None:

            try:

                _mod = imp.load_module('_openstudioutilitiesunits', fp, pathname, description)

            finally:

                fp.close()

            return _mod

    _openstudioutilitiesunits = swig_import_helper()

    del swig_import_helper

else:

    import _openstudioutilitiesunits

del version_info

try:

    _swig_property = property

except NameError:

    pass  # Python < 2.2 doesn't have 'property'.





def _swig_setattr_nondynamic(self, class_type, name, value, static=1):

    if (name == "thisown"):

        return self.this.own(value)

    if (name == "this"):

        if type(value).__name__ == 'SwigPyObject':

            self.__dict__[name] = value

            return

    method = class_type.__swig_setmethods__.get(name, None)

    if method:

        return method(self, value)

    if (not static):

        if _newclass:

            object.__setattr__(self, name, value)

        else:

            self.__dict__[name] = value

    else:

        raise AttributeError("You cannot add attributes to %s" % self)





def _swig_setattr(self, class_type, name, value):

    return _swig_setattr_nondynamic(self, class_type, name, value, 0)





def _swig_getattr_nondynamic(self, class_type, name, static=1):

    if (name == "thisown"):

        return self.this.own()

    method = class_type.__swig_getmethods__.get(name, None)

    if method:

        return method(self)

    if (not static):

        return object.__getattr__(self, name)

    else:

        raise AttributeError(name)



def _swig_getattr(self, class_type, name):

    return _swig_getattr_nondynamic(self, class_type, name, 0)





def _swig_repr(self):

    try:

        strthis = "proxy of " + self.this.__repr__()

    except:

        strthis = ""

    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)



try:

    _object = object

    _newclass = 1

except AttributeError:

    class _object:

        pass

    _newclass = 0





try:

    import weakref

    weakref_proxy = weakref.proxy

except:

    weakref_proxy = lambda x: x





class SwigPyIterator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiesunits.delete_SwigPyIterator

    __del__ = lambda self: None



    def value(self) -> "PyObject *":

        return _openstudioutilitiesunits.SwigPyIterator_value(self)



    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.SwigPyIterator_incr(self, n)



    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.SwigPyIterator_decr(self, n)



    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":

        return _openstudioutilitiesunits.SwigPyIterator_distance(self, x)



    def equal(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiesunits.SwigPyIterator_equal(self, x)



    def copy(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.SwigPyIterator_copy(self)



    def next(self) -> "PyObject *":

        return _openstudioutilitiesunits.SwigPyIterator_next(self)



    def __next__(self) -> "PyObject *":

        return _openstudioutilitiesunits.SwigPyIterator___next__(self)



    def previous(self) -> "PyObject *":

        return _openstudioutilitiesunits.SwigPyIterator_previous(self)



    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.SwigPyIterator_advance(self, n)



    def __eq__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiesunits.SwigPyIterator___eq__(self, x)



    def __ne__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiesunits.SwigPyIterator___ne__(self, x)



    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiesunits.SwigPyIterator___iadd__(self, n)



    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiesunits.SwigPyIterator___isub__(self, n)



    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.SwigPyIterator___add__(self, n)



    def __sub__(self, *args) -> "ptrdiff_t":

        return _openstudioutilitiesunits.SwigPyIterator___sub__(self, *args)

    def __iter__(self):

        return self

SwigPyIterator_swigregister = _openstudioutilitiesunits.SwigPyIterator_swigregister

SwigPyIterator_swigregister(SwigPyIterator)





_openstudioutilitiesunits.SHARED_PTR_DISOWN_swigconstant(_openstudioutilitiesunits)

SHARED_PTR_DISOWN = _openstudioutilitiesunits.SHARED_PTR_DISOWN

from .import openstudioutilitiescore



def printScales() -> "std::string":

    return _openstudioutilitiesunits.printScales()

printScales = _openstudioutilitiesunits.printScales

class UnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, UnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.UnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.UnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.UnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::Unit >::size_type":

        return _openstudioutilitiesunits.UnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::Unit >::value_type":

        return _openstudioutilitiesunits.UnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::Unit >::difference_type', j: 'std::vector< openstudio::Unit >::difference_type') -> "std::vector< openstudio::Unit,std::allocator< openstudio::Unit > > *":

        return _openstudioutilitiesunits.UnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.UnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::Unit >::difference_type', j: 'std::vector< openstudio::Unit >::difference_type') -> "void":

        return _openstudioutilitiesunits.UnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.UnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::Unit >::value_type const &":

        return _openstudioutilitiesunits.UnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.UnitVector___setitem__(self, *args)



    def append(self, x: 'ZUnit') -> "void":

        return _openstudioutilitiesunits.UnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.UnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::Unit >::size_type":

        return _openstudioutilitiesunits.UnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.UnitVector_clear(self)



    def swap(self, v: 'UnitVector') -> "void":

        return _openstudioutilitiesunits.UnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::Unit >::allocator_type":

        return _openstudioutilitiesunits.UnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::Unit >::iterator":

        return _openstudioutilitiesunits.UnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::Unit >::iterator":

        return _openstudioutilitiesunits.UnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::Unit >::reverse_iterator":

        return _openstudioutilitiesunits.UnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::Unit >::reverse_iterator":

        return _openstudioutilitiesunits.UnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.UnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::Unit >::iterator":

        return _openstudioutilitiesunits.UnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_UnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ZUnit') -> "void":

        return _openstudioutilitiesunits.UnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::Unit >::value_type const &":

        return _openstudioutilitiesunits.UnitVector_front(self)



    def back(self) -> "std::vector< openstudio::Unit >::value_type const &":

        return _openstudioutilitiesunits.UnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::Unit >::size_type', x: 'ZUnit') -> "void":

        return _openstudioutilitiesunits.UnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.UnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.UnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::Unit >::size_type') -> "void":

        return _openstudioutilitiesunits.UnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::Unit >::size_type":

        return _openstudioutilitiesunits.UnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_UnitVector

    __del__ = lambda self: None

UnitVector_swigregister = _openstudioutilitiesunits.UnitVector_swigregister

UnitVector_swigregister(UnitVector)



class OptionalUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalUnit_reset(self)



    def __ref__(self) -> "openstudio::Unit":

        return _openstudioutilitiesunits.OptionalUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalUnit_isNull(self)



    def get(self) -> "openstudio::Unit":

        return _openstudioutilitiesunits.OptionalUnit_get(self)



    def set(self, t: 'ZUnit') -> "void":

        return _openstudioutilitiesunits.OptionalUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalUnit

    __del__ = lambda self: None

OptionalUnit_swigregister = _openstudioutilitiesunits.OptionalUnit_swigregister

OptionalUnit_swigregister(OptionalUnit)



class TemperatureUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, TemperatureUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, TemperatureUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.TemperatureUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.TemperatureUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.TemperatureUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::TemperatureUnit >::size_type":

        return _openstudioutilitiesunits.TemperatureUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::TemperatureUnit >::value_type":

        return _openstudioutilitiesunits.TemperatureUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::TemperatureUnit >::difference_type', j: 'std::vector< openstudio::TemperatureUnit >::difference_type') -> "std::vector< openstudio::TemperatureUnit,std::allocator< openstudio::TemperatureUnit > > *":

        return _openstudioutilitiesunits.TemperatureUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::TemperatureUnit >::difference_type', j: 'std::vector< openstudio::TemperatureUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::TemperatureUnit >::value_type const &":

        return _openstudioutilitiesunits.TemperatureUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector___setitem__(self, *args)



    def append(self, x: 'TemperatureUnit') -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.TemperatureUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::TemperatureUnit >::size_type":

        return _openstudioutilitiesunits.TemperatureUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector_clear(self)



    def swap(self, v: 'TemperatureUnitVector') -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::TemperatureUnit >::allocator_type":

        return _openstudioutilitiesunits.TemperatureUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::TemperatureUnit >::iterator":

        return _openstudioutilitiesunits.TemperatureUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::TemperatureUnit >::iterator":

        return _openstudioutilitiesunits.TemperatureUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::TemperatureUnit >::reverse_iterator":

        return _openstudioutilitiesunits.TemperatureUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::TemperatureUnit >::reverse_iterator":

        return _openstudioutilitiesunits.TemperatureUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::TemperatureUnit >::iterator":

        return _openstudioutilitiesunits.TemperatureUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_TemperatureUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'TemperatureUnit') -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::TemperatureUnit >::value_type const &":

        return _openstudioutilitiesunits.TemperatureUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::TemperatureUnit >::value_type const &":

        return _openstudioutilitiesunits.TemperatureUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::TemperatureUnit >::size_type', x: 'TemperatureUnit') -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::TemperatureUnit >::size_type', x: 'TemperatureUnit') -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::TemperatureUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.TemperatureUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::TemperatureUnit >::size_type":

        return _openstudioutilitiesunits.TemperatureUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_TemperatureUnitVector

    __del__ = lambda self: None

TemperatureUnitVector_swigregister = _openstudioutilitiesunits.TemperatureUnitVector_swigregister

TemperatureUnitVector_swigregister(TemperatureUnitVector)



class OptionalTemperatureUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalTemperatureUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalTemperatureUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalTemperatureUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalTemperatureUnit_reset(self)



    def __ref__(self) -> "openstudio::TemperatureUnit":

        return _openstudioutilitiesunits.OptionalTemperatureUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalTemperatureUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalTemperatureUnit_isNull(self)



    def get(self) -> "openstudio::TemperatureUnit":

        return _openstudioutilitiesunits.OptionalTemperatureUnit_get(self)



    def set(self, t: 'TemperatureUnit') -> "void":

        return _openstudioutilitiesunits.OptionalTemperatureUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalTemperatureUnit

    __del__ = lambda self: None

OptionalTemperatureUnit_swigregister = _openstudioutilitiesunits.OptionalTemperatureUnit_swigregister

OptionalTemperatureUnit_swigregister(OptionalTemperatureUnit)



class CelsiusUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CelsiusUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CelsiusUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.CelsiusUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.CelsiusUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.CelsiusUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::CelsiusUnit >::size_type":

        return _openstudioutilitiesunits.CelsiusUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::CelsiusUnit >::value_type":

        return _openstudioutilitiesunits.CelsiusUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::CelsiusUnit >::difference_type', j: 'std::vector< openstudio::CelsiusUnit >::difference_type') -> "std::vector< openstudio::CelsiusUnit,std::allocator< openstudio::CelsiusUnit > > *":

        return _openstudioutilitiesunits.CelsiusUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::CelsiusUnit >::difference_type', j: 'std::vector< openstudio::CelsiusUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::CelsiusUnit >::value_type const &":

        return _openstudioutilitiesunits.CelsiusUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector___setitem__(self, *args)



    def append(self, x: 'CelsiusUnit') -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.CelsiusUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::CelsiusUnit >::size_type":

        return _openstudioutilitiesunits.CelsiusUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector_clear(self)



    def swap(self, v: 'CelsiusUnitVector') -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::CelsiusUnit >::allocator_type":

        return _openstudioutilitiesunits.CelsiusUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::CelsiusUnit >::iterator":

        return _openstudioutilitiesunits.CelsiusUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::CelsiusUnit >::iterator":

        return _openstudioutilitiesunits.CelsiusUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::CelsiusUnit >::reverse_iterator":

        return _openstudioutilitiesunits.CelsiusUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::CelsiusUnit >::reverse_iterator":

        return _openstudioutilitiesunits.CelsiusUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::CelsiusUnit >::iterator":

        return _openstudioutilitiesunits.CelsiusUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_CelsiusUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CelsiusUnit') -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::CelsiusUnit >::value_type const &":

        return _openstudioutilitiesunits.CelsiusUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::CelsiusUnit >::value_type const &":

        return _openstudioutilitiesunits.CelsiusUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::CelsiusUnit >::size_type', x: 'CelsiusUnit') -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::CelsiusUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.CelsiusUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::CelsiusUnit >::size_type":

        return _openstudioutilitiesunits.CelsiusUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_CelsiusUnitVector

    __del__ = lambda self: None

CelsiusUnitVector_swigregister = _openstudioutilitiesunits.CelsiusUnitVector_swigregister

CelsiusUnitVector_swigregister(CelsiusUnitVector)



class OptionalCelsiusUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCelsiusUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCelsiusUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalCelsiusUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalCelsiusUnit_reset(self)



    def __ref__(self) -> "openstudio::CelsiusUnit":

        return _openstudioutilitiesunits.OptionalCelsiusUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalCelsiusUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalCelsiusUnit_isNull(self)



    def get(self) -> "openstudio::CelsiusUnit":

        return _openstudioutilitiesunits.OptionalCelsiusUnit_get(self)



    def set(self, t: 'CelsiusUnit') -> "void":

        return _openstudioutilitiesunits.OptionalCelsiusUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalCelsiusUnit

    __del__ = lambda self: None

OptionalCelsiusUnit_swigregister = _openstudioutilitiesunits.OptionalCelsiusUnit_swigregister

OptionalCelsiusUnit_swigregister(OptionalCelsiusUnit)



class FahrenheitUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, FahrenheitUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, FahrenheitUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.FahrenheitUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.FahrenheitUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.FahrenheitUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::FahrenheitUnit >::size_type":

        return _openstudioutilitiesunits.FahrenheitUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::FahrenheitUnit >::value_type":

        return _openstudioutilitiesunits.FahrenheitUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::FahrenheitUnit >::difference_type', j: 'std::vector< openstudio::FahrenheitUnit >::difference_type') -> "std::vector< openstudio::FahrenheitUnit,std::allocator< openstudio::FahrenheitUnit > > *":

        return _openstudioutilitiesunits.FahrenheitUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::FahrenheitUnit >::difference_type', j: 'std::vector< openstudio::FahrenheitUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::FahrenheitUnit >::value_type const &":

        return _openstudioutilitiesunits.FahrenheitUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector___setitem__(self, *args)



    def append(self, x: 'FahrenheitUnit') -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.FahrenheitUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::FahrenheitUnit >::size_type":

        return _openstudioutilitiesunits.FahrenheitUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector_clear(self)



    def swap(self, v: 'FahrenheitUnitVector') -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::FahrenheitUnit >::allocator_type":

        return _openstudioutilitiesunits.FahrenheitUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::FahrenheitUnit >::iterator":

        return _openstudioutilitiesunits.FahrenheitUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::FahrenheitUnit >::iterator":

        return _openstudioutilitiesunits.FahrenheitUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::FahrenheitUnit >::reverse_iterator":

        return _openstudioutilitiesunits.FahrenheitUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::FahrenheitUnit >::reverse_iterator":

        return _openstudioutilitiesunits.FahrenheitUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::FahrenheitUnit >::iterator":

        return _openstudioutilitiesunits.FahrenheitUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_FahrenheitUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'FahrenheitUnit') -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::FahrenheitUnit >::value_type const &":

        return _openstudioutilitiesunits.FahrenheitUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::FahrenheitUnit >::value_type const &":

        return _openstudioutilitiesunits.FahrenheitUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::FahrenheitUnit >::size_type', x: 'FahrenheitUnit') -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::FahrenheitUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.FahrenheitUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::FahrenheitUnit >::size_type":

        return _openstudioutilitiesunits.FahrenheitUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_FahrenheitUnitVector

    __del__ = lambda self: None

FahrenheitUnitVector_swigregister = _openstudioutilitiesunits.FahrenheitUnitVector_swigregister

FahrenheitUnitVector_swigregister(FahrenheitUnitVector)



class OptionalFahrenheitUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalFahrenheitUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalFahrenheitUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalFahrenheitUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalFahrenheitUnit_reset(self)



    def __ref__(self) -> "openstudio::FahrenheitUnit":

        return _openstudioutilitiesunits.OptionalFahrenheitUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalFahrenheitUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalFahrenheitUnit_isNull(self)



    def get(self) -> "openstudio::FahrenheitUnit":

        return _openstudioutilitiesunits.OptionalFahrenheitUnit_get(self)



    def set(self, t: 'FahrenheitUnit') -> "void":

        return _openstudioutilitiesunits.OptionalFahrenheitUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalFahrenheitUnit

    __del__ = lambda self: None

OptionalFahrenheitUnit_swigregister = _openstudioutilitiesunits.OptionalFahrenheitUnit_swigregister

OptionalFahrenheitUnit_swigregister(OptionalFahrenheitUnit)



class SIUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SIUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SIUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.SIUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.SIUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.SIUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::SIUnit >::size_type":

        return _openstudioutilitiesunits.SIUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::SIUnit >::value_type":

        return _openstudioutilitiesunits.SIUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::SIUnit >::difference_type', j: 'std::vector< openstudio::SIUnit >::difference_type') -> "std::vector< openstudio::SIUnit,std::allocator< openstudio::SIUnit > > *":

        return _openstudioutilitiesunits.SIUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.SIUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::SIUnit >::difference_type', j: 'std::vector< openstudio::SIUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.SIUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.SIUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::SIUnit >::value_type const &":

        return _openstudioutilitiesunits.SIUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.SIUnitVector___setitem__(self, *args)



    def append(self, x: 'SIUnit') -> "void":

        return _openstudioutilitiesunits.SIUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.SIUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::SIUnit >::size_type":

        return _openstudioutilitiesunits.SIUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.SIUnitVector_clear(self)



    def swap(self, v: 'SIUnitVector') -> "void":

        return _openstudioutilitiesunits.SIUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::SIUnit >::allocator_type":

        return _openstudioutilitiesunits.SIUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::SIUnit >::iterator":

        return _openstudioutilitiesunits.SIUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::SIUnit >::iterator":

        return _openstudioutilitiesunits.SIUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::SIUnit >::reverse_iterator":

        return _openstudioutilitiesunits.SIUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::SIUnit >::reverse_iterator":

        return _openstudioutilitiesunits.SIUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.SIUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::SIUnit >::iterator":

        return _openstudioutilitiesunits.SIUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_SIUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SIUnit') -> "void":

        return _openstudioutilitiesunits.SIUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::SIUnit >::value_type const &":

        return _openstudioutilitiesunits.SIUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::SIUnit >::value_type const &":

        return _openstudioutilitiesunits.SIUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::SIUnit >::size_type', x: 'SIUnit') -> "void":

        return _openstudioutilitiesunits.SIUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.SIUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.SIUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::SIUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.SIUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::SIUnit >::size_type":

        return _openstudioutilitiesunits.SIUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_SIUnitVector

    __del__ = lambda self: None

SIUnitVector_swigregister = _openstudioutilitiesunits.SIUnitVector_swigregister

SIUnitVector_swigregister(SIUnitVector)



class OptionalSIUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSIUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSIUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalSIUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalSIUnit_reset(self)



    def __ref__(self) -> "openstudio::SIUnit":

        return _openstudioutilitiesunits.OptionalSIUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalSIUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalSIUnit_isNull(self)



    def get(self) -> "openstudio::SIUnit":

        return _openstudioutilitiesunits.OptionalSIUnit_get(self)



    def set(self, t: 'SIUnit') -> "void":

        return _openstudioutilitiesunits.OptionalSIUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalSIUnit

    __del__ = lambda self: None

OptionalSIUnit_swigregister = _openstudioutilitiesunits.OptionalSIUnit_swigregister

OptionalSIUnit_swigregister(OptionalSIUnit)



class IPUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IPUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IPUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.IPUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.IPUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.IPUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::IPUnit >::size_type":

        return _openstudioutilitiesunits.IPUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::IPUnit >::value_type":

        return _openstudioutilitiesunits.IPUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::IPUnit >::difference_type', j: 'std::vector< openstudio::IPUnit >::difference_type') -> "std::vector< openstudio::IPUnit,std::allocator< openstudio::IPUnit > > *":

        return _openstudioutilitiesunits.IPUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.IPUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::IPUnit >::difference_type', j: 'std::vector< openstudio::IPUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.IPUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.IPUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::IPUnit >::value_type const &":

        return _openstudioutilitiesunits.IPUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.IPUnitVector___setitem__(self, *args)



    def append(self, x: 'IPUnit') -> "void":

        return _openstudioutilitiesunits.IPUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.IPUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::IPUnit >::size_type":

        return _openstudioutilitiesunits.IPUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.IPUnitVector_clear(self)



    def swap(self, v: 'IPUnitVector') -> "void":

        return _openstudioutilitiesunits.IPUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::IPUnit >::allocator_type":

        return _openstudioutilitiesunits.IPUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::IPUnit >::iterator":

        return _openstudioutilitiesunits.IPUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::IPUnit >::iterator":

        return _openstudioutilitiesunits.IPUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::IPUnit >::reverse_iterator":

        return _openstudioutilitiesunits.IPUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::IPUnit >::reverse_iterator":

        return _openstudioutilitiesunits.IPUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.IPUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::IPUnit >::iterator":

        return _openstudioutilitiesunits.IPUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_IPUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'IPUnit') -> "void":

        return _openstudioutilitiesunits.IPUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::IPUnit >::value_type const &":

        return _openstudioutilitiesunits.IPUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::IPUnit >::value_type const &":

        return _openstudioutilitiesunits.IPUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::IPUnit >::size_type', x: 'IPUnit') -> "void":

        return _openstudioutilitiesunits.IPUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.IPUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.IPUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::IPUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.IPUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::IPUnit >::size_type":

        return _openstudioutilitiesunits.IPUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_IPUnitVector

    __del__ = lambda self: None

IPUnitVector_swigregister = _openstudioutilitiesunits.IPUnitVector_swigregister

IPUnitVector_swigregister(IPUnitVector)



class OptionalIPUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIPUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIPUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalIPUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalIPUnit_reset(self)



    def __ref__(self) -> "openstudio::IPUnit":

        return _openstudioutilitiesunits.OptionalIPUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalIPUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalIPUnit_isNull(self)



    def get(self) -> "openstudio::IPUnit":

        return _openstudioutilitiesunits.OptionalIPUnit_get(self)



    def set(self, t: 'IPUnit') -> "void":

        return _openstudioutilitiesunits.OptionalIPUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalIPUnit

    __del__ = lambda self: None

OptionalIPUnit_swigregister = _openstudioutilitiesunits.OptionalIPUnit_swigregister

OptionalIPUnit_swigregister(OptionalIPUnit)



class BTUUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BTUUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BTUUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.BTUUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.BTUUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.BTUUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BTUUnit >::size_type":

        return _openstudioutilitiesunits.BTUUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BTUUnit >::value_type":

        return _openstudioutilitiesunits.BTUUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BTUUnit >::difference_type', j: 'std::vector< openstudio::BTUUnit >::difference_type') -> "std::vector< openstudio::BTUUnit,std::allocator< openstudio::BTUUnit > > *":

        return _openstudioutilitiesunits.BTUUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.BTUUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BTUUnit >::difference_type', j: 'std::vector< openstudio::BTUUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.BTUUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.BTUUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BTUUnit >::value_type const &":

        return _openstudioutilitiesunits.BTUUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.BTUUnitVector___setitem__(self, *args)



    def append(self, x: 'BTUUnit') -> "void":

        return _openstudioutilitiesunits.BTUUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.BTUUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::BTUUnit >::size_type":

        return _openstudioutilitiesunits.BTUUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.BTUUnitVector_clear(self)



    def swap(self, v: 'BTUUnitVector') -> "void":

        return _openstudioutilitiesunits.BTUUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BTUUnit >::allocator_type":

        return _openstudioutilitiesunits.BTUUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BTUUnit >::iterator":

        return _openstudioutilitiesunits.BTUUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::BTUUnit >::iterator":

        return _openstudioutilitiesunits.BTUUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BTUUnit >::reverse_iterator":

        return _openstudioutilitiesunits.BTUUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BTUUnit >::reverse_iterator":

        return _openstudioutilitiesunits.BTUUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.BTUUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BTUUnit >::iterator":

        return _openstudioutilitiesunits.BTUUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_BTUUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BTUUnit') -> "void":

        return _openstudioutilitiesunits.BTUUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BTUUnit >::value_type const &":

        return _openstudioutilitiesunits.BTUUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::BTUUnit >::value_type const &":

        return _openstudioutilitiesunits.BTUUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BTUUnit >::size_type', x: 'BTUUnit') -> "void":

        return _openstudioutilitiesunits.BTUUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.BTUUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.BTUUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BTUUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.BTUUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BTUUnit >::size_type":

        return _openstudioutilitiesunits.BTUUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_BTUUnitVector

    __del__ = lambda self: None

BTUUnitVector_swigregister = _openstudioutilitiesunits.BTUUnitVector_swigregister

BTUUnitVector_swigregister(BTUUnitVector)



class OptionalBTUUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBTUUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBTUUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalBTUUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalBTUUnit_reset(self)



    def __ref__(self) -> "openstudio::BTUUnit":

        return _openstudioutilitiesunits.OptionalBTUUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalBTUUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalBTUUnit_isNull(self)



    def get(self) -> "openstudio::BTUUnit":

        return _openstudioutilitiesunits.OptionalBTUUnit_get(self)



    def set(self, t: 'BTUUnit') -> "void":

        return _openstudioutilitiesunits.OptionalBTUUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalBTUUnit

    __del__ = lambda self: None

OptionalBTUUnit_swigregister = _openstudioutilitiesunits.OptionalBTUUnit_swigregister

OptionalBTUUnit_swigregister(OptionalBTUUnit)



class CFMUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CFMUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CFMUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.CFMUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.CFMUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.CFMUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::CFMUnit >::size_type":

        return _openstudioutilitiesunits.CFMUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::CFMUnit >::value_type":

        return _openstudioutilitiesunits.CFMUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::CFMUnit >::difference_type', j: 'std::vector< openstudio::CFMUnit >::difference_type') -> "std::vector< openstudio::CFMUnit,std::allocator< openstudio::CFMUnit > > *":

        return _openstudioutilitiesunits.CFMUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.CFMUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::CFMUnit >::difference_type', j: 'std::vector< openstudio::CFMUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.CFMUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.CFMUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::CFMUnit >::value_type const &":

        return _openstudioutilitiesunits.CFMUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.CFMUnitVector___setitem__(self, *args)



    def append(self, x: 'CFMUnit') -> "void":

        return _openstudioutilitiesunits.CFMUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.CFMUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::CFMUnit >::size_type":

        return _openstudioutilitiesunits.CFMUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.CFMUnitVector_clear(self)



    def swap(self, v: 'CFMUnitVector') -> "void":

        return _openstudioutilitiesunits.CFMUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::CFMUnit >::allocator_type":

        return _openstudioutilitiesunits.CFMUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::CFMUnit >::iterator":

        return _openstudioutilitiesunits.CFMUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::CFMUnit >::iterator":

        return _openstudioutilitiesunits.CFMUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::CFMUnit >::reverse_iterator":

        return _openstudioutilitiesunits.CFMUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::CFMUnit >::reverse_iterator":

        return _openstudioutilitiesunits.CFMUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.CFMUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::CFMUnit >::iterator":

        return _openstudioutilitiesunits.CFMUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_CFMUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CFMUnit') -> "void":

        return _openstudioutilitiesunits.CFMUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::CFMUnit >::value_type const &":

        return _openstudioutilitiesunits.CFMUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::CFMUnit >::value_type const &":

        return _openstudioutilitiesunits.CFMUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::CFMUnit >::size_type', x: 'CFMUnit') -> "void":

        return _openstudioutilitiesunits.CFMUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.CFMUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.CFMUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::CFMUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.CFMUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::CFMUnit >::size_type":

        return _openstudioutilitiesunits.CFMUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_CFMUnitVector

    __del__ = lambda self: None

CFMUnitVector_swigregister = _openstudioutilitiesunits.CFMUnitVector_swigregister

CFMUnitVector_swigregister(CFMUnitVector)



class OptionalCFMUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCFMUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCFMUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalCFMUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalCFMUnit_reset(self)



    def __ref__(self) -> "openstudio::CFMUnit":

        return _openstudioutilitiesunits.OptionalCFMUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalCFMUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalCFMUnit_isNull(self)



    def get(self) -> "openstudio::CFMUnit":

        return _openstudioutilitiesunits.OptionalCFMUnit_get(self)



    def set(self, t: 'CFMUnit') -> "void":

        return _openstudioutilitiesunits.OptionalCFMUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalCFMUnit

    __del__ = lambda self: None

OptionalCFMUnit_swigregister = _openstudioutilitiesunits.OptionalCFMUnit_swigregister

OptionalCFMUnit_swigregister(OptionalCFMUnit)



class GPDUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GPDUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GPDUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.GPDUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.GPDUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.GPDUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::GPDUnit >::size_type":

        return _openstudioutilitiesunits.GPDUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::GPDUnit >::value_type":

        return _openstudioutilitiesunits.GPDUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::GPDUnit >::difference_type', j: 'std::vector< openstudio::GPDUnit >::difference_type') -> "std::vector< openstudio::GPDUnit,std::allocator< openstudio::GPDUnit > > *":

        return _openstudioutilitiesunits.GPDUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.GPDUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::GPDUnit >::difference_type', j: 'std::vector< openstudio::GPDUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.GPDUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.GPDUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::GPDUnit >::value_type const &":

        return _openstudioutilitiesunits.GPDUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.GPDUnitVector___setitem__(self, *args)



    def append(self, x: 'GPDUnit') -> "void":

        return _openstudioutilitiesunits.GPDUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.GPDUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::GPDUnit >::size_type":

        return _openstudioutilitiesunits.GPDUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.GPDUnitVector_clear(self)



    def swap(self, v: 'GPDUnitVector') -> "void":

        return _openstudioutilitiesunits.GPDUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::GPDUnit >::allocator_type":

        return _openstudioutilitiesunits.GPDUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::GPDUnit >::iterator":

        return _openstudioutilitiesunits.GPDUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::GPDUnit >::iterator":

        return _openstudioutilitiesunits.GPDUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::GPDUnit >::reverse_iterator":

        return _openstudioutilitiesunits.GPDUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::GPDUnit >::reverse_iterator":

        return _openstudioutilitiesunits.GPDUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.GPDUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::GPDUnit >::iterator":

        return _openstudioutilitiesunits.GPDUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_GPDUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GPDUnit') -> "void":

        return _openstudioutilitiesunits.GPDUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::GPDUnit >::value_type const &":

        return _openstudioutilitiesunits.GPDUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::GPDUnit >::value_type const &":

        return _openstudioutilitiesunits.GPDUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::GPDUnit >::size_type', x: 'GPDUnit') -> "void":

        return _openstudioutilitiesunits.GPDUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.GPDUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.GPDUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::GPDUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.GPDUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::GPDUnit >::size_type":

        return _openstudioutilitiesunits.GPDUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_GPDUnitVector

    __del__ = lambda self: None

GPDUnitVector_swigregister = _openstudioutilitiesunits.GPDUnitVector_swigregister

GPDUnitVector_swigregister(GPDUnitVector)



class OptionalGPDUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGPDUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGPDUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalGPDUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalGPDUnit_reset(self)



    def __ref__(self) -> "openstudio::GPDUnit":

        return _openstudioutilitiesunits.OptionalGPDUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalGPDUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalGPDUnit_isNull(self)



    def get(self) -> "openstudio::GPDUnit":

        return _openstudioutilitiesunits.OptionalGPDUnit_get(self)



    def set(self, t: 'GPDUnit') -> "void":

        return _openstudioutilitiesunits.OptionalGPDUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalGPDUnit

    __del__ = lambda self: None

OptionalGPDUnit_swigregister = _openstudioutilitiesunits.OptionalGPDUnit_swigregister

OptionalGPDUnit_swigregister(OptionalGPDUnit)



class MPHUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, MPHUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, MPHUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.MPHUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.MPHUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.MPHUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::MPHUnit >::size_type":

        return _openstudioutilitiesunits.MPHUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::MPHUnit >::value_type":

        return _openstudioutilitiesunits.MPHUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::MPHUnit >::difference_type', j: 'std::vector< openstudio::MPHUnit >::difference_type') -> "std::vector< openstudio::MPHUnit,std::allocator< openstudio::MPHUnit > > *":

        return _openstudioutilitiesunits.MPHUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.MPHUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::MPHUnit >::difference_type', j: 'std::vector< openstudio::MPHUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.MPHUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.MPHUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::MPHUnit >::value_type const &":

        return _openstudioutilitiesunits.MPHUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.MPHUnitVector___setitem__(self, *args)



    def append(self, x: 'MPHUnit') -> "void":

        return _openstudioutilitiesunits.MPHUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.MPHUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::MPHUnit >::size_type":

        return _openstudioutilitiesunits.MPHUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.MPHUnitVector_clear(self)



    def swap(self, v: 'MPHUnitVector') -> "void":

        return _openstudioutilitiesunits.MPHUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::MPHUnit >::allocator_type":

        return _openstudioutilitiesunits.MPHUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::MPHUnit >::iterator":

        return _openstudioutilitiesunits.MPHUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::MPHUnit >::iterator":

        return _openstudioutilitiesunits.MPHUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::MPHUnit >::reverse_iterator":

        return _openstudioutilitiesunits.MPHUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::MPHUnit >::reverse_iterator":

        return _openstudioutilitiesunits.MPHUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.MPHUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::MPHUnit >::iterator":

        return _openstudioutilitiesunits.MPHUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_MPHUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'MPHUnit') -> "void":

        return _openstudioutilitiesunits.MPHUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::MPHUnit >::value_type const &":

        return _openstudioutilitiesunits.MPHUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::MPHUnit >::value_type const &":

        return _openstudioutilitiesunits.MPHUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::MPHUnit >::size_type', x: 'MPHUnit') -> "void":

        return _openstudioutilitiesunits.MPHUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.MPHUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.MPHUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::MPHUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.MPHUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::MPHUnit >::size_type":

        return _openstudioutilitiesunits.MPHUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_MPHUnitVector

    __del__ = lambda self: None

MPHUnitVector_swigregister = _openstudioutilitiesunits.MPHUnitVector_swigregister

MPHUnitVector_swigregister(MPHUnitVector)



class OptionalMPHUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMPHUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMPHUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalMPHUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalMPHUnit_reset(self)



    def __ref__(self) -> "openstudio::MPHUnit":

        return _openstudioutilitiesunits.OptionalMPHUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalMPHUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalMPHUnit_isNull(self)



    def get(self) -> "openstudio::MPHUnit":

        return _openstudioutilitiesunits.OptionalMPHUnit_get(self)



    def set(self, t: 'MPHUnit') -> "void":

        return _openstudioutilitiesunits.OptionalMPHUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalMPHUnit

    __del__ = lambda self: None

OptionalMPHUnit_swigregister = _openstudioutilitiesunits.OptionalMPHUnit_swigregister

OptionalMPHUnit_swigregister(OptionalMPHUnit)



class WhUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WhUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WhUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.WhUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.WhUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.WhUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::WhUnit >::size_type":

        return _openstudioutilitiesunits.WhUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::WhUnit >::value_type":

        return _openstudioutilitiesunits.WhUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::WhUnit >::difference_type', j: 'std::vector< openstudio::WhUnit >::difference_type') -> "std::vector< openstudio::WhUnit,std::allocator< openstudio::WhUnit > > *":

        return _openstudioutilitiesunits.WhUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.WhUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::WhUnit >::difference_type', j: 'std::vector< openstudio::WhUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.WhUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.WhUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::WhUnit >::value_type const &":

        return _openstudioutilitiesunits.WhUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.WhUnitVector___setitem__(self, *args)



    def append(self, x: 'WhUnit') -> "void":

        return _openstudioutilitiesunits.WhUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.WhUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::WhUnit >::size_type":

        return _openstudioutilitiesunits.WhUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.WhUnitVector_clear(self)



    def swap(self, v: 'WhUnitVector') -> "void":

        return _openstudioutilitiesunits.WhUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::WhUnit >::allocator_type":

        return _openstudioutilitiesunits.WhUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::WhUnit >::iterator":

        return _openstudioutilitiesunits.WhUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::WhUnit >::iterator":

        return _openstudioutilitiesunits.WhUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::WhUnit >::reverse_iterator":

        return _openstudioutilitiesunits.WhUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::WhUnit >::reverse_iterator":

        return _openstudioutilitiesunits.WhUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.WhUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::WhUnit >::iterator":

        return _openstudioutilitiesunits.WhUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_WhUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WhUnit') -> "void":

        return _openstudioutilitiesunits.WhUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::WhUnit >::value_type const &":

        return _openstudioutilitiesunits.WhUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::WhUnit >::value_type const &":

        return _openstudioutilitiesunits.WhUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::WhUnit >::size_type', x: 'WhUnit') -> "void":

        return _openstudioutilitiesunits.WhUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.WhUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.WhUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::WhUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.WhUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::WhUnit >::size_type":

        return _openstudioutilitiesunits.WhUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_WhUnitVector

    __del__ = lambda self: None

WhUnitVector_swigregister = _openstudioutilitiesunits.WhUnitVector_swigregister

WhUnitVector_swigregister(WhUnitVector)



class OptionalWhUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWhUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWhUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalWhUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalWhUnit_reset(self)



    def __ref__(self) -> "openstudio::WhUnit":

        return _openstudioutilitiesunits.OptionalWhUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalWhUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalWhUnit_isNull(self)



    def get(self) -> "openstudio::WhUnit":

        return _openstudioutilitiesunits.OptionalWhUnit_get(self)



    def set(self, t: 'WhUnit') -> "void":

        return _openstudioutilitiesunits.OptionalWhUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalWhUnit

    __del__ = lambda self: None

OptionalWhUnit_swigregister = _openstudioutilitiesunits.OptionalWhUnit_swigregister

OptionalWhUnit_swigregister(OptionalWhUnit)



class ThermUnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermUnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ThermUnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.ThermUnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.ThermUnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.ThermUnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::ThermUnit >::size_type":

        return _openstudioutilitiesunits.ThermUnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::ThermUnit >::value_type":

        return _openstudioutilitiesunits.ThermUnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::ThermUnit >::difference_type', j: 'std::vector< openstudio::ThermUnit >::difference_type') -> "std::vector< openstudio::ThermUnit,std::allocator< openstudio::ThermUnit > > *":

        return _openstudioutilitiesunits.ThermUnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.ThermUnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::ThermUnit >::difference_type', j: 'std::vector< openstudio::ThermUnit >::difference_type') -> "void":

        return _openstudioutilitiesunits.ThermUnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.ThermUnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::ThermUnit >::value_type const &":

        return _openstudioutilitiesunits.ThermUnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.ThermUnitVector___setitem__(self, *args)



    def append(self, x: 'ThermUnit') -> "void":

        return _openstudioutilitiesunits.ThermUnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.ThermUnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::ThermUnit >::size_type":

        return _openstudioutilitiesunits.ThermUnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.ThermUnitVector_clear(self)



    def swap(self, v: 'ThermUnitVector') -> "void":

        return _openstudioutilitiesunits.ThermUnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::ThermUnit >::allocator_type":

        return _openstudioutilitiesunits.ThermUnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::ThermUnit >::iterator":

        return _openstudioutilitiesunits.ThermUnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::ThermUnit >::iterator":

        return _openstudioutilitiesunits.ThermUnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::ThermUnit >::reverse_iterator":

        return _openstudioutilitiesunits.ThermUnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::ThermUnit >::reverse_iterator":

        return _openstudioutilitiesunits.ThermUnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.ThermUnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::ThermUnit >::iterator":

        return _openstudioutilitiesunits.ThermUnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_ThermUnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ThermUnit') -> "void":

        return _openstudioutilitiesunits.ThermUnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::ThermUnit >::value_type const &":

        return _openstudioutilitiesunits.ThermUnitVector_front(self)



    def back(self) -> "std::vector< openstudio::ThermUnit >::value_type const &":

        return _openstudioutilitiesunits.ThermUnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::ThermUnit >::size_type', x: 'ThermUnit') -> "void":

        return _openstudioutilitiesunits.ThermUnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.ThermUnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.ThermUnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::ThermUnit >::size_type') -> "void":

        return _openstudioutilitiesunits.ThermUnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::ThermUnit >::size_type":

        return _openstudioutilitiesunits.ThermUnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_ThermUnitVector

    __del__ = lambda self: None

ThermUnitVector_swigregister = _openstudioutilitiesunits.ThermUnitVector_swigregister

ThermUnitVector_swigregister(ThermUnitVector)



class OptionalThermUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalThermUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalThermUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalThermUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalThermUnit_reset(self)



    def __ref__(self) -> "openstudio::ThermUnit":

        return _openstudioutilitiesunits.OptionalThermUnit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalThermUnit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalThermUnit_isNull(self)



    def get(self) -> "openstudio::ThermUnit":

        return _openstudioutilitiesunits.OptionalThermUnit_get(self)



    def set(self, t: 'ThermUnit') -> "void":

        return _openstudioutilitiesunits.OptionalThermUnit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalThermUnit

    __del__ = lambda self: None

OptionalThermUnit_swigregister = _openstudioutilitiesunits.OptionalThermUnit_swigregister

OptionalThermUnit_swigregister(OptionalThermUnit)



class Misc1UnitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Misc1UnitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Misc1UnitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.Misc1UnitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.Misc1UnitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.Misc1UnitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::Misc1Unit >::size_type":

        return _openstudioutilitiesunits.Misc1UnitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::Misc1Unit >::value_type":

        return _openstudioutilitiesunits.Misc1UnitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::Misc1Unit >::difference_type', j: 'std::vector< openstudio::Misc1Unit >::difference_type') -> "std::vector< openstudio::Misc1Unit,std::allocator< openstudio::Misc1Unit > > *":

        return _openstudioutilitiesunits.Misc1UnitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::Misc1Unit >::difference_type', j: 'std::vector< openstudio::Misc1Unit >::difference_type') -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::Misc1Unit >::value_type const &":

        return _openstudioutilitiesunits.Misc1UnitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector___setitem__(self, *args)



    def append(self, x: 'Misc1Unit') -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.Misc1UnitVector_empty(self)



    def size(self) -> "std::vector< openstudio::Misc1Unit >::size_type":

        return _openstudioutilitiesunits.Misc1UnitVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector_clear(self)



    def swap(self, v: 'Misc1UnitVector') -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::Misc1Unit >::allocator_type":

        return _openstudioutilitiesunits.Misc1UnitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::Misc1Unit >::iterator":

        return _openstudioutilitiesunits.Misc1UnitVector_begin(self)



    def end(self) -> "std::vector< openstudio::Misc1Unit >::iterator":

        return _openstudioutilitiesunits.Misc1UnitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::Misc1Unit >::reverse_iterator":

        return _openstudioutilitiesunits.Misc1UnitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::Misc1Unit >::reverse_iterator":

        return _openstudioutilitiesunits.Misc1UnitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::Misc1Unit >::iterator":

        return _openstudioutilitiesunits.Misc1UnitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_Misc1UnitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Misc1Unit') -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::Misc1Unit >::value_type const &":

        return _openstudioutilitiesunits.Misc1UnitVector_front(self)



    def back(self) -> "std::vector< openstudio::Misc1Unit >::value_type const &":

        return _openstudioutilitiesunits.Misc1UnitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::Misc1Unit >::size_type', x: 'Misc1Unit') -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::Misc1Unit >::size_type') -> "void":

        return _openstudioutilitiesunits.Misc1UnitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::Misc1Unit >::size_type":

        return _openstudioutilitiesunits.Misc1UnitVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_Misc1UnitVector

    __del__ = lambda self: None

Misc1UnitVector_swigregister = _openstudioutilitiesunits.Misc1UnitVector_swigregister

Misc1UnitVector_swigregister(Misc1UnitVector)



class OptionalMisc1Unit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMisc1Unit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMisc1Unit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalMisc1Unit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalMisc1Unit_reset(self)



    def __ref__(self) -> "openstudio::Misc1Unit":

        return _openstudioutilitiesunits.OptionalMisc1Unit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalMisc1Unit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalMisc1Unit_isNull(self)



    def get(self) -> "openstudio::Misc1Unit":

        return _openstudioutilitiesunits.OptionalMisc1Unit_get(self)



    def set(self, t: 'Misc1Unit') -> "void":

        return _openstudioutilitiesunits.OptionalMisc1Unit_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalMisc1Unit

    __del__ = lambda self: None

OptionalMisc1Unit_swigregister = _openstudioutilitiesunits.OptionalMisc1Unit_swigregister

OptionalMisc1Unit_swigregister(OptionalMisc1Unit)



class UnitSystem(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitSystem, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, UnitSystem, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_UnitSystem(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiesunits.UnitSystem_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiesunits.UnitSystem_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiesunits.UnitSystem_valueDescription(self)



    def __eq__(self, other: 'UnitSystem') -> "bool":

        return _openstudioutilitiesunits.UnitSystem___eq__(self, other)



    def __ne__(self, other: 'UnitSystem') -> "bool":

        return _openstudioutilitiesunits.UnitSystem___ne__(self, other)



    def __gt__(self, other: 'UnitSystem') -> "bool":

        return _openstudioutilitiesunits.UnitSystem___gt__(self, other)



    def __ge__(self, other: 'UnitSystem') -> "bool":

        return _openstudioutilitiesunits.UnitSystem___ge__(self, other)



    def __lt__(self, other: 'UnitSystem') -> "bool":

        return _openstudioutilitiesunits.UnitSystem___lt__(self, other)



    def __le__(self, other: 'UnitSystem') -> "bool":

        return _openstudioutilitiesunits.UnitSystem___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesunits.UnitSystem_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiesunits.UnitSystem_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesunits.UnitSystem_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiesunits.UnitSystem_getValues)

    __swig_destroy__ = _openstudioutilitiesunits.delete_UnitSystem

    __del__ = lambda self: None

UnitSystem_swigregister = _openstudioutilitiesunits.UnitSystem_swigregister

UnitSystem_swigregister(UnitSystem)



def UnitSystem_enumName() -> "std::string":

    return _openstudioutilitiesunits.UnitSystem_enumName()

UnitSystem_enumName = _openstudioutilitiesunits.UnitSystem_enumName



def UnitSystem_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiesunits.UnitSystem_getValues()

UnitSystem_getValues = _openstudioutilitiesunits.UnitSystem_getValues



class ZUnit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZUnit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ZUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_ZUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_ZUnit

    __del__ = lambda self: None



    def clone(self) -> "openstudio::Unit":

        return _openstudioutilitiesunits.ZUnit_clone(self)



    def cloneToMixed(self) -> "openstudio::Unit":

        return _openstudioutilitiesunits.ZUnit_cloneToMixed(self)



    def baseUnits(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesunits.ZUnit_baseUnits(self)



    def isBaseUnit(self, baseUnit: 'std::string const &') -> "bool":

        return _openstudioutilitiesunits.ZUnit_isBaseUnit(self, baseUnit)



    def baseUnitExponent(self, baseUnit: 'std::string const &') -> "int":

        return _openstudioutilitiesunits.ZUnit_baseUnitExponent(self, baseUnit)



    def setBaseUnitExponent(self, baseUnit: 'std::string const &', exponent: 'int') -> "void":

        return _openstudioutilitiesunits.ZUnit_setBaseUnitExponent(self, baseUnit, exponent)



    def scale(self) -> "openstudio::Scale":

        return _openstudioutilitiesunits.ZUnit_scale(self)



    def setScale(self, *args) -> "bool":

        return _openstudioutilitiesunits.ZUnit_setScale(self, *args)



    def standardString(self, withScale: 'bool'=True) -> "std::string":

        return _openstudioutilitiesunits.ZUnit_standardString(self, withScale)



    def prettyString(self, withScale: 'bool'=True) -> "std::string":

        return _openstudioutilitiesunits.ZUnit_prettyString(self, withScale)



    def setPrettyString(self, str: 'std::string const &') -> "void":

        return _openstudioutilitiesunits.ZUnit_setPrettyString(self, str)



    def _print(self, withScale: 'bool'=True) -> "std::string":

        return _openstudioutilitiesunits.ZUnit__print(self, withScale)



    def system(self) -> "openstudio::UnitSystem":

        return _openstudioutilitiesunits.ZUnit_system(self)



    def __eq__(self, rUnit: 'ZUnit') -> "bool":

        return _openstudioutilitiesunits.ZUnit___eq__(self, rUnit)



    def __imul__(self, rUnit: 'ZUnit') -> "openstudio::Unit &":

        return _openstudioutilitiesunits.ZUnit___imul__(self, rUnit)



    def __idiv__(self, rUnit: 'ZUnit') -> "openstudio::Unit &":

        return _openstudioutilitiesunits.ZUnit___idiv__(self, rUnit)



    def pow(self, expNum: 'int', expDenom: 'int'=1, okToCallFactory: 'bool'=True) -> "openstudio::Unit &":

        return _openstudioutilitiesunits.ZUnit_pow(self, expNum, expDenom, okToCallFactory)



    def to_Unit(self) -> "boost::optional< openstudio::Unit >":

        return _openstudioutilitiesunits.ZUnit_to_Unit(self)



    def to_TemperatureUnit(self) -> "boost::optional< openstudio::TemperatureUnit >":

        return _openstudioutilitiesunits.ZUnit_to_TemperatureUnit(self)



    def to_CelsiusUnit(self) -> "boost::optional< openstudio::CelsiusUnit >":

        return _openstudioutilitiesunits.ZUnit_to_CelsiusUnit(self)



    def to_FahrenheitUnit(self) -> "boost::optional< openstudio::FahrenheitUnit >":

        return _openstudioutilitiesunits.ZUnit_to_FahrenheitUnit(self)



    def to_SIUnit(self) -> "boost::optional< openstudio::SIUnit >":

        return _openstudioutilitiesunits.ZUnit_to_SIUnit(self)



    def to_IPUnit(self) -> "boost::optional< openstudio::IPUnit >":

        return _openstudioutilitiesunits.ZUnit_to_IPUnit(self)



    def to_BTUUnit(self) -> "boost::optional< openstudio::BTUUnit >":

        return _openstudioutilitiesunits.ZUnit_to_BTUUnit(self)



    def to_CFMUnit(self) -> "boost::optional< openstudio::CFMUnit >":

        return _openstudioutilitiesunits.ZUnit_to_CFMUnit(self)



    def to_GPDUnit(self) -> "boost::optional< openstudio::GPDUnit >":

        return _openstudioutilitiesunits.ZUnit_to_GPDUnit(self)



    def to_MPHUnit(self) -> "boost::optional< openstudio::MPHUnit >":

        return _openstudioutilitiesunits.ZUnit_to_MPHUnit(self)



    def to_WhUnit(self) -> "boost::optional< openstudio::WhUnit >":

        return _openstudioutilitiesunits.ZUnit_to_WhUnit(self)



    def to_ThermUnit(self) -> "boost::optional< openstudio::ThermUnit >":

        return _openstudioutilitiesunits.ZUnit_to_ThermUnit(self)



    def to_Misc1Unit(self) -> "boost::optional< openstudio::Misc1Unit >":

        return _openstudioutilitiesunits.ZUnit_to_Misc1Unit(self)



    def __str__(self) -> "std::string":

        return _openstudioutilitiesunits.ZUnit___str__(self)



    def __mul__(self, rUnit: 'ZUnit') -> "openstudio::Unit":

        return _openstudioutilitiesunits.ZUnit___mul__(self, rUnit)



    def __div__(self, rUnit: 'ZUnit') -> "openstudio::Unit":

        return _openstudioutilitiesunits.ZUnit___div__(self, rUnit)

ZUnit_swigregister = _openstudioutilitiesunits.ZUnit_swigregister

ZUnit_swigregister(ZUnit)





def parseUnitString(unitString: 'std::string const &') -> "openstudio::Unit":

    return _openstudioutilitiesunits.parseUnitString(unitString)

parseUnitString = _openstudioutilitiesunits.parseUnitString

class TemperatureUnit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, TemperatureUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, TemperatureUnit, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiesunits.delete_TemperatureUnit

    __del__ = lambda self: None



    def isAbsolute(self) -> "bool":

        return _openstudioutilitiesunits.TemperatureUnit_isAbsolute(self)



    def setAsAbsolute(self) -> "void":

        return _openstudioutilitiesunits.TemperatureUnit_setAsAbsolute(self)



    def setAsRelative(self) -> "void":

        return _openstudioutilitiesunits.TemperatureUnit_setAsRelative(self)

TemperatureUnit_swigregister = _openstudioutilitiesunits.TemperatureUnit_swigregister

TemperatureUnit_swigregister(TemperatureUnit)



class CelsiusUnit(TemperatureUnit):

    __swig_setmethods__ = {}

    for _s in [TemperatureUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CelsiusUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [TemperatureUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CelsiusUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_CelsiusUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_CelsiusUnit

    __del__ = lambda self: None

CelsiusUnit_swigregister = _openstudioutilitiesunits.CelsiusUnit_swigregister

CelsiusUnit_swigregister(CelsiusUnit)





def createCelsiusTemperature() -> "openstudio::CelsiusUnit":

    return _openstudioutilitiesunits.createCelsiusTemperature()

createCelsiusTemperature = _openstudioutilitiesunits.createCelsiusTemperature

class FahrenheitUnit(TemperatureUnit):

    __swig_setmethods__ = {}

    for _s in [TemperatureUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, FahrenheitUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [TemperatureUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, FahrenheitUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_FahrenheitUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_FahrenheitUnit

    __del__ = lambda self: None



    def __idiv__(self, rUnit: 'FahrenheitUnit') -> "openstudio::FahrenheitUnit &":

        return _openstudioutilitiesunits.FahrenheitUnit___idiv__(self, rUnit)

FahrenheitUnit_swigregister = _openstudioutilitiesunits.FahrenheitUnit_swigregister

FahrenheitUnit_swigregister(FahrenheitUnit)





def createFahrenheitTemperature() -> "openstudio::FahrenheitUnit":

    return _openstudioutilitiesunits.createFahrenheitTemperature()

createFahrenheitTemperature = _openstudioutilitiesunits.createFahrenheitTemperature

class SIExpnt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SIExpnt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SIExpnt, name)

    __repr__ = _swig_repr



    def __init__(self, kg: 'int'=0, m: 'int'=0, s: 'int'=0, K: 'int'=0, A: 'int'=0, cd: 'int'=0, mol: 'int'=0, rad: 'int'=0, sr: 'int'=0, people: 'int'=0, cycle: 'int'=0, dollar: 'int'=0):

        this = _openstudioutilitiesunits.new_SIExpnt(kg, m, s, K, A, cd, mol, rad, sr, people, cycle, dollar)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_SIExpnt

    __del__ = lambda self: None

SIExpnt_swigregister = _openstudioutilitiesunits.SIExpnt_swigregister

SIExpnt_swigregister(SIExpnt)



class SIUnit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SIUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SIUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_SIUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_SIUnit

    __del__ = lambda self: None

SIUnit_swigregister = _openstudioutilitiesunits.SIUnit_swigregister

SIUnit_swigregister(SIUnit)





def createSIMass() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIMass()

createSIMass = _openstudioutilitiesunits.createSIMass



def createSILength() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSILength()

createSILength = _openstudioutilitiesunits.createSILength



def createSITime() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSITime()

createSITime = _openstudioutilitiesunits.createSITime



def createSITemperature() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSITemperature()

createSITemperature = _openstudioutilitiesunits.createSITemperature



def createSIElectricCurrent() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIElectricCurrent()

createSIElectricCurrent = _openstudioutilitiesunits.createSIElectricCurrent



def createSILuminousIntensity() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSILuminousIntensity()

createSILuminousIntensity = _openstudioutilitiesunits.createSILuminousIntensity



def createSIAmountOfSubstance() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIAmountOfSubstance()

createSIAmountOfSubstance = _openstudioutilitiesunits.createSIAmountOfSubstance



def createSIAngle() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIAngle()

createSIAngle = _openstudioutilitiesunits.createSIAngle



def createSISolidAngle() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSISolidAngle()

createSISolidAngle = _openstudioutilitiesunits.createSISolidAngle



def createSIPeople() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIPeople()

createSIPeople = _openstudioutilitiesunits.createSIPeople



def createSICycle() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSICycle()

createSICycle = _openstudioutilitiesunits.createSICycle



def createSICurrency() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSICurrency()

createSICurrency = _openstudioutilitiesunits.createSICurrency



def createSIForce() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIForce()

createSIForce = _openstudioutilitiesunits.createSIForce



def createSIEnergy() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIEnergy()

createSIEnergy = _openstudioutilitiesunits.createSIEnergy



def createSIPower() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIPower()

createSIPower = _openstudioutilitiesunits.createSIPower



def createSIElectricCharge() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIElectricCharge()

createSIElectricCharge = _openstudioutilitiesunits.createSIElectricCharge



def createSIElectricalPotential() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIElectricalPotential()

createSIElectricalPotential = _openstudioutilitiesunits.createSIElectricalPotential



def createSIElectricCapacitance() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIElectricCapacitance()

createSIElectricCapacitance = _openstudioutilitiesunits.createSIElectricCapacitance



def createSIElectricResistance() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIElectricResistance()

createSIElectricResistance = _openstudioutilitiesunits.createSIElectricResistance



def createSIMagneticFlux() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIMagneticFlux()

createSIMagneticFlux = _openstudioutilitiesunits.createSIMagneticFlux



def createSIMagneticFieldStrength() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIMagneticFieldStrength()

createSIMagneticFieldStrength = _openstudioutilitiesunits.createSIMagneticFieldStrength



def createSIInductance() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIInductance()

createSIInductance = _openstudioutilitiesunits.createSIInductance



def createSILuminousFlux() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSILuminousFlux()

createSILuminousFlux = _openstudioutilitiesunits.createSILuminousFlux



def createSIIlluminance() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIIlluminance()

createSIIlluminance = _openstudioutilitiesunits.createSIIlluminance



def createSIFrequency() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIFrequency()

createSIFrequency = _openstudioutilitiesunits.createSIFrequency



def createSIEnergyUseIntensity() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIEnergyUseIntensity()

createSIEnergyUseIntensity = _openstudioutilitiesunits.createSIEnergyUseIntensity



def createSIPowerDensity() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIPowerDensity()

createSIPowerDensity = _openstudioutilitiesunits.createSIPowerDensity



def createSIPowerPerPerson() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIPowerPerPerson()

createSIPowerPerPerson = _openstudioutilitiesunits.createSIPowerPerPerson



def createSIPressure() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIPressure()

createSIPressure = _openstudioutilitiesunits.createSIPressure



def createSIThermalConductance() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIThermalConductance()

createSIThermalConductance = _openstudioutilitiesunits.createSIThermalConductance



def createSIThermalResistance() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIThermalResistance()

createSIThermalResistance = _openstudioutilitiesunits.createSIThermalResistance



def createSIHeatCapacity() -> "openstudio::SIUnit":

    return _openstudioutilitiesunits.createSIHeatCapacity()

createSIHeatCapacity = _openstudioutilitiesunits.createSIHeatCapacity

class IPExpnt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IPExpnt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IPExpnt, name)

    __repr__ = _swig_repr



    def __init__(self, lbm: 'int'=0, ft: 'int'=0, s: 'int'=0, R: 'int'=0, A: 'int'=0, cd: 'int'=0, lbmol: 'int'=0, lbf: 'int'=0, deg: 'int'=0, sr: 'int'=0, people: 'int'=0, cycle: 'int'=0, dollar: 'int'=0):

        this = _openstudioutilitiesunits.new_IPExpnt(lbm, ft, s, R, A, cd, lbmol, lbf, deg, sr, people, cycle, dollar)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_IPExpnt

    __del__ = lambda self: None

IPExpnt_swigregister = _openstudioutilitiesunits.IPExpnt_swigregister

IPExpnt_swigregister(IPExpnt)



class IPUnit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, IPUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, IPUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_IPUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_IPUnit

    __del__ = lambda self: None

    __swig_getmethods__["gc"] = lambda x: _openstudioutilitiesunits.IPUnit_gc

    if _newclass:

        gc = staticmethod(_openstudioutilitiesunits.IPUnit_gc)



    def lbmToLbf(self) -> "void":

        return _openstudioutilitiesunits.IPUnit_lbmToLbf(self)



    def lbfToLbm(self) -> "void":

        return _openstudioutilitiesunits.IPUnit_lbfToLbm(self)

IPUnit_swigregister = _openstudioutilitiesunits.IPUnit_swigregister

IPUnit_swigregister(IPUnit)



def IPUnit_gc() -> "double":

    return _openstudioutilitiesunits.IPUnit_gc()

IPUnit_gc = _openstudioutilitiesunits.IPUnit_gc





def createIPMass() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPMass()

createIPMass = _openstudioutilitiesunits.createIPMass



def createIPLength() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPLength()

createIPLength = _openstudioutilitiesunits.createIPLength



def createIPTime() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPTime()

createIPTime = _openstudioutilitiesunits.createIPTime



def createIPTemperature() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPTemperature()

createIPTemperature = _openstudioutilitiesunits.createIPTemperature



def createIPElectricCurrent() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPElectricCurrent()

createIPElectricCurrent = _openstudioutilitiesunits.createIPElectricCurrent



def createIPLuminousIntensity() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPLuminousIntensity()

createIPLuminousIntensity = _openstudioutilitiesunits.createIPLuminousIntensity



def createIPAmountOfSubstance() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPAmountOfSubstance()

createIPAmountOfSubstance = _openstudioutilitiesunits.createIPAmountOfSubstance



def createIPAngle() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPAngle()

createIPAngle = _openstudioutilitiesunits.createIPAngle



def createIPSolidAngle() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPSolidAngle()

createIPSolidAngle = _openstudioutilitiesunits.createIPSolidAngle



def createIPPeople() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPPeople()

createIPPeople = _openstudioutilitiesunits.createIPPeople



def createIPCycle() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPCycle()

createIPCycle = _openstudioutilitiesunits.createIPCycle



def createIPCurrency() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPCurrency()

createIPCurrency = _openstudioutilitiesunits.createIPCurrency



def createIPForce() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPForce()

createIPForce = _openstudioutilitiesunits.createIPForce



def createIPEnergy() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPEnergy()

createIPEnergy = _openstudioutilitiesunits.createIPEnergy



def createIPPower() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPPower()

createIPPower = _openstudioutilitiesunits.createIPPower



def createIPElectricCharge() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPElectricCharge()

createIPElectricCharge = _openstudioutilitiesunits.createIPElectricCharge



def createIPLuminousFlux() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPLuminousFlux()

createIPLuminousFlux = _openstudioutilitiesunits.createIPLuminousFlux



def createIPIlluminance() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPIlluminance()

createIPIlluminance = _openstudioutilitiesunits.createIPIlluminance



def createIPFrequency() -> "openstudio::IPUnit":

    return _openstudioutilitiesunits.createIPFrequency()

createIPFrequency = _openstudioutilitiesunits.createIPFrequency

class BTUExpnt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BTUExpnt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BTUExpnt, name)

    __repr__ = _swig_repr



    def __init__(self, btu: 'int'=0, ft: 'int'=0, h: 'int'=0, R: 'int'=0, A: 'int'=0, cd: 'int'=0, lbmol: 'int'=0, deg: 'int'=0, sr: 'int'=0, people: 'int'=0, cycle: 'int'=0, dollar: 'int'=0):

        this = _openstudioutilitiesunits.new_BTUExpnt(btu, ft, h, R, A, cd, lbmol, deg, sr, people, cycle, dollar)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_BTUExpnt

    __del__ = lambda self: None

BTUExpnt_swigregister = _openstudioutilitiesunits.BTUExpnt_swigregister

BTUExpnt_swigregister(BTUExpnt)



class BTUUnit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, BTUUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, BTUUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_BTUUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_BTUUnit

    __del__ = lambda self: None

BTUUnit_swigregister = _openstudioutilitiesunits.BTUUnit_swigregister

BTUUnit_swigregister(BTUUnit)





def createBTUEnergy() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUEnergy()

createBTUEnergy = _openstudioutilitiesunits.createBTUEnergy



def createBTULength() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTULength()

createBTULength = _openstudioutilitiesunits.createBTULength



def createBTUTime() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUTime()

createBTUTime = _openstudioutilitiesunits.createBTUTime



def createBTUTemperature() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUTemperature()

createBTUTemperature = _openstudioutilitiesunits.createBTUTemperature



def createBTUElectricCurrent() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUElectricCurrent()

createBTUElectricCurrent = _openstudioutilitiesunits.createBTUElectricCurrent



def createBTULuminousIntensity() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTULuminousIntensity()

createBTULuminousIntensity = _openstudioutilitiesunits.createBTULuminousIntensity



def createBTUAmountOfSubstance() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUAmountOfSubstance()

createBTUAmountOfSubstance = _openstudioutilitiesunits.createBTUAmountOfSubstance



def createBTUAngle() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUAngle()

createBTUAngle = _openstudioutilitiesunits.createBTUAngle



def createBTUSolidAngle() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUSolidAngle()

createBTUSolidAngle = _openstudioutilitiesunits.createBTUSolidAngle



def createBTUPeople() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUPeople()

createBTUPeople = _openstudioutilitiesunits.createBTUPeople



def createBTUCycle() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUCycle()

createBTUCycle = _openstudioutilitiesunits.createBTUCycle



def createBTUCurrency() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUCurrency()

createBTUCurrency = _openstudioutilitiesunits.createBTUCurrency



def createBTUPower() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUPower()

createBTUPower = _openstudioutilitiesunits.createBTUPower



def createBTULuminousFlux() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTULuminousFlux()

createBTULuminousFlux = _openstudioutilitiesunits.createBTULuminousFlux



def createBTUIlluminance() -> "openstudio::BTUUnit":

    return _openstudioutilitiesunits.createBTUIlluminance()

createBTUIlluminance = _openstudioutilitiesunits.createBTUIlluminance

class CFMExpnt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CFMExpnt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CFMExpnt, name)

    __repr__ = _swig_repr



    def __init__(self, ft: 'int'=0, min: 'int'=0, ton: 'int'=0, R: 'int'=0, A: 'int'=0, cd: 'int'=0, lbmol: 'int'=0, deg: 'int'=0, sr: 'int'=0, people: 'int'=0, cycle: 'int'=0, dollar: 'int'=0):

        this = _openstudioutilitiesunits.new_CFMExpnt(ft, min, ton, R, A, cd, lbmol, deg, sr, people, cycle, dollar)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_CFMExpnt

    __del__ = lambda self: None

CFMExpnt_swigregister = _openstudioutilitiesunits.CFMExpnt_swigregister

CFMExpnt_swigregister(CFMExpnt)



class CFMUnit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CFMUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CFMUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_CFMUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_CFMUnit

    __del__ = lambda self: None

CFMUnit_swigregister = _openstudioutilitiesunits.CFMUnit_swigregister

CFMUnit_swigregister(CFMUnit)





def createCFMLength() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMLength()

createCFMLength = _openstudioutilitiesunits.createCFMLength



def createCFMTime() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMTime()

createCFMTime = _openstudioutilitiesunits.createCFMTime



def createCFMPower() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMPower()

createCFMPower = _openstudioutilitiesunits.createCFMPower



def createCFMTemperature() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMTemperature()

createCFMTemperature = _openstudioutilitiesunits.createCFMTemperature



def createCFMElectricCurrent() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMElectricCurrent()

createCFMElectricCurrent = _openstudioutilitiesunits.createCFMElectricCurrent



def createCFMLuminousIntensity() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMLuminousIntensity()

createCFMLuminousIntensity = _openstudioutilitiesunits.createCFMLuminousIntensity



def createCFMAmountOfSubstance() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMAmountOfSubstance()

createCFMAmountOfSubstance = _openstudioutilitiesunits.createCFMAmountOfSubstance



def createCFMAngle() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMAngle()

createCFMAngle = _openstudioutilitiesunits.createCFMAngle



def createCFMSolidAngle() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMSolidAngle()

createCFMSolidAngle = _openstudioutilitiesunits.createCFMSolidAngle



def createCFMPeople() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMPeople()

createCFMPeople = _openstudioutilitiesunits.createCFMPeople



def createCFMCycle() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMCycle()

createCFMCycle = _openstudioutilitiesunits.createCFMCycle



def createCFMCurrency() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMCurrency()

createCFMCurrency = _openstudioutilitiesunits.createCFMCurrency



def createCFMVolumetricFlowrate() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMVolumetricFlowrate()

createCFMVolumetricFlowrate = _openstudioutilitiesunits.createCFMVolumetricFlowrate



def createCFMLuminousFlux() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMLuminousFlux()

createCFMLuminousFlux = _openstudioutilitiesunits.createCFMLuminousFlux



def createCFMIlluminance() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMIlluminance()

createCFMIlluminance = _openstudioutilitiesunits.createCFMIlluminance



def createCFMFrequency() -> "openstudio::CFMUnit":

    return _openstudioutilitiesunits.createCFMFrequency()

createCFMFrequency = _openstudioutilitiesunits.createCFMFrequency

class GPDExpnt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GPDExpnt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GPDExpnt, name)

    __repr__ = _swig_repr



    def __init__(self, inH2O: 'int'=0, gal: 'int'=0, day: 'int'=0, R: 'int'=0, A: 'int'=0, cd: 'int'=0, lbmol: 'int'=0, deg: 'int'=0, sr: 'int'=0, people: 'int'=0, cycle: 'int'=0, dollar: 'int'=0):

        this = _openstudioutilitiesunits.new_GPDExpnt(inH2O, gal, day, R, A, cd, lbmol, deg, sr, people, cycle, dollar)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_GPDExpnt

    __del__ = lambda self: None

GPDExpnt_swigregister = _openstudioutilitiesunits.GPDExpnt_swigregister

GPDExpnt_swigregister(GPDExpnt)



class GPDUnit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GPDUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GPDUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_GPDUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_GPDUnit

    __del__ = lambda self: None

GPDUnit_swigregister = _openstudioutilitiesunits.GPDUnit_swigregister

GPDUnit_swigregister(GPDUnit)





def createGPDPressure() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDPressure()

createGPDPressure = _openstudioutilitiesunits.createGPDPressure



def createGPDLength() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDLength()

createGPDLength = _openstudioutilitiesunits.createGPDLength



def createGPDTime() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDTime()

createGPDTime = _openstudioutilitiesunits.createGPDTime



def createGPDTemperature() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDTemperature()

createGPDTemperature = _openstudioutilitiesunits.createGPDTemperature



def createGPDElectricCurrent() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDElectricCurrent()

createGPDElectricCurrent = _openstudioutilitiesunits.createGPDElectricCurrent



def createGPDLuminousIntensity() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDLuminousIntensity()

createGPDLuminousIntensity = _openstudioutilitiesunits.createGPDLuminousIntensity



def createGPDAmountOfSubstance() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDAmountOfSubstance()

createGPDAmountOfSubstance = _openstudioutilitiesunits.createGPDAmountOfSubstance



def createGPDAngle() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDAngle()

createGPDAngle = _openstudioutilitiesunits.createGPDAngle



def createGPDSolidAngle() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDSolidAngle()

createGPDSolidAngle = _openstudioutilitiesunits.createGPDSolidAngle



def createGPDPeople() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDPeople()

createGPDPeople = _openstudioutilitiesunits.createGPDPeople



def createGPDCycle() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDCycle()

createGPDCycle = _openstudioutilitiesunits.createGPDCycle



def createGPDCurrency() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDCurrency()

createGPDCurrency = _openstudioutilitiesunits.createGPDCurrency



def createGPDVolume() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDVolume()

createGPDVolume = _openstudioutilitiesunits.createGPDVolume



def createGPDVolumetricFlowrate() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDVolumetricFlowrate()

createGPDVolumetricFlowrate = _openstudioutilitiesunits.createGPDVolumetricFlowrate



def createGPDLuminousFlux() -> "openstudio::GPDUnit":

    return _openstudioutilitiesunits.createGPDLuminousFlux()

createGPDLuminousFlux = _openstudioutilitiesunits.createGPDLuminousFlux

class MPHExpnt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, MPHExpnt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, MPHExpnt, name)

    __repr__ = _swig_repr



    def __init__(self, inHg: 'int'=0, mi: 'int'=0, h: 'int'=0, R: 'int'=0, A: 'int'=0, cd: 'int'=0, lbmol: 'int'=0, deg: 'int'=0, sr: 'int'=0, people: 'int'=0, cycle: 'int'=0, dollar: 'int'=0):

        this = _openstudioutilitiesunits.new_MPHExpnt(inHg, mi, h, R, A, cd, lbmol, deg, sr, people, cycle, dollar)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_MPHExpnt

    __del__ = lambda self: None

MPHExpnt_swigregister = _openstudioutilitiesunits.MPHExpnt_swigregister

MPHExpnt_swigregister(MPHExpnt)



class MPHUnit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, MPHUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, MPHUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_MPHUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_MPHUnit

    __del__ = lambda self: None

MPHUnit_swigregister = _openstudioutilitiesunits.MPHUnit_swigregister

MPHUnit_swigregister(MPHUnit)





def createMPHPressure() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHPressure()

createMPHPressure = _openstudioutilitiesunits.createMPHPressure



def createMPHLength() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHLength()

createMPHLength = _openstudioutilitiesunits.createMPHLength



def createMPHTime() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHTime()

createMPHTime = _openstudioutilitiesunits.createMPHTime



def createMPHTemperature() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHTemperature()

createMPHTemperature = _openstudioutilitiesunits.createMPHTemperature



def createMPHElectricCurrent() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHElectricCurrent()

createMPHElectricCurrent = _openstudioutilitiesunits.createMPHElectricCurrent



def createMPHLuminousIntensity() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHLuminousIntensity()

createMPHLuminousIntensity = _openstudioutilitiesunits.createMPHLuminousIntensity



def createMPHAmountOfSubstance() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHAmountOfSubstance()

createMPHAmountOfSubstance = _openstudioutilitiesunits.createMPHAmountOfSubstance



def createMPHAngle() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHAngle()

createMPHAngle = _openstudioutilitiesunits.createMPHAngle



def createMPHSolidAngle() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHSolidAngle()

createMPHSolidAngle = _openstudioutilitiesunits.createMPHSolidAngle



def createMPHPeople() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHPeople()

createMPHPeople = _openstudioutilitiesunits.createMPHPeople



def createMPHCycle() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHCycle()

createMPHCycle = _openstudioutilitiesunits.createMPHCycle



def createMPHCurrency() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHCurrency()

createMPHCurrency = _openstudioutilitiesunits.createMPHCurrency



def createMPHVelocity() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHVelocity()

createMPHVelocity = _openstudioutilitiesunits.createMPHVelocity



def createMPHLuminousFlux() -> "openstudio::MPHUnit":

    return _openstudioutilitiesunits.createMPHLuminousFlux()

createMPHLuminousFlux = _openstudioutilitiesunits.createMPHLuminousFlux

class WhExpnt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WhExpnt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WhExpnt, name)

    __repr__ = _swig_repr



    def __init__(self, W: 'int'=0, h: 'int'=0, m: 'int'=0, K: 'int'=0, A: 'int'=0, cd: 'int'=0, mol: 'int'=0, rad: 'int'=0, sr: 'int'=0, people: 'int'=0, cycle: 'int'=0, dollar: 'int'=0):

        this = _openstudioutilitiesunits.new_WhExpnt(W, h, m, K, A, cd, mol, rad, sr, people, cycle, dollar)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_WhExpnt

    __del__ = lambda self: None

WhExpnt_swigregister = _openstudioutilitiesunits.WhExpnt_swigregister

WhExpnt_swigregister(WhExpnt)



class WhUnit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WhUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WhUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_WhUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_WhUnit

    __del__ = lambda self: None

WhUnit_swigregister = _openstudioutilitiesunits.WhUnit_swigregister

WhUnit_swigregister(WhUnit)





def createWhPower() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhPower()

createWhPower = _openstudioutilitiesunits.createWhPower



def createWhTime() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhTime()

createWhTime = _openstudioutilitiesunits.createWhTime



def createWhLength() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhLength()

createWhLength = _openstudioutilitiesunits.createWhLength



def createWhTemperature() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhTemperature()

createWhTemperature = _openstudioutilitiesunits.createWhTemperature



def createWhElectricCurrent() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhElectricCurrent()

createWhElectricCurrent = _openstudioutilitiesunits.createWhElectricCurrent



def createWhLuminousIntensity() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhLuminousIntensity()

createWhLuminousIntensity = _openstudioutilitiesunits.createWhLuminousIntensity



def createWhAmountOfSubstance() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhAmountOfSubstance()

createWhAmountOfSubstance = _openstudioutilitiesunits.createWhAmountOfSubstance



def createWhAngle() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhAngle()

createWhAngle = _openstudioutilitiesunits.createWhAngle



def createWhSolidAngle() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhSolidAngle()

createWhSolidAngle = _openstudioutilitiesunits.createWhSolidAngle



def createWhPeople() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhPeople()

createWhPeople = _openstudioutilitiesunits.createWhPeople



def createWhCycle() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhCycle()

createWhCycle = _openstudioutilitiesunits.createWhCycle



def createWhCurrency() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhCurrency()

createWhCurrency = _openstudioutilitiesunits.createWhCurrency



def createWhEnergy() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhEnergy()

createWhEnergy = _openstudioutilitiesunits.createWhEnergy



def createWhElectricalPotential() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhElectricalPotential()

createWhElectricalPotential = _openstudioutilitiesunits.createWhElectricalPotential



def createWhElectricResistance() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhElectricResistance()

createWhElectricResistance = _openstudioutilitiesunits.createWhElectricResistance



def createWhLuminousFlux() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhLuminousFlux()

createWhLuminousFlux = _openstudioutilitiesunits.createWhLuminousFlux



def createWhIlluminance() -> "openstudio::WhUnit":

    return _openstudioutilitiesunits.createWhIlluminance()

createWhIlluminance = _openstudioutilitiesunits.createWhIlluminance

class ThermExpnt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermExpnt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ThermExpnt, name)

    __repr__ = _swig_repr



    def __init__(self, therm: 'int'=0, t_in: 'int'=0, yr: 'int'=0, R: 'int'=0, A: 'int'=0, cd: 'int'=0, lbmol: 'int'=0, deg: 'int'=0, sr: 'int'=0, people: 'int'=0, cycle: 'int'=0, dollar: 'int'=0):

        this = _openstudioutilitiesunits.new_ThermExpnt(therm, t_in, yr, R, A, cd, lbmol, deg, sr, people, cycle, dollar)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_ThermExpnt

    __del__ = lambda self: None

ThermExpnt_swigregister = _openstudioutilitiesunits.ThermExpnt_swigregister

ThermExpnt_swigregister(ThermExpnt)



class ThermUnit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermUnit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ThermUnit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_ThermUnit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_ThermUnit

    __del__ = lambda self: None

ThermUnit_swigregister = _openstudioutilitiesunits.ThermUnit_swigregister

ThermUnit_swigregister(ThermUnit)





def createThermEnergy() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermEnergy()

createThermEnergy = _openstudioutilitiesunits.createThermEnergy



def createThermLength() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermLength()

createThermLength = _openstudioutilitiesunits.createThermLength



def createThermTime() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermTime()

createThermTime = _openstudioutilitiesunits.createThermTime



def createThermTemperature() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermTemperature()

createThermTemperature = _openstudioutilitiesunits.createThermTemperature



def createThermElectricCurrent() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermElectricCurrent()

createThermElectricCurrent = _openstudioutilitiesunits.createThermElectricCurrent



def createThermLuminousIntensity() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermLuminousIntensity()

createThermLuminousIntensity = _openstudioutilitiesunits.createThermLuminousIntensity



def createThermAmountOfSubstance() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermAmountOfSubstance()

createThermAmountOfSubstance = _openstudioutilitiesunits.createThermAmountOfSubstance



def createThermAngle() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermAngle()

createThermAngle = _openstudioutilitiesunits.createThermAngle



def createThermSolidAngle() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermSolidAngle()

createThermSolidAngle = _openstudioutilitiesunits.createThermSolidAngle



def createThermPeople() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermPeople()

createThermPeople = _openstudioutilitiesunits.createThermPeople



def createThermCycle() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermCycle()

createThermCycle = _openstudioutilitiesunits.createThermCycle



def createThermCurrency() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermCurrency()

createThermCurrency = _openstudioutilitiesunits.createThermCurrency



def createThermLuminousFlux() -> "openstudio::ThermUnit":

    return _openstudioutilitiesunits.createThermLuminousFlux()

createThermLuminousFlux = _openstudioutilitiesunits.createThermLuminousFlux

class Misc1Expnt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Misc1Expnt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Misc1Expnt, name)

    __repr__ = _swig_repr



    def __init__(self, ftH2O: 'int'=0, L: 'int'=0, day: 'int'=0, K: 'int'=0, A: 'int'=0, cd: 'int'=0, mol: 'int'=0, rad: 'int'=0, sr: 'int'=0, people: 'int'=0, cycle: 'int'=0, dollar: 'int'=0):

        this = _openstudioutilitiesunits.new_Misc1Expnt(ftH2O, L, day, K, A, cd, mol, rad, sr, people, cycle, dollar)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_Misc1Expnt

    __del__ = lambda self: None

Misc1Expnt_swigregister = _openstudioutilitiesunits.Misc1Expnt_swigregister

Misc1Expnt_swigregister(Misc1Expnt)



class Misc1Unit(ZUnit):

    __swig_setmethods__ = {}

    for _s in [ZUnit]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, Misc1Unit, name, value)

    __swig_getmethods__ = {}

    for _s in [ZUnit]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, Misc1Unit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_Misc1Unit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_Misc1Unit

    __del__ = lambda self: None

Misc1Unit_swigregister = _openstudioutilitiesunits.Misc1Unit_swigregister

Misc1Unit_swigregister(Misc1Unit)





def createMisc1Pressure() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1Pressure()

createMisc1Pressure = _openstudioutilitiesunits.createMisc1Pressure



def createMisc1Length() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1Length()

createMisc1Length = _openstudioutilitiesunits.createMisc1Length



def createMisc1Time() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1Time()

createMisc1Time = _openstudioutilitiesunits.createMisc1Time



def createMisc1Temperature() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1Temperature()

createMisc1Temperature = _openstudioutilitiesunits.createMisc1Temperature



def createMisc1ElectricCurrent() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1ElectricCurrent()

createMisc1ElectricCurrent = _openstudioutilitiesunits.createMisc1ElectricCurrent



def createMisc1LuminousIntensity() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1LuminousIntensity()

createMisc1LuminousIntensity = _openstudioutilitiesunits.createMisc1LuminousIntensity



def createMisc1AmountOfSubstance() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1AmountOfSubstance()

createMisc1AmountOfSubstance = _openstudioutilitiesunits.createMisc1AmountOfSubstance



def createMisc1Angle() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1Angle()

createMisc1Angle = _openstudioutilitiesunits.createMisc1Angle



def createMisc1SolidAngle() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1SolidAngle()

createMisc1SolidAngle = _openstudioutilitiesunits.createMisc1SolidAngle



def createMisc1People() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1People()

createMisc1People = _openstudioutilitiesunits.createMisc1People



def createMisc1Cycle() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1Cycle()

createMisc1Cycle = _openstudioutilitiesunits.createMisc1Cycle



def createMisc1Currency() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1Currency()

createMisc1Currency = _openstudioutilitiesunits.createMisc1Currency



def createMisc1Volume() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1Volume()

createMisc1Volume = _openstudioutilitiesunits.createMisc1Volume



def createMisc1LuminousFlux() -> "openstudio::Misc1Unit":

    return _openstudioutilitiesunits.createMisc1LuminousFlux()

createMisc1LuminousFlux = _openstudioutilitiesunits.createMisc1LuminousFlux



def isFixedPrecisionValue(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.isFixedPrecisionValue(s)

isFixedPrecisionValue = _openstudioutilitiesunits.isFixedPrecisionValue



def containsFixedPrecisionValue(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.containsFixedPrecisionValue(s)

containsFixedPrecisionValue = _openstudioutilitiesunits.containsFixedPrecisionValue



def isScientificNotationValue(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.isScientificNotationValue(s)

isScientificNotationValue = _openstudioutilitiesunits.isScientificNotationValue



def containsScientificNotationValue(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.containsScientificNotationValue(s)

containsScientificNotationValue = _openstudioutilitiesunits.containsScientificNotationValue



def isAtomicUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.isAtomicUnit(s)

isAtomicUnit = _openstudioutilitiesunits.isAtomicUnit



def containsAtomicUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.containsAtomicUnit(s)

containsAtomicUnit = _openstudioutilitiesunits.containsAtomicUnit



def isCompoundUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.isCompoundUnit(s)

isCompoundUnit = _openstudioutilitiesunits.isCompoundUnit



def containsCompoundUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.containsCompoundUnit(s)

containsCompoundUnit = _openstudioutilitiesunits.containsCompoundUnit



def isScaledUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.isScaledUnit(s)

isScaledUnit = _openstudioutilitiesunits.isScaledUnit



def containsScaledUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.containsScaledUnit(s)

containsScaledUnit = _openstudioutilitiesunits.containsScaledUnit



def isDirectScaledUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.isDirectScaledUnit(s)

isDirectScaledUnit = _openstudioutilitiesunits.isDirectScaledUnit



def containsDirectScaledUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.containsDirectScaledUnit(s)

containsDirectScaledUnit = _openstudioutilitiesunits.containsDirectScaledUnit



def isUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.isUnit(s)

isUnit = _openstudioutilitiesunits.isUnit



def containsUnit(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.containsUnit(s)

containsUnit = _openstudioutilitiesunits.containsUnit



def isQuantity(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.isQuantity(s)

isQuantity = _openstudioutilitiesunits.isQuantity



def containsQuantity(s: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.containsQuantity(s)

containsQuantity = _openstudioutilitiesunits.containsQuantity



def getSystem(unitString: 'std::string const &') -> "openstudio::UnitSystem":

    return _openstudioutilitiesunits.getSystem(unitString)

getSystem = _openstudioutilitiesunits.getSystem



def isInSystem(unitString: 'std::string const &', system: 'UnitSystem') -> "bool":

    return _openstudioutilitiesunits.isInSystem(unitString, system)

isInSystem = _openstudioutilitiesunits.isInSystem



def containsRegisteredBaseUnit(unitString: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.containsRegisteredBaseUnit(unitString)

containsRegisteredBaseUnit = _openstudioutilitiesunits.containsRegisteredBaseUnit



def extractUnitString(text: 'std::string const &') -> "std::string":

    return _openstudioutilitiesunits.extractUnitString(text)

extractUnitString = _openstudioutilitiesunits.extractUnitString



def convertToStandardForm(unitString: 'std::string const &') -> "std::string":

    return _openstudioutilitiesunits.convertToStandardForm(unitString)

convertToStandardForm = _openstudioutilitiesunits.convertToStandardForm



def replaceUnitString(text: 'std::string const &', newUnitString: 'std::string const &') -> "std::string":

    return _openstudioutilitiesunits.replaceUnitString(text, newUnitString)

replaceUnitString = _openstudioutilitiesunits.replaceUnitString



def isUnitString(unitString: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.isUnitString(unitString)

isUnitString = _openstudioutilitiesunits.isUnitString



def createDimensionlessUnit(system: 'UnitSystem') -> "openstudio::Unit":

    return _openstudioutilitiesunits.createDimensionlessUnit(system)

createDimensionlessUnit = _openstudioutilitiesunits.createDimensionlessUnit



def createUnit(*args) -> "boost::optional< openstudio::Unit >":

    return _openstudioutilitiesunits.createUnit(*args)

createUnit = _openstudioutilitiesunits.createUnit



def unitStringsEqual(uStr1: 'std::string const &', uStr2: 'std::string const &') -> "bool":

    return _openstudioutilitiesunits.unitStringsEqual(uStr1, uStr2)

unitStringsEqual = _openstudioutilitiesunits.unitStringsEqual



def createIPPowerDensity() -> "openstudio::Unit":

    return _openstudioutilitiesunits.createIPPowerDensity()

createIPPowerDensity = _openstudioutilitiesunits.createIPPowerDensity



def createGPMVolumetricFlowrate() -> "openstudio::Unit":

    return _openstudioutilitiesunits.createGPMVolumetricFlowrate()

createGPMVolumetricFlowrate = _openstudioutilitiesunits.createGPMVolumetricFlowrate



def createIPPressure() -> "openstudio::Unit":

    return _openstudioutilitiesunits.createIPPressure()

createIPPressure = _openstudioutilitiesunits.createIPPressure

class QuantityVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantityVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QuantityVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesunits.QuantityVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesunits.QuantityVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesunits.QuantityVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::Quantity >::size_type":

        return _openstudioutilitiesunits.QuantityVector___len__(self)



    def pop(self) -> "std::vector< openstudio::Quantity >::value_type":

        return _openstudioutilitiesunits.QuantityVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::Quantity >::difference_type', j: 'std::vector< openstudio::Quantity >::difference_type') -> "std::vector< openstudio::Quantity,std::allocator< openstudio::Quantity > > *":

        return _openstudioutilitiesunits.QuantityVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesunits.QuantityVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::Quantity >::difference_type', j: 'std::vector< openstudio::Quantity >::difference_type') -> "void":

        return _openstudioutilitiesunits.QuantityVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.QuantityVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::Quantity >::value_type const &":

        return _openstudioutilitiesunits.QuantityVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesunits.QuantityVector___setitem__(self, *args)



    def append(self, x: 'Quantity') -> "void":

        return _openstudioutilitiesunits.QuantityVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.QuantityVector_empty(self)



    def size(self) -> "std::vector< openstudio::Quantity >::size_type":

        return _openstudioutilitiesunits.QuantityVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.QuantityVector_clear(self)



    def swap(self, v: 'QuantityVector') -> "void":

        return _openstudioutilitiesunits.QuantityVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::Quantity >::allocator_type":

        return _openstudioutilitiesunits.QuantityVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::Quantity >::iterator":

        return _openstudioutilitiesunits.QuantityVector_begin(self)



    def end(self) -> "std::vector< openstudio::Quantity >::iterator":

        return _openstudioutilitiesunits.QuantityVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::Quantity >::reverse_iterator":

        return _openstudioutilitiesunits.QuantityVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::Quantity >::reverse_iterator":

        return _openstudioutilitiesunits.QuantityVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.QuantityVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::Quantity >::iterator":

        return _openstudioutilitiesunits.QuantityVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_QuantityVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Quantity') -> "void":

        return _openstudioutilitiesunits.QuantityVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::Quantity >::value_type const &":

        return _openstudioutilitiesunits.QuantityVector_front(self)



    def back(self) -> "std::vector< openstudio::Quantity >::value_type const &":

        return _openstudioutilitiesunits.QuantityVector_back(self)



    def assign(self, n: 'std::vector< openstudio::Quantity >::size_type', x: 'Quantity') -> "void":

        return _openstudioutilitiesunits.QuantityVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesunits.QuantityVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesunits.QuantityVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::Quantity >::size_type') -> "void":

        return _openstudioutilitiesunits.QuantityVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::Quantity >::size_type":

        return _openstudioutilitiesunits.QuantityVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_QuantityVector

    __del__ = lambda self: None

QuantityVector_swigregister = _openstudioutilitiesunits.QuantityVector_swigregister

QuantityVector_swigregister(QuantityVector)



class OptionalQuantity(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalQuantity, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalQuantity, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OptionalQuantity(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesunits.OptionalQuantity_reset(self)



    def __ref__(self) -> "openstudio::Quantity":

        return _openstudioutilitiesunits.OptionalQuantity___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesunits.OptionalQuantity_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesunits.OptionalQuantity_isNull(self)



    def get(self) -> "openstudio::Quantity":

        return _openstudioutilitiesunits.OptionalQuantity_get(self)



    def set(self, t: 'Quantity') -> "void":

        return _openstudioutilitiesunits.OptionalQuantity_set(self, t)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalQuantity

    __del__ = lambda self: None

OptionalQuantity_swigregister = _openstudioutilitiesunits.OptionalQuantity_swigregister

OptionalQuantity_swigregister(OptionalQuantity)



class Quantity(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Quantity, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Quantity, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_Quantity(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_Quantity

    __del__ = lambda self: None



    def value(self) -> "double":

        return _openstudioutilitiesunits.Quantity_value(self)



    def setValue(self, newValue: 'double') -> "void":

        return _openstudioutilitiesunits.Quantity_setValue(self, newValue)



    def units(self) -> "openstudio::Unit":

        return _openstudioutilitiesunits.Quantity_units(self)



    def system(self) -> "openstudio::UnitSystem":

        return _openstudioutilitiesunits.Quantity_system(self)



    def isTemperature(self) -> "bool":

        return _openstudioutilitiesunits.Quantity_isTemperature(self)



    def baseUnits(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesunits.Quantity_baseUnits(self)



    def baseUnitExponent(self, baseUnit: 'std::string const &') -> "int":

        return _openstudioutilitiesunits.Quantity_baseUnitExponent(self, baseUnit)



    def setBaseUnitExponent(self, baseUnit: 'std::string const &', exponent: 'int') -> "void":

        return _openstudioutilitiesunits.Quantity_setBaseUnitExponent(self, baseUnit, exponent)



    def standardUnitsString(self, withScale: 'bool'=True) -> "std::string":

        return _openstudioutilitiesunits.Quantity_standardUnitsString(self, withScale)



    def prettyUnitsString(self, withScale: 'bool'=True) -> "std::string":

        return _openstudioutilitiesunits.Quantity_prettyUnitsString(self, withScale)



    def setPrettyUnitsString(self, str: 'std::string const &') -> "void":

        return _openstudioutilitiesunits.Quantity_setPrettyUnitsString(self, str)



    def scale(self) -> "openstudio::Scale":

        return _openstudioutilitiesunits.Quantity_scale(self)



    def setScale(self, *args) -> "bool":

        return _openstudioutilitiesunits.Quantity_setScale(self, *args)



    def isAbsolute(self) -> "bool":

        return _openstudioutilitiesunits.Quantity_isAbsolute(self)



    def isRelative(self) -> "bool":

        return _openstudioutilitiesunits.Quantity_isRelative(self)



    def setAsAbsolute(self) -> "void":

        return _openstudioutilitiesunits.Quantity_setAsAbsolute(self)



    def setAsRelative(self) -> "void":

        return _openstudioutilitiesunits.Quantity_setAsRelative(self)



    def lbmToLbf(self) -> "void":

        return _openstudioutilitiesunits.Quantity_lbmToLbf(self)



    def lbfToLbm(self) -> "void":

        return _openstudioutilitiesunits.Quantity_lbfToLbm(self)



    def __iadd__(self, rQuantity: 'Quantity') -> "openstudio::Quantity &":

        return _openstudioutilitiesunits.Quantity___iadd__(self, rQuantity)



    def __isub__(self, rQuantity: 'Quantity') -> "openstudio::Quantity &":

        return _openstudioutilitiesunits.Quantity___isub__(self, rQuantity)



    def __imul__(self, *args) -> "openstudio::Quantity &":

        return _openstudioutilitiesunits.Quantity___imul__(self, *args)



    def __idiv__(self, *args) -> "openstudio::Quantity &":

        return _openstudioutilitiesunits.Quantity___idiv__(self, *args)



    def pow(self, expNum: 'int', expDenom: 'int'=1) -> "openstudio::Quantity &":

        return _openstudioutilitiesunits.Quantity_pow(self, expNum, expDenom)



    def __str__(self) -> "std::string":

        return _openstudioutilitiesunits.Quantity___str__(self)



    def __neg__(self) -> "openstudio::Quantity":

        return _openstudioutilitiesunits.Quantity___neg__(self)



    def __add__(self, rQuantity: 'Quantity') -> "openstudio::Quantity":

        return _openstudioutilitiesunits.Quantity___add__(self, rQuantity)



    def __sub__(self, rQuantity: 'Quantity') -> "openstudio::Quantity":

        return _openstudioutilitiesunits.Quantity___sub__(self, rQuantity)



    def __mul__(self, *args) -> "openstudio::Quantity":

        return _openstudioutilitiesunits.Quantity___mul__(self, *args)



    def __div__(self, *args) -> "openstudio::Quantity":

        return _openstudioutilitiesunits.Quantity___div__(self, *args)

Quantity_swigregister = _openstudioutilitiesunits.Quantity_swigregister

Quantity_swigregister(Quantity)





def __lshift__(*args) -> "std::ostream &":

    return _openstudioutilitiesunits.__lshift__(*args)

__lshift__ = _openstudioutilitiesunits.__lshift__



def pow(*args) -> "openstudio::Quantity":

    return _openstudioutilitiesunits.pow(*args)

pow = _openstudioutilitiesunits.pow

class OSOptionalQuantity(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OSOptionalQuantity, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OSOptionalQuantity, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OSOptionalQuantity(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.OSOptionalQuantity_empty(self)



    def isSet(self) -> "bool":

        return _openstudioutilitiesunits.OSOptionalQuantity_isSet(self)



    def get(self) -> "openstudio::Quantity":

        return _openstudioutilitiesunits.OSOptionalQuantity_get(self)



    def units(self) -> "openstudio::Unit":

        return _openstudioutilitiesunits.OSOptionalQuantity_units(self)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OSOptionalQuantity

    __del__ = lambda self: None

OSOptionalQuantity_swigregister = _openstudioutilitiesunits.OSOptionalQuantity_swigregister

OSOptionalQuantity_swigregister(OSOptionalQuantity)



class OSQuantityVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OSQuantityVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OSQuantityVector, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesunits.new_OSQuantityVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def units(self) -> "openstudio::Unit":

        return _openstudioutilitiesunits.OSQuantityVector_units(self)



    def system(self) -> "openstudio::UnitSystem":

        return _openstudioutilitiesunits.OSQuantityVector_system(self)



    def scale(self) -> "openstudio::Scale":

        return _openstudioutilitiesunits.OSQuantityVector_scale(self)



    def quantities(self) -> "std::vector< openstudio::Quantity,std::allocator< openstudio::Quantity > >":

        return _openstudioutilitiesunits.OSQuantityVector_quantities(self)



    def values(self) -> "std::vector< double,std::allocator< double > >":

        return _openstudioutilitiesunits.OSQuantityVector_values(self)



    def getQuantity(self, i: 'unsigned int') -> "openstudio::Quantity":

        return _openstudioutilitiesunits.OSQuantityVector_getQuantity(self, i)



    def empty(self) -> "bool":

        return _openstudioutilitiesunits.OSQuantityVector_empty(self)



    def size(self) -> "unsigned int":

        return _openstudioutilitiesunits.OSQuantityVector_size(self)



    def setScale(self, *args) -> "bool":

        return _openstudioutilitiesunits.OSQuantityVector_setScale(self, *args)



    def push_back(self, q: 'Quantity') -> "void":

        return _openstudioutilitiesunits.OSQuantityVector_push_back(self, q)



    def pop_back(self) -> "void":

        return _openstudioutilitiesunits.OSQuantityVector_pop_back(self)



    def resize(self, n: 'unsigned int', value: 'double'=0.0) -> "void":

        return _openstudioutilitiesunits.OSQuantityVector_resize(self, n, value)



    def clear(self) -> "void":

        return _openstudioutilitiesunits.OSQuantityVector_clear(self)



    def isTemperature(self) -> "bool":

        return _openstudioutilitiesunits.OSQuantityVector_isTemperature(self)



    def isAbsolute(self) -> "bool":

        return _openstudioutilitiesunits.OSQuantityVector_isAbsolute(self)



    def isRelative(self) -> "bool":

        return _openstudioutilitiesunits.OSQuantityVector_isRelative(self)



    def setAsAbsolute(self) -> "void":

        return _openstudioutilitiesunits.OSQuantityVector_setAsAbsolute(self)



    def setAsRelative(self) -> "void":

        return _openstudioutilitiesunits.OSQuantityVector_setAsRelative(self)



    def lbmToLbf(self) -> "void":

        return _openstudioutilitiesunits.OSQuantityVector_lbmToLbf(self)



    def lbfToLbm(self) -> "void":

        return _openstudioutilitiesunits.OSQuantityVector_lbfToLbm(self)



    def __iadd__(self, *args) -> "openstudio::OSQuantityVector &":

        return _openstudioutilitiesunits.OSQuantityVector___iadd__(self, *args)



    def __isub__(self, *args) -> "openstudio::OSQuantityVector &":

        return _openstudioutilitiesunits.OSQuantityVector___isub__(self, *args)



    def __imul__(self, *args) -> "openstudio::OSQuantityVector &":

        return _openstudioutilitiesunits.OSQuantityVector___imul__(self, *args)



    def __idiv__(self, *args) -> "openstudio::OSQuantityVector &":

        return _openstudioutilitiesunits.OSQuantityVector___idiv__(self, *args)

    __swig_destroy__ = _openstudioutilitiesunits.delete_OSQuantityVector

    __del__ = lambda self: None

OSQuantityVector_swigregister = _openstudioutilitiesunits.OSQuantityVector_swigregister

OSQuantityVector_swigregister(OSQuantityVector)





def __add__(*args) -> "openstudio::OSQuantityVector":

    return _openstudioutilitiesunits.__add__(*args)

__add__ = _openstudioutilitiesunits.__add__



def __sub__(*args) -> "openstudio::OSQuantityVector":

    return _openstudioutilitiesunits.__sub__(*args)

__sub__ = _openstudioutilitiesunits.__sub__



def __mul__(*args) -> "openstudio::OSQuantityVector":

    return _openstudioutilitiesunits.__mul__(*args)

__mul__ = _openstudioutilitiesunits.__mul__



def __div__(*args) -> "openstudio::OSQuantityVector":

    return _openstudioutilitiesunits.__div__(*args)

__div__ = _openstudioutilitiesunits.__div__



def dot(lVector: 'OSQuantityVector', rVector: 'OSQuantityVector') -> "openstudio::Quantity":

    return _openstudioutilitiesunits.dot(lVector, rVector)

dot = _openstudioutilitiesunits.dot



def __eq__(*args) -> "bool":

    return _openstudioutilitiesunits.__eq__(*args)

__eq__ = _openstudioutilitiesunits.__eq__



def __ne__(*args) -> "bool":

    return _openstudioutilitiesunits.__ne__(*args)

__ne__ = _openstudioutilitiesunits.__ne__



def createQuantity(*args) -> "boost::optional< openstudio::Quantity >":

    return _openstudioutilitiesunits.createQuantity(*args)

createQuantity = _openstudioutilitiesunits.createQuantity

class TemperatureConversionRule(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, TemperatureConversionRule, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, TemperatureConversionRule, name)

    __repr__ = _swig_repr

    STND = _openstudioutilitiesunits.TemperatureConversionRule_STND

    ABS = _openstudioutilitiesunits.TemperatureConversionRule_ABS

    REL = _openstudioutilitiesunits.TemperatureConversionRule_REL



    def __init__(self):

        this = _openstudioutilitiesunits.new_TemperatureConversionRule()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_TemperatureConversionRule

    __del__ = lambda self: None

TemperatureConversionRule_swigregister = _openstudioutilitiesunits.TemperatureConversionRule_swigregister

TemperatureConversionRule_swigregister(TemperatureConversionRule)



class baseUnitConversionFactor(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, baseUnitConversionFactor, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, baseUnitConversionFactor, name)

    __repr__ = _swig_repr

    __swig_setmethods__["system"] = _openstudioutilitiesunits.baseUnitConversionFactor_system_set

    __swig_getmethods__["system"] = _openstudioutilitiesunits.baseUnitConversionFactor_system_get

    if _newclass:

        system = _swig_property(_openstudioutilitiesunits.baseUnitConversionFactor_system_get, _openstudioutilitiesunits.baseUnitConversionFactor_system_set)

    __swig_setmethods__["originalUnit"] = _openstudioutilitiesunits.baseUnitConversionFactor_originalUnit_set

    __swig_getmethods__["originalUnit"] = _openstudioutilitiesunits.baseUnitConversionFactor_originalUnit_get

    if _newclass:

        originalUnit = _swig_property(_openstudioutilitiesunits.baseUnitConversionFactor_originalUnit_get, _openstudioutilitiesunits.baseUnitConversionFactor_originalUnit_set)

    __swig_setmethods__["targetUnit"] = _openstudioutilitiesunits.baseUnitConversionFactor_targetUnit_set

    __swig_getmethods__["targetUnit"] = _openstudioutilitiesunits.baseUnitConversionFactor_targetUnit_get

    if _newclass:

        targetUnit = _swig_property(_openstudioutilitiesunits.baseUnitConversionFactor_targetUnit_get, _openstudioutilitiesunits.baseUnitConversionFactor_targetUnit_set)

    __swig_setmethods__["factor"] = _openstudioutilitiesunits.baseUnitConversionFactor_factor_set

    __swig_getmethods__["factor"] = _openstudioutilitiesunits.baseUnitConversionFactor_factor_get

    if _newclass:

        factor = _swig_property(_openstudioutilitiesunits.baseUnitConversionFactor_factor_get, _openstudioutilitiesunits.baseUnitConversionFactor_factor_set)

    __swig_setmethods__["offset"] = _openstudioutilitiesunits.baseUnitConversionFactor_offset_set

    __swig_getmethods__["offset"] = _openstudioutilitiesunits.baseUnitConversionFactor_offset_get

    if _newclass:

        offset = _swig_property(_openstudioutilitiesunits.baseUnitConversionFactor_offset_get, _openstudioutilitiesunits.baseUnitConversionFactor_offset_set)



    def __init__(self):

        this = _openstudioutilitiesunits.new_baseUnitConversionFactor()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesunits.delete_baseUnitConversionFactor

    __del__ = lambda self: None

baseUnitConversionFactor_swigregister = _openstudioutilitiesunits.baseUnitConversionFactor_swigregister

baseUnitConversionFactor_swigregister(baseUnitConversionFactor)





def convert(*args) -> "openstudio::OSQuantityVector":

    return _openstudioutilitiesunits.convert(*args)

convert = _openstudioutilitiesunits.convert

# This file is compatible with both classic and new-style classes.





