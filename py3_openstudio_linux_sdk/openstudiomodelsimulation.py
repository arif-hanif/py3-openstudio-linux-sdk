# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudiomodelsimulation', [dirname(__file__)])
        except ImportError:
            import _openstudiomodelsimulation
            return _openstudiomodelsimulation
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudiomodelsimulation', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudiomodelsimulation = swig_import_helper()
    del swig_import_helper
else:
    import _openstudiomodelsimulation
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudiomodelsimulation.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudiomodelsimulation.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelsimulation.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelsimulation.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelsimulation.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelsimulation.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelsimulation.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelsimulation.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelsimulation.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelsimulation.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelsimulation.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudiomodelsimulation.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudiomodelsimulation.SHARED_PTR_DISOWN_swigconstant(_openstudiomodelsimulation)
SHARED_PTR_DISOWN = _openstudiomodelsimulation.SHARED_PTR_DISOWN
import openstudioutilities
import openstudioutilitiescore
import openstudioutilitiestime
import openstudioutilitiesdata
import openstudioutilitiesunits
import openstudioutilitiesplot
import openstudioutilitiesgeometry
import openstudioutilitiessql
import openstudioutilitiesbcl
import openstudioutilitiesidd
import openstudioutilitiesidf
import openstudioutilitiesfiletypes
import openstudiomodelcore
class OptionalSimulationControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSimulationControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSimulationControl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSimulationControl(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSimulationControl_reset(self)

    def __ref__(self) -> "openstudio::model::SimulationControl":
        return _openstudiomodelsimulation.OptionalSimulationControl___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSimulationControl_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSimulationControl_isNull(self)

    def get(self) -> "openstudio::model::SimulationControl":
        return _openstudiomodelsimulation.OptionalSimulationControl_get(self)

    def set(self, t: 'SimulationControl') -> "void":
        return _openstudiomodelsimulation.OptionalSimulationControl_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSimulationControl
    __del__ = lambda self: None
OptionalSimulationControl_swigregister = _openstudiomodelsimulation.OptionalSimulationControl_swigregister
OptionalSimulationControl_swigregister(OptionalSimulationControl)

class OptionalLightingSimulationControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLightingSimulationControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLightingSimulationControl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalLightingSimulationControl(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_reset(self)

    def __ref__(self) -> "openstudio::model::LightingSimulationControl":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_isNull(self)

    def get(self) -> "openstudio::model::LightingSimulationControl":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_get(self)

    def set(self, t: 'LightingSimulationControl') -> "void":
        return _openstudiomodelsimulation.OptionalLightingSimulationControl_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalLightingSimulationControl
    __del__ = lambda self: None
OptionalLightingSimulationControl_swigregister = _openstudiomodelsimulation.OptionalLightingSimulationControl_swigregister
OptionalLightingSimulationControl_swigregister(OptionalLightingSimulationControl)

class OptionalSizingParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSizingParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSizingParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSizingParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSizingParameters_reset(self)

    def __ref__(self) -> "openstudio::model::SizingParameters":
        return _openstudiomodelsimulation.OptionalSizingParameters___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSizingParameters_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSizingParameters_isNull(self)

    def get(self) -> "openstudio::model::SizingParameters":
        return _openstudiomodelsimulation.OptionalSizingParameters_get(self)

    def set(self, t: 'SizingParameters') -> "void":
        return _openstudiomodelsimulation.OptionalSizingParameters_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSizingParameters
    __del__ = lambda self: None
OptionalSizingParameters_swigregister = _openstudiomodelsimulation.OptionalSizingParameters_swigregister
OptionalSizingParameters_swigregister(OptionalSizingParameters)

class SizingPeriodVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizingPeriodVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizingPeriodVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SizingPeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SizingPeriodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SizingPeriodVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SizingPeriod >::size_type":
        return _openstudiomodelsimulation.SizingPeriodVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SizingPeriod >::value_type":
        return _openstudiomodelsimulation.SizingPeriodVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SizingPeriod >::difference_type', j: 'std::vector< openstudio::model::SizingPeriod >::difference_type') -> "std::vector< openstudio::model::SizingPeriod,std::allocator< openstudio::model::SizingPeriod > > *":
        return _openstudiomodelsimulation.SizingPeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SizingPeriod >::difference_type', j: 'std::vector< openstudio::model::SizingPeriod >::difference_type') -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SizingPeriod >::value_type const &":
        return _openstudiomodelsimulation.SizingPeriodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector___setitem__(self, *args)

    def append(self, x: 'SizingPeriod') -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SizingPeriodVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SizingPeriod >::size_type":
        return _openstudiomodelsimulation.SizingPeriodVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_clear(self)

    def swap(self, v: 'SizingPeriodVector') -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SizingPeriod >::allocator_type":
        return _openstudiomodelsimulation.SizingPeriodVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SizingPeriod >::iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SizingPeriod >::iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SizingPeriod >::reverse_iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SizingPeriod >::reverse_iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SizingPeriod >::iterator":
        return _openstudiomodelsimulation.SizingPeriodVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_SizingPeriodVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SizingPeriod') -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SizingPeriod >::value_type const &":
        return _openstudiomodelsimulation.SizingPeriodVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SizingPeriod >::value_type const &":
        return _openstudiomodelsimulation.SizingPeriodVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SizingPeriod >::size_type', x: 'SizingPeriod') -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SizingPeriod >::size_type', x: 'SizingPeriod') -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SizingPeriod >::size_type') -> "void":
        return _openstudiomodelsimulation.SizingPeriodVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SizingPeriod >::size_type":
        return _openstudiomodelsimulation.SizingPeriodVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SizingPeriodVector
    __del__ = lambda self: None
SizingPeriodVector_swigregister = _openstudiomodelsimulation.SizingPeriodVector_swigregister
SizingPeriodVector_swigregister(SizingPeriodVector)

class OptionalSizingPeriod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSizingPeriod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSizingPeriod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSizingPeriod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSizingPeriod_reset(self)

    def __ref__(self) -> "openstudio::model::SizingPeriod":
        return _openstudiomodelsimulation.OptionalSizingPeriod___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSizingPeriod_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSizingPeriod_isNull(self)

    def get(self) -> "openstudio::model::SizingPeriod":
        return _openstudiomodelsimulation.OptionalSizingPeriod_get(self)

    def set(self, t: 'SizingPeriod') -> "void":
        return _openstudiomodelsimulation.OptionalSizingPeriod_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSizingPeriod
    __del__ = lambda self: None
OptionalSizingPeriod_swigregister = _openstudiomodelsimulation.OptionalSizingPeriod_swigregister
OptionalSizingPeriod_swigregister(OptionalSizingPeriod)

class OptionalWeatherFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWeatherFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWeatherFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalWeatherFile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFile_reset(self)

    def __ref__(self) -> "openstudio::model::WeatherFile":
        return _openstudiomodelsimulation.OptionalWeatherFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFile_isNull(self)

    def get(self) -> "openstudio::model::WeatherFile":
        return _openstudiomodelsimulation.OptionalWeatherFile_get(self)

    def set(self, t: 'WeatherFile') -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFile_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalWeatherFile
    __del__ = lambda self: None
OptionalWeatherFile_swigregister = _openstudiomodelsimulation.OptionalWeatherFile_swigregister
OptionalWeatherFile_swigregister(OptionalWeatherFile)

class WeatherFileConditionTypeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeatherFileConditionTypeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WeatherFileConditionTypeVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::size_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::value_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::WeatherFileConditionType >::difference_type', j: 'std::vector< openstudio::model::WeatherFileConditionType >::difference_type') -> "std::vector< openstudio::model::WeatherFileConditionType,std::allocator< openstudio::model::WeatherFileConditionType > > *":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::WeatherFileConditionType >::difference_type', j: 'std::vector< openstudio::model::WeatherFileConditionType >::difference_type') -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WeatherFileConditionType >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector___setitem__(self, *args)

    def append(self, x: 'WeatherFileConditionType') -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::size_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_clear(self)

    def swap(self, v: 'WeatherFileConditionTypeVector') -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::allocator_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::reverse_iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::reverse_iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WeatherFileConditionType >::iterator":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_WeatherFileConditionTypeVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WeatherFileConditionType') -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::WeatherFileConditionType >::size_type', x: 'WeatherFileConditionType') -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::WeatherFileConditionType >::size_type', x: 'WeatherFileConditionType') -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::WeatherFileConditionType >::size_type') -> "void":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WeatherFileConditionType >::size_type":
        return _openstudiomodelsimulation.WeatherFileConditionTypeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFileConditionTypeVector
    __del__ = lambda self: None
WeatherFileConditionTypeVector_swigregister = _openstudiomodelsimulation.WeatherFileConditionTypeVector_swigregister
WeatherFileConditionTypeVector_swigregister(WeatherFileConditionTypeVector)

class OptionalWeatherFileConditionType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWeatherFileConditionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWeatherFileConditionType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalWeatherFileConditionType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_reset(self)

    def __ref__(self) -> "openstudio::model::WeatherFileConditionType":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_isNull(self)

    def get(self) -> "openstudio::model::WeatherFileConditionType":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_get(self)

    def set(self, t: 'WeatherFileConditionType') -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFileConditionType_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalWeatherFileConditionType
    __del__ = lambda self: None
OptionalWeatherFileConditionType_swigregister = _openstudiomodelsimulation.OptionalWeatherFileConditionType_swigregister
OptionalWeatherFileConditionType_swigregister(OptionalWeatherFileConditionType)

class WeatherFileDaysVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeatherFileDaysVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WeatherFileDaysVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.WeatherFileDaysVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileDaysVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileDaysVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WeatherFileDays >::size_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::WeatherFileDays >::value_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::WeatherFileDays >::difference_type', j: 'std::vector< openstudio::model::WeatherFileDays >::difference_type') -> "std::vector< openstudio::model::WeatherFileDays,std::allocator< openstudio::model::WeatherFileDays > > *":
        return _openstudiomodelsimulation.WeatherFileDaysVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::WeatherFileDays >::difference_type', j: 'std::vector< openstudio::model::WeatherFileDays >::difference_type') -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WeatherFileDays >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileDaysVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector___setitem__(self, *args)

    def append(self, x: 'WeatherFileDays') -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFileDaysVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WeatherFileDays >::size_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_clear(self)

    def swap(self, v: 'WeatherFileDaysVector') -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::WeatherFileDays >::allocator_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::WeatherFileDays >::iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WeatherFileDays >::iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WeatherFileDays >::reverse_iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WeatherFileDays >::reverse_iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WeatherFileDays >::iterator":
        return _openstudiomodelsimulation.WeatherFileDaysVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_WeatherFileDaysVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WeatherFileDays') -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WeatherFileDays >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileDaysVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WeatherFileDays >::value_type const &":
        return _openstudiomodelsimulation.WeatherFileDaysVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::WeatherFileDays >::size_type', x: 'WeatherFileDays') -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::WeatherFileDays >::size_type', x: 'WeatherFileDays') -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::WeatherFileDays >::size_type') -> "void":
        return _openstudiomodelsimulation.WeatherFileDaysVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WeatherFileDays >::size_type":
        return _openstudiomodelsimulation.WeatherFileDaysVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFileDaysVector
    __del__ = lambda self: None
WeatherFileDaysVector_swigregister = _openstudiomodelsimulation.WeatherFileDaysVector_swigregister
WeatherFileDaysVector_swigregister(WeatherFileDaysVector)

class OptionalWeatherFileDays(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWeatherFileDays, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWeatherFileDays, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalWeatherFileDays(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_reset(self)

    def __ref__(self) -> "openstudio::model::WeatherFileDays":
        return _openstudiomodelsimulation.OptionalWeatherFileDays___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_isNull(self)

    def get(self) -> "openstudio::model::WeatherFileDays":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_get(self)

    def set(self, t: 'WeatherFileDays') -> "void":
        return _openstudiomodelsimulation.OptionalWeatherFileDays_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalWeatherFileDays
    __del__ = lambda self: None
OptionalWeatherFileDays_swigregister = _openstudiomodelsimulation.OptionalWeatherFileDays_swigregister
OptionalWeatherFileDays_swigregister(OptionalWeatherFileDays)

class OptionalClimateZones(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalClimateZones, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalClimateZones, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalClimateZones(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalClimateZones_reset(self)

    def __ref__(self) -> "openstudio::model::ClimateZones":
        return _openstudiomodelsimulation.OptionalClimateZones___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalClimateZones_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalClimateZones_isNull(self)

    def get(self) -> "openstudio::model::ClimateZones":
        return _openstudiomodelsimulation.OptionalClimateZones_get(self)

    def set(self, t: 'ClimateZones') -> "void":
        return _openstudiomodelsimulation.OptionalClimateZones_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalClimateZones
    __del__ = lambda self: None
OptionalClimateZones_swigregister = _openstudiomodelsimulation.OptionalClimateZones_swigregister
OptionalClimateZones_swigregister(OptionalClimateZones)

class ClimateZoneVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClimateZoneVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClimateZoneVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.ClimateZoneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.ClimateZoneVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.ClimateZoneVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ClimateZone >::size_type":
        return _openstudiomodelsimulation.ClimateZoneVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ClimateZone >::value_type":
        return _openstudiomodelsimulation.ClimateZoneVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ClimateZone >::difference_type', j: 'std::vector< openstudio::model::ClimateZone >::difference_type') -> "std::vector< openstudio::model::ClimateZone,std::allocator< openstudio::model::ClimateZone > > *":
        return _openstudiomodelsimulation.ClimateZoneVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ClimateZone >::difference_type', j: 'std::vector< openstudio::model::ClimateZone >::difference_type') -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ClimateZone >::value_type const &":
        return _openstudiomodelsimulation.ClimateZoneVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector___setitem__(self, *args)

    def append(self, x: 'ClimateZone') -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.ClimateZoneVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ClimateZone >::size_type":
        return _openstudiomodelsimulation.ClimateZoneVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_clear(self)

    def swap(self, v: 'ClimateZoneVector') -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ClimateZone >::allocator_type":
        return _openstudiomodelsimulation.ClimateZoneVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ClimateZone >::iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ClimateZone >::iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ClimateZone >::reverse_iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ClimateZone >::reverse_iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ClimateZone >::iterator":
        return _openstudiomodelsimulation.ClimateZoneVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_ClimateZoneVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ClimateZone') -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ClimateZone >::value_type const &":
        return _openstudiomodelsimulation.ClimateZoneVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ClimateZone >::value_type const &":
        return _openstudiomodelsimulation.ClimateZoneVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ClimateZone >::size_type', x: 'ClimateZone') -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ClimateZone >::size_type', x: 'ClimateZone') -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ClimateZone >::size_type') -> "void":
        return _openstudiomodelsimulation.ClimateZoneVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ClimateZone >::size_type":
        return _openstudiomodelsimulation.ClimateZoneVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_ClimateZoneVector
    __del__ = lambda self: None
ClimateZoneVector_swigregister = _openstudiomodelsimulation.ClimateZoneVector_swigregister
ClimateZoneVector_swigregister(ClimateZoneVector)

class OptionalClimateZone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalClimateZone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalClimateZone, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalClimateZone(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalClimateZone_reset(self)

    def __ref__(self) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.OptionalClimateZone___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalClimateZone_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalClimateZone_isNull(self)

    def get(self) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.OptionalClimateZone_get(self)

    def set(self, t: 'ClimateZone') -> "void":
        return _openstudiomodelsimulation.OptionalClimateZone_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalClimateZone
    __del__ = lambda self: None
OptionalClimateZone_swigregister = _openstudiomodelsimulation.OptionalClimateZone_swigregister
OptionalClimateZone_swigregister(OptionalClimateZone)

class DesignDayVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignDayVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DesignDayVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.DesignDayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.DesignDayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.DesignDayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DesignDay >::size_type":
        return _openstudiomodelsimulation.DesignDayVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::DesignDay >::value_type":
        return _openstudiomodelsimulation.DesignDayVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::DesignDay >::difference_type', j: 'std::vector< openstudio::model::DesignDay >::difference_type') -> "std::vector< openstudio::model::DesignDay,std::allocator< openstudio::model::DesignDay > > *":
        return _openstudiomodelsimulation.DesignDayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.DesignDayVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::DesignDay >::difference_type', j: 'std::vector< openstudio::model::DesignDay >::difference_type') -> "void":
        return _openstudiomodelsimulation.DesignDayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.DesignDayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DesignDay >::value_type const &":
        return _openstudiomodelsimulation.DesignDayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.DesignDayVector___setitem__(self, *args)

    def append(self, x: 'DesignDay') -> "void":
        return _openstudiomodelsimulation.DesignDayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.DesignDayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DesignDay >::size_type":
        return _openstudiomodelsimulation.DesignDayVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.DesignDayVector_clear(self)

    def swap(self, v: 'DesignDayVector') -> "void":
        return _openstudiomodelsimulation.DesignDayVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::DesignDay >::allocator_type":
        return _openstudiomodelsimulation.DesignDayVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::DesignDay >::iterator":
        return _openstudiomodelsimulation.DesignDayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DesignDay >::iterator":
        return _openstudiomodelsimulation.DesignDayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DesignDay >::reverse_iterator":
        return _openstudiomodelsimulation.DesignDayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DesignDay >::reverse_iterator":
        return _openstudiomodelsimulation.DesignDayVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.DesignDayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DesignDay >::iterator":
        return _openstudiomodelsimulation.DesignDayVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_DesignDayVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'DesignDay') -> "void":
        return _openstudiomodelsimulation.DesignDayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DesignDay >::value_type const &":
        return _openstudiomodelsimulation.DesignDayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DesignDay >::value_type const &":
        return _openstudiomodelsimulation.DesignDayVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::DesignDay >::size_type', x: 'DesignDay') -> "void":
        return _openstudiomodelsimulation.DesignDayVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::DesignDay >::size_type', x: 'DesignDay') -> "void":
        return _openstudiomodelsimulation.DesignDayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.DesignDayVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::DesignDay >::size_type') -> "void":
        return _openstudiomodelsimulation.DesignDayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DesignDay >::size_type":
        return _openstudiomodelsimulation.DesignDayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_DesignDayVector
    __del__ = lambda self: None
DesignDayVector_swigregister = _openstudiomodelsimulation.DesignDayVector_swigregister
DesignDayVector_swigregister(DesignDayVector)

class OptionalDesignDay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDesignDay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDesignDay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalDesignDay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalDesignDay_reset(self)

    def __ref__(self) -> "openstudio::model::DesignDay":
        return _openstudiomodelsimulation.OptionalDesignDay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalDesignDay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalDesignDay_isNull(self)

    def get(self) -> "openstudio::model::DesignDay":
        return _openstudiomodelsimulation.OptionalDesignDay_get(self)

    def set(self, t: 'DesignDay') -> "void":
        return _openstudiomodelsimulation.OptionalDesignDay_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalDesignDay
    __del__ = lambda self: None
OptionalDesignDay_swigregister = _openstudiomodelsimulation.OptionalDesignDay_swigregister
OptionalDesignDay_swigregister(OptionalDesignDay)

class LightingDesignDayVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightingDesignDayVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightingDesignDayVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.LightingDesignDayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.LightingDesignDayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.LightingDesignDayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LightingDesignDay >::size_type":
        return _openstudiomodelsimulation.LightingDesignDayVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::LightingDesignDay >::value_type":
        return _openstudiomodelsimulation.LightingDesignDayVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::LightingDesignDay >::difference_type', j: 'std::vector< openstudio::model::LightingDesignDay >::difference_type') -> "std::vector< openstudio::model::LightingDesignDay,std::allocator< openstudio::model::LightingDesignDay > > *":
        return _openstudiomodelsimulation.LightingDesignDayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::LightingDesignDay >::difference_type', j: 'std::vector< openstudio::model::LightingDesignDay >::difference_type') -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LightingDesignDay >::value_type const &":
        return _openstudiomodelsimulation.LightingDesignDayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector___setitem__(self, *args)

    def append(self, x: 'LightingDesignDay') -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.LightingDesignDayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LightingDesignDay >::size_type":
        return _openstudiomodelsimulation.LightingDesignDayVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_clear(self)

    def swap(self, v: 'LightingDesignDayVector') -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::LightingDesignDay >::allocator_type":
        return _openstudiomodelsimulation.LightingDesignDayVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::LightingDesignDay >::iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LightingDesignDay >::iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LightingDesignDay >::reverse_iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LightingDesignDay >::reverse_iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LightingDesignDay >::iterator":
        return _openstudiomodelsimulation.LightingDesignDayVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_LightingDesignDayVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'LightingDesignDay') -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LightingDesignDay >::value_type const &":
        return _openstudiomodelsimulation.LightingDesignDayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LightingDesignDay >::value_type const &":
        return _openstudiomodelsimulation.LightingDesignDayVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::LightingDesignDay >::size_type', x: 'LightingDesignDay') -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::LightingDesignDay >::size_type', x: 'LightingDesignDay') -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::LightingDesignDay >::size_type') -> "void":
        return _openstudiomodelsimulation.LightingDesignDayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LightingDesignDay >::size_type":
        return _openstudiomodelsimulation.LightingDesignDayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_LightingDesignDayVector
    __del__ = lambda self: None
LightingDesignDayVector_swigregister = _openstudiomodelsimulation.LightingDesignDayVector_swigregister
LightingDesignDayVector_swigregister(LightingDesignDayVector)

class OptionalLightingDesignDay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLightingDesignDay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLightingDesignDay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalLightingDesignDay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_reset(self)

    def __ref__(self) -> "openstudio::model::LightingDesignDay":
        return _openstudiomodelsimulation.OptionalLightingDesignDay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_isNull(self)

    def get(self) -> "openstudio::model::LightingDesignDay":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_get(self)

    def set(self, t: 'LightingDesignDay') -> "void":
        return _openstudiomodelsimulation.OptionalLightingDesignDay_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalLightingDesignDay
    __del__ = lambda self: None
OptionalLightingDesignDay_swigregister = _openstudiomodelsimulation.OptionalLightingDesignDay_swigregister
OptionalLightingDesignDay_swigregister(OptionalLightingDesignDay)

class OptionalConvergenceLimits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalConvergenceLimits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalConvergenceLimits, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalConvergenceLimits(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_reset(self)

    def __ref__(self) -> "openstudio::model::ConvergenceLimits":
        return _openstudiomodelsimulation.OptionalConvergenceLimits___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_isNull(self)

    def get(self) -> "openstudio::model::ConvergenceLimits":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_get(self)

    def set(self, t: 'ConvergenceLimits') -> "void":
        return _openstudiomodelsimulation.OptionalConvergenceLimits_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalConvergenceLimits
    __del__ = lambda self: None
OptionalConvergenceLimits_swigregister = _openstudiomodelsimulation.OptionalConvergenceLimits_swigregister
OptionalConvergenceLimits_swigregister(OptionalConvergenceLimits)

class OptionalRunPeriodControlDaylightSavingTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRunPeriodControlDaylightSavingTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRunPeriodControlDaylightSavingTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalRunPeriodControlDaylightSavingTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_reset(self)

    def __ref__(self) -> "openstudio::model::RunPeriodControlDaylightSavingTime":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_isNull(self)

    def get(self) -> "openstudio::model::RunPeriodControlDaylightSavingTime":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_get(self)

    def set(self, t: 'RunPeriodControlDaylightSavingTime') -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalRunPeriodControlDaylightSavingTime
    __del__ = lambda self: None
OptionalRunPeriodControlDaylightSavingTime_swigregister = _openstudiomodelsimulation.OptionalRunPeriodControlDaylightSavingTime_swigregister
OptionalRunPeriodControlDaylightSavingTime_swigregister(OptionalRunPeriodControlDaylightSavingTime)

class OptionalHeatBalanceAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalHeatBalanceAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalHeatBalanceAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalHeatBalanceAlgorithm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_reset(self)

    def __ref__(self) -> "openstudio::model::HeatBalanceAlgorithm":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_isNull(self)

    def get(self) -> "openstudio::model::HeatBalanceAlgorithm":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_get(self)

    def set(self, t: 'HeatBalanceAlgorithm') -> "void":
        return _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalHeatBalanceAlgorithm
    __del__ = lambda self: None
OptionalHeatBalanceAlgorithm_swigregister = _openstudiomodelsimulation.OptionalHeatBalanceAlgorithm_swigregister
OptionalHeatBalanceAlgorithm_swigregister(OptionalHeatBalanceAlgorithm)

class OptionalInsideSurfaceConvectionAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalInsideSurfaceConvectionAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalInsideSurfaceConvectionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalInsideSurfaceConvectionAlgorithm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_reset(self)

    def __ref__(self) -> "openstudio::model::InsideSurfaceConvectionAlgorithm":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_isNull(self)

    def get(self) -> "openstudio::model::InsideSurfaceConvectionAlgorithm":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_get(self)

    def set(self, t: 'InsideSurfaceConvectionAlgorithm') -> "void":
        return _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalInsideSurfaceConvectionAlgorithm
    __del__ = lambda self: None
OptionalInsideSurfaceConvectionAlgorithm_swigregister = _openstudiomodelsimulation.OptionalInsideSurfaceConvectionAlgorithm_swigregister
OptionalInsideSurfaceConvectionAlgorithm_swigregister(OptionalInsideSurfaceConvectionAlgorithm)

class OptionalOutputControlReportingTolerances(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalOutputControlReportingTolerances, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalOutputControlReportingTolerances, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalOutputControlReportingTolerances(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_reset(self)

    def __ref__(self) -> "openstudio::model::OutputControlReportingTolerances":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_isNull(self)

    def get(self) -> "openstudio::model::OutputControlReportingTolerances":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_get(self)

    def set(self, t: 'OutputControlReportingTolerances') -> "void":
        return _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalOutputControlReportingTolerances
    __del__ = lambda self: None
OptionalOutputControlReportingTolerances_swigregister = _openstudiomodelsimulation.OptionalOutputControlReportingTolerances_swigregister
OptionalOutputControlReportingTolerances_swigregister(OptionalOutputControlReportingTolerances)

class OptionalOutsideSurfaceConvectionAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalOutsideSurfaceConvectionAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalOutsideSurfaceConvectionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalOutsideSurfaceConvectionAlgorithm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_reset(self)

    def __ref__(self) -> "openstudio::model::OutsideSurfaceConvectionAlgorithm":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_isNull(self)

    def get(self) -> "openstudio::model::OutsideSurfaceConvectionAlgorithm":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_get(self)

    def set(self, t: 'OutsideSurfaceConvectionAlgorithm') -> "void":
        return _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalOutsideSurfaceConvectionAlgorithm
    __del__ = lambda self: None
OptionalOutsideSurfaceConvectionAlgorithm_swigregister = _openstudiomodelsimulation.OptionalOutsideSurfaceConvectionAlgorithm_swigregister
OptionalOutsideSurfaceConvectionAlgorithm_swigregister(OptionalOutsideSurfaceConvectionAlgorithm)

class SurfacePropertyConvectionCoefficientsMultipleSurfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurfacePropertyConvectionCoefficientsMultipleSurfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SurfacePropertyConvectionCoefficientsMultipleSurfaceVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::value_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::difference_type', j: 'std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::difference_type') -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface,std::allocator< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface > > *":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::difference_type', j: 'std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::difference_type') -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::value_type const &":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector___setitem__(self, *args)

    def append(self, x: 'SurfacePropertyConvectionCoefficientsMultipleSurface') -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_clear(self)

    def swap(self, v: 'SurfacePropertyConvectionCoefficientsMultipleSurfaceVector') -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::allocator_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::reverse_iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::reverse_iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::iterator":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_SurfacePropertyConvectionCoefficientsMultipleSurfaceVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SurfacePropertyConvectionCoefficientsMultipleSurface') -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::value_type const &":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::value_type const &":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type', x: 'SurfacePropertyConvectionCoefficientsMultipleSurface') -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type', x: 'SurfacePropertyConvectionCoefficientsMultipleSurface') -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type') -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >::size_type":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SurfacePropertyConvectionCoefficientsMultipleSurfaceVector
    __del__ = lambda self: None
SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_swigregister = _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_swigregister
SurfacePropertyConvectionCoefficientsMultipleSurfaceVector_swigregister(SurfacePropertyConvectionCoefficientsMultipleSurfaceVector)

class OptionalSurfacePropertyConvectionCoefficientsMultipleSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSurfacePropertyConvectionCoefficientsMultipleSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSurfacePropertyConvectionCoefficientsMultipleSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSurfacePropertyConvectionCoefficientsMultipleSurface(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_reset(self)

    def __ref__(self) -> "openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_isNull(self)

    def get(self) -> "openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_get(self)

    def set(self, t: 'SurfacePropertyConvectionCoefficientsMultipleSurface') -> "void":
        return _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSurfacePropertyConvectionCoefficientsMultipleSurface
    __del__ = lambda self: None
OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_swigregister = _openstudiomodelsimulation.OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_swigregister
OptionalSurfacePropertyConvectionCoefficientsMultipleSurface_swigregister(OptionalSurfacePropertyConvectionCoefficientsMultipleSurface)

class OptionalRunPeriod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRunPeriod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRunPeriod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalRunPeriod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriod_reset(self)

    def __ref__(self) -> "openstudio::model::RunPeriod":
        return _openstudiomodelsimulation.OptionalRunPeriod___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriod_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriod_isNull(self)

    def get(self) -> "openstudio::model::RunPeriod":
        return _openstudiomodelsimulation.OptionalRunPeriod_get(self)

    def set(self, t: 'RunPeriod') -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriod_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalRunPeriod
    __del__ = lambda self: None
OptionalRunPeriod_swigregister = _openstudiomodelsimulation.OptionalRunPeriod_swigregister
OptionalRunPeriod_swigregister(OptionalRunPeriod)

class OptionalShadowCalculation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalShadowCalculation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalShadowCalculation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalShadowCalculation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalShadowCalculation_reset(self)

    def __ref__(self) -> "openstudio::model::ShadowCalculation":
        return _openstudiomodelsimulation.OptionalShadowCalculation___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalShadowCalculation_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalShadowCalculation_isNull(self)

    def get(self) -> "openstudio::model::ShadowCalculation":
        return _openstudiomodelsimulation.OptionalShadowCalculation_get(self)

    def set(self, t: 'ShadowCalculation') -> "void":
        return _openstudiomodelsimulation.OptionalShadowCalculation_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalShadowCalculation
    __del__ = lambda self: None
OptionalShadowCalculation_swigregister = _openstudiomodelsimulation.OptionalShadowCalculation_swigregister
OptionalShadowCalculation_swigregister(OptionalShadowCalculation)

class RunPeriodControlSpecialDaysVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunPeriodControlSpecialDaysVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunPeriodControlSpecialDaysVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::value_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RunPeriodControlSpecialDays >::difference_type', j: 'std::vector< openstudio::model::RunPeriodControlSpecialDays >::difference_type') -> "std::vector< openstudio::model::RunPeriodControlSpecialDays,std::allocator< openstudio::model::RunPeriodControlSpecialDays > > *":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RunPeriodControlSpecialDays >::difference_type', j: 'std::vector< openstudio::model::RunPeriodControlSpecialDays >::difference_type') -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::value_type const &":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector___setitem__(self, *args)

    def append(self, x: 'RunPeriodControlSpecialDays') -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_clear(self)

    def swap(self, v: 'RunPeriodControlSpecialDaysVector') -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::allocator_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::reverse_iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::reverse_iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::iterator":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_RunPeriodControlSpecialDaysVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RunPeriodControlSpecialDays') -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::value_type const &":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::value_type const &":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type', x: 'RunPeriodControlSpecialDays') -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type', x: 'RunPeriodControlSpecialDays') -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type') -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RunPeriodControlSpecialDays >::size_type":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_RunPeriodControlSpecialDaysVector
    __del__ = lambda self: None
RunPeriodControlSpecialDaysVector_swigregister = _openstudiomodelsimulation.RunPeriodControlSpecialDaysVector_swigregister
RunPeriodControlSpecialDaysVector_swigregister(RunPeriodControlSpecialDaysVector)

class OptionalRunPeriodControlSpecialDays(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRunPeriodControlSpecialDays, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRunPeriodControlSpecialDays, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalRunPeriodControlSpecialDays(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_reset(self)

    def __ref__(self) -> "openstudio::model::RunPeriodControlSpecialDays":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_isNull(self)

    def get(self) -> "openstudio::model::RunPeriodControlSpecialDays":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_get(self)

    def set(self, t: 'RunPeriodControlSpecialDays') -> "void":
        return _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalRunPeriodControlSpecialDays
    __del__ = lambda self: None
OptionalRunPeriodControlSpecialDays_swigregister = _openstudiomodelsimulation.OptionalRunPeriodControlSpecialDays_swigregister
OptionalRunPeriodControlSpecialDays_swigregister(OptionalRunPeriodControlSpecialDays)

class OptionalTimestep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalTimestep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalTimestep, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalTimestep(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalTimestep_reset(self)

    def __ref__(self) -> "openstudio::model::Timestep":
        return _openstudiomodelsimulation.OptionalTimestep___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalTimestep_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalTimestep_isNull(self)

    def get(self) -> "openstudio::model::Timestep":
        return _openstudiomodelsimulation.OptionalTimestep_get(self)

    def set(self, t: 'Timestep') -> "void":
        return _openstudiomodelsimulation.OptionalTimestep_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalTimestep
    __del__ = lambda self: None
OptionalTimestep_swigregister = _openstudiomodelsimulation.OptionalTimestep_swigregister
OptionalTimestep_swigregister(OptionalTimestep)

class OptionalZoneAirContaminantBalance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneAirContaminantBalance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneAirContaminantBalance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalZoneAirContaminantBalance(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneAirContaminantBalance":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_isNull(self)

    def get(self) -> "openstudio::model::ZoneAirContaminantBalance":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_get(self)

    def set(self, t: 'ZoneAirContaminantBalance') -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalZoneAirContaminantBalance
    __del__ = lambda self: None
OptionalZoneAirContaminantBalance_swigregister = _openstudiomodelsimulation.OptionalZoneAirContaminantBalance_swigregister
OptionalZoneAirContaminantBalance_swigregister(OptionalZoneAirContaminantBalance)

class OptionalZoneAirHeatBalanceAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneAirHeatBalanceAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneAirHeatBalanceAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalZoneAirHeatBalanceAlgorithm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneAirHeatBalanceAlgorithm":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_isNull(self)

    def get(self) -> "openstudio::model::ZoneAirHeatBalanceAlgorithm":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_get(self)

    def set(self, t: 'ZoneAirHeatBalanceAlgorithm') -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalZoneAirHeatBalanceAlgorithm
    __del__ = lambda self: None
OptionalZoneAirHeatBalanceAlgorithm_swigregister = _openstudiomodelsimulation.OptionalZoneAirHeatBalanceAlgorithm_swigregister
OptionalZoneAirHeatBalanceAlgorithm_swigregister(OptionalZoneAirHeatBalanceAlgorithm)

class OptionalZoneAirMassFlowConservation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneAirMassFlowConservation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneAirMassFlowConservation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalZoneAirMassFlowConservation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneAirMassFlowConservation":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_isNull(self)

    def get(self) -> "openstudio::model::ZoneAirMassFlowConservation":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_get(self)

    def set(self, t: 'ZoneAirMassFlowConservation') -> "void":
        return _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalZoneAirMassFlowConservation
    __del__ = lambda self: None
OptionalZoneAirMassFlowConservation_swigregister = _openstudiomodelsimulation.OptionalZoneAirMassFlowConservation_swigregister
OptionalZoneAirMassFlowConservation_swigregister(OptionalZoneAirMassFlowConservation)

class OptionalZoneCapacitanceMultiplierResearchSpecial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneCapacitanceMultiplierResearchSpecial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneCapacitanceMultiplierResearchSpecial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalZoneCapacitanceMultiplierResearchSpecial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_reset(self)

    def __ref__(self) -> "openstudio::model::ZoneCapacitanceMultiplierResearchSpecial":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_isNull(self)

    def get(self) -> "openstudio::model::ZoneCapacitanceMultiplierResearchSpecial":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_get(self)

    def set(self, t: 'ZoneCapacitanceMultiplierResearchSpecial') -> "void":
        return _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalZoneCapacitanceMultiplierResearchSpecial
    __del__ = lambda self: None
OptionalZoneCapacitanceMultiplierResearchSpecial_swigregister = _openstudiomodelsimulation.OptionalZoneCapacitanceMultiplierResearchSpecial_swigregister
OptionalZoneCapacitanceMultiplierResearchSpecial_swigregister(OptionalZoneCapacitanceMultiplierResearchSpecial)

class SkyTemperatureVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyTemperatureVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyTemperatureVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SkyTemperatureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SkyTemperatureVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SkyTemperatureVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SkyTemperature >::size_type":
        return _openstudiomodelsimulation.SkyTemperatureVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SkyTemperature >::value_type":
        return _openstudiomodelsimulation.SkyTemperatureVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SkyTemperature >::difference_type', j: 'std::vector< openstudio::model::SkyTemperature >::difference_type') -> "std::vector< openstudio::model::SkyTemperature,std::allocator< openstudio::model::SkyTemperature > > *":
        return _openstudiomodelsimulation.SkyTemperatureVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SkyTemperature >::difference_type', j: 'std::vector< openstudio::model::SkyTemperature >::difference_type') -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SkyTemperature >::value_type const &":
        return _openstudiomodelsimulation.SkyTemperatureVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector___setitem__(self, *args)

    def append(self, x: 'SkyTemperature') -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SkyTemperatureVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SkyTemperature >::size_type":
        return _openstudiomodelsimulation.SkyTemperatureVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_clear(self)

    def swap(self, v: 'SkyTemperatureVector') -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SkyTemperature >::allocator_type":
        return _openstudiomodelsimulation.SkyTemperatureVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SkyTemperature >::iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SkyTemperature >::iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SkyTemperature >::reverse_iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SkyTemperature >::reverse_iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SkyTemperature >::iterator":
        return _openstudiomodelsimulation.SkyTemperatureVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_SkyTemperatureVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SkyTemperature') -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SkyTemperature >::value_type const &":
        return _openstudiomodelsimulation.SkyTemperatureVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SkyTemperature >::value_type const &":
        return _openstudiomodelsimulation.SkyTemperatureVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SkyTemperature >::size_type', x: 'SkyTemperature') -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SkyTemperature >::size_type', x: 'SkyTemperature') -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SkyTemperature >::size_type') -> "void":
        return _openstudiomodelsimulation.SkyTemperatureVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SkyTemperature >::size_type":
        return _openstudiomodelsimulation.SkyTemperatureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SkyTemperatureVector
    __del__ = lambda self: None
SkyTemperatureVector_swigregister = _openstudiomodelsimulation.SkyTemperatureVector_swigregister
SkyTemperatureVector_swigregister(SkyTemperatureVector)

class OptionalSkyTemperature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSkyTemperature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSkyTemperature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSkyTemperature(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSkyTemperature_reset(self)

    def __ref__(self) -> "openstudio::model::SkyTemperature":
        return _openstudiomodelsimulation.OptionalSkyTemperature___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSkyTemperature_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSkyTemperature_isNull(self)

    def get(self) -> "openstudio::model::SkyTemperature":
        return _openstudiomodelsimulation.OptionalSkyTemperature_get(self)

    def set(self, t: 'SkyTemperature') -> "void":
        return _openstudiomodelsimulation.OptionalSkyTemperature_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSkyTemperature
    __del__ = lambda self: None
OptionalSkyTemperature_swigregister = _openstudiomodelsimulation.OptionalSkyTemperature_swigregister
OptionalSkyTemperature_swigregister(OptionalSkyTemperature)

class SiteGroundReflectanceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundReflectanceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundReflectanceVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::size_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::value_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SiteGroundReflectance >::difference_type', j: 'std::vector< openstudio::model::SiteGroundReflectance >::difference_type') -> "std::vector< openstudio::model::SiteGroundReflectance,std::allocator< openstudio::model::SiteGroundReflectance > > *":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SiteGroundReflectance >::difference_type', j: 'std::vector< openstudio::model::SiteGroundReflectance >::difference_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundReflectance >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector___setitem__(self, *args)

    def append(self, x: 'SiteGroundReflectance') -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::size_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_clear(self)

    def swap(self, v: 'SiteGroundReflectanceVector') -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundReflectance >::iterator":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_SiteGroundReflectanceVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SiteGroundReflectance') -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SiteGroundReflectance >::size_type', x: 'SiteGroundReflectance') -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SiteGroundReflectance >::size_type', x: 'SiteGroundReflectance') -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SiteGroundReflectance >::size_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundReflectance >::size_type":
        return _openstudiomodelsimulation.SiteGroundReflectanceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundReflectanceVector
    __del__ = lambda self: None
SiteGroundReflectanceVector_swigregister = _openstudiomodelsimulation.SiteGroundReflectanceVector_swigregister
SiteGroundReflectanceVector_swigregister(SiteGroundReflectanceVector)

class OptionalSiteGroundReflectance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSiteGroundReflectance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSiteGroundReflectance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSiteGroundReflectance(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundReflectance":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundReflectance":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_get(self)

    def set(self, t: 'SiteGroundReflectance') -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundReflectance_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundReflectance
    __del__ = lambda self: None
OptionalSiteGroundReflectance_swigregister = _openstudiomodelsimulation.OptionalSiteGroundReflectance_swigregister
OptionalSiteGroundReflectance_swigregister(OptionalSiteGroundReflectance)

class SiteGroundTemperatureBuildingSurfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundTemperatureBuildingSurfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundTemperatureBuildingSurfaceVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::value_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::difference_type', j: 'std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::difference_type') -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface,std::allocator< openstudio::model::SiteGroundTemperatureBuildingSurface > > *":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::difference_type', j: 'std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::difference_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector___setitem__(self, *args)

    def append(self, x: 'SiteGroundTemperatureBuildingSurface') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_clear(self)

    def swap(self, v: 'SiteGroundTemperatureBuildingSurfaceVector') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_SiteGroundTemperatureBuildingSurfaceVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SiteGroundTemperatureBuildingSurface') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type', x: 'SiteGroundTemperatureBuildingSurface') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type', x: 'SiteGroundTemperatureBuildingSurface') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureBuildingSurfaceVector
    __del__ = lambda self: None
SiteGroundTemperatureBuildingSurfaceVector_swigregister = _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurfaceVector_swigregister
SiteGroundTemperatureBuildingSurfaceVector_swigregister(SiteGroundTemperatureBuildingSurfaceVector)

class OptionalSiteGroundTemperatureBuildingSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSiteGroundTemperatureBuildingSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSiteGroundTemperatureBuildingSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSiteGroundTemperatureBuildingSurface(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundTemperatureBuildingSurface":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundTemperatureBuildingSurface":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_get(self)

    def set(self, t: 'SiteGroundTemperatureBuildingSurface') -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundTemperatureBuildingSurface
    __del__ = lambda self: None
OptionalSiteGroundTemperatureBuildingSurface_swigregister = _openstudiomodelsimulation.OptionalSiteGroundTemperatureBuildingSurface_swigregister
OptionalSiteGroundTemperatureBuildingSurface_swigregister(OptionalSiteGroundTemperatureBuildingSurface)

class SiteGroundTemperatureDeepVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundTemperatureDeepVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundTemperatureDeepVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::value_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SiteGroundTemperatureDeep >::difference_type', j: 'std::vector< openstudio::model::SiteGroundTemperatureDeep >::difference_type') -> "std::vector< openstudio::model::SiteGroundTemperatureDeep,std::allocator< openstudio::model::SiteGroundTemperatureDeep > > *":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SiteGroundTemperatureDeep >::difference_type', j: 'std::vector< openstudio::model::SiteGroundTemperatureDeep >::difference_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector___setitem__(self, *args)

    def append(self, x: 'SiteGroundTemperatureDeep') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_clear(self)

    def swap(self, v: 'SiteGroundTemperatureDeepVector') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_SiteGroundTemperatureDeepVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SiteGroundTemperatureDeep') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type', x: 'SiteGroundTemperatureDeep') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type', x: 'SiteGroundTemperatureDeep') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundTemperatureDeep >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureDeepVector
    __del__ = lambda self: None
SiteGroundTemperatureDeepVector_swigregister = _openstudiomodelsimulation.SiteGroundTemperatureDeepVector_swigregister
SiteGroundTemperatureDeepVector_swigregister(SiteGroundTemperatureDeepVector)

class OptionalSiteGroundTemperatureDeep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSiteGroundTemperatureDeep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSiteGroundTemperatureDeep, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSiteGroundTemperatureDeep(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundTemperatureDeep":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundTemperatureDeep":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_get(self)

    def set(self, t: 'SiteGroundTemperatureDeep') -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundTemperatureDeep
    __del__ = lambda self: None
OptionalSiteGroundTemperatureDeep_swigregister = _openstudiomodelsimulation.OptionalSiteGroundTemperatureDeep_swigregister
OptionalSiteGroundTemperatureDeep_swigregister(OptionalSiteGroundTemperatureDeep)

class SiteGroundTemperatureShallowVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundTemperatureShallowVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundTemperatureShallowVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::value_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SiteGroundTemperatureShallow >::difference_type', j: 'std::vector< openstudio::model::SiteGroundTemperatureShallow >::difference_type') -> "std::vector< openstudio::model::SiteGroundTemperatureShallow,std::allocator< openstudio::model::SiteGroundTemperatureShallow > > *":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SiteGroundTemperatureShallow >::difference_type', j: 'std::vector< openstudio::model::SiteGroundTemperatureShallow >::difference_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector___setitem__(self, *args)

    def append(self, x: 'SiteGroundTemperatureShallow') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_clear(self)

    def swap(self, v: 'SiteGroundTemperatureShallowVector') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_SiteGroundTemperatureShallowVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SiteGroundTemperatureShallow') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type', x: 'SiteGroundTemperatureShallow') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type', x: 'SiteGroundTemperatureShallow') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundTemperatureShallow >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureShallowVector
    __del__ = lambda self: None
SiteGroundTemperatureShallowVector_swigregister = _openstudiomodelsimulation.SiteGroundTemperatureShallowVector_swigregister
SiteGroundTemperatureShallowVector_swigregister(SiteGroundTemperatureShallowVector)

class OptionalSiteGroundTemperatureShallow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSiteGroundTemperatureShallow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSiteGroundTemperatureShallow, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSiteGroundTemperatureShallow(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundTemperatureShallow":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundTemperatureShallow":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_get(self)

    def set(self, t: 'SiteGroundTemperatureShallow') -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundTemperatureShallow
    __del__ = lambda self: None
OptionalSiteGroundTemperatureShallow_swigregister = _openstudiomodelsimulation.OptionalSiteGroundTemperatureShallow_swigregister
OptionalSiteGroundTemperatureShallow_swigregister(OptionalSiteGroundTemperatureShallow)

class SiteGroundTemperatureFCfactorMethodVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundTemperatureFCfactorMethodVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundTemperatureFCfactorMethodVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::value_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::difference_type', j: 'std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::difference_type') -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod,std::allocator< openstudio::model::SiteGroundTemperatureFCfactorMethod > > *":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::difference_type', j: 'std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::difference_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector___setitem__(self, *args)

    def append(self, x: 'SiteGroundTemperatureFCfactorMethod') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_clear(self)

    def swap(self, v: 'SiteGroundTemperatureFCfactorMethodVector') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::allocator_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::reverse_iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::iterator":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_SiteGroundTemperatureFCfactorMethodVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SiteGroundTemperatureFCfactorMethod') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::value_type const &":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type', x: 'SiteGroundTemperatureFCfactorMethod') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type', x: 'SiteGroundTemperatureFCfactorMethod') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type') -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteGroundTemperatureFCfactorMethod >::size_type":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureFCfactorMethodVector
    __del__ = lambda self: None
SiteGroundTemperatureFCfactorMethodVector_swigregister = _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethodVector_swigregister
SiteGroundTemperatureFCfactorMethodVector_swigregister(SiteGroundTemperatureFCfactorMethodVector)

class OptionalSiteGroundTemperatureFCfactorMethod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSiteGroundTemperatureFCfactorMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSiteGroundTemperatureFCfactorMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSiteGroundTemperatureFCfactorMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_reset(self)

    def __ref__(self) -> "openstudio::model::SiteGroundTemperatureFCfactorMethod":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_isNull(self)

    def get(self) -> "openstudio::model::SiteGroundTemperatureFCfactorMethod":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_get(self)

    def set(self, t: 'SiteGroundTemperatureFCfactorMethod') -> "void":
        return _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteGroundTemperatureFCfactorMethod
    __del__ = lambda self: None
OptionalSiteGroundTemperatureFCfactorMethod_swigregister = _openstudiomodelsimulation.OptionalSiteGroundTemperatureFCfactorMethod_swigregister
OptionalSiteGroundTemperatureFCfactorMethod_swigregister(OptionalSiteGroundTemperatureFCfactorMethod)

class SiteWaterMainsTemperatureVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteWaterMainsTemperatureVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SiteWaterMainsTemperatureVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::value_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SiteWaterMainsTemperature >::difference_type', j: 'std::vector< openstudio::model::SiteWaterMainsTemperature >::difference_type') -> "std::vector< openstudio::model::SiteWaterMainsTemperature,std::allocator< openstudio::model::SiteWaterMainsTemperature > > *":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SiteWaterMainsTemperature >::difference_type', j: 'std::vector< openstudio::model::SiteWaterMainsTemperature >::difference_type') -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::value_type const &":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector___setitem__(self, *args)

    def append(self, x: 'SiteWaterMainsTemperature') -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_clear(self)

    def swap(self, v: 'SiteWaterMainsTemperatureVector') -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::allocator_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::reverse_iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::reverse_iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::iterator":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_SiteWaterMainsTemperatureVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SiteWaterMainsTemperature') -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::value_type const &":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::value_type const &":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type', x: 'SiteWaterMainsTemperature') -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type', x: 'SiteWaterMainsTemperature') -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type') -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SiteWaterMainsTemperature >::size_type":
        return _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteWaterMainsTemperatureVector
    __del__ = lambda self: None
SiteWaterMainsTemperatureVector_swigregister = _openstudiomodelsimulation.SiteWaterMainsTemperatureVector_swigregister
SiteWaterMainsTemperatureVector_swigregister(SiteWaterMainsTemperatureVector)

class OptionalSiteWaterMainsTemperature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSiteWaterMainsTemperature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSiteWaterMainsTemperature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalSiteWaterMainsTemperature(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_reset(self)

    def __ref__(self) -> "openstudio::model::SiteWaterMainsTemperature":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_isNull(self)

    def get(self) -> "openstudio::model::SiteWaterMainsTemperature":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_get(self)

    def set(self, t: 'SiteWaterMainsTemperature') -> "void":
        return _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalSiteWaterMainsTemperature
    __del__ = lambda self: None
OptionalSiteWaterMainsTemperature_swigregister = _openstudiomodelsimulation.OptionalSiteWaterMainsTemperature_swigregister
OptionalSiteWaterMainsTemperature_swigregister(OptionalSiteWaterMainsTemperature)

class OptionalYearDescription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalYearDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalYearDescription, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalYearDescription(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalYearDescription_reset(self)

    def __ref__(self) -> "openstudio::model::YearDescription":
        return _openstudiomodelsimulation.OptionalYearDescription___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalYearDescription_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalYearDescription_isNull(self)

    def get(self) -> "openstudio::model::YearDescription":
        return _openstudiomodelsimulation.OptionalYearDescription_get(self)

    def set(self, t: 'YearDescription') -> "void":
        return _openstudiomodelsimulation.OptionalYearDescription_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalYearDescription
    __del__ = lambda self: None
OptionalYearDescription_swigregister = _openstudiomodelsimulation.OptionalYearDescription_swigregister
OptionalYearDescription_swigregister(OptionalYearDescription)

class FoundationKivaSettingsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FoundationKivaSettingsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FoundationKivaSettingsVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::size_type":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::value_type":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::FoundationKivaSettings >::difference_type', j: 'std::vector< openstudio::model::FoundationKivaSettings >::difference_type') -> "std::vector< openstudio::model::FoundationKivaSettings,std::allocator< openstudio::model::FoundationKivaSettings > > *":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::FoundationKivaSettings >::difference_type', j: 'std::vector< openstudio::model::FoundationKivaSettings >::difference_type') -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FoundationKivaSettings >::value_type const &":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector___setitem__(self, *args)

    def append(self, x: 'FoundationKivaSettings') -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::size_type":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_clear(self)

    def swap(self, v: 'FoundationKivaSettingsVector') -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::allocator_type":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::iterator":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::iterator":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::reverse_iterator":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::reverse_iterator":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FoundationKivaSettings >::iterator":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_FoundationKivaSettingsVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'FoundationKivaSettings') -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::value_type const &":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::value_type const &":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::FoundationKivaSettings >::size_type', x: 'FoundationKivaSettings') -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::FoundationKivaSettings >::size_type', x: 'FoundationKivaSettings') -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::FoundationKivaSettings >::size_type') -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FoundationKivaSettings >::size_type":
        return _openstudiomodelsimulation.FoundationKivaSettingsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_FoundationKivaSettingsVector
    __del__ = lambda self: None
FoundationKivaSettingsVector_swigregister = _openstudiomodelsimulation.FoundationKivaSettingsVector_swigregister
FoundationKivaSettingsVector_swigregister(FoundationKivaSettingsVector)

class OptionalFoundationKivaSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalFoundationKivaSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalFoundationKivaSettings, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_OptionalFoundationKivaSettings(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_reset(self)

    def __ref__(self) -> "openstudio::model::FoundationKivaSettings":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_isNull(self)

    def get(self) -> "openstudio::model::FoundationKivaSettings":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_get(self)

    def set(self, t: 'FoundationKivaSettings') -> "void":
        return _openstudiomodelsimulation.OptionalFoundationKivaSettings_set(self, t)
    __swig_destroy__ = _openstudiomodelsimulation.delete_OptionalFoundationKivaSettings
    __del__ = lambda self: None
OptionalFoundationKivaSettings_swigregister = _openstudiomodelsimulation.OptionalFoundationKivaSettings_swigregister
OptionalFoundationKivaSettings_swigregister(OptionalFoundationKivaSettings)

class SimulationControl(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationControl, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationControl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SimulationControl
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SimulationControl_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SimulationControl_iddObjectType)
    __swig_getmethods__["validSolarDistributionValues"] = lambda x: _openstudiomodelsimulation.SimulationControl_validSolarDistributionValues
    if _newclass:
        validSolarDistributionValues = staticmethod(_openstudiomodelsimulation.SimulationControl_validSolarDistributionValues)

    def doZoneSizingCalculation(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_doZoneSizingCalculation(self)

    def isDoZoneSizingCalculationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isDoZoneSizingCalculationDefaulted(self)

    def doSystemSizingCalculation(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_doSystemSizingCalculation(self)

    def isDoSystemSizingCalculationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isDoSystemSizingCalculationDefaulted(self)

    def doPlantSizingCalculation(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_doPlantSizingCalculation(self)

    def isDoPlantSizingCalculationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isDoPlantSizingCalculationDefaulted(self)

    def runSimulationforSizingPeriods(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_runSimulationforSizingPeriods(self)

    def isRunSimulationforSizingPeriodsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isRunSimulationforSizingPeriodsDefaulted(self)

    def runSimulationforWeatherFileRunPeriods(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_runSimulationforWeatherFileRunPeriods(self)

    def isRunSimulationforWeatherFileRunPeriodsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isRunSimulationforWeatherFileRunPeriodsDefaulted(self)

    def loadsConvergenceToleranceValue(self) -> "double":
        return _openstudiomodelsimulation.SimulationControl_loadsConvergenceToleranceValue(self)

    def getLoadsConvergenceToleranceValue(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.SimulationControl_getLoadsConvergenceToleranceValue(self, returnIP)

    def isLoadsConvergenceToleranceValueDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isLoadsConvergenceToleranceValueDefaulted(self)

    def temperatureConvergenceToleranceValue(self) -> "double":
        return _openstudiomodelsimulation.SimulationControl_temperatureConvergenceToleranceValue(self)

    def getTemperatureConvergenceToleranceValue(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.SimulationControl_getTemperatureConvergenceToleranceValue(self, returnIP)

    def isTemperatureConvergenceToleranceValueDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isTemperatureConvergenceToleranceValueDefaulted(self)

    def solarDistribution(self) -> "std::string":
        return _openstudiomodelsimulation.SimulationControl_solarDistribution(self)

    def isSolarDistributionDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isSolarDistributionDefaulted(self)

    def maximumNumberofWarmupDays(self) -> "int":
        return _openstudiomodelsimulation.SimulationControl_maximumNumberofWarmupDays(self)

    def isMaximumNumberofWarmupDaysDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isMaximumNumberofWarmupDaysDefaulted(self)

    def minimumNumberofWarmupDays(self) -> "int":
        return _openstudiomodelsimulation.SimulationControl_minimumNumberofWarmupDays(self)

    def isMinimumNumberofWarmupDaysDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_isMinimumNumberofWarmupDaysDefaulted(self)

    def setDoZoneSizingCalculation(self, doZoneSizingCalculation: 'bool') -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setDoZoneSizingCalculation(self, doZoneSizingCalculation)

    def setDoZoneSizingCalculationNoFail(self, doZoneSizingCalculation: 'bool') -> "void":
        return _openstudiomodelsimulation.SimulationControl_setDoZoneSizingCalculationNoFail(self, doZoneSizingCalculation)

    def resetDoZoneSizingCalculation(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetDoZoneSizingCalculation(self)

    def setDoSystemSizingCalculation(self, doSystemSizingCalculation: 'bool') -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setDoSystemSizingCalculation(self, doSystemSizingCalculation)

    def setDoSystemSizingCalculationNoFail(self, doSystemSizingCalculation: 'bool') -> "void":
        return _openstudiomodelsimulation.SimulationControl_setDoSystemSizingCalculationNoFail(self, doSystemSizingCalculation)

    def resetDoSystemSizingCalculation(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetDoSystemSizingCalculation(self)

    def setDoPlantSizingCalculation(self, doPlantSizingCalculation: 'bool') -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setDoPlantSizingCalculation(self, doPlantSizingCalculation)

    def setDoPlantSizingCalculationNoFail(self, doPlantSizingCalculation: 'bool') -> "void":
        return _openstudiomodelsimulation.SimulationControl_setDoPlantSizingCalculationNoFail(self, doPlantSizingCalculation)

    def resetDoPlantSizingCalculation(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetDoPlantSizingCalculation(self)

    def setRunSimulationforSizingPeriods(self, runSimulationforSizingPeriods: 'bool') -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setRunSimulationforSizingPeriods(self, runSimulationforSizingPeriods)

    def setRunSimulationforSizingPeriodsNoFail(self, runSimulationforSizingPeriods: 'bool') -> "void":
        return _openstudiomodelsimulation.SimulationControl_setRunSimulationforSizingPeriodsNoFail(self, runSimulationforSizingPeriods)

    def resetRunSimulationforSizingPeriods(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetRunSimulationforSizingPeriods(self)

    def setRunSimulationforWeatherFileRunPeriods(self, runSimulationforWeatherFileRunPeriods: 'bool') -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setRunSimulationforWeatherFileRunPeriods(self, runSimulationforWeatherFileRunPeriods)

    def setRunSimulationforWeatherFileRunPeriodsNoFail(self, runSimulationforWeatherFileRunPeriods: 'bool') -> "void":
        return _openstudiomodelsimulation.SimulationControl_setRunSimulationforWeatherFileRunPeriodsNoFail(self, runSimulationforWeatherFileRunPeriods)

    def resetRunSimulationforWeatherFileRunPeriods(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetRunSimulationforWeatherFileRunPeriods(self)

    def setLoadsConvergenceToleranceValue(self, *args) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setLoadsConvergenceToleranceValue(self, *args)

    def resetLoadsConvergenceToleranceValue(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetLoadsConvergenceToleranceValue(self)

    def setTemperatureConvergenceToleranceValue(self, *args) -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setTemperatureConvergenceToleranceValue(self, *args)

    def resetTemperatureConvergenceToleranceValue(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetTemperatureConvergenceToleranceValue(self)

    def setSolarDistribution(self, solarDistribution: 'std::string') -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setSolarDistribution(self, solarDistribution)

    def resetSolarDistribution(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetSolarDistribution(self)

    def setMaximumNumberofWarmupDays(self, maximumNumberofWarmupDays: 'int') -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setMaximumNumberofWarmupDays(self, maximumNumberofWarmupDays)

    def resetMaximumNumberofWarmupDays(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetMaximumNumberofWarmupDays(self)

    def setMinimumNumberofWarmupDays(self, minimumNumberofWarmupDays: 'int') -> "bool":
        return _openstudiomodelsimulation.SimulationControl_setMinimumNumberofWarmupDays(self, minimumNumberofWarmupDays)

    def resetMinimumNumberofWarmupDays(self) -> "void":
        return _openstudiomodelsimulation.SimulationControl_resetMinimumNumberofWarmupDays(self)

    def convergenceLimits(self) -> "boost::optional< openstudio::model::ConvergenceLimits >":
        return _openstudiomodelsimulation.SimulationControl_convergenceLimits(self)

    def heatBalanceAlgorithm(self) -> "boost::optional< openstudio::model::HeatBalanceAlgorithm >":
        return _openstudiomodelsimulation.SimulationControl_heatBalanceAlgorithm(self)

    def insideSurfaceConvectionAlgorithm(self) -> "boost::optional< openstudio::model::InsideSurfaceConvectionAlgorithm >":
        return _openstudiomodelsimulation.SimulationControl_insideSurfaceConvectionAlgorithm(self)

    def outsideSurfaceConvectionAlgorithm(self) -> "boost::optional< openstudio::model::OutsideSurfaceConvectionAlgorithm >":
        return _openstudiomodelsimulation.SimulationControl_outsideSurfaceConvectionAlgorithm(self)

    def runPeriods(self) -> "std::vector< openstudio::model::RunPeriod,std::allocator< openstudio::model::RunPeriod > >":
        return _openstudiomodelsimulation.SimulationControl_runPeriods(self)

    def shadowCalculation(self) -> "boost::optional< openstudio::model::ShadowCalculation >":
        return _openstudiomodelsimulation.SimulationControl_shadowCalculation(self)

    def sizingParameters(self) -> "boost::optional< openstudio::model::SizingParameters >":
        return _openstudiomodelsimulation.SimulationControl_sizingParameters(self)

    def timestep(self) -> "boost::optional< openstudio::model::Timestep >":
        return _openstudiomodelsimulation.SimulationControl_timestep(self)

    def zoneAirContaminantBalance(self) -> "boost::optional< openstudio::model::ZoneAirContaminantBalance >":
        return _openstudiomodelsimulation.SimulationControl_zoneAirContaminantBalance(self)

    def zoneAirHeatBalanceAlgorithm(self) -> "boost::optional< openstudio::model::ZoneAirHeatBalanceAlgorithm >":
        return _openstudiomodelsimulation.SimulationControl_zoneAirHeatBalanceAlgorithm(self)

    def zoneAirMassFlowConservation(self) -> "boost::optional< openstudio::model::ZoneAirMassFlowConservation >":
        return _openstudiomodelsimulation.SimulationControl_zoneAirMassFlowConservation(self)

    def zoneCapacitanceMultiplierResearchSpecial(self) -> "boost::optional< openstudio::model::ZoneCapacitanceMultiplierResearchSpecial >":
        return _openstudiomodelsimulation.SimulationControl_zoneCapacitanceMultiplierResearchSpecial(self)

    def sizingEnvironmentPeriods(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SimulationControl_sizingEnvironmentPeriods(self)

    def annualSimulationEnvironmentPeriods(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SimulationControl_annualSimulationEnvironmentPeriods(self)

    def partialYearEnvironmentPeriods(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SimulationControl_partialYearEnvironmentPeriods(self)

    def repeatedIntervalEnvironmentPeriods(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelsimulation.SimulationControl_repeatedIntervalEnvironmentPeriods(self)
SimulationControl_swigregister = _openstudiomodelsimulation.SimulationControl_swigregister
SimulationControl_swigregister(SimulationControl)

def SimulationControl_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SimulationControl_iddObjectType()
SimulationControl_iddObjectType = _openstudiomodelsimulation.SimulationControl_iddObjectType

def SimulationControl_validSolarDistributionValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SimulationControl_validSolarDistributionValues()
SimulationControl_validSolarDistributionValues = _openstudiomodelsimulation.SimulationControl_validSolarDistributionValues


def toSimulationControl(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SimulationControl >":
    return _openstudiomodelsimulation.toSimulationControl(idfObject)
toSimulationControl = _openstudiomodelsimulation.toSimulationControl

def getSimulationControl(t_model: 'Model') -> "openstudio::model::SimulationControl":
    return _openstudiomodelsimulation.getSimulationControl(t_model)
getSimulationControl = _openstudiomodelsimulation.getSimulationControl

def getOptionalSimulationControl(t_model: 'Model') -> "boost::optional< openstudio::model::SimulationControl >":
    return _openstudiomodelsimulation.getOptionalSimulationControl(t_model)
getOptionalSimulationControl = _openstudiomodelsimulation.getOptionalSimulationControl
class LightingSimulationControl(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightingSimulationControl, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightingSimulationControl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_LightingSimulationControl
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.LightingSimulationControl_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.LightingSimulationControl_iddObjectType)

    def runSimulationforDesignDays(self) -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_runSimulationforDesignDays(self)

    def isRunSimulationforDesignDaysDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_isRunSimulationforDesignDaysDefaulted(self)

    def runSimulationforWeatherFileRunPeriods(self) -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_runSimulationforWeatherFileRunPeriods(self)

    def isRunSimulationforWeatherFileRunPeriodsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_isRunSimulationforWeatherFileRunPeriodsDefaulted(self)

    def setRunSimulationforDesignDays(self, runSimulationforDesignDays: 'bool') -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_setRunSimulationforDesignDays(self, runSimulationforDesignDays)

    def resetRunSimulationforDesignDays(self) -> "void":
        return _openstudiomodelsimulation.LightingSimulationControl_resetRunSimulationforDesignDays(self)

    def setRunSimulationforWeatherFileRunPeriods(self, runSimulationforWeatherFileRunPeriods: 'bool') -> "bool":
        return _openstudiomodelsimulation.LightingSimulationControl_setRunSimulationforWeatherFileRunPeriods(self, runSimulationforWeatherFileRunPeriods)

    def resetRunSimulationforWeatherFileRunPeriods(self) -> "void":
        return _openstudiomodelsimulation.LightingSimulationControl_resetRunSimulationforWeatherFileRunPeriods(self)
LightingSimulationControl_swigregister = _openstudiomodelsimulation.LightingSimulationControl_swigregister
LightingSimulationControl_swigregister(LightingSimulationControl)

def LightingSimulationControl_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.LightingSimulationControl_iddObjectType()
LightingSimulationControl_iddObjectType = _openstudiomodelsimulation.LightingSimulationControl_iddObjectType


def toLightingSimulationControl(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::LightingSimulationControl >":
    return _openstudiomodelsimulation.toLightingSimulationControl(idfObject)
toLightingSimulationControl = _openstudiomodelsimulation.toLightingSimulationControl

def getLightingSimulationControl(t_model: 'Model') -> "openstudio::model::LightingSimulationControl":
    return _openstudiomodelsimulation.getLightingSimulationControl(t_model)
getLightingSimulationControl = _openstudiomodelsimulation.getLightingSimulationControl

def getOptionalLightingSimulationControl(t_model: 'Model') -> "boost::optional< openstudio::model::LightingSimulationControl >":
    return _openstudiomodelsimulation.getOptionalLightingSimulationControl(t_model)
getOptionalLightingSimulationControl = _openstudiomodelsimulation.getOptionalLightingSimulationControl
class SizingParameters(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizingParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SizingParameters, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SizingParameters
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SizingParameters_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SizingParameters_iddObjectType)

    def heatingSizingFactor(self) -> "double":
        return _openstudiomodelsimulation.SizingParameters_heatingSizingFactor(self)

    def getHeatingSizingFactor(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.SizingParameters_getHeatingSizingFactor(self, returnIP)

    def isHeatingSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SizingParameters_isHeatingSizingFactorDefaulted(self)

    def coolingSizingFactor(self) -> "double":
        return _openstudiomodelsimulation.SizingParameters_coolingSizingFactor(self)

    def getCoolingSizingFactor(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.SizingParameters_getCoolingSizingFactor(self, returnIP)

    def isCoolingSizingFactorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SizingParameters_isCoolingSizingFactorDefaulted(self)

    def timestepsinAveragingWindow(self) -> "boost::optional< int >":
        return _openstudiomodelsimulation.SizingParameters_timestepsinAveragingWindow(self)

    def setHeatingSizingFactor(self, *args) -> "bool":
        return _openstudiomodelsimulation.SizingParameters_setHeatingSizingFactor(self, *args)

    def resetHeatingSizingFactor(self) -> "void":
        return _openstudiomodelsimulation.SizingParameters_resetHeatingSizingFactor(self)

    def setCoolingSizingFactor(self, *args) -> "bool":
        return _openstudiomodelsimulation.SizingParameters_setCoolingSizingFactor(self, *args)

    def resetCoolingSizingFactor(self) -> "void":
        return _openstudiomodelsimulation.SizingParameters_resetCoolingSizingFactor(self)

    def setTimestepsinAveragingWindow(self, timestepsinAveragingWindow: 'int') -> "bool":
        return _openstudiomodelsimulation.SizingParameters_setTimestepsinAveragingWindow(self, timestepsinAveragingWindow)

    def resetTimestepsinAveragingWindow(self) -> "void":
        return _openstudiomodelsimulation.SizingParameters_resetTimestepsinAveragingWindow(self)
SizingParameters_swigregister = _openstudiomodelsimulation.SizingParameters_swigregister
SizingParameters_swigregister(SizingParameters)

def SizingParameters_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SizingParameters_iddObjectType()
SizingParameters_iddObjectType = _openstudiomodelsimulation.SizingParameters_iddObjectType


def toSizingParameters(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SizingParameters >":
    return _openstudiomodelsimulation.toSizingParameters(idfObject)
toSizingParameters = _openstudiomodelsimulation.toSizingParameters

def getSizingParameters(t_model: 'Model') -> "openstudio::model::SizingParameters":
    return _openstudiomodelsimulation.getSizingParameters(t_model)
getSizingParameters = _openstudiomodelsimulation.getSizingParameters

def getOptionalSizingParameters(t_model: 'Model') -> "boost::optional< openstudio::model::SizingParameters >":
    return _openstudiomodelsimulation.getOptionalSizingParameters(t_model)
getOptionalSizingParameters = _openstudiomodelsimulation.getOptionalSizingParameters
class SizingPeriod(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizingPeriod, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SizingPeriod, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SizingPeriod
    __del__ = lambda self: None

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.SizingPeriod_ensureNoLeapDays(self)
SizingPeriod_swigregister = _openstudiomodelsimulation.SizingPeriod_swigregister
SizingPeriod_swigregister(SizingPeriod)


def toSizingPeriod(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SizingPeriod >":
    return _openstudiomodelsimulation.toSizingPeriod(idfObject)
toSizingPeriod = _openstudiomodelsimulation.toSizingPeriod

def getSizingPeriod(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SizingPeriod >":
    return _openstudiomodelsimulation.getSizingPeriod(t_model, t_handle)
getSizingPeriod = _openstudiomodelsimulation.getSizingPeriod

def getSizingPeriods(t_model: 'Model') -> "std::vector< openstudio::model::SizingPeriod,std::allocator< openstudio::model::SizingPeriod > >":
    return _openstudiomodelsimulation.getSizingPeriods(t_model)
getSizingPeriods = _openstudiomodelsimulation.getSizingPeriods

def getSizingPeriodByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SizingPeriod >":
    return _openstudiomodelsimulation.getSizingPeriodByName(t_model, t_name)
getSizingPeriodByName = _openstudiomodelsimulation.getSizingPeriodByName

def getSizingPeriodsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SizingPeriod,std::allocator< openstudio::model::SizingPeriod > >":
    return _openstudiomodelsimulation.getSizingPeriodsByName(t_model, t_name, t_exactMatch)
getSizingPeriodsByName = _openstudiomodelsimulation.getSizingPeriodsByName
class WeatherFile(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeatherFile, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeatherFile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFile
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.WeatherFile_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.WeatherFile_iddObjectType)
    __swig_getmethods__["setWeatherFile"] = lambda x: _openstudiomodelsimulation.WeatherFile_setWeatherFile
    if _newclass:
        setWeatherFile = staticmethod(_openstudiomodelsimulation.WeatherFile_setWeatherFile)

    def city(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_city(self)

    def stateProvinceRegion(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_stateProvinceRegion(self)

    def country(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_country(self)

    def dataSource(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_dataSource(self)

    def wMONumber(self) -> "std::string":
        return _openstudiomodelsimulation.WeatherFile_wMONumber(self)

    def latitude(self) -> "double":
        return _openstudiomodelsimulation.WeatherFile_latitude(self)

    def longitude(self) -> "double":
        return _openstudiomodelsimulation.WeatherFile_longitude(self)

    def timeZone(self) -> "double":
        return _openstudiomodelsimulation.WeatherFile_timeZone(self)

    def elevation(self) -> "double":
        return _openstudiomodelsimulation.WeatherFile_elevation(self)

    def isElevationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.WeatherFile_isElevationDefaulted(self)

    def url(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.WeatherFile_url(self)

    def path(self) -> "boost::optional< openstudio::path >":
        return _openstudiomodelsimulation.WeatherFile_path(self)

    def checksum(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.WeatherFile_checksum(self)

    def setCity(self, city: 'std::string') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setCity(self, city)

    def setStateProvinceRegion(self, stateProvinceRegion: 'std::string') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setStateProvinceRegion(self, stateProvinceRegion)

    def setCountry(self, country: 'std::string') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setCountry(self, country)

    def setDataSource(self, dataSource: 'std::string') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setDataSource(self, dataSource)

    def setWMONumber(self, wMONumber: 'std::string') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setWMONumber(self, wMONumber)

    def setLatitude(self, latitude: 'double') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setLatitude(self, latitude)

    def setLongitude(self, longitude: 'double') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setLongitude(self, longitude)

    def setTimeZone(self, timeZone: 'double') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setTimeZone(self, timeZone)

    def setElevation(self, elevation: 'double') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_setElevation(self, elevation)

    def resetElevation(self) -> "void":
        return _openstudiomodelsimulation.WeatherFile_resetElevation(self)

    def site(self) -> "boost::optional< openstudio::model::Site >":
        return _openstudiomodelsimulation.WeatherFile_site(self)

    def file(self, *args) -> "boost::optional< openstudio::EpwFile >":
        return _openstudiomodelsimulation.WeatherFile_file(self, *args)

    def makeUrlRelative(self, *args) -> "bool":
        return _openstudiomodelsimulation.WeatherFile_makeUrlRelative(self, *args)

    def makeUrlAbsolute(self, searchDirectory: 'path') -> "bool":
        return _openstudiomodelsimulation.WeatherFile_makeUrlAbsolute(self, searchDirectory)

    def environmentName(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.WeatherFile_environmentName(self)
WeatherFile_swigregister = _openstudiomodelsimulation.WeatherFile_swigregister
WeatherFile_swigregister(WeatherFile)

def WeatherFile_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.WeatherFile_iddObjectType()
WeatherFile_iddObjectType = _openstudiomodelsimulation.WeatherFile_iddObjectType

def WeatherFile_setWeatherFile(model: 'Model', epwFile: 'EpwFile') -> "boost::optional< openstudio::model::WeatherFile >":
    return _openstudiomodelsimulation.WeatherFile_setWeatherFile(model, epwFile)
WeatherFile_setWeatherFile = _openstudiomodelsimulation.WeatherFile_setWeatherFile


def toWeatherFile(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WeatherFile >":
    return _openstudiomodelsimulation.toWeatherFile(idfObject)
toWeatherFile = _openstudiomodelsimulation.toWeatherFile

def getWeatherFile(t_model: 'Model') -> "openstudio::model::WeatherFile":
    return _openstudiomodelsimulation.getWeatherFile(t_model)
getWeatherFile = _openstudiomodelsimulation.getWeatherFile

def getOptionalWeatherFile(t_model: 'Model') -> "boost::optional< openstudio::model::WeatherFile >":
    return _openstudiomodelsimulation.getOptionalWeatherFile(t_model)
getOptionalWeatherFile = _openstudiomodelsimulation.getOptionalWeatherFile
class WeatherFileConditionType(SizingPeriod):
    __swig_setmethods__ = {}
    for _s in [SizingPeriod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeatherFileConditionType, name, value)
    __swig_getmethods__ = {}
    for _s in [SizingPeriod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeatherFileConditionType, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelsimulation.new_WeatherFileConditionType(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFileConditionType
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.WeatherFileConditionType_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.WeatherFileConditionType_iddObjectType)
WeatherFileConditionType_swigregister = _openstudiomodelsimulation.WeatherFileConditionType_swigregister
WeatherFileConditionType_swigregister(WeatherFileConditionType)

def WeatherFileConditionType_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.WeatherFileConditionType_iddObjectType()
WeatherFileConditionType_iddObjectType = _openstudiomodelsimulation.WeatherFileConditionType_iddObjectType


def toWeatherFileConditionType(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WeatherFileConditionType >":
    return _openstudiomodelsimulation.toWeatherFileConditionType(idfObject)
toWeatherFileConditionType = _openstudiomodelsimulation.toWeatherFileConditionType

def getWeatherFileConditionType(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WeatherFileConditionType >":
    return _openstudiomodelsimulation.getWeatherFileConditionType(t_model, t_handle)
getWeatherFileConditionType = _openstudiomodelsimulation.getWeatherFileConditionType

def getWeatherFileConditionTypes(t_model: 'Model') -> "std::vector< openstudio::model::WeatherFileConditionType,std::allocator< openstudio::model::WeatherFileConditionType > >":
    return _openstudiomodelsimulation.getWeatherFileConditionTypes(t_model)
getWeatherFileConditionTypes = _openstudiomodelsimulation.getWeatherFileConditionTypes

def getWeatherFileConditionTypeByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WeatherFileConditionType >":
    return _openstudiomodelsimulation.getWeatherFileConditionTypeByName(t_model, t_name)
getWeatherFileConditionTypeByName = _openstudiomodelsimulation.getWeatherFileConditionTypeByName

def getWeatherFileConditionTypesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WeatherFileConditionType,std::allocator< openstudio::model::WeatherFileConditionType > >":
    return _openstudiomodelsimulation.getWeatherFileConditionTypesByName(t_model, t_name, t_exactMatch)
getWeatherFileConditionTypesByName = _openstudiomodelsimulation.getWeatherFileConditionTypesByName
class WeatherFileDays(SizingPeriod):
    __swig_setmethods__ = {}
    for _s in [SizingPeriod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeatherFileDays, name, value)
    __swig_getmethods__ = {}
    for _s in [SizingPeriod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeatherFileDays, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelsimulation.new_WeatherFileDays(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_WeatherFileDays
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.WeatherFileDays_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.WeatherFileDays_iddObjectType)
WeatherFileDays_swigregister = _openstudiomodelsimulation.WeatherFileDays_swigregister
WeatherFileDays_swigregister(WeatherFileDays)

def WeatherFileDays_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.WeatherFileDays_iddObjectType()
WeatherFileDays_iddObjectType = _openstudiomodelsimulation.WeatherFileDays_iddObjectType


def toWeatherFileDays(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WeatherFileDays >":
    return _openstudiomodelsimulation.toWeatherFileDays(idfObject)
toWeatherFileDays = _openstudiomodelsimulation.toWeatherFileDays

def getWeatherFileDays(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WeatherFileDays >":
    return _openstudiomodelsimulation.getWeatherFileDays(t_model, t_handle)
getWeatherFileDays = _openstudiomodelsimulation.getWeatherFileDays

def getWeatherFileDayss(t_model: 'Model') -> "std::vector< openstudio::model::WeatherFileDays,std::allocator< openstudio::model::WeatherFileDays > >":
    return _openstudiomodelsimulation.getWeatherFileDayss(t_model)
getWeatherFileDayss = _openstudiomodelsimulation.getWeatherFileDayss

def getWeatherFileDaysByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WeatherFileDays >":
    return _openstudiomodelsimulation.getWeatherFileDaysByName(t_model, t_name)
getWeatherFileDaysByName = _openstudiomodelsimulation.getWeatherFileDaysByName

def getWeatherFileDayssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WeatherFileDays,std::allocator< openstudio::model::WeatherFileDays > >":
    return _openstudiomodelsimulation.getWeatherFileDayssByName(t_model, t_name, t_exactMatch)
getWeatherFileDayssByName = _openstudiomodelsimulation.getWeatherFileDayssByName
class ClimateZone(openstudiomodelcore.ModelExtensibleGroup):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelExtensibleGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClimateZone, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelExtensibleGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClimateZone, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def institution(self) -> "std::string":
        return _openstudiomodelsimulation.ClimateZone_institution(self)

    def documentName(self) -> "std::string":
        return _openstudiomodelsimulation.ClimateZone_documentName(self)

    def year(self) -> "unsigned int":
        return _openstudiomodelsimulation.ClimateZone_year(self)

    def value(self) -> "std::string":
        return _openstudiomodelsimulation.ClimateZone_value(self)

    def setValue(self, value: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.ClimateZone_setValue(self, value)

    def setType(self, institution: 'std::string const &', documentName: 'std::string const &', year: 'unsigned int') -> "bool":
        return _openstudiomodelsimulation.ClimateZone_setType(self, institution, documentName, year)

    def setTypeAndValue(self, institution: 'std::string const &', documentName: 'std::string const &', year: 'unsigned int', value: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.ClimateZone_setTypeAndValue(self, institution, documentName, year, value)
    __swig_destroy__ = _openstudiomodelsimulation.delete_ClimateZone
    __del__ = lambda self: None
ClimateZone_swigregister = _openstudiomodelsimulation.ClimateZone_swigregister
ClimateZone_swigregister(ClimateZone)

class ClimateZones(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClimateZones, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClimateZones, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ClimateZones
    __del__ = lambda self: None
    __swig_getmethods__["ashraeInstitutionName"] = lambda x: _openstudiomodelsimulation.ClimateZones_ashraeInstitutionName
    if _newclass:
        ashraeInstitutionName = staticmethod(_openstudiomodelsimulation.ClimateZones_ashraeInstitutionName)
    __swig_getmethods__["ashraeDocumentName"] = lambda x: _openstudiomodelsimulation.ClimateZones_ashraeDocumentName
    if _newclass:
        ashraeDocumentName = staticmethod(_openstudiomodelsimulation.ClimateZones_ashraeDocumentName)
    __swig_getmethods__["ashraeDefaultYear"] = lambda x: _openstudiomodelsimulation.ClimateZones_ashraeDefaultYear
    if _newclass:
        ashraeDefaultYear = staticmethod(_openstudiomodelsimulation.ClimateZones_ashraeDefaultYear)
    __swig_getmethods__["cecInstitutionName"] = lambda x: _openstudiomodelsimulation.ClimateZones_cecInstitutionName
    if _newclass:
        cecInstitutionName = staticmethod(_openstudiomodelsimulation.ClimateZones_cecInstitutionName)
    __swig_getmethods__["cecDocumentName"] = lambda x: _openstudiomodelsimulation.ClimateZones_cecDocumentName
    if _newclass:
        cecDocumentName = staticmethod(_openstudiomodelsimulation.ClimateZones_cecDocumentName)
    __swig_getmethods__["cecDefaultYear"] = lambda x: _openstudiomodelsimulation.ClimateZones_cecDefaultYear
    if _newclass:
        cecDefaultYear = staticmethod(_openstudiomodelsimulation.ClimateZones_cecDefaultYear)
    __swig_getmethods__["getDefaultDocumentName"] = lambda x: _openstudiomodelsimulation.ClimateZones_getDefaultDocumentName
    if _newclass:
        getDefaultDocumentName = staticmethod(_openstudiomodelsimulation.ClimateZones_getDefaultDocumentName)
    __swig_getmethods__["getDefaultYear"] = lambda x: _openstudiomodelsimulation.ClimateZones_getDefaultYear
    if _newclass:
        getDefaultYear = staticmethod(_openstudiomodelsimulation.ClimateZones_getDefaultYear)
    __swig_getmethods__["validClimateZoneValues"] = lambda x: _openstudiomodelsimulation.ClimateZones_validClimateZoneValues
    if _newclass:
        validClimateZoneValues = staticmethod(_openstudiomodelsimulation.ClimateZones_validClimateZoneValues)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.ClimateZones_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.ClimateZones_iddObjectType)

    def site(self) -> "boost::optional< openstudio::model::Site >":
        return _openstudiomodelsimulation.ClimateZones_site(self)

    def climateZones(self) -> "std::vector< openstudio::model::ClimateZone,std::allocator< openstudio::model::ClimateZone > >":
        return _openstudiomodelsimulation.ClimateZones_climateZones(self)

    def getClimateZone(self, *args) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.ClimateZones_getClimateZone(self, *args)

    def getClimateZones(self, institution: 'std::string const &') -> "std::vector< openstudio::model::ClimateZone,std::allocator< openstudio::model::ClimateZone > >":
        return _openstudiomodelsimulation.ClimateZones_getClimateZones(self, institution)

    def clear(self) -> "bool":
        return _openstudiomodelsimulation.ClimateZones_clear(self)

    def setClimateZone(self, *args) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.ClimateZones_setClimateZone(self, *args)

    def appendClimateZone(self, *args) -> "openstudio::model::ClimateZone":
        return _openstudiomodelsimulation.ClimateZones_appendClimateZone(self, *args)

    def numClimateZones(self) -> "unsigned int":
        return _openstudiomodelsimulation.ClimateZones_numClimateZones(self)
ClimateZones_swigregister = _openstudiomodelsimulation.ClimateZones_swigregister
ClimateZones_swigregister(ClimateZones)

def ClimateZones_ashraeInstitutionName() -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_ashraeInstitutionName()
ClimateZones_ashraeInstitutionName = _openstudiomodelsimulation.ClimateZones_ashraeInstitutionName

def ClimateZones_ashraeDocumentName() -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_ashraeDocumentName()
ClimateZones_ashraeDocumentName = _openstudiomodelsimulation.ClimateZones_ashraeDocumentName

def ClimateZones_ashraeDefaultYear() -> "unsigned int":
    return _openstudiomodelsimulation.ClimateZones_ashraeDefaultYear()
ClimateZones_ashraeDefaultYear = _openstudiomodelsimulation.ClimateZones_ashraeDefaultYear

def ClimateZones_cecInstitutionName() -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_cecInstitutionName()
ClimateZones_cecInstitutionName = _openstudiomodelsimulation.ClimateZones_cecInstitutionName

def ClimateZones_cecDocumentName() -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_cecDocumentName()
ClimateZones_cecDocumentName = _openstudiomodelsimulation.ClimateZones_cecDocumentName

def ClimateZones_cecDefaultYear() -> "unsigned int":
    return _openstudiomodelsimulation.ClimateZones_cecDefaultYear()
ClimateZones_cecDefaultYear = _openstudiomodelsimulation.ClimateZones_cecDefaultYear

def ClimateZones_getDefaultDocumentName(institution: 'std::string const &') -> "std::string":
    return _openstudiomodelsimulation.ClimateZones_getDefaultDocumentName(institution)
ClimateZones_getDefaultDocumentName = _openstudiomodelsimulation.ClimateZones_getDefaultDocumentName

def ClimateZones_getDefaultYear(institution: 'std::string const &') -> "unsigned int":
    return _openstudiomodelsimulation.ClimateZones_getDefaultYear(institution)
ClimateZones_getDefaultYear = _openstudiomodelsimulation.ClimateZones_getDefaultYear

def ClimateZones_validClimateZoneValues(institution: 'std::string const &', year: 'unsigned int') -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ClimateZones_validClimateZoneValues(institution, year)
ClimateZones_validClimateZoneValues = _openstudiomodelsimulation.ClimateZones_validClimateZoneValues

def ClimateZones_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ClimateZones_iddObjectType()
ClimateZones_iddObjectType = _openstudiomodelsimulation.ClimateZones_iddObjectType


def toClimateZones(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ClimateZones >":
    return _openstudiomodelsimulation.toClimateZones(idfObject)
toClimateZones = _openstudiomodelsimulation.toClimateZones

def getClimateZones(t_model: 'Model') -> "openstudio::model::ClimateZones":
    return _openstudiomodelsimulation.getClimateZones(t_model)
getClimateZones = _openstudiomodelsimulation.getClimateZones

def getOptionalClimateZones(t_model: 'Model') -> "boost::optional< openstudio::model::ClimateZones >":
    return _openstudiomodelsimulation.getOptionalClimateZones(t_model)
getOptionalClimateZones = _openstudiomodelsimulation.getOptionalClimateZones

def toClimateZone(extensibleGroup: 'IdfExtensibleGroup') -> "boost::optional< openstudio::model::ClimateZone >":
    return _openstudiomodelsimulation.toClimateZone(extensibleGroup)
toClimateZone = _openstudiomodelsimulation.toClimateZone
class DesignDay(SizingPeriod):
    __swig_setmethods__ = {}
    for _s in [SizingPeriod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignDay, name, value)
    __swig_getmethods__ = {}
    for _s in [SizingPeriod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignDay, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelsimulation.new_DesignDay(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.DesignDay_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.DesignDay_iddObjectType)
    __swig_getmethods__["validDayTypeValues"] = lambda x: _openstudiomodelsimulation.DesignDay_validDayTypeValues
    if _newclass:
        validDayTypeValues = staticmethod(_openstudiomodelsimulation.DesignDay_validDayTypeValues)
    __swig_getmethods__["validHumidityIndicatingTypeValues"] = lambda x: _openstudiomodelsimulation.DesignDay_validHumidityIndicatingTypeValues
    if _newclass:
        validHumidityIndicatingTypeValues = staticmethod(_openstudiomodelsimulation.DesignDay_validHumidityIndicatingTypeValues)
    __swig_getmethods__["validDryBulbTemperatureRangeModifierTypeValues"] = lambda x: _openstudiomodelsimulation.DesignDay_validDryBulbTemperatureRangeModifierTypeValues
    if _newclass:
        validDryBulbTemperatureRangeModifierTypeValues = staticmethod(_openstudiomodelsimulation.DesignDay_validDryBulbTemperatureRangeModifierTypeValues)
    __swig_getmethods__["validSolarModelIndicatorValues"] = lambda x: _openstudiomodelsimulation.DesignDay_validSolarModelIndicatorValues
    if _newclass:
        validSolarModelIndicatorValues = staticmethod(_openstudiomodelsimulation.DesignDay_validSolarModelIndicatorValues)

    def maximumDryBulbTemperature(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_maximumDryBulbTemperature(self)

    def isMaximumDryBulbTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isMaximumDryBulbTemperatureDefaulted(self)

    def dailyDryBulbTemperatureRange(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_dailyDryBulbTemperatureRange(self)

    def isDailyDryBulbTemperatureRangeDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDailyDryBulbTemperatureRangeDefaulted(self)

    def humidityIndicatingConditionsAtMaximumDryBulb(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_humidityIndicatingConditionsAtMaximumDryBulb(self)

    def isHumidityIndicatingConditionsAtMaximumDryBulbDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isHumidityIndicatingConditionsAtMaximumDryBulbDefaulted(self)

    def barometricPressure(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_barometricPressure(self)

    def isBarometricPressureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isBarometricPressureDefaulted(self)

    def windSpeed(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_windSpeed(self)

    def isWindSpeedDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isWindSpeedDefaulted(self)

    def windDirection(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_windDirection(self)

    def isWindDirectionDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isWindDirectionDefaulted(self)

    def skyClearness(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_skyClearness(self)

    def isSkyClearnessDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isSkyClearnessDefaulted(self)

    def rainIndicator(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_rainIndicator(self)

    def isRainIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isRainIndicatorDefaulted(self)

    def snowIndicator(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_snowIndicator(self)

    def isSnowIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isSnowIndicatorDefaulted(self)

    def dayOfMonth(self) -> "int":
        return _openstudiomodelsimulation.DesignDay_dayOfMonth(self)

    def isDayOfMonthDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDayOfMonthDefaulted(self)

    def month(self) -> "int":
        return _openstudiomodelsimulation.DesignDay_month(self)

    def isMonthDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isMonthDefaulted(self)

    def dayType(self) -> "std::string":
        return _openstudiomodelsimulation.DesignDay_dayType(self)

    def isDayTypeDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDayTypeDefaulted(self)

    def daylightSavingTimeIndicator(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_daylightSavingTimeIndicator(self)

    def isDaylightSavingTimeIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDaylightSavingTimeIndicatorDefaulted(self)

    def humidityIndicatingType(self) -> "std::string":
        return _openstudiomodelsimulation.DesignDay_humidityIndicatingType(self)

    def isHumidityIndicatingTypeDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isHumidityIndicatingTypeDefaulted(self)

    def humidityIndicatingDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelsimulation.DesignDay_humidityIndicatingDaySchedule(self)

    def dryBulbTemperatureRangeModifierType(self) -> "std::string":
        return _openstudiomodelsimulation.DesignDay_dryBulbTemperatureRangeModifierType(self)

    def isDryBulbTemperatureRangeModifierTypeDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isDryBulbTemperatureRangeModifierTypeDefaulted(self)

    def dryBulbTemperatureRangeModifierSchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelsimulation.DesignDay_dryBulbTemperatureRangeModifierSchedule(self)

    def solarModelIndicator(self) -> "std::string":
        return _openstudiomodelsimulation.DesignDay_solarModelIndicator(self)

    def isSolarModelIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isSolarModelIndicatorDefaulted(self)

    def beamSolarDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelsimulation.DesignDay_beamSolarDaySchedule(self)

    def diffuseSolarDaySchedule(self) -> "boost::optional< openstudio::model::ScheduleDay >":
        return _openstudiomodelsimulation.DesignDay_diffuseSolarDaySchedule(self)

    def ashraeTaub(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_ashraeTaub(self)

    def isAshraeTaubDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isAshraeTaubDefaulted(self)

    def ashraeTaud(self) -> "double":
        return _openstudiomodelsimulation.DesignDay_ashraeTaud(self)

    def isAshraeTaudDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.DesignDay_isAshraeTaudDefaulted(self)

    def dailyWetBulbTemperatureRange(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.DesignDay_dailyWetBulbTemperatureRange(self)

    def setMaximumDryBulbTemperature(self, maximumDryBulbTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setMaximumDryBulbTemperature(self, maximumDryBulbTemperature)

    def resetMaximumDryBulbTemperature(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetMaximumDryBulbTemperature(self)

    def setDailyDryBulbTemperatureRange(self, dailyDryBulbTemperatureRange: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDailyDryBulbTemperatureRange(self, dailyDryBulbTemperatureRange)

    def resetDailyDryBulbTemperatureRange(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDailyDryBulbTemperatureRange(self)

    def setHumidityIndicatingConditionsAtMaximumDryBulb(self, humidityIndicatingConditionsAtMaximumDryBulb: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setHumidityIndicatingConditionsAtMaximumDryBulb(self, humidityIndicatingConditionsAtMaximumDryBulb)

    def resetHumidityIndicatingConditionsAtMaximumDryBulb(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetHumidityIndicatingConditionsAtMaximumDryBulb(self)

    def setBarometricPressure(self, barometricPressure: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setBarometricPressure(self, barometricPressure)

    def resetBarometricPressure(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetBarometricPressure(self)

    def setWindSpeed(self, windSpeed: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setWindSpeed(self, windSpeed)

    def resetWindSpeed(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetWindSpeed(self)

    def setWindDirection(self, windDirection: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setWindDirection(self, windDirection)

    def resetWindDirection(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetWindDirection(self)

    def setSkyClearness(self, skyClearness: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setSkyClearness(self, skyClearness)

    def resetSkyClearness(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetSkyClearness(self)

    def setRainIndicator(self, rainIndicator: 'bool') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setRainIndicator(self, rainIndicator)

    def resetRainIndicator(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetRainIndicator(self)

    def setSnowIndicator(self, snowIndicator: 'bool') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setSnowIndicator(self, snowIndicator)

    def resetSnowIndicator(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetSnowIndicator(self)

    def setDayOfMonth(self, dayOfMonth: 'int') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDayOfMonth(self, dayOfMonth)

    def resetDayOfMonth(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDayOfMonth(self)

    def setMonth(self, month: 'int') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setMonth(self, month)

    def resetMonth(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetMonth(self)

    def setDayType(self, dayType: 'std::string') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDayType(self, dayType)

    def resetDayType(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDayType(self)

    def setDaylightSavingTimeIndicator(self, daylightSavingTimeIndicator: 'bool') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDaylightSavingTimeIndicator(self, daylightSavingTimeIndicator)

    def resetDaylightSavingTimeIndicator(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDaylightSavingTimeIndicator(self)

    def setHumidityIndicatingType(self, humidityIndicatingType: 'std::string') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setHumidityIndicatingType(self, humidityIndicatingType)

    def resetHumidityIndicatingType(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetHumidityIndicatingType(self)

    def setHumidityIndicatingDaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setHumidityIndicatingDaySchedule(self, schedule)

    def resetHumidityIndicatingDaySchedule(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetHumidityIndicatingDaySchedule(self)

    def setDryBulbTemperatureRangeModifierType(self, dryBulbTemperatureRangeModifierType: 'std::string') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDryBulbTemperatureRangeModifierType(self, dryBulbTemperatureRangeModifierType)

    def resetDryBulbTemperatureRangeModifierType(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDryBulbTemperatureRangeModifierType(self)

    def setDryBulbTemperatureRangeModifierSchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDryBulbTemperatureRangeModifierSchedule(self, schedule)

    def resetDryBulbTemperatureRangeModifierSchedule(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDryBulbTemperatureRangeModifierSchedule(self)

    def setSolarModelIndicator(self, solarModelIndicator: 'std::string') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setSolarModelIndicator(self, solarModelIndicator)

    def resetSolarModelIndicator(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetSolarModelIndicator(self)

    def setBeamSolarDaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setBeamSolarDaySchedule(self, schedule)

    def resetBeamSolarDaySchedule(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetBeamSolarDaySchedule(self)

    def setDiffuseSolarDaySchedule(self, schedule: 'ScheduleDay') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDiffuseSolarDaySchedule(self, schedule)

    def resetDiffuseSolarDaySchedule(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDiffuseSolarDaySchedule(self)

    def setAshraeTaub(self, aSHRAETaub: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setAshraeTaub(self, aSHRAETaub)

    def resetAshraeTaub(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetAshraeTaub(self)

    def setAshraeTaud(self, aSHRAETaud: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setAshraeTaud(self, aSHRAETaud)

    def resetAshraeTaud(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetAshraeTaud(self)

    def setDailyWetBulbTemperatureRange(self, dailyWetBulbTemperatureRange: 'double') -> "bool":
        return _openstudiomodelsimulation.DesignDay_setDailyWetBulbTemperatureRange(self, dailyWetBulbTemperatureRange)

    def resetDailyWetBulbTemperatureRange(self) -> "void":
        return _openstudiomodelsimulation.DesignDay_resetDailyWetBulbTemperatureRange(self)
    __swig_destroy__ = _openstudiomodelsimulation.delete_DesignDay
    __del__ = lambda self: None
DesignDay_swigregister = _openstudiomodelsimulation.DesignDay_swigregister
DesignDay_swigregister(DesignDay)

def DesignDay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.DesignDay_iddObjectType()
DesignDay_iddObjectType = _openstudiomodelsimulation.DesignDay_iddObjectType

def DesignDay_validDayTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.DesignDay_validDayTypeValues()
DesignDay_validDayTypeValues = _openstudiomodelsimulation.DesignDay_validDayTypeValues

def DesignDay_validHumidityIndicatingTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.DesignDay_validHumidityIndicatingTypeValues()
DesignDay_validHumidityIndicatingTypeValues = _openstudiomodelsimulation.DesignDay_validHumidityIndicatingTypeValues

def DesignDay_validDryBulbTemperatureRangeModifierTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.DesignDay_validDryBulbTemperatureRangeModifierTypeValues()
DesignDay_validDryBulbTemperatureRangeModifierTypeValues = _openstudiomodelsimulation.DesignDay_validDryBulbTemperatureRangeModifierTypeValues

def DesignDay_validSolarModelIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.DesignDay_validSolarModelIndicatorValues()
DesignDay_validSolarModelIndicatorValues = _openstudiomodelsimulation.DesignDay_validSolarModelIndicatorValues


def toDesignDay(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::DesignDay >":
    return _openstudiomodelsimulation.toDesignDay(idfObject)
toDesignDay = _openstudiomodelsimulation.toDesignDay

def getDesignDay(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::DesignDay >":
    return _openstudiomodelsimulation.getDesignDay(t_model, t_handle)
getDesignDay = _openstudiomodelsimulation.getDesignDay

def getDesignDays(t_model: 'Model') -> "std::vector< openstudio::model::DesignDay,std::allocator< openstudio::model::DesignDay > >":
    return _openstudiomodelsimulation.getDesignDays(t_model)
getDesignDays = _openstudiomodelsimulation.getDesignDays

def getDesignDayByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::DesignDay >":
    return _openstudiomodelsimulation.getDesignDayByName(t_model, t_name)
getDesignDayByName = _openstudiomodelsimulation.getDesignDayByName

def getDesignDaysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::DesignDay,std::allocator< openstudio::model::DesignDay > >":
    return _openstudiomodelsimulation.getDesignDaysByName(t_model, t_name, t_exactMatch)
getDesignDaysByName = _openstudiomodelsimulation.getDesignDaysByName
class LightingDesignDay(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightingDesignDay, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightingDesignDay, name)
    __repr__ = _swig_repr

    def __init__(self, cieSkyModel: 'std::string const &', date: 'Date', model: 'Model'):
        this = _openstudiomodelsimulation.new_LightingDesignDay(cieSkyModel, date, model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_LightingDesignDay
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.LightingDesignDay_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.LightingDesignDay_iddObjectType)
    __swig_getmethods__["validCIESkyModelValues"] = lambda x: _openstudiomodelsimulation.LightingDesignDay_validCIESkyModelValues
    if _newclass:
        validCIESkyModelValues = staticmethod(_openstudiomodelsimulation.LightingDesignDay_validCIESkyModelValues)

    def cieSkyModel(self) -> "std::string":
        return _openstudiomodelsimulation.LightingDesignDay_cieSkyModel(self)

    def snowIndicator(self) -> "int":
        return _openstudiomodelsimulation.LightingDesignDay_snowIndicator(self)

    def isSnowIndicatorDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_isSnowIndicatorDefaulted(self)

    def setCIESkyModel(self, cIESkyModel: 'std::string') -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_setCIESkyModel(self, cIESkyModel)

    def setSnowIndicator(self, snowIndicator: 'int') -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_setSnowIndicator(self, snowIndicator)

    def resetSnowIndicator(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDay_resetSnowIndicator(self)

    def date(self) -> "openstudio::Date":
        return _openstudiomodelsimulation.LightingDesignDay_date(self)

    def setDate(self, date: 'Date') -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_setDate(self, date)

    def simulationTimes(self) -> "std::vector< openstudio::Time,std::allocator< openstudio::Time > >":
        return _openstudiomodelsimulation.LightingDesignDay_simulationTimes(self)

    def simulationDateTimes(self) -> "std::vector< openstudio::DateTime,std::allocator< openstudio::DateTime > >":
        return _openstudiomodelsimulation.LightingDesignDay_simulationDateTimes(self)

    def addSimulationTime(self, time: 'Time') -> "bool":
        return _openstudiomodelsimulation.LightingDesignDay_addSimulationTime(self, time)

    def clearSimulationTimes(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDay_clearSimulationTimes(self)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.LightingDesignDay_ensureNoLeapDays(self)
LightingDesignDay_swigregister = _openstudiomodelsimulation.LightingDesignDay_swigregister
LightingDesignDay_swigregister(LightingDesignDay)

def LightingDesignDay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.LightingDesignDay_iddObjectType()
LightingDesignDay_iddObjectType = _openstudiomodelsimulation.LightingDesignDay_iddObjectType

def LightingDesignDay_validCIESkyModelValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.LightingDesignDay_validCIESkyModelValues()
LightingDesignDay_validCIESkyModelValues = _openstudiomodelsimulation.LightingDesignDay_validCIESkyModelValues


def toLightingDesignDay(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::LightingDesignDay >":
    return _openstudiomodelsimulation.toLightingDesignDay(idfObject)
toLightingDesignDay = _openstudiomodelsimulation.toLightingDesignDay

def getLightingDesignDay(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::LightingDesignDay >":
    return _openstudiomodelsimulation.getLightingDesignDay(t_model, t_handle)
getLightingDesignDay = _openstudiomodelsimulation.getLightingDesignDay

def getLightingDesignDays(t_model: 'Model') -> "std::vector< openstudio::model::LightingDesignDay,std::allocator< openstudio::model::LightingDesignDay > >":
    return _openstudiomodelsimulation.getLightingDesignDays(t_model)
getLightingDesignDays = _openstudiomodelsimulation.getLightingDesignDays

def getLightingDesignDayByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::LightingDesignDay >":
    return _openstudiomodelsimulation.getLightingDesignDayByName(t_model, t_name)
getLightingDesignDayByName = _openstudiomodelsimulation.getLightingDesignDayByName

def getLightingDesignDaysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::LightingDesignDay,std::allocator< openstudio::model::LightingDesignDay > >":
    return _openstudiomodelsimulation.getLightingDesignDaysByName(t_model, t_name, t_exactMatch)
getLightingDesignDaysByName = _openstudiomodelsimulation.getLightingDesignDaysByName
class ConvergenceLimits(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvergenceLimits, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvergenceLimits, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ConvergenceLimits
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.ConvergenceLimits_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.ConvergenceLimits_iddObjectType)

    def minimumSystemTimestep(self) -> "boost::optional< int >":
        return _openstudiomodelsimulation.ConvergenceLimits_minimumSystemTimestep(self)

    def maximumHVACIterations(self) -> "int":
        return _openstudiomodelsimulation.ConvergenceLimits_maximumHVACIterations(self)

    def isMaximumHVACIterationsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_isMaximumHVACIterationsDefaulted(self)

    def minimumPlantIterations(self) -> "int":
        return _openstudiomodelsimulation.ConvergenceLimits_minimumPlantIterations(self)

    def isMinimumPlantIterationsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_isMinimumPlantIterationsDefaulted(self)

    def maximumPlantIterations(self) -> "int":
        return _openstudiomodelsimulation.ConvergenceLimits_maximumPlantIterations(self)

    def isMaximumPlantIterationsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_isMaximumPlantIterationsDefaulted(self)

    def setMinimumSystemTimestep(self, minimumSystemTimestep: 'int') -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_setMinimumSystemTimestep(self, minimumSystemTimestep)

    def resetMinimumSystemTimestep(self) -> "void":
        return _openstudiomodelsimulation.ConvergenceLimits_resetMinimumSystemTimestep(self)

    def setMaximumHVACIterations(self, maximumHVACIterations: 'int') -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_setMaximumHVACIterations(self, maximumHVACIterations)

    def resetMaximumHVACIterations(self) -> "void":
        return _openstudiomodelsimulation.ConvergenceLimits_resetMaximumHVACIterations(self)

    def setMinimumPlantIterations(self, minimumPlantIterations: 'int') -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_setMinimumPlantIterations(self, minimumPlantIterations)

    def resetMinimumPlantIterations(self) -> "void":
        return _openstudiomodelsimulation.ConvergenceLimits_resetMinimumPlantIterations(self)

    def setMaximumPlantIterations(self, maximumPlantIterations: 'int') -> "bool":
        return _openstudiomodelsimulation.ConvergenceLimits_setMaximumPlantIterations(self, maximumPlantIterations)

    def resetMaximumPlantIterations(self) -> "void":
        return _openstudiomodelsimulation.ConvergenceLimits_resetMaximumPlantIterations(self)
ConvergenceLimits_swigregister = _openstudiomodelsimulation.ConvergenceLimits_swigregister
ConvergenceLimits_swigregister(ConvergenceLimits)

def ConvergenceLimits_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ConvergenceLimits_iddObjectType()
ConvergenceLimits_iddObjectType = _openstudiomodelsimulation.ConvergenceLimits_iddObjectType


def toConvergenceLimits(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ConvergenceLimits >":
    return _openstudiomodelsimulation.toConvergenceLimits(idfObject)
toConvergenceLimits = _openstudiomodelsimulation.toConvergenceLimits

def getConvergenceLimits(t_model: 'Model') -> "openstudio::model::ConvergenceLimits":
    return _openstudiomodelsimulation.getConvergenceLimits(t_model)
getConvergenceLimits = _openstudiomodelsimulation.getConvergenceLimits

def getOptionalConvergenceLimits(t_model: 'Model') -> "boost::optional< openstudio::model::ConvergenceLimits >":
    return _openstudiomodelsimulation.getOptionalConvergenceLimits(t_model)
getOptionalConvergenceLimits = _openstudiomodelsimulation.getOptionalConvergenceLimits
class RunPeriodControlDaylightSavingTime(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunPeriodControlDaylightSavingTime, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RunPeriodControlDaylightSavingTime, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_RunPeriodControlDaylightSavingTime
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_iddObjectType)

    def startDate(self) -> "openstudio::Date":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_startDate(self)

    def startNthDayOfWeekInMonth(self) -> "boost::optional< openstudio::NthDayOfWeekInMonth >":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_startNthDayOfWeekInMonth(self)

    def endDate(self) -> "openstudio::Date":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_endDate(self)

    def endNthDayOfWeekInMonth(self) -> "boost::optional< openstudio::NthDayOfWeekInMonth >":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_endNthDayOfWeekInMonth(self)

    def setStartDate(self, *args) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_setStartDate(self, *args)

    def setEndDate(self, *args) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_setEndDate(self, *args)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_ensureNoLeapDays(self)
RunPeriodControlDaylightSavingTime_swigregister = _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_swigregister
RunPeriodControlDaylightSavingTime_swigregister(RunPeriodControlDaylightSavingTime)

def RunPeriodControlDaylightSavingTime_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_iddObjectType()
RunPeriodControlDaylightSavingTime_iddObjectType = _openstudiomodelsimulation.RunPeriodControlDaylightSavingTime_iddObjectType


def toRunPeriodControlDaylightSavingTime(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RunPeriodControlDaylightSavingTime >":
    return _openstudiomodelsimulation.toRunPeriodControlDaylightSavingTime(idfObject)
toRunPeriodControlDaylightSavingTime = _openstudiomodelsimulation.toRunPeriodControlDaylightSavingTime

def getRunPeriodControlDaylightSavingTime(t_model: 'Model') -> "openstudio::model::RunPeriodControlDaylightSavingTime":
    return _openstudiomodelsimulation.getRunPeriodControlDaylightSavingTime(t_model)
getRunPeriodControlDaylightSavingTime = _openstudiomodelsimulation.getRunPeriodControlDaylightSavingTime

def getOptionalRunPeriodControlDaylightSavingTime(t_model: 'Model') -> "boost::optional< openstudio::model::RunPeriodControlDaylightSavingTime >":
    return _openstudiomodelsimulation.getOptionalRunPeriodControlDaylightSavingTime(t_model)
getOptionalRunPeriodControlDaylightSavingTime = _openstudiomodelsimulation.getOptionalRunPeriodControlDaylightSavingTime
class HeatBalanceAlgorithm(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatBalanceAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeatBalanceAlgorithm, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_HeatBalanceAlgorithm
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.HeatBalanceAlgorithm_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.HeatBalanceAlgorithm_iddObjectType)
    __swig_getmethods__["algorithmValues"] = lambda x: _openstudiomodelsimulation.HeatBalanceAlgorithm_algorithmValues
    if _newclass:
        algorithmValues = staticmethod(_openstudiomodelsimulation.HeatBalanceAlgorithm_algorithmValues)

    def algorithm(self) -> "std::string":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_algorithm(self)

    def isAlgorithmDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_isAlgorithmDefaulted(self)

    def surfaceTemperatureUpperLimit(self) -> "double":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_surfaceTemperatureUpperLimit(self)

    def getSurfaceTemperatureUpperLimit(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_getSurfaceTemperatureUpperLimit(self, returnIP)

    def isSurfaceTemperatureUpperLimitDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_isSurfaceTemperatureUpperLimitDefaulted(self)

    def minimumSurfaceConvectionHeatTransferCoefficientValue(self) -> "double":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_minimumSurfaceConvectionHeatTransferCoefficientValue(self)

    def getMinimumSurfaceConvectionHeatTransferCoefficientValue(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_getMinimumSurfaceConvectionHeatTransferCoefficientValue(self, returnIP)

    def isMinimumSurfaceConvectionHeatTransferCoefficientValueDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_isMinimumSurfaceConvectionHeatTransferCoefficientValueDefaulted(self)

    def maximumSurfaceConvectionHeatTransferCoefficientValue(self) -> "double":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_maximumSurfaceConvectionHeatTransferCoefficientValue(self)

    def getMaximumSurfaceConvectionHeatTransferCoefficientValue(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_getMaximumSurfaceConvectionHeatTransferCoefficientValue(self, returnIP)

    def isMaximumSurfaceConvectionHeatTransferCoefficientValueDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_isMaximumSurfaceConvectionHeatTransferCoefficientValueDefaulted(self)

    def setAlgorithm(self, algorithm: 'std::string') -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_setAlgorithm(self, algorithm)

    def resetAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_resetAlgorithm(self)

    def setSurfaceTemperatureUpperLimit(self, *args) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_setSurfaceTemperatureUpperLimit(self, *args)

    def resetSurfaceTemperatureUpperLimit(self) -> "void":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_resetSurfaceTemperatureUpperLimit(self)

    def setMinimumSurfaceConvectionHeatTransferCoefficientValue(self, *args) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_setMinimumSurfaceConvectionHeatTransferCoefficientValue(self, *args)

    def resetMinimumSurfaceConvectionHeatTransferCoefficientValue(self) -> "void":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_resetMinimumSurfaceConvectionHeatTransferCoefficientValue(self)

    def setMaximumSurfaceConvectionHeatTransferCoefficientValue(self, *args) -> "bool":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_setMaximumSurfaceConvectionHeatTransferCoefficientValue(self, *args)

    def resetMaximumSurfaceConvectionHeatTransferCoefficientValue(self) -> "void":
        return _openstudiomodelsimulation.HeatBalanceAlgorithm_resetMaximumSurfaceConvectionHeatTransferCoefficientValue(self)
HeatBalanceAlgorithm_swigregister = _openstudiomodelsimulation.HeatBalanceAlgorithm_swigregister
HeatBalanceAlgorithm_swigregister(HeatBalanceAlgorithm)

def HeatBalanceAlgorithm_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.HeatBalanceAlgorithm_iddObjectType()
HeatBalanceAlgorithm_iddObjectType = _openstudiomodelsimulation.HeatBalanceAlgorithm_iddObjectType

def HeatBalanceAlgorithm_algorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.HeatBalanceAlgorithm_algorithmValues()
HeatBalanceAlgorithm_algorithmValues = _openstudiomodelsimulation.HeatBalanceAlgorithm_algorithmValues


def toHeatBalanceAlgorithm(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::HeatBalanceAlgorithm >":
    return _openstudiomodelsimulation.toHeatBalanceAlgorithm(idfObject)
toHeatBalanceAlgorithm = _openstudiomodelsimulation.toHeatBalanceAlgorithm

def getHeatBalanceAlgorithm(t_model: 'Model') -> "openstudio::model::HeatBalanceAlgorithm":
    return _openstudiomodelsimulation.getHeatBalanceAlgorithm(t_model)
getHeatBalanceAlgorithm = _openstudiomodelsimulation.getHeatBalanceAlgorithm

def getOptionalHeatBalanceAlgorithm(t_model: 'Model') -> "boost::optional< openstudio::model::HeatBalanceAlgorithm >":
    return _openstudiomodelsimulation.getOptionalHeatBalanceAlgorithm(t_model)
getOptionalHeatBalanceAlgorithm = _openstudiomodelsimulation.getOptionalHeatBalanceAlgorithm
class InsideSurfaceConvectionAlgorithm(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsideSurfaceConvectionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InsideSurfaceConvectionAlgorithm, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_InsideSurfaceConvectionAlgorithm
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_iddObjectType)
    __swig_getmethods__["validAlgorithmValues"] = lambda x: _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_validAlgorithmValues
    if _newclass:
        validAlgorithmValues = staticmethod(_openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_validAlgorithmValues)

    def algorithm(self) -> "std::string":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_algorithm(self)

    def isAlgorithmDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_isAlgorithmDefaulted(self)

    def setAlgorithm(self, algorithm: 'std::string') -> "bool":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_setAlgorithm(self, algorithm)

    def resetAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_resetAlgorithm(self)
InsideSurfaceConvectionAlgorithm_swigregister = _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_swigregister
InsideSurfaceConvectionAlgorithm_swigregister(InsideSurfaceConvectionAlgorithm)

def InsideSurfaceConvectionAlgorithm_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_iddObjectType()
InsideSurfaceConvectionAlgorithm_iddObjectType = _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_iddObjectType

def InsideSurfaceConvectionAlgorithm_validAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_validAlgorithmValues()
InsideSurfaceConvectionAlgorithm_validAlgorithmValues = _openstudiomodelsimulation.InsideSurfaceConvectionAlgorithm_validAlgorithmValues


def toInsideSurfaceConvectionAlgorithm(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::InsideSurfaceConvectionAlgorithm >":
    return _openstudiomodelsimulation.toInsideSurfaceConvectionAlgorithm(idfObject)
toInsideSurfaceConvectionAlgorithm = _openstudiomodelsimulation.toInsideSurfaceConvectionAlgorithm

def getInsideSurfaceConvectionAlgorithm(t_model: 'Model') -> "openstudio::model::InsideSurfaceConvectionAlgorithm":
    return _openstudiomodelsimulation.getInsideSurfaceConvectionAlgorithm(t_model)
getInsideSurfaceConvectionAlgorithm = _openstudiomodelsimulation.getInsideSurfaceConvectionAlgorithm

def getOptionalInsideSurfaceConvectionAlgorithm(t_model: 'Model') -> "boost::optional< openstudio::model::InsideSurfaceConvectionAlgorithm >":
    return _openstudiomodelsimulation.getOptionalInsideSurfaceConvectionAlgorithm(t_model)
getOptionalInsideSurfaceConvectionAlgorithm = _openstudiomodelsimulation.getOptionalInsideSurfaceConvectionAlgorithm
class OutputControlReportingTolerances(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputControlReportingTolerances, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputControlReportingTolerances, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_OutputControlReportingTolerances
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.OutputControlReportingTolerances_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.OutputControlReportingTolerances_iddObjectType)

    def toleranceforTimeHeatingSetpointNotMet(self) -> "double":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_toleranceforTimeHeatingSetpointNotMet(self)

    def getToleranceforTimeHeatingSetpointNotMet(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_getToleranceforTimeHeatingSetpointNotMet(self, returnIP)

    def isToleranceforTimeHeatingSetpointNotMetDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_isToleranceforTimeHeatingSetpointNotMetDefaulted(self)

    def toleranceforTimeCoolingSetpointNotMet(self) -> "double":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_toleranceforTimeCoolingSetpointNotMet(self)

    def getToleranceforTimeCoolingSetpointNotMet(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_getToleranceforTimeCoolingSetpointNotMet(self, returnIP)

    def isToleranceforTimeCoolingSetpointNotMetDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_isToleranceforTimeCoolingSetpointNotMetDefaulted(self)

    def setToleranceforTimeHeatingSetpointNotMet(self, *args) -> "bool":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_setToleranceforTimeHeatingSetpointNotMet(self, *args)

    def resetToleranceforTimeHeatingSetpointNotMet(self) -> "void":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_resetToleranceforTimeHeatingSetpointNotMet(self)

    def setToleranceforTimeCoolingSetpointNotMet(self, *args) -> "bool":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_setToleranceforTimeCoolingSetpointNotMet(self, *args)

    def resetToleranceforTimeCoolingSetpointNotMet(self) -> "void":
        return _openstudiomodelsimulation.OutputControlReportingTolerances_resetToleranceforTimeCoolingSetpointNotMet(self)
OutputControlReportingTolerances_swigregister = _openstudiomodelsimulation.OutputControlReportingTolerances_swigregister
OutputControlReportingTolerances_swigregister(OutputControlReportingTolerances)

def OutputControlReportingTolerances_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.OutputControlReportingTolerances_iddObjectType()
OutputControlReportingTolerances_iddObjectType = _openstudiomodelsimulation.OutputControlReportingTolerances_iddObjectType


def toOutputControlReportingTolerances(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::OutputControlReportingTolerances >":
    return _openstudiomodelsimulation.toOutputControlReportingTolerances(idfObject)
toOutputControlReportingTolerances = _openstudiomodelsimulation.toOutputControlReportingTolerances

def getOutputControlReportingTolerances(t_model: 'Model') -> "openstudio::model::OutputControlReportingTolerances":
    return _openstudiomodelsimulation.getOutputControlReportingTolerances(t_model)
getOutputControlReportingTolerances = _openstudiomodelsimulation.getOutputControlReportingTolerances

def getOptionalOutputControlReportingTolerances(t_model: 'Model') -> "boost::optional< openstudio::model::OutputControlReportingTolerances >":
    return _openstudiomodelsimulation.getOptionalOutputControlReportingTolerances(t_model)
getOptionalOutputControlReportingTolerances = _openstudiomodelsimulation.getOptionalOutputControlReportingTolerances
class OutsideSurfaceConvectionAlgorithm(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutsideSurfaceConvectionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutsideSurfaceConvectionAlgorithm, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_OutsideSurfaceConvectionAlgorithm
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_iddObjectType)
    __swig_getmethods__["validAlgorithmValues"] = lambda x: _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_validAlgorithmValues
    if _newclass:
        validAlgorithmValues = staticmethod(_openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_validAlgorithmValues)

    def algorithm(self) -> "std::string":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_algorithm(self)

    def isAlgorithmDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_isAlgorithmDefaulted(self)

    def setAlgorithm(self, algorithm: 'std::string') -> "bool":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_setAlgorithm(self, algorithm)

    def resetAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_resetAlgorithm(self)
OutsideSurfaceConvectionAlgorithm_swigregister = _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_swigregister
OutsideSurfaceConvectionAlgorithm_swigregister(OutsideSurfaceConvectionAlgorithm)

def OutsideSurfaceConvectionAlgorithm_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_iddObjectType()
OutsideSurfaceConvectionAlgorithm_iddObjectType = _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_iddObjectType

def OutsideSurfaceConvectionAlgorithm_validAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_validAlgorithmValues()
OutsideSurfaceConvectionAlgorithm_validAlgorithmValues = _openstudiomodelsimulation.OutsideSurfaceConvectionAlgorithm_validAlgorithmValues


def toOutsideSurfaceConvectionAlgorithm(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::OutsideSurfaceConvectionAlgorithm >":
    return _openstudiomodelsimulation.toOutsideSurfaceConvectionAlgorithm(idfObject)
toOutsideSurfaceConvectionAlgorithm = _openstudiomodelsimulation.toOutsideSurfaceConvectionAlgorithm

def getOutsideSurfaceConvectionAlgorithm(t_model: 'Model') -> "openstudio::model::OutsideSurfaceConvectionAlgorithm":
    return _openstudiomodelsimulation.getOutsideSurfaceConvectionAlgorithm(t_model)
getOutsideSurfaceConvectionAlgorithm = _openstudiomodelsimulation.getOutsideSurfaceConvectionAlgorithm

def getOptionalOutsideSurfaceConvectionAlgorithm(t_model: 'Model') -> "boost::optional< openstudio::model::OutsideSurfaceConvectionAlgorithm >":
    return _openstudiomodelsimulation.getOptionalOutsideSurfaceConvectionAlgorithm(t_model)
getOptionalOutsideSurfaceConvectionAlgorithm = _openstudiomodelsimulation.getOptionalOutsideSurfaceConvectionAlgorithm
class SurfacePropertyConvectionCoefficientsMultipleSurface(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurfacePropertyConvectionCoefficientsMultipleSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurfacePropertyConvectionCoefficientsMultipleSurface, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelsimulation.new_SurfacePropertyConvectionCoefficientsMultipleSurface(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_SurfacePropertyConvectionCoefficientsMultipleSurface
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_iddObjectType)
    __swig_getmethods__["surfaceTypeValues"] = lambda x: _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceTypeValues
    if _newclass:
        surfaceTypeValues = staticmethod(_openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceTypeValues)
    __swig_getmethods__["convectionCoefficient1LocationValues"] = lambda x: _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1LocationValues
    if _newclass:
        convectionCoefficient1LocationValues = staticmethod(_openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1LocationValues)
    __swig_getmethods__["convectionCoefficient1TypeValues"] = lambda x: _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1TypeValues
    if _newclass:
        convectionCoefficient1TypeValues = staticmethod(_openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1TypeValues)
    __swig_getmethods__["convectionCoefficient2LocationValues"] = lambda x: _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2LocationValues
    if _newclass:
        convectionCoefficient2LocationValues = staticmethod(_openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2LocationValues)
    __swig_getmethods__["convectionCoefficient2TypeValues"] = lambda x: _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2TypeValues
    if _newclass:
        convectionCoefficient2TypeValues = staticmethod(_openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2TypeValues)

    def surfaceType(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceType(self)

    def convectionCoefficient1Location(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1Location(self)

    def convectionCoefficient1Type(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1Type(self)

    def convectionCoefficient1(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1(self)

    def convectionCoefficient1Schedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1Schedule(self)

    def convectionCoefficient2Location(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2Location(self)

    def convectionCoefficient2Type(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2Type(self)

    def convectionCoefficient2(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2(self)

    def convectionCoefficient2Schedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2Schedule(self)

    def setSurfaceType(self, surfaceType: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setSurfaceType(self, surfaceType)

    def resetSurfaceType(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetSurfaceType(self)

    def setConvectionCoefficient1Location(self, convectionCoefficient1Location: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient1Location(self, convectionCoefficient1Location)

    def resetConvectionCoefficient1Location(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient1Location(self)

    def setConvectionCoefficient1Type(self, convectionCoefficient1Type: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient1Type(self, convectionCoefficient1Type)

    def resetConvectionCoefficient1Type(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient1Type(self)

    def setConvectionCoefficient1(self, convectionCoefficient1: 'double') -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient1(self, convectionCoefficient1)

    def resetConvectionCoefficient1(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient1(self)

    def setConvectionCoefficient1Schedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient1Schedule(self, schedule)

    def resetConvectionCoefficient1Schedule(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient1Schedule(self)

    def setConvectionCoefficient2Location(self, convectionCoefficient2Location: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient2Location(self, convectionCoefficient2Location)

    def resetConvectionCoefficient2Location(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient2Location(self)

    def setConvectionCoefficient2Type(self, convectionCoefficient2Type: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient2Type(self, convectionCoefficient2Type)

    def resetConvectionCoefficient2Type(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient2Type(self)

    def setConvectionCoefficient2(self, convectionCoefficient2: 'double') -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient2(self, convectionCoefficient2)

    def resetConvectionCoefficient2(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient2(self)

    def setConvectionCoefficient2Schedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_setConvectionCoefficient2Schedule(self, schedule)

    def resetConvectionCoefficient2Schedule(self) -> "void":
        return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_resetConvectionCoefficient2Schedule(self)
SurfacePropertyConvectionCoefficientsMultipleSurface_swigregister = _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_swigregister
SurfacePropertyConvectionCoefficientsMultipleSurface_swigregister(SurfacePropertyConvectionCoefficientsMultipleSurface)

def SurfacePropertyConvectionCoefficientsMultipleSurface_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_iddObjectType()
SurfacePropertyConvectionCoefficientsMultipleSurface_iddObjectType = _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_iddObjectType

def SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceTypeValues()
SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceTypeValues = _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_surfaceTypeValues

def SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1LocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1LocationValues()
SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1LocationValues = _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1LocationValues

def SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1TypeValues()
SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1TypeValues = _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient1TypeValues

def SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2LocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2LocationValues()
SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2LocationValues = _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2LocationValues

def SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2TypeValues()
SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2TypeValues = _openstudiomodelsimulation.SurfacePropertyConvectionCoefficientsMultipleSurface_convectionCoefficient2TypeValues


def toSurfacePropertyConvectionCoefficientsMultipleSurface(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >":
    return _openstudiomodelsimulation.toSurfacePropertyConvectionCoefficientsMultipleSurface(idfObject)
toSurfacePropertyConvectionCoefficientsMultipleSurface = _openstudiomodelsimulation.toSurfacePropertyConvectionCoefficientsMultipleSurface

def getSurfacePropertyConvectionCoefficientsMultipleSurface(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >":
    return _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurface(t_model, t_handle)
getSurfacePropertyConvectionCoefficientsMultipleSurface = _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurface

def getSurfacePropertyConvectionCoefficientsMultipleSurfaces(t_model: 'Model') -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface,std::allocator< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface > >":
    return _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurfaces(t_model)
getSurfacePropertyConvectionCoefficientsMultipleSurfaces = _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurfaces

def getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface >":
    return _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName(t_model, t_name)
getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName = _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurfaceByName

def getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface,std::allocator< openstudio::model::SurfacePropertyConvectionCoefficientsMultipleSurface > >":
    return _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName(t_model, t_name, t_exactMatch)
getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName = _openstudiomodelsimulation.getSurfacePropertyConvectionCoefficientsMultipleSurfacesByName
class RunPeriod(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunPeriod, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RunPeriod, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_RunPeriod
    __del__ = lambda self: None

    def getBeginMonth(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getBeginMonth(self)

    def getBeginDayOfMonth(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getBeginDayOfMonth(self)

    def getEndMonth(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getEndMonth(self)

    def getEndDayOfMonth(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getEndDayOfMonth(self)

    def getUseWeatherFileHolidays(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getUseWeatherFileHolidays(self)

    def getUseWeatherFileDaylightSavings(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getUseWeatherFileDaylightSavings(self)

    def getApplyWeekendHolidayRule(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getApplyWeekendHolidayRule(self)

    def getUseWeatherFileRainInd(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getUseWeatherFileRainInd(self)

    def getUseWeatherFileSnowInd(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_getUseWeatherFileSnowInd(self)

    def getNumTimePeriodRepeats(self) -> "int":
        return _openstudiomodelsimulation.RunPeriod_getNumTimePeriodRepeats(self)

    def setBeginMonth(self, month: 'int') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setBeginMonth(self, month)

    def setBeginDayOfMonth(self, day: 'int') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setBeginDayOfMonth(self, day)

    def setEndMonth(self, month: 'int') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setEndMonth(self, month)

    def setEndDayOfMonth(self, day: 'int') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setEndDayOfMonth(self, day)

    def setUseWeatherFileHolidays(self, use: 'bool') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setUseWeatherFileHolidays(self, use)

    def setUseWeatherFileDaylightSavings(self, use: 'bool') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setUseWeatherFileDaylightSavings(self, use)

    def setApplyWeekendHolidayRule(self, apply: 'bool') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setApplyWeekendHolidayRule(self, apply)

    def setUseWeatherFileRainInd(self, rainInd: 'bool') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setUseWeatherFileRainInd(self, rainInd)

    def setUseWeatherFileSnowInd(self, snowInd: 'bool') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setUseWeatherFileSnowInd(self, snowInd)

    def setNumTimePeriodRepeats(self, numRepeats: 'int') -> "bool":
        return _openstudiomodelsimulation.RunPeriod_setNumTimePeriodRepeats(self, numRepeats)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.RunPeriod_ensureNoLeapDays(self)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.RunPeriod_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.RunPeriod_iddObjectType)

    def isAnnual(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_isAnnual(self)

    def isPartialYear(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_isPartialYear(self)

    def isRepeated(self) -> "bool":
        return _openstudiomodelsimulation.RunPeriod_isRepeated(self)
RunPeriod_swigregister = _openstudiomodelsimulation.RunPeriod_swigregister
RunPeriod_swigregister(RunPeriod)

def RunPeriod_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.RunPeriod_iddObjectType()
RunPeriod_iddObjectType = _openstudiomodelsimulation.RunPeriod_iddObjectType


def toRunPeriod(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RunPeriod >":
    return _openstudiomodelsimulation.toRunPeriod(idfObject)
toRunPeriod = _openstudiomodelsimulation.toRunPeriod

def getRunPeriod(t_model: 'Model') -> "openstudio::model::RunPeriod":
    return _openstudiomodelsimulation.getRunPeriod(t_model)
getRunPeriod = _openstudiomodelsimulation.getRunPeriod

def getOptionalRunPeriod(t_model: 'Model') -> "boost::optional< openstudio::model::RunPeriod >":
    return _openstudiomodelsimulation.getOptionalRunPeriod(t_model)
getOptionalRunPeriod = _openstudiomodelsimulation.getOptionalRunPeriod
class ShadowCalculation(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadowCalculation, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadowCalculation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ShadowCalculation
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.ShadowCalculation_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.ShadowCalculation_iddObjectType)
    __swig_getmethods__["validPolygonClippingAlgorithmValues"] = lambda x: _openstudiomodelsimulation.ShadowCalculation_validPolygonClippingAlgorithmValues
    if _newclass:
        validPolygonClippingAlgorithmValues = staticmethod(_openstudiomodelsimulation.ShadowCalculation_validPolygonClippingAlgorithmValues)
    __swig_getmethods__["validSkyDiffuseModelingAlgorithmValues"] = lambda x: _openstudiomodelsimulation.ShadowCalculation_validSkyDiffuseModelingAlgorithmValues
    if _newclass:
        validSkyDiffuseModelingAlgorithmValues = staticmethod(_openstudiomodelsimulation.ShadowCalculation_validSkyDiffuseModelingAlgorithmValues)

    def calculationFrequency(self) -> "int":
        return _openstudiomodelsimulation.ShadowCalculation_calculationFrequency(self)

    def isCalculationFrequencyDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_isCalculationFrequencyDefaulted(self)

    def maximumFiguresInShadowOverlapCalculations(self) -> "int":
        return _openstudiomodelsimulation.ShadowCalculation_maximumFiguresInShadowOverlapCalculations(self)

    def isMaximumFiguresInShadowOverlapCalculationsDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_isMaximumFiguresInShadowOverlapCalculationsDefaulted(self)

    def polygonClippingAlgorithm(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.ShadowCalculation_polygonClippingAlgorithm(self)

    def skyDiffuseModelingAlgorithm(self) -> "boost::optional< std::string >":
        return _openstudiomodelsimulation.ShadowCalculation_skyDiffuseModelingAlgorithm(self)

    def setCalculationFrequency(self, calculationFrequency: 'int') -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setCalculationFrequency(self, calculationFrequency)

    def resetCalculationFrequency(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_resetCalculationFrequency(self)

    def setMaximumFiguresInShadowOverlapCalculations(self, maximumFiguresInShadowOverlapCalculations: 'int') -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setMaximumFiguresInShadowOverlapCalculations(self, maximumFiguresInShadowOverlapCalculations)

    def resetMaximumFiguresInShadowOverlapCalculations(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_resetMaximumFiguresInShadowOverlapCalculations(self)

    def setPolygonClippingAlgorithm(self, polygonClippingAlgorithm: 'std::string') -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setPolygonClippingAlgorithm(self, polygonClippingAlgorithm)

    def resetPolygonClippingAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_resetPolygonClippingAlgorithm(self)

    def setSkyDiffuseModelingAlgorithm(self, skyDiffuseModelingAlgorithm: 'std::string') -> "bool":
        return _openstudiomodelsimulation.ShadowCalculation_setSkyDiffuseModelingAlgorithm(self, skyDiffuseModelingAlgorithm)

    def resetSkyDiffuseModelingAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.ShadowCalculation_resetSkyDiffuseModelingAlgorithm(self)
ShadowCalculation_swigregister = _openstudiomodelsimulation.ShadowCalculation_swigregister
ShadowCalculation_swigregister(ShadowCalculation)

def ShadowCalculation_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ShadowCalculation_iddObjectType()
ShadowCalculation_iddObjectType = _openstudiomodelsimulation.ShadowCalculation_iddObjectType

def ShadowCalculation_validPolygonClippingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_validPolygonClippingAlgorithmValues()
ShadowCalculation_validPolygonClippingAlgorithmValues = _openstudiomodelsimulation.ShadowCalculation_validPolygonClippingAlgorithmValues

def ShadowCalculation_validSkyDiffuseModelingAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ShadowCalculation_validSkyDiffuseModelingAlgorithmValues()
ShadowCalculation_validSkyDiffuseModelingAlgorithmValues = _openstudiomodelsimulation.ShadowCalculation_validSkyDiffuseModelingAlgorithmValues


def toShadowCalculation(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ShadowCalculation >":
    return _openstudiomodelsimulation.toShadowCalculation(idfObject)
toShadowCalculation = _openstudiomodelsimulation.toShadowCalculation

def getShadowCalculation(t_model: 'Model') -> "openstudio::model::ShadowCalculation":
    return _openstudiomodelsimulation.getShadowCalculation(t_model)
getShadowCalculation = _openstudiomodelsimulation.getShadowCalculation

def getOptionalShadowCalculation(t_model: 'Model') -> "boost::optional< openstudio::model::ShadowCalculation >":
    return _openstudiomodelsimulation.getOptionalShadowCalculation(t_model)
getOptionalShadowCalculation = _openstudiomodelsimulation.getOptionalShadowCalculation
class RunPeriodControlSpecialDays(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunPeriodControlSpecialDays, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RunPeriodControlSpecialDays, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelsimulation.new_RunPeriodControlSpecialDays(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_RunPeriodControlSpecialDays
    __del__ = lambda self: None

    def startDate(self) -> "openstudio::Date":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_startDate(self)

    def duration(self) -> "unsigned int":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_duration(self)

    def specialDayType(self) -> "std::string":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_specialDayType(self)

    def setStartDate(self, *args) -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_setStartDate(self, *args)

    def setDuration(self, duration: 'unsigned int') -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_setDuration(self, duration)

    def setSpecialDayType(self, specialDayType: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_setSpecialDayType(self, specialDayType)

    def ensureNoLeapDays(self) -> "void":
        return _openstudiomodelsimulation.RunPeriodControlSpecialDays_ensureNoLeapDays(self)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.RunPeriodControlSpecialDays_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.RunPeriodControlSpecialDays_iddObjectType)
RunPeriodControlSpecialDays_swigregister = _openstudiomodelsimulation.RunPeriodControlSpecialDays_swigregister
RunPeriodControlSpecialDays_swigregister(RunPeriodControlSpecialDays)

def RunPeriodControlSpecialDays_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.RunPeriodControlSpecialDays_iddObjectType()
RunPeriodControlSpecialDays_iddObjectType = _openstudiomodelsimulation.RunPeriodControlSpecialDays_iddObjectType


def toRunPeriodControlSpecialDays(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RunPeriodControlSpecialDays >":
    return _openstudiomodelsimulation.toRunPeriodControlSpecialDays(idfObject)
toRunPeriodControlSpecialDays = _openstudiomodelsimulation.toRunPeriodControlSpecialDays

def getRunPeriodControlSpecialDays(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RunPeriodControlSpecialDays >":
    return _openstudiomodelsimulation.getRunPeriodControlSpecialDays(t_model, t_handle)
getRunPeriodControlSpecialDays = _openstudiomodelsimulation.getRunPeriodControlSpecialDays

def getRunPeriodControlSpecialDayss(t_model: 'Model') -> "std::vector< openstudio::model::RunPeriodControlSpecialDays,std::allocator< openstudio::model::RunPeriodControlSpecialDays > >":
    return _openstudiomodelsimulation.getRunPeriodControlSpecialDayss(t_model)
getRunPeriodControlSpecialDayss = _openstudiomodelsimulation.getRunPeriodControlSpecialDayss

def getRunPeriodControlSpecialDaysByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RunPeriodControlSpecialDays >":
    return _openstudiomodelsimulation.getRunPeriodControlSpecialDaysByName(t_model, t_name)
getRunPeriodControlSpecialDaysByName = _openstudiomodelsimulation.getRunPeriodControlSpecialDaysByName

def getRunPeriodControlSpecialDayssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RunPeriodControlSpecialDays,std::allocator< openstudio::model::RunPeriodControlSpecialDays > >":
    return _openstudiomodelsimulation.getRunPeriodControlSpecialDayssByName(t_model, t_name, t_exactMatch)
getRunPeriodControlSpecialDayssByName = _openstudiomodelsimulation.getRunPeriodControlSpecialDayssByName
class Timestep(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timestep, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Timestep, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.Timestep_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.Timestep_iddObjectType)
    __swig_destroy__ = _openstudiomodelsimulation.delete_Timestep
    __del__ = lambda self: None

    def numberOfTimestepsPerHour(self) -> "int":
        return _openstudiomodelsimulation.Timestep_numberOfTimestepsPerHour(self)

    def isNumberOfTimestepsPerHourDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.Timestep_isNumberOfTimestepsPerHourDefaulted(self)

    def setNumberOfTimestepsPerHour(self, numberOfTimestepsPerHour: 'int') -> "bool":
        return _openstudiomodelsimulation.Timestep_setNumberOfTimestepsPerHour(self, numberOfTimestepsPerHour)

    def resetNumberOfTimestepsPerHour(self) -> "void":
        return _openstudiomodelsimulation.Timestep_resetNumberOfTimestepsPerHour(self)
Timestep_swigregister = _openstudiomodelsimulation.Timestep_swigregister
Timestep_swigregister(Timestep)

def Timestep_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.Timestep_iddObjectType()
Timestep_iddObjectType = _openstudiomodelsimulation.Timestep_iddObjectType


def toTimestep(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Timestep >":
    return _openstudiomodelsimulation.toTimestep(idfObject)
toTimestep = _openstudiomodelsimulation.toTimestep

def getTimestep(t_model: 'Model') -> "openstudio::model::Timestep":
    return _openstudiomodelsimulation.getTimestep(t_model)
getTimestep = _openstudiomodelsimulation.getTimestep

def getOptionalTimestep(t_model: 'Model') -> "boost::optional< openstudio::model::Timestep >":
    return _openstudiomodelsimulation.getOptionalTimestep(t_model)
getOptionalTimestep = _openstudiomodelsimulation.getOptionalTimestep
class ZoneAirContaminantBalance(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneAirContaminantBalance, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneAirContaminantBalance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ZoneAirContaminantBalance
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.ZoneAirContaminantBalance_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.ZoneAirContaminantBalance_iddObjectType)

    def carbonDioxideConcentration(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_carbonDioxideConcentration(self)

    def isCarbonDioxideConcentrationDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_isCarbonDioxideConcentrationDefaulted(self)

    def outdoorCarbonDioxideSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_outdoorCarbonDioxideSchedule(self)

    def setCarbonDioxideConcentration(self, carbonDioxideConcentration: 'bool') -> "bool":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_setCarbonDioxideConcentration(self, carbonDioxideConcentration)

    def setCarbonDioxideConcentrationNoFail(self, carbonDioxideConcentration: 'bool') -> "void":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_setCarbonDioxideConcentrationNoFail(self, carbonDioxideConcentration)

    def resetCarbonDioxideConcentration(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_resetCarbonDioxideConcentration(self)

    def setOutdoorCarbonDioxideSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_setOutdoorCarbonDioxideSchedule(self, schedule)

    def resetOutdoorCarbonDioxideSchedule(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirContaminantBalance_resetOutdoorCarbonDioxideSchedule(self)
ZoneAirContaminantBalance_swigregister = _openstudiomodelsimulation.ZoneAirContaminantBalance_swigregister
ZoneAirContaminantBalance_swigregister(ZoneAirContaminantBalance)

def ZoneAirContaminantBalance_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ZoneAirContaminantBalance_iddObjectType()
ZoneAirContaminantBalance_iddObjectType = _openstudiomodelsimulation.ZoneAirContaminantBalance_iddObjectType


def toZoneAirContaminantBalance(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneAirContaminantBalance >":
    return _openstudiomodelsimulation.toZoneAirContaminantBalance(idfObject)
toZoneAirContaminantBalance = _openstudiomodelsimulation.toZoneAirContaminantBalance

def getZoneAirContaminantBalance(t_model: 'Model') -> "openstudio::model::ZoneAirContaminantBalance":
    return _openstudiomodelsimulation.getZoneAirContaminantBalance(t_model)
getZoneAirContaminantBalance = _openstudiomodelsimulation.getZoneAirContaminantBalance

def getOptionalZoneAirContaminantBalance(t_model: 'Model') -> "boost::optional< openstudio::model::ZoneAirContaminantBalance >":
    return _openstudiomodelsimulation.getOptionalZoneAirContaminantBalance(t_model)
getOptionalZoneAirContaminantBalance = _openstudiomodelsimulation.getOptionalZoneAirContaminantBalance
class ZoneAirHeatBalanceAlgorithm(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneAirHeatBalanceAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneAirHeatBalanceAlgorithm, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ZoneAirHeatBalanceAlgorithm
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_iddObjectType)
    __swig_getmethods__["validAlgorithmValues"] = lambda x: _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_validAlgorithmValues
    if _newclass:
        validAlgorithmValues = staticmethod(_openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_validAlgorithmValues)

    def algorithm(self) -> "std::string":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_algorithm(self)

    def isAlgorithmDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_isAlgorithmDefaulted(self)

    def setAlgorithm(self, algorithm: 'std::string') -> "bool":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_setAlgorithm(self, algorithm)

    def resetAlgorithm(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_resetAlgorithm(self)
ZoneAirHeatBalanceAlgorithm_swigregister = _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_swigregister
ZoneAirHeatBalanceAlgorithm_swigregister(ZoneAirHeatBalanceAlgorithm)

def ZoneAirHeatBalanceAlgorithm_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_iddObjectType()
ZoneAirHeatBalanceAlgorithm_iddObjectType = _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_iddObjectType

def ZoneAirHeatBalanceAlgorithm_validAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_validAlgorithmValues()
ZoneAirHeatBalanceAlgorithm_validAlgorithmValues = _openstudiomodelsimulation.ZoneAirHeatBalanceAlgorithm_validAlgorithmValues


def toZoneAirHeatBalanceAlgorithm(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneAirHeatBalanceAlgorithm >":
    return _openstudiomodelsimulation.toZoneAirHeatBalanceAlgorithm(idfObject)
toZoneAirHeatBalanceAlgorithm = _openstudiomodelsimulation.toZoneAirHeatBalanceAlgorithm

def getZoneAirHeatBalanceAlgorithm(t_model: 'Model') -> "openstudio::model::ZoneAirHeatBalanceAlgorithm":
    return _openstudiomodelsimulation.getZoneAirHeatBalanceAlgorithm(t_model)
getZoneAirHeatBalanceAlgorithm = _openstudiomodelsimulation.getZoneAirHeatBalanceAlgorithm

def getOptionalZoneAirHeatBalanceAlgorithm(t_model: 'Model') -> "boost::optional< openstudio::model::ZoneAirHeatBalanceAlgorithm >":
    return _openstudiomodelsimulation.getOptionalZoneAirHeatBalanceAlgorithm(t_model)
getOptionalZoneAirHeatBalanceAlgorithm = _openstudiomodelsimulation.getOptionalZoneAirHeatBalanceAlgorithm
class ZoneAirMassFlowConservation(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneAirMassFlowConservation, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneAirMassFlowConservation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ZoneAirMassFlowConservation
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.ZoneAirMassFlowConservation_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.ZoneAirMassFlowConservation_iddObjectType)
    __swig_getmethods__["sourceZoneInfiltrationTreatmentValues"] = lambda x: _openstudiomodelsimulation.ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatmentValues
    if _newclass:
        sourceZoneInfiltrationTreatmentValues = staticmethod(_openstudiomodelsimulation.ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatmentValues)
    __swig_getmethods__["infiltrationBalancingMethodValues"] = lambda x: _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingMethodValues
    if _newclass:
        infiltrationBalancingMethodValues = staticmethod(_openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingMethodValues)
    __swig_getmethods__["infiltrationBalancingZonesValues"] = lambda x: _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingZonesValues
    if _newclass:
        infiltrationBalancingZonesValues = staticmethod(_openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingZonesValues)

    def adjustZoneMixingForZoneAirMassFlowBalance(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_adjustZoneMixingForZoneAirMassFlowBalance(self)

    def isAdjustZoneMixingForZoneAirMassFlowBalanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_isAdjustZoneMixingForZoneAirMassFlowBalanceDefaulted(self)

    def sourceZoneInfiltrationTreatment(self) -> "std::string":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatment(self)

    def isSourceZoneInfiltrationTreatmentDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_isSourceZoneInfiltrationTreatmentDefaulted(self)

    def infiltrationBalancingMethod(self) -> "std::string":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingMethod(self)

    def isInfiltrationBalancingMethodDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_isInfiltrationBalancingMethodDefaulted(self)

    def infiltrationBalancingZones(self) -> "std::string":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingZones(self)

    def isInfiltrationBalancingZonesDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_isInfiltrationBalancingZonesDefaulted(self)

    def setAdjustZoneMixingForZoneAirMassFlowBalance(self, adjustZoneMixingForZoneAirMassFlowBalance: 'bool') -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_setAdjustZoneMixingForZoneAirMassFlowBalance(self, adjustZoneMixingForZoneAirMassFlowBalance)

    def resetAdjustZoneMixingForZoneAirMassFlowBalance(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_resetAdjustZoneMixingForZoneAirMassFlowBalance(self)

    def setSourceZoneInfiltrationTreatment(self, sourceZoneInfiltrationTreatment: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_setSourceZoneInfiltrationTreatment(self, sourceZoneInfiltrationTreatment)

    def resetSourceZoneInfiltrationTreatment(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_resetSourceZoneInfiltrationTreatment(self)

    def setInfiltrationBalancingMethod(self, infiltrationBalancingMethod: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_setInfiltrationBalancingMethod(self, infiltrationBalancingMethod)

    def resetInfiltrationBalancingMethod(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_resetInfiltrationBalancingMethod(self)

    def setInfiltrationBalancingZones(self, infiltrationBalancingZones: 'std::string const &') -> "bool":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_setInfiltrationBalancingZones(self, infiltrationBalancingZones)

    def resetInfiltrationBalancingZones(self) -> "void":
        return _openstudiomodelsimulation.ZoneAirMassFlowConservation_resetInfiltrationBalancingZones(self)
ZoneAirMassFlowConservation_swigregister = _openstudiomodelsimulation.ZoneAirMassFlowConservation_swigregister
ZoneAirMassFlowConservation_swigregister(ZoneAirMassFlowConservation)

def ZoneAirMassFlowConservation_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ZoneAirMassFlowConservation_iddObjectType()
ZoneAirMassFlowConservation_iddObjectType = _openstudiomodelsimulation.ZoneAirMassFlowConservation_iddObjectType

def ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatmentValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatmentValues()
ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatmentValues = _openstudiomodelsimulation.ZoneAirMassFlowConservation_sourceZoneInfiltrationTreatmentValues

def ZoneAirMassFlowConservation_infiltrationBalancingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingMethodValues()
ZoneAirMassFlowConservation_infiltrationBalancingMethodValues = _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingMethodValues

def ZoneAirMassFlowConservation_infiltrationBalancingZonesValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingZonesValues()
ZoneAirMassFlowConservation_infiltrationBalancingZonesValues = _openstudiomodelsimulation.ZoneAirMassFlowConservation_infiltrationBalancingZonesValues


def toZoneAirMassFlowConservation(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneAirMassFlowConservation >":
    return _openstudiomodelsimulation.toZoneAirMassFlowConservation(idfObject)
toZoneAirMassFlowConservation = _openstudiomodelsimulation.toZoneAirMassFlowConservation

def getZoneAirMassFlowConservation(t_model: 'Model') -> "openstudio::model::ZoneAirMassFlowConservation":
    return _openstudiomodelsimulation.getZoneAirMassFlowConservation(t_model)
getZoneAirMassFlowConservation = _openstudiomodelsimulation.getZoneAirMassFlowConservation

def getOptionalZoneAirMassFlowConservation(t_model: 'Model') -> "boost::optional< openstudio::model::ZoneAirMassFlowConservation >":
    return _openstudiomodelsimulation.getOptionalZoneAirMassFlowConservation(t_model)
getOptionalZoneAirMassFlowConservation = _openstudiomodelsimulation.getOptionalZoneAirMassFlowConservation
class ZoneCapacitanceMultiplierResearchSpecial(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneCapacitanceMultiplierResearchSpecial, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneCapacitanceMultiplierResearchSpecial, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_ZoneCapacitanceMultiplierResearchSpecial
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_iddObjectType)

    def temperatureCapacityMultiplier(self) -> "double":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_temperatureCapacityMultiplier(self)

    def getTemperatureCapacityMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_getTemperatureCapacityMultiplier(self, returnIP)

    def isTemperatureCapacityMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_isTemperatureCapacityMultiplierDefaulted(self)

    def humidityCapacityMultiplier(self) -> "double":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_humidityCapacityMultiplier(self)

    def getHumidityCapacityMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_getHumidityCapacityMultiplier(self, returnIP)

    def isHumidityCapacityMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_isHumidityCapacityMultiplierDefaulted(self)

    def carbonDioxideCapacityMultiplier(self) -> "double":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_carbonDioxideCapacityMultiplier(self)

    def getCarbonDioxideCapacityMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_getCarbonDioxideCapacityMultiplier(self, returnIP)

    def isCarbonDioxideCapacityMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_isCarbonDioxideCapacityMultiplierDefaulted(self)

    def setTemperatureCapacityMultiplier(self, *args) -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_setTemperatureCapacityMultiplier(self, *args)

    def resetTemperatureCapacityMultiplier(self) -> "void":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_resetTemperatureCapacityMultiplier(self)

    def setHumidityCapacityMultiplier(self, *args) -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_setHumidityCapacityMultiplier(self, *args)

    def resetHumidityCapacityMultiplier(self) -> "void":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_resetHumidityCapacityMultiplier(self)

    def setCarbonDioxideCapacityMultiplier(self, *args) -> "bool":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_setCarbonDioxideCapacityMultiplier(self, *args)

    def resetCarbonDioxideCapacityMultiplier(self) -> "void":
        return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_resetCarbonDioxideCapacityMultiplier(self)
ZoneCapacitanceMultiplierResearchSpecial_swigregister = _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_swigregister
ZoneCapacitanceMultiplierResearchSpecial_swigregister(ZoneCapacitanceMultiplierResearchSpecial)

def ZoneCapacitanceMultiplierResearchSpecial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_iddObjectType()
ZoneCapacitanceMultiplierResearchSpecial_iddObjectType = _openstudiomodelsimulation.ZoneCapacitanceMultiplierResearchSpecial_iddObjectType


def toZoneCapacitanceMultiplierResearchSpecial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneCapacitanceMultiplierResearchSpecial >":
    return _openstudiomodelsimulation.toZoneCapacitanceMultiplierResearchSpecial(idfObject)
toZoneCapacitanceMultiplierResearchSpecial = _openstudiomodelsimulation.toZoneCapacitanceMultiplierResearchSpecial

def getZoneCapacitanceMultiplierResearchSpecial(t_model: 'Model') -> "openstudio::model::ZoneCapacitanceMultiplierResearchSpecial":
    return _openstudiomodelsimulation.getZoneCapacitanceMultiplierResearchSpecial(t_model)
getZoneCapacitanceMultiplierResearchSpecial = _openstudiomodelsimulation.getZoneCapacitanceMultiplierResearchSpecial

def getOptionalZoneCapacitanceMultiplierResearchSpecial(t_model: 'Model') -> "boost::optional< openstudio::model::ZoneCapacitanceMultiplierResearchSpecial >":
    return _openstudiomodelsimulation.getOptionalZoneCapacitanceMultiplierResearchSpecial(t_model)
getOptionalZoneCapacitanceMultiplierResearchSpecial = _openstudiomodelsimulation.getOptionalZoneCapacitanceMultiplierResearchSpecial
class SkyTemperature(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyTemperature, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SkyTemperature, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelsimulation.new_SkyTemperature(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_SkyTemperature
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SkyTemperature_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SkyTemperature_iddObjectType)
SkyTemperature_swigregister = _openstudiomodelsimulation.SkyTemperature_swigregister
SkyTemperature_swigregister(SkyTemperature)

def SkyTemperature_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SkyTemperature_iddObjectType()
SkyTemperature_iddObjectType = _openstudiomodelsimulation.SkyTemperature_iddObjectType


def toSkyTemperature(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SkyTemperature >":
    return _openstudiomodelsimulation.toSkyTemperature(idfObject)
toSkyTemperature = _openstudiomodelsimulation.toSkyTemperature

def getSkyTemperature(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SkyTemperature >":
    return _openstudiomodelsimulation.getSkyTemperature(t_model, t_handle)
getSkyTemperature = _openstudiomodelsimulation.getSkyTemperature

def getSkyTemperatures(t_model: 'Model') -> "std::vector< openstudio::model::SkyTemperature,std::allocator< openstudio::model::SkyTemperature > >":
    return _openstudiomodelsimulation.getSkyTemperatures(t_model)
getSkyTemperatures = _openstudiomodelsimulation.getSkyTemperatures

def getSkyTemperatureByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SkyTemperature >":
    return _openstudiomodelsimulation.getSkyTemperatureByName(t_model, t_name)
getSkyTemperatureByName = _openstudiomodelsimulation.getSkyTemperatureByName

def getSkyTemperaturesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SkyTemperature,std::allocator< openstudio::model::SkyTemperature > >":
    return _openstudiomodelsimulation.getSkyTemperaturesByName(t_model, t_name, t_exactMatch)
getSkyTemperaturesByName = _openstudiomodelsimulation.getSkyTemperaturesByName
class SiteGroundReflectance(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundReflectance, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundReflectance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundReflectance
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SiteGroundReflectance_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SiteGroundReflectance_iddObjectType)

    def januaryGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_januaryGroundReflectance(self)

    def isJanuaryGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isJanuaryGroundReflectanceDefaulted(self)

    def februaryGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_februaryGroundReflectance(self)

    def isFebruaryGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isFebruaryGroundReflectanceDefaulted(self)

    def marchGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_marchGroundReflectance(self)

    def isMarchGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isMarchGroundReflectanceDefaulted(self)

    def aprilGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_aprilGroundReflectance(self)

    def isAprilGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isAprilGroundReflectanceDefaulted(self)

    def mayGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_mayGroundReflectance(self)

    def isMayGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isMayGroundReflectanceDefaulted(self)

    def juneGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_juneGroundReflectance(self)

    def isJuneGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isJuneGroundReflectanceDefaulted(self)

    def julyGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_julyGroundReflectance(self)

    def isJulyGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isJulyGroundReflectanceDefaulted(self)

    def augustGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_augustGroundReflectance(self)

    def isAugustGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isAugustGroundReflectanceDefaulted(self)

    def septemberGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_septemberGroundReflectance(self)

    def isSeptemberGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isSeptemberGroundReflectanceDefaulted(self)

    def octoberGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_octoberGroundReflectance(self)

    def isOctoberGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isOctoberGroundReflectanceDefaulted(self)

    def novemberGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_novemberGroundReflectance(self)

    def isNovemberGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isNovemberGroundReflectanceDefaulted(self)

    def decemberGroundReflectance(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundReflectance_decemberGroundReflectance(self)

    def isDecemberGroundReflectanceDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_isDecemberGroundReflectanceDefaulted(self)

    def setJanuaryGroundReflectance(self, januaryGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setJanuaryGroundReflectance(self, januaryGroundReflectance)

    def resetJanuaryGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetJanuaryGroundReflectance(self)

    def setFebruaryGroundReflectance(self, februaryGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setFebruaryGroundReflectance(self, februaryGroundReflectance)

    def resetFebruaryGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetFebruaryGroundReflectance(self)

    def setMarchGroundReflectance(self, marchGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setMarchGroundReflectance(self, marchGroundReflectance)

    def resetMarchGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetMarchGroundReflectance(self)

    def setAprilGroundReflectance(self, aprilGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setAprilGroundReflectance(self, aprilGroundReflectance)

    def resetAprilGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetAprilGroundReflectance(self)

    def setMayGroundReflectance(self, mayGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setMayGroundReflectance(self, mayGroundReflectance)

    def resetMayGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetMayGroundReflectance(self)

    def setJuneGroundReflectance(self, juneGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setJuneGroundReflectance(self, juneGroundReflectance)

    def resetJuneGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetJuneGroundReflectance(self)

    def setJulyGroundReflectance(self, julyGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setJulyGroundReflectance(self, julyGroundReflectance)

    def resetJulyGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetJulyGroundReflectance(self)

    def setAugustGroundReflectance(self, augustGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setAugustGroundReflectance(self, augustGroundReflectance)

    def resetAugustGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetAugustGroundReflectance(self)

    def setSeptemberGroundReflectance(self, septemberGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setSeptemberGroundReflectance(self, septemberGroundReflectance)

    def resetSeptemberGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetSeptemberGroundReflectance(self)

    def setOctoberGroundReflectance(self, octoberGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setOctoberGroundReflectance(self, octoberGroundReflectance)

    def resetOctoberGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetOctoberGroundReflectance(self)

    def setNovemberGroundReflectance(self, novemberGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setNovemberGroundReflectance(self, novemberGroundReflectance)

    def resetNovemberGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetNovemberGroundReflectance(self)

    def setDecemberGroundReflectance(self, decemberGroundReflectance: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundReflectance_setDecemberGroundReflectance(self, decemberGroundReflectance)

    def resetDecemberGroundReflectance(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundReflectance_resetDecemberGroundReflectance(self)
SiteGroundReflectance_swigregister = _openstudiomodelsimulation.SiteGroundReflectance_swigregister
SiteGroundReflectance_swigregister(SiteGroundReflectance)

def SiteGroundReflectance_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundReflectance_iddObjectType()
SiteGroundReflectance_iddObjectType = _openstudiomodelsimulation.SiteGroundReflectance_iddObjectType


def toSiteGroundReflectance(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SiteGroundReflectance >":
    return _openstudiomodelsimulation.toSiteGroundReflectance(idfObject)
toSiteGroundReflectance = _openstudiomodelsimulation.toSiteGroundReflectance

def getSiteGroundReflectance(t_model: 'Model') -> "openstudio::model::SiteGroundReflectance":
    return _openstudiomodelsimulation.getSiteGroundReflectance(t_model)
getSiteGroundReflectance = _openstudiomodelsimulation.getSiteGroundReflectance

def getOptionalSiteGroundReflectance(t_model: 'Model') -> "boost::optional< openstudio::model::SiteGroundReflectance >":
    return _openstudiomodelsimulation.getOptionalSiteGroundReflectance(t_model)
getOptionalSiteGroundReflectance = _openstudiomodelsimulation.getOptionalSiteGroundReflectance
class SiteGroundTemperatureBuildingSurface(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundTemperatureBuildingSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundTemperatureBuildingSurface, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelsimulation.new_SiteGroundTemperatureBuildingSurface(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureBuildingSurface
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_iddObjectType)

    def januaryGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_januaryGroundTemperature(self)

    def isJanuaryGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isJanuaryGroundTemperatureDefaulted(self)

    def februaryGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_februaryGroundTemperature(self)

    def isFebruaryGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isFebruaryGroundTemperatureDefaulted(self)

    def marchGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_marchGroundTemperature(self)

    def isMarchGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isMarchGroundTemperatureDefaulted(self)

    def aprilGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_aprilGroundTemperature(self)

    def isAprilGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isAprilGroundTemperatureDefaulted(self)

    def mayGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_mayGroundTemperature(self)

    def isMayGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isMayGroundTemperatureDefaulted(self)

    def juneGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_juneGroundTemperature(self)

    def isJuneGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isJuneGroundTemperatureDefaulted(self)

    def julyGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_julyGroundTemperature(self)

    def isJulyGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isJulyGroundTemperatureDefaulted(self)

    def augustGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_augustGroundTemperature(self)

    def isAugustGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isAugustGroundTemperatureDefaulted(self)

    def septemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_septemberGroundTemperature(self)

    def isSeptemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isSeptemberGroundTemperatureDefaulted(self)

    def octoberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_octoberGroundTemperature(self)

    def isOctoberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isOctoberGroundTemperatureDefaulted(self)

    def novemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_novemberGroundTemperature(self)

    def isNovemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isNovemberGroundTemperatureDefaulted(self)

    def decemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_decemberGroundTemperature(self)

    def isDecemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isDecemberGroundTemperatureDefaulted(self)

    def getTemperatureByMonth(self, *args) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_getTemperatureByMonth(self, *args)

    def isMonthDefaulted(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_isMonthDefaulted(self, *args)

    def getAllMonthlyTemperatures(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_getAllMonthlyTemperatures(self)

    def setJanuaryGroundTemperature(self, januaryGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setJanuaryGroundTemperature(self, januaryGroundTemperature)

    def resetJanuaryGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetJanuaryGroundTemperature(self)

    def setFebruaryGroundTemperature(self, februaryGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setFebruaryGroundTemperature(self, februaryGroundTemperature)

    def resetFebruaryGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetFebruaryGroundTemperature(self)

    def setMarchGroundTemperature(self, marchGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setMarchGroundTemperature(self, marchGroundTemperature)

    def resetMarchGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetMarchGroundTemperature(self)

    def setAprilGroundTemperature(self, aprilGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setAprilGroundTemperature(self, aprilGroundTemperature)

    def resetAprilGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetAprilGroundTemperature(self)

    def setMayGroundTemperature(self, mayGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setMayGroundTemperature(self, mayGroundTemperature)

    def resetMayGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetMayGroundTemperature(self)

    def setJuneGroundTemperature(self, juneGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setJuneGroundTemperature(self, juneGroundTemperature)

    def resetJuneGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetJuneGroundTemperature(self)

    def setJulyGroundTemperature(self, julyGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setJulyGroundTemperature(self, julyGroundTemperature)

    def resetJulyGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetJulyGroundTemperature(self)

    def setAugustGroundTemperature(self, augustGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setAugustGroundTemperature(self, augustGroundTemperature)

    def resetAugustGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetAugustGroundTemperature(self)

    def setSeptemberGroundTemperature(self, septemberGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setSeptemberGroundTemperature(self, septemberGroundTemperature)

    def resetSeptemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetSeptemberGroundTemperature(self)

    def setOctoberGroundTemperature(self, octoberGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setOctoberGroundTemperature(self, octoberGroundTemperature)

    def resetOctoberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetOctoberGroundTemperature(self)

    def setNovemberGroundTemperature(self, novemberGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setNovemberGroundTemperature(self, novemberGroundTemperature)

    def resetNovemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetNovemberGroundTemperature(self)

    def setDecemberGroundTemperature(self, decemberGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setDecemberGroundTemperature(self, decemberGroundTemperature)

    def resetDecemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetDecemberGroundTemperature(self)

    def setTemperatureByMonth(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setTemperatureByMonth(self, *args)

    def resetTemperatureByMonth(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetTemperatureByMonth(self, *args)

    def resetAllMonths(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_resetAllMonths(self)

    def setAllMonthlyTemperatures(self, monthly_temperatures: 'DoubleVector') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_setAllMonthlyTemperatures(self, monthly_temperatures)
SiteGroundTemperatureBuildingSurface_swigregister = _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_swigregister
SiteGroundTemperatureBuildingSurface_swigregister(SiteGroundTemperatureBuildingSurface)

def SiteGroundTemperatureBuildingSurface_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_iddObjectType()
SiteGroundTemperatureBuildingSurface_iddObjectType = _openstudiomodelsimulation.SiteGroundTemperatureBuildingSurface_iddObjectType


def toSiteGroundTemperatureBuildingSurface(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SiteGroundTemperatureBuildingSurface >":
    return _openstudiomodelsimulation.toSiteGroundTemperatureBuildingSurface(idfObject)
toSiteGroundTemperatureBuildingSurface = _openstudiomodelsimulation.toSiteGroundTemperatureBuildingSurface

def getSiteGroundTemperatureBuildingSurface(t_model: 'Model') -> "openstudio::model::SiteGroundTemperatureBuildingSurface":
    return _openstudiomodelsimulation.getSiteGroundTemperatureBuildingSurface(t_model)
getSiteGroundTemperatureBuildingSurface = _openstudiomodelsimulation.getSiteGroundTemperatureBuildingSurface

def getOptionalSiteGroundTemperatureBuildingSurface(t_model: 'Model') -> "boost::optional< openstudio::model::SiteGroundTemperatureBuildingSurface >":
    return _openstudiomodelsimulation.getOptionalSiteGroundTemperatureBuildingSurface(t_model)
getOptionalSiteGroundTemperatureBuildingSurface = _openstudiomodelsimulation.getOptionalSiteGroundTemperatureBuildingSurface
class SiteGroundTemperatureDeep(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundTemperatureDeep, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundTemperatureDeep, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelsimulation.new_SiteGroundTemperatureDeep(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureDeep
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SiteGroundTemperatureDeep_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SiteGroundTemperatureDeep_iddObjectType)

    def januaryDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_januaryDeepGroundTemperature(self)

    def isJanuaryDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isJanuaryDeepGroundTemperatureDefaulted(self)

    def februaryDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_februaryDeepGroundTemperature(self)

    def isFebruaryDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isFebruaryDeepGroundTemperatureDefaulted(self)

    def marchDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_marchDeepGroundTemperature(self)

    def isMarchDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isMarchDeepGroundTemperatureDefaulted(self)

    def aprilDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_aprilDeepGroundTemperature(self)

    def isAprilDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isAprilDeepGroundTemperatureDefaulted(self)

    def mayDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_mayDeepGroundTemperature(self)

    def isMayDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isMayDeepGroundTemperatureDefaulted(self)

    def juneDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_juneDeepGroundTemperature(self)

    def isJuneDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isJuneDeepGroundTemperatureDefaulted(self)

    def julyDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_julyDeepGroundTemperature(self)

    def isJulyDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isJulyDeepGroundTemperatureDefaulted(self)

    def augustDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_augustDeepGroundTemperature(self)

    def isAugustDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isAugustDeepGroundTemperatureDefaulted(self)

    def septemberDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_septemberDeepGroundTemperature(self)

    def isSeptemberDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isSeptemberDeepGroundTemperatureDefaulted(self)

    def octoberDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_octoberDeepGroundTemperature(self)

    def isOctoberDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isOctoberDeepGroundTemperatureDefaulted(self)

    def novemberDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_novemberDeepGroundTemperature(self)

    def isNovemberDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isNovemberDeepGroundTemperatureDefaulted(self)

    def decemberDeepGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_decemberDeepGroundTemperature(self)

    def isDecemberDeepGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isDecemberDeepGroundTemperatureDefaulted(self)

    def getTemperatureByMonth(self, *args) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_getTemperatureByMonth(self, *args)

    def isMonthDefaulted(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_isMonthDefaulted(self, *args)

    def getAllMonthlyTemperatures(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_getAllMonthlyTemperatures(self)

    def setJanuaryDeepGroundTemperature(self, januaryDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setJanuaryDeepGroundTemperature(self, januaryDeepGroundTemperature)

    def resetJanuaryDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetJanuaryDeepGroundTemperature(self)

    def setFebruaryDeepGroundTemperature(self, februaryDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setFebruaryDeepGroundTemperature(self, februaryDeepGroundTemperature)

    def resetFebruaryDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetFebruaryDeepGroundTemperature(self)

    def setMarchDeepGroundTemperature(self, marchDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setMarchDeepGroundTemperature(self, marchDeepGroundTemperature)

    def resetMarchDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetMarchDeepGroundTemperature(self)

    def setAprilDeepGroundTemperature(self, aprilDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setAprilDeepGroundTemperature(self, aprilDeepGroundTemperature)

    def resetAprilDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetAprilDeepGroundTemperature(self)

    def setMayDeepGroundTemperature(self, mayDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setMayDeepGroundTemperature(self, mayDeepGroundTemperature)

    def resetMayDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetMayDeepGroundTemperature(self)

    def setJuneDeepGroundTemperature(self, juneDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setJuneDeepGroundTemperature(self, juneDeepGroundTemperature)

    def resetJuneDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetJuneDeepGroundTemperature(self)

    def setJulyDeepGroundTemperature(self, julyDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setJulyDeepGroundTemperature(self, julyDeepGroundTemperature)

    def resetJulyDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetJulyDeepGroundTemperature(self)

    def setAugustDeepGroundTemperature(self, augustDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setAugustDeepGroundTemperature(self, augustDeepGroundTemperature)

    def resetAugustDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetAugustDeepGroundTemperature(self)

    def setSeptemberDeepGroundTemperature(self, septemberDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setSeptemberDeepGroundTemperature(self, septemberDeepGroundTemperature)

    def resetSeptemberDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetSeptemberDeepGroundTemperature(self)

    def setOctoberDeepGroundTemperature(self, octoberDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setOctoberDeepGroundTemperature(self, octoberDeepGroundTemperature)

    def resetOctoberDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetOctoberDeepGroundTemperature(self)

    def setNovemberDeepGroundTemperature(self, novemberDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setNovemberDeepGroundTemperature(self, novemberDeepGroundTemperature)

    def resetNovemberDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetNovemberDeepGroundTemperature(self)

    def setDecemberDeepGroundTemperature(self, decemberDeepGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setDecemberDeepGroundTemperature(self, decemberDeepGroundTemperature)

    def resetDecemberDeepGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetDecemberDeepGroundTemperature(self)

    def setTemperatureByMonth(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setTemperatureByMonth(self, *args)

    def resetTemperatureByMonth(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetTemperatureByMonth(self, *args)

    def resetAllMonths(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_resetAllMonths(self)

    def setAllMonthlyTemperatures(self, monthly_temperatures: 'DoubleVector') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureDeep_setAllMonthlyTemperatures(self, monthly_temperatures)
SiteGroundTemperatureDeep_swigregister = _openstudiomodelsimulation.SiteGroundTemperatureDeep_swigregister
SiteGroundTemperatureDeep_swigregister(SiteGroundTemperatureDeep)

def SiteGroundTemperatureDeep_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundTemperatureDeep_iddObjectType()
SiteGroundTemperatureDeep_iddObjectType = _openstudiomodelsimulation.SiteGroundTemperatureDeep_iddObjectType


def toSiteGroundTemperatureDeep(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SiteGroundTemperatureDeep >":
    return _openstudiomodelsimulation.toSiteGroundTemperatureDeep(idfObject)
toSiteGroundTemperatureDeep = _openstudiomodelsimulation.toSiteGroundTemperatureDeep

def getSiteGroundTemperatureDeep(t_model: 'Model') -> "openstudio::model::SiteGroundTemperatureDeep":
    return _openstudiomodelsimulation.getSiteGroundTemperatureDeep(t_model)
getSiteGroundTemperatureDeep = _openstudiomodelsimulation.getSiteGroundTemperatureDeep

def getOptionalSiteGroundTemperatureDeep(t_model: 'Model') -> "boost::optional< openstudio::model::SiteGroundTemperatureDeep >":
    return _openstudiomodelsimulation.getOptionalSiteGroundTemperatureDeep(t_model)
getOptionalSiteGroundTemperatureDeep = _openstudiomodelsimulation.getOptionalSiteGroundTemperatureDeep
class SiteGroundTemperatureShallow(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundTemperatureShallow, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundTemperatureShallow, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelsimulation.new_SiteGroundTemperatureShallow(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureShallow
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SiteGroundTemperatureShallow_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SiteGroundTemperatureShallow_iddObjectType)

    def januarySurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_januarySurfaceGroundTemperature(self)

    def isJanuarySurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isJanuarySurfaceGroundTemperatureDefaulted(self)

    def februarySurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_februarySurfaceGroundTemperature(self)

    def isFebruarySurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isFebruarySurfaceGroundTemperatureDefaulted(self)

    def marchSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_marchSurfaceGroundTemperature(self)

    def isMarchSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isMarchSurfaceGroundTemperatureDefaulted(self)

    def aprilSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_aprilSurfaceGroundTemperature(self)

    def isAprilSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isAprilSurfaceGroundTemperatureDefaulted(self)

    def maySurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_maySurfaceGroundTemperature(self)

    def isMaySurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isMaySurfaceGroundTemperatureDefaulted(self)

    def juneSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_juneSurfaceGroundTemperature(self)

    def isJuneSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isJuneSurfaceGroundTemperatureDefaulted(self)

    def julySurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_julySurfaceGroundTemperature(self)

    def isJulySurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isJulySurfaceGroundTemperatureDefaulted(self)

    def augustSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_augustSurfaceGroundTemperature(self)

    def isAugustSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isAugustSurfaceGroundTemperatureDefaulted(self)

    def septemberSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_septemberSurfaceGroundTemperature(self)

    def isSeptemberSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isSeptemberSurfaceGroundTemperatureDefaulted(self)

    def octoberSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_octoberSurfaceGroundTemperature(self)

    def isOctoberSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isOctoberSurfaceGroundTemperatureDefaulted(self)

    def novemberSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_novemberSurfaceGroundTemperature(self)

    def isNovemberSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isNovemberSurfaceGroundTemperatureDefaulted(self)

    def decemberSurfaceGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_decemberSurfaceGroundTemperature(self)

    def isDecemberSurfaceGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isDecemberSurfaceGroundTemperatureDefaulted(self)

    def getTemperatureByMonth(self, *args) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_getTemperatureByMonth(self, *args)

    def isMonthDefaulted(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_isMonthDefaulted(self, *args)

    def getAllMonthlyTemperatures(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_getAllMonthlyTemperatures(self)

    def setJanuarySurfaceGroundTemperature(self, januarySurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setJanuarySurfaceGroundTemperature(self, januarySurfaceGroundTemperature)

    def resetJanuarySurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetJanuarySurfaceGroundTemperature(self)

    def setFebruarySurfaceGroundTemperature(self, februarySurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setFebruarySurfaceGroundTemperature(self, februarySurfaceGroundTemperature)

    def resetFebruarySurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetFebruarySurfaceGroundTemperature(self)

    def setMarchSurfaceGroundTemperature(self, marchSurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setMarchSurfaceGroundTemperature(self, marchSurfaceGroundTemperature)

    def resetMarchSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetMarchSurfaceGroundTemperature(self)

    def setAprilSurfaceGroundTemperature(self, aprilSurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setAprilSurfaceGroundTemperature(self, aprilSurfaceGroundTemperature)

    def resetAprilSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetAprilSurfaceGroundTemperature(self)

    def setMaySurfaceGroundTemperature(self, maySurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setMaySurfaceGroundTemperature(self, maySurfaceGroundTemperature)

    def resetMaySurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetMaySurfaceGroundTemperature(self)

    def setJuneSurfaceGroundTemperature(self, juneSurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setJuneSurfaceGroundTemperature(self, juneSurfaceGroundTemperature)

    def resetJuneSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetJuneSurfaceGroundTemperature(self)

    def setJulySurfaceGroundTemperature(self, julySurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setJulySurfaceGroundTemperature(self, julySurfaceGroundTemperature)

    def resetJulySurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetJulySurfaceGroundTemperature(self)

    def setAugustSurfaceGroundTemperature(self, augustSurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setAugustSurfaceGroundTemperature(self, augustSurfaceGroundTemperature)

    def resetAugustSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetAugustSurfaceGroundTemperature(self)

    def setSeptemberSurfaceGroundTemperature(self, septemberSurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setSeptemberSurfaceGroundTemperature(self, septemberSurfaceGroundTemperature)

    def resetSeptemberSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetSeptemberSurfaceGroundTemperature(self)

    def setOctoberSurfaceGroundTemperature(self, octoberSurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setOctoberSurfaceGroundTemperature(self, octoberSurfaceGroundTemperature)

    def resetOctoberSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetOctoberSurfaceGroundTemperature(self)

    def setNovemberSurfaceGroundTemperature(self, novemberSurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setNovemberSurfaceGroundTemperature(self, novemberSurfaceGroundTemperature)

    def resetNovemberSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetNovemberSurfaceGroundTemperature(self)

    def setDecemberSurfaceGroundTemperature(self, decemberSurfaceGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setDecemberSurfaceGroundTemperature(self, decemberSurfaceGroundTemperature)

    def resetDecemberSurfaceGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetDecemberSurfaceGroundTemperature(self)

    def setTemperatureByMonth(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setTemperatureByMonth(self, *args)

    def resetTemperatureByMonth(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetTemperatureByMonth(self, *args)

    def resetAllMonths(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_resetAllMonths(self)

    def setAllMonthlyTemperatures(self, monthly_temperatures: 'DoubleVector') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureShallow_setAllMonthlyTemperatures(self, monthly_temperatures)
SiteGroundTemperatureShallow_swigregister = _openstudiomodelsimulation.SiteGroundTemperatureShallow_swigregister
SiteGroundTemperatureShallow_swigregister(SiteGroundTemperatureShallow)

def SiteGroundTemperatureShallow_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundTemperatureShallow_iddObjectType()
SiteGroundTemperatureShallow_iddObjectType = _openstudiomodelsimulation.SiteGroundTemperatureShallow_iddObjectType


def toSiteGroundTemperatureShallow(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SiteGroundTemperatureShallow >":
    return _openstudiomodelsimulation.toSiteGroundTemperatureShallow(idfObject)
toSiteGroundTemperatureShallow = _openstudiomodelsimulation.toSiteGroundTemperatureShallow

def getSiteGroundTemperatureShallow(t_model: 'Model') -> "openstudio::model::SiteGroundTemperatureShallow":
    return _openstudiomodelsimulation.getSiteGroundTemperatureShallow(t_model)
getSiteGroundTemperatureShallow = _openstudiomodelsimulation.getSiteGroundTemperatureShallow

def getOptionalSiteGroundTemperatureShallow(t_model: 'Model') -> "boost::optional< openstudio::model::SiteGroundTemperatureShallow >":
    return _openstudiomodelsimulation.getOptionalSiteGroundTemperatureShallow(t_model)
getOptionalSiteGroundTemperatureShallow = _openstudiomodelsimulation.getOptionalSiteGroundTemperatureShallow
class SiteGroundTemperatureFCfactorMethod(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteGroundTemperatureFCfactorMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SiteGroundTemperatureFCfactorMethod, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelsimulation.new_SiteGroundTemperatureFCfactorMethod(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteGroundTemperatureFCfactorMethod
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_iddObjectType)

    def januaryGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_januaryGroundTemperature(self)

    def isJanuaryGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isJanuaryGroundTemperatureDefaulted(self)

    def februaryGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_februaryGroundTemperature(self)

    def isFebruaryGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isFebruaryGroundTemperatureDefaulted(self)

    def marchGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_marchGroundTemperature(self)

    def isMarchGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isMarchGroundTemperatureDefaulted(self)

    def aprilGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_aprilGroundTemperature(self)

    def isAprilGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isAprilGroundTemperatureDefaulted(self)

    def mayGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_mayGroundTemperature(self)

    def isMayGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isMayGroundTemperatureDefaulted(self)

    def juneGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_juneGroundTemperature(self)

    def isJuneGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isJuneGroundTemperatureDefaulted(self)

    def julyGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_julyGroundTemperature(self)

    def isJulyGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isJulyGroundTemperatureDefaulted(self)

    def augustGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_augustGroundTemperature(self)

    def isAugustGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isAugustGroundTemperatureDefaulted(self)

    def septemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_septemberGroundTemperature(self)

    def isSeptemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isSeptemberGroundTemperatureDefaulted(self)

    def octoberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_octoberGroundTemperature(self)

    def isOctoberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isOctoberGroundTemperatureDefaulted(self)

    def novemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_novemberGroundTemperature(self)

    def isNovemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isNovemberGroundTemperatureDefaulted(self)

    def decemberGroundTemperature(self) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_decemberGroundTemperature(self)

    def isDecemberGroundTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isDecemberGroundTemperatureDefaulted(self)

    def getTemperatureByMonth(self, *args) -> "double":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_getTemperatureByMonth(self, *args)

    def isMonthDefaulted(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_isMonthDefaulted(self, *args)

    def getAllMonthlyTemperatures(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_getAllMonthlyTemperatures(self)

    def setJanuaryGroundTemperature(self, januaryGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setJanuaryGroundTemperature(self, januaryGroundTemperature)

    def resetJanuaryGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetJanuaryGroundTemperature(self)

    def setFebruaryGroundTemperature(self, februaryGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setFebruaryGroundTemperature(self, februaryGroundTemperature)

    def resetFebruaryGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetFebruaryGroundTemperature(self)

    def setMarchGroundTemperature(self, marchGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setMarchGroundTemperature(self, marchGroundTemperature)

    def resetMarchGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetMarchGroundTemperature(self)

    def setAprilGroundTemperature(self, aprilGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setAprilGroundTemperature(self, aprilGroundTemperature)

    def resetAprilGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetAprilGroundTemperature(self)

    def setMayGroundTemperature(self, mayGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setMayGroundTemperature(self, mayGroundTemperature)

    def resetMayGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetMayGroundTemperature(self)

    def setJuneGroundTemperature(self, juneGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setJuneGroundTemperature(self, juneGroundTemperature)

    def resetJuneGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetJuneGroundTemperature(self)

    def setJulyGroundTemperature(self, julyGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setJulyGroundTemperature(self, julyGroundTemperature)

    def resetJulyGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetJulyGroundTemperature(self)

    def setAugustGroundTemperature(self, augustGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setAugustGroundTemperature(self, augustGroundTemperature)

    def resetAugustGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetAugustGroundTemperature(self)

    def setSeptemberGroundTemperature(self, septemberGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setSeptemberGroundTemperature(self, septemberGroundTemperature)

    def resetSeptemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetSeptemberGroundTemperature(self)

    def setOctoberGroundTemperature(self, octoberGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setOctoberGroundTemperature(self, octoberGroundTemperature)

    def resetOctoberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetOctoberGroundTemperature(self)

    def setNovemberGroundTemperature(self, novemberGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setNovemberGroundTemperature(self, novemberGroundTemperature)

    def resetNovemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetNovemberGroundTemperature(self)

    def setDecemberGroundTemperature(self, decemberGroundTemperature: 'double') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setDecemberGroundTemperature(self, decemberGroundTemperature)

    def resetDecemberGroundTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetDecemberGroundTemperature(self)

    def setTemperatureByMonth(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setTemperatureByMonth(self, *args)

    def resetTemperatureByMonth(self, *args) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetTemperatureByMonth(self, *args)

    def resetAllMonths(self) -> "void":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_resetAllMonths(self)

    def setAllMonthlyTemperatures(self, monthly_temperatures: 'DoubleVector') -> "bool":
        return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_setAllMonthlyTemperatures(self, monthly_temperatures)
SiteGroundTemperatureFCfactorMethod_swigregister = _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_swigregister
SiteGroundTemperatureFCfactorMethod_swigregister(SiteGroundTemperatureFCfactorMethod)

def SiteGroundTemperatureFCfactorMethod_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_iddObjectType()
SiteGroundTemperatureFCfactorMethod_iddObjectType = _openstudiomodelsimulation.SiteGroundTemperatureFCfactorMethod_iddObjectType


def toSiteGroundTemperatureFCfactorMethod(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SiteGroundTemperatureFCfactorMethod >":
    return _openstudiomodelsimulation.toSiteGroundTemperatureFCfactorMethod(idfObject)
toSiteGroundTemperatureFCfactorMethod = _openstudiomodelsimulation.toSiteGroundTemperatureFCfactorMethod

def getSiteGroundTemperatureFCfactorMethod(t_model: 'Model') -> "openstudio::model::SiteGroundTemperatureFCfactorMethod":
    return _openstudiomodelsimulation.getSiteGroundTemperatureFCfactorMethod(t_model)
getSiteGroundTemperatureFCfactorMethod = _openstudiomodelsimulation.getSiteGroundTemperatureFCfactorMethod

def getOptionalSiteGroundTemperatureFCfactorMethod(t_model: 'Model') -> "boost::optional< openstudio::model::SiteGroundTemperatureFCfactorMethod >":
    return _openstudiomodelsimulation.getOptionalSiteGroundTemperatureFCfactorMethod(t_model)
getOptionalSiteGroundTemperatureFCfactorMethod = _openstudiomodelsimulation.getOptionalSiteGroundTemperatureFCfactorMethod
class SiteWaterMainsTemperature(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiteWaterMainsTemperature, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SiteWaterMainsTemperature, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_SiteWaterMainsTemperature
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.SiteWaterMainsTemperature_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.SiteWaterMainsTemperature_iddObjectType)
    __swig_getmethods__["calculationMethodValues"] = lambda x: _openstudiomodelsimulation.SiteWaterMainsTemperature_calculationMethodValues
    if _newclass:
        calculationMethodValues = staticmethod(_openstudiomodelsimulation.SiteWaterMainsTemperature_calculationMethodValues)
    __swig_getmethods__["validCalculationMethodValues"] = lambda x: _openstudiomodelsimulation.SiteWaterMainsTemperature_validCalculationMethodValues
    if _newclass:
        validCalculationMethodValues = staticmethod(_openstudiomodelsimulation.SiteWaterMainsTemperature_validCalculationMethodValues)

    def calculationMethod(self) -> "std::string":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_calculationMethod(self)

    def temperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_temperatureSchedule(self)

    def annualAverageOutdoorAirTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_annualAverageOutdoorAirTemperature(self)

    def getAnnualAverageOutdoorAirTemperature(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_getAnnualAverageOutdoorAirTemperature(self, returnIP)

    def maximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_maximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self)

    def getMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_getMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self, returnIP)

    def setCalculationMethod(self, calculationMethod: 'std::string') -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_setCalculationMethod(self, calculationMethod)

    def setTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_setTemperatureSchedule(self, schedule)

    def resetTemperatureSchedule(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_resetTemperatureSchedule(self)

    def setAnnualAverageOutdoorAirTemperature(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_setAnnualAverageOutdoorAirTemperature(self, *args)

    def resetAnnualAverageOutdoorAirTemperature(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_resetAnnualAverageOutdoorAirTemperature(self)

    def setMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self, *args) -> "bool":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_setMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self, *args)

    def resetMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self) -> "void":
        return _openstudiomodelsimulation.SiteWaterMainsTemperature_resetMaximumDifferenceInMonthlyAverageOutdoorAirTemperatures(self)
SiteWaterMainsTemperature_swigregister = _openstudiomodelsimulation.SiteWaterMainsTemperature_swigregister
SiteWaterMainsTemperature_swigregister(SiteWaterMainsTemperature)

def SiteWaterMainsTemperature_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.SiteWaterMainsTemperature_iddObjectType()
SiteWaterMainsTemperature_iddObjectType = _openstudiomodelsimulation.SiteWaterMainsTemperature_iddObjectType

def SiteWaterMainsTemperature_calculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SiteWaterMainsTemperature_calculationMethodValues()
SiteWaterMainsTemperature_calculationMethodValues = _openstudiomodelsimulation.SiteWaterMainsTemperature_calculationMethodValues

def SiteWaterMainsTemperature_validCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.SiteWaterMainsTemperature_validCalculationMethodValues()
SiteWaterMainsTemperature_validCalculationMethodValues = _openstudiomodelsimulation.SiteWaterMainsTemperature_validCalculationMethodValues


def toSiteWaterMainsTemperature(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SiteWaterMainsTemperature >":
    return _openstudiomodelsimulation.toSiteWaterMainsTemperature(idfObject)
toSiteWaterMainsTemperature = _openstudiomodelsimulation.toSiteWaterMainsTemperature

def getSiteWaterMainsTemperature(t_model: 'Model') -> "openstudio::model::SiteWaterMainsTemperature":
    return _openstudiomodelsimulation.getSiteWaterMainsTemperature(t_model)
getSiteWaterMainsTemperature = _openstudiomodelsimulation.getSiteWaterMainsTemperature

def getOptionalSiteWaterMainsTemperature(t_model: 'Model') -> "boost::optional< openstudio::model::SiteWaterMainsTemperature >":
    return _openstudiomodelsimulation.getOptionalSiteWaterMainsTemperature(t_model)
getOptionalSiteWaterMainsTemperature = _openstudiomodelsimulation.getOptionalSiteWaterMainsTemperature
class YearDescription(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YearDescription, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YearDescription, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_YearDescription
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.YearDescription_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.YearDescription_iddObjectType)
    __swig_getmethods__["validDayofWeekforStartDayValues"] = lambda x: _openstudiomodelsimulation.YearDescription_validDayofWeekforStartDayValues
    if _newclass:
        validDayofWeekforStartDayValues = staticmethod(_openstudiomodelsimulation.YearDescription_validDayofWeekforStartDayValues)

    def calendarYear(self) -> "boost::optional< int >":
        return _openstudiomodelsimulation.YearDescription_calendarYear(self)

    def dayofWeekforStartDay(self) -> "std::string":
        return _openstudiomodelsimulation.YearDescription_dayofWeekforStartDay(self)

    def isDayofWeekforStartDayDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.YearDescription_isDayofWeekforStartDayDefaulted(self)

    def isLeapYear(self) -> "bool":
        return _openstudiomodelsimulation.YearDescription_isLeapYear(self)

    def isIsLeapYearDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.YearDescription_isIsLeapYearDefaulted(self)

    def setCalendarYear(self, calendarYear: 'int') -> "bool":
        return _openstudiomodelsimulation.YearDescription_setCalendarYear(self, calendarYear)

    def resetCalendarYear(self) -> "void":
        return _openstudiomodelsimulation.YearDescription_resetCalendarYear(self)

    def setDayofWeekforStartDay(self, dayofWeekforStartDay: 'std::string') -> "bool":
        return _openstudiomodelsimulation.YearDescription_setDayofWeekforStartDay(self, dayofWeekforStartDay)

    def resetDayofWeekforStartDay(self) -> "void":
        return _openstudiomodelsimulation.YearDescription_resetDayofWeekforStartDay(self)

    def setIsLeapYear(self, isLeapYear: 'bool') -> "bool":
        return _openstudiomodelsimulation.YearDescription_setIsLeapYear(self, isLeapYear)

    def resetIsLeapYear(self) -> "void":
        return _openstudiomodelsimulation.YearDescription_resetIsLeapYear(self)

    def assumedYear(self) -> "int":
        return _openstudiomodelsimulation.YearDescription_assumedYear(self)

    def makeDate(self, *args) -> "openstudio::Date":
        return _openstudiomodelsimulation.YearDescription_makeDate(self, *args)
YearDescription_swigregister = _openstudiomodelsimulation.YearDescription_swigregister
YearDescription_swigregister(YearDescription)

def YearDescription_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.YearDescription_iddObjectType()
YearDescription_iddObjectType = _openstudiomodelsimulation.YearDescription_iddObjectType

def YearDescription_validDayofWeekforStartDayValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelsimulation.YearDescription_validDayofWeekforStartDayValues()
YearDescription_validDayofWeekforStartDayValues = _openstudiomodelsimulation.YearDescription_validDayofWeekforStartDayValues


def toYearDescription(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::YearDescription >":
    return _openstudiomodelsimulation.toYearDescription(idfObject)
toYearDescription = _openstudiomodelsimulation.toYearDescription

def getYearDescription(t_model: 'Model') -> "openstudio::model::YearDescription":
    return _openstudiomodelsimulation.getYearDescription(t_model)
getYearDescription = _openstudiomodelsimulation.getYearDescription

def getOptionalYearDescription(t_model: 'Model') -> "boost::optional< openstudio::model::YearDescription >":
    return _openstudiomodelsimulation.getOptionalYearDescription(t_model)
getOptionalYearDescription = _openstudiomodelsimulation.getOptionalYearDescription
class FoundationKivaSettings(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FoundationKivaSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FoundationKivaSettings, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelsimulation.delete_FoundationKivaSettings
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelsimulation.FoundationKivaSettings_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelsimulation.FoundationKivaSettings_iddObjectType)

    def soilConductivity(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_soilConductivity(self)

    def isSoilConductivityDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isSoilConductivityDefaulted(self)

    def soilDensity(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_soilDensity(self)

    def isSoilDensityDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isSoilDensityDefaulted(self)

    def soilSpecificHeat(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_soilSpecificHeat(self)

    def isSoilSpecificHeatDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isSoilSpecificHeatDefaulted(self)

    def groundSolarAbsorptivity(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_groundSolarAbsorptivity(self)

    def isGroundSolarAbsorptivityDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isGroundSolarAbsorptivityDefaulted(self)

    def groundThermalAbsorptivity(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_groundThermalAbsorptivity(self)

    def isGroundThermalAbsorptivityDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isGroundThermalAbsorptivityDefaulted(self)

    def groundSurfaceRoughness(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_groundSurfaceRoughness(self)

    def isGroundSurfaceRoughnessDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isGroundSurfaceRoughnessDefaulted(self)

    def farFieldWidth(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_farFieldWidth(self)

    def isFarFieldWidthDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isFarFieldWidthDefaulted(self)

    def deepGroundBoundaryCondition(self) -> "std::string":
        return _openstudiomodelsimulation.FoundationKivaSettings_deepGroundBoundaryCondition(self)

    def isDeepGroundBoundaryConditionAutoselected(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isDeepGroundBoundaryConditionAutoselected(self)

    def deepGroundDepth(self) -> "boost::optional< double >":
        return _openstudiomodelsimulation.FoundationKivaSettings_deepGroundDepth(self)

    def isDeepGroundDepthAutocalculated(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isDeepGroundDepthAutocalculated(self)

    def minimumCellDimension(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_minimumCellDimension(self)

    def isMinimumCellDimensionDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isMinimumCellDimensionDefaulted(self)

    def maximumCellGrowthCoefficient(self) -> "double":
        return _openstudiomodelsimulation.FoundationKivaSettings_maximumCellGrowthCoefficient(self)

    def isMaximumCellGrowthCoefficientDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isMaximumCellGrowthCoefficientDefaulted(self)

    def simulationTimestep(self) -> "std::string":
        return _openstudiomodelsimulation.FoundationKivaSettings_simulationTimestep(self)

    def isSimulationTimestepDefaulted(self) -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_isSimulationTimestepDefaulted(self)

    def setSoilConductivity(self, soilConductivity: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setSoilConductivity(self, soilConductivity)

    def resetSoilConductivity(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetSoilConductivity(self)

    def setSoilDensity(self, soilDensity: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setSoilDensity(self, soilDensity)

    def resetSoilDensity(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetSoilDensity(self)

    def setSoilSpecificHeat(self, soilSpecificHeat: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setSoilSpecificHeat(self, soilSpecificHeat)

    def resetSoilSpecificHeat(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetSoilSpecificHeat(self)

    def setGroundSolarAbsorptivity(self, groundSolarAbsorptivity: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setGroundSolarAbsorptivity(self, groundSolarAbsorptivity)

    def resetGroundSolarAbsorptivity(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetGroundSolarAbsorptivity(self)

    def setGroundThermalAbsorptivity(self, groundThermalAbsorptivity: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setGroundThermalAbsorptivity(self, groundThermalAbsorptivity)

    def resetGroundThermalAbsorptivity(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetGroundThermalAbsorptivity(self)

    def setGroundSurfaceRoughness(self, groundSurfaceRoughness: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setGroundSurfaceRoughness(self, groundSurfaceRoughness)

    def resetGroundSurfaceRoughness(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetGroundSurfaceRoughness(self)

    def setFarFieldWidth(self, farFieldWidth: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setFarFieldWidth(self, farFieldWidth)

    def resetFarFieldWidth(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetFarFieldWidth(self)

    def setDeepGroundBoundaryCondition(self, deepGroundBoundaryCondition: 'std::string') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setDeepGroundBoundaryCondition(self, deepGroundBoundaryCondition)

    def resetDeepGroundBoundaryCondition(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetDeepGroundBoundaryCondition(self)

    def setDeepGroundDepth(self, deepGroundDepth: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setDeepGroundDepth(self, deepGroundDepth)

    def autocalculateDeepGroundDepth(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_autocalculateDeepGroundDepth(self)

    def setMinimumCellDimension(self, minimumCellDimension: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setMinimumCellDimension(self, minimumCellDimension)

    def resetMinimumCellDimension(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetMinimumCellDimension(self)

    def setMaximumCellGrowthCoefficient(self, maximumCellGrowthCoefficient: 'double') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setMaximumCellGrowthCoefficient(self, maximumCellGrowthCoefficient)

    def resetMaximumCellGrowthCoefficient(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetMaximumCellGrowthCoefficient(self)

    def setSimulationTimestep(self, simulationTimestep: 'std::string') -> "bool":
        return _openstudiomodelsimulation.FoundationKivaSettings_setSimulationTimestep(self, simulationTimestep)

    def resetSimulationTimestep(self) -> "void":
        return _openstudiomodelsimulation.FoundationKivaSettings_resetSimulationTimestep(self)
FoundationKivaSettings_swigregister = _openstudiomodelsimulation.FoundationKivaSettings_swigregister
FoundationKivaSettings_swigregister(FoundationKivaSettings)

def FoundationKivaSettings_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelsimulation.FoundationKivaSettings_iddObjectType()
FoundationKivaSettings_iddObjectType = _openstudiomodelsimulation.FoundationKivaSettings_iddObjectType


def toFoundationKivaSettings(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::FoundationKivaSettings >":
    return _openstudiomodelsimulation.toFoundationKivaSettings(idfObject)
toFoundationKivaSettings = _openstudiomodelsimulation.toFoundationKivaSettings

def getFoundationKivaSettings(t_model: 'Model') -> "openstudio::model::FoundationKivaSettings":
    return _openstudiomodelsimulation.getFoundationKivaSettings(t_model)
getFoundationKivaSettings = _openstudiomodelsimulation.getFoundationKivaSettings

def getOptionalFoundationKivaSettings(t_model: 'Model') -> "boost::optional< openstudio::model::FoundationKivaSettings >":
    return _openstudiomodelsimulation.getOptionalFoundationKivaSettings(t_model)
getOptionalFoundationKivaSettings = _openstudiomodelsimulation.getOptionalFoundationKivaSettings
# This file is compatible with both classic and new-style classes.


