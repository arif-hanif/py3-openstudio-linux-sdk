# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudioutilitiesidd', [dirname(__file__)])
        except ImportError:
            import _openstudioutilitiesidd
            return _openstudioutilitiesidd
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudioutilitiesidd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudioutilitiesidd = swig_import_helper()
    del swig_import_helper
else:
    import _openstudioutilitiesidd
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesidd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudioutilitiesidd.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudioutilitiesidd.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioutilitiesidd.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudioutilitiesidd.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudioutilitiesidd.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudioutilitiesidd.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioutilitiesidd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioutilitiesidd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioutilitiesidd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioutilitiesidd.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudioutilitiesidd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudioutilitiesidd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudioutilitiesidd.SHARED_PTR_DISOWN_swigconstant(_openstudioutilitiesidd)
SHARED_PTR_DISOWN = _openstudioutilitiesidd.SHARED_PTR_DISOWN
from .import openstudioutilitiescore
from .import openstudioutilitiesunits

def makeComment(str: 'std::string const &') -> "std::string":
    return _openstudioutilitiesidd.makeComment(str)
makeComment = _openstudioutilitiesidd.makeComment

def makeIdfEditorComment(str: 'std::string const &') -> "std::string":
    return _openstudioutilitiesidd.makeIdfEditorComment(str)
makeIdfEditorComment = _openstudioutilitiesidd.makeIdfEditorComment
class IddFieldType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddFieldType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddFieldType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddFieldType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueName(self) -> "std::string":
        return _openstudioutilitiesidd.IddFieldType_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiesidd.IddFieldType_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiesidd.IddFieldType_valueDescription(self)

    def __eq__(self, other: 'IddFieldType') -> "bool":
        return _openstudioutilitiesidd.IddFieldType___eq__(self, other)

    def __ne__(self, other: 'IddFieldType') -> "bool":
        return _openstudioutilitiesidd.IddFieldType___ne__(self, other)

    def __gt__(self, other: 'IddFieldType') -> "bool":
        return _openstudioutilitiesidd.IddFieldType___gt__(self, other)

    def __ge__(self, other: 'IddFieldType') -> "bool":
        return _openstudioutilitiesidd.IddFieldType___ge__(self, other)

    def __lt__(self, other: 'IddFieldType') -> "bool":
        return _openstudioutilitiesidd.IddFieldType___lt__(self, other)

    def __le__(self, other: 'IddFieldType') -> "bool":
        return _openstudioutilitiesidd.IddFieldType___le__(self, other)
    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesidd.IddFieldType_enumName
    if _newclass:
        enumName = staticmethod(_openstudioutilitiesidd.IddFieldType_enumName)
    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesidd.IddFieldType_getValues
    if _newclass:
        getValues = staticmethod(_openstudioutilitiesidd.IddFieldType_getValues)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFieldType
    __del__ = lambda self: None
IddFieldType_swigregister = _openstudioutilitiesidd.IddFieldType_swigregister
IddFieldType_swigregister(IddFieldType)

def IddFieldType_enumName() -> "std::string":
    return _openstudioutilitiesidd.IddFieldType_enumName()
IddFieldType_enumName = _openstudioutilitiesidd.IddFieldType_enumName

def IddFieldType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiesidd.IddFieldType_getValues()
IddFieldType_getValues = _openstudioutilitiesidd.IddFieldType_getValues

class IddFieldProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddFieldProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddFieldProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudioutilitiesidd.new_IddFieldProperties()
        try:
            self.this.append(this)
        except:
            self.this = this

    def isGeneric(self) -> "bool":
        return _openstudioutilitiesidd.IddFieldProperties_isGeneric(self)

    def __eq__(self, other: 'IddFieldProperties') -> "bool":
        return _openstudioutilitiesidd.IddFieldProperties___eq__(self, other)

    def __ne__(self, other: 'IddFieldProperties') -> "bool":
        return _openstudioutilitiesidd.IddFieldProperties___ne__(self, other)
    __swig_setmethods__["type"] = _openstudioutilitiesidd.IddFieldProperties_type_set
    __swig_getmethods__["type"] = _openstudioutilitiesidd.IddFieldProperties_type_get
    if _newclass:
        type = _swig_property(_openstudioutilitiesidd.IddFieldProperties_type_get, _openstudioutilitiesidd.IddFieldProperties_type_set)
    __swig_setmethods__["note"] = _openstudioutilitiesidd.IddFieldProperties_note_set
    __swig_getmethods__["note"] = _openstudioutilitiesidd.IddFieldProperties_note_get
    if _newclass:
        note = _swig_property(_openstudioutilitiesidd.IddFieldProperties_note_get, _openstudioutilitiesidd.IddFieldProperties_note_set)
    __swig_setmethods__["required"] = _openstudioutilitiesidd.IddFieldProperties_required_set
    __swig_getmethods__["required"] = _openstudioutilitiesidd.IddFieldProperties_required_get
    if _newclass:
        required = _swig_property(_openstudioutilitiesidd.IddFieldProperties_required_get, _openstudioutilitiesidd.IddFieldProperties_required_set)
    __swig_setmethods__["autosizable"] = _openstudioutilitiesidd.IddFieldProperties_autosizable_set
    __swig_getmethods__["autosizable"] = _openstudioutilitiesidd.IddFieldProperties_autosizable_get
    if _newclass:
        autosizable = _swig_property(_openstudioutilitiesidd.IddFieldProperties_autosizable_get, _openstudioutilitiesidd.IddFieldProperties_autosizable_set)
    __swig_setmethods__["autocalculatable"] = _openstudioutilitiesidd.IddFieldProperties_autocalculatable_set
    __swig_getmethods__["autocalculatable"] = _openstudioutilitiesidd.IddFieldProperties_autocalculatable_get
    if _newclass:
        autocalculatable = _swig_property(_openstudioutilitiesidd.IddFieldProperties_autocalculatable_get, _openstudioutilitiesidd.IddFieldProperties_autocalculatable_set)
    __swig_setmethods__["retaincase"] = _openstudioutilitiesidd.IddFieldProperties_retaincase_set
    __swig_getmethods__["retaincase"] = _openstudioutilitiesidd.IddFieldProperties_retaincase_get
    if _newclass:
        retaincase = _swig_property(_openstudioutilitiesidd.IddFieldProperties_retaincase_get, _openstudioutilitiesidd.IddFieldProperties_retaincase_set)
    __swig_setmethods__["deprecated"] = _openstudioutilitiesidd.IddFieldProperties_deprecated_set
    __swig_getmethods__["deprecated"] = _openstudioutilitiesidd.IddFieldProperties_deprecated_get
    if _newclass:
        deprecated = _swig_property(_openstudioutilitiesidd.IddFieldProperties_deprecated_get, _openstudioutilitiesidd.IddFieldProperties_deprecated_set)
    __swig_setmethods__["beginExtensible"] = _openstudioutilitiesidd.IddFieldProperties_beginExtensible_set
    __swig_getmethods__["beginExtensible"] = _openstudioutilitiesidd.IddFieldProperties_beginExtensible_get
    if _newclass:
        beginExtensible = _swig_property(_openstudioutilitiesidd.IddFieldProperties_beginExtensible_get, _openstudioutilitiesidd.IddFieldProperties_beginExtensible_set)
    __swig_setmethods__["units"] = _openstudioutilitiesidd.IddFieldProperties_units_set
    __swig_getmethods__["units"] = _openstudioutilitiesidd.IddFieldProperties_units_get
    if _newclass:
        units = _swig_property(_openstudioutilitiesidd.IddFieldProperties_units_get, _openstudioutilitiesidd.IddFieldProperties_units_set)
    __swig_setmethods__["ipUnits"] = _openstudioutilitiesidd.IddFieldProperties_ipUnits_set
    __swig_getmethods__["ipUnits"] = _openstudioutilitiesidd.IddFieldProperties_ipUnits_get
    if _newclass:
        ipUnits = _swig_property(_openstudioutilitiesidd.IddFieldProperties_ipUnits_get, _openstudioutilitiesidd.IddFieldProperties_ipUnits_set)
    Unbounded = _openstudioutilitiesidd.IddFieldProperties_Unbounded
    InclusiveBound = _openstudioutilitiesidd.IddFieldProperties_InclusiveBound
    ExclusiveBound = _openstudioutilitiesidd.IddFieldProperties_ExclusiveBound
    __swig_setmethods__["minBoundType"] = _openstudioutilitiesidd.IddFieldProperties_minBoundType_set
    __swig_getmethods__["minBoundType"] = _openstudioutilitiesidd.IddFieldProperties_minBoundType_get
    if _newclass:
        minBoundType = _swig_property(_openstudioutilitiesidd.IddFieldProperties_minBoundType_get, _openstudioutilitiesidd.IddFieldProperties_minBoundType_set)
    __swig_setmethods__["minBoundValue"] = _openstudioutilitiesidd.IddFieldProperties_minBoundValue_set
    __swig_getmethods__["minBoundValue"] = _openstudioutilitiesidd.IddFieldProperties_minBoundValue_get
    if _newclass:
        minBoundValue = _swig_property(_openstudioutilitiesidd.IddFieldProperties_minBoundValue_get, _openstudioutilitiesidd.IddFieldProperties_minBoundValue_set)
    __swig_setmethods__["minBoundText"] = _openstudioutilitiesidd.IddFieldProperties_minBoundText_set
    __swig_getmethods__["minBoundText"] = _openstudioutilitiesidd.IddFieldProperties_minBoundText_get
    if _newclass:
        minBoundText = _swig_property(_openstudioutilitiesidd.IddFieldProperties_minBoundText_get, _openstudioutilitiesidd.IddFieldProperties_minBoundText_set)
    __swig_setmethods__["maxBoundType"] = _openstudioutilitiesidd.IddFieldProperties_maxBoundType_set
    __swig_getmethods__["maxBoundType"] = _openstudioutilitiesidd.IddFieldProperties_maxBoundType_get
    if _newclass:
        maxBoundType = _swig_property(_openstudioutilitiesidd.IddFieldProperties_maxBoundType_get, _openstudioutilitiesidd.IddFieldProperties_maxBoundType_set)
    __swig_setmethods__["maxBoundValue"] = _openstudioutilitiesidd.IddFieldProperties_maxBoundValue_set
    __swig_getmethods__["maxBoundValue"] = _openstudioutilitiesidd.IddFieldProperties_maxBoundValue_get
    if _newclass:
        maxBoundValue = _swig_property(_openstudioutilitiesidd.IddFieldProperties_maxBoundValue_get, _openstudioutilitiesidd.IddFieldProperties_maxBoundValue_set)
    __swig_setmethods__["maxBoundText"] = _openstudioutilitiesidd.IddFieldProperties_maxBoundText_set
    __swig_getmethods__["maxBoundText"] = _openstudioutilitiesidd.IddFieldProperties_maxBoundText_get
    if _newclass:
        maxBoundText = _swig_property(_openstudioutilitiesidd.IddFieldProperties_maxBoundText_get, _openstudioutilitiesidd.IddFieldProperties_maxBoundText_set)
    __swig_setmethods__["stringDefault"] = _openstudioutilitiesidd.IddFieldProperties_stringDefault_set
    __swig_getmethods__["stringDefault"] = _openstudioutilitiesidd.IddFieldProperties_stringDefault_get
    if _newclass:
        stringDefault = _swig_property(_openstudioutilitiesidd.IddFieldProperties_stringDefault_get, _openstudioutilitiesidd.IddFieldProperties_stringDefault_set)
    __swig_setmethods__["numericDefault"] = _openstudioutilitiesidd.IddFieldProperties_numericDefault_set
    __swig_getmethods__["numericDefault"] = _openstudioutilitiesidd.IddFieldProperties_numericDefault_get
    if _newclass:
        numericDefault = _swig_property(_openstudioutilitiesidd.IddFieldProperties_numericDefault_get, _openstudioutilitiesidd.IddFieldProperties_numericDefault_set)
    __swig_setmethods__["objectLists"] = _openstudioutilitiesidd.IddFieldProperties_objectLists_set
    __swig_getmethods__["objectLists"] = _openstudioutilitiesidd.IddFieldProperties_objectLists_get
    if _newclass:
        objectLists = _swig_property(_openstudioutilitiesidd.IddFieldProperties_objectLists_get, _openstudioutilitiesidd.IddFieldProperties_objectLists_set)
    __swig_setmethods__["references"] = _openstudioutilitiesidd.IddFieldProperties_references_set
    __swig_getmethods__["references"] = _openstudioutilitiesidd.IddFieldProperties_references_get
    if _newclass:
        references = _swig_property(_openstudioutilitiesidd.IddFieldProperties_references_get, _openstudioutilitiesidd.IddFieldProperties_references_set)
    __swig_setmethods__["referenceClassNames"] = _openstudioutilitiesidd.IddFieldProperties_referenceClassNames_set
    __swig_getmethods__["referenceClassNames"] = _openstudioutilitiesidd.IddFieldProperties_referenceClassNames_get
    if _newclass:
        referenceClassNames = _swig_property(_openstudioutilitiesidd.IddFieldProperties_referenceClassNames_get, _openstudioutilitiesidd.IddFieldProperties_referenceClassNames_set)
    __swig_setmethods__["externalLists"] = _openstudioutilitiesidd.IddFieldProperties_externalLists_set
    __swig_getmethods__["externalLists"] = _openstudioutilitiesidd.IddFieldProperties_externalLists_get
    if _newclass:
        externalLists = _swig_property(_openstudioutilitiesidd.IddFieldProperties_externalLists_get, _openstudioutilitiesidd.IddFieldProperties_externalLists_set)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFieldProperties
    __del__ = lambda self: None
IddFieldProperties_swigregister = _openstudioutilitiesidd.IddFieldProperties_swigregister
IddFieldProperties_swigregister(IddFieldProperties)


def intersectReferenceLists(list1: 'StringVector', list2: 'StringVector') -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudioutilitiesidd.intersectReferenceLists(list1, list2)
intersectReferenceLists = _openstudioutilitiesidd.intersectReferenceLists
class ExtensibleIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtensibleIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtensibleIndex, name)
    __repr__ = _swig_repr

    def __init__(self, groupIndex: 'unsigned int', fieldIndex: 'unsigned int'):
        this = _openstudioutilitiesidd.new_ExtensibleIndex(groupIndex, fieldIndex)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["group"] = _openstudioutilitiesidd.ExtensibleIndex_group_set
    __swig_getmethods__["group"] = _openstudioutilitiesidd.ExtensibleIndex_group_get
    if _newclass:
        group = _swig_property(_openstudioutilitiesidd.ExtensibleIndex_group_get, _openstudioutilitiesidd.ExtensibleIndex_group_set)
    __swig_setmethods__["field"] = _openstudioutilitiesidd.ExtensibleIndex_field_set
    __swig_getmethods__["field"] = _openstudioutilitiesidd.ExtensibleIndex_field_get
    if _newclass:
        field = _swig_property(_openstudioutilitiesidd.ExtensibleIndex_field_get, _openstudioutilitiesidd.ExtensibleIndex_field_set)
    __swig_destroy__ = _openstudioutilitiesidd.delete_ExtensibleIndex
    __del__ = lambda self: None
ExtensibleIndex_swigregister = _openstudioutilitiesidd.ExtensibleIndex_swigregister
ExtensibleIndex_swigregister(ExtensibleIndex)

class IddObjectProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddObjectProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddObjectProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudioutilitiesidd.new_IddObjectProperties()
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, other: 'IddObjectProperties') -> "bool":
        return _openstudioutilitiesidd.IddObjectProperties___eq__(self, other)

    def __ne__(self, other: 'IddObjectProperties') -> "bool":
        return _openstudioutilitiesidd.IddObjectProperties___ne__(self, other)
    __swig_setmethods__["memo"] = _openstudioutilitiesidd.IddObjectProperties_memo_set
    __swig_getmethods__["memo"] = _openstudioutilitiesidd.IddObjectProperties_memo_get
    if _newclass:
        memo = _swig_property(_openstudioutilitiesidd.IddObjectProperties_memo_get, _openstudioutilitiesidd.IddObjectProperties_memo_set)
    __swig_setmethods__["unique"] = _openstudioutilitiesidd.IddObjectProperties_unique_set
    __swig_getmethods__["unique"] = _openstudioutilitiesidd.IddObjectProperties_unique_get
    if _newclass:
        unique = _swig_property(_openstudioutilitiesidd.IddObjectProperties_unique_get, _openstudioutilitiesidd.IddObjectProperties_unique_set)
    __swig_setmethods__["required"] = _openstudioutilitiesidd.IddObjectProperties_required_set
    __swig_getmethods__["required"] = _openstudioutilitiesidd.IddObjectProperties_required_get
    if _newclass:
        required = _swig_property(_openstudioutilitiesidd.IddObjectProperties_required_get, _openstudioutilitiesidd.IddObjectProperties_required_set)
    __swig_setmethods__["obsolete"] = _openstudioutilitiesidd.IddObjectProperties_obsolete_set
    __swig_getmethods__["obsolete"] = _openstudioutilitiesidd.IddObjectProperties_obsolete_get
    if _newclass:
        obsolete = _swig_property(_openstudioutilitiesidd.IddObjectProperties_obsolete_get, _openstudioutilitiesidd.IddObjectProperties_obsolete_set)
    __swig_setmethods__["hasURL"] = _openstudioutilitiesidd.IddObjectProperties_hasURL_set
    __swig_getmethods__["hasURL"] = _openstudioutilitiesidd.IddObjectProperties_hasURL_get
    if _newclass:
        hasURL = _swig_property(_openstudioutilitiesidd.IddObjectProperties_hasURL_get, _openstudioutilitiesidd.IddObjectProperties_hasURL_set)
    __swig_setmethods__["extensible"] = _openstudioutilitiesidd.IddObjectProperties_extensible_set
    __swig_getmethods__["extensible"] = _openstudioutilitiesidd.IddObjectProperties_extensible_get
    if _newclass:
        extensible = _swig_property(_openstudioutilitiesidd.IddObjectProperties_extensible_get, _openstudioutilitiesidd.IddObjectProperties_extensible_set)
    __swig_setmethods__["numExtensible"] = _openstudioutilitiesidd.IddObjectProperties_numExtensible_set
    __swig_getmethods__["numExtensible"] = _openstudioutilitiesidd.IddObjectProperties_numExtensible_get
    if _newclass:
        numExtensible = _swig_property(_openstudioutilitiesidd.IddObjectProperties_numExtensible_get, _openstudioutilitiesidd.IddObjectProperties_numExtensible_set)
    __swig_setmethods__["numExtensibleGroupsRequired"] = _openstudioutilitiesidd.IddObjectProperties_numExtensibleGroupsRequired_set
    __swig_getmethods__["numExtensibleGroupsRequired"] = _openstudioutilitiesidd.IddObjectProperties_numExtensibleGroupsRequired_get
    if _newclass:
        numExtensibleGroupsRequired = _swig_property(_openstudioutilitiesidd.IddObjectProperties_numExtensibleGroupsRequired_get, _openstudioutilitiesidd.IddObjectProperties_numExtensibleGroupsRequired_set)
    __swig_setmethods__["format"] = _openstudioutilitiesidd.IddObjectProperties_format_set
    __swig_getmethods__["format"] = _openstudioutilitiesidd.IddObjectProperties_format_get
    if _newclass:
        format = _swig_property(_openstudioutilitiesidd.IddObjectProperties_format_get, _openstudioutilitiesidd.IddObjectProperties_format_set)
    __swig_setmethods__["minFields"] = _openstudioutilitiesidd.IddObjectProperties_minFields_set
    __swig_getmethods__["minFields"] = _openstudioutilitiesidd.IddObjectProperties_minFields_get
    if _newclass:
        minFields = _swig_property(_openstudioutilitiesidd.IddObjectProperties_minFields_get, _openstudioutilitiesidd.IddObjectProperties_minFields_set)
    __swig_setmethods__["maxFields"] = _openstudioutilitiesidd.IddObjectProperties_maxFields_set
    __swig_getmethods__["maxFields"] = _openstudioutilitiesidd.IddObjectProperties_maxFields_get
    if _newclass:
        maxFields = _swig_property(_openstudioutilitiesidd.IddObjectProperties_maxFields_get, _openstudioutilitiesidd.IddObjectProperties_maxFields_set)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectProperties
    __del__ = lambda self: None
IddObjectProperties_swigregister = _openstudioutilitiesidd.IddObjectProperties_swigregister
IddObjectProperties_swigregister(IddObjectProperties)

class OptionalIddFileType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIddFileType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIddFileType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_OptionalIddFileType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesidd.OptionalIddFileType_reset(self)

    def __ref__(self) -> "openstudio::IddFileType":
        return _openstudioutilitiesidd.OptionalIddFileType___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddFileType_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddFileType_isNull(self)

    def get(self) -> "openstudio::IddFileType":
        return _openstudioutilitiesidd.OptionalIddFileType_get(self)

    def set(self, t: 'IddFileType') -> "void":
        return _openstudioutilitiesidd.OptionalIddFileType_set(self, t)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddFileType
    __del__ = lambda self: None
OptionalIddFileType_swigregister = _openstudioutilitiesidd.OptionalIddFileType_swigregister
OptionalIddFileType_swigregister(OptionalIddFileType)

class OptionalIddObjectType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIddObjectType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIddObjectType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_OptionalIddObjectType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesidd.OptionalIddObjectType_reset(self)

    def __ref__(self) -> "openstudio::IddObjectType":
        return _openstudioutilitiesidd.OptionalIddObjectType___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddObjectType_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddObjectType_isNull(self)

    def get(self) -> "openstudio::IddObjectType":
        return _openstudioutilitiesidd.OptionalIddObjectType_get(self)

    def set(self, t: 'IddObjectType') -> "void":
        return _openstudioutilitiesidd.OptionalIddObjectType_set(self, t)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddObjectType
    __del__ = lambda self: None
OptionalIddObjectType_swigregister = _openstudioutilitiesidd.OptionalIddObjectType_swigregister
OptionalIddObjectType_swigregister(OptionalIddObjectType)

class OptionalIddKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIddKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIddKey, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_OptionalIddKey(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesidd.OptionalIddKey_reset(self)

    def __ref__(self) -> "openstudio::IddKey":
        return _openstudioutilitiesidd.OptionalIddKey___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddKey_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddKey_isNull(self)

    def get(self) -> "openstudio::IddKey":
        return _openstudioutilitiesidd.OptionalIddKey_get(self)

    def set(self, t: 'IddKey') -> "void":
        return _openstudioutilitiesidd.OptionalIddKey_set(self, t)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddKey
    __del__ = lambda self: None
OptionalIddKey_swigregister = _openstudioutilitiesidd.OptionalIddKey_swigregister
OptionalIddKey_swigregister(OptionalIddKey)

class OptionalIddField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIddField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIddField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_OptionalIddField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesidd.OptionalIddField_reset(self)

    def __ref__(self) -> "openstudio::IddField":
        return _openstudioutilitiesidd.OptionalIddField___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddField_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddField_isNull(self)

    def get(self) -> "openstudio::IddField":
        return _openstudioutilitiesidd.OptionalIddField_get(self)

    def set(self, t: 'IddField') -> "void":
        return _openstudioutilitiesidd.OptionalIddField_set(self, t)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddField
    __del__ = lambda self: None
OptionalIddField_swigregister = _openstudioutilitiesidd.OptionalIddField_swigregister
OptionalIddField_swigregister(OptionalIddField)

class OptionalIddObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIddObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIddObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_OptionalIddObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesidd.OptionalIddObject_reset(self)

    def __ref__(self) -> "openstudio::IddObject":
        return _openstudioutilitiesidd.OptionalIddObject___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddObject_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddObject_isNull(self)

    def get(self) -> "openstudio::IddObject":
        return _openstudioutilitiesidd.OptionalIddObject_get(self)

    def set(self, t: 'IddObject') -> "void":
        return _openstudioutilitiesidd.OptionalIddObject_set(self, t)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddObject
    __del__ = lambda self: None
OptionalIddObject_swigregister = _openstudioutilitiesidd.OptionalIddObject_swigregister
OptionalIddObject_swigregister(OptionalIddObject)

class OptionalIddFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIddFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIddFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_OptionalIddFile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesidd.OptionalIddFile_reset(self)

    def __ref__(self) -> "openstudio::IddFile":
        return _openstudioutilitiesidd.OptionalIddFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddFile_isNull(self)

    def get(self) -> "openstudio::IddFile":
        return _openstudioutilitiesidd.OptionalIddFile_get(self)

    def set(self, t: 'IddFile') -> "void":
        return _openstudioutilitiesidd.OptionalIddFile_set(self, t)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddFile
    __del__ = lambda self: None
OptionalIddFile_swigregister = _openstudioutilitiesidd.OptionalIddFile_swigregister
OptionalIddFile_swigregister(OptionalIddFile)

class IddKeyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddKeyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddKeyVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.IddKeyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesidd.IddKeyVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesidd.IddKeyVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::IddKey >::size_type":
        return _openstudioutilitiesidd.IddKeyVector___len__(self)

    def pop(self) -> "std::vector< openstudio::IddKey >::value_type":
        return _openstudioutilitiesidd.IddKeyVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::IddKey >::difference_type', j: 'std::vector< openstudio::IddKey >::difference_type') -> "std::vector< openstudio::IddKey,std::allocator< openstudio::IddKey > > *":
        return _openstudioutilitiesidd.IddKeyVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddKeyVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::IddKey >::difference_type', j: 'std::vector< openstudio::IddKey >::difference_type') -> "void":
        return _openstudioutilitiesidd.IddKeyVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddKeyVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::IddKey >::value_type const &":
        return _openstudioutilitiesidd.IddKeyVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddKeyVector___setitem__(self, *args)

    def append(self, x: 'IddKey') -> "void":
        return _openstudioutilitiesidd.IddKeyVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesidd.IddKeyVector_empty(self)

    def size(self) -> "std::vector< openstudio::IddKey >::size_type":
        return _openstudioutilitiesidd.IddKeyVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesidd.IddKeyVector_clear(self)

    def swap(self, v: 'IddKeyVector') -> "void":
        return _openstudioutilitiesidd.IddKeyVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::IddKey >::allocator_type":
        return _openstudioutilitiesidd.IddKeyVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::IddKey >::iterator":
        return _openstudioutilitiesidd.IddKeyVector_begin(self)

    def end(self) -> "std::vector< openstudio::IddKey >::iterator":
        return _openstudioutilitiesidd.IddKeyVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::IddKey >::reverse_iterator":
        return _openstudioutilitiesidd.IddKeyVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::IddKey >::reverse_iterator":
        return _openstudioutilitiesidd.IddKeyVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesidd.IddKeyVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::IddKey >::iterator":
        return _openstudioutilitiesidd.IddKeyVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddKeyVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'IddKey') -> "void":
        return _openstudioutilitiesidd.IddKeyVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::IddKey >::value_type const &":
        return _openstudioutilitiesidd.IddKeyVector_front(self)

    def back(self) -> "std::vector< openstudio::IddKey >::value_type const &":
        return _openstudioutilitiesidd.IddKeyVector_back(self)

    def assign(self, n: 'std::vector< openstudio::IddKey >::size_type', x: 'IddKey') -> "void":
        return _openstudioutilitiesidd.IddKeyVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesidd.IddKeyVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesidd.IddKeyVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::IddKey >::size_type') -> "void":
        return _openstudioutilitiesidd.IddKeyVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::IddKey >::size_type":
        return _openstudioutilitiesidd.IddKeyVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddKeyVector
    __del__ = lambda self: None
IddKeyVector_swigregister = _openstudioutilitiesidd.IddKeyVector_swigregister
IddKeyVector_swigregister(IddKeyVector)

class IddFieldVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddFieldVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddFieldVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.IddFieldVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesidd.IddFieldVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesidd.IddFieldVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::IddField >::size_type":
        return _openstudioutilitiesidd.IddFieldVector___len__(self)

    def pop(self) -> "std::vector< openstudio::IddField >::value_type":
        return _openstudioutilitiesidd.IddFieldVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::IddField >::difference_type', j: 'std::vector< openstudio::IddField >::difference_type') -> "std::vector< openstudio::IddField,std::allocator< openstudio::IddField > > *":
        return _openstudioutilitiesidd.IddFieldVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFieldVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::IddField >::difference_type', j: 'std::vector< openstudio::IddField >::difference_type') -> "void":
        return _openstudioutilitiesidd.IddFieldVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFieldVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::IddField >::value_type const &":
        return _openstudioutilitiesidd.IddFieldVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFieldVector___setitem__(self, *args)

    def append(self, x: 'IddField') -> "void":
        return _openstudioutilitiesidd.IddFieldVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesidd.IddFieldVector_empty(self)

    def size(self) -> "std::vector< openstudio::IddField >::size_type":
        return _openstudioutilitiesidd.IddFieldVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesidd.IddFieldVector_clear(self)

    def swap(self, v: 'IddFieldVector') -> "void":
        return _openstudioutilitiesidd.IddFieldVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::IddField >::allocator_type":
        return _openstudioutilitiesidd.IddFieldVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::IddField >::iterator":
        return _openstudioutilitiesidd.IddFieldVector_begin(self)

    def end(self) -> "std::vector< openstudio::IddField >::iterator":
        return _openstudioutilitiesidd.IddFieldVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::IddField >::reverse_iterator":
        return _openstudioutilitiesidd.IddFieldVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::IddField >::reverse_iterator":
        return _openstudioutilitiesidd.IddFieldVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesidd.IddFieldVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::IddField >::iterator":
        return _openstudioutilitiesidd.IddFieldVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddFieldVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'IddField') -> "void":
        return _openstudioutilitiesidd.IddFieldVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::IddField >::value_type const &":
        return _openstudioutilitiesidd.IddFieldVector_front(self)

    def back(self) -> "std::vector< openstudio::IddField >::value_type const &":
        return _openstudioutilitiesidd.IddFieldVector_back(self)

    def assign(self, n: 'std::vector< openstudio::IddField >::size_type', x: 'IddField') -> "void":
        return _openstudioutilitiesidd.IddFieldVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFieldVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFieldVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::IddField >::size_type') -> "void":
        return _openstudioutilitiesidd.IddFieldVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::IddField >::size_type":
        return _openstudioutilitiesidd.IddFieldVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFieldVector
    __del__ = lambda self: None
IddFieldVector_swigregister = _openstudioutilitiesidd.IddFieldVector_swigregister
IddFieldVector_swigregister(IddFieldVector)

class IddObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.IddObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesidd.IddObjectVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesidd.IddObjectVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::IddObject >::size_type":
        return _openstudioutilitiesidd.IddObjectVector___len__(self)

    def pop(self) -> "std::vector< openstudio::IddObject >::value_type":
        return _openstudioutilitiesidd.IddObjectVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::IddObject >::difference_type', j: 'std::vector< openstudio::IddObject >::difference_type') -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > > *":
        return _openstudioutilitiesidd.IddObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::IddObject >::difference_type', j: 'std::vector< openstudio::IddObject >::difference_type') -> "void":
        return _openstudioutilitiesidd.IddObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::IddObject >::value_type const &":
        return _openstudioutilitiesidd.IddObjectVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectVector___setitem__(self, *args)

    def append(self, x: 'IddObject') -> "void":
        return _openstudioutilitiesidd.IddObjectVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesidd.IddObjectVector_empty(self)

    def size(self) -> "std::vector< openstudio::IddObject >::size_type":
        return _openstudioutilitiesidd.IddObjectVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesidd.IddObjectVector_clear(self)

    def swap(self, v: 'IddObjectVector') -> "void":
        return _openstudioutilitiesidd.IddObjectVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::IddObject >::allocator_type":
        return _openstudioutilitiesidd.IddObjectVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::IddObject >::iterator":
        return _openstudioutilitiesidd.IddObjectVector_begin(self)

    def end(self) -> "std::vector< openstudio::IddObject >::iterator":
        return _openstudioutilitiesidd.IddObjectVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::IddObject >::reverse_iterator":
        return _openstudioutilitiesidd.IddObjectVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::IddObject >::reverse_iterator":
        return _openstudioutilitiesidd.IddObjectVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesidd.IddObjectVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::IddObject >::iterator":
        return _openstudioutilitiesidd.IddObjectVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddObjectVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'IddObject') -> "void":
        return _openstudioutilitiesidd.IddObjectVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::IddObject >::value_type const &":
        return _openstudioutilitiesidd.IddObjectVector_front(self)

    def back(self) -> "std::vector< openstudio::IddObject >::value_type const &":
        return _openstudioutilitiesidd.IddObjectVector_back(self)

    def assign(self, n: 'std::vector< openstudio::IddObject >::size_type', x: 'IddObject') -> "void":
        return _openstudioutilitiesidd.IddObjectVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::IddObject >::size_type') -> "void":
        return _openstudioutilitiesidd.IddObjectVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::IddObject >::size_type":
        return _openstudioutilitiesidd.IddObjectVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectVector
    __del__ = lambda self: None
IddObjectVector_swigregister = _openstudioutilitiesidd.IddObjectVector_swigregister
IddObjectVector_swigregister(IddObjectVector)

class IddFileVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddFileVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddFileVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.IddFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesidd.IddFileVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesidd.IddFileVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::IddFile >::size_type":
        return _openstudioutilitiesidd.IddFileVector___len__(self)

    def pop(self) -> "std::vector< openstudio::IddFile >::value_type":
        return _openstudioutilitiesidd.IddFileVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::IddFile >::difference_type', j: 'std::vector< openstudio::IddFile >::difference_type') -> "std::vector< openstudio::IddFile,std::allocator< openstudio::IddFile > > *":
        return _openstudioutilitiesidd.IddFileVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFileVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::IddFile >::difference_type', j: 'std::vector< openstudio::IddFile >::difference_type') -> "void":
        return _openstudioutilitiesidd.IddFileVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFileVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::IddFile >::value_type const &":
        return _openstudioutilitiesidd.IddFileVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFileVector___setitem__(self, *args)

    def append(self, x: 'IddFile') -> "void":
        return _openstudioutilitiesidd.IddFileVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesidd.IddFileVector_empty(self)

    def size(self) -> "std::vector< openstudio::IddFile >::size_type":
        return _openstudioutilitiesidd.IddFileVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesidd.IddFileVector_clear(self)

    def swap(self, v: 'IddFileVector') -> "void":
        return _openstudioutilitiesidd.IddFileVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::IddFile >::allocator_type":
        return _openstudioutilitiesidd.IddFileVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::IddFile >::iterator":
        return _openstudioutilitiesidd.IddFileVector_begin(self)

    def end(self) -> "std::vector< openstudio::IddFile >::iterator":
        return _openstudioutilitiesidd.IddFileVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::IddFile >::reverse_iterator":
        return _openstudioutilitiesidd.IddFileVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::IddFile >::reverse_iterator":
        return _openstudioutilitiesidd.IddFileVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesidd.IddFileVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::IddFile >::iterator":
        return _openstudioutilitiesidd.IddFileVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddFileVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'IddFile') -> "void":
        return _openstudioutilitiesidd.IddFileVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::IddFile >::value_type const &":
        return _openstudioutilitiesidd.IddFileVector_front(self)

    def back(self) -> "std::vector< openstudio::IddFile >::value_type const &":
        return _openstudioutilitiesidd.IddFileVector_back(self)

    def assign(self, n: 'std::vector< openstudio::IddFile >::size_type', x: 'IddFile') -> "void":
        return _openstudioutilitiesidd.IddFileVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFileVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFileVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::IddFile >::size_type') -> "void":
        return _openstudioutilitiesidd.IddFileVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::IddFile >::size_type":
        return _openstudioutilitiesidd.IddFileVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFileVector
    __del__ = lambda self: None
IddFileVector_swigregister = _openstudioutilitiesidd.IddFileVector_swigregister
IddFileVector_swigregister(IddFileVector)

class IddObjectTypeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddObjectTypeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddObjectTypeVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.IddObjectTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesidd.IddObjectTypeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesidd.IddObjectTypeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::IddObjectType >::size_type":
        return _openstudioutilitiesidd.IddObjectTypeVector___len__(self)

    def pop(self) -> "std::vector< openstudio::IddObjectType >::value_type":
        return _openstudioutilitiesidd.IddObjectTypeVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::IddObjectType >::difference_type', j: 'std::vector< openstudio::IddObjectType >::difference_type') -> "std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > > *":
        return _openstudioutilitiesidd.IddObjectTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::IddObjectType >::difference_type', j: 'std::vector< openstudio::IddObjectType >::difference_type') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::IddObjectType >::value_type const &":
        return _openstudioutilitiesidd.IddObjectTypeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector___setitem__(self, *args)

    def append(self, x: 'IddObjectType') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesidd.IddObjectTypeVector_empty(self)

    def size(self) -> "std::vector< openstudio::IddObjectType >::size_type":
        return _openstudioutilitiesidd.IddObjectTypeVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector_clear(self)

    def swap(self, v: 'IddObjectTypeVector') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::IddObjectType >::allocator_type":
        return _openstudioutilitiesidd.IddObjectTypeVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::IddObjectType >::iterator":
        return _openstudioutilitiesidd.IddObjectTypeVector_begin(self)

    def end(self) -> "std::vector< openstudio::IddObjectType >::iterator":
        return _openstudioutilitiesidd.IddObjectTypeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::IddObjectType >::reverse_iterator":
        return _openstudioutilitiesidd.IddObjectTypeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::IddObjectType >::reverse_iterator":
        return _openstudioutilitiesidd.IddObjectTypeVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::IddObjectType >::iterator":
        return _openstudioutilitiesidd.IddObjectTypeVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddObjectTypeVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'IddObjectType') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::IddObjectType >::value_type const &":
        return _openstudioutilitiesidd.IddObjectTypeVector_front(self)

    def back(self) -> "std::vector< openstudio::IddObjectType >::value_type const &":
        return _openstudioutilitiesidd.IddObjectTypeVector_back(self)

    def assign(self, n: 'std::vector< openstudio::IddObjectType >::size_type', x: 'IddObjectType') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::IddObjectType >::size_type') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::IddObjectType >::size_type":
        return _openstudioutilitiesidd.IddObjectTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectTypeVector
    __del__ = lambda self: None
IddObjectTypeVector_swigregister = _openstudioutilitiesidd.IddObjectTypeVector_swigregister
IddObjectTypeVector_swigregister(IddObjectTypeVector)

class OptionalIddObjectTypeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIddObjectTypeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIddObjectTypeVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_OptionalIddObjectTypeVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_reset(self)

    def __ref__(self) -> "std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > >":
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_isNull(self)

    def get(self) -> "std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > >":
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_get(self)

    def set(self, t: 'IddObjectTypeVector') -> "void":
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_set(self, t)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddObjectTypeVector
    __del__ = lambda self: None
OptionalIddObjectTypeVector_swigregister = _openstudioutilitiesidd.OptionalIddObjectTypeVector_swigregister
OptionalIddObjectTypeVector_swigregister(OptionalIddObjectTypeVector)

class IddFileType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddFileType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddFileType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddFileType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueName(self) -> "std::string":
        return _openstudioutilitiesidd.IddFileType_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiesidd.IddFileType_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiesidd.IddFileType_valueDescription(self)

    def __eq__(self, other: 'IddFileType') -> "bool":
        return _openstudioutilitiesidd.IddFileType___eq__(self, other)

    def __ne__(self, other: 'IddFileType') -> "bool":
        return _openstudioutilitiesidd.IddFileType___ne__(self, other)

    def __gt__(self, other: 'IddFileType') -> "bool":
        return _openstudioutilitiesidd.IddFileType___gt__(self, other)

    def __ge__(self, other: 'IddFileType') -> "bool":
        return _openstudioutilitiesidd.IddFileType___ge__(self, other)

    def __lt__(self, other: 'IddFileType') -> "bool":
        return _openstudioutilitiesidd.IddFileType___lt__(self, other)

    def __le__(self, other: 'IddFileType') -> "bool":
        return _openstudioutilitiesidd.IddFileType___le__(self, other)
    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesidd.IddFileType_enumName
    if _newclass:
        enumName = staticmethod(_openstudioutilitiesidd.IddFileType_enumName)
    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesidd.IddFileType_getValues
    if _newclass:
        getValues = staticmethod(_openstudioutilitiesidd.IddFileType_getValues)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFileType
    __del__ = lambda self: None
IddFileType_swigregister = _openstudioutilitiesidd.IddFileType_swigregister
IddFileType_swigregister(IddFileType)

def IddFileType_enumName() -> "std::string":
    return _openstudioutilitiesidd.IddFileType_enumName()
IddFileType_enumName = _openstudioutilitiesidd.IddFileType_enumName

def IddFileType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiesidd.IddFileType_getValues()
IddFileType_getValues = _openstudioutilitiesidd.IddFileType_getValues

class IddObjectType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddObjectType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddObjectType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddObjectType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueName(self) -> "std::string":
        return _openstudioutilitiesidd.IddObjectType_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiesidd.IddObjectType_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiesidd.IddObjectType_valueDescription(self)

    def __eq__(self, other: 'IddObjectType') -> "bool":
        return _openstudioutilitiesidd.IddObjectType___eq__(self, other)

    def __ne__(self, other: 'IddObjectType') -> "bool":
        return _openstudioutilitiesidd.IddObjectType___ne__(self, other)

    def __gt__(self, other: 'IddObjectType') -> "bool":
        return _openstudioutilitiesidd.IddObjectType___gt__(self, other)

    def __ge__(self, other: 'IddObjectType') -> "bool":
        return _openstudioutilitiesidd.IddObjectType___ge__(self, other)

    def __lt__(self, other: 'IddObjectType') -> "bool":
        return _openstudioutilitiesidd.IddObjectType___lt__(self, other)

    def __le__(self, other: 'IddObjectType') -> "bool":
        return _openstudioutilitiesidd.IddObjectType___le__(self, other)
    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesidd.IddObjectType_enumName
    if _newclass:
        enumName = staticmethod(_openstudioutilitiesidd.IddObjectType_enumName)
    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesidd.IddObjectType_getValues
    if _newclass:
        getValues = staticmethod(_openstudioutilitiesidd.IddObjectType_getValues)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectType
    __del__ = lambda self: None
IddObjectType_swigregister = _openstudioutilitiesidd.IddObjectType_swigregister
IddObjectType_swigregister(IddObjectType)

def IddObjectType_enumName() -> "std::string":
    return _openstudioutilitiesidd.IddObjectType_enumName()
IddObjectType_enumName = _openstudioutilitiesidd.IddObjectType_enumName

def IddObjectType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiesidd.IddObjectType_getValues()
IddObjectType_getValues = _openstudioutilitiesidd.IddObjectType_getValues

class IddObjectTypeSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddObjectTypeSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddObjectTypeSet, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesidd.IddObjectTypeSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesidd.IddObjectTypeSet___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesidd.IddObjectTypeSet___bool__(self)

    def __len__(self) -> "std::set< openstudio::IddObjectType >::size_type":
        return _openstudioutilitiesidd.IddObjectTypeSet___len__(self)

    def append(self, x: 'IddObjectType') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeSet_append(self, x)

    def __contains__(self, x: 'IddObjectType') -> "bool":
        return _openstudioutilitiesidd.IddObjectTypeSet___contains__(self, x)

    def __getitem__(self, i: 'std::set< openstudio::IddObjectType >::difference_type') -> "std::set< openstudio::IddObjectType >::value_type":
        return _openstudioutilitiesidd.IddObjectTypeSet___getitem__(self, i)

    def add(self, x: 'IddObjectType') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeSet_add(self, x)

    def discard(self, x: 'IddObjectType') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeSet_discard(self, x)

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddObjectTypeSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self) -> "bool":
        return _openstudioutilitiesidd.IddObjectTypeSet_empty(self)

    def size(self) -> "std::set< openstudio::IddObjectType >::size_type":
        return _openstudioutilitiesidd.IddObjectTypeSet_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesidd.IddObjectTypeSet_clear(self)

    def swap(self, v: 'IddObjectTypeSet') -> "void":
        return _openstudioutilitiesidd.IddObjectTypeSet_swap(self, v)

    def count(self, x: 'IddObjectType') -> "std::set< openstudio::IddObjectType >::size_type":
        return _openstudioutilitiesidd.IddObjectTypeSet_count(self, x)

    def begin(self) -> "std::set< openstudio::IddObjectType >::iterator":
        return _openstudioutilitiesidd.IddObjectTypeSet_begin(self)

    def end(self) -> "std::set< openstudio::IddObjectType >::iterator":
        return _openstudioutilitiesidd.IddObjectTypeSet_end(self)

    def rbegin(self) -> "std::set< openstudio::IddObjectType >::reverse_iterator":
        return _openstudioutilitiesidd.IddObjectTypeSet_rbegin(self)

    def rend(self) -> "std::set< openstudio::IddObjectType >::reverse_iterator":
        return _openstudioutilitiesidd.IddObjectTypeSet_rend(self)

    def erase(self, *args) -> "void":
        return _openstudioutilitiesidd.IddObjectTypeSet_erase(self, *args)

    def find(self, x: 'IddObjectType') -> "std::set< openstudio::IddObjectType >::iterator":
        return _openstudioutilitiesidd.IddObjectTypeSet_find(self, x)

    def lower_bound(self, x: 'IddObjectType') -> "std::set< openstudio::IddObjectType >::iterator":
        return _openstudioutilitiesidd.IddObjectTypeSet_lower_bound(self, x)

    def upper_bound(self, x: 'IddObjectType') -> "std::set< openstudio::IddObjectType >::iterator":
        return _openstudioutilitiesidd.IddObjectTypeSet_upper_bound(self, x)

    def equal_range(self, x: 'IddObjectType') -> "std::pair< std::set< openstudio::IddObjectType >::iterator,std::set< openstudio::IddObjectType >::iterator >":
        return _openstudioutilitiesidd.IddObjectTypeSet_equal_range(self, x)

    def insert(self, __x: 'IddObjectType') -> "std::pair< std::set< openstudio::IddObjectType >::iterator,bool >":
        return _openstudioutilitiesidd.IddObjectTypeSet_insert(self, __x)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectTypeSet
    __del__ = lambda self: None
IddObjectTypeSet_swigregister = _openstudioutilitiesidd.IddObjectTypeSet_swigregister
IddObjectTypeSet_swigregister(IddObjectTypeSet)

class IddKeyProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddKeyProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddKeyProperties, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddKeyProperties(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, other: 'IddKeyProperties') -> "bool":
        return _openstudioutilitiesidd.IddKeyProperties___eq__(self, other)

    def __ne__(self, other: 'IddKeyProperties') -> "bool":
        return _openstudioutilitiesidd.IddKeyProperties___ne__(self, other)
    __swig_setmethods__["note"] = _openstudioutilitiesidd.IddKeyProperties_note_set
    __swig_getmethods__["note"] = _openstudioutilitiesidd.IddKeyProperties_note_get
    if _newclass:
        note = _swig_property(_openstudioutilitiesidd.IddKeyProperties_note_get, _openstudioutilitiesidd.IddKeyProperties_note_set)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddKeyProperties
    __del__ = lambda self: None
IddKeyProperties_swigregister = _openstudioutilitiesidd.IddKeyProperties_swigregister
IddKeyProperties_swigregister(IddKeyProperties)

class IddKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddKey, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddKey(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def name(self) -> "std::string":
        return _openstudioutilitiesidd.IddKey_name(self)

    def properties(self) -> "openstudio::IddKeyProperties const &":
        return _openstudioutilitiesidd.IddKey_properties(self)

    def __eq__(self, other: 'IddKey') -> "bool":
        return _openstudioutilitiesidd.IddKey___eq__(self, other)

    def __ne__(self, other: 'IddKey') -> "bool":
        return _openstudioutilitiesidd.IddKey___ne__(self, other)
    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesidd.IddKey_load
    if _newclass:
        load = staticmethod(_openstudioutilitiesidd.IddKey_load)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesidd.IddKey___str__(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddKey
    __del__ = lambda self: None
IddKey_swigregister = _openstudioutilitiesidd.IddKey_swigregister
IddKey_swigregister(IddKey)

def IddKey_load(name: 'std::string const &', text: 'std::string const &') -> "boost::optional< openstudio::IddKey >":
    return _openstudioutilitiesidd.IddKey_load(name, text)
IddKey_load = _openstudioutilitiesidd.IddKey_load

class IddField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddField, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudioutilitiesidd.new_IddField()
        try:
            self.this.append(this)
        except:
            self.this = this

    def name(self) -> "std::string":
        return _openstudioutilitiesidd.IddField_name(self)

    def fieldId(self) -> "std::string":
        return _openstudioutilitiesidd.IddField_fieldId(self)

    def properties(self) -> "openstudio::IddFieldProperties const &":
        return _openstudioutilitiesidd.IddField_properties(self)

    def getUnits(self, returnIP: 'bool'=False) -> "boost::optional< openstudio::Unit >":
        return _openstudioutilitiesidd.IddField_getUnits(self, returnIP)

    def unitsBasedOnOtherField(self) -> "bool":
        return _openstudioutilitiesidd.IddField_unitsBasedOnOtherField(self)

    def getKey(self, keyName: 'std::string const &') -> "boost::optional< openstudio::IddKey >":
        return _openstudioutilitiesidd.IddField_getKey(self, keyName)

    def keys(self) -> "std::vector< openstudio::IddKey,std::allocator< openstudio::IddKey > >":
        return _openstudioutilitiesidd.IddField_keys(self)

    def setName(self, name: 'std::string const &') -> "void":
        return _openstudioutilitiesidd.IddField_setName(self, name)

    def incrementFieldId(self, *args) -> "void":
        return _openstudioutilitiesidd.IddField_incrementFieldId(self, *args)

    def isNameField(self) -> "bool":
        return _openstudioutilitiesidd.IddField_isNameField(self)

    def isObjectListField(self) -> "bool":
        return _openstudioutilitiesidd.IddField_isObjectListField(self)

    def __eq__(self, other: 'IddField') -> "bool":
        return _openstudioutilitiesidd.IddField___eq__(self, other)

    def __ne__(self, other: 'IddField') -> "bool":
        return _openstudioutilitiesidd.IddField___ne__(self, other)
    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesidd.IddField_load
    if _newclass:
        load = staticmethod(_openstudioutilitiesidd.IddField_load)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddField
    __del__ = lambda self: None
IddField_swigregister = _openstudioutilitiesidd.IddField_swigregister
IddField_swigregister(IddField)

def IddField_load(name: 'std::string const &', text: 'std::string const &', objectName: 'std::string const &') -> "boost::optional< openstudio::IddField >":
    return _openstudioutilitiesidd.IddField_load(name, text, objectName)
IddField_load = _openstudioutilitiesidd.IddField_load


def referencesEqual(field1: 'IddField', field2: 'IddField') -> "bool":
    return _openstudioutilitiesidd.referencesEqual(field1, field2)
referencesEqual = _openstudioutilitiesidd.referencesEqual
class IddObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def name(self) -> "std::string":
        return _openstudioutilitiesidd.IddObject_name(self)

    def type(self) -> "openstudio::IddObjectType":
        return _openstudioutilitiesidd.IddObject_type(self)

    def group(self) -> "std::string":
        return _openstudioutilitiesidd.IddObject_group(self)

    def properties(self) -> "openstudio::IddObjectProperties const &":
        return _openstudioutilitiesidd.IddObject_properties(self)

    def nonextensibleFields(self) -> "std::vector< openstudio::IddField,std::allocator< openstudio::IddField > > const &":
        return _openstudioutilitiesidd.IddObject_nonextensibleFields(self)

    def extensibleGroup(self) -> "std::vector< openstudio::IddField,std::allocator< openstudio::IddField > > const &":
        return _openstudioutilitiesidd.IddObject_extensibleGroup(self)

    def getField(self, *args) -> "boost::optional< openstudio::IddField >":
        return _openstudioutilitiesidd.IddObject_getField(self, *args)

    def getFieldIndex(self, fieldName: 'std::string const &') -> "boost::optional< int >":
        return _openstudioutilitiesidd.IddObject_getFieldIndex(self, fieldName)

    def insertHandleField(self) -> "void":
        return _openstudioutilitiesidd.IddObject_insertHandleField(self)

    def numFields(self) -> "unsigned int":
        return _openstudioutilitiesidd.IddObject_numFields(self)

    def numFieldsInDefaultObject(self) -> "unsigned int":
        return _openstudioutilitiesidd.IddObject_numFieldsInDefaultObject(self)

    def isVersionObject(self) -> "bool":
        return _openstudioutilitiesidd.IddObject_isVersionObject(self)

    def isNonextensibleField(self, index: 'unsigned int') -> "bool":
        return _openstudioutilitiesidd.IddObject_isNonextensibleField(self, index)

    def isExtensibleField(self, index: 'unsigned int') -> "bool":
        return _openstudioutilitiesidd.IddObject_isExtensibleField(self, index)

    def hasHandleField(self) -> "bool":
        return _openstudioutilitiesidd.IddObject_hasHandleField(self)

    def hasNameField(self) -> "bool":
        return _openstudioutilitiesidd.IddObject_hasNameField(self)

    def nameFieldIndex(self) -> "boost::optional< unsigned int >":
        return _openstudioutilitiesidd.IddObject_nameFieldIndex(self)

    def isRequiredField(self, index: 'unsigned int') -> "bool":
        return _openstudioutilitiesidd.IddObject_isRequiredField(self, index)

    def hasURL(self) -> "bool":
        return _openstudioutilitiesidd.IddObject_hasURL(self)

    def urlFields(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _openstudioutilitiesidd.IddObject_urlFields(self)

    def extensibleIndex(self, index: 'unsigned int') -> "openstudio::ExtensibleIndex":
        return _openstudioutilitiesidd.IddObject_extensibleIndex(self, index)

    def index(self, extensibleIndex: 'ExtensibleIndex') -> "unsigned int":
        return _openstudioutilitiesidd.IddObject_index(self, extensibleIndex)

    def references(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesidd.IddObject_references(self)

    def objectLists(self, *args) -> "std::set< std::string,std::less< std::string >,std::allocator< std::string > >":
        return _openstudioutilitiesidd.IddObject_objectLists(self, *args)

    def objectListFields(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _openstudioutilitiesidd.IddObject_objectListFields(self)

    def __eq__(self, other: 'IddObject') -> "bool":
        return _openstudioutilitiesidd.IddObject___eq__(self, other)

    def __ne__(self, other: 'IddObject') -> "bool":
        return _openstudioutilitiesidd.IddObject___ne__(self, other)
    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesidd.IddObject_load
    if _newclass:
        load = staticmethod(_openstudioutilitiesidd.IddObject_load)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesidd.IddObject___str__(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObject
    __del__ = lambda self: None
IddObject_swigregister = _openstudioutilitiesidd.IddObject_swigregister
IddObject_swigregister(IddObject)

def IddObject_load(*args) -> "boost::optional< openstudio::IddObject >":
    return _openstudioutilitiesidd.IddObject_load(*args)
IddObject_load = _openstudioutilitiesidd.IddObject_load


def getIddObjectTypeVector(objects: 'IddObjectVector') -> "std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > >":
    return _openstudioutilitiesidd.getIddObjectTypeVector(objects)
getIddObjectTypeVector = _openstudioutilitiesidd.getIddObjectTypeVector

def getIddObjectTypeSet(objects: 'IddObjectVector') -> "std::set< openstudio::IddObjectType,std::less< openstudio::IddObjectType >,std::allocator< openstudio::IddObjectType > >":
    return _openstudioutilitiesidd.getIddObjectTypeSet(objects)
getIddObjectTypeSet = _openstudioutilitiesidd.getIddObjectTypeSet

def getIddKeyNames(object: 'IddObject', index: 'unsigned int') -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudioutilitiesidd.getIddKeyNames(object, index)
getIddKeyNames = _openstudioutilitiesidd.getIddKeyNames
class IddFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddFile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["catchallIddFile"] = lambda x: _openstudioutilitiesidd.IddFile_catchallIddFile
    if _newclass:
        catchallIddFile = staticmethod(_openstudioutilitiesidd.IddFile_catchallIddFile)

    def version(self) -> "std::string":
        return _openstudioutilitiesidd.IddFile_version(self)

    def build(self) -> "std::string":
        return _openstudioutilitiesidd.IddFile_build(self)

    def header(self) -> "std::string":
        return _openstudioutilitiesidd.IddFile_header(self)

    def objects(self) -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFile_objects(self)

    def groups(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesidd.IddFile_groups(self)

    def getObjectsInGroup(self, group: 'std::string const &') -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFile_getObjectsInGroup(self, group)

    def getObjects(self, objectRegex: 'Regex') -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFile_getObjects(self, objectRegex)

    def versionObject(self) -> "boost::optional< openstudio::IddObject >":
        return _openstudioutilitiesidd.IddFile_versionObject(self)

    def getObject(self, *args) -> "boost::optional< openstudio::IddObject >":
        return _openstudioutilitiesidd.IddFile_getObject(self, *args)

    def requiredObjects(self) -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFile_requiredObjects(self)

    def uniqueObjects(self) -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFile_uniqueObjects(self)
    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesidd.IddFile_load
    if _newclass:
        load = staticmethod(_openstudioutilitiesidd.IddFile_load)

    def save(self, p: 'path', overwrite: 'bool'=False) -> "bool":
        return _openstudioutilitiesidd.IddFile_save(self, p, overwrite)
    __swig_getmethods__["parseVersionBuild"] = lambda x: _openstudioutilitiesidd.IddFile_parseVersionBuild
    if _newclass:
        parseVersionBuild = staticmethod(_openstudioutilitiesidd.IddFile_parseVersionBuild)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesidd.IddFile___str__(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFile
    __del__ = lambda self: None
IddFile_swigregister = _openstudioutilitiesidd.IddFile_swigregister
IddFile_swigregister(IddFile)

def IddFile_catchallIddFile() -> "openstudio::IddFile":
    return _openstudioutilitiesidd.IddFile_catchallIddFile()
IddFile_catchallIddFile = _openstudioutilitiesidd.IddFile_catchallIddFile

def IddFile_load(*args) -> "boost::optional< openstudio::IddFile >":
    return _openstudioutilitiesidd.IddFile_load(*args)
IddFile_load = _openstudioutilitiesidd.IddFile_load

def IddFile_parseVersionBuild(p: 'path') -> "std::pair< openstudio::VersionString,std::string >":
    return _openstudioutilitiesidd.IddFile_parseVersionBuild(p)
IddFile_parseVersionBuild = _openstudioutilitiesidd.IddFile_parseVersionBuild


def __lshift__(*args) -> "std::ostream &":
    return _openstudioutilitiesidd.__lshift__(*args)
__lshift__ = _openstudioutilitiesidd.__lshift__
class IddFileAndFactoryWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IddFileAndFactoryWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IddFileAndFactoryWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesidd.new_IddFileAndFactoryWrapper(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFileAndFactoryWrapper
    __del__ = lambda self: None

    def version(self) -> "std::string":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_version(self)

    def header(self) -> "std::string":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_header(self)

    def objects(self) -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_objects(self)

    def groups(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_groups(self)

    def getObjectsInGroup(self, group: 'std::string const &') -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_getObjectsInGroup(self, group)

    def getObjects(self, objectRegex: 'Regex') -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_getObjects(self, objectRegex)

    def versionObject(self) -> "boost::optional< openstudio::IddObject >":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_versionObject(self)

    def getObject(self, *args) -> "boost::optional< openstudio::IddObject >":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_getObject(self, *args)

    def requiredObjects(self) -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_requiredObjects(self)

    def uniqueObjects(self) -> "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > >":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_uniqueObjects(self)

    def iddFile(self) -> "openstudio::IddFile":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_iddFile(self)

    def iddFileType(self) -> "openstudio::IddFileType":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_iddFileType(self)

    def setIddFile(self, *args) -> "void":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_setIddFile(self, *args)

    def isInFile(self, *args) -> "bool":
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_isInFile(self, *args)
IddFileAndFactoryWrapper_swigregister = _openstudioutilitiesidd.IddFileAndFactoryWrapper_swigregister
IddFileAndFactoryWrapper_swigregister(IddFileAndFactoryWrapper)


def get_1_9_0_CBECC_IddFile() -> "openstudio::IddFile":
    return _openstudioutilitiesidd.get_1_9_0_CBECC_IddFile()
get_1_9_0_CBECC_IddFile = _openstudioutilitiesidd.get_1_9_0_CBECC_IddFile
# This file is compatible with both classic and new-style classes.


