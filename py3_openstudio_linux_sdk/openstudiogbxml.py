# This file was automatically generated by SWIG (http://www.swig.org).

# Version 3.0.7

#

# Do not make changes to this file unless you know what you are doing--modify

# the SWIG interface file instead.











from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():

        from os.path import dirname

        import imp

        fp = None

        try:

            fp, pathname, description = imp.find_module('_openstudiogbxml', [dirname(__file__)])

        except ImportError:

            import _openstudiogbxml

            return _openstudiogbxml

        if fp is not None:

            try:

                _mod = imp.load_module('_openstudiogbxml', fp, pathname, description)

            finally:

                fp.close()

            return _mod

    _openstudiogbxml = swig_import_helper()

    del swig_import_helper

else:

    import _openstudiogbxml

del version_info

try:

    _swig_property = property

except NameError:

    pass  # Python < 2.2 doesn't have 'property'.





def _swig_setattr_nondynamic(self, class_type, name, value, static=1):

    if (name == "thisown"):

        return self.this.own(value)

    if (name == "this"):

        if type(value).__name__ == 'SwigPyObject':

            self.__dict__[name] = value

            return

    method = class_type.__swig_setmethods__.get(name, None)

    if method:

        return method(self, value)

    if (not static):

        if _newclass:

            object.__setattr__(self, name, value)

        else:

            self.__dict__[name] = value

    else:

        raise AttributeError("You cannot add attributes to %s" % self)





def _swig_setattr(self, class_type, name, value):

    return _swig_setattr_nondynamic(self, class_type, name, value, 0)





def _swig_getattr_nondynamic(self, class_type, name, static=1):

    if (name == "thisown"):

        return self.this.own()

    method = class_type.__swig_getmethods__.get(name, None)

    if method:

        return method(self)

    if (not static):

        return object.__getattr__(self, name)

    else:

        raise AttributeError(name)



def _swig_getattr(self, class_type, name):

    return _swig_getattr_nondynamic(self, class_type, name, 0)





def _swig_repr(self):

    try:

        strthis = "proxy of " + self.this.__repr__()

    except:

        strthis = ""

    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)



try:

    _object = object

    _newclass = 1

except AttributeError:

    class _object:

        pass

    _newclass = 0





try:

    import weakref

    weakref_proxy = weakref.proxy

except:

    weakref_proxy = lambda x: x





class SwigPyIterator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiogbxml.delete_SwigPyIterator

    __del__ = lambda self: None



    def value(self) -> "PyObject *":

        return _openstudiogbxml.SwigPyIterator_value(self)



    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudiogbxml.SwigPyIterator_incr(self, n)



    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudiogbxml.SwigPyIterator_decr(self, n)



    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":

        return _openstudiogbxml.SwigPyIterator_distance(self, x)



    def equal(self, x: 'SwigPyIterator') -> "bool":

        return _openstudiogbxml.SwigPyIterator_equal(self, x)



    def copy(self) -> "swig::SwigPyIterator *":

        return _openstudiogbxml.SwigPyIterator_copy(self)



    def next(self) -> "PyObject *":

        return _openstudiogbxml.SwigPyIterator_next(self)



    def __next__(self) -> "PyObject *":

        return _openstudiogbxml.SwigPyIterator___next__(self)



    def previous(self) -> "PyObject *":

        return _openstudiogbxml.SwigPyIterator_previous(self)



    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudiogbxml.SwigPyIterator_advance(self, n)



    def __eq__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudiogbxml.SwigPyIterator___eq__(self, x)



    def __ne__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudiogbxml.SwigPyIterator___ne__(self, x)



    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudiogbxml.SwigPyIterator___iadd__(self, n)



    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudiogbxml.SwigPyIterator___isub__(self, n)



    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudiogbxml.SwigPyIterator___add__(self, n)



    def __sub__(self, *args) -> "ptrdiff_t":

        return _openstudiogbxml.SwigPyIterator___sub__(self, *args)

    def __iter__(self):

        return self

SwigPyIterator_swigregister = _openstudiogbxml.SwigPyIterator_swigregister

SwigPyIterator_swigregister(SwigPyIterator)





_openstudiogbxml.SHARED_PTR_DISOWN_swigconstant(_openstudiogbxml)

SHARED_PTR_DISOWN = _openstudiogbxml.SHARED_PTR_DISOWN

from .import openstudioutilities

from .import openstudioutilitiescore

from .import openstudioutilitiestime

from .import openstudioutilitiesdata

from .import openstudioutilitiesunits

from .import openstudioutilitiesplot

from .import openstudioutilitiesgeometry

from .import openstudioutilitiessql

from .import openstudioutilitiesbcl

from .import openstudioutilitiesidd

from .import openstudioutilitiesidf

from .import openstudioutilitiesfiletypes

from .import openstudiomodel

from .import openstudiomodelcore

from .import openstudiomodelsimulation

from .import openstudiomodelresources

from .import openstudiomodelgeometry

from .import openstudiomodelhvac

from .import openstudiomodelzonehvac

from .import openstudiomodelavailabilitymanager

from .import openstudiomodelplantequipmentoperationscheme

from .import openstudiomodelstraightcomponent

from .import openstudiomodelairflow

from .import openstudiomodelrefrigeration

from .import openstudiomodelgenerators

class GbXMLReverseTranslator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GbXMLReverseTranslator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GbXMLReverseTranslator, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudiogbxml.new_GbXMLReverseTranslator()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiogbxml.delete_GbXMLReverseTranslator

    __del__ = lambda self: None



    def loadModel(self, path: 'path', progressBar: 'ProgressBar'=None) -> "boost::optional< openstudio::model::Model >":

        return _openstudiogbxml.GbXMLReverseTranslator_loadModel(self, path, progressBar)



    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiogbxml.GbXMLReverseTranslator_warnings(self)



    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiogbxml.GbXMLReverseTranslator_errors(self)

GbXMLReverseTranslator_swigregister = _openstudiogbxml.GbXMLReverseTranslator_swigregister

GbXMLReverseTranslator_swigregister(GbXMLReverseTranslator)



class GbXMLForwardTranslator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GbXMLForwardTranslator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GbXMLForwardTranslator, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudiogbxml.new_GbXMLForwardTranslator()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiogbxml.delete_GbXMLForwardTranslator

    __del__ = lambda self: None



    def modelToGbXML(self, model: 'Model', path: 'path', progressBar: 'ProgressBar'=None) -> "bool":

        return _openstudiogbxml.GbXMLForwardTranslator_modelToGbXML(self, model, path, progressBar)



    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiogbxml.GbXMLForwardTranslator_warnings(self)



    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiogbxml.GbXMLForwardTranslator_errors(self)

GbXMLForwardTranslator_swigregister = _openstudiogbxml.GbXMLForwardTranslator_swigregister

GbXMLForwardTranslator_swigregister(GbXMLForwardTranslator)



# This file is compatible with both classic and new-style classes.





