# This file was automatically generated by SWIG (http://www.swig.org).

# Version 3.0.7

#

# Do not make changes to this file unless you know what you are doing--modify

# the SWIG interface file instead.











from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():

        from os.path import dirname

        import imp

        fp = None

        try:

            fp, pathname, description = imp.find_module('_openstudiomodelgenerators', [dirname(__file__)])

        except ImportError:

            import _openstudiomodelgenerators

            return _openstudiomodelgenerators

        if fp is not None:

            try:

                _mod = imp.load_module('_openstudiomodelgenerators', fp, pathname, description)

            finally:

                fp.close()

            return _mod

    _openstudiomodelgenerators = swig_import_helper()

    del swig_import_helper

else:

    import _openstudiomodelgenerators

del version_info

try:

    _swig_property = property

except NameError:

    pass  # Python < 2.2 doesn't have 'property'.





def _swig_setattr_nondynamic(self, class_type, name, value, static=1):

    if (name == "thisown"):

        return self.this.own(value)

    if (name == "this"):

        if type(value).__name__ == 'SwigPyObject':

            self.__dict__[name] = value

            return

    method = class_type.__swig_setmethods__.get(name, None)

    if method:

        return method(self, value)

    if (not static):

        if _newclass:

            object.__setattr__(self, name, value)

        else:

            self.__dict__[name] = value

    else:

        raise AttributeError("You cannot add attributes to %s" % self)





def _swig_setattr(self, class_type, name, value):

    return _swig_setattr_nondynamic(self, class_type, name, value, 0)





def _swig_getattr_nondynamic(self, class_type, name, static=1):

    if (name == "thisown"):

        return self.this.own()

    method = class_type.__swig_getmethods__.get(name, None)

    if method:

        return method(self)

    if (not static):

        return object.__getattr__(self, name)

    else:

        raise AttributeError(name)



def _swig_getattr(self, class_type, name):

    return _swig_getattr_nondynamic(self, class_type, name, 0)





def _swig_repr(self):

    try:

        strthis = "proxy of " + self.this.__repr__()

    except:

        strthis = ""

    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)



try:

    _object = object

    _newclass = 1

except AttributeError:

    class _object:

        pass

    _newclass = 0





try:

    import weakref

    weakref_proxy = weakref.proxy

except:

    weakref_proxy = lambda x: x





class SwigPyIterator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelgenerators.delete_SwigPyIterator

    __del__ = lambda self: None



    def value(self) -> "PyObject *":

        return _openstudiomodelgenerators.SwigPyIterator_value(self)



    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.SwigPyIterator_incr(self, n)



    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.SwigPyIterator_decr(self, n)



    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":

        return _openstudiomodelgenerators.SwigPyIterator_distance(self, x)



    def equal(self, x: 'SwigPyIterator') -> "bool":

        return _openstudiomodelgenerators.SwigPyIterator_equal(self, x)



    def copy(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.SwigPyIterator_copy(self)



    def next(self) -> "PyObject *":

        return _openstudiomodelgenerators.SwigPyIterator_next(self)



    def __next__(self) -> "PyObject *":

        return _openstudiomodelgenerators.SwigPyIterator___next__(self)



    def previous(self) -> "PyObject *":

        return _openstudiomodelgenerators.SwigPyIterator_previous(self)



    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.SwigPyIterator_advance(self, n)



    def __eq__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudiomodelgenerators.SwigPyIterator___eq__(self, x)



    def __ne__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudiomodelgenerators.SwigPyIterator___ne__(self, x)



    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudiomodelgenerators.SwigPyIterator___iadd__(self, n)



    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudiomodelgenerators.SwigPyIterator___isub__(self, n)



    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.SwigPyIterator___add__(self, n)



    def __sub__(self, *args) -> "ptrdiff_t":

        return _openstudiomodelgenerators.SwigPyIterator___sub__(self, *args)

    def __iter__(self):

        return self

SwigPyIterator_swigregister = _openstudiomodelgenerators.SwigPyIterator_swigregister

SwigPyIterator_swigregister(SwigPyIterator)





_openstudiomodelgenerators.SHARED_PTR_DISOWN_swigconstant(_openstudiomodelgenerators)

SHARED_PTR_DISOWN = _openstudiomodelgenerators.SHARED_PTR_DISOWN

from .import openstudioutilities

from .import openstudioutilitiescore

from .import openstudioutilitiestime

from .import openstudioutilitiesdata

from .import openstudioutilitiesunits

from .import openstudioutilitiesplot

from .import openstudioutilitiesgeometry

from .import openstudioutilitiessql

from .import openstudioutilitiesbcl

from .import openstudioutilitiesidd

from .import openstudioutilitiesidf

from .import openstudioutilitiesfiletypes

from .import openstudiomodelcore

from .import openstudiomodelsimulation

from .import openstudiomodelresources

from .import openstudiomodelgeometry

from .import openstudiomodelhvac

class FloorplanJSForwardTranslator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, FloorplanJSForwardTranslator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, FloorplanJSForwardTranslator, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudiomodelgenerators.new_FloorplanJSForwardTranslator()

        try:

            self.this.append(this)

        except:

            self.this = this



    def updateFloorplanJS(self, floorplan: 'FloorplanJS', model: 'Model', removeMissingObjects: 'bool') -> "openstudio::FloorplanJS":

        return _openstudiomodelgenerators.FloorplanJSForwardTranslator_updateFloorplanJS(self, floorplan, model, removeMissingObjects)



    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiomodelgenerators.FloorplanJSForwardTranslator_warnings(self)



    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiomodelgenerators.FloorplanJSForwardTranslator_errors(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_FloorplanJSForwardTranslator

    __del__ = lambda self: None

FloorplanJSForwardTranslator_swigregister = _openstudiomodelgenerators.FloorplanJSForwardTranslator_swigregister

FloorplanJSForwardTranslator_swigregister(FloorplanJSForwardTranslator)



class ThreeJSForwardTranslator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeJSForwardTranslator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ThreeJSForwardTranslator, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudiomodelgenerators.new_ThreeJSForwardTranslator()

        try:

            self.this.append(this)

        except:

            self.this = this



    def modelToThreeJS(self, *args) -> "openstudio::ThreeScene":

        return _openstudiomodelgenerators.ThreeJSForwardTranslator_modelToThreeJS(self, *args)



    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiomodelgenerators.ThreeJSForwardTranslator_warnings(self)



    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiomodelgenerators.ThreeJSForwardTranslator_errors(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ThreeJSForwardTranslator

    __del__ = lambda self: None

ThreeJSForwardTranslator_swigregister = _openstudiomodelgenerators.ThreeJSForwardTranslator_swigregister

ThreeJSForwardTranslator_swigregister(ThreeJSForwardTranslator)



class ThreeJSReverseTranslator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeJSReverseTranslator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ThreeJSReverseTranslator, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudiomodelgenerators.new_ThreeJSReverseTranslator()

        try:

            self.this.append(this)

        except:

            self.this = this



    def modelFromThreeJS(self, scene: 'ThreeScene') -> "boost::optional< openstudio::model::Model >":

        return _openstudiomodelgenerators.ThreeJSReverseTranslator_modelFromThreeJS(self, scene)



    def handleMapping(self) -> "std::map< openstudio::UUID,openstudio::UUID,std::less< openstudio::UUID >,std::allocator< std::pair< openstudio::UUID const,openstudio::UUID > > >":

        return _openstudiomodelgenerators.ThreeJSReverseTranslator_handleMapping(self)



    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiomodelgenerators.ThreeJSReverseTranslator_warnings(self)



    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiomodelgenerators.ThreeJSReverseTranslator_errors(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ThreeJSReverseTranslator

    __del__ = lambda self: None

ThreeJSReverseTranslator_swigregister = _openstudiomodelgenerators.ThreeJSReverseTranslator_swigregister

ThreeJSReverseTranslator_swigregister(ThreeJSReverseTranslator)



class ModelMerger(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelMerger, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ModelMerger, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudiomodelgenerators.new_ModelMerger()

        try:

            self.this.append(this)

        except:

            self.this = this



    def mergeModels(self, currentModel: 'Model', newModel: 'Model', handleMapping: 'HandleMap') -> "void":

        return _openstudiomodelgenerators.ModelMerger_mergeModels(self, currentModel, newModel, handleMapping)



    def iddObjectTypesToMerge(self) -> "std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > >":

        return _openstudiomodelgenerators.ModelMerger_iddObjectTypesToMerge(self)



    def setIddObjectTypesToMerge(self, iddObjectTypesToMerge: 'IddObjectTypeVector') -> "bool":

        return _openstudiomodelgenerators.ModelMerger_setIddObjectTypesToMerge(self, iddObjectTypesToMerge)



    def suggestHandleMapping(self, currentModel: 'Model', newModel: 'Model') -> "std::map< openstudio::UUID,openstudio::UUID,std::less< openstudio::UUID >,std::allocator< std::pair< openstudio::UUID const,openstudio::UUID > > >":

        return _openstudiomodelgenerators.ModelMerger_suggestHandleMapping(self, currentModel, newModel)



    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiomodelgenerators.ModelMerger_warnings(self)



    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudiomodelgenerators.ModelMerger_errors(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ModelMerger

    __del__ = lambda self: None

ModelMerger_swigregister = _openstudiomodelgenerators.ModelMerger_swigregister

ModelMerger_swigregister(ModelMerger)



class PhotovoltaicPerformanceVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotovoltaicPerformanceVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PhotovoltaicPerformanceVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::size_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::value_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::PhotovoltaicPerformance >::difference_type', j: 'std::vector< openstudio::model::PhotovoltaicPerformance >::difference_type') -> "std::vector< openstudio::model::PhotovoltaicPerformance,std::allocator< openstudio::model::PhotovoltaicPerformance > > *":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::PhotovoltaicPerformance >::difference_type', j: 'std::vector< openstudio::model::PhotovoltaicPerformance >::difference_type') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::value_type const &":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___setitem__(self, *args)



    def append(self, x: 'PhotovoltaicPerformance') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::size_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_clear(self)



    def swap(self, v: 'PhotovoltaicPerformanceVector') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::allocator_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::reverse_iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::reverse_iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_PhotovoltaicPerformanceVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PhotovoltaicPerformance') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::value_type const &":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_front(self)



    def back(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::value_type const &":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::PhotovoltaicPerformance >::size_type', x: 'PhotovoltaicPerformance') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::PhotovoltaicPerformance >::size_type', x: 'PhotovoltaicPerformance') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::PhotovoltaicPerformance >::size_type') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::PhotovoltaicPerformance >::size_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceVector

    __del__ = lambda self: None

PhotovoltaicPerformanceVector_swigregister = _openstudiomodelgenerators.PhotovoltaicPerformanceVector_swigregister

PhotovoltaicPerformanceVector_swigregister(PhotovoltaicPerformanceVector)



class OptionalPhotovoltaicPerformance(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPhotovoltaicPerformance, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPhotovoltaicPerformance, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalPhotovoltaicPerformance(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_reset(self)



    def __ref__(self) -> "openstudio::model::PhotovoltaicPerformance":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_isNull(self)



    def get(self) -> "openstudio::model::PhotovoltaicPerformance":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_get(self)



    def set(self, t: 'PhotovoltaicPerformance') -> "void":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalPhotovoltaicPerformance

    __del__ = lambda self: None

OptionalPhotovoltaicPerformance_swigregister = _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_swigregister

OptionalPhotovoltaicPerformance_swigregister(OptionalPhotovoltaicPerformance)



class GeneratorVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::Generator >::size_type":

        return _openstudiomodelgenerators.GeneratorVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::Generator >::value_type":

        return _openstudiomodelgenerators.GeneratorVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::Generator >::difference_type', j: 'std::vector< openstudio::model::Generator >::difference_type') -> "std::vector< openstudio::model::Generator,std::allocator< openstudio::model::Generator > > *":

        return _openstudiomodelgenerators.GeneratorVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::Generator >::difference_type', j: 'std::vector< openstudio::model::Generator >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::Generator >::value_type const &":

        return _openstudiomodelgenerators.GeneratorVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorVector___setitem__(self, *args)



    def append(self, x: 'Generator') -> "void":

        return _openstudiomodelgenerators.GeneratorVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::Generator >::size_type":

        return _openstudiomodelgenerators.GeneratorVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorVector_clear(self)



    def swap(self, v: 'GeneratorVector') -> "void":

        return _openstudiomodelgenerators.GeneratorVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::Generator >::allocator_type":

        return _openstudiomodelgenerators.GeneratorVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::Generator >::iterator":

        return _openstudiomodelgenerators.GeneratorVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::Generator >::iterator":

        return _openstudiomodelgenerators.GeneratorVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::Generator >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::Generator >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::Generator >::iterator":

        return _openstudiomodelgenerators.GeneratorVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Generator') -> "void":

        return _openstudiomodelgenerators.GeneratorVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::Generator >::value_type const &":

        return _openstudiomodelgenerators.GeneratorVector_front(self)



    def back(self) -> "std::vector< openstudio::model::Generator >::value_type const &":

        return _openstudiomodelgenerators.GeneratorVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::Generator >::size_type', x: 'Generator') -> "void":

        return _openstudiomodelgenerators.GeneratorVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::Generator >::size_type', x: 'Generator') -> "void":

        return _openstudiomodelgenerators.GeneratorVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::Generator >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::Generator >::size_type":

        return _openstudiomodelgenerators.GeneratorVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorVector

    __del__ = lambda self: None

GeneratorVector_swigregister = _openstudiomodelgenerators.GeneratorVector_swigregister

GeneratorVector_swigregister(GeneratorVector)



class OptionalGenerator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGenerator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGenerator, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGenerator(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGenerator_reset(self)



    def __ref__(self) -> "openstudio::model::Generator":

        return _openstudiomodelgenerators.OptionalGenerator___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGenerator_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGenerator_isNull(self)



    def get(self) -> "openstudio::model::Generator":

        return _openstudiomodelgenerators.OptionalGenerator_get(self)



    def set(self, t: 'Generator') -> "void":

        return _openstudiomodelgenerators.OptionalGenerator_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGenerator

    __del__ = lambda self: None

OptionalGenerator_swigregister = _openstudiomodelgenerators.OptionalGenerator_swigregister

OptionalGenerator_swigregister(OptionalGenerator)



class InverterVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, InverterVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, InverterVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.InverterVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.InverterVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.InverterVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::Inverter >::size_type":

        return _openstudiomodelgenerators.InverterVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::Inverter >::value_type":

        return _openstudiomodelgenerators.InverterVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::Inverter >::difference_type', j: 'std::vector< openstudio::model::Inverter >::difference_type') -> "std::vector< openstudio::model::Inverter,std::allocator< openstudio::model::Inverter > > *":

        return _openstudiomodelgenerators.InverterVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.InverterVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::Inverter >::difference_type', j: 'std::vector< openstudio::model::Inverter >::difference_type') -> "void":

        return _openstudiomodelgenerators.InverterVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.InverterVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::Inverter >::value_type const &":

        return _openstudiomodelgenerators.InverterVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.InverterVector___setitem__(self, *args)



    def append(self, x: 'Inverter') -> "void":

        return _openstudiomodelgenerators.InverterVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.InverterVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::Inverter >::size_type":

        return _openstudiomodelgenerators.InverterVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.InverterVector_clear(self)



    def swap(self, v: 'InverterVector') -> "void":

        return _openstudiomodelgenerators.InverterVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::Inverter >::allocator_type":

        return _openstudiomodelgenerators.InverterVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::Inverter >::iterator":

        return _openstudiomodelgenerators.InverterVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::Inverter >::iterator":

        return _openstudiomodelgenerators.InverterVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::Inverter >::reverse_iterator":

        return _openstudiomodelgenerators.InverterVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::Inverter >::reverse_iterator":

        return _openstudiomodelgenerators.InverterVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.InverterVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::Inverter >::iterator":

        return _openstudiomodelgenerators.InverterVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_InverterVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Inverter') -> "void":

        return _openstudiomodelgenerators.InverterVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::Inverter >::value_type const &":

        return _openstudiomodelgenerators.InverterVector_front(self)



    def back(self) -> "std::vector< openstudio::model::Inverter >::value_type const &":

        return _openstudiomodelgenerators.InverterVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::Inverter >::size_type', x: 'Inverter') -> "void":

        return _openstudiomodelgenerators.InverterVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::Inverter >::size_type', x: 'Inverter') -> "void":

        return _openstudiomodelgenerators.InverterVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.InverterVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::Inverter >::size_type') -> "void":

        return _openstudiomodelgenerators.InverterVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::Inverter >::size_type":

        return _openstudiomodelgenerators.InverterVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_InverterVector

    __del__ = lambda self: None

InverterVector_swigregister = _openstudiomodelgenerators.InverterVector_swigregister

InverterVector_swigregister(InverterVector)



class OptionalInverter(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalInverter, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalInverter, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalInverter(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalInverter_reset(self)



    def __ref__(self) -> "openstudio::model::Inverter":

        return _openstudiomodelgenerators.OptionalInverter___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalInverter_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalInverter_isNull(self)



    def get(self) -> "openstudio::model::Inverter":

        return _openstudiomodelgenerators.OptionalInverter_get(self)



    def set(self, t: 'Inverter') -> "void":

        return _openstudiomodelgenerators.OptionalInverter_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalInverter

    __del__ = lambda self: None

OptionalInverter_swigregister = _openstudiomodelgenerators.OptionalInverter_swigregister

OptionalInverter_swigregister(OptionalInverter)



class ElectricalStorageVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricalStorageVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricalStorageVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.ElectricalStorageVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricalStorageVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricalStorageVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ElectricalStorage >::size_type":

        return _openstudiomodelgenerators.ElectricalStorageVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ElectricalStorage >::value_type":

        return _openstudiomodelgenerators.ElectricalStorageVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ElectricalStorage >::difference_type', j: 'std::vector< openstudio::model::ElectricalStorage >::difference_type') -> "std::vector< openstudio::model::ElectricalStorage,std::allocator< openstudio::model::ElectricalStorage > > *":

        return _openstudiomodelgenerators.ElectricalStorageVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ElectricalStorage >::difference_type', j: 'std::vector< openstudio::model::ElectricalStorage >::difference_type') -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricalStorage >::value_type const &":

        return _openstudiomodelgenerators.ElectricalStorageVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector___setitem__(self, *args)



    def append(self, x: 'ElectricalStorage') -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.ElectricalStorageVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ElectricalStorage >::size_type":

        return _openstudiomodelgenerators.ElectricalStorageVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector_clear(self)



    def swap(self, v: 'ElectricalStorageVector') -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ElectricalStorage >::allocator_type":

        return _openstudiomodelgenerators.ElectricalStorageVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ElectricalStorage >::iterator":

        return _openstudiomodelgenerators.ElectricalStorageVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ElectricalStorage >::iterator":

        return _openstudiomodelgenerators.ElectricalStorageVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ElectricalStorage >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricalStorageVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ElectricalStorage >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricalStorageVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ElectricalStorage >::iterator":

        return _openstudiomodelgenerators.ElectricalStorageVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_ElectricalStorageVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ElectricalStorage') -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ElectricalStorage >::value_type const &":

        return _openstudiomodelgenerators.ElectricalStorageVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ElectricalStorage >::value_type const &":

        return _openstudiomodelgenerators.ElectricalStorageVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ElectricalStorage >::size_type', x: 'ElectricalStorage') -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ElectricalStorage >::size_type', x: 'ElectricalStorage') -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ElectricalStorage >::size_type') -> "void":

        return _openstudiomodelgenerators.ElectricalStorageVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ElectricalStorage >::size_type":

        return _openstudiomodelgenerators.ElectricalStorageVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricalStorageVector

    __del__ = lambda self: None

ElectricalStorageVector_swigregister = _openstudiomodelgenerators.ElectricalStorageVector_swigregister

ElectricalStorageVector_swigregister(ElectricalStorageVector)



class OptionalElectricalStorage(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalElectricalStorage, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalElectricalStorage, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalElectricalStorage(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalElectricalStorage_reset(self)



    def __ref__(self) -> "openstudio::model::ElectricalStorage":

        return _openstudiomodelgenerators.OptionalElectricalStorage___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricalStorage_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricalStorage_isNull(self)



    def get(self) -> "openstudio::model::ElectricalStorage":

        return _openstudiomodelgenerators.OptionalElectricalStorage_get(self)



    def set(self, t: 'ElectricalStorage') -> "void":

        return _openstudiomodelgenerators.OptionalElectricalStorage_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricalStorage

    __del__ = lambda self: None

OptionalElectricalStorage_swigregister = _openstudiomodelgenerators.OptionalElectricalStorage_swigregister

OptionalElectricalStorage_swigregister(OptionalElectricalStorage)



class GeneratorFuelCellAirSupplyVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellAirSupplyVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellAirSupplyVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellAirSupply >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellAirSupply >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply,std::allocator< openstudio::model::GeneratorFuelCellAirSupply > > *":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellAirSupply >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellAirSupply >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelCellAirSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_clear(self)



    def swap(self, v: 'GeneratorFuelCellAirSupplyVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellAirSupplyVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelCellAirSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelCellAirSupply >::size_type', x: 'GeneratorFuelCellAirSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelCellAirSupply >::size_type', x: 'GeneratorFuelCellAirSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelCellAirSupply >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellAirSupplyVector

    __del__ = lambda self: None

GeneratorFuelCellAirSupplyVector_swigregister = _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_swigregister

GeneratorFuelCellAirSupplyVector_swigregister(GeneratorFuelCellAirSupplyVector)



class OptionalGeneratorFuelCellAirSupply(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelCellAirSupply, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelCellAirSupply, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelCellAirSupply(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelCellAirSupply":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelCellAirSupply":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_get(self)



    def set(self, t: 'GeneratorFuelCellAirSupply') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellAirSupply

    __del__ = lambda self: None

OptionalGeneratorFuelCellAirSupply_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_swigregister

OptionalGeneratorFuelCellAirSupply_swigregister(OptionalGeneratorFuelCellAirSupply)



class GeneratorFuelCellAuxiliaryHeaterVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellAuxiliaryHeaterVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellAuxiliaryHeaterVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater,std::allocator< openstudio::model::GeneratorFuelCellAuxiliaryHeater > > *":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelCellAuxiliaryHeater') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_clear(self)



    def swap(self, v: 'GeneratorFuelCellAuxiliaryHeaterVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellAuxiliaryHeaterVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelCellAuxiliaryHeater') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::size_type', x: 'GeneratorFuelCellAuxiliaryHeater') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::size_type', x: 'GeneratorFuelCellAuxiliaryHeater') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellAuxiliaryHeaterVector

    __del__ = lambda self: None

GeneratorFuelCellAuxiliaryHeaterVector_swigregister = _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_swigregister

GeneratorFuelCellAuxiliaryHeaterVector_swigregister(GeneratorFuelCellAuxiliaryHeaterVector)



class OptionalGeneratorFuelCellAuxiliaryHeater(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelCellAuxiliaryHeater, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelCellAuxiliaryHeater, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelCellAuxiliaryHeater(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelCellAuxiliaryHeater":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelCellAuxiliaryHeater":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_get(self)



    def set(self, t: 'GeneratorFuelCellAuxiliaryHeater') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellAuxiliaryHeater

    __del__ = lambda self: None

OptionalGeneratorFuelCellAuxiliaryHeater_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_swigregister

OptionalGeneratorFuelCellAuxiliaryHeater_swigregister(OptionalGeneratorFuelCellAuxiliaryHeater)



class GeneratorFuelCellElectricalStorageVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellElectricalStorageVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellElectricalStorageVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage,std::allocator< openstudio::model::GeneratorFuelCellElectricalStorage > > *":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelCellElectricalStorage') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_clear(self)



    def swap(self, v: 'GeneratorFuelCellElectricalStorageVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellElectricalStorageVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelCellElectricalStorage') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::size_type', x: 'GeneratorFuelCellElectricalStorage') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::size_type', x: 'GeneratorFuelCellElectricalStorage') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellElectricalStorageVector

    __del__ = lambda self: None

GeneratorFuelCellElectricalStorageVector_swigregister = _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_swigregister

GeneratorFuelCellElectricalStorageVector_swigregister(GeneratorFuelCellElectricalStorageVector)



class OptionalGeneratorFuelCellElectricalStorage(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelCellElectricalStorage, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelCellElectricalStorage, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelCellElectricalStorage(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelCellElectricalStorage":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelCellElectricalStorage":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_get(self)



    def set(self, t: 'GeneratorFuelCellElectricalStorage') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellElectricalStorage

    __del__ = lambda self: None

OptionalGeneratorFuelCellElectricalStorage_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_swigregister

OptionalGeneratorFuelCellElectricalStorage_swigregister(OptionalGeneratorFuelCellElectricalStorage)



class GeneratorFuelCellExhaustGasToWaterHeatExchangerVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellExhaustGasToWaterHeatExchangerVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellExhaustGasToWaterHeatExchangerVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger,std::allocator< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger > > *":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelCellExhaustGasToWaterHeatExchanger') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_clear(self)



    def swap(self, v: 'GeneratorFuelCellExhaustGasToWaterHeatExchangerVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellExhaustGasToWaterHeatExchangerVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelCellExhaustGasToWaterHeatExchanger') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::size_type', x: 'GeneratorFuelCellExhaustGasToWaterHeatExchanger') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::size_type', x: 'GeneratorFuelCellExhaustGasToWaterHeatExchanger') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellExhaustGasToWaterHeatExchangerVector

    __del__ = lambda self: None

GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_swigregister = _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_swigregister

GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_swigregister(GeneratorFuelCellExhaustGasToWaterHeatExchangerVector)



class OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_get(self)



    def set(self, t: 'GeneratorFuelCellExhaustGasToWaterHeatExchanger') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger

    __del__ = lambda self: None

OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_swigregister

OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_swigregister(OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger)



class GeneratorFuelCellInverterVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellInverterVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellInverterVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellInverter >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellInverter >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelCellInverter,std::allocator< openstudio::model::GeneratorFuelCellInverter > > *":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellInverter >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellInverter >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelCellInverter') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_clear(self)



    def swap(self, v: 'GeneratorFuelCellInverterVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellInverterVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelCellInverter') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelCellInverter >::size_type', x: 'GeneratorFuelCellInverter') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelCellInverter >::size_type', x: 'GeneratorFuelCellInverter') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelCellInverter >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelCellInverter >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellInverterVector

    __del__ = lambda self: None

GeneratorFuelCellInverterVector_swigregister = _openstudiomodelgenerators.GeneratorFuelCellInverterVector_swigregister

GeneratorFuelCellInverterVector_swigregister(GeneratorFuelCellInverterVector)



class OptionalGeneratorFuelCellInverter(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelCellInverter, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelCellInverter, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelCellInverter(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelCellInverter":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelCellInverter":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_get(self)



    def set(self, t: 'GeneratorFuelCellInverter') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellInverter

    __del__ = lambda self: None

OptionalGeneratorFuelCellInverter_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_swigregister

OptionalGeneratorFuelCellInverter_swigregister(OptionalGeneratorFuelCellInverter)



class GeneratorFuelCellPowerModuleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellPowerModuleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellPowerModuleVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellPowerModule >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellPowerModule >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule,std::allocator< openstudio::model::GeneratorFuelCellPowerModule > > *":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellPowerModule >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellPowerModule >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelCellPowerModule') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_clear(self)



    def swap(self, v: 'GeneratorFuelCellPowerModuleVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellPowerModuleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelCellPowerModule') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelCellPowerModule >::size_type', x: 'GeneratorFuelCellPowerModule') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelCellPowerModule >::size_type', x: 'GeneratorFuelCellPowerModule') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelCellPowerModule >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellPowerModuleVector

    __del__ = lambda self: None

GeneratorFuelCellPowerModuleVector_swigregister = _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_swigregister

GeneratorFuelCellPowerModuleVector_swigregister(GeneratorFuelCellPowerModuleVector)



class OptionalGeneratorFuelCellPowerModule(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelCellPowerModule, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelCellPowerModule, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelCellPowerModule(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelCellPowerModule":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelCellPowerModule":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_get(self)



    def set(self, t: 'GeneratorFuelCellPowerModule') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellPowerModule

    __del__ = lambda self: None

OptionalGeneratorFuelCellPowerModule_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_swigregister

OptionalGeneratorFuelCellPowerModule_swigregister(OptionalGeneratorFuelCellPowerModule)



class GeneratorFuelCellStackCoolerVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellStackCoolerVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellStackCoolerVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellStackCooler >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellStackCooler >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler,std::allocator< openstudio::model::GeneratorFuelCellStackCooler > > *":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellStackCooler >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellStackCooler >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelCellStackCooler') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_clear(self)



    def swap(self, v: 'GeneratorFuelCellStackCoolerVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellStackCoolerVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelCellStackCooler') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelCellStackCooler >::size_type', x: 'GeneratorFuelCellStackCooler') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelCellStackCooler >::size_type', x: 'GeneratorFuelCellStackCooler') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelCellStackCooler >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellStackCoolerVector

    __del__ = lambda self: None

GeneratorFuelCellStackCoolerVector_swigregister = _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_swigregister

GeneratorFuelCellStackCoolerVector_swigregister(GeneratorFuelCellStackCoolerVector)



class OptionalGeneratorFuelCellStackCooler(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelCellStackCooler, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelCellStackCooler, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelCellStackCooler(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelCellStackCooler":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelCellStackCooler":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_get(self)



    def set(self, t: 'GeneratorFuelCellStackCooler') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellStackCooler

    __del__ = lambda self: None

OptionalGeneratorFuelCellStackCooler_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_swigregister

OptionalGeneratorFuelCellStackCooler_swigregister(OptionalGeneratorFuelCellStackCooler)



class GeneratorFuelCellWaterSupplyVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellWaterSupplyVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellWaterSupplyVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply,std::allocator< openstudio::model::GeneratorFuelCellWaterSupply > > *":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelCellWaterSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_clear(self)



    def swap(self, v: 'GeneratorFuelCellWaterSupplyVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellWaterSupplyVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelCellWaterSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::size_type', x: 'GeneratorFuelCellWaterSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::size_type', x: 'GeneratorFuelCellWaterSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellWaterSupplyVector

    __del__ = lambda self: None

GeneratorFuelCellWaterSupplyVector_swigregister = _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_swigregister

GeneratorFuelCellWaterSupplyVector_swigregister(GeneratorFuelCellWaterSupplyVector)



class OptionalGeneratorFuelCellWaterSupply(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelCellWaterSupply, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelCellWaterSupply, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelCellWaterSupply(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelCellWaterSupply":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelCellWaterSupply":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_get(self)



    def set(self, t: 'GeneratorFuelCellWaterSupply') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellWaterSupply

    __del__ = lambda self: None

OptionalGeneratorFuelCellWaterSupply_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_swigregister

OptionalGeneratorFuelCellWaterSupply_swigregister(OptionalGeneratorFuelCellWaterSupply)



class GeneratorFuelSupplyVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelSupplyVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelSupplyVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelSupply >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelSupply >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelSupply,std::allocator< openstudio::model::GeneratorFuelSupply > > *":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelSupply >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelSupply >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelSupply >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_clear(self)



    def swap(self, v: 'GeneratorFuelSupplyVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelSupply >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelSupplyVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelSupply >::size_type', x: 'GeneratorFuelSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelSupply >::size_type', x: 'GeneratorFuelSupply') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelSupply >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelSupply >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelSupplyVector

    __del__ = lambda self: None

GeneratorFuelSupplyVector_swigregister = _openstudiomodelgenerators.GeneratorFuelSupplyVector_swigregister

GeneratorFuelSupplyVector_swigregister(GeneratorFuelSupplyVector)



class OptionalGeneratorFuelSupply(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelSupply, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelSupply, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelSupply(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelSupply":

        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelSupply":

        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_get(self)



    def set(self, t: 'GeneratorFuelSupply') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelSupply

    __del__ = lambda self: None

OptionalGeneratorFuelSupply_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelSupply_swigregister

OptionalGeneratorFuelSupply_swigregister(OptionalGeneratorFuelSupply)



class GeneratorFuelCellVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::value_type":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCell >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCell >::difference_type') -> "std::vector< openstudio::model::GeneratorFuelCell,std::allocator< openstudio::model::GeneratorFuelCell > > *":

        return _openstudiomodelgenerators.GeneratorFuelCellVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorFuelCell >::difference_type', j: 'std::vector< openstudio::model::GeneratorFuelCell >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCell >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector___setitem__(self, *args)



    def append(self, x: 'GeneratorFuelCell') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_clear(self)



    def swap(self, v: 'GeneratorFuelCellVector') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::allocator_type":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorFuelCell >::iterator":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorFuelCell') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::value_type const &":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorFuelCell >::size_type', x: 'GeneratorFuelCell') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorFuelCell >::size_type', x: 'GeneratorFuelCell') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorFuelCell >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorFuelCell >::size_type":

        return _openstudiomodelgenerators.GeneratorFuelCellVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellVector

    __del__ = lambda self: None

GeneratorFuelCellVector_swigregister = _openstudiomodelgenerators.GeneratorFuelCellVector_swigregister

GeneratorFuelCellVector_swigregister(GeneratorFuelCellVector)



class OptionalGeneratorFuelCell(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorFuelCell, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorFuelCell, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorFuelCell(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCell___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_isNull(self)



    def get(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_get(self)



    def set(self, t: 'GeneratorFuelCell') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCell

    __del__ = lambda self: None

OptionalGeneratorFuelCell_swigregister = _openstudiomodelgenerators.OptionalGeneratorFuelCell_swigregister

OptionalGeneratorFuelCell_swigregister(OptionalGeneratorFuelCell)



class GeneratorPhotovoltaicVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorPhotovoltaicVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorPhotovoltaicVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::size_type":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::value_type":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorPhotovoltaic >::difference_type', j: 'std::vector< openstudio::model::GeneratorPhotovoltaic >::difference_type') -> "std::vector< openstudio::model::GeneratorPhotovoltaic,std::allocator< openstudio::model::GeneratorPhotovoltaic > > *":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorPhotovoltaic >::difference_type', j: 'std::vector< openstudio::model::GeneratorPhotovoltaic >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::value_type const &":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___setitem__(self, *args)



    def append(self, x: 'GeneratorPhotovoltaic') -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::size_type":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_clear(self)



    def swap(self, v: 'GeneratorPhotovoltaicVector') -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::allocator_type":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::iterator":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::iterator":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::iterator":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorPhotovoltaicVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorPhotovoltaic') -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::value_type const &":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::value_type const &":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorPhotovoltaic >::size_type', x: 'GeneratorPhotovoltaic') -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorPhotovoltaic >::size_type', x: 'GeneratorPhotovoltaic') -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorPhotovoltaic >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorPhotovoltaic >::size_type":

        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorPhotovoltaicVector

    __del__ = lambda self: None

GeneratorPhotovoltaicVector_swigregister = _openstudiomodelgenerators.GeneratorPhotovoltaicVector_swigregister

GeneratorPhotovoltaicVector_swigregister(GeneratorPhotovoltaicVector)



class OptionalGeneratorPhotovoltaic(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorPhotovoltaic, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorPhotovoltaic, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorPhotovoltaic(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorPhotovoltaic":

        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_isNull(self)



    def get(self) -> "openstudio::model::GeneratorPhotovoltaic":

        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_get(self)



    def set(self, t: 'GeneratorPhotovoltaic') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorPhotovoltaic

    __del__ = lambda self: None

OptionalGeneratorPhotovoltaic_swigregister = _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_swigregister

OptionalGeneratorPhotovoltaic_swigregister(OptionalGeneratorPhotovoltaic)



class GeneratorMicroTurbineHeatRecoveryVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorMicroTurbineHeatRecoveryVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorMicroTurbineHeatRecoveryVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::size_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::value_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::difference_type', j: 'std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::difference_type') -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery,std::allocator< openstudio::model::GeneratorMicroTurbineHeatRecovery > > *":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::difference_type', j: 'std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::value_type const &":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___setitem__(self, *args)



    def append(self, x: 'GeneratorMicroTurbineHeatRecovery') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::size_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_clear(self)



    def swap(self, v: 'GeneratorMicroTurbineHeatRecoveryVector') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::allocator_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorMicroTurbineHeatRecoveryVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorMicroTurbineHeatRecovery') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::value_type const &":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::value_type const &":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::size_type', x: 'GeneratorMicroTurbineHeatRecovery') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::size_type', x: 'GeneratorMicroTurbineHeatRecovery') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery >::size_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorMicroTurbineHeatRecoveryVector

    __del__ = lambda self: None

GeneratorMicroTurbineHeatRecoveryVector_swigregister = _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_swigregister

GeneratorMicroTurbineHeatRecoveryVector_swigregister(GeneratorMicroTurbineHeatRecoveryVector)



class OptionalGeneratorMicroTurbineHeatRecovery(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorMicroTurbineHeatRecovery, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorMicroTurbineHeatRecovery, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorMicroTurbineHeatRecovery(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorMicroTurbineHeatRecovery":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_isNull(self)



    def get(self) -> "openstudio::model::GeneratorMicroTurbineHeatRecovery":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_get(self)



    def set(self, t: 'GeneratorMicroTurbineHeatRecovery') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorMicroTurbineHeatRecovery

    __del__ = lambda self: None

OptionalGeneratorMicroTurbineHeatRecovery_swigregister = _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_swigregister

OptionalGeneratorMicroTurbineHeatRecovery_swigregister(OptionalGeneratorMicroTurbineHeatRecovery)



class GeneratorMicroTurbineVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorMicroTurbineVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorMicroTurbineVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::size_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::value_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorMicroTurbine >::difference_type', j: 'std::vector< openstudio::model::GeneratorMicroTurbine >::difference_type') -> "std::vector< openstudio::model::GeneratorMicroTurbine,std::allocator< openstudio::model::GeneratorMicroTurbine > > *":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorMicroTurbine >::difference_type', j: 'std::vector< openstudio::model::GeneratorMicroTurbine >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::value_type const &":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___setitem__(self, *args)



    def append(self, x: 'GeneratorMicroTurbine') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::size_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_clear(self)



    def swap(self, v: 'GeneratorMicroTurbineVector') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::allocator_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::iterator":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorMicroTurbineVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorMicroTurbine') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::value_type const &":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::value_type const &":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorMicroTurbine >::size_type', x: 'GeneratorMicroTurbine') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorMicroTurbine >::size_type', x: 'GeneratorMicroTurbine') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorMicroTurbine >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorMicroTurbine >::size_type":

        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorMicroTurbineVector

    __del__ = lambda self: None

GeneratorMicroTurbineVector_swigregister = _openstudiomodelgenerators.GeneratorMicroTurbineVector_swigregister

GeneratorMicroTurbineVector_swigregister(GeneratorMicroTurbineVector)



class OptionalGeneratorMicroTurbine(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorMicroTurbine, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorMicroTurbine, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorMicroTurbine(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorMicroTurbine":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_isNull(self)



    def get(self) -> "openstudio::model::GeneratorMicroTurbine":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_get(self)



    def set(self, t: 'GeneratorMicroTurbine') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorMicroTurbine

    __del__ = lambda self: None

OptionalGeneratorMicroTurbine_swigregister = _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_swigregister

OptionalGeneratorMicroTurbine_swigregister(OptionalGeneratorMicroTurbine)



class GeneratorPVWattsVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorPVWattsVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorPVWattsVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWattsVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWattsVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::size_type":

        return _openstudiomodelgenerators.GeneratorPVWattsVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::value_type":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::GeneratorPVWatts >::difference_type', j: 'std::vector< openstudio::model::GeneratorPVWatts >::difference_type') -> "std::vector< openstudio::model::GeneratorPVWatts,std::allocator< openstudio::model::GeneratorPVWatts > > *":

        return _openstudiomodelgenerators.GeneratorPVWattsVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::GeneratorPVWatts >::difference_type', j: 'std::vector< openstudio::model::GeneratorPVWatts >::difference_type') -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::GeneratorPVWatts >::value_type const &":

        return _openstudiomodelgenerators.GeneratorPVWattsVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector___setitem__(self, *args)



    def append(self, x: 'GeneratorPVWatts') -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::size_type":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_clear(self)



    def swap(self, v: 'GeneratorPVWattsVector') -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::allocator_type":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::iterator":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::iterator":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::reverse_iterator":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::GeneratorPVWatts >::iterator":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorPVWattsVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'GeneratorPVWatts') -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::value_type const &":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_front(self)



    def back(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::value_type const &":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::GeneratorPVWatts >::size_type', x: 'GeneratorPVWatts') -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::GeneratorPVWatts >::size_type', x: 'GeneratorPVWatts') -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::GeneratorPVWatts >::size_type') -> "void":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::GeneratorPVWatts >::size_type":

        return _openstudiomodelgenerators.GeneratorPVWattsVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorPVWattsVector

    __del__ = lambda self: None

GeneratorPVWattsVector_swigregister = _openstudiomodelgenerators.GeneratorPVWattsVector_swigregister

GeneratorPVWattsVector_swigregister(GeneratorPVWattsVector)



class OptionalGeneratorPVWatts(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGeneratorPVWatts, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGeneratorPVWatts, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalGeneratorPVWatts(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_reset(self)



    def __ref__(self) -> "openstudio::model::GeneratorPVWatts":

        return _openstudiomodelgenerators.OptionalGeneratorPVWatts___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_isNull(self)



    def get(self) -> "openstudio::model::GeneratorPVWatts":

        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_get(self)



    def set(self, t: 'GeneratorPVWatts') -> "void":

        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorPVWatts

    __del__ = lambda self: None

OptionalGeneratorPVWatts_swigregister = _openstudiomodelgenerators.OptionalGeneratorPVWatts_swigregister

OptionalGeneratorPVWatts_swigregister(OptionalGeneratorPVWatts)



class ElectricLoadCenterTransformerVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterTransformerVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterTransformerVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::value_type":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterTransformer >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterTransformer >::difference_type') -> "std::vector< openstudio::model::ElectricLoadCenterTransformer,std::allocator< openstudio::model::ElectricLoadCenterTransformer > > *":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterTransformer >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterTransformer >::difference_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___setitem__(self, *args)



    def append(self, x: 'ElectricLoadCenterTransformer') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_clear(self)



    def swap(self, v: 'ElectricLoadCenterTransformerVector') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::allocator_type":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterTransformerVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ElectricLoadCenterTransformer') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ElectricLoadCenterTransformer >::size_type', x: 'ElectricLoadCenterTransformer') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ElectricLoadCenterTransformer >::size_type', x: 'ElectricLoadCenterTransformer') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ElectricLoadCenterTransformer >::size_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ElectricLoadCenterTransformer >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterTransformerVector

    __del__ = lambda self: None

ElectricLoadCenterTransformerVector_swigregister = _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_swigregister

ElectricLoadCenterTransformerVector_swigregister(ElectricLoadCenterTransformerVector)



class OptionalElectricLoadCenterTransformer(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalElectricLoadCenterTransformer, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalElectricLoadCenterTransformer, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalElectricLoadCenterTransformer(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_reset(self)



    def __ref__(self) -> "openstudio::model::ElectricLoadCenterTransformer":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_isNull(self)



    def get(self) -> "openstudio::model::ElectricLoadCenterTransformer":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_get(self)



    def set(self, t: 'ElectricLoadCenterTransformer') -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterTransformer

    __del__ = lambda self: None

OptionalElectricLoadCenterTransformer_swigregister = _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_swigregister

OptionalElectricLoadCenterTransformer_swigregister(OptionalElectricLoadCenterTransformer)



class ElectricLoadCenterDistributionVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterDistributionVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterDistributionVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::value_type":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterDistribution >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterDistribution >::difference_type') -> "std::vector< openstudio::model::ElectricLoadCenterDistribution,std::allocator< openstudio::model::ElectricLoadCenterDistribution > > *":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterDistribution >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterDistribution >::difference_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___setitem__(self, *args)



    def append(self, x: 'ElectricLoadCenterDistribution') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_clear(self)



    def swap(self, v: 'ElectricLoadCenterDistributionVector') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::allocator_type":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterDistributionVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ElectricLoadCenterDistribution') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ElectricLoadCenterDistribution >::size_type', x: 'ElectricLoadCenterDistribution') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ElectricLoadCenterDistribution >::size_type', x: 'ElectricLoadCenterDistribution') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ElectricLoadCenterDistribution >::size_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ElectricLoadCenterDistribution >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterDistributionVector

    __del__ = lambda self: None

ElectricLoadCenterDistributionVector_swigregister = _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_swigregister

ElectricLoadCenterDistributionVector_swigregister(ElectricLoadCenterDistributionVector)



class OptionalElectricLoadCenterDistribution(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalElectricLoadCenterDistribution, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalElectricLoadCenterDistribution, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalElectricLoadCenterDistribution(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_reset(self)



    def __ref__(self) -> "openstudio::model::ElectricLoadCenterDistribution":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_isNull(self)



    def get(self) -> "openstudio::model::ElectricLoadCenterDistribution":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_get(self)



    def set(self, t: 'ElectricLoadCenterDistribution') -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterDistribution

    __del__ = lambda self: None

OptionalElectricLoadCenterDistribution_swigregister = _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_swigregister

OptionalElectricLoadCenterDistribution_swigregister(OptionalElectricLoadCenterDistribution)



class ElectricLoadCenterInverterLookUpTableVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterInverterLookUpTableVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterInverterLookUpTableVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::value_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::difference_type') -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable,std::allocator< openstudio::model::ElectricLoadCenterInverterLookUpTable > > *":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::difference_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___setitem__(self, *args)



    def append(self, x: 'ElectricLoadCenterInverterLookUpTable') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_clear(self)



    def swap(self, v: 'ElectricLoadCenterInverterLookUpTableVector') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::allocator_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterInverterLookUpTableVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ElectricLoadCenterInverterLookUpTable') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::size_type', x: 'ElectricLoadCenterInverterLookUpTable') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::size_type', x: 'ElectricLoadCenterInverterLookUpTable') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::size_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterLookUpTableVector

    __del__ = lambda self: None

ElectricLoadCenterInverterLookUpTableVector_swigregister = _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_swigregister

ElectricLoadCenterInverterLookUpTableVector_swigregister(ElectricLoadCenterInverterLookUpTableVector)



class OptionalElectricLoadCenterInverterLookUpTable(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalElectricLoadCenterInverterLookUpTable, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalElectricLoadCenterInverterLookUpTable, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalElectricLoadCenterInverterLookUpTable(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_reset(self)



    def __ref__(self) -> "openstudio::model::ElectricLoadCenterInverterLookUpTable":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_isNull(self)



    def get(self) -> "openstudio::model::ElectricLoadCenterInverterLookUpTable":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_get(self)



    def set(self, t: 'ElectricLoadCenterInverterLookUpTable') -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterInverterLookUpTable

    __del__ = lambda self: None

OptionalElectricLoadCenterInverterLookUpTable_swigregister = _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_swigregister

OptionalElectricLoadCenterInverterLookUpTable_swigregister(OptionalElectricLoadCenterInverterLookUpTable)



class ElectricLoadCenterInverterSimpleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterInverterSimpleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterInverterSimpleVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::value_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::difference_type') -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple,std::allocator< openstudio::model::ElectricLoadCenterInverterSimple > > *":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::difference_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___setitem__(self, *args)



    def append(self, x: 'ElectricLoadCenterInverterSimple') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_clear(self)



    def swap(self, v: 'ElectricLoadCenterInverterSimpleVector') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::allocator_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterInverterSimpleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ElectricLoadCenterInverterSimple') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::size_type', x: 'ElectricLoadCenterInverterSimple') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::size_type', x: 'ElectricLoadCenterInverterSimple') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::size_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterSimpleVector

    __del__ = lambda self: None

ElectricLoadCenterInverterSimpleVector_swigregister = _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_swigregister

ElectricLoadCenterInverterSimpleVector_swigregister(ElectricLoadCenterInverterSimpleVector)



class OptionalElectricLoadCenterInverterSimple(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalElectricLoadCenterInverterSimple, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalElectricLoadCenterInverterSimple, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalElectricLoadCenterInverterSimple(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_reset(self)



    def __ref__(self) -> "openstudio::model::ElectricLoadCenterInverterSimple":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_isNull(self)



    def get(self) -> "openstudio::model::ElectricLoadCenterInverterSimple":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_get(self)



    def set(self, t: 'ElectricLoadCenterInverterSimple') -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterInverterSimple

    __del__ = lambda self: None

OptionalElectricLoadCenterInverterSimple_swigregister = _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_swigregister

OptionalElectricLoadCenterInverterSimple_swigregister(OptionalElectricLoadCenterInverterSimple)



class ElectricLoadCenterInverterPVWattsVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterInverterPVWattsVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterInverterPVWattsVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::value_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::difference_type') -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts,std::allocator< openstudio::model::ElectricLoadCenterInverterPVWatts > > *":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::difference_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___setitem__(self, *args)



    def append(self, x: 'ElectricLoadCenterInverterPVWatts') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_clear(self)



    def swap(self, v: 'ElectricLoadCenterInverterPVWattsVector') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::allocator_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterInverterPVWattsVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ElectricLoadCenterInverterPVWatts') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::size_type', x: 'ElectricLoadCenterInverterPVWatts') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::size_type', x: 'ElectricLoadCenterInverterPVWatts') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::size_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterPVWattsVector

    __del__ = lambda self: None

ElectricLoadCenterInverterPVWattsVector_swigregister = _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_swigregister

ElectricLoadCenterInverterPVWattsVector_swigregister(ElectricLoadCenterInverterPVWattsVector)



class OptionalElectricLoadCenterInverterPVWatts(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalElectricLoadCenterInverterPVWatts, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalElectricLoadCenterInverterPVWatts, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalElectricLoadCenterInverterPVWatts(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_reset(self)



    def __ref__(self) -> "openstudio::model::ElectricLoadCenterInverterPVWatts":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_isNull(self)



    def get(self) -> "openstudio::model::ElectricLoadCenterInverterPVWatts":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_get(self)



    def set(self, t: 'ElectricLoadCenterInverterPVWatts') -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterInverterPVWatts

    __del__ = lambda self: None

OptionalElectricLoadCenterInverterPVWatts_swigregister = _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_swigregister

OptionalElectricLoadCenterInverterPVWatts_swigregister(OptionalElectricLoadCenterInverterPVWatts)



class ElectricLoadCenterStorageSimpleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterStorageSimpleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterStorageSimpleVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::value_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::difference_type') -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple,std::allocator< openstudio::model::ElectricLoadCenterStorageSimple > > *":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::difference_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___setitem__(self, *args)



    def append(self, x: 'ElectricLoadCenterStorageSimple') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_clear(self)



    def swap(self, v: 'ElectricLoadCenterStorageSimpleVector') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::allocator_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterStorageSimpleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ElectricLoadCenterStorageSimple') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::size_type', x: 'ElectricLoadCenterStorageSimple') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::size_type', x: 'ElectricLoadCenterStorageSimple') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::size_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageSimpleVector

    __del__ = lambda self: None

ElectricLoadCenterStorageSimpleVector_swigregister = _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_swigregister

ElectricLoadCenterStorageSimpleVector_swigregister(ElectricLoadCenterStorageSimpleVector)



class OptionalElectricLoadCenterStorageSimple(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalElectricLoadCenterStorageSimple, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalElectricLoadCenterStorageSimple, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalElectricLoadCenterStorageSimple(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_reset(self)



    def __ref__(self) -> "openstudio::model::ElectricLoadCenterStorageSimple":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_isNull(self)



    def get(self) -> "openstudio::model::ElectricLoadCenterStorageSimple":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_get(self)



    def set(self, t: 'ElectricLoadCenterStorageSimple') -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterStorageSimple

    __del__ = lambda self: None

OptionalElectricLoadCenterStorageSimple_swigregister = _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_swigregister

OptionalElectricLoadCenterStorageSimple_swigregister(OptionalElectricLoadCenterStorageSimple)



class ElectricLoadCenterStorageConverterVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterStorageConverterVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterStorageConverterVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::value_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::difference_type') -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter,std::allocator< openstudio::model::ElectricLoadCenterStorageConverter > > *":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::difference_type', j: 'std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::difference_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___setitem__(self, *args)



    def append(self, x: 'ElectricLoadCenterStorageConverter') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_clear(self)



    def swap(self, v: 'ElectricLoadCenterStorageConverterVector') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::allocator_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::reverse_iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::iterator":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterStorageConverterVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ElectricLoadCenterStorageConverter') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::value_type const &":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::size_type', x: 'ElectricLoadCenterStorageConverter') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::size_type', x: 'ElectricLoadCenterStorageConverter') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::size_type') -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter >::size_type":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageConverterVector

    __del__ = lambda self: None

ElectricLoadCenterStorageConverterVector_swigregister = _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_swigregister

ElectricLoadCenterStorageConverterVector_swigregister(ElectricLoadCenterStorageConverterVector)



class OptionalElectricLoadCenterStorageConverter(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalElectricLoadCenterStorageConverter, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalElectricLoadCenterStorageConverter, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalElectricLoadCenterStorageConverter(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_reset(self)



    def __ref__(self) -> "openstudio::model::ElectricLoadCenterStorageConverter":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_isNull(self)



    def get(self) -> "openstudio::model::ElectricLoadCenterStorageConverter":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_get(self)



    def set(self, t: 'ElectricLoadCenterStorageConverter') -> "void":

        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterStorageConverter

    __del__ = lambda self: None

OptionalElectricLoadCenterStorageConverter_swigregister = _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_swigregister

OptionalElectricLoadCenterStorageConverter_swigregister(OptionalElectricLoadCenterStorageConverter)



class PhotovoltaicPerformanceEquivalentOneDiodeVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotovoltaicPerformanceEquivalentOneDiodeVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PhotovoltaicPerformanceEquivalentOneDiodeVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::size_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::value_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::difference_type', j: 'std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::difference_type') -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode,std::allocator< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode > > *":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::difference_type', j: 'std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::difference_type') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::value_type const &":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___setitem__(self, *args)



    def append(self, x: 'PhotovoltaicPerformanceEquivalentOneDiode') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::size_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_clear(self)



    def swap(self, v: 'PhotovoltaicPerformanceEquivalentOneDiodeVector') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::allocator_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::reverse_iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::reverse_iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_PhotovoltaicPerformanceEquivalentOneDiodeVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PhotovoltaicPerformanceEquivalentOneDiode') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::value_type const &":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_front(self)



    def back(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::value_type const &":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::size_type', x: 'PhotovoltaicPerformanceEquivalentOneDiode') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::size_type', x: 'PhotovoltaicPerformanceEquivalentOneDiode') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::size_type') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >::size_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceEquivalentOneDiodeVector

    __del__ = lambda self: None

PhotovoltaicPerformanceEquivalentOneDiodeVector_swigregister = _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_swigregister

PhotovoltaicPerformanceEquivalentOneDiodeVector_swigregister(PhotovoltaicPerformanceEquivalentOneDiodeVector)



class OptionalPhotovoltaicPerformanceEquivalentOneDiode(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPhotovoltaicPerformanceEquivalentOneDiode, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPhotovoltaicPerformanceEquivalentOneDiode, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalPhotovoltaicPerformanceEquivalentOneDiode(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_reset(self)



    def __ref__(self) -> "openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_isNull(self)



    def get(self) -> "openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_get(self)



    def set(self, t: 'PhotovoltaicPerformanceEquivalentOneDiode') -> "void":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalPhotovoltaicPerformanceEquivalentOneDiode

    __del__ = lambda self: None

OptionalPhotovoltaicPerformanceEquivalentOneDiode_swigregister = _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_swigregister

OptionalPhotovoltaicPerformanceEquivalentOneDiode_swigregister(OptionalPhotovoltaicPerformanceEquivalentOneDiode)



class PhotovoltaicPerformanceSimpleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotovoltaicPerformanceSimpleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PhotovoltaicPerformanceSimpleVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::size_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::value_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::difference_type', j: 'std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::difference_type') -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple,std::allocator< openstudio::model::PhotovoltaicPerformanceSimple > > *":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::difference_type', j: 'std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::difference_type') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::value_type const &":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___setitem__(self, *args)



    def append(self, x: 'PhotovoltaicPerformanceSimple') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::size_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_clear(self)



    def swap(self, v: 'PhotovoltaicPerformanceSimpleVector') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::allocator_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::reverse_iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::reverse_iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::iterator":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_PhotovoltaicPerformanceSimpleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PhotovoltaicPerformanceSimple') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::value_type const &":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_front(self)



    def back(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::value_type const &":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::size_type', x: 'PhotovoltaicPerformanceSimple') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::size_type', x: 'PhotovoltaicPerformanceSimple') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::size_type') -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple >::size_type":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_capacity(self)

    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceSimpleVector

    __del__ = lambda self: None

PhotovoltaicPerformanceSimpleVector_swigregister = _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_swigregister

PhotovoltaicPerformanceSimpleVector_swigregister(PhotovoltaicPerformanceSimpleVector)



class OptionalPhotovoltaicPerformanceSimple(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPhotovoltaicPerformanceSimple, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPhotovoltaicPerformanceSimple, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_OptionalPhotovoltaicPerformanceSimple(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_reset(self)



    def __ref__(self) -> "openstudio::model::PhotovoltaicPerformanceSimple":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_isNull(self)



    def get(self) -> "openstudio::model::PhotovoltaicPerformanceSimple":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_get(self)



    def set(self, t: 'PhotovoltaicPerformanceSimple') -> "void":

        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_set(self, t)

    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalPhotovoltaicPerformanceSimple

    __del__ = lambda self: None

OptionalPhotovoltaicPerformanceSimple_swigregister = _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_swigregister

OptionalPhotovoltaicPerformanceSimple_swigregister(OptionalPhotovoltaicPerformanceSimple)



class PhotovoltaicPerformance(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotovoltaicPerformance, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PhotovoltaicPerformance, name)

    __repr__ = _swig_repr



    def __init__(self, type: 'IddObjectType', model: 'Model'):

        this = _openstudiomodelgenerators.new_PhotovoltaicPerformance(type, model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformance

    __del__ = lambda self: None

PhotovoltaicPerformance_swigregister = _openstudiomodelgenerators.PhotovoltaicPerformance_swigregister

PhotovoltaicPerformance_swigregister(PhotovoltaicPerformance)





def toPhotovoltaicPerformance(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PhotovoltaicPerformance >":

    return _openstudiomodelgenerators.toPhotovoltaicPerformance(idfObject)

toPhotovoltaicPerformance = _openstudiomodelgenerators.toPhotovoltaicPerformance



def getPhotovoltaicPerformance(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PhotovoltaicPerformance >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformance(t_model, t_handle)

getPhotovoltaicPerformance = _openstudiomodelgenerators.getPhotovoltaicPerformance



def getPhotovoltaicPerformances(t_model: 'Model') -> "std::vector< openstudio::model::PhotovoltaicPerformance,std::allocator< openstudio::model::PhotovoltaicPerformance > >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformances(t_model)

getPhotovoltaicPerformances = _openstudiomodelgenerators.getPhotovoltaicPerformances



def getPhotovoltaicPerformanceByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PhotovoltaicPerformance >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformanceByName(t_model, t_name)

getPhotovoltaicPerformanceByName = _openstudiomodelgenerators.getPhotovoltaicPerformanceByName



def getPhotovoltaicPerformancesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PhotovoltaicPerformance,std::allocator< openstudio::model::PhotovoltaicPerformance > >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformancesByName(t_model, t_name, t_exactMatch)

getPhotovoltaicPerformancesByName = _openstudiomodelgenerators.getPhotovoltaicPerformancesByName

class Generator(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, Generator, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, Generator, name)

    __repr__ = _swig_repr



    def __init__(self, type: 'IddObjectType', model: 'Model'):

        this = _openstudiomodelgenerators.new_Generator(type, model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_Generator

    __del__ = lambda self: None



    def generatorObjectType(self) -> "std::string":

        return _openstudiomodelgenerators.Generator_generatorObjectType(self)



    def ratedElectricPowerOutput(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.Generator_ratedElectricPowerOutput(self)



    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.Generator_availabilitySchedule(self)



    def ratedThermaltoElectricalPowerRatio(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.Generator_ratedThermaltoElectricalPowerRatio(self)



    def electricLoadCenterDistribution(self) -> "boost::optional< openstudio::model::ElectricLoadCenterDistribution >":

        return _openstudiomodelgenerators.Generator_electricLoadCenterDistribution(self)

Generator_swigregister = _openstudiomodelgenerators.Generator_swigregister

Generator_swigregister(Generator)





def toGenerator(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Generator >":

    return _openstudiomodelgenerators.toGenerator(idfObject)

toGenerator = _openstudiomodelgenerators.toGenerator



def getGenerator(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Generator >":

    return _openstudiomodelgenerators.getGenerator(t_model, t_handle)

getGenerator = _openstudiomodelgenerators.getGenerator



def getGenerators(t_model: 'Model') -> "std::vector< openstudio::model::Generator,std::allocator< openstudio::model::Generator > >":

    return _openstudiomodelgenerators.getGenerators(t_model)

getGenerators = _openstudiomodelgenerators.getGenerators



def getGeneratorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Generator >":

    return _openstudiomodelgenerators.getGeneratorByName(t_model, t_name)

getGeneratorByName = _openstudiomodelgenerators.getGeneratorByName



def getGeneratorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Generator,std::allocator< openstudio::model::Generator > >":

    return _openstudiomodelgenerators.getGeneratorsByName(t_model, t_name, t_exactMatch)

getGeneratorsByName = _openstudiomodelgenerators.getGeneratorsByName

class Inverter(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, Inverter, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, Inverter, name)

    __repr__ = _swig_repr



    def __init__(self, type: 'IddObjectType', model: 'Model'):

        this = _openstudiomodelgenerators.new_Inverter(type, model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_Inverter

    __del__ = lambda self: None



    def electricLoadCenterDistribution(self) -> "boost::optional< openstudio::model::ElectricLoadCenterDistribution >":

        return _openstudiomodelgenerators.Inverter_electricLoadCenterDistribution(self)



    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelgenerators.Inverter_thermalZone(self)



    def setThermalZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelgenerators.Inverter_setThermalZone(self, thermalZone)



    def resetThermalZone(self) -> "void":

        return _openstudiomodelgenerators.Inverter_resetThermalZone(self)

Inverter_swigregister = _openstudiomodelgenerators.Inverter_swigregister

Inverter_swigregister(Inverter)





def toInverter(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Inverter >":

    return _openstudiomodelgenerators.toInverter(idfObject)

toInverter = _openstudiomodelgenerators.toInverter



def getInverter(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Inverter >":

    return _openstudiomodelgenerators.getInverter(t_model, t_handle)

getInverter = _openstudiomodelgenerators.getInverter



def getInverters(t_model: 'Model') -> "std::vector< openstudio::model::Inverter,std::allocator< openstudio::model::Inverter > >":

    return _openstudiomodelgenerators.getInverters(t_model)

getInverters = _openstudiomodelgenerators.getInverters



def getInverterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Inverter >":

    return _openstudiomodelgenerators.getInverterByName(t_model, t_name)

getInverterByName = _openstudiomodelgenerators.getInverterByName



def getInvertersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Inverter,std::allocator< openstudio::model::Inverter > >":

    return _openstudiomodelgenerators.getInvertersByName(t_model, t_name, t_exactMatch)

getInvertersByName = _openstudiomodelgenerators.getInvertersByName

class ElectricalStorage(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricalStorage, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricalStorage, name)

    __repr__ = _swig_repr



    def __init__(self, type: 'IddObjectType', model: 'Model'):

        this = _openstudiomodelgenerators.new_ElectricalStorage(type, model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricalStorage

    __del__ = lambda self: None



    def electricLoadCenterDistribution(self) -> "boost::optional< openstudio::model::ElectricLoadCenterDistribution >":

        return _openstudiomodelgenerators.ElectricalStorage_electricLoadCenterDistribution(self)



    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelgenerators.ElectricalStorage_thermalZone(self)



    def setThermalZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelgenerators.ElectricalStorage_setThermalZone(self, thermalZone)



    def resetThermalZone(self) -> "void":

        return _openstudiomodelgenerators.ElectricalStorage_resetThermalZone(self)

ElectricalStorage_swigregister = _openstudiomodelgenerators.ElectricalStorage_swigregister

ElectricalStorage_swigregister(ElectricalStorage)





def toElectricalStorage(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ElectricalStorage >":

    return _openstudiomodelgenerators.toElectricalStorage(idfObject)

toElectricalStorage = _openstudiomodelgenerators.toElectricalStorage



def getElectricalStorage(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ElectricalStorage >":

    return _openstudiomodelgenerators.getElectricalStorage(t_model, t_handle)

getElectricalStorage = _openstudiomodelgenerators.getElectricalStorage



def getElectricalStorages(t_model: 'Model') -> "std::vector< openstudio::model::ElectricalStorage,std::allocator< openstudio::model::ElectricalStorage > >":

    return _openstudiomodelgenerators.getElectricalStorages(t_model)

getElectricalStorages = _openstudiomodelgenerators.getElectricalStorages



def getElectricalStorageByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ElectricalStorage >":

    return _openstudiomodelgenerators.getElectricalStorageByName(t_model, t_name)

getElectricalStorageByName = _openstudiomodelgenerators.getElectricalStorageByName



def getElectricalStoragesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ElectricalStorage,std::allocator< openstudio::model::ElectricalStorage > >":

    return _openstudiomodelgenerators.getElectricalStoragesByName(t_model, t_name, t_exactMatch)

getElectricalStoragesByName = _openstudiomodelgenerators.getElectricalStoragesByName

class GeneratorFuelCellAirSupply(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellAirSupply, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellAirSupply, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellAirSupply(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellAirSupply

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellAirSupply_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellAirSupply_iddObjectType)

    __swig_getmethods__["airSupplyRateCalculationModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyRateCalculationModeValues

    if _newclass:

        airSupplyRateCalculationModeValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyRateCalculationModeValues)

    __swig_getmethods__["airIntakeHeatRecoveryModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airIntakeHeatRecoveryModeValues

    if _newclass:

        airIntakeHeatRecoveryModeValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellAirSupply_airIntakeHeatRecoveryModeValues)

    __swig_getmethods__["airSupplyConstituentModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyConstituentModeValues

    if _newclass:

        airSupplyConstituentModeValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyConstituentModeValues)



    def addConstituent(self, name: 'std::string', molarFraction: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_addConstituent(self, name, molarFraction)



    def removeConstituent(self, groupIndex: 'int') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_removeConstituent(self, groupIndex)



    def removeAllConstituents(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_removeAllConstituents(self)



    def constituents(self) -> "std::vector< std::pair< std::string,double >,std::allocator< std::pair< std::string,double > > >":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_constituents(self)



    def airInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airInletNode(self)



    def blowerPowerCurve(self) -> "boost::optional< openstudio::model::CurveCubic >":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_blowerPowerCurve(self)



    def blowerHeatLossFactor(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_blowerHeatLossFactor(self)



    def airSupplyRateCalculationMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyRateCalculationMode(self)



    def stoichiometricRatio(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_stoichiometricRatio(self)



    def airRateFunctionofElectricPowerCurve(self) -> "boost::optional< openstudio::model::CurveQuadratic >":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airRateFunctionofElectricPowerCurve(self)



    def airRateAirTemperatureCoefficient(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airRateAirTemperatureCoefficient(self)



    def airRateFunctionofFuelRateCurve(self) -> "boost::optional< openstudio::model::CurveQuadratic >":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airRateFunctionofFuelRateCurve(self)



    def airIntakeHeatRecoveryMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airIntakeHeatRecoveryMode(self)



    def airSupplyConstituentMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyConstituentMode(self)



    def numberofUserDefinedConstituents(self) -> "boost::optional< unsigned int >":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_numberofUserDefinedConstituents(self)



    def fuelCell(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_fuelCell(self)



    def setAirInletNode(self, connection: 'Node') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirInletNode(self, connection)



    def resetAirInletNode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetAirInletNode(self)



    def setBlowerPowerCurve(self, cubicCurves: 'CurveCubic') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setBlowerPowerCurve(self, cubicCurves)



    def resetBlowerPowerCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetBlowerPowerCurve(self)



    def setBlowerHeatLossFactor(self, blowerHeatLossFactor: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setBlowerHeatLossFactor(self, blowerHeatLossFactor)



    def resetBlowerHeatLossFactor(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetBlowerHeatLossFactor(self)



    def setAirSupplyRateCalculationMode(self, airSupplyRateCalculationMode: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirSupplyRateCalculationMode(self, airSupplyRateCalculationMode)



    def setStoichiometricRatio(self, stoichiometricRatio: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setStoichiometricRatio(self, stoichiometricRatio)



    def resetStoichiometricRatio(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetStoichiometricRatio(self)



    def setAirRateFunctionofElectricPowerCurve(self, quadraticCurves: 'CurveQuadratic') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirRateFunctionofElectricPowerCurve(self, quadraticCurves)



    def resetAirRateFunctionofElectricPowerCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetAirRateFunctionofElectricPowerCurve(self)



    def setAirRateAirTemperatureCoefficient(self, airRateAirTemperatureCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirRateAirTemperatureCoefficient(self, airRateAirTemperatureCoefficient)



    def resetAirRateAirTemperatureCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetAirRateAirTemperatureCoefficient(self)



    def setAirRateFunctionofFuelRateCurve(self, quadraticCurves: 'CurveQuadratic') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirRateFunctionofFuelRateCurve(self, quadraticCurves)



    def resetAirRateFunctionofFuelRateCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetAirRateFunctionofFuelRateCurve(self)



    def setAirIntakeHeatRecoveryMode(self, airIntakeHeatRecoveryMode: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirIntakeHeatRecoveryMode(self, airIntakeHeatRecoveryMode)



    def setAirSupplyConstituentMode(self, airSupplyConstituentMode: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirSupplyConstituentMode(self, airSupplyConstituentMode)



    def setNumberofUserDefinedConstituents(self, numberofUserDefinedConstituents: 'unsigned int') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setNumberofUserDefinedConstituents(self, numberofUserDefinedConstituents)



    def resetNumberofUserDefinedConstituents(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetNumberofUserDefinedConstituents(self)

GeneratorFuelCellAirSupply_swigregister = _openstudiomodelgenerators.GeneratorFuelCellAirSupply_swigregister

GeneratorFuelCellAirSupply_swigregister(GeneratorFuelCellAirSupply)



def GeneratorFuelCellAirSupply_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_iddObjectType()

GeneratorFuelCellAirSupply_iddObjectType = _openstudiomodelgenerators.GeneratorFuelCellAirSupply_iddObjectType



def GeneratorFuelCellAirSupply_airSupplyRateCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyRateCalculationModeValues()

GeneratorFuelCellAirSupply_airSupplyRateCalculationModeValues = _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyRateCalculationModeValues



def GeneratorFuelCellAirSupply_airIntakeHeatRecoveryModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airIntakeHeatRecoveryModeValues()

GeneratorFuelCellAirSupply_airIntakeHeatRecoveryModeValues = _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airIntakeHeatRecoveryModeValues



def GeneratorFuelCellAirSupply_airSupplyConstituentModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyConstituentModeValues()

GeneratorFuelCellAirSupply_airSupplyConstituentModeValues = _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyConstituentModeValues





def toGeneratorFuelCellAirSupply(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelCellAirSupply >":

    return _openstudiomodelgenerators.toGeneratorFuelCellAirSupply(idfObject)

toGeneratorFuelCellAirSupply = _openstudiomodelgenerators.toGeneratorFuelCellAirSupply



def getGeneratorFuelCellAirSupply(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelCellAirSupply >":

    return _openstudiomodelgenerators.getGeneratorFuelCellAirSupply(t_model, t_handle)

getGeneratorFuelCellAirSupply = _openstudiomodelgenerators.getGeneratorFuelCellAirSupply



def getGeneratorFuelCellAirSupplys(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply,std::allocator< openstudio::model::GeneratorFuelCellAirSupply > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellAirSupplys(t_model)

getGeneratorFuelCellAirSupplys = _openstudiomodelgenerators.getGeneratorFuelCellAirSupplys



def getGeneratorFuelCellAirSupplyByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelCellAirSupply >":

    return _openstudiomodelgenerators.getGeneratorFuelCellAirSupplyByName(t_model, t_name)

getGeneratorFuelCellAirSupplyByName = _openstudiomodelgenerators.getGeneratorFuelCellAirSupplyByName



def getGeneratorFuelCellAirSupplysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelCellAirSupply,std::allocator< openstudio::model::GeneratorFuelCellAirSupply > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellAirSupplysByName(t_model, t_name, t_exactMatch)

getGeneratorFuelCellAirSupplysByName = _openstudiomodelgenerators.getGeneratorFuelCellAirSupplysByName

class GeneratorFuelCellAuxiliaryHeater(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellAuxiliaryHeater, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellAuxiliaryHeater, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellAuxiliaryHeater(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellAuxiliaryHeater

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_iddObjectType)

    __swig_getmethods__["skinLossDestinationValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_skinLossDestinationValues

    if _newclass:

        skinLossDestinationValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_skinLossDestinationValues)

    __swig_getmethods__["heatingCapacityUnitsValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_heatingCapacityUnitsValues

    if _newclass:

        heatingCapacityUnitsValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_heatingCapacityUnitsValues)



    def excessAirRatio(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_excessAirRatio(self)



    def ancillaryPowerConstantTerm(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_ancillaryPowerConstantTerm(self)



    def ancillaryPowerLinearTerm(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_ancillaryPowerLinearTerm(self)



    def skinLossUFactorTimesAreaValue(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_skinLossUFactorTimesAreaValue(self)



    def skinLossDestination(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_skinLossDestination(self)



    def zonetoReceiveSkinLosses(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_zonetoReceiveSkinLosses(self)



    def heatingCapacityUnits(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_heatingCapacityUnits(self)



    def maximumHeatingCapacityinWatts(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_maximumHeatingCapacityinWatts(self)



    def minimumHeatingCapacityinWatts(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_minimumHeatingCapacityinWatts(self)



    def maximumHeatingCapacityinKmolperSecond(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_maximumHeatingCapacityinKmolperSecond(self)



    def minimumHeatingCapacityinKmolperSecond(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_minimumHeatingCapacityinKmolperSecond(self)



    def fuelCell(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_fuelCell(self)



    def setExcessAirRatio(self, excessAirRatio: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setExcessAirRatio(self, excessAirRatio)



    def resetExcessAirRatio(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetExcessAirRatio(self)



    def setAncillaryPowerConstantTerm(self, ancillaryPowerConstantTerm: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setAncillaryPowerConstantTerm(self, ancillaryPowerConstantTerm)



    def resetAncillaryPowerConstantTerm(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetAncillaryPowerConstantTerm(self)



    def setAncillaryPowerLinearTerm(self, ancillaryPowerLinearTerm: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setAncillaryPowerLinearTerm(self, ancillaryPowerLinearTerm)



    def resetAncillaryPowerLinearTerm(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetAncillaryPowerLinearTerm(self)



    def setSkinLossUFactorTimesAreaValue(self, skinLossUFactorTimesAreaValue: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setSkinLossUFactorTimesAreaValue(self, skinLossUFactorTimesAreaValue)



    def resetSkinLossUFactorTimesAreaValue(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetSkinLossUFactorTimesAreaValue(self)



    def setSkinLossDestination(self, skinLossDestination: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setSkinLossDestination(self, skinLossDestination)



    def resetSkinLossDestination(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetSkinLossDestination(self)



    def setZonetoReceiveSkinLosses(self, zone: 'ThermalZone') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setZonetoReceiveSkinLosses(self, zone)



    def resetZonetoReceiveSkinLosses(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetZonetoReceiveSkinLosses(self)



    def setHeatingCapacityUnits(self, heatingCapacityUnits: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setHeatingCapacityUnits(self, heatingCapacityUnits)



    def resetHeatingCapacityUnits(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetHeatingCapacityUnits(self)



    def setMaximumHeatingCapacityinWatts(self, maximumHeatingCapacityinWatts: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setMaximumHeatingCapacityinWatts(self, maximumHeatingCapacityinWatts)



    def resetMaximumHeatingCapacityinWatts(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetMaximumHeatingCapacityinWatts(self)



    def setMinimumHeatingCapacityinWatts(self, minimumHeatingCapacityinWatts: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setMinimumHeatingCapacityinWatts(self, minimumHeatingCapacityinWatts)



    def resetMinimumHeatingCapacityinWatts(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetMinimumHeatingCapacityinWatts(self)



    def setMaximumHeatingCapacityinKmolperSecond(self, maximumHeatingCapacityinKmolperSecond: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setMaximumHeatingCapacityinKmolperSecond(self, maximumHeatingCapacityinKmolperSecond)



    def resetMaximumHeatingCapacityinKmolperSecond(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetMaximumHeatingCapacityinKmolperSecond(self)



    def setMinimumHeatingCapacityinKmolperSecond(self, minimumHeatingCapacityinKmolperSecond: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setMinimumHeatingCapacityinKmolperSecond(self, minimumHeatingCapacityinKmolperSecond)



    def resetMinimumHeatingCapacityinKmolperSecond(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetMinimumHeatingCapacityinKmolperSecond(self)

GeneratorFuelCellAuxiliaryHeater_swigregister = _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_swigregister

GeneratorFuelCellAuxiliaryHeater_swigregister(GeneratorFuelCellAuxiliaryHeater)



def GeneratorFuelCellAuxiliaryHeater_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_iddObjectType()

GeneratorFuelCellAuxiliaryHeater_iddObjectType = _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_iddObjectType



def GeneratorFuelCellAuxiliaryHeater_skinLossDestinationValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_skinLossDestinationValues()

GeneratorFuelCellAuxiliaryHeater_skinLossDestinationValues = _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_skinLossDestinationValues



def GeneratorFuelCellAuxiliaryHeater_heatingCapacityUnitsValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_heatingCapacityUnitsValues()

GeneratorFuelCellAuxiliaryHeater_heatingCapacityUnitsValues = _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_heatingCapacityUnitsValues





def toGeneratorFuelCellAuxiliaryHeater(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelCellAuxiliaryHeater >":

    return _openstudiomodelgenerators.toGeneratorFuelCellAuxiliaryHeater(idfObject)

toGeneratorFuelCellAuxiliaryHeater = _openstudiomodelgenerators.toGeneratorFuelCellAuxiliaryHeater



def getGeneratorFuelCellAuxiliaryHeater(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelCellAuxiliaryHeater >":

    return _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeater(t_model, t_handle)

getGeneratorFuelCellAuxiliaryHeater = _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeater



def getGeneratorFuelCellAuxiliaryHeaters(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater,std::allocator< openstudio::model::GeneratorFuelCellAuxiliaryHeater > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeaters(t_model)

getGeneratorFuelCellAuxiliaryHeaters = _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeaters



def getGeneratorFuelCellAuxiliaryHeaterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelCellAuxiliaryHeater >":

    return _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeaterByName(t_model, t_name)

getGeneratorFuelCellAuxiliaryHeaterByName = _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeaterByName



def getGeneratorFuelCellAuxiliaryHeatersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelCellAuxiliaryHeater,std::allocator< openstudio::model::GeneratorFuelCellAuxiliaryHeater > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeatersByName(t_model, t_name, t_exactMatch)

getGeneratorFuelCellAuxiliaryHeatersByName = _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeatersByName

class GeneratorFuelCellElectricalStorage(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellElectricalStorage, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellElectricalStorage, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellElectricalStorage(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellElectricalStorage

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_iddObjectType)

    __swig_getmethods__["choiceofModelValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_choiceofModelValues

    if _newclass:

        choiceofModelValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_choiceofModelValues)



    def choiceofModel(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_choiceofModel(self)



    def nominalChargingEnergeticEfficiency(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_nominalChargingEnergeticEfficiency(self)



    def nominalDischargingEnergeticEfficiency(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_nominalDischargingEnergeticEfficiency(self)



    def simpleMaximumCapacity(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_simpleMaximumCapacity(self)



    def simpleMaximumPowerDraw(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_simpleMaximumPowerDraw(self)



    def simpleMaximumPowerStore(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_simpleMaximumPowerStore(self)



    def initialChargeState(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_initialChargeState(self)



    def setChoiceofModel(self, choiceofModel: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setChoiceofModel(self, choiceofModel)



    def resetChoiceofModel(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetChoiceofModel(self)



    def setNominalChargingEnergeticEfficiency(self, nominalChargingEnergeticEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setNominalChargingEnergeticEfficiency(self, nominalChargingEnergeticEfficiency)



    def resetNominalChargingEnergeticEfficiency(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetNominalChargingEnergeticEfficiency(self)



    def setNominalDischargingEnergeticEfficiency(self, nominalDischargingEnergeticEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setNominalDischargingEnergeticEfficiency(self, nominalDischargingEnergeticEfficiency)



    def resetNominalDischargingEnergeticEfficiency(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetNominalDischargingEnergeticEfficiency(self)



    def setSimpleMaximumCapacity(self, simpleMaximumCapacity: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setSimpleMaximumCapacity(self, simpleMaximumCapacity)



    def resetSimpleMaximumCapacity(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetSimpleMaximumCapacity(self)



    def setSimpleMaximumPowerDraw(self, simpleMaximumPowerDraw: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setSimpleMaximumPowerDraw(self, simpleMaximumPowerDraw)



    def resetSimpleMaximumPowerDraw(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetSimpleMaximumPowerDraw(self)



    def setSimpleMaximumPowerStore(self, simpleMaximumPowerStore: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setSimpleMaximumPowerStore(self, simpleMaximumPowerStore)



    def resetSimpleMaximumPowerStore(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetSimpleMaximumPowerStore(self)



    def setInitialChargeState(self, initialChargeState: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setInitialChargeState(self, initialChargeState)



    def resetInitialChargeState(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetInitialChargeState(self)

GeneratorFuelCellElectricalStorage_swigregister = _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_swigregister

GeneratorFuelCellElectricalStorage_swigregister(GeneratorFuelCellElectricalStorage)



def GeneratorFuelCellElectricalStorage_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_iddObjectType()

GeneratorFuelCellElectricalStorage_iddObjectType = _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_iddObjectType



def GeneratorFuelCellElectricalStorage_choiceofModelValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_choiceofModelValues()

GeneratorFuelCellElectricalStorage_choiceofModelValues = _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_choiceofModelValues





def toGeneratorFuelCellElectricalStorage(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelCellElectricalStorage >":

    return _openstudiomodelgenerators.toGeneratorFuelCellElectricalStorage(idfObject)

toGeneratorFuelCellElectricalStorage = _openstudiomodelgenerators.toGeneratorFuelCellElectricalStorage



def getGeneratorFuelCellElectricalStorage(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelCellElectricalStorage >":

    return _openstudiomodelgenerators.getGeneratorFuelCellElectricalStorage(t_model, t_handle)

getGeneratorFuelCellElectricalStorage = _openstudiomodelgenerators.getGeneratorFuelCellElectricalStorage



def getGeneratorFuelCellElectricalStorages(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage,std::allocator< openstudio::model::GeneratorFuelCellElectricalStorage > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellElectricalStorages(t_model)

getGeneratorFuelCellElectricalStorages = _openstudiomodelgenerators.getGeneratorFuelCellElectricalStorages



def getGeneratorFuelCellElectricalStorageByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelCellElectricalStorage >":

    return _openstudiomodelgenerators.getGeneratorFuelCellElectricalStorageByName(t_model, t_name)

getGeneratorFuelCellElectricalStorageByName = _openstudiomodelgenerators.getGeneratorFuelCellElectricalStorageByName



def getGeneratorFuelCellElectricalStoragesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelCellElectricalStorage,std::allocator< openstudio::model::GeneratorFuelCellElectricalStorage > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellElectricalStoragesByName(t_model, t_name, t_exactMatch)

getGeneratorFuelCellElectricalStoragesByName = _openstudiomodelgenerators.getGeneratorFuelCellElectricalStoragesByName

class GeneratorFuelCellExhaustGasToWaterHeatExchanger(openstudiomodelhvac.StraightComponent):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelhvac.StraightComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellExhaustGasToWaterHeatExchanger, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelhvac.StraightComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellExhaustGasToWaterHeatExchanger, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellExhaustGasToWaterHeatExchanger(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellExhaustGasToWaterHeatExchanger

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_iddObjectType)

    __swig_getmethods__["heatExchangerCalculationMethodValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatExchangerCalculationMethodValues

    if _newclass:

        heatExchangerCalculationMethodValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatExchangerCalculationMethodValues)



    def heatRecoveryWaterMaximumFlowRate(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatRecoveryWaterMaximumFlowRate(self)



    def exhaustOutletAirNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_exhaustOutletAirNode(self)



    def heatExchangerCalculationMethod(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatExchangerCalculationMethod(self)



    def method1HeatExchangerEffectiveness(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method1HeatExchangerEffectiveness(self)



    def method2Parameterhxs0(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs0(self)



    def method2Parameterhxs1(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs1(self)



    def method2Parameterhxs2(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs2(self)



    def method2Parameterhxs3(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs3(self)



    def method2Parameterhxs4(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs4(self)



    def method3h0GasCoefficient(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3h0GasCoefficient(self)



    def method3NdotGasRefCoefficient(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3NdotGasRefCoefficient(self)



    def method3nCoefficient(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3nCoefficient(self)



    def method3GasArea(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3GasArea(self)



    def method3h0WaterCoefficient(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3h0WaterCoefficient(self)



    def method3NdotWaterrefCoefficient(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3NdotWaterrefCoefficient(self)



    def method3mCoefficient(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3mCoefficient(self)



    def method3WaterArea(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3WaterArea(self)



    def method3FAdjustmentFactor(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3FAdjustmentFactor(self)



    def method4hxl1Coefficient(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method4hxl1Coefficient(self)



    def method4hxl2Coefficient(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method4hxl2Coefficient(self)



    def method4CondensationThreshold(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method4CondensationThreshold(self)



    def fuelCell(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_fuelCell(self)



    def setHeatRecoveryWaterMaximumFlowRate(self, heatRecoveryWaterMaximumFlowRate: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setHeatRecoveryWaterMaximumFlowRate(self, heatRecoveryWaterMaximumFlowRate)



    def resetHeatRecoveryWaterMaximumFlowRate(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetHeatRecoveryWaterMaximumFlowRate(self)



    def setExhaustOutletAirNode(self, node: 'Node') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setExhaustOutletAirNode(self, node)



    def resetExhaustOutletAirNode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetExhaustOutletAirNode(self)



    def setHeatExchangerCalculationMethod(self, heatExchangerCalculationMethod: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setHeatExchangerCalculationMethod(self, heatExchangerCalculationMethod)



    def resetHeatExchangerCalculationMethod(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetHeatExchangerCalculationMethod(self)



    def setMethod1HeatExchangerEffectiveness(self, method1HeatExchangerEffectiveness: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod1HeatExchangerEffectiveness(self, method1HeatExchangerEffectiveness)



    def resetMethod1HeatExchangerEffectiveness(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod1HeatExchangerEffectiveness(self)



    def setMethod2Parameterhxs0(self, method2Parameterhxs0: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs0(self, method2Parameterhxs0)



    def resetMethod2Parameterhxs0(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs0(self)



    def setMethod2Parameterhxs1(self, method2Parameterhxs1: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs1(self, method2Parameterhxs1)



    def resetMethod2Parameterhxs1(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs1(self)



    def setMethod2Parameterhxs2(self, method2Parameterhxs2: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs2(self, method2Parameterhxs2)



    def resetMethod2Parameterhxs2(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs2(self)



    def setMethod2Parameterhxs3(self, method2Parameterhxs3: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs3(self, method2Parameterhxs3)



    def resetMethod2Parameterhxs3(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs3(self)



    def setMethod2Parameterhxs4(self, method2Parameterhxs4: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs4(self, method2Parameterhxs4)



    def resetMethod2Parameterhxs4(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs4(self)



    def setMethod3h0GasCoefficient(self, method3h0GasCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3h0GasCoefficient(self, method3h0GasCoefficient)



    def resetMethod3h0GasCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3h0GasCoefficient(self)



    def setMethod3NdotGasRefCoefficient(self, method3NdotGasRefCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3NdotGasRefCoefficient(self, method3NdotGasRefCoefficient)



    def resetMethod3NdotGasRefCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3NdotGasRefCoefficient(self)



    def setMethod3nCoefficient(self, method3nCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3nCoefficient(self, method3nCoefficient)



    def resetMethod3nCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3nCoefficient(self)



    def setMethod3GasArea(self, method3GasArea: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3GasArea(self, method3GasArea)



    def resetMethod3GasArea(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3GasArea(self)



    def setMethod3h0WaterCoefficient(self, method3h0WaterCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3h0WaterCoefficient(self, method3h0WaterCoefficient)



    def resetMethod3h0WaterCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3h0WaterCoefficient(self)



    def setMethod3NdotWaterrefCoefficient(self, method3NdotWaterrefCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3NdotWaterrefCoefficient(self, method3NdotWaterrefCoefficient)



    def resetMethod3NdotWaterrefCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3NdotWaterrefCoefficient(self)



    def setMethod3mCoefficient(self, method3mCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3mCoefficient(self, method3mCoefficient)



    def resetMethod3mCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3mCoefficient(self)



    def setMethod3WaterArea(self, method3WaterArea: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3WaterArea(self, method3WaterArea)



    def resetMethod3WaterArea(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3WaterArea(self)



    def setMethod3FAdjustmentFactor(self, method3FAdjustmentFactor: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3FAdjustmentFactor(self, method3FAdjustmentFactor)



    def resetMethod3FAdjustmentFactor(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3FAdjustmentFactor(self)



    def setMethod4hxl1Coefficient(self, method4hxl1Coefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod4hxl1Coefficient(self, method4hxl1Coefficient)



    def resetMethod4hxl1Coefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod4hxl1Coefficient(self)



    def setMethod4hxl2Coefficient(self, method4hxl2Coefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod4hxl2Coefficient(self, method4hxl2Coefficient)



    def resetMethod4hxl2Coefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod4hxl2Coefficient(self)



    def setMethod4CondensationThreshold(self, method4CondensationThreshold: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod4CondensationThreshold(self, method4CondensationThreshold)



    def resetMethod4CondensationThreshold(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod4CondensationThreshold(self)

GeneratorFuelCellExhaustGasToWaterHeatExchanger_swigregister = _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_swigregister

GeneratorFuelCellExhaustGasToWaterHeatExchanger_swigregister(GeneratorFuelCellExhaustGasToWaterHeatExchanger)



def GeneratorFuelCellExhaustGasToWaterHeatExchanger_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_iddObjectType()

GeneratorFuelCellExhaustGasToWaterHeatExchanger_iddObjectType = _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_iddObjectType



def GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatExchangerCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatExchangerCalculationMethodValues()

GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatExchangerCalculationMethodValues = _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatExchangerCalculationMethodValues





def toGeneratorFuelCellExhaustGasToWaterHeatExchanger(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >":

    return _openstudiomodelgenerators.toGeneratorFuelCellExhaustGasToWaterHeatExchanger(idfObject)

toGeneratorFuelCellExhaustGasToWaterHeatExchanger = _openstudiomodelgenerators.toGeneratorFuelCellExhaustGasToWaterHeatExchanger



def getGeneratorFuelCellExhaustGasToWaterHeatExchanger(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >":

    return _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchanger(t_model, t_handle)

getGeneratorFuelCellExhaustGasToWaterHeatExchanger = _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchanger



def getGeneratorFuelCellExhaustGasToWaterHeatExchangers(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger,std::allocator< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchangers(t_model)

getGeneratorFuelCellExhaustGasToWaterHeatExchangers = _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchangers



def getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger >":

    return _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName(t_model, t_name)

getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName = _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName



def getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger,std::allocator< openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName(t_model, t_name, t_exactMatch)

getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName = _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName

class GeneratorFuelCellInverter(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellInverter, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellInverter, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellInverter(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellInverter

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellInverter_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellInverter_iddObjectType)

    __swig_getmethods__["inverterEfficiencyCalculationModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellInverter_inverterEfficiencyCalculationModeValues

    if _newclass:

        inverterEfficiencyCalculationModeValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellInverter_inverterEfficiencyCalculationModeValues)



    def inverterEfficiencyCalculationMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_inverterEfficiencyCalculationMode(self)



    def inverterEfficiency(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_inverterEfficiency(self)



    def efficiencyFunctionofDCPowerCurve(self) -> "boost::optional< openstudio::model::CurveQuadratic >":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_efficiencyFunctionofDCPowerCurve(self)



    def fuelCell(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_fuelCell(self)



    def setInverterEfficiencyCalculationMode(self, inverterEfficiencyCalculationMode: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_setInverterEfficiencyCalculationMode(self, inverterEfficiencyCalculationMode)



    def resetInverterEfficiencyCalculationMode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_resetInverterEfficiencyCalculationMode(self)



    def setInverterEfficiency(self, inverterEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_setInverterEfficiency(self, inverterEfficiency)



    def resetInverterEfficiency(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_resetInverterEfficiency(self)



    def setEfficiencyFunctionofDCPowerCurve(self, quadraticCurves: 'CurveQuadratic') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_setEfficiencyFunctionofDCPowerCurve(self, quadraticCurves)



    def resetEfficiencyFunctionofDCPowerCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellInverter_resetEfficiencyFunctionofDCPowerCurve(self)

GeneratorFuelCellInverter_swigregister = _openstudiomodelgenerators.GeneratorFuelCellInverter_swigregister

GeneratorFuelCellInverter_swigregister(GeneratorFuelCellInverter)



def GeneratorFuelCellInverter_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelCellInverter_iddObjectType()

GeneratorFuelCellInverter_iddObjectType = _openstudiomodelgenerators.GeneratorFuelCellInverter_iddObjectType



def GeneratorFuelCellInverter_inverterEfficiencyCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellInverter_inverterEfficiencyCalculationModeValues()

GeneratorFuelCellInverter_inverterEfficiencyCalculationModeValues = _openstudiomodelgenerators.GeneratorFuelCellInverter_inverterEfficiencyCalculationModeValues





def toGeneratorFuelCellInverter(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelCellInverter >":

    return _openstudiomodelgenerators.toGeneratorFuelCellInverter(idfObject)

toGeneratorFuelCellInverter = _openstudiomodelgenerators.toGeneratorFuelCellInverter



def getGeneratorFuelCellInverter(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelCellInverter >":

    return _openstudiomodelgenerators.getGeneratorFuelCellInverter(t_model, t_handle)

getGeneratorFuelCellInverter = _openstudiomodelgenerators.getGeneratorFuelCellInverter



def getGeneratorFuelCellInverters(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelCellInverter,std::allocator< openstudio::model::GeneratorFuelCellInverter > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellInverters(t_model)

getGeneratorFuelCellInverters = _openstudiomodelgenerators.getGeneratorFuelCellInverters



def getGeneratorFuelCellInverterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelCellInverter >":

    return _openstudiomodelgenerators.getGeneratorFuelCellInverterByName(t_model, t_name)

getGeneratorFuelCellInverterByName = _openstudiomodelgenerators.getGeneratorFuelCellInverterByName



def getGeneratorFuelCellInvertersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelCellInverter,std::allocator< openstudio::model::GeneratorFuelCellInverter > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellInvertersByName(t_model, t_name, t_exactMatch)

getGeneratorFuelCellInvertersByName = _openstudiomodelgenerators.getGeneratorFuelCellInvertersByName

class GeneratorFuelCellPowerModule(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellPowerModule, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellPowerModule, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellPowerModule(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellPowerModule

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellPowerModule_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellPowerModule_iddObjectType)

    __swig_getmethods__["efficiencyCurveModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellPowerModule_efficiencyCurveModeValues

    if _newclass:

        efficiencyCurveModeValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellPowerModule_efficiencyCurveModeValues)

    __swig_getmethods__["skinLossCalculationModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossCalculationModeValues

    if _newclass:

        skinLossCalculationModeValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossCalculationModeValues)



    def efficiencyCurveMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_efficiencyCurveMode(self)



    def efficiencyCurve(self) -> "openstudio::model::CurveQuadratic":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_efficiencyCurve(self)



    def nominalEfficiency(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_nominalEfficiency(self)



    def nominalElectricalPower(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_nominalElectricalPower(self)



    def numberofStopsatStartofSimulation(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_numberofStopsatStartofSimulation(self)



    def cyclingPerformanceDegradationCoefficient(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_cyclingPerformanceDegradationCoefficient(self)



    def numberofRunHoursatBeginningofSimulation(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_numberofRunHoursatBeginningofSimulation(self)



    def accumulatedRunTimeDegradationCoefficient(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_accumulatedRunTimeDegradationCoefficient(self)



    def runTimeDegradationInitiationTimeThreshold(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_runTimeDegradationInitiationTimeThreshold(self)



    def powerUpTransientLimit(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_powerUpTransientLimit(self)



    def powerDownTransientLimit(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_powerDownTransientLimit(self)



    def startUpTime(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_startUpTime(self)



    def startUpFuel(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_startUpFuel(self)



    def startUpElectricityConsumption(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_startUpElectricityConsumption(self)



    def startUpElectricityProduced(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_startUpElectricityProduced(self)



    def shutDownTime(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_shutDownTime(self)



    def shutDownFuel(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_shutDownFuel(self)



    def shutDownElectricityConsumption(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_shutDownElectricityConsumption(self)



    def ancillaryElectricityConstantTerm(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_ancillaryElectricityConstantTerm(self)



    def ancillaryElectricityLinearTerm(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_ancillaryElectricityLinearTerm(self)



    def skinLossCalculationMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossCalculationMode(self)



    def zone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_zone(self)



    def skinLossRadiativeFraction(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossRadiativeFraction(self)



    def constantSkinLossRate(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_constantSkinLossRate(self)



    def skinLossUFactorTimesAreaTerm(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossUFactorTimesAreaTerm(self)



    def skinLossQuadraticCurve(self) -> "boost::optional< openstudio::model::CurveQuadratic >":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossQuadraticCurve(self)



    def dilutionAirFlowRate(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_dilutionAirFlowRate(self)



    def stackHeatlosstoDilutionAir(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_stackHeatlosstoDilutionAir(self)



    def dilutionInletAirNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_dilutionInletAirNode(self)



    def dilutionOutletAirNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_dilutionOutletAirNode(self)



    def minimumOperatingPoint(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_minimumOperatingPoint(self)



    def maximumOperatingPoint(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_maximumOperatingPoint(self)



    def fuelCell(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_fuelCell(self)



    def setEfficiencyCurveMode(self, efficiencyCurveMode: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setEfficiencyCurveMode(self, efficiencyCurveMode)



    def resetEfficiencyCurveMode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetEfficiencyCurveMode(self)



    def setEfficiencyCurve(self, quadraticCurve: 'CurveQuadratic') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setEfficiencyCurve(self, quadraticCurve)



    def setNominalEfficiency(self, nominalEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setNominalEfficiency(self, nominalEfficiency)



    def resetNominalEfficiency(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetNominalEfficiency(self)



    def setNominalElectricalPower(self, nominalElectricalPower: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setNominalElectricalPower(self, nominalElectricalPower)



    def resetNominalElectricalPower(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetNominalElectricalPower(self)



    def setNumberofStopsatStartofSimulation(self, numberofStopsatStartofSimulation: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setNumberofStopsatStartofSimulation(self, numberofStopsatStartofSimulation)



    def resetNumberofStopsatStartofSimulation(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetNumberofStopsatStartofSimulation(self)



    def setCyclingPerformanceDegradationCoefficient(self, cyclingPerformanceDegradationCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setCyclingPerformanceDegradationCoefficient(self, cyclingPerformanceDegradationCoefficient)



    def resetCyclingPerformanceDegradationCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetCyclingPerformanceDegradationCoefficient(self)



    def setNumberofRunHoursatBeginningofSimulation(self, numberofRunHoursatBeginningofSimulation: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setNumberofRunHoursatBeginningofSimulation(self, numberofRunHoursatBeginningofSimulation)



    def resetNumberofRunHoursatBeginningofSimulation(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetNumberofRunHoursatBeginningofSimulation(self)



    def setAccumulatedRunTimeDegradationCoefficient(self, accumulatedRunTimeDegradationCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setAccumulatedRunTimeDegradationCoefficient(self, accumulatedRunTimeDegradationCoefficient)



    def resetAccumulatedRunTimeDegradationCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetAccumulatedRunTimeDegradationCoefficient(self)



    def setRunTimeDegradationInitiationTimeThreshold(self, runTimeDegradationInitiationTimeThreshold: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setRunTimeDegradationInitiationTimeThreshold(self, runTimeDegradationInitiationTimeThreshold)



    def resetRunTimeDegradationInitiationTimeThreshold(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetRunTimeDegradationInitiationTimeThreshold(self)



    def setPowerUpTransientLimit(self, powerUpTransientLimit: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setPowerUpTransientLimit(self, powerUpTransientLimit)



    def resetPowerUpTransientLimit(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetPowerUpTransientLimit(self)



    def setPowerDownTransientLimit(self, powerDownTransientLimit: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setPowerDownTransientLimit(self, powerDownTransientLimit)



    def resetPowerDownTransientLimit(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetPowerDownTransientLimit(self)



    def setStartUpTime(self, startUpTime: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStartUpTime(self, startUpTime)



    def resetStartUpTime(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStartUpTime(self)



    def setStartUpFuel(self, startUpFuel: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStartUpFuel(self, startUpFuel)



    def resetStartUpFuel(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStartUpFuel(self)



    def setStartUpElectricityConsumption(self, startUpElectricityConsumption: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStartUpElectricityConsumption(self, startUpElectricityConsumption)



    def resetStartUpElectricityConsumption(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStartUpElectricityConsumption(self)



    def setStartUpElectricityProduced(self, startUpElectricityProduced: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStartUpElectricityProduced(self, startUpElectricityProduced)



    def resetStartUpElectricityProduced(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStartUpElectricityProduced(self)



    def setShutDownTime(self, shutDownTime: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setShutDownTime(self, shutDownTime)



    def resetShutDownTime(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetShutDownTime(self)



    def setShutDownFuel(self, shutDownFuel: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setShutDownFuel(self, shutDownFuel)



    def resetShutDownFuel(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetShutDownFuel(self)



    def setShutDownElectricityConsumption(self, shutDownElectricityConsumption: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setShutDownElectricityConsumption(self, shutDownElectricityConsumption)



    def resetShutDownElectricityConsumption(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetShutDownElectricityConsumption(self)



    def setAncillaryElectricityConstantTerm(self, ancillaryElectricityConstantTerm: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setAncillaryElectricityConstantTerm(self, ancillaryElectricityConstantTerm)



    def resetAncillaryElectricityConstantTerm(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetAncillaryElectricityConstantTerm(self)



    def setAncillaryElectricityLinearTerm(self, ancillaryElectricityLinearTerm: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setAncillaryElectricityLinearTerm(self, ancillaryElectricityLinearTerm)



    def resetAncillaryElectricityLinearTerm(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetAncillaryElectricityLinearTerm(self)



    def setSkinLossCalculationMode(self, skinLossCalculationMode: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setSkinLossCalculationMode(self, skinLossCalculationMode)



    def resetSkinLossCalculationMode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetSkinLossCalculationMode(self)



    def setZone(self, zone: 'ThermalZone') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setZone(self, zone)



    def resetZone(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetZone(self)



    def setSkinLossRadiativeFraction(self, skinLossRadiativeFraction: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setSkinLossRadiativeFraction(self, skinLossRadiativeFraction)



    def resetSkinLossRadiativeFraction(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetSkinLossRadiativeFraction(self)



    def setConstantSkinLossRate(self, constantSkinLossRate: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setConstantSkinLossRate(self, constantSkinLossRate)



    def resetConstantSkinLossRate(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetConstantSkinLossRate(self)



    def setSkinLossUFactorTimesAreaTerm(self, skinLossUFactorTimesAreaTerm: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setSkinLossUFactorTimesAreaTerm(self, skinLossUFactorTimesAreaTerm)



    def resetSkinLossUFactorTimesAreaTerm(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetSkinLossUFactorTimesAreaTerm(self)



    def setSkinLossQuadraticCurve(self, quadraticCurves: 'CurveQuadratic') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setSkinLossQuadraticCurve(self, quadraticCurves)



    def resetSkinLossQuadraticCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetSkinLossQuadraticCurve(self)



    def setDilutionAirFlowRate(self, dilutionAirFlowRate: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setDilutionAirFlowRate(self, dilutionAirFlowRate)



    def resetDilutionAirFlowRate(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetDilutionAirFlowRate(self)



    def setStackHeatlosstoDilutionAir(self, stackHeatlosstoDilutionAir: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStackHeatlosstoDilutionAir(self, stackHeatlosstoDilutionAir)



    def resetStackHeatlosstoDilutionAir(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStackHeatlosstoDilutionAir(self)



    def setDilutionInletAirNode(self, connection: 'Node') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setDilutionInletAirNode(self, connection)



    def resetDilutionInletAirNode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetDilutionInletAirNode(self)



    def setDilutionOutletAirNode(self, connection: 'Node') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setDilutionOutletAirNode(self, connection)



    def resetDilutionOutletAirNode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetDilutionOutletAirNode(self)



    def setMinimumOperatingPoint(self, minimumOperatingPoint: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setMinimumOperatingPoint(self, minimumOperatingPoint)



    def resetMinimumOperatingPoint(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetMinimumOperatingPoint(self)



    def setMaximumOperatingPoint(self, maximumOperatingPoint: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setMaximumOperatingPoint(self, maximumOperatingPoint)



    def resetMaximumOperatingPoint(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetMaximumOperatingPoint(self)

GeneratorFuelCellPowerModule_swigregister = _openstudiomodelgenerators.GeneratorFuelCellPowerModule_swigregister

GeneratorFuelCellPowerModule_swigregister(GeneratorFuelCellPowerModule)



def GeneratorFuelCellPowerModule_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_iddObjectType()

GeneratorFuelCellPowerModule_iddObjectType = _openstudiomodelgenerators.GeneratorFuelCellPowerModule_iddObjectType



def GeneratorFuelCellPowerModule_efficiencyCurveModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_efficiencyCurveModeValues()

GeneratorFuelCellPowerModule_efficiencyCurveModeValues = _openstudiomodelgenerators.GeneratorFuelCellPowerModule_efficiencyCurveModeValues



def GeneratorFuelCellPowerModule_skinLossCalculationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossCalculationModeValues()

GeneratorFuelCellPowerModule_skinLossCalculationModeValues = _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossCalculationModeValues





def toGeneratorFuelCellPowerModule(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelCellPowerModule >":

    return _openstudiomodelgenerators.toGeneratorFuelCellPowerModule(idfObject)

toGeneratorFuelCellPowerModule = _openstudiomodelgenerators.toGeneratorFuelCellPowerModule



def getGeneratorFuelCellPowerModule(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelCellPowerModule >":

    return _openstudiomodelgenerators.getGeneratorFuelCellPowerModule(t_model, t_handle)

getGeneratorFuelCellPowerModule = _openstudiomodelgenerators.getGeneratorFuelCellPowerModule



def getGeneratorFuelCellPowerModules(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule,std::allocator< openstudio::model::GeneratorFuelCellPowerModule > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellPowerModules(t_model)

getGeneratorFuelCellPowerModules = _openstudiomodelgenerators.getGeneratorFuelCellPowerModules



def getGeneratorFuelCellPowerModuleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelCellPowerModule >":

    return _openstudiomodelgenerators.getGeneratorFuelCellPowerModuleByName(t_model, t_name)

getGeneratorFuelCellPowerModuleByName = _openstudiomodelgenerators.getGeneratorFuelCellPowerModuleByName



def getGeneratorFuelCellPowerModulesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelCellPowerModule,std::allocator< openstudio::model::GeneratorFuelCellPowerModule > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellPowerModulesByName(t_model, t_name, t_exactMatch)

getGeneratorFuelCellPowerModulesByName = _openstudiomodelgenerators.getGeneratorFuelCellPowerModulesByName

class GeneratorFuelCellStackCooler(openstudiomodelhvac.StraightComponent):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelhvac.StraightComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellStackCooler, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelhvac.StraightComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellStackCooler, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellStackCooler(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellStackCooler

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellStackCooler_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellStackCooler_iddObjectType)



    def nominalStackTemperature(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_nominalStackTemperature(self)



    def actualStackTemperature(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_actualStackTemperature(self)



    def coefficientr0(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_coefficientr0(self)



    def coefficientr1(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_coefficientr1(self)



    def coefficientr2(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_coefficientr2(self)



    def coefficientr3(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_coefficientr3(self)



    def stackCoolantFlowRate(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCoolantFlowRate(self)



    def stackCoolerUFactorTimesAreaValue(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCoolerUFactorTimesAreaValue(self)



    def fscogenAdjustmentFactor(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_fscogenAdjustmentFactor(self)



    def stackCogenerationExchangerArea(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCogenerationExchangerArea(self)



    def stackCogenerationExchangerNominalFlowRate(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCogenerationExchangerNominalFlowRate(self)



    def stackCogenerationExchangerNominalHeatTransferCoefficient(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCogenerationExchangerNominalHeatTransferCoefficient(self)



    def stackCogenerationExchangerNominalHeatTransferCoefficientExponent(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCogenerationExchangerNominalHeatTransferCoefficientExponent(self)



    def stackCoolerPumpPower(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCoolerPumpPower(self)



    def stackCoolerPumpHeatLossFraction(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCoolerPumpHeatLossFraction(self)



    def stackAirCoolerFanCoefficientf0(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackAirCoolerFanCoefficientf0(self)



    def stackAirCoolerFanCoefficientf1(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackAirCoolerFanCoefficientf1(self)



    def stackAirCoolerFanCoefficientf2(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackAirCoolerFanCoefficientf2(self)



    def fuelCell(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_fuelCell(self)



    def setNominalStackTemperature(self, nominalStackTemperature: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setNominalStackTemperature(self, nominalStackTemperature)



    def resetNominalStackTemperature(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetNominalStackTemperature(self)



    def setActualStackTemperature(self, actualStackTemperature: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setActualStackTemperature(self, actualStackTemperature)



    def resetActualStackTemperature(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetActualStackTemperature(self)



    def setCoefficientr0(self, coefficientr0: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setCoefficientr0(self, coefficientr0)



    def resetCoefficientr0(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetCoefficientr0(self)



    def setCoefficientr1(self, coefficientr1: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setCoefficientr1(self, coefficientr1)



    def resetCoefficientr1(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetCoefficientr1(self)



    def setCoefficientr2(self, coefficientr2: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setCoefficientr2(self, coefficientr2)



    def resetCoefficientr2(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetCoefficientr2(self)



    def setCoefficientr3(self, coefficientr3: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setCoefficientr3(self, coefficientr3)



    def resetCoefficientr3(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetCoefficientr3(self)



    def setStackCoolantFlowRate(self, stackCoolantFlowRate: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCoolantFlowRate(self, stackCoolantFlowRate)



    def resetStackCoolantFlowRate(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCoolantFlowRate(self)



    def setStackCoolerUFactorTimesAreaValue(self, stackCoolerUFactorTimesAreaValue: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCoolerUFactorTimesAreaValue(self, stackCoolerUFactorTimesAreaValue)



    def resetStackCoolerUFactorTimesAreaValue(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCoolerUFactorTimesAreaValue(self)



    def setFscogenAdjustmentFactor(self, fscogenAdjustmentFactor: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setFscogenAdjustmentFactor(self, fscogenAdjustmentFactor)



    def resetFscogenAdjustmentFactor(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetFscogenAdjustmentFactor(self)



    def setStackCogenerationExchangerArea(self, stackCogenerationExchangerArea: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCogenerationExchangerArea(self, stackCogenerationExchangerArea)



    def resetStackCogenerationExchangerArea(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCogenerationExchangerArea(self)



    def setStackCogenerationExchangerNominalFlowRate(self, stackCogenerationExchangerNominalFlowRate: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCogenerationExchangerNominalFlowRate(self, stackCogenerationExchangerNominalFlowRate)



    def resetStackCogenerationExchangerNominalFlowRate(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCogenerationExchangerNominalFlowRate(self)



    def setStackCogenerationExchangerNominalHeatTransferCoefficient(self, stackCogenerationExchangerNominalHeatTransferCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCogenerationExchangerNominalHeatTransferCoefficient(self, stackCogenerationExchangerNominalHeatTransferCoefficient)



    def resetStackCogenerationExchangerNominalHeatTransferCoefficient(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCogenerationExchangerNominalHeatTransferCoefficient(self)



    def setStackCogenerationExchangerNominalHeatTransferCoefficientExponent(self, stackCogenerationExchangerNominalHeatTransferCoefficientExponent: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCogenerationExchangerNominalHeatTransferCoefficientExponent(self, stackCogenerationExchangerNominalHeatTransferCoefficientExponent)



    def resetStackCogenerationExchangerNominalHeatTransferCoefficientExponent(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCogenerationExchangerNominalHeatTransferCoefficientExponent(self)



    def setStackCoolerPumpPower(self, stackCoolerPumpPower: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCoolerPumpPower(self, stackCoolerPumpPower)



    def resetStackCoolerPumpPower(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCoolerPumpPower(self)



    def setStackCoolerPumpHeatLossFraction(self, stackCoolerPumpHeatLossFraction: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCoolerPumpHeatLossFraction(self, stackCoolerPumpHeatLossFraction)



    def resetStackCoolerPumpHeatLossFraction(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCoolerPumpHeatLossFraction(self)



    def setStackAirCoolerFanCoefficientf0(self, stackAirCoolerFanCoefficientf0: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackAirCoolerFanCoefficientf0(self, stackAirCoolerFanCoefficientf0)



    def resetStackAirCoolerFanCoefficientf0(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackAirCoolerFanCoefficientf0(self)



    def setStackAirCoolerFanCoefficientf1(self, stackAirCoolerFanCoefficientf1: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackAirCoolerFanCoefficientf1(self, stackAirCoolerFanCoefficientf1)



    def resetStackAirCoolerFanCoefficientf1(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackAirCoolerFanCoefficientf1(self)



    def setStackAirCoolerFanCoefficientf2(self, stackAirCoolerFanCoefficientf2: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackAirCoolerFanCoefficientf2(self, stackAirCoolerFanCoefficientf2)



    def resetStackAirCoolerFanCoefficientf2(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackAirCoolerFanCoefficientf2(self)

GeneratorFuelCellStackCooler_swigregister = _openstudiomodelgenerators.GeneratorFuelCellStackCooler_swigregister

GeneratorFuelCellStackCooler_swigregister(GeneratorFuelCellStackCooler)



def GeneratorFuelCellStackCooler_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_iddObjectType()

GeneratorFuelCellStackCooler_iddObjectType = _openstudiomodelgenerators.GeneratorFuelCellStackCooler_iddObjectType





def toGeneratorFuelCellStackCooler(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelCellStackCooler >":

    return _openstudiomodelgenerators.toGeneratorFuelCellStackCooler(idfObject)

toGeneratorFuelCellStackCooler = _openstudiomodelgenerators.toGeneratorFuelCellStackCooler



def getGeneratorFuelCellStackCooler(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelCellStackCooler >":

    return _openstudiomodelgenerators.getGeneratorFuelCellStackCooler(t_model, t_handle)

getGeneratorFuelCellStackCooler = _openstudiomodelgenerators.getGeneratorFuelCellStackCooler



def getGeneratorFuelCellStackCoolers(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler,std::allocator< openstudio::model::GeneratorFuelCellStackCooler > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellStackCoolers(t_model)

getGeneratorFuelCellStackCoolers = _openstudiomodelgenerators.getGeneratorFuelCellStackCoolers



def getGeneratorFuelCellStackCoolerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelCellStackCooler >":

    return _openstudiomodelgenerators.getGeneratorFuelCellStackCoolerByName(t_model, t_name)

getGeneratorFuelCellStackCoolerByName = _openstudiomodelgenerators.getGeneratorFuelCellStackCoolerByName



def getGeneratorFuelCellStackCoolersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelCellStackCooler,std::allocator< openstudio::model::GeneratorFuelCellStackCooler > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellStackCoolersByName(t_model, t_name, t_exactMatch)

getGeneratorFuelCellStackCoolersByName = _openstudiomodelgenerators.getGeneratorFuelCellStackCoolersByName

class GeneratorFuelCellWaterSupply(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCellWaterSupply, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCellWaterSupply, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCellWaterSupply(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellWaterSupply

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellWaterSupply_iddObjectType)

    __swig_getmethods__["waterTemperatureModelingModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureModelingModeValues

    if _newclass:

        waterTemperatureModelingModeValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureModelingModeValues)



    def reformerWaterFlowRateFunctionofFuelRateCurve(self) -> "openstudio::model::CurveQuadratic":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_reformerWaterFlowRateFunctionofFuelRateCurve(self)



    def reformerWaterPumpPowerFunctionofFuelRateCurve(self) -> "openstudio::model::CurveCubic":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_reformerWaterPumpPowerFunctionofFuelRateCurve(self)



    def pumpHeatLossFactor(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_pumpHeatLossFactor(self)



    def waterTemperatureModelingMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureModelingMode(self)



    def waterTemperatureReferenceNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureReferenceNode(self)



    def waterTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureSchedule(self)



    def fuelCell(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_fuelCell(self)



    def setReformerWaterFlowRateFunctionofFuelRateCurve(self, quadraticCurves: 'CurveQuadratic') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setReformerWaterFlowRateFunctionofFuelRateCurve(self, quadraticCurves)



    def setReformerWaterPumpPowerFunctionofFuelRateCurve(self, cubicCurves: 'CurveCubic') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setReformerWaterPumpPowerFunctionofFuelRateCurve(self, cubicCurves)



    def setPumpHeatLossFactor(self, pumpHeatLossFactor: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setPumpHeatLossFactor(self, pumpHeatLossFactor)



    def resetPumpHeatLossFactor(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_resetPumpHeatLossFactor(self)



    def setWaterTemperatureModelingMode(self, waterTemperatureModelingMode: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setWaterTemperatureModelingMode(self, waterTemperatureModelingMode)



    def resetWaterTemperatureModelingMode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_resetWaterTemperatureModelingMode(self)



    def setWaterTemperatureReferenceNode(self, connection: 'Node') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setWaterTemperatureReferenceNode(self, connection)



    def resetWaterTemperatureReferenceNode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_resetWaterTemperatureReferenceNode(self)



    def setWaterTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setWaterTemperatureSchedule(self, schedule)



    def resetWaterTemperatureSchedule(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_resetWaterTemperatureSchedule(self)

GeneratorFuelCellWaterSupply_swigregister = _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_swigregister

GeneratorFuelCellWaterSupply_swigregister(GeneratorFuelCellWaterSupply)



def GeneratorFuelCellWaterSupply_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_iddObjectType()

GeneratorFuelCellWaterSupply_iddObjectType = _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_iddObjectType



def GeneratorFuelCellWaterSupply_waterTemperatureModelingModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureModelingModeValues()

GeneratorFuelCellWaterSupply_waterTemperatureModelingModeValues = _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureModelingModeValues





def toGeneratorFuelCellWaterSupply(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelCellWaterSupply >":

    return _openstudiomodelgenerators.toGeneratorFuelCellWaterSupply(idfObject)

toGeneratorFuelCellWaterSupply = _openstudiomodelgenerators.toGeneratorFuelCellWaterSupply



def getGeneratorFuelCellWaterSupply(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelCellWaterSupply >":

    return _openstudiomodelgenerators.getGeneratorFuelCellWaterSupply(t_model, t_handle)

getGeneratorFuelCellWaterSupply = _openstudiomodelgenerators.getGeneratorFuelCellWaterSupply



def getGeneratorFuelCellWaterSupplys(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply,std::allocator< openstudio::model::GeneratorFuelCellWaterSupply > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellWaterSupplys(t_model)

getGeneratorFuelCellWaterSupplys = _openstudiomodelgenerators.getGeneratorFuelCellWaterSupplys



def getGeneratorFuelCellWaterSupplyByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelCellWaterSupply >":

    return _openstudiomodelgenerators.getGeneratorFuelCellWaterSupplyByName(t_model, t_name)

getGeneratorFuelCellWaterSupplyByName = _openstudiomodelgenerators.getGeneratorFuelCellWaterSupplyByName



def getGeneratorFuelCellWaterSupplysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelCellWaterSupply,std::allocator< openstudio::model::GeneratorFuelCellWaterSupply > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellWaterSupplysByName(t_model, t_name, t_exactMatch)

getGeneratorFuelCellWaterSupplysByName = _openstudiomodelgenerators.getGeneratorFuelCellWaterSupplysByName

class GeneratorFuelSupply(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelSupply, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelSupply, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelSupply(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelSupply

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelSupply_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelSupply_iddObjectType)

    __swig_getmethods__["fuelTemperatureModelingModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureModelingModeValues

    if _newclass:

        fuelTemperatureModelingModeValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureModelingModeValues)

    __swig_getmethods__["fuelTypeValues"] = lambda x: _openstudiomodelgenerators.GeneratorFuelSupply_fuelTypeValues

    if _newclass:

        fuelTypeValues = staticmethod(_openstudiomodelgenerators.GeneratorFuelSupply_fuelTypeValues)



    def addConstituent(self, name: 'std::string', molarFraction: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_addConstituent(self, name, molarFraction)



    def removeConstituent(self, groupIndex: 'int') -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_removeConstituent(self, groupIndex)



    def removeAllConstituents(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_removeAllConstituents(self)



    def constituents(self) -> "std::vector< std::pair< std::string,double >,std::allocator< std::pair< std::string,double > > >":

        return _openstudiomodelgenerators.GeneratorFuelSupply_constituents(self)



    def fuelTemperatureModelingMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureModelingMode(self)



    def fuelTemperatureReferenceNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureReferenceNode(self)



    def fuelTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureSchedule(self)



    def compressorPowerMultiplierFunctionofFuelRateCurve(self) -> "openstudio::model::CurveCubic":

        return _openstudiomodelgenerators.GeneratorFuelSupply_compressorPowerMultiplierFunctionofFuelRateCurve(self)



    def compressorHeatLossFactor(self) -> "double":

        return _openstudiomodelgenerators.GeneratorFuelSupply_compressorHeatLossFactor(self)



    def fuelType(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelType(self)



    def liquidGenericFuelLowerHeatingValue(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelSupply_liquidGenericFuelLowerHeatingValue(self)



    def liquidGenericFuelHigherHeatingValue(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelSupply_liquidGenericFuelHigherHeatingValue(self)



    def liquidGenericFuelMolecularWeight(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelSupply_liquidGenericFuelMolecularWeight(self)



    def liquidGenericFuelCO2EmissionFactor(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorFuelSupply_liquidGenericFuelCO2EmissionFactor(self)



    def numberofConstituentsinGaseousConstituentFuelSupply(self) -> "boost::optional< unsigned int >":

        return _openstudiomodelgenerators.GeneratorFuelSupply_numberofConstituentsinGaseousConstituentFuelSupply(self)



    def fuelCell(self) -> "openstudio::model::GeneratorFuelCell":

        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelCell(self)



    def setFuelTemperatureModelingMode(self, fuelTemperatureModelingMode: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setFuelTemperatureModelingMode(self, fuelTemperatureModelingMode)



    def resetFuelTemperatureModelingMode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetFuelTemperatureModelingMode(self)



    def setFuelTemperatureReferenceNode(self, connection: 'Node') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setFuelTemperatureReferenceNode(self, connection)



    def resetFuelTemperatureReferenceNode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetFuelTemperatureReferenceNode(self)



    def setFuelTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setFuelTemperatureSchedule(self, schedule)



    def resetFuelTemperatureSchedule(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetFuelTemperatureSchedule(self)



    def setCompressorPowerMultiplierFunctionofFuelRateCurve(self, cubicCurves: 'CurveCubic') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setCompressorPowerMultiplierFunctionofFuelRateCurve(self, cubicCurves)



    def setCompressorHeatLossFactor(self, compressorHeatLossFactor: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setCompressorHeatLossFactor(self, compressorHeatLossFactor)



    def resetCompressorHeatLossFactor(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetCompressorHeatLossFactor(self)



    def setFuelType(self, fuelType: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setFuelType(self, fuelType)



    def resetFuelType(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetFuelType(self)



    def setLiquidGenericFuelLowerHeatingValue(self, liquidGenericFuelLowerHeatingValue: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setLiquidGenericFuelLowerHeatingValue(self, liquidGenericFuelLowerHeatingValue)



    def resetLiquidGenericFuelLowerHeatingValue(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetLiquidGenericFuelLowerHeatingValue(self)



    def setLiquidGenericFuelHigherHeatingValue(self, liquidGenericFuelHigherHeatingValue: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setLiquidGenericFuelHigherHeatingValue(self, liquidGenericFuelHigherHeatingValue)



    def resetLiquidGenericFuelHigherHeatingValue(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetLiquidGenericFuelHigherHeatingValue(self)



    def setLiquidGenericFuelMolecularWeight(self, liquidGenericFuelMolecularWeight: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setLiquidGenericFuelMolecularWeight(self, liquidGenericFuelMolecularWeight)



    def resetLiquidGenericFuelMolecularWeight(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetLiquidGenericFuelMolecularWeight(self)



    def setLiquidGenericFuelCO2EmissionFactor(self, liquidGenericFuelCO2EmissionFactor: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setLiquidGenericFuelCO2EmissionFactor(self, liquidGenericFuelCO2EmissionFactor)



    def resetLiquidGenericFuelCO2EmissionFactor(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetLiquidGenericFuelCO2EmissionFactor(self)



    def setNumberofConstituentsinGaseousConstituentFuelSupply(self, numberofConstituentsinGaseousConstituentFuelSupply: 'unsigned int') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelSupply_setNumberofConstituentsinGaseousConstituentFuelSupply(self, numberofConstituentsinGaseousConstituentFuelSupply)



    def resetNumberofConstituentsinGaseousConstituentFuelSupply(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelSupply_resetNumberofConstituentsinGaseousConstituentFuelSupply(self)

GeneratorFuelSupply_swigregister = _openstudiomodelgenerators.GeneratorFuelSupply_swigregister

GeneratorFuelSupply_swigregister(GeneratorFuelSupply)



def GeneratorFuelSupply_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelSupply_iddObjectType()

GeneratorFuelSupply_iddObjectType = _openstudiomodelgenerators.GeneratorFuelSupply_iddObjectType



def GeneratorFuelSupply_fuelTemperatureModelingModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureModelingModeValues()

GeneratorFuelSupply_fuelTemperatureModelingModeValues = _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureModelingModeValues



def GeneratorFuelSupply_fuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTypeValues()

GeneratorFuelSupply_fuelTypeValues = _openstudiomodelgenerators.GeneratorFuelSupply_fuelTypeValues





def toGeneratorFuelSupply(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelSupply >":

    return _openstudiomodelgenerators.toGeneratorFuelSupply(idfObject)

toGeneratorFuelSupply = _openstudiomodelgenerators.toGeneratorFuelSupply



def getGeneratorFuelSupply(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelSupply >":

    return _openstudiomodelgenerators.getGeneratorFuelSupply(t_model, t_handle)

getGeneratorFuelSupply = _openstudiomodelgenerators.getGeneratorFuelSupply



def getGeneratorFuelSupplys(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelSupply,std::allocator< openstudio::model::GeneratorFuelSupply > >":

    return _openstudiomodelgenerators.getGeneratorFuelSupplys(t_model)

getGeneratorFuelSupplys = _openstudiomodelgenerators.getGeneratorFuelSupplys



def getGeneratorFuelSupplyByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelSupply >":

    return _openstudiomodelgenerators.getGeneratorFuelSupplyByName(t_model, t_name)

getGeneratorFuelSupplyByName = _openstudiomodelgenerators.getGeneratorFuelSupplyByName



def getGeneratorFuelSupplysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelSupply,std::allocator< openstudio::model::GeneratorFuelSupply > >":

    return _openstudiomodelgenerators.getGeneratorFuelSupplysByName(t_model, t_name, t_exactMatch)

getGeneratorFuelSupplysByName = _openstudiomodelgenerators.getGeneratorFuelSupplysByName

class GeneratorFuelCell(Generator):

    __swig_setmethods__ = {}

    for _s in [Generator]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorFuelCell, name, value)

    __swig_getmethods__ = {}

    for _s in [Generator]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorFuelCell, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorFuelCell(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCell

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorFuelCell_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorFuelCell_iddObjectType)



    def powerModule(self) -> "openstudio::model::GeneratorFuelCellPowerModule":

        return _openstudiomodelgenerators.GeneratorFuelCell_powerModule(self)



    def airSupply(self) -> "openstudio::model::GeneratorFuelCellAirSupply":

        return _openstudiomodelgenerators.GeneratorFuelCell_airSupply(self)



    def fuelSupply(self) -> "openstudio::model::GeneratorFuelSupply":

        return _openstudiomodelgenerators.GeneratorFuelCell_fuelSupply(self)



    def waterSupply(self) -> "openstudio::model::GeneratorFuelCellWaterSupply":

        return _openstudiomodelgenerators.GeneratorFuelCell_waterSupply(self)



    def auxiliaryHeater(self) -> "openstudio::model::GeneratorFuelCellAuxiliaryHeater":

        return _openstudiomodelgenerators.GeneratorFuelCell_auxiliaryHeater(self)



    def heatExchanger(self) -> "openstudio::model::GeneratorFuelCellExhaustGasToWaterHeatExchanger":

        return _openstudiomodelgenerators.GeneratorFuelCell_heatExchanger(self)



    def electricalStorage(self) -> "openstudio::model::GeneratorFuelCellElectricalStorage":

        return _openstudiomodelgenerators.GeneratorFuelCell_electricalStorage(self)



    def inverter(self) -> "openstudio::model::GeneratorFuelCellInverter":

        return _openstudiomodelgenerators.GeneratorFuelCell_inverter(self)



    def stackCooler(self) -> "boost::optional< openstudio::model::GeneratorFuelCellStackCooler >":

        return _openstudiomodelgenerators.GeneratorFuelCell_stackCooler(self)



    def setPowerModule(self, fCPM: 'GeneratorFuelCellPowerModule') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCell_setPowerModule(self, fCPM)



    def setAirSupply(self, fCAirSup: 'GeneratorFuelCellAirSupply') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCell_setAirSupply(self, fCAirSup)



    def setFuelSupply(self, genFuelSup: 'GeneratorFuelSupply') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCell_setFuelSupply(self, genFuelSup)



    def setWaterSupply(self, fCWaterSup: 'GeneratorFuelCellWaterSupply') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCell_setWaterSupply(self, fCWaterSup)



    def setAuxiliaryHeater(self, fCAuxHeat: 'GeneratorFuelCellAuxiliaryHeater') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCell_setAuxiliaryHeater(self, fCAuxHeat)



    def setHeatExchanger(self, fCExhaustHX: 'GeneratorFuelCellExhaustGasToWaterHeatExchanger') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCell_setHeatExchanger(self, fCExhaustHX)



    def setElectricalStorage(self, fCStorage: 'GeneratorFuelCellElectricalStorage') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCell_setElectricalStorage(self, fCStorage)



    def setInverter(self, fCInverter: 'GeneratorFuelCellInverter') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCell_setInverter(self, fCInverter)



    def setStackCooler(self, fCStackCooler: 'GeneratorFuelCellStackCooler') -> "bool":

        return _openstudiomodelgenerators.GeneratorFuelCell_setStackCooler(self, fCStackCooler)



    def resetStackCooler(self) -> "void":

        return _openstudiomodelgenerators.GeneratorFuelCell_resetStackCooler(self)

GeneratorFuelCell_swigregister = _openstudiomodelgenerators.GeneratorFuelCell_swigregister

GeneratorFuelCell_swigregister(GeneratorFuelCell)



def GeneratorFuelCell_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorFuelCell_iddObjectType()

GeneratorFuelCell_iddObjectType = _openstudiomodelgenerators.GeneratorFuelCell_iddObjectType





def toGeneratorFuelCell(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorFuelCell >":

    return _openstudiomodelgenerators.toGeneratorFuelCell(idfObject)

toGeneratorFuelCell = _openstudiomodelgenerators.toGeneratorFuelCell



def getGeneratorFuelCell(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorFuelCell >":

    return _openstudiomodelgenerators.getGeneratorFuelCell(t_model, t_handle)

getGeneratorFuelCell = _openstudiomodelgenerators.getGeneratorFuelCell



def getGeneratorFuelCells(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorFuelCell,std::allocator< openstudio::model::GeneratorFuelCell > >":

    return _openstudiomodelgenerators.getGeneratorFuelCells(t_model)

getGeneratorFuelCells = _openstudiomodelgenerators.getGeneratorFuelCells



def getGeneratorFuelCellByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorFuelCell >":

    return _openstudiomodelgenerators.getGeneratorFuelCellByName(t_model, t_name)

getGeneratorFuelCellByName = _openstudiomodelgenerators.getGeneratorFuelCellByName



def getGeneratorFuelCellsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorFuelCell,std::allocator< openstudio::model::GeneratorFuelCell > >":

    return _openstudiomodelgenerators.getGeneratorFuelCellsByName(t_model, t_name, t_exactMatch)

getGeneratorFuelCellsByName = _openstudiomodelgenerators.getGeneratorFuelCellsByName

class GeneratorPhotovoltaic(Generator):

    __swig_setmethods__ = {}

    for _s in [Generator]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorPhotovoltaic, name, value)

    __swig_getmethods__ = {}

    for _s in [Generator]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorPhotovoltaic, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_getmethods__["simple"] = lambda x: _openstudiomodelgenerators.GeneratorPhotovoltaic_simple

    if _newclass:

        simple = staticmethod(_openstudiomodelgenerators.GeneratorPhotovoltaic_simple)

    __swig_getmethods__["equivalentOneDiode"] = lambda x: _openstudiomodelgenerators.GeneratorPhotovoltaic_equivalentOneDiode

    if _newclass:

        equivalentOneDiode = staticmethod(_openstudiomodelgenerators.GeneratorPhotovoltaic_equivalentOneDiode)

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorPhotovoltaic

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorPhotovoltaic_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorPhotovoltaic_iddObjectType)

    __swig_getmethods__["heatTransferIntegrationModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorPhotovoltaic_heatTransferIntegrationModeValues

    if _newclass:

        heatTransferIntegrationModeValues = staticmethod(_openstudiomodelgenerators.GeneratorPhotovoltaic_heatTransferIntegrationModeValues)



    def surface(self) -> "boost::optional< openstudio::model::PlanarSurface >":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_surface(self)



    def photovoltaicPerformance(self) -> "openstudio::model::PhotovoltaicPerformance":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_photovoltaicPerformance(self)



    def heatTransferIntegrationMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_heatTransferIntegrationMode(self)



    def isHeatTransferIntegrationModeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_isHeatTransferIntegrationModeDefaulted(self)



    def numberOfModulesInParallel(self) -> "double":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_numberOfModulesInParallel(self)



    def isNumberOfModulesInParallelDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_isNumberOfModulesInParallelDefaulted(self)



    def numberOfModulesInSeries(self) -> "double":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_numberOfModulesInSeries(self)



    def isNumberOfModulesInSeriesDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_isNumberOfModulesInSeriesDefaulted(self)



    def ratedElectricPowerOutput(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_ratedElectricPowerOutput(self)



    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_availabilitySchedule(self)



    def setSurface(self, surface: 'PlanarSurface') -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setSurface(self, surface)



    def resetSurface(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetSurface(self)



    def setHeatTransferIntegrationMode(self, heatTransferIntegrationMode: 'std::string') -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setHeatTransferIntegrationMode(self, heatTransferIntegrationMode)



    def resetHeatTransferIntegrationMode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetHeatTransferIntegrationMode(self)



    def setNumberOfModulesInParallel(self, numberOfModulesInParallel: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setNumberOfModulesInParallel(self, numberOfModulesInParallel)



    def resetNumberOfModulesInParallel(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetNumberOfModulesInParallel(self)



    def setNumberOfModulesInSeries(self, numberOfModulesInSeries: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setNumberOfModulesInSeries(self, numberOfModulesInSeries)



    def resetNumberOfModulesInSeries(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetNumberOfModulesInSeries(self)



    def setRatedElectricPowerOutput(self, ratedElectricPowerOutput: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setRatedElectricPowerOutput(self, ratedElectricPowerOutput)



    def resetRatedElectricPowerOutput(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetRatedElectricPowerOutput(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setAvailabilitySchedule(self, schedule)



    def resetAvailabilitySchedule(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetAvailabilitySchedule(self)

GeneratorPhotovoltaic_swigregister = _openstudiomodelgenerators.GeneratorPhotovoltaic_swigregister

GeneratorPhotovoltaic_swigregister(GeneratorPhotovoltaic)



def GeneratorPhotovoltaic_simple(model: 'Model') -> "openstudio::model::GeneratorPhotovoltaic":

    return _openstudiomodelgenerators.GeneratorPhotovoltaic_simple(model)

GeneratorPhotovoltaic_simple = _openstudiomodelgenerators.GeneratorPhotovoltaic_simple



def GeneratorPhotovoltaic_equivalentOneDiode(model: 'Model') -> "openstudio::model::GeneratorPhotovoltaic":

    return _openstudiomodelgenerators.GeneratorPhotovoltaic_equivalentOneDiode(model)

GeneratorPhotovoltaic_equivalentOneDiode = _openstudiomodelgenerators.GeneratorPhotovoltaic_equivalentOneDiode



def GeneratorPhotovoltaic_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorPhotovoltaic_iddObjectType()

GeneratorPhotovoltaic_iddObjectType = _openstudiomodelgenerators.GeneratorPhotovoltaic_iddObjectType



def GeneratorPhotovoltaic_heatTransferIntegrationModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorPhotovoltaic_heatTransferIntegrationModeValues()

GeneratorPhotovoltaic_heatTransferIntegrationModeValues = _openstudiomodelgenerators.GeneratorPhotovoltaic_heatTransferIntegrationModeValues





def toGeneratorPhotovoltaic(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorPhotovoltaic >":

    return _openstudiomodelgenerators.toGeneratorPhotovoltaic(idfObject)

toGeneratorPhotovoltaic = _openstudiomodelgenerators.toGeneratorPhotovoltaic



def getGeneratorPhotovoltaic(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorPhotovoltaic >":

    return _openstudiomodelgenerators.getGeneratorPhotovoltaic(t_model, t_handle)

getGeneratorPhotovoltaic = _openstudiomodelgenerators.getGeneratorPhotovoltaic



def getGeneratorPhotovoltaics(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorPhotovoltaic,std::allocator< openstudio::model::GeneratorPhotovoltaic > >":

    return _openstudiomodelgenerators.getGeneratorPhotovoltaics(t_model)

getGeneratorPhotovoltaics = _openstudiomodelgenerators.getGeneratorPhotovoltaics



def getGeneratorPhotovoltaicByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorPhotovoltaic >":

    return _openstudiomodelgenerators.getGeneratorPhotovoltaicByName(t_model, t_name)

getGeneratorPhotovoltaicByName = _openstudiomodelgenerators.getGeneratorPhotovoltaicByName



def getGeneratorPhotovoltaicsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorPhotovoltaic,std::allocator< openstudio::model::GeneratorPhotovoltaic > >":

    return _openstudiomodelgenerators.getGeneratorPhotovoltaicsByName(t_model, t_name, t_exactMatch)

getGeneratorPhotovoltaicsByName = _openstudiomodelgenerators.getGeneratorPhotovoltaicsByName

class GeneratorMicroTurbineHeatRecovery(openstudiomodelhvac.StraightComponent):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelhvac.StraightComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorMicroTurbineHeatRecovery, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelhvac.StraightComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorMicroTurbineHeatRecovery, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model', mchp: 'GeneratorMicroTurbine'):

        this = _openstudiomodelgenerators.new_GeneratorMicroTurbineHeatRecovery(model, mchp)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorMicroTurbineHeatRecovery

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_iddObjectType)

    __swig_getmethods__["validHeatRecoveryWaterFlowOperatingModeValues"] = lambda x: _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_validHeatRecoveryWaterFlowOperatingModeValues

    if _newclass:

        validHeatRecoveryWaterFlowOperatingModeValues = staticmethod(_openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_validHeatRecoveryWaterFlowOperatingModeValues)



    def referenceThermalEfficiencyUsingLowerHeatValue(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_referenceThermalEfficiencyUsingLowerHeatValue(self)



    def isReferenceThermalEfficiencyUsingLowerHeatValueDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isReferenceThermalEfficiencyUsingLowerHeatValueDefaulted(self)



    def referenceInletWaterTemperature(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_referenceInletWaterTemperature(self)



    def heatRecoveryWaterFlowOperatingMode(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryWaterFlowOperatingMode(self)



    def isHeatRecoveryWaterFlowOperatingModeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isHeatRecoveryWaterFlowOperatingModeDefaulted(self)



    def referenceHeatRecoveryWaterFlowRate(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_referenceHeatRecoveryWaterFlowRate(self)



    def heatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self)



    def thermalEfficiencyFunctionofTemperatureandElevationCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_thermalEfficiencyFunctionofTemperatureandElevationCurve(self)



    def heatRecoveryRateFunctionofPartLoadRatioCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryRateFunctionofPartLoadRatioCurve(self)



    def heatRecoveryRateFunctionofInletWaterTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryRateFunctionofInletWaterTemperatureCurve(self)



    def heatRecoveryRateFunctionofWaterFlowRateCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryRateFunctionofWaterFlowRateCurve(self)



    def minimumHeatRecoveryWaterFlowRate(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_minimumHeatRecoveryWaterFlowRate(self)



    def isMinimumHeatRecoveryWaterFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isMinimumHeatRecoveryWaterFlowRateDefaulted(self)



    def maximumHeatRecoveryWaterFlowRate(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_maximumHeatRecoveryWaterFlowRate(self)



    def isMaximumHeatRecoveryWaterFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isMaximumHeatRecoveryWaterFlowRateDefaulted(self)



    def maximumHeatRecoveryWaterTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_maximumHeatRecoveryWaterTemperature(self)



    def ratedThermaltoElectricalPowerRatio(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_ratedThermaltoElectricalPowerRatio(self)



    def isRatedThermaltoElectricalPowerRatioDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isRatedThermaltoElectricalPowerRatioDefaulted(self)



    def generatorMicroTurbine(self) -> "openstudio::model::GeneratorMicroTurbine":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_generatorMicroTurbine(self)



    def setReferenceThermalEfficiencyUsingLowerHeatValue(self, referenceThermalEfficiencyUsingLowerHeatValue: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setReferenceThermalEfficiencyUsingLowerHeatValue(self, referenceThermalEfficiencyUsingLowerHeatValue)



    def resetReferenceThermalEfficiencyUsingLowerHeatValue(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetReferenceThermalEfficiencyUsingLowerHeatValue(self)



    def setReferenceInletWaterTemperature(self, referenceInletWaterTemperature: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setReferenceInletWaterTemperature(self, referenceInletWaterTemperature)



    def setHeatRecoveryWaterFlowOperatingMode(self, heatRecoveryWaterFlowOperatingMode: 'std::string') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryWaterFlowOperatingMode(self, heatRecoveryWaterFlowOperatingMode)



    def resetHeatRecoveryWaterFlowOperatingMode(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryWaterFlowOperatingMode(self)



    def setReferenceHeatRecoveryWaterFlowRate(self, referenceHeatRecoveryWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setReferenceHeatRecoveryWaterFlowRate(self, referenceHeatRecoveryWaterFlowRate)



    def setHeatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self, heatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self, heatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve)



    def resetHeatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self)



    def setThermalEfficiencyFunctionofTemperatureandElevationCurve(self, thermalEfficiencyFunctionofTemperatureandElevationCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setThermalEfficiencyFunctionofTemperatureandElevationCurve(self, thermalEfficiencyFunctionofTemperatureandElevationCurve)



    def resetThermalEfficiencyFunctionofTemperatureandElevationCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetThermalEfficiencyFunctionofTemperatureandElevationCurve(self)



    def setHeatRecoveryRateFunctionofPartLoadRatioCurve(self, heatRecoveryRateFunctionofPartLoadRatioCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryRateFunctionofPartLoadRatioCurve(self, heatRecoveryRateFunctionofPartLoadRatioCurve)



    def resetHeatRecoveryRateFunctionofPartLoadRatioCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryRateFunctionofPartLoadRatioCurve(self)



    def setHeatRecoveryRateFunctionofInletWaterTemperatureCurve(self, heatRecoveryRateFunctionofInletWaterTemperatureCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryRateFunctionofInletWaterTemperatureCurve(self, heatRecoveryRateFunctionofInletWaterTemperatureCurve)



    def resetHeatRecoveryRateFunctionofInletWaterTemperatureCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryRateFunctionofInletWaterTemperatureCurve(self)



    def setHeatRecoveryRateFunctionofWaterFlowRateCurve(self, heatRecoveryRateFunctionofWaterFlowRateCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryRateFunctionofWaterFlowRateCurve(self, heatRecoveryRateFunctionofWaterFlowRateCurve)



    def resetHeatRecoveryRateFunctionofWaterFlowRateCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryRateFunctionofWaterFlowRateCurve(self)



    def setMinimumHeatRecoveryWaterFlowRate(self, minimumHeatRecoveryWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setMinimumHeatRecoveryWaterFlowRate(self, minimumHeatRecoveryWaterFlowRate)



    def resetMinimumHeatRecoveryWaterFlowRate(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetMinimumHeatRecoveryWaterFlowRate(self)



    def setMaximumHeatRecoveryWaterFlowRate(self, maximumHeatRecoveryWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setMaximumHeatRecoveryWaterFlowRate(self, maximumHeatRecoveryWaterFlowRate)



    def resetMaximumHeatRecoveryWaterFlowRate(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetMaximumHeatRecoveryWaterFlowRate(self)



    def setMaximumHeatRecoveryWaterTemperature(self, maximumHeatRecoveryWaterTemperature: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setMaximumHeatRecoveryWaterTemperature(self, maximumHeatRecoveryWaterTemperature)



    def resetMaximumHeatRecoveryWaterTemperature(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetMaximumHeatRecoveryWaterTemperature(self)



    def setRatedThermaltoElectricalPowerRatio(self, ratedThermaltoElectricalPowerRatio: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setRatedThermaltoElectricalPowerRatio(self, ratedThermaltoElectricalPowerRatio)



    def resetRatedThermaltoElectricalPowerRatio(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetRatedThermaltoElectricalPowerRatio(self)

GeneratorMicroTurbineHeatRecovery_swigregister = _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_swigregister

GeneratorMicroTurbineHeatRecovery_swigregister(GeneratorMicroTurbineHeatRecovery)



def GeneratorMicroTurbineHeatRecovery_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_iddObjectType()

GeneratorMicroTurbineHeatRecovery_iddObjectType = _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_iddObjectType



def GeneratorMicroTurbineHeatRecovery_validHeatRecoveryWaterFlowOperatingModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_validHeatRecoveryWaterFlowOperatingModeValues()

GeneratorMicroTurbineHeatRecovery_validHeatRecoveryWaterFlowOperatingModeValues = _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_validHeatRecoveryWaterFlowOperatingModeValues





def toGeneratorMicroTurbineHeatRecovery(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorMicroTurbineHeatRecovery >":

    return _openstudiomodelgenerators.toGeneratorMicroTurbineHeatRecovery(idfObject)

toGeneratorMicroTurbineHeatRecovery = _openstudiomodelgenerators.toGeneratorMicroTurbineHeatRecovery



def getGeneratorMicroTurbineHeatRecovery(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorMicroTurbineHeatRecovery >":

    return _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecovery(t_model, t_handle)

getGeneratorMicroTurbineHeatRecovery = _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecovery



def getGeneratorMicroTurbineHeatRecoverys(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery,std::allocator< openstudio::model::GeneratorMicroTurbineHeatRecovery > >":

    return _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecoverys(t_model)

getGeneratorMicroTurbineHeatRecoverys = _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecoverys



def getGeneratorMicroTurbineHeatRecoveryByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorMicroTurbineHeatRecovery >":

    return _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecoveryByName(t_model, t_name)

getGeneratorMicroTurbineHeatRecoveryByName = _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecoveryByName



def getGeneratorMicroTurbineHeatRecoverysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorMicroTurbineHeatRecovery,std::allocator< openstudio::model::GeneratorMicroTurbineHeatRecovery > >":

    return _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecoverysByName(t_model, t_name, t_exactMatch)

getGeneratorMicroTurbineHeatRecoverysByName = _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecoverysByName

class GeneratorMicroTurbine(Generator):

    __swig_setmethods__ = {}

    for _s in [Generator]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorMicroTurbine, name, value)

    __swig_getmethods__ = {}

    for _s in [Generator]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorMicroTurbine, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_GeneratorMicroTurbine(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorMicroTurbine

    __del__ = lambda self: None



    def ratedThermaltoElectricalPowerRatio(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_ratedThermaltoElectricalPowerRatio(self)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorMicroTurbine_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorMicroTurbine_iddObjectType)

    __swig_getmethods__["validFuelTypeValues"] = lambda x: _openstudiomodelgenerators.GeneratorMicroTurbine_validFuelTypeValues

    if _newclass:

        validFuelTypeValues = staticmethod(_openstudiomodelgenerators.GeneratorMicroTurbine_validFuelTypeValues)



    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_availabilitySchedule(self)



    def referenceElectricalPowerOutput(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceElectricalPowerOutput(self)



    def minimumFullLoadElectricalPowerOutput(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_minimumFullLoadElectricalPowerOutput(self)



    def isMinimumFullLoadElectricalPowerOutputDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isMinimumFullLoadElectricalPowerOutputDefaulted(self)



    def maximumFullLoadElectricalPowerOutput(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_maximumFullLoadElectricalPowerOutput(self)



    def isMaximumFullLoadElectricalPowerOutputDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isMaximumFullLoadElectricalPowerOutputDefaulted(self)



    def referenceElectricalEfficiencyUsingLowerHeatingValue(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceElectricalEfficiencyUsingLowerHeatingValue(self)



    def referenceCombustionAirInletTemperature(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceCombustionAirInletTemperature(self)



    def isReferenceCombustionAirInletTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isReferenceCombustionAirInletTemperatureDefaulted(self)



    def referenceCombustionAirInletHumidityRatio(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceCombustionAirInletHumidityRatio(self)



    def isReferenceCombustionAirInletHumidityRatioDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isReferenceCombustionAirInletHumidityRatioDefaulted(self)



    def referenceElevation(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceElevation(self)



    def isReferenceElevationDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isReferenceElevationDefaulted(self)



    def electricalPowerFunctionofTemperatureandElevationCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_electricalPowerFunctionofTemperatureandElevationCurve(self)



    def electricalEfficiencyFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_electricalEfficiencyFunctionofTemperatureCurve(self)



    def electricalEfficiencyFunctionofPartLoadRatioCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_electricalEfficiencyFunctionofPartLoadRatioCurve(self)



    def fuelType(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_fuelType(self)



    def isFuelTypeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isFuelTypeDefaulted(self)



    def fuelHigherHeatingValue(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_fuelHigherHeatingValue(self)



    def isFuelHigherHeatingValueDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isFuelHigherHeatingValueDefaulted(self)



    def fuelLowerHeatingValue(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_fuelLowerHeatingValue(self)



    def isFuelLowerHeatingValueDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isFuelLowerHeatingValueDefaulted(self)



    def standbyPower(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_standbyPower(self)



    def isStandbyPowerDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isStandbyPowerDefaulted(self)



    def ancillaryPower(self) -> "double":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_ancillaryPower(self)



    def isAncillaryPowerDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_isAncillaryPowerDefaulted(self)



    def ancillaryPowerFunctionofFuelInputCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_ancillaryPowerFunctionofFuelInputCurve(self)



    def generatorMicroTurbineHeatRecovery(self) -> "boost::optional< openstudio::model::GeneratorMicroTurbineHeatRecovery >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_generatorMicroTurbineHeatRecovery(self)



    def referenceExhaustAirMassFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceExhaustAirMassFlowRate(self)



    def exhaustAirFlowRateFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_exhaustAirFlowRateFunctionofTemperatureCurve(self)



    def exhaustAirFlowRateFunctionofPartLoadRatioCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_exhaustAirFlowRateFunctionofPartLoadRatioCurve(self)



    def nominalExhaustAirOutletTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_nominalExhaustAirOutletTemperature(self)



    def exhaustAirTemperatureFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_exhaustAirTemperatureFunctionofTemperatureCurve(self)



    def exhaustAirTemperatureFunctionofPartLoadRatioCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_exhaustAirTemperatureFunctionofPartLoadRatioCurve(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setAvailabilitySchedule(self, schedule)



    def resetAvailabilitySchedule(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetAvailabilitySchedule(self)



    def setReferenceElectricalPowerOutput(self, referenceElectricalPowerOutput: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceElectricalPowerOutput(self, referenceElectricalPowerOutput)



    def setMinimumFullLoadElectricalPowerOutput(self, minimumFullLoadElectricalPowerOutput: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setMinimumFullLoadElectricalPowerOutput(self, minimumFullLoadElectricalPowerOutput)



    def resetMinimumFullLoadElectricalPowerOutput(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetMinimumFullLoadElectricalPowerOutput(self)



    def setMaximumFullLoadElectricalPowerOutput(self, maximumFullLoadElectricalPowerOutput: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setMaximumFullLoadElectricalPowerOutput(self, maximumFullLoadElectricalPowerOutput)



    def resetMaximumFullLoadElectricalPowerOutput(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetMaximumFullLoadElectricalPowerOutput(self)



    def setReferenceElectricalEfficiencyUsingLowerHeatingValue(self, referenceElectricalEfficiencyUsingLowerHeatingValue: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceElectricalEfficiencyUsingLowerHeatingValue(self, referenceElectricalEfficiencyUsingLowerHeatingValue)



    def setReferenceCombustionAirInletTemperature(self, referenceCombustionAirInletTemperature: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceCombustionAirInletTemperature(self, referenceCombustionAirInletTemperature)



    def resetReferenceCombustionAirInletTemperature(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetReferenceCombustionAirInletTemperature(self)



    def setReferenceCombustionAirInletHumidityRatio(self, referenceCombustionAirInletHumidityRatio: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceCombustionAirInletHumidityRatio(self, referenceCombustionAirInletHumidityRatio)



    def resetReferenceCombustionAirInletHumidityRatio(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetReferenceCombustionAirInletHumidityRatio(self)



    def setReferenceElevation(self, referenceElevation: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceElevation(self, referenceElevation)



    def resetReferenceElevation(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetReferenceElevation(self)



    def setElectricalPowerFunctionofTemperatureandElevationCurve(self, electricalPowerFunctionofTemperatureandElevationCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setElectricalPowerFunctionofTemperatureandElevationCurve(self, electricalPowerFunctionofTemperatureandElevationCurve)



    def setElectricalEfficiencyFunctionofTemperatureCurve(self, electricalEfficiencyFunctionofTemperatureCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setElectricalEfficiencyFunctionofTemperatureCurve(self, electricalEfficiencyFunctionofTemperatureCurve)



    def setElectricalEfficiencyFunctionofPartLoadRatioCurve(self, electricalEfficiencyFunctionofPartLoadRatioCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setElectricalEfficiencyFunctionofPartLoadRatioCurve(self, electricalEfficiencyFunctionofPartLoadRatioCurve)



    def setFuelType(self, fuelType: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setFuelType(self, fuelType)



    def resetFuelType(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetFuelType(self)



    def setFuelHigherHeatingValue(self, fuelHigherHeatingValue: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setFuelHigherHeatingValue(self, fuelHigherHeatingValue)



    def resetFuelHigherHeatingValue(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetFuelHigherHeatingValue(self)



    def setFuelLowerHeatingValue(self, fuelLowerHeatingValue: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setFuelLowerHeatingValue(self, fuelLowerHeatingValue)



    def resetFuelLowerHeatingValue(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetFuelLowerHeatingValue(self)



    def setStandbyPower(self, standbyPower: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setStandbyPower(self, standbyPower)



    def resetStandbyPower(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetStandbyPower(self)



    def setAncillaryPower(self, ancillaryPower: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setAncillaryPower(self, ancillaryPower)



    def resetAncillaryPower(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetAncillaryPower(self)



    def setAncillaryPowerFunctionofFuelInputCurve(self, ancillaryPowerFunctionofFuelInputCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setAncillaryPowerFunctionofFuelInputCurve(self, ancillaryPowerFunctionofFuelInputCurve)



    def resetAncillaryPowerFunctionofFuelInputCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetAncillaryPowerFunctionofFuelInputCurve(self)



    def setReferenceExhaustAirMassFlowRate(self, referenceExhaustAirMassFlowRate: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceExhaustAirMassFlowRate(self, referenceExhaustAirMassFlowRate)



    def resetReferenceExhaustAirMassFlowRate(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetReferenceExhaustAirMassFlowRate(self)



    def setExhaustAirFlowRateFunctionofTemperatureCurve(self, exhaustAirFlowRateFunctionofTemperatureCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setExhaustAirFlowRateFunctionofTemperatureCurve(self, exhaustAirFlowRateFunctionofTemperatureCurve)



    def resetExhaustAirFlowRateFunctionofTemperatureCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetExhaustAirFlowRateFunctionofTemperatureCurve(self)



    def setExhaustAirFlowRateFunctionofPartLoadRatioCurve(self, exhaustAirFlowRateFunctionofPartLoadRatioCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setExhaustAirFlowRateFunctionofPartLoadRatioCurve(self, exhaustAirFlowRateFunctionofPartLoadRatioCurve)



    def resetExhaustAirFlowRateFunctionofPartLoadRatioCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetExhaustAirFlowRateFunctionofPartLoadRatioCurve(self)



    def setNominalExhaustAirOutletTemperature(self, nominalExhaustAirOutletTemperature: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setNominalExhaustAirOutletTemperature(self, nominalExhaustAirOutletTemperature)



    def resetNominalExhaustAirOutletTemperature(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetNominalExhaustAirOutletTemperature(self)



    def setExhaustAirTemperatureFunctionofTemperatureCurve(self, exhaustAirTemperatureFunctionofTemperatureCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setExhaustAirTemperatureFunctionofTemperatureCurve(self, exhaustAirTemperatureFunctionofTemperatureCurve)



    def resetExhaustAirTemperatureFunctionofTemperatureCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetExhaustAirTemperatureFunctionofTemperatureCurve(self)



    def setExhaustAirTemperatureFunctionofPartLoadRatioCurve(self, exhaustAirTemperatureFunctionofPartLoadRatioCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_setExhaustAirTemperatureFunctionofPartLoadRatioCurve(self, exhaustAirTemperatureFunctionofPartLoadRatioCurve)



    def resetExhaustAirTemperatureFunctionofPartLoadRatioCurve(self) -> "void":

        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetExhaustAirTemperatureFunctionofPartLoadRatioCurve(self)

GeneratorMicroTurbine_swigregister = _openstudiomodelgenerators.GeneratorMicroTurbine_swigregister

GeneratorMicroTurbine_swigregister(GeneratorMicroTurbine)



def GeneratorMicroTurbine_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorMicroTurbine_iddObjectType()

GeneratorMicroTurbine_iddObjectType = _openstudiomodelgenerators.GeneratorMicroTurbine_iddObjectType



def GeneratorMicroTurbine_validFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.GeneratorMicroTurbine_validFuelTypeValues()

GeneratorMicroTurbine_validFuelTypeValues = _openstudiomodelgenerators.GeneratorMicroTurbine_validFuelTypeValues





def toGeneratorMicroTurbine(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorMicroTurbine >":

    return _openstudiomodelgenerators.toGeneratorMicroTurbine(idfObject)

toGeneratorMicroTurbine = _openstudiomodelgenerators.toGeneratorMicroTurbine



def getGeneratorMicroTurbine(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorMicroTurbine >":

    return _openstudiomodelgenerators.getGeneratorMicroTurbine(t_model, t_handle)

getGeneratorMicroTurbine = _openstudiomodelgenerators.getGeneratorMicroTurbine



def getGeneratorMicroTurbines(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorMicroTurbine,std::allocator< openstudio::model::GeneratorMicroTurbine > >":

    return _openstudiomodelgenerators.getGeneratorMicroTurbines(t_model)

getGeneratorMicroTurbines = _openstudiomodelgenerators.getGeneratorMicroTurbines



def getGeneratorMicroTurbineByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorMicroTurbine >":

    return _openstudiomodelgenerators.getGeneratorMicroTurbineByName(t_model, t_name)

getGeneratorMicroTurbineByName = _openstudiomodelgenerators.getGeneratorMicroTurbineByName



def getGeneratorMicroTurbinesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorMicroTurbine,std::allocator< openstudio::model::GeneratorMicroTurbine > >":

    return _openstudiomodelgenerators.getGeneratorMicroTurbinesByName(t_model, t_name, t_exactMatch)

getGeneratorMicroTurbinesByName = _openstudiomodelgenerators.getGeneratorMicroTurbinesByName

class GeneratorPVWatts(Generator):

    __swig_setmethods__ = {}

    for _s in [Generator]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratorPVWatts, name, value)

    __swig_getmethods__ = {}

    for _s in [Generator]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, GeneratorPVWatts, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelgenerators.new_GeneratorPVWatts(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorPVWatts

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.GeneratorPVWatts_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.GeneratorPVWatts_iddObjectType)



    def pvWattsVersion(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorPVWatts_pvWattsVersion(self)



    def dcSystemCapacity(self) -> "double":

        return _openstudiomodelgenerators.GeneratorPVWatts_dcSystemCapacity(self)



    def moduleType(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorPVWatts_moduleType(self)



    def isModuleTypeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_isModuleTypeDefaulted(self)



    def arrayType(self) -> "std::string":

        return _openstudiomodelgenerators.GeneratorPVWatts_arrayType(self)



    def isArrayTypeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_isArrayTypeDefaulted(self)



    def systemLosses(self) -> "double":

        return _openstudiomodelgenerators.GeneratorPVWatts_systemLosses(self)



    def isSystemLossesDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_isSystemLossesDefaulted(self)



    def tiltAngle(self) -> "double":

        return _openstudiomodelgenerators.GeneratorPVWatts_tiltAngle(self)



    def isTiltAngleDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_isTiltAngleDefaulted(self)



    def azimuthAngle(self) -> "double":

        return _openstudiomodelgenerators.GeneratorPVWatts_azimuthAngle(self)



    def isAzimuthAngleDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_isAzimuthAngleDefaulted(self)



    def surface(self) -> "boost::optional< openstudio::model::PlanarSurface >":

        return _openstudiomodelgenerators.GeneratorPVWatts_surface(self)



    def groundCoverageRatio(self) -> "double":

        return _openstudiomodelgenerators.GeneratorPVWatts_groundCoverageRatio(self)



    def isGroundCoverageRatioDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_isGroundCoverageRatioDefaulted(self)



    def setDCSystemCapacity(self, dcSystemCapacity: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_setDCSystemCapacity(self, dcSystemCapacity)



    def setModuleType(self, moduleType: 'std::string') -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_setModuleType(self, moduleType)



    def resetModuleType(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWatts_resetModuleType(self)



    def setArrayType(self, arrayType: 'std::string') -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_setArrayType(self, arrayType)



    def resetArrayType(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWatts_resetArrayType(self)



    def setSystemLosses(self, systemLosses: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_setSystemLosses(self, systemLosses)



    def resetSystemLosses(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWatts_resetSystemLosses(self)



    def setTiltAngle(self, tiltAngle: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_setTiltAngle(self, tiltAngle)



    def resetTiltAngle(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWatts_resetTiltAngle(self)



    def setAzimuthAngle(self, azimuthAngle: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_setAzimuthAngle(self, azimuthAngle)



    def resetAzimuthAngle(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWatts_resetAzimuthAngle(self)



    def setSurface(self, surface: 'PlanarSurface') -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_setSurface(self, surface)



    def resetSurface(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWatts_resetSurface(self)



    def setGroundCoverageRatio(self, groundCoverageRatio: 'double') -> "bool":

        return _openstudiomodelgenerators.GeneratorPVWatts_setGroundCoverageRatio(self, groundCoverageRatio)



    def resetGroundCoverageRatio(self) -> "void":

        return _openstudiomodelgenerators.GeneratorPVWatts_resetGroundCoverageRatio(self)

GeneratorPVWatts_swigregister = _openstudiomodelgenerators.GeneratorPVWatts_swigregister

GeneratorPVWatts_swigregister(GeneratorPVWatts)



def GeneratorPVWatts_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.GeneratorPVWatts_iddObjectType()

GeneratorPVWatts_iddObjectType = _openstudiomodelgenerators.GeneratorPVWatts_iddObjectType





def toGeneratorPVWatts(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GeneratorPVWatts >":

    return _openstudiomodelgenerators.toGeneratorPVWatts(idfObject)

toGeneratorPVWatts = _openstudiomodelgenerators.toGeneratorPVWatts



def getGeneratorPVWatts(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GeneratorPVWatts >":

    return _openstudiomodelgenerators.getGeneratorPVWatts(t_model, t_handle)

getGeneratorPVWatts = _openstudiomodelgenerators.getGeneratorPVWatts



def getGeneratorPVWattss(t_model: 'Model') -> "std::vector< openstudio::model::GeneratorPVWatts,std::allocator< openstudio::model::GeneratorPVWatts > >":

    return _openstudiomodelgenerators.getGeneratorPVWattss(t_model)

getGeneratorPVWattss = _openstudiomodelgenerators.getGeneratorPVWattss



def getGeneratorPVWattsByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GeneratorPVWatts >":

    return _openstudiomodelgenerators.getGeneratorPVWattsByName(t_model, t_name)

getGeneratorPVWattsByName = _openstudiomodelgenerators.getGeneratorPVWattsByName



def getGeneratorPVWattssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GeneratorPVWatts,std::allocator< openstudio::model::GeneratorPVWatts > >":

    return _openstudiomodelgenerators.getGeneratorPVWattssByName(t_model, t_name, t_exactMatch)

getGeneratorPVWattssByName = _openstudiomodelgenerators.getGeneratorPVWattssByName

class ElectricLoadCenterTransformer(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterTransformer, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterTransformer, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterTransformer(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterTransformer

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterTransformer_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterTransformer_iddObjectType)

    __swig_getmethods__["transformerUsageValues"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterTransformer_transformerUsageValues

    if _newclass:

        transformerUsageValues = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterTransformer_transformerUsageValues)

    __swig_getmethods__["phaseValues"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterTransformer_phaseValues

    if _newclass:

        phaseValues = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterTransformer_phaseValues)

    __swig_getmethods__["conductorMaterialValues"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterTransformer_conductorMaterialValues

    if _newclass:

        conductorMaterialValues = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterTransformer_conductorMaterialValues)

    __swig_getmethods__["performanceInputMethodValues"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterTransformer_performanceInputMethodValues

    if _newclass:

        performanceInputMethodValues = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterTransformer_performanceInputMethodValues)



    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_availabilitySchedule(self)



    def transformerUsage(self) -> "std::string":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_transformerUsage(self)



    def isTransformerUsageDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isTransformerUsageDefaulted(self)



    def zone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_zone(self)



    def radiativeFraction(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_radiativeFraction(self)



    def isRadiativeFractionDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isRadiativeFractionDefaulted(self)



    def ratedCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_ratedCapacity(self)



    def phase(self) -> "std::string":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_phase(self)



    def isPhaseDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isPhaseDefaulted(self)



    def conductorMaterial(self) -> "std::string":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_conductorMaterial(self)



    def isConductorMaterialDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isConductorMaterialDefaulted(self)



    def fullLoadTemperatureRise(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_fullLoadTemperatureRise(self)



    def isFullLoadTemperatureRiseDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isFullLoadTemperatureRiseDefaulted(self)



    def fractionofEddyCurrentLosses(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_fractionofEddyCurrentLosses(self)



    def isFractionofEddyCurrentLossesDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isFractionofEddyCurrentLossesDefaulted(self)



    def performanceInputMethod(self) -> "std::string":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_performanceInputMethod(self)



    def isPerformanceInputMethodDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isPerformanceInputMethodDefaulted(self)



    def ratedNoLoadLoss(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_ratedNoLoadLoss(self)



    def ratedLoadLoss(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_ratedLoadLoss(self)



    def nameplateEfficiency(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_nameplateEfficiency(self)



    def isNameplateEfficiencyDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isNameplateEfficiencyDefaulted(self)



    def perUnitLoadforNameplateEfficiency(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_perUnitLoadforNameplateEfficiency(self)



    def isPerUnitLoadforNameplateEfficiencyDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isPerUnitLoadforNameplateEfficiencyDefaulted(self)



    def referenceTemperatureforNameplateEfficiency(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_referenceTemperatureforNameplateEfficiency(self)



    def isReferenceTemperatureforNameplateEfficiencyDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isReferenceTemperatureforNameplateEfficiencyDefaulted(self)



    def perUnitLoadforMaximumEfficiency(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_perUnitLoadforMaximumEfficiency(self)



    def considerTransformerLossforUtilityCost(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_considerTransformerLossforUtilityCost(self)



    def isConsiderTransformerLossforUtilityCostDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isConsiderTransformerLossforUtilityCostDefaulted(self)



    def meters(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_meters(self)



    def getMeter(self, index: 'unsigned int') -> "boost::optional< std::string >":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_getMeter(self, index)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setAvailabilitySchedule(self, schedule)



    def resetAvailabilitySchedule(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetAvailabilitySchedule(self)



    def setTransformerUsage(self, transformerUsage: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setTransformerUsage(self, transformerUsage)



    def resetTransformerUsage(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetTransformerUsage(self)



    def setZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setZone(self, thermalZone)



    def resetZone(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetZone(self)



    def setRadiativeFraction(self, radiativeFraction: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setRadiativeFraction(self, radiativeFraction)



    def resetRadiativeFraction(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetRadiativeFraction(self)



    def setRatedCapacity(self, ratedCapacity: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setRatedCapacity(self, ratedCapacity)



    def resetRatedCapacity(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetRatedCapacity(self)



    def setPhase(self, phase: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setPhase(self, phase)



    def resetPhase(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetPhase(self)



    def setConductorMaterial(self, conductorMaterial: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setConductorMaterial(self, conductorMaterial)



    def resetConductorMaterial(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetConductorMaterial(self)



    def setFullLoadTemperatureRise(self, fullLoadTemperatureRise: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setFullLoadTemperatureRise(self, fullLoadTemperatureRise)



    def resetFullLoadTemperatureRise(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetFullLoadTemperatureRise(self)



    def setFractionofEddyCurrentLosses(self, fractionofEddyCurrentLosses: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setFractionofEddyCurrentLosses(self, fractionofEddyCurrentLosses)



    def resetFractionofEddyCurrentLosses(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetFractionofEddyCurrentLosses(self)



    def setPerformanceInputMethod(self, performanceInputMethod: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setPerformanceInputMethod(self, performanceInputMethod)



    def resetPerformanceInputMethod(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetPerformanceInputMethod(self)



    def setRatedNoLoadLoss(self, ratedNoLoadLoss: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setRatedNoLoadLoss(self, ratedNoLoadLoss)



    def resetRatedNoLoadLoss(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetRatedNoLoadLoss(self)



    def setRatedLoadLoss(self, ratedLoadLoss: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setRatedLoadLoss(self, ratedLoadLoss)



    def resetRatedLoadLoss(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetRatedLoadLoss(self)



    def setNameplateEfficiency(self, nameplateEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setNameplateEfficiency(self, nameplateEfficiency)



    def resetNameplateEfficiency(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetNameplateEfficiency(self)



    def setPerUnitLoadforNameplateEfficiency(self, perUnitLoadforNameplateEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setPerUnitLoadforNameplateEfficiency(self, perUnitLoadforNameplateEfficiency)



    def resetPerUnitLoadforNameplateEfficiency(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetPerUnitLoadforNameplateEfficiency(self)



    def setReferenceTemperatureforNameplateEfficiency(self, referenceTemperatureforNameplateEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setReferenceTemperatureforNameplateEfficiency(self, referenceTemperatureforNameplateEfficiency)



    def resetReferenceTemperatureforNameplateEfficiency(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetReferenceTemperatureforNameplateEfficiency(self)



    def setPerUnitLoadforMaximumEfficiency(self, perUnitLoadforMaximumEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setPerUnitLoadforMaximumEfficiency(self, perUnitLoadforMaximumEfficiency)



    def resetPerUnitLoadforMaximumEfficiency(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetPerUnitLoadforMaximumEfficiency(self)



    def setConsiderTransformerLossforUtilityCost(self, considerTransformerLossforUtilityCost: 'bool') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setConsiderTransformerLossforUtilityCost(self, considerTransformerLossforUtilityCost)



    def resetConsiderTransformerLossforUtilityCost(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetConsiderTransformerLossforUtilityCost(self)



    def eraseMeters(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_eraseMeters(self)



    def eraseMeter(self, index: 'unsigned int') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_eraseMeter(self, index)



    def addMeter(self, meterName: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_addMeter(self, meterName)



    def setMeter(self, meterName: 'std::string const &', index: 'unsigned int') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setMeter(self, meterName, index)

ElectricLoadCenterTransformer_swigregister = _openstudiomodelgenerators.ElectricLoadCenterTransformer_swigregister

ElectricLoadCenterTransformer_swigregister(ElectricLoadCenterTransformer)



def ElectricLoadCenterTransformer_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.ElectricLoadCenterTransformer_iddObjectType()

ElectricLoadCenterTransformer_iddObjectType = _openstudiomodelgenerators.ElectricLoadCenterTransformer_iddObjectType



def ElectricLoadCenterTransformer_transformerUsageValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.ElectricLoadCenterTransformer_transformerUsageValues()

ElectricLoadCenterTransformer_transformerUsageValues = _openstudiomodelgenerators.ElectricLoadCenterTransformer_transformerUsageValues



def ElectricLoadCenterTransformer_phaseValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.ElectricLoadCenterTransformer_phaseValues()

ElectricLoadCenterTransformer_phaseValues = _openstudiomodelgenerators.ElectricLoadCenterTransformer_phaseValues



def ElectricLoadCenterTransformer_conductorMaterialValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.ElectricLoadCenterTransformer_conductorMaterialValues()

ElectricLoadCenterTransformer_conductorMaterialValues = _openstudiomodelgenerators.ElectricLoadCenterTransformer_conductorMaterialValues



def ElectricLoadCenterTransformer_performanceInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.ElectricLoadCenterTransformer_performanceInputMethodValues()

ElectricLoadCenterTransformer_performanceInputMethodValues = _openstudiomodelgenerators.ElectricLoadCenterTransformer_performanceInputMethodValues





def toElectricLoadCenterTransformer(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ElectricLoadCenterTransformer >":

    return _openstudiomodelgenerators.toElectricLoadCenterTransformer(idfObject)

toElectricLoadCenterTransformer = _openstudiomodelgenerators.toElectricLoadCenterTransformer



def getElectricLoadCenterTransformer(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ElectricLoadCenterTransformer >":

    return _openstudiomodelgenerators.getElectricLoadCenterTransformer(t_model, t_handle)

getElectricLoadCenterTransformer = _openstudiomodelgenerators.getElectricLoadCenterTransformer



def getElectricLoadCenterTransformers(t_model: 'Model') -> "std::vector< openstudio::model::ElectricLoadCenterTransformer,std::allocator< openstudio::model::ElectricLoadCenterTransformer > >":

    return _openstudiomodelgenerators.getElectricLoadCenterTransformers(t_model)

getElectricLoadCenterTransformers = _openstudiomodelgenerators.getElectricLoadCenterTransformers



def getElectricLoadCenterTransformerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ElectricLoadCenterTransformer >":

    return _openstudiomodelgenerators.getElectricLoadCenterTransformerByName(t_model, t_name)

getElectricLoadCenterTransformerByName = _openstudiomodelgenerators.getElectricLoadCenterTransformerByName



def getElectricLoadCenterTransformersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ElectricLoadCenterTransformer,std::allocator< openstudio::model::ElectricLoadCenterTransformer > >":

    return _openstudiomodelgenerators.getElectricLoadCenterTransformersByName(t_model, t_name, t_exactMatch)

getElectricLoadCenterTransformersByName = _openstudiomodelgenerators.getElectricLoadCenterTransformersByName

class ElectricLoadCenterDistribution(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterDistribution, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterDistribution, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterDistribution(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterDistribution

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterDistribution_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterDistribution_iddObjectType)

    __swig_getmethods__["generatorOperationSchemeTypeValues"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterDistribution_generatorOperationSchemeTypeValues

    if _newclass:

        generatorOperationSchemeTypeValues = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterDistribution_generatorOperationSchemeTypeValues)

    __swig_getmethods__["electricalBussTypeValues"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterDistribution_electricalBussTypeValues

    if _newclass:

        electricalBussTypeValues = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterDistribution_electricalBussTypeValues)

    __swig_getmethods__["storageOperationSchemeValues"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageOperationSchemeValues

    if _newclass:

        storageOperationSchemeValues = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterDistribution_storageOperationSchemeValues)



    def generators(self) -> "std::vector< openstudio::model::Generator,std::allocator< openstudio::model::Generator > >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_generators(self)



    def generatorOperationSchemeType(self) -> "std::string":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_generatorOperationSchemeType(self)



    def isGeneratorOperationSchemeTypeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isGeneratorOperationSchemeTypeDefaulted(self)



    def demandLimitSchemePurchasedElectricDemandLimit(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_demandLimitSchemePurchasedElectricDemandLimit(self)



    def trackScheduleSchemeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_trackScheduleSchemeSchedule(self)



    def trackMeterSchemeMeterName(self) -> "boost::optional< std::string >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_trackMeterSchemeMeterName(self)



    def electricalBussType(self) -> "std::string":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_electricalBussType(self)



    def isElectricalBussTypeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isElectricalBussTypeDefaulted(self)



    def inverter(self) -> "boost::optional< openstudio::model::Inverter >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_inverter(self)



    def electricalStorage(self) -> "boost::optional< openstudio::model::ElectricalStorage >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_electricalStorage(self)



    def transformer(self) -> "boost::optional< openstudio::model::ElectricLoadCenterTransformer >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_transformer(self)



    def storageOperationScheme(self) -> "std::string":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageOperationScheme(self)



    def isStorageOperationSchemeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isStorageOperationSchemeDefaulted(self)



    def storageControlTrackMeterName(self) -> "boost::optional< std::string >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageControlTrackMeterName(self)



    def storageConverter(self) -> "boost::optional< openstudio::model::ElectricLoadCenterStorageConverter >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageConverter(self)



    def maximumStorageStateofChargeFraction(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_maximumStorageStateofChargeFraction(self)



    def isMaximumStorageStateofChargeFractionDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isMaximumStorageStateofChargeFractionDefaulted(self)



    def minimumStorageStateofChargeFraction(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_minimumStorageStateofChargeFraction(self)



    def isMinimumStorageStateofChargeFractionDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isMinimumStorageStateofChargeFractionDefaulted(self)



    def designStorageControlChargePower(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_designStorageControlChargePower(self)



    def storageChargePowerFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageChargePowerFractionSchedule(self)



    def designStorageControlDischargePower(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_designStorageControlDischargePower(self)



    def storageDischargePowerFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageDischargePowerFractionSchedule(self)



    def storageControlUtilityDemandTarget(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageControlUtilityDemandTarget(self)



    def storageControlUtilityDemandTargetFractionSchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageControlUtilityDemandTargetFractionSchedule(self)



    def isStorageControlUtilityDemandTargetFractionScheduleDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isStorageControlUtilityDemandTargetFractionScheduleDefaulted(self)



    def addGenerator(self, generator: 'Generator') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_addGenerator(self, generator)



    def removeGenerator(self, generator: 'Generator') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_removeGenerator(self, generator)



    def resetGenerators(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetGenerators(self)



    def setGeneratorOperationSchemeType(self, generatorOperationSchemeType: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setGeneratorOperationSchemeType(self, generatorOperationSchemeType)



    def resetGeneratorOperationSchemeType(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetGeneratorOperationSchemeType(self)



    def setDemandLimitSchemePurchasedElectricDemandLimit(self, demandLimitSchemePurchasedElectricDemandLimit: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setDemandLimitSchemePurchasedElectricDemandLimit(self, demandLimitSchemePurchasedElectricDemandLimit)



    def resetDemandLimitSchemePurchasedElectricDemandLimit(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetDemandLimitSchemePurchasedElectricDemandLimit(self)



    def setTrackScheduleSchemeSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setTrackScheduleSchemeSchedule(self, schedule)



    def resetTrackScheduleSchemeSchedule(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetTrackScheduleSchemeSchedule(self)



    def setTrackMeterSchemeMeterName(self, trackMeterSchemeMeterName: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setTrackMeterSchemeMeterName(self, trackMeterSchemeMeterName)



    def resetTrackMeterSchemeMeterName(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetTrackMeterSchemeMeterName(self)



    def setElectricalBussType(self, electricalBussType: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setElectricalBussType(self, electricalBussType)



    def resetElectricalBussType(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetElectricalBussType(self)



    def setInverter(self, inverter: 'Inverter') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setInverter(self, inverter)



    def resetInverter(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetInverter(self)



    def setElectricalStorage(self, electricalStorage: 'ElectricalStorage') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setElectricalStorage(self, electricalStorage)



    def resetElectricalStorage(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetElectricalStorage(self)



    def setTransformer(self, transformer: 'ElectricLoadCenterTransformer') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setTransformer(self, transformer)



    def resetTransformer(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetTransformer(self)



    def setStorageOperationScheme(self, operationScheme: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageOperationScheme(self, operationScheme)



    def resetStorageOperationScheme(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageOperationScheme(self)



    def setStorageControlTrackMeterName(self, meterName: 'std::string const &') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageControlTrackMeterName(self, meterName)



    def resetStorageControlTrackMeterName(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageControlTrackMeterName(self)



    def setStorageConverter(self, converter: 'ElectricLoadCenterStorageConverter') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageConverter(self, converter)



    def resetStorageConverter(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageConverter(self)



    def setMaximumStorageStateofChargeFraction(self, maxStateofCharge: 'double const') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setMaximumStorageStateofChargeFraction(self, maxStateofCharge)



    def resetMaximumStorageStateofChargeFraction(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetMaximumStorageStateofChargeFraction(self)



    def setMinimumStorageStateofChargeFraction(self, minStateofCharge: 'double const') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setMinimumStorageStateofChargeFraction(self, minStateofCharge)



    def resetMinimumStorageStateofChargeFraction(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetMinimumStorageStateofChargeFraction(self)



    def setDesignStorageControlChargePower(self, designStorageControlChargePower: 'double const') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setDesignStorageControlChargePower(self, designStorageControlChargePower)



    def resetDesignStorageControlChargePower(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetDesignStorageControlChargePower(self)



    def setStorageChargePowerFractionSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageChargePowerFractionSchedule(self, schedule)



    def resetStorageChargePowerFractionSchedule(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageChargePowerFractionSchedule(self)



    def setDesignStorageControlDischargePower(self, designStorageControlDischargePower: 'double const') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setDesignStorageControlDischargePower(self, designStorageControlDischargePower)



    def resetDesignStorageControlDischargePower(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetDesignStorageControlDischargePower(self)



    def setStorageDischargePowerFractionSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageDischargePowerFractionSchedule(self, schedule)



    def resetStorageDischargePowerFractionSchedule(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageDischargePowerFractionSchedule(self)



    def setStorageControlUtilityDemandTarget(self, storageControlUtilityDemandTarget: 'double const') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageControlUtilityDemandTarget(self, storageControlUtilityDemandTarget)



    def resetStorageControlUtilityDemandTarget(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageControlUtilityDemandTarget(self)



    def setStorageControlUtilityDemandTargetFractionSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageControlUtilityDemandTargetFractionSchedule(self, schedule)



    def resetStorageControlUtilityDemandTargetFractionSchedule(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageControlUtilityDemandTargetFractionSchedule(self)



    def validityCheck(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_validityCheck(self)

ElectricLoadCenterDistribution_swigregister = _openstudiomodelgenerators.ElectricLoadCenterDistribution_swigregister

ElectricLoadCenterDistribution_swigregister(ElectricLoadCenterDistribution)



def ElectricLoadCenterDistribution_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.ElectricLoadCenterDistribution_iddObjectType()

ElectricLoadCenterDistribution_iddObjectType = _openstudiomodelgenerators.ElectricLoadCenterDistribution_iddObjectType



def ElectricLoadCenterDistribution_generatorOperationSchemeTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.ElectricLoadCenterDistribution_generatorOperationSchemeTypeValues()

ElectricLoadCenterDistribution_generatorOperationSchemeTypeValues = _openstudiomodelgenerators.ElectricLoadCenterDistribution_generatorOperationSchemeTypeValues



def ElectricLoadCenterDistribution_electricalBussTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.ElectricLoadCenterDistribution_electricalBussTypeValues()

ElectricLoadCenterDistribution_electricalBussTypeValues = _openstudiomodelgenerators.ElectricLoadCenterDistribution_electricalBussTypeValues



def ElectricLoadCenterDistribution_storageOperationSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageOperationSchemeValues()

ElectricLoadCenterDistribution_storageOperationSchemeValues = _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageOperationSchemeValues





def toElectricLoadCenterDistribution(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ElectricLoadCenterDistribution >":

    return _openstudiomodelgenerators.toElectricLoadCenterDistribution(idfObject)

toElectricLoadCenterDistribution = _openstudiomodelgenerators.toElectricLoadCenterDistribution



def getElectricLoadCenterDistribution(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ElectricLoadCenterDistribution >":

    return _openstudiomodelgenerators.getElectricLoadCenterDistribution(t_model, t_handle)

getElectricLoadCenterDistribution = _openstudiomodelgenerators.getElectricLoadCenterDistribution



def getElectricLoadCenterDistributions(t_model: 'Model') -> "std::vector< openstudio::model::ElectricLoadCenterDistribution,std::allocator< openstudio::model::ElectricLoadCenterDistribution > >":

    return _openstudiomodelgenerators.getElectricLoadCenterDistributions(t_model)

getElectricLoadCenterDistributions = _openstudiomodelgenerators.getElectricLoadCenterDistributions



def getElectricLoadCenterDistributionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ElectricLoadCenterDistribution >":

    return _openstudiomodelgenerators.getElectricLoadCenterDistributionByName(t_model, t_name)

getElectricLoadCenterDistributionByName = _openstudiomodelgenerators.getElectricLoadCenterDistributionByName



def getElectricLoadCenterDistributionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ElectricLoadCenterDistribution,std::allocator< openstudio::model::ElectricLoadCenterDistribution > >":

    return _openstudiomodelgenerators.getElectricLoadCenterDistributionsByName(t_model, t_name, t_exactMatch)

getElectricLoadCenterDistributionsByName = _openstudiomodelgenerators.getElectricLoadCenterDistributionsByName

class ElectricLoadCenterInverterLookUpTable(Inverter):

    __swig_setmethods__ = {}

    for _s in [Inverter]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterInverterLookUpTable, name, value)

    __swig_getmethods__ = {}

    for _s in [Inverter]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterInverterLookUpTable, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterInverterLookUpTable(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterLookUpTable

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_iddObjectType)



    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_availabilitySchedule(self)



    def radiativeFraction(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_radiativeFraction(self)



    def ratedMaximumContinuousOutputPower(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_ratedMaximumContinuousOutputPower(self)



    def nightTareLossPower(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_nightTareLossPower(self)



    def nominalVoltageInput(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_nominalVoltageInput(self)



    def efficiencyAt10PowerAndNominalVoltage(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt10PowerAndNominalVoltage(self)



    def efficiencyAt20PowerAndNominalVoltage(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt20PowerAndNominalVoltage(self)



    def efficiencyAt30PowerAndNominalVoltage(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt30PowerAndNominalVoltage(self)



    def efficiencyAt50PowerAndNominalVoltage(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt50PowerAndNominalVoltage(self)



    def efficiencyAt75PowerAndNominalVoltage(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt75PowerAndNominalVoltage(self)



    def efficiencyAt100PowerAndNominalVoltage(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt100PowerAndNominalVoltage(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setAvailabilitySchedule(self, schedule)



    def resetAvailabilitySchedule(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetAvailabilitySchedule(self)



    def setRadiativeFraction(self, radiativeFraction: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setRadiativeFraction(self, radiativeFraction)



    def resetRadiativeFraction(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetRadiativeFraction(self)



    def setRatedMaximumContinuousOutputPower(self, ratedMaximumContinuousOutputPower: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setRatedMaximumContinuousOutputPower(self, ratedMaximumContinuousOutputPower)



    def resetRatedMaximumContinuousOutputPower(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetRatedMaximumContinuousOutputPower(self)



    def setNightTareLossPower(self, nightTareLossPower: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setNightTareLossPower(self, nightTareLossPower)



    def resetNightTareLossPower(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetNightTareLossPower(self)



    def setNominalVoltageInput(self, nominalVoltageInput: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setNominalVoltageInput(self, nominalVoltageInput)



    def resetNominalVoltageInput(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetNominalVoltageInput(self)



    def setEfficiencyAt10PowerAndNominalVoltage(self, efficiencyAt10PowerAndNominalVoltage: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt10PowerAndNominalVoltage(self, efficiencyAt10PowerAndNominalVoltage)



    def resetEfficiencyAt10PowerAndNominalVoltage(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt10PowerAndNominalVoltage(self)



    def setEfficiencyAt20PowerAndNominalVoltage(self, efficiencyAt20PowerAndNominalVoltage: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt20PowerAndNominalVoltage(self, efficiencyAt20PowerAndNominalVoltage)



    def resetEfficiencyAt20PowerAndNominalVoltage(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt20PowerAndNominalVoltage(self)



    def setEfficiencyAt30PowerAndNominalVoltage(self, efficiencyAt30PowerAndNominalVoltage: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt30PowerAndNominalVoltage(self, efficiencyAt30PowerAndNominalVoltage)



    def resetEfficiencyAt30PowerAndNominalVoltage(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt30PowerAndNominalVoltage(self)



    def setEfficiencyAt50PowerAndNominalVoltage(self, efficiencyAt50PowerAndNominalVoltage: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt50PowerAndNominalVoltage(self, efficiencyAt50PowerAndNominalVoltage)



    def resetEfficiencyAt50PowerAndNominalVoltage(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt50PowerAndNominalVoltage(self)



    def setEfficiencyAt75PowerAndNominalVoltage(self, efficiencyAt75PowerAndNominalVoltage: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt75PowerAndNominalVoltage(self, efficiencyAt75PowerAndNominalVoltage)



    def resetEfficiencyAt75PowerAndNominalVoltage(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt75PowerAndNominalVoltage(self)



    def setEfficiencyAt100PowerAndNominalVoltage(self, efficiencyAt100PowerAndNominalVoltage: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt100PowerAndNominalVoltage(self, efficiencyAt100PowerAndNominalVoltage)



    def resetEfficiencyAt100PowerAndNominalVoltage(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt100PowerAndNominalVoltage(self)

ElectricLoadCenterInverterLookUpTable_swigregister = _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_swigregister

ElectricLoadCenterInverterLookUpTable_swigregister(ElectricLoadCenterInverterLookUpTable)



def ElectricLoadCenterInverterLookUpTable_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_iddObjectType()

ElectricLoadCenterInverterLookUpTable_iddObjectType = _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_iddObjectType





def toElectricLoadCenterInverterLookUpTable(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ElectricLoadCenterInverterLookUpTable >":

    return _openstudiomodelgenerators.toElectricLoadCenterInverterLookUpTable(idfObject)

toElectricLoadCenterInverterLookUpTable = _openstudiomodelgenerators.toElectricLoadCenterInverterLookUpTable



def getElectricLoadCenterInverterLookUpTable(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ElectricLoadCenterInverterLookUpTable >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTable(t_model, t_handle)

getElectricLoadCenterInverterLookUpTable = _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTable



def getElectricLoadCenterInverterLookUpTables(t_model: 'Model') -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable,std::allocator< openstudio::model::ElectricLoadCenterInverterLookUpTable > >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTables(t_model)

getElectricLoadCenterInverterLookUpTables = _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTables



def getElectricLoadCenterInverterLookUpTableByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ElectricLoadCenterInverterLookUpTable >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTableByName(t_model, t_name)

getElectricLoadCenterInverterLookUpTableByName = _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTableByName



def getElectricLoadCenterInverterLookUpTablesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ElectricLoadCenterInverterLookUpTable,std::allocator< openstudio::model::ElectricLoadCenterInverterLookUpTable > >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTablesByName(t_model, t_name, t_exactMatch)

getElectricLoadCenterInverterLookUpTablesByName = _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTablesByName

class ElectricLoadCenterInverterSimple(Inverter):

    __swig_setmethods__ = {}

    for _s in [Inverter]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterInverterSimple, name, value)

    __swig_getmethods__ = {}

    for _s in [Inverter]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterInverterSimple, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterInverterSimple(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterSimple

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterInverterSimple_iddObjectType)



    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_availabilitySchedule(self)



    def radiativeFraction(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_radiativeFraction(self)



    def inverterEfficiency(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_inverterEfficiency(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_setAvailabilitySchedule(self, schedule)



    def resetAvailabilitySchedule(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_resetAvailabilitySchedule(self)



    def setRadiativeFraction(self, radiativeFraction: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_setRadiativeFraction(self, radiativeFraction)



    def resetRadiativeFraction(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_resetRadiativeFraction(self)



    def setInverterEfficiency(self, inverterEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_setInverterEfficiency(self, inverterEfficiency)



    def resetInverterEfficiency(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_resetInverterEfficiency(self)

ElectricLoadCenterInverterSimple_swigregister = _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_swigregister

ElectricLoadCenterInverterSimple_swigregister(ElectricLoadCenterInverterSimple)



def ElectricLoadCenterInverterSimple_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_iddObjectType()

ElectricLoadCenterInverterSimple_iddObjectType = _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_iddObjectType





def toElectricLoadCenterInverterSimple(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ElectricLoadCenterInverterSimple >":

    return _openstudiomodelgenerators.toElectricLoadCenterInverterSimple(idfObject)

toElectricLoadCenterInverterSimple = _openstudiomodelgenerators.toElectricLoadCenterInverterSimple



def getElectricLoadCenterInverterSimple(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ElectricLoadCenterInverterSimple >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterSimple(t_model, t_handle)

getElectricLoadCenterInverterSimple = _openstudiomodelgenerators.getElectricLoadCenterInverterSimple



def getElectricLoadCenterInverterSimples(t_model: 'Model') -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple,std::allocator< openstudio::model::ElectricLoadCenterInverterSimple > >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterSimples(t_model)

getElectricLoadCenterInverterSimples = _openstudiomodelgenerators.getElectricLoadCenterInverterSimples



def getElectricLoadCenterInverterSimpleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ElectricLoadCenterInverterSimple >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterSimpleByName(t_model, t_name)

getElectricLoadCenterInverterSimpleByName = _openstudiomodelgenerators.getElectricLoadCenterInverterSimpleByName



def getElectricLoadCenterInverterSimplesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ElectricLoadCenterInverterSimple,std::allocator< openstudio::model::ElectricLoadCenterInverterSimple > >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterSimplesByName(t_model, t_name, t_exactMatch)

getElectricLoadCenterInverterSimplesByName = _openstudiomodelgenerators.getElectricLoadCenterInverterSimplesByName

class ElectricLoadCenterInverterPVWatts(Inverter):

    __swig_setmethods__ = {}

    for _s in [Inverter]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterInverterPVWatts, name, value)

    __swig_getmethods__ = {}

    for _s in [Inverter]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterInverterPVWatts, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterInverterPVWatts(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterPVWatts

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_iddObjectType)



    def dcToACSizeRatio(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_dcToACSizeRatio(self)



    def isDCToACSizeRatioDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_isDCToACSizeRatioDefaulted(self)



    def inverterEfficiency(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_inverterEfficiency(self)



    def isInverterEfficiencyDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_isInverterEfficiencyDefaulted(self)



    def setDCToACSizeRatio(self, dcToACSizeRatio: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_setDCToACSizeRatio(self, dcToACSizeRatio)



    def resetDCToACSizeRatio(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_resetDCToACSizeRatio(self)



    def setInverterEfficiency(self, inverterEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_setInverterEfficiency(self, inverterEfficiency)



    def resetInverterEfficiency(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_resetInverterEfficiency(self)

ElectricLoadCenterInverterPVWatts_swigregister = _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_swigregister

ElectricLoadCenterInverterPVWatts_swigregister(ElectricLoadCenterInverterPVWatts)



def ElectricLoadCenterInverterPVWatts_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_iddObjectType()

ElectricLoadCenterInverterPVWatts_iddObjectType = _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_iddObjectType





def toElectricLoadCenterInverterPVWatts(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ElectricLoadCenterInverterPVWatts >":

    return _openstudiomodelgenerators.toElectricLoadCenterInverterPVWatts(idfObject)

toElectricLoadCenterInverterPVWatts = _openstudiomodelgenerators.toElectricLoadCenterInverterPVWatts



def getElectricLoadCenterInverterPVWatts(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ElectricLoadCenterInverterPVWatts >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterPVWatts(t_model, t_handle)

getElectricLoadCenterInverterPVWatts = _openstudiomodelgenerators.getElectricLoadCenterInverterPVWatts



def getElectricLoadCenterInverterPVWattss(t_model: 'Model') -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts,std::allocator< openstudio::model::ElectricLoadCenterInverterPVWatts > >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterPVWattss(t_model)

getElectricLoadCenterInverterPVWattss = _openstudiomodelgenerators.getElectricLoadCenterInverterPVWattss



def getElectricLoadCenterInverterPVWattsByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ElectricLoadCenterInverterPVWatts >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterPVWattsByName(t_model, t_name)

getElectricLoadCenterInverterPVWattsByName = _openstudiomodelgenerators.getElectricLoadCenterInverterPVWattsByName



def getElectricLoadCenterInverterPVWattssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ElectricLoadCenterInverterPVWatts,std::allocator< openstudio::model::ElectricLoadCenterInverterPVWatts > >":

    return _openstudiomodelgenerators.getElectricLoadCenterInverterPVWattssByName(t_model, t_name, t_exactMatch)

getElectricLoadCenterInverterPVWattssByName = _openstudiomodelgenerators.getElectricLoadCenterInverterPVWattssByName

class ElectricLoadCenterStorageSimple(ElectricalStorage):

    __swig_setmethods__ = {}

    for _s in [ElectricalStorage]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterStorageSimple, name, value)

    __swig_getmethods__ = {}

    for _s in [ElectricalStorage]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterStorageSimple, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterStorageSimple(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageSimple

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterStorageSimple_iddObjectType)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_availabilitySchedule(self)



    def isAvailabilityScheduleDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isAvailabilityScheduleDefaulted(self)



    def radiativeFractionforZoneHeatGains(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_radiativeFractionforZoneHeatGains(self)



    def isRadiativeFractionforZoneHeatGainsDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isRadiativeFractionforZoneHeatGainsDefaulted(self)



    def nominalEnergeticEfficiencyforCharging(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_nominalEnergeticEfficiencyforCharging(self)



    def isNominalEnergeticEfficiencyforChargingDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isNominalEnergeticEfficiencyforChargingDefaulted(self)



    def nominalDischargingEnergeticEfficiency(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_nominalDischargingEnergeticEfficiency(self)



    def isNominalDischargingEnergeticEfficiencyDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isNominalDischargingEnergeticEfficiencyDefaulted(self)



    def maximumStorageCapacity(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_maximumStorageCapacity(self)



    def maximumPowerforDischarging(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_maximumPowerforDischarging(self)



    def maximumPowerforCharging(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_maximumPowerforCharging(self)



    def initialStateofCharge(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_initialStateofCharge(self)



    def isInitialStateofChargeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isInitialStateofChargeDefaulted(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setAvailabilitySchedule(self, schedule)



    def resetAvailabilitySchedule(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetAvailabilitySchedule(self)



    def setRadiativeFractionforZoneHeatGains(self, radiativeFractionforZoneHeatGains: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setRadiativeFractionforZoneHeatGains(self, radiativeFractionforZoneHeatGains)



    def resetRadiativeFractionforZoneHeatGains(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetRadiativeFractionforZoneHeatGains(self)



    def setNominalEnergeticEfficiencyforCharging(self, nominalEnergeticEfficiencyforCharging: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setNominalEnergeticEfficiencyforCharging(self, nominalEnergeticEfficiencyforCharging)



    def resetNominalEnergeticEfficiencyforCharging(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetNominalEnergeticEfficiencyforCharging(self)



    def setNominalDischargingEnergeticEfficiency(self, nominalDischargingEnergeticEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setNominalDischargingEnergeticEfficiency(self, nominalDischargingEnergeticEfficiency)



    def resetNominalDischargingEnergeticEfficiency(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetNominalDischargingEnergeticEfficiency(self)



    def setMaximumStorageCapacity(self, maximumStorageCapacity: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setMaximumStorageCapacity(self, maximumStorageCapacity)



    def setMaximumPowerforDischarging(self, maximumPowerforDischarging: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setMaximumPowerforDischarging(self, maximumPowerforDischarging)



    def setMaximumPowerforCharging(self, maximumPowerforCharging: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setMaximumPowerforCharging(self, maximumPowerforCharging)



    def setInitialStateofCharge(self, initialStateofCharge: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setInitialStateofCharge(self, initialStateofCharge)



    def resetInitialStateofCharge(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetInitialStateofCharge(self)

ElectricLoadCenterStorageSimple_swigregister = _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_swigregister

ElectricLoadCenterStorageSimple_swigregister(ElectricLoadCenterStorageSimple)



def ElectricLoadCenterStorageSimple_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_iddObjectType()

ElectricLoadCenterStorageSimple_iddObjectType = _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_iddObjectType





def toElectricLoadCenterStorageSimple(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ElectricLoadCenterStorageSimple >":

    return _openstudiomodelgenerators.toElectricLoadCenterStorageSimple(idfObject)

toElectricLoadCenterStorageSimple = _openstudiomodelgenerators.toElectricLoadCenterStorageSimple



def getElectricLoadCenterStorageSimple(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ElectricLoadCenterStorageSimple >":

    return _openstudiomodelgenerators.getElectricLoadCenterStorageSimple(t_model, t_handle)

getElectricLoadCenterStorageSimple = _openstudiomodelgenerators.getElectricLoadCenterStorageSimple



def getElectricLoadCenterStorageSimples(t_model: 'Model') -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple,std::allocator< openstudio::model::ElectricLoadCenterStorageSimple > >":

    return _openstudiomodelgenerators.getElectricLoadCenterStorageSimples(t_model)

getElectricLoadCenterStorageSimples = _openstudiomodelgenerators.getElectricLoadCenterStorageSimples



def getElectricLoadCenterStorageSimpleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ElectricLoadCenterStorageSimple >":

    return _openstudiomodelgenerators.getElectricLoadCenterStorageSimpleByName(t_model, t_name)

getElectricLoadCenterStorageSimpleByName = _openstudiomodelgenerators.getElectricLoadCenterStorageSimpleByName



def getElectricLoadCenterStorageSimplesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ElectricLoadCenterStorageSimple,std::allocator< openstudio::model::ElectricLoadCenterStorageSimple > >":

    return _openstudiomodelgenerators.getElectricLoadCenterStorageSimplesByName(t_model, t_name, t_exactMatch)

getElectricLoadCenterStorageSimplesByName = _openstudiomodelgenerators.getElectricLoadCenterStorageSimplesByName

class ElectricLoadCenterStorageConverter(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricLoadCenterStorageConverter, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ElectricLoadCenterStorageConverter, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_ElectricLoadCenterStorageConverter(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageConverter

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterStorageConverter_iddObjectType)

    __swig_getmethods__["powerConversionEfficiencyMethodValues"] = lambda x: _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_powerConversionEfficiencyMethodValues

    if _newclass:

        powerConversionEfficiencyMethodValues = staticmethod(_openstudiomodelgenerators.ElectricLoadCenterStorageConverter_powerConversionEfficiencyMethodValues)



    def electricLoadCenterDistribution(self) -> "boost::optional< openstudio::model::ElectricLoadCenterDistribution >":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_electricLoadCenterDistribution(self)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_availabilitySchedule(self)



    def isAvailabilityScheduleDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_isAvailabilityScheduleDefaulted(self)



    def powerConversionEfficiencyMethod(self) -> "std::string":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_powerConversionEfficiencyMethod(self)



    def simpleFixedEfficiency(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_simpleFixedEfficiency(self)



    def designMaximumContinuousInputPower(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_designMaximumContinuousInputPower(self)



    def efficiencyFunctionofPowerCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_efficiencyFunctionofPowerCurve(self)



    def ancillaryPowerConsumedInStandby(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_ancillaryPowerConsumedInStandby(self)



    def isAncillaryPowerConsumedInStandbyDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_isAncillaryPowerConsumedInStandbyDefaulted(self)



    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_thermalZone(self)



    def radiativeFraction(self) -> "double":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_radiativeFraction(self)



    def isRadiativeFractionDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_isRadiativeFractionDefaulted(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setAvailabilitySchedule(self, schedule)



    def resetAvailabilitySchedule(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_resetAvailabilitySchedule(self)



    def setSimpleFixedEfficiency(self, simpleFixedEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setSimpleFixedEfficiency(self, simpleFixedEfficiency)



    def setDesignMaximumContinuousInputPower(self, designMaximumContinuousInputPower: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setDesignMaximumContinuousInputPower(self, designMaximumContinuousInputPower)



    def setEfficiencyFunctionofPowerCurve(self, efficiencyFunctionofPowerCurve: 'Curve') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setEfficiencyFunctionofPowerCurve(self, efficiencyFunctionofPowerCurve)



    def setAncillaryPowerConsumedInStandby(self, ancillaryPowerConsumedInStandby: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setAncillaryPowerConsumedInStandby(self, ancillaryPowerConsumedInStandby)



    def resetAncillaryPowerConsumedInStandby(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_resetAncillaryPowerConsumedInStandby(self)



    def setThermalZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setThermalZone(self, thermalZone)



    def resetThermalZone(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_resetThermalZone(self)



    def setRadiativeFraction(self, radiativeFraction: 'double') -> "bool":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setRadiativeFraction(self, radiativeFraction)



    def resetRadiativeFraction(self) -> "void":

        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_resetRadiativeFraction(self)

ElectricLoadCenterStorageConverter_swigregister = _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_swigregister

ElectricLoadCenterStorageConverter_swigregister(ElectricLoadCenterStorageConverter)



def ElectricLoadCenterStorageConverter_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_iddObjectType()

ElectricLoadCenterStorageConverter_iddObjectType = _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_iddObjectType



def ElectricLoadCenterStorageConverter_powerConversionEfficiencyMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_powerConversionEfficiencyMethodValues()

ElectricLoadCenterStorageConverter_powerConversionEfficiencyMethodValues = _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_powerConversionEfficiencyMethodValues





def toElectricLoadCenterStorageConverter(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ElectricLoadCenterStorageConverter >":

    return _openstudiomodelgenerators.toElectricLoadCenterStorageConverter(idfObject)

toElectricLoadCenterStorageConverter = _openstudiomodelgenerators.toElectricLoadCenterStorageConverter



def getElectricLoadCenterStorageConverter(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ElectricLoadCenterStorageConverter >":

    return _openstudiomodelgenerators.getElectricLoadCenterStorageConverter(t_model, t_handle)

getElectricLoadCenterStorageConverter = _openstudiomodelgenerators.getElectricLoadCenterStorageConverter



def getElectricLoadCenterStorageConverters(t_model: 'Model') -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter,std::allocator< openstudio::model::ElectricLoadCenterStorageConverter > >":

    return _openstudiomodelgenerators.getElectricLoadCenterStorageConverters(t_model)

getElectricLoadCenterStorageConverters = _openstudiomodelgenerators.getElectricLoadCenterStorageConverters



def getElectricLoadCenterStorageConverterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ElectricLoadCenterStorageConverter >":

    return _openstudiomodelgenerators.getElectricLoadCenterStorageConverterByName(t_model, t_name)

getElectricLoadCenterStorageConverterByName = _openstudiomodelgenerators.getElectricLoadCenterStorageConverterByName



def getElectricLoadCenterStorageConvertersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ElectricLoadCenterStorageConverter,std::allocator< openstudio::model::ElectricLoadCenterStorageConverter > >":

    return _openstudiomodelgenerators.getElectricLoadCenterStorageConvertersByName(t_model, t_name, t_exactMatch)

getElectricLoadCenterStorageConvertersByName = _openstudiomodelgenerators.getElectricLoadCenterStorageConvertersByName

class PhotovoltaicPerformanceEquivalentOneDiode(PhotovoltaicPerformance):

    __swig_setmethods__ = {}

    for _s in [PhotovoltaicPerformance]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotovoltaicPerformanceEquivalentOneDiode, name, value)

    __swig_getmethods__ = {}

    for _s in [PhotovoltaicPerformance]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PhotovoltaicPerformanceEquivalentOneDiode, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_PhotovoltaicPerformanceEquivalentOneDiode(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceEquivalentOneDiode

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_iddObjectType)

    __swig_getmethods__["celltypeValues"] = lambda x: _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_celltypeValues

    if _newclass:

        celltypeValues = staticmethod(_openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_celltypeValues)



    def celltype(self) -> "std::string":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_celltype(self)



    def isCelltypeDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isCelltypeDefaulted(self)



    def numberOfCellsInSeries(self) -> "int":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_numberOfCellsInSeries(self)



    def isNumberOfCellsInSeriesDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isNumberOfCellsInSeriesDefaulted(self)



    def activeArea(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_activeArea(self)



    def isActiveAreaDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isActiveAreaDefaulted(self)



    def transmittanceAbsorptanceProduct(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_transmittanceAbsorptanceProduct(self)



    def isTransmittanceAbsorptanceProductDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isTransmittanceAbsorptanceProductDefaulted(self)



    def semiconductorBandgap(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_semiconductorBandgap(self)



    def isSemiconductorBandgapDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isSemiconductorBandgapDefaulted(self)



    def shuntResistance(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_shuntResistance(self)



    def isShuntResistanceDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isShuntResistanceDefaulted(self)



    def shortCircuitCurrent(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_shortCircuitCurrent(self)



    def isShortCircuitCurrentDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isShortCircuitCurrentDefaulted(self)



    def openCircuitVoltage(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_openCircuitVoltage(self)



    def isOpenCircuitVoltageDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isOpenCircuitVoltageDefaulted(self)



    def referenceTemperature(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_referenceTemperature(self)



    def isReferenceTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isReferenceTemperatureDefaulted(self)



    def referenceInsolation(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_referenceInsolation(self)



    def isReferenceInsolationDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isReferenceInsolationDefaulted(self)



    def moduleCurrentatMaximumPower(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_moduleCurrentatMaximumPower(self)



    def isModuleCurrentatMaximumPowerDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isModuleCurrentatMaximumPowerDefaulted(self)



    def moduleVoltageatMaximumPower(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_moduleVoltageatMaximumPower(self)



    def isModuleVoltageatMaximumPowerDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isModuleVoltageatMaximumPowerDefaulted(self)



    def temperatureCoefficientofShortCircuitCurrent(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_temperatureCoefficientofShortCircuitCurrent(self)



    def isTemperatureCoefficientofShortCircuitCurrentDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isTemperatureCoefficientofShortCircuitCurrentDefaulted(self)



    def temperatureCoefficientofOpenCircuitVoltage(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_temperatureCoefficientofOpenCircuitVoltage(self)



    def isTemperatureCoefficientofOpenCircuitVoltageDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isTemperatureCoefficientofOpenCircuitVoltageDefaulted(self)



    def nominalOperatingCellTemperatureTestAmbientTemperature(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_nominalOperatingCellTemperatureTestAmbientTemperature(self)



    def isNominalOperatingCellTemperatureTestAmbientTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isNominalOperatingCellTemperatureTestAmbientTemperatureDefaulted(self)



    def nominalOperatingCellTemperatureTestCellTemperature(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_nominalOperatingCellTemperatureTestCellTemperature(self)



    def isNominalOperatingCellTemperatureTestCellTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isNominalOperatingCellTemperatureTestCellTemperatureDefaulted(self)



    def nominalOperatingCellTemperatureTestInsolation(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_nominalOperatingCellTemperatureTestInsolation(self)



    def isNominalOperatingCellTemperatureTestInsolationDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isNominalOperatingCellTemperatureTestInsolationDefaulted(self)



    def moduleHeatLossCoefficient(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_moduleHeatLossCoefficient(self)



    def isModuleHeatLossCoefficientDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isModuleHeatLossCoefficientDefaulted(self)



    def totalHeatCapacity(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_totalHeatCapacity(self)



    def isTotalHeatCapacityDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isTotalHeatCapacityDefaulted(self)



    def setCelltype(self, celltype: 'std::string') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setCelltype(self, celltype)



    def resetCelltype(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetCelltype(self)



    def setNumberofCellsinSeries(self, numberOfCellsInSeries: 'int') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setNumberofCellsinSeries(self, numberOfCellsInSeries)



    def resetNumberofCellsinSeries(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetNumberofCellsinSeries(self)



    def setActiveArea(self, activeArea: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setActiveArea(self, activeArea)



    def resetActiveArea(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetActiveArea(self)



    def setTransmittanceAbsorptanceProduct(self, transmittanceAbsorptanceProduct: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setTransmittanceAbsorptanceProduct(self, transmittanceAbsorptanceProduct)



    def resetTransmittanceAbsorptanceProduct(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetTransmittanceAbsorptanceProduct(self)



    def setSemiconductorBandgap(self, semiconductorBandgap: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setSemiconductorBandgap(self, semiconductorBandgap)



    def resetSemiconductorBandgap(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetSemiconductorBandgap(self)



    def setShuntResistance(self, shuntResistance: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setShuntResistance(self, shuntResistance)



    def resetShuntResistance(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetShuntResistance(self)



    def setShortCircuitCurrent(self, shortCircuitCurrent: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setShortCircuitCurrent(self, shortCircuitCurrent)



    def resetShortCircuitCurrent(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetShortCircuitCurrent(self)



    def setOpenCircuitVoltage(self, openCircuitVoltage: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setOpenCircuitVoltage(self, openCircuitVoltage)



    def resetOpenCircuitVoltage(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetOpenCircuitVoltage(self)



    def setReferenceTemperature(self, referenceTemperature: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setReferenceTemperature(self, referenceTemperature)



    def resetReferenceTemperature(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetReferenceTemperature(self)



    def setReferenceInsolation(self, referenceInsolation: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setReferenceInsolation(self, referenceInsolation)



    def resetReferenceInsolation(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetReferenceInsolation(self)



    def setModuleCurrentatMaximumPower(self, moduleCurrentatMaximumPower: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setModuleCurrentatMaximumPower(self, moduleCurrentatMaximumPower)



    def resetModuleCurrentatMaximumPower(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetModuleCurrentatMaximumPower(self)



    def setModuleVoltageatMaximumPower(self, moduleVoltageatMaximumPower: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setModuleVoltageatMaximumPower(self, moduleVoltageatMaximumPower)



    def resetModuleVoltageatMaximumPower(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetModuleVoltageatMaximumPower(self)



    def setTemperatureCoefficientofShortCircuitCurrent(self, temperatureCoefficientofShortCircuitCurrent: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setTemperatureCoefficientofShortCircuitCurrent(self, temperatureCoefficientofShortCircuitCurrent)



    def resetTemperatureCoefficientofShortCircuitCurrent(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetTemperatureCoefficientofShortCircuitCurrent(self)



    def setTemperatureCoefficientofOpenCircuitVoltage(self, temperatureCoefficientofOpenCircuitVoltage: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setTemperatureCoefficientofOpenCircuitVoltage(self, temperatureCoefficientofOpenCircuitVoltage)



    def resetTemperatureCoefficientofOpenCircuitVoltage(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetTemperatureCoefficientofOpenCircuitVoltage(self)



    def setNominalOperatingCellTemperatureTestAmbientTemperature(self, nominalOperatingCellTemperatureTestAmbientTemperature: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setNominalOperatingCellTemperatureTestAmbientTemperature(self, nominalOperatingCellTemperatureTestAmbientTemperature)



    def resetNominalOperatingCellTemperatureTestAmbientTemperature(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetNominalOperatingCellTemperatureTestAmbientTemperature(self)



    def setNominalOperatingCellTemperatureTestCellTemperature(self, nominalOperatingCellTemperatureTestCellTemperature: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setNominalOperatingCellTemperatureTestCellTemperature(self, nominalOperatingCellTemperatureTestCellTemperature)



    def resetNominalOperatingCellTemperatureTestCellTemperature(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetNominalOperatingCellTemperatureTestCellTemperature(self)



    def setNominalOperatingCellTemperatureTestInsolation(self, nominalOperatingCellTemperatureTestInsolation: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setNominalOperatingCellTemperatureTestInsolation(self, nominalOperatingCellTemperatureTestInsolation)



    def resetNominalOperatingCellTemperatureTestInsolation(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetNominalOperatingCellTemperatureTestInsolation(self)



    def setModuleHeatLossCoefficient(self, moduleHeatLossCoefficient: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setModuleHeatLossCoefficient(self, moduleHeatLossCoefficient)



    def resetModuleHeatLossCoefficient(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetModuleHeatLossCoefficient(self)



    def setTotalHeatCapacity(self, totalHeatCapacity: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setTotalHeatCapacity(self, totalHeatCapacity)



    def resetTotalHeatCapacity(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetTotalHeatCapacity(self)

PhotovoltaicPerformanceEquivalentOneDiode_swigregister = _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_swigregister

PhotovoltaicPerformanceEquivalentOneDiode_swigregister(PhotovoltaicPerformanceEquivalentOneDiode)



def PhotovoltaicPerformanceEquivalentOneDiode_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_iddObjectType()

PhotovoltaicPerformanceEquivalentOneDiode_iddObjectType = _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_iddObjectType



def PhotovoltaicPerformanceEquivalentOneDiode_celltypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_celltypeValues()

PhotovoltaicPerformanceEquivalentOneDiode_celltypeValues = _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_celltypeValues





def toPhotovoltaicPerformanceEquivalentOneDiode(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >":

    return _openstudiomodelgenerators.toPhotovoltaicPerformanceEquivalentOneDiode(idfObject)

toPhotovoltaicPerformanceEquivalentOneDiode = _openstudiomodelgenerators.toPhotovoltaicPerformanceEquivalentOneDiode



def getPhotovoltaicPerformanceEquivalentOneDiode(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiode(t_model, t_handle)

getPhotovoltaicPerformanceEquivalentOneDiode = _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiode



def getPhotovoltaicPerformanceEquivalentOneDiodes(t_model: 'Model') -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode,std::allocator< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode > >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiodes(t_model)

getPhotovoltaicPerformanceEquivalentOneDiodes = _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiodes



def getPhotovoltaicPerformanceEquivalentOneDiodeByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiodeByName(t_model, t_name)

getPhotovoltaicPerformanceEquivalentOneDiodeByName = _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiodeByName



def getPhotovoltaicPerformanceEquivalentOneDiodesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode,std::allocator< openstudio::model::PhotovoltaicPerformanceEquivalentOneDiode > >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiodesByName(t_model, t_name, t_exactMatch)

getPhotovoltaicPerformanceEquivalentOneDiodesByName = _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiodesByName

class PhotovoltaicPerformanceSimple(PhotovoltaicPerformance):

    __swig_setmethods__ = {}

    for _s in [PhotovoltaicPerformance]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotovoltaicPerformanceSimple, name, value)

    __swig_getmethods__ = {}

    for _s in [PhotovoltaicPerformance]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PhotovoltaicPerformanceSimple, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelgenerators.new_PhotovoltaicPerformanceSimple(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceSimple

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelgenerators.PhotovoltaicPerformanceSimple_iddObjectType)



    def fractionOfSurfaceAreaWithActiveSolarCells(self) -> "double":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_fractionOfSurfaceAreaWithActiveSolarCells(self)



    def isfractionOfSurfaceAreaWithActiveSolarCellsDefaulted(self) -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_isfractionOfSurfaceAreaWithActiveSolarCellsDefaulted(self)



    def conversionEfficiencyInputMode(self) -> "std::string":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_conversionEfficiencyInputMode(self)



    def fixedEfficiency(self) -> "boost::optional< double >":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_fixedEfficiency(self)



    def efficiencySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_efficiencySchedule(self)



    def setFractionOfSurfaceAreaWithActiveSolarCells(self, fractionOfSurfaceAreaWithActiveSolarCells: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_setFractionOfSurfaceAreaWithActiveSolarCells(self, fractionOfSurfaceAreaWithActiveSolarCells)



    def resetFractionOfSurfaceAreaWithActiveSolarCells(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_resetFractionOfSurfaceAreaWithActiveSolarCells(self)



    def setFixedEfficiency(self, fixedEfficiency: 'double') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_setFixedEfficiency(self, fixedEfficiency)



    def resetFixedEfficiency(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_resetFixedEfficiency(self)



    def setEfficiencySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_setEfficiencySchedule(self, schedule)



    def resetEfficiencySchedule(self) -> "void":

        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_resetEfficiencySchedule(self)

PhotovoltaicPerformanceSimple_swigregister = _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_swigregister

PhotovoltaicPerformanceSimple_swigregister(PhotovoltaicPerformanceSimple)



def PhotovoltaicPerformanceSimple_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_iddObjectType()

PhotovoltaicPerformanceSimple_iddObjectType = _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_iddObjectType





def toPhotovoltaicPerformanceSimple(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PhotovoltaicPerformanceSimple >":

    return _openstudiomodelgenerators.toPhotovoltaicPerformanceSimple(idfObject)

toPhotovoltaicPerformanceSimple = _openstudiomodelgenerators.toPhotovoltaicPerformanceSimple



def getPhotovoltaicPerformanceSimple(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PhotovoltaicPerformanceSimple >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSimple(t_model, t_handle)

getPhotovoltaicPerformanceSimple = _openstudiomodelgenerators.getPhotovoltaicPerformanceSimple



def getPhotovoltaicPerformanceSimples(t_model: 'Model') -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple,std::allocator< openstudio::model::PhotovoltaicPerformanceSimple > >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSimples(t_model)

getPhotovoltaicPerformanceSimples = _openstudiomodelgenerators.getPhotovoltaicPerformanceSimples



def getPhotovoltaicPerformanceSimpleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PhotovoltaicPerformanceSimple >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSimpleByName(t_model, t_name)

getPhotovoltaicPerformanceSimpleByName = _openstudiomodelgenerators.getPhotovoltaicPerformanceSimpleByName



def getPhotovoltaicPerformanceSimplesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PhotovoltaicPerformanceSimple,std::allocator< openstudio::model::PhotovoltaicPerformanceSimple > >":

    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSimplesByName(t_model, t_name, t_exactMatch)

getPhotovoltaicPerformanceSimplesByName = _openstudiomodelgenerators.getPhotovoltaicPerformanceSimplesByName

# This file is compatible with both classic and new-style classes.





