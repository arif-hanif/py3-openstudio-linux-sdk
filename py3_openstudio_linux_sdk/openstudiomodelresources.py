# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudiomodelresources', [dirname(__file__)])
        except ImportError:
            import _openstudiomodelresources
            return _openstudiomodelresources
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudiomodelresources', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudiomodelresources = swig_import_helper()
    del swig_import_helper
else:
    import _openstudiomodelresources
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudiomodelresources.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudiomodelresources.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelresources.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelresources.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelresources.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelresources.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelresources.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelresources.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelresources.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelresources.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelresources.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudiomodelresources.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudiomodelresources.SHARED_PTR_DISOWN_swigconstant(_openstudiomodelresources)
SHARED_PTR_DISOWN = _openstudiomodelresources.SHARED_PTR_DISOWN
import openstudioutilities
import openstudioutilitiescore
import openstudioutilitiestime
import openstudioutilitiesdata
import openstudioutilitiesunits
import openstudioutilitiesplot
import openstudioutilitiesgeometry
import openstudioutilitiessql
import openstudioutilitiesbcl
import openstudioutilitiesidd
import openstudioutilitiesidf
import openstudioutilitiesfiletypes
import openstudiomodelcore
import openstudiomodelsimulation
class ScheduleIntervalVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleIntervalVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleIntervalVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleInterval >::size_type":
        return _openstudiomodelresources.ScheduleIntervalVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleInterval >::value_type":
        return _openstudiomodelresources.ScheduleIntervalVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleInterval >::difference_type', j: 'std::vector< openstudio::model::ScheduleInterval >::difference_type') -> "std::vector< openstudio::model::ScheduleInterval,std::allocator< openstudio::model::ScheduleInterval > > *":
        return _openstudiomodelresources.ScheduleIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleInterval >::difference_type', j: 'std::vector< openstudio::model::ScheduleInterval >::difference_type') -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector___setitem__(self, *args)

    def append(self, x: 'ScheduleInterval') -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleIntervalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleInterval >::size_type":
        return _openstudiomodelresources.ScheduleIntervalVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_clear(self)

    def swap(self, v: 'ScheduleIntervalVector') -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleInterval >::allocator_type":
        return _openstudiomodelresources.ScheduleIntervalVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleInterval >::iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleInterval >::iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleInterval >::iterator":
        return _openstudiomodelresources.ScheduleIntervalVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ScheduleIntervalVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleInterval') -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleIntervalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleIntervalVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleInterval >::size_type', x: 'ScheduleInterval') -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleInterval >::size_type', x: 'ScheduleInterval') -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleInterval >::size_type') -> "void":
        return _openstudiomodelresources.ScheduleIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleInterval >::size_type":
        return _openstudiomodelresources.ScheduleIntervalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleIntervalVector
    __del__ = lambda self: None
ScheduleIntervalVector_swigregister = _openstudiomodelresources.ScheduleIntervalVector_swigregister
ScheduleIntervalVector_swigregister(ScheduleIntervalVector)

class OptionalScheduleInterval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleInterval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleInterval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalScheduleInterval(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleInterval_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleInterval":
        return _openstudiomodelresources.OptionalScheduleInterval___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleInterval_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleInterval_isNull(self)

    def get(self) -> "openstudio::model::ScheduleInterval":
        return _openstudiomodelresources.OptionalScheduleInterval_get(self)

    def set(self, t: 'ScheduleInterval') -> "void":
        return _openstudiomodelresources.OptionalScheduleInterval_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleInterval
    __del__ = lambda self: None
OptionalScheduleInterval_swigregister = _openstudiomodelresources.OptionalScheduleInterval_swigregister
OptionalScheduleInterval_swigregister(OptionalScheduleInterval)

class ScheduleFixedIntervalVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleFixedIntervalVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleFixedIntervalVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::size_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::value_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleFixedInterval >::difference_type', j: 'std::vector< openstudio::model::ScheduleFixedInterval >::difference_type') -> "std::vector< openstudio::model::ScheduleFixedInterval,std::allocator< openstudio::model::ScheduleFixedInterval > > *":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleFixedInterval >::difference_type', j: 'std::vector< openstudio::model::ScheduleFixedInterval >::difference_type') -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleFixedInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector___setitem__(self, *args)

    def append(self, x: 'ScheduleFixedInterval') -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::size_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_clear(self)

    def swap(self, v: 'ScheduleFixedIntervalVector') -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::allocator_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleFixedInterval >::iterator":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ScheduleFixedIntervalVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleFixedInterval') -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleFixedInterval >::size_type', x: 'ScheduleFixedInterval') -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleFixedInterval >::size_type', x: 'ScheduleFixedInterval') -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleFixedInterval >::size_type') -> "void":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleFixedInterval >::size_type":
        return _openstudiomodelresources.ScheduleFixedIntervalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFixedIntervalVector
    __del__ = lambda self: None
ScheduleFixedIntervalVector_swigregister = _openstudiomodelresources.ScheduleFixedIntervalVector_swigregister
ScheduleFixedIntervalVector_swigregister(ScheduleFixedIntervalVector)

class OptionalScheduleFixedInterval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleFixedInterval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleFixedInterval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalScheduleFixedInterval(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleFixedInterval":
        return _openstudiomodelresources.OptionalScheduleFixedInterval___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_isNull(self)

    def get(self) -> "openstudio::model::ScheduleFixedInterval":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_get(self)

    def set(self, t: 'ScheduleFixedInterval') -> "void":
        return _openstudiomodelresources.OptionalScheduleFixedInterval_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleFixedInterval
    __del__ = lambda self: None
OptionalScheduleFixedInterval_swigregister = _openstudiomodelresources.OptionalScheduleFixedInterval_swigregister
OptionalScheduleFixedInterval_swigregister(OptionalScheduleFixedInterval)

class ExternalFileVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalFileVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalFileVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExternalFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExternalFileVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExternalFileVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExternalFile >::size_type":
        return _openstudiomodelresources.ExternalFileVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExternalFile >::value_type":
        return _openstudiomodelresources.ExternalFileVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExternalFile >::difference_type', j: 'std::vector< openstudio::model::ExternalFile >::difference_type') -> "std::vector< openstudio::model::ExternalFile,std::allocator< openstudio::model::ExternalFile > > *":
        return _openstudiomodelresources.ExternalFileVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExternalFileVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExternalFile >::difference_type', j: 'std::vector< openstudio::model::ExternalFile >::difference_type') -> "void":
        return _openstudiomodelresources.ExternalFileVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExternalFileVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExternalFile >::value_type const &":
        return _openstudiomodelresources.ExternalFileVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExternalFileVector___setitem__(self, *args)

    def append(self, x: 'ExternalFile') -> "void":
        return _openstudiomodelresources.ExternalFileVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExternalFileVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExternalFile >::size_type":
        return _openstudiomodelresources.ExternalFileVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExternalFileVector_clear(self)

    def swap(self, v: 'ExternalFileVector') -> "void":
        return _openstudiomodelresources.ExternalFileVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExternalFile >::allocator_type":
        return _openstudiomodelresources.ExternalFileVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExternalFile >::iterator":
        return _openstudiomodelresources.ExternalFileVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExternalFile >::iterator":
        return _openstudiomodelresources.ExternalFileVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExternalFile >::reverse_iterator":
        return _openstudiomodelresources.ExternalFileVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExternalFile >::reverse_iterator":
        return _openstudiomodelresources.ExternalFileVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExternalFileVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExternalFile >::iterator":
        return _openstudiomodelresources.ExternalFileVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ExternalFileVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExternalFile') -> "void":
        return _openstudiomodelresources.ExternalFileVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExternalFile >::value_type const &":
        return _openstudiomodelresources.ExternalFileVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExternalFile >::value_type const &":
        return _openstudiomodelresources.ExternalFileVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExternalFile >::size_type', x: 'ExternalFile') -> "void":
        return _openstudiomodelresources.ExternalFileVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExternalFile >::size_type', x: 'ExternalFile') -> "void":
        return _openstudiomodelresources.ExternalFileVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExternalFileVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExternalFile >::size_type') -> "void":
        return _openstudiomodelresources.ExternalFileVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExternalFile >::size_type":
        return _openstudiomodelresources.ExternalFileVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExternalFileVector
    __del__ = lambda self: None
ExternalFileVector_swigregister = _openstudiomodelresources.ExternalFileVector_swigregister
ExternalFileVector_swigregister(ExternalFileVector)

class OptionalExternalFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExternalFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExternalFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalExternalFile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExternalFile_reset(self)

    def __ref__(self) -> "openstudio::model::ExternalFile":
        return _openstudiomodelresources.OptionalExternalFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExternalFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExternalFile_isNull(self)

    def get(self) -> "openstudio::model::ExternalFile":
        return _openstudiomodelresources.OptionalExternalFile_get(self)

    def set(self, t: 'ExternalFile') -> "void":
        return _openstudiomodelresources.OptionalExternalFile_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExternalFile
    __del__ = lambda self: None
OptionalExternalFile_swigregister = _openstudiomodelresources.OptionalExternalFile_swigregister
OptionalExternalFile_swigregister(OptionalExternalFile)

class ScheduleFileVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleFileVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleFileVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleFileVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleFileVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleFile >::size_type":
        return _openstudiomodelresources.ScheduleFileVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleFile >::value_type":
        return _openstudiomodelresources.ScheduleFileVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleFile >::difference_type', j: 'std::vector< openstudio::model::ScheduleFile >::difference_type') -> "std::vector< openstudio::model::ScheduleFile,std::allocator< openstudio::model::ScheduleFile > > *":
        return _openstudiomodelresources.ScheduleFileVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFileVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleFile >::difference_type', j: 'std::vector< openstudio::model::ScheduleFile >::difference_type') -> "void":
        return _openstudiomodelresources.ScheduleFileVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFileVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleFile >::value_type const &":
        return _openstudiomodelresources.ScheduleFileVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFileVector___setitem__(self, *args)

    def append(self, x: 'ScheduleFile') -> "void":
        return _openstudiomodelresources.ScheduleFileVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleFileVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleFile >::size_type":
        return _openstudiomodelresources.ScheduleFileVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleFileVector_clear(self)

    def swap(self, v: 'ScheduleFileVector') -> "void":
        return _openstudiomodelresources.ScheduleFileVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleFile >::allocator_type":
        return _openstudiomodelresources.ScheduleFileVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleFile >::iterator":
        return _openstudiomodelresources.ScheduleFileVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleFile >::iterator":
        return _openstudiomodelresources.ScheduleFileVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleFile >::reverse_iterator":
        return _openstudiomodelresources.ScheduleFileVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleFile >::reverse_iterator":
        return _openstudiomodelresources.ScheduleFileVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleFileVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleFile >::iterator":
        return _openstudiomodelresources.ScheduleFileVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ScheduleFileVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleFile') -> "void":
        return _openstudiomodelresources.ScheduleFileVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleFile >::value_type const &":
        return _openstudiomodelresources.ScheduleFileVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleFile >::value_type const &":
        return _openstudiomodelresources.ScheduleFileVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleFile >::size_type', x: 'ScheduleFile') -> "void":
        return _openstudiomodelresources.ScheduleFileVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleFile >::size_type', x: 'ScheduleFile') -> "void":
        return _openstudiomodelresources.ScheduleFileVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleFileVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleFile >::size_type') -> "void":
        return _openstudiomodelresources.ScheduleFileVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleFile >::size_type":
        return _openstudiomodelresources.ScheduleFileVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFileVector
    __del__ = lambda self: None
ScheduleFileVector_swigregister = _openstudiomodelresources.ScheduleFileVector_swigregister
ScheduleFileVector_swigregister(ScheduleFileVector)

class OptionalScheduleFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalScheduleFile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleFile_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleFile":
        return _openstudiomodelresources.OptionalScheduleFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleFile_isNull(self)

    def get(self) -> "openstudio::model::ScheduleFile":
        return _openstudiomodelresources.OptionalScheduleFile_get(self)

    def set(self, t: 'ScheduleFile') -> "void":
        return _openstudiomodelresources.OptionalScheduleFile_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleFile
    __del__ = lambda self: None
OptionalScheduleFile_swigregister = _openstudiomodelresources.OptionalScheduleFile_swigregister
OptionalScheduleFile_swigregister(OptionalScheduleFile)

class ScheduleVariableIntervalVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleVariableIntervalVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleVariableIntervalVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::size_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::value_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleVariableInterval >::difference_type', j: 'std::vector< openstudio::model::ScheduleVariableInterval >::difference_type') -> "std::vector< openstudio::model::ScheduleVariableInterval,std::allocator< openstudio::model::ScheduleVariableInterval > > *":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleVariableInterval >::difference_type', j: 'std::vector< openstudio::model::ScheduleVariableInterval >::difference_type') -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleVariableInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector___setitem__(self, *args)

    def append(self, x: 'ScheduleVariableInterval') -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::size_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_clear(self)

    def swap(self, v: 'ScheduleVariableIntervalVector') -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::allocator_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::reverse_iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleVariableInterval >::iterator":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ScheduleVariableIntervalVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleVariableInterval') -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::value_type const &":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleVariableInterval >::size_type', x: 'ScheduleVariableInterval') -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleVariableInterval >::size_type', x: 'ScheduleVariableInterval') -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleVariableInterval >::size_type') -> "void":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleVariableInterval >::size_type":
        return _openstudiomodelresources.ScheduleVariableIntervalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleVariableIntervalVector
    __del__ = lambda self: None
ScheduleVariableIntervalVector_swigregister = _openstudiomodelresources.ScheduleVariableIntervalVector_swigregister
ScheduleVariableIntervalVector_swigregister(ScheduleVariableIntervalVector)

class OptionalScheduleVariableInterval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleVariableInterval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleVariableInterval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalScheduleVariableInterval(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleVariableInterval":
        return _openstudiomodelresources.OptionalScheduleVariableInterval___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_isNull(self)

    def get(self) -> "openstudio::model::ScheduleVariableInterval":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_get(self)

    def set(self, t: 'ScheduleVariableInterval') -> "void":
        return _openstudiomodelresources.OptionalScheduleVariableInterval_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleVariableInterval
    __del__ = lambda self: None
OptionalScheduleVariableInterval_swigregister = _openstudiomodelresources.OptionalScheduleVariableInterval_swigregister
OptionalScheduleVariableInterval_swigregister(OptionalScheduleVariableInterval)

class ScheduleCompactVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleCompactVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleCompactVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleCompactVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleCompactVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleCompactVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleCompact >::size_type":
        return _openstudiomodelresources.ScheduleCompactVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleCompact >::value_type":
        return _openstudiomodelresources.ScheduleCompactVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleCompact >::difference_type', j: 'std::vector< openstudio::model::ScheduleCompact >::difference_type') -> "std::vector< openstudio::model::ScheduleCompact,std::allocator< openstudio::model::ScheduleCompact > > *":
        return _openstudiomodelresources.ScheduleCompactVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleCompact >::difference_type', j: 'std::vector< openstudio::model::ScheduleCompact >::difference_type') -> "void":
        return _openstudiomodelresources.ScheduleCompactVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleCompact >::value_type const &":
        return _openstudiomodelresources.ScheduleCompactVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector___setitem__(self, *args)

    def append(self, x: 'ScheduleCompact') -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleCompactVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleCompact >::size_type":
        return _openstudiomodelresources.ScheduleCompactVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_clear(self)

    def swap(self, v: 'ScheduleCompactVector') -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleCompact >::allocator_type":
        return _openstudiomodelresources.ScheduleCompactVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleCompact >::iterator":
        return _openstudiomodelresources.ScheduleCompactVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleCompact >::iterator":
        return _openstudiomodelresources.ScheduleCompactVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleCompact >::reverse_iterator":
        return _openstudiomodelresources.ScheduleCompactVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleCompact >::reverse_iterator":
        return _openstudiomodelresources.ScheduleCompactVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleCompact >::iterator":
        return _openstudiomodelresources.ScheduleCompactVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ScheduleCompactVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleCompact') -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleCompact >::value_type const &":
        return _openstudiomodelresources.ScheduleCompactVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleCompact >::value_type const &":
        return _openstudiomodelresources.ScheduleCompactVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleCompact >::size_type', x: 'ScheduleCompact') -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleCompact >::size_type', x: 'ScheduleCompact') -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleCompact >::size_type') -> "void":
        return _openstudiomodelresources.ScheduleCompactVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleCompact >::size_type":
        return _openstudiomodelresources.ScheduleCompactVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleCompactVector
    __del__ = lambda self: None
ScheduleCompactVector_swigregister = _openstudiomodelresources.ScheduleCompactVector_swigregister
ScheduleCompactVector_swigregister(ScheduleCompactVector)

class OptionalScheduleCompact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleCompact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleCompact, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalScheduleCompact(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleCompact_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleCompact":
        return _openstudiomodelresources.OptionalScheduleCompact___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleCompact_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleCompact_isNull(self)

    def get(self) -> "openstudio::model::ScheduleCompact":
        return _openstudiomodelresources.OptionalScheduleCompact_get(self)

    def set(self, t: 'ScheduleCompact') -> "void":
        return _openstudiomodelresources.OptionalScheduleCompact_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleCompact
    __del__ = lambda self: None
OptionalScheduleCompact_swigregister = _openstudiomodelresources.OptionalScheduleCompact_swigregister
OptionalScheduleCompact_swigregister(OptionalScheduleCompact)

class ScheduleConstantVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleConstantVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleConstantVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScheduleConstantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScheduleConstantVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScheduleConstantVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ScheduleConstant >::size_type":
        return _openstudiomodelresources.ScheduleConstantVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ScheduleConstant >::value_type":
        return _openstudiomodelresources.ScheduleConstantVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ScheduleConstant >::difference_type', j: 'std::vector< openstudio::model::ScheduleConstant >::difference_type') -> "std::vector< openstudio::model::ScheduleConstant,std::allocator< openstudio::model::ScheduleConstant > > *":
        return _openstudiomodelresources.ScheduleConstantVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ScheduleConstant >::difference_type', j: 'std::vector< openstudio::model::ScheduleConstant >::difference_type') -> "void":
        return _openstudiomodelresources.ScheduleConstantVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ScheduleConstant >::value_type const &":
        return _openstudiomodelresources.ScheduleConstantVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector___setitem__(self, *args)

    def append(self, x: 'ScheduleConstant') -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScheduleConstantVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ScheduleConstant >::size_type":
        return _openstudiomodelresources.ScheduleConstantVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_clear(self)

    def swap(self, v: 'ScheduleConstantVector') -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ScheduleConstant >::allocator_type":
        return _openstudiomodelresources.ScheduleConstantVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ScheduleConstant >::iterator":
        return _openstudiomodelresources.ScheduleConstantVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ScheduleConstant >::iterator":
        return _openstudiomodelresources.ScheduleConstantVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ScheduleConstant >::reverse_iterator":
        return _openstudiomodelresources.ScheduleConstantVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ScheduleConstant >::reverse_iterator":
        return _openstudiomodelresources.ScheduleConstantVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ScheduleConstant >::iterator":
        return _openstudiomodelresources.ScheduleConstantVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ScheduleConstantVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ScheduleConstant') -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ScheduleConstant >::value_type const &":
        return _openstudiomodelresources.ScheduleConstantVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ScheduleConstant >::value_type const &":
        return _openstudiomodelresources.ScheduleConstantVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ScheduleConstant >::size_type', x: 'ScheduleConstant') -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ScheduleConstant >::size_type', x: 'ScheduleConstant') -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ScheduleConstant >::size_type') -> "void":
        return _openstudiomodelresources.ScheduleConstantVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ScheduleConstant >::size_type":
        return _openstudiomodelresources.ScheduleConstantVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleConstantVector
    __del__ = lambda self: None
ScheduleConstantVector_swigregister = _openstudiomodelresources.ScheduleConstantVector_swigregister
ScheduleConstantVector_swigregister(ScheduleConstantVector)

class OptionalScheduleConstant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScheduleConstant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScheduleConstant, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalScheduleConstant(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScheduleConstant_reset(self)

    def __ref__(self) -> "openstudio::model::ScheduleConstant":
        return _openstudiomodelresources.OptionalScheduleConstant___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleConstant_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScheduleConstant_isNull(self)

    def get(self) -> "openstudio::model::ScheduleConstant":
        return _openstudiomodelresources.OptionalScheduleConstant_get(self)

    def set(self, t: 'ScheduleConstant') -> "void":
        return _openstudiomodelresources.OptionalScheduleConstant_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleConstant
    __del__ = lambda self: None
OptionalScheduleConstant_swigregister = _openstudiomodelresources.OptionalScheduleConstant_swigregister
OptionalScheduleConstant_swigregister(OptionalScheduleConstant)

class DefaultScheduleSetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultScheduleSetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultScheduleSetVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DefaultScheduleSetVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DefaultScheduleSetVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DefaultScheduleSetVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::size_type":
        return _openstudiomodelresources.DefaultScheduleSetVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::value_type":
        return _openstudiomodelresources.DefaultScheduleSetVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::DefaultScheduleSet >::difference_type', j: 'std::vector< openstudio::model::DefaultScheduleSet >::difference_type') -> "std::vector< openstudio::model::DefaultScheduleSet,std::allocator< openstudio::model::DefaultScheduleSet > > *":
        return _openstudiomodelresources.DefaultScheduleSetVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::DefaultScheduleSet >::difference_type', j: 'std::vector< openstudio::model::DefaultScheduleSet >::difference_type') -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DefaultScheduleSet >::value_type const &":
        return _openstudiomodelresources.DefaultScheduleSetVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector___setitem__(self, *args)

    def append(self, x: 'DefaultScheduleSet') -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DefaultScheduleSetVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::size_type":
        return _openstudiomodelresources.DefaultScheduleSetVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_clear(self)

    def swap(self, v: 'DefaultScheduleSetVector') -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::allocator_type":
        return _openstudiomodelresources.DefaultScheduleSetVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::reverse_iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::reverse_iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DefaultScheduleSet >::iterator":
        return _openstudiomodelresources.DefaultScheduleSetVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_DefaultScheduleSetVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'DefaultScheduleSet') -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::value_type const &":
        return _openstudiomodelresources.DefaultScheduleSetVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::value_type const &":
        return _openstudiomodelresources.DefaultScheduleSetVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::DefaultScheduleSet >::size_type', x: 'DefaultScheduleSet') -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::DefaultScheduleSet >::size_type', x: 'DefaultScheduleSet') -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::DefaultScheduleSet >::size_type') -> "void":
        return _openstudiomodelresources.DefaultScheduleSetVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DefaultScheduleSet >::size_type":
        return _openstudiomodelresources.DefaultScheduleSetVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultScheduleSetVector
    __del__ = lambda self: None
DefaultScheduleSetVector_swigregister = _openstudiomodelresources.DefaultScheduleSetVector_swigregister
DefaultScheduleSetVector_swigregister(DefaultScheduleSetVector)

class OptionalDefaultScheduleSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDefaultScheduleSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDefaultScheduleSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalDefaultScheduleSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_reset(self)

    def __ref__(self) -> "openstudio::model::DefaultScheduleSet":
        return _openstudiomodelresources.OptionalDefaultScheduleSet___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_isNull(self)

    def get(self) -> "openstudio::model::DefaultScheduleSet":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_get(self)

    def set(self, t: 'DefaultScheduleSet') -> "void":
        return _openstudiomodelresources.OptionalDefaultScheduleSet_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDefaultScheduleSet
    __del__ = lambda self: None
OptionalDefaultScheduleSet_swigregister = _openstudiomodelresources.OptionalDefaultScheduleSet_swigregister
OptionalDefaultScheduleSet_swigregister(OptionalDefaultScheduleSet)

class MaterialPropertyGlazingSpectralDataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialPropertyGlazingSpectralDataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialPropertyGlazingSpectralDataVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::value_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::difference_type', j: 'std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::difference_type') -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData,std::allocator< openstudio::model::MaterialPropertyGlazingSpectralData > > *":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::difference_type', j: 'std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::difference_type') -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___setitem__(self, *args)

    def append(self, x: 'MaterialPropertyGlazingSpectralData') -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_clear(self)

    def swap(self, v: 'MaterialPropertyGlazingSpectralDataVector') -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::allocator_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::reverse_iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::reverse_iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::iterator":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_MaterialPropertyGlazingSpectralDataVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'MaterialPropertyGlazingSpectralData') -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type', x: 'MaterialPropertyGlazingSpectralData') -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type', x: 'MaterialPropertyGlazingSpectralData') -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type') -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData >::size_type":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyGlazingSpectralDataVector
    __del__ = lambda self: None
MaterialPropertyGlazingSpectralDataVector_swigregister = _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_swigregister
MaterialPropertyGlazingSpectralDataVector_swigregister(MaterialPropertyGlazingSpectralDataVector)

class OptionalMaterialPropertyGlazingSpectralData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMaterialPropertyGlazingSpectralData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMaterialPropertyGlazingSpectralData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalMaterialPropertyGlazingSpectralData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_reset(self)

    def __ref__(self) -> "openstudio::model::MaterialPropertyGlazingSpectralData":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_isNull(self)

    def get(self) -> "openstudio::model::MaterialPropertyGlazingSpectralData":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_get(self)

    def set(self, t: 'MaterialPropertyGlazingSpectralData') -> "void":
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterialPropertyGlazingSpectralData
    __del__ = lambda self: None
OptionalMaterialPropertyGlazingSpectralData_swigregister = _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_swigregister
OptionalMaterialPropertyGlazingSpectralData_swigregister(OptionalMaterialPropertyGlazingSpectralData)

class MaterialPropertyMoisturePenetrationDepthSettingsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialPropertyMoisturePenetrationDepthSettingsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialPropertyMoisturePenetrationDepthSettingsVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::value_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::difference_type', j: 'std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::difference_type') -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings,std::allocator< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings > > *":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::difference_type', j: 'std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::difference_type') -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___setitem__(self, *args)

    def append(self, x: 'MaterialPropertyMoisturePenetrationDepthSettings') -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_clear(self)

    def swap(self, v: 'MaterialPropertyMoisturePenetrationDepthSettingsVector') -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::allocator_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::reverse_iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::reverse_iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::iterator":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_MaterialPropertyMoisturePenetrationDepthSettingsVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'MaterialPropertyMoisturePenetrationDepthSettings') -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::value_type const &":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type', x: 'MaterialPropertyMoisturePenetrationDepthSettings') -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type', x: 'MaterialPropertyMoisturePenetrationDepthSettings') -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type') -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >::size_type":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyMoisturePenetrationDepthSettingsVector
    __del__ = lambda self: None
MaterialPropertyMoisturePenetrationDepthSettingsVector_swigregister = _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_swigregister
MaterialPropertyMoisturePenetrationDepthSettingsVector_swigregister(MaterialPropertyMoisturePenetrationDepthSettingsVector)

class OptionalMaterialPropertyMoisturePenetrationDepthSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMaterialPropertyMoisturePenetrationDepthSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMaterialPropertyMoisturePenetrationDepthSettings, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalMaterialPropertyMoisturePenetrationDepthSettings(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_reset(self)

    def __ref__(self) -> "openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_isNull(self)

    def get(self) -> "openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_get(self)

    def set(self, t: 'MaterialPropertyMoisturePenetrationDepthSettings') -> "void":
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterialPropertyMoisturePenetrationDepthSettings
    __del__ = lambda self: None
OptionalMaterialPropertyMoisturePenetrationDepthSettings_swigregister = _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_swigregister
OptionalMaterialPropertyMoisturePenetrationDepthSettings_swigregister(OptionalMaterialPropertyMoisturePenetrationDepthSettings)

class MaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.MaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.MaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.MaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Material >::size_type":
        return _openstudiomodelresources.MaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Material >::value_type":
        return _openstudiomodelresources.MaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Material >::difference_type', j: 'std::vector< openstudio::model::Material >::difference_type') -> "std::vector< openstudio::model::Material,std::allocator< openstudio::model::Material > > *":
        return _openstudiomodelresources.MaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Material >::difference_type', j: 'std::vector< openstudio::model::Material >::difference_type') -> "void":
        return _openstudiomodelresources.MaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Material >::value_type const &":
        return _openstudiomodelresources.MaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.MaterialVector___setitem__(self, *args)

    def append(self, x: 'Material') -> "void":
        return _openstudiomodelresources.MaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.MaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Material >::size_type":
        return _openstudiomodelresources.MaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.MaterialVector_clear(self)

    def swap(self, v: 'MaterialVector') -> "void":
        return _openstudiomodelresources.MaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Material >::allocator_type":
        return _openstudiomodelresources.MaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Material >::iterator":
        return _openstudiomodelresources.MaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Material >::iterator":
        return _openstudiomodelresources.MaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Material >::reverse_iterator":
        return _openstudiomodelresources.MaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Material >::reverse_iterator":
        return _openstudiomodelresources.MaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.MaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Material >::iterator":
        return _openstudiomodelresources.MaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_MaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Material') -> "void":
        return _openstudiomodelresources.MaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Material >::value_type const &":
        return _openstudiomodelresources.MaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Material >::value_type const &":
        return _openstudiomodelresources.MaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Material >::size_type', x: 'Material') -> "void":
        return _openstudiomodelresources.MaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Material >::size_type', x: 'Material') -> "void":
        return _openstudiomodelresources.MaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.MaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Material >::size_type') -> "void":
        return _openstudiomodelresources.MaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Material >::size_type":
        return _openstudiomodelresources.MaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialVector
    __del__ = lambda self: None
MaterialVector_swigregister = _openstudiomodelresources.MaterialVector_swigregister
MaterialVector_swigregister(MaterialVector)

class OptionalMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::Material":
        return _openstudiomodelresources.OptionalMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalMaterial_isNull(self)

    def get(self) -> "openstudio::model::Material":
        return _openstudiomodelresources.OptionalMaterial_get(self)

    def set(self, t: 'Material') -> "void":
        return _openstudiomodelresources.OptionalMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterial
    __del__ = lambda self: None
OptionalMaterial_swigregister = _openstudiomodelresources.OptionalMaterial_swigregister
OptionalMaterial_swigregister(OptionalMaterial)

class FenestrationMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FenestrationMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FenestrationMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.FenestrationMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.FenestrationMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.FenestrationMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FenestrationMaterial >::size_type":
        return _openstudiomodelresources.FenestrationMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::FenestrationMaterial >::value_type":
        return _openstudiomodelresources.FenestrationMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::FenestrationMaterial >::difference_type', j: 'std::vector< openstudio::model::FenestrationMaterial >::difference_type') -> "std::vector< openstudio::model::FenestrationMaterial,std::allocator< openstudio::model::FenestrationMaterial > > *":
        return _openstudiomodelresources.FenestrationMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::FenestrationMaterial >::difference_type', j: 'std::vector< openstudio::model::FenestrationMaterial >::difference_type') -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FenestrationMaterial >::value_type const &":
        return _openstudiomodelresources.FenestrationMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector___setitem__(self, *args)

    def append(self, x: 'FenestrationMaterial') -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.FenestrationMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FenestrationMaterial >::size_type":
        return _openstudiomodelresources.FenestrationMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_clear(self)

    def swap(self, v: 'FenestrationMaterialVector') -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::FenestrationMaterial >::allocator_type":
        return _openstudiomodelresources.FenestrationMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::FenestrationMaterial >::iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FenestrationMaterial >::iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FenestrationMaterial >::reverse_iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FenestrationMaterial >::reverse_iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FenestrationMaterial >::iterator":
        return _openstudiomodelresources.FenestrationMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_FenestrationMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'FenestrationMaterial') -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FenestrationMaterial >::value_type const &":
        return _openstudiomodelresources.FenestrationMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FenestrationMaterial >::value_type const &":
        return _openstudiomodelresources.FenestrationMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::FenestrationMaterial >::size_type', x: 'FenestrationMaterial') -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::FenestrationMaterial >::size_type', x: 'FenestrationMaterial') -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::FenestrationMaterial >::size_type') -> "void":
        return _openstudiomodelresources.FenestrationMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FenestrationMaterial >::size_type":
        return _openstudiomodelresources.FenestrationMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_FenestrationMaterialVector
    __del__ = lambda self: None
FenestrationMaterialVector_swigregister = _openstudiomodelresources.FenestrationMaterialVector_swigregister
FenestrationMaterialVector_swigregister(FenestrationMaterialVector)

class OptionalFenestrationMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalFenestrationMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalFenestrationMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalFenestrationMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalFenestrationMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::FenestrationMaterial":
        return _openstudiomodelresources.OptionalFenestrationMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalFenestrationMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalFenestrationMaterial_isNull(self)

    def get(self) -> "openstudio::model::FenestrationMaterial":
        return _openstudiomodelresources.OptionalFenestrationMaterial_get(self)

    def set(self, t: 'FenestrationMaterial') -> "void":
        return _openstudiomodelresources.OptionalFenestrationMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalFenestrationMaterial
    __del__ = lambda self: None
OptionalFenestrationMaterial_swigregister = _openstudiomodelresources.OptionalFenestrationMaterial_swigregister
OptionalFenestrationMaterial_swigregister(OptionalFenestrationMaterial)

class GasLayerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GasLayerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GasLayerVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GasLayerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GasLayerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GasLayerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GasLayer >::size_type":
        return _openstudiomodelresources.GasLayerVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::GasLayer >::value_type":
        return _openstudiomodelresources.GasLayerVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::GasLayer >::difference_type', j: 'std::vector< openstudio::model::GasLayer >::difference_type') -> "std::vector< openstudio::model::GasLayer,std::allocator< openstudio::model::GasLayer > > *":
        return _openstudiomodelresources.GasLayerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GasLayerVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::GasLayer >::difference_type', j: 'std::vector< openstudio::model::GasLayer >::difference_type') -> "void":
        return _openstudiomodelresources.GasLayerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasLayerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GasLayer >::value_type const &":
        return _openstudiomodelresources.GasLayerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasLayerVector___setitem__(self, *args)

    def append(self, x: 'GasLayer') -> "void":
        return _openstudiomodelresources.GasLayerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GasLayerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GasLayer >::size_type":
        return _openstudiomodelresources.GasLayerVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GasLayerVector_clear(self)

    def swap(self, v: 'GasLayerVector') -> "void":
        return _openstudiomodelresources.GasLayerVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::GasLayer >::allocator_type":
        return _openstudiomodelresources.GasLayerVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::GasLayer >::iterator":
        return _openstudiomodelresources.GasLayerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GasLayer >::iterator":
        return _openstudiomodelresources.GasLayerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GasLayer >::reverse_iterator":
        return _openstudiomodelresources.GasLayerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GasLayer >::reverse_iterator":
        return _openstudiomodelresources.GasLayerVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GasLayerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GasLayer >::iterator":
        return _openstudiomodelresources.GasLayerVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_GasLayerVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'GasLayer') -> "void":
        return _openstudiomodelresources.GasLayerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GasLayer >::value_type const &":
        return _openstudiomodelresources.GasLayerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GasLayer >::value_type const &":
        return _openstudiomodelresources.GasLayerVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::GasLayer >::size_type', x: 'GasLayer') -> "void":
        return _openstudiomodelresources.GasLayerVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::GasLayer >::size_type', x: 'GasLayer') -> "void":
        return _openstudiomodelresources.GasLayerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GasLayerVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::GasLayer >::size_type') -> "void":
        return _openstudiomodelresources.GasLayerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GasLayer >::size_type":
        return _openstudiomodelresources.GasLayerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasLayerVector
    __del__ = lambda self: None
GasLayerVector_swigregister = _openstudiomodelresources.GasLayerVector_swigregister
GasLayerVector_swigregister(GasLayerVector)

class OptionalGasLayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGasLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGasLayer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalGasLayer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGasLayer_reset(self)

    def __ref__(self) -> "openstudio::model::GasLayer":
        return _openstudiomodelresources.OptionalGasLayer___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGasLayer_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGasLayer_isNull(self)

    def get(self) -> "openstudio::model::GasLayer":
        return _openstudiomodelresources.OptionalGasLayer_get(self)

    def set(self, t: 'GasLayer') -> "void":
        return _openstudiomodelresources.OptionalGasLayer_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGasLayer
    __del__ = lambda self: None
OptionalGasLayer_swigregister = _openstudiomodelresources.OptionalGasLayer_swigregister
OptionalGasLayer_swigregister(OptionalGasLayer)

class GlazingVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlazingVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlazingVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Glazing >::size_type":
        return _openstudiomodelresources.GlazingVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Glazing >::value_type":
        return _openstudiomodelresources.GlazingVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Glazing >::difference_type', j: 'std::vector< openstudio::model::Glazing >::difference_type') -> "std::vector< openstudio::model::Glazing,std::allocator< openstudio::model::Glazing > > *":
        return _openstudiomodelresources.GlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GlazingVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Glazing >::difference_type', j: 'std::vector< openstudio::model::Glazing >::difference_type') -> "void":
        return _openstudiomodelresources.GlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Glazing >::value_type const &":
        return _openstudiomodelresources.GlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GlazingVector___setitem__(self, *args)

    def append(self, x: 'Glazing') -> "void":
        return _openstudiomodelresources.GlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Glazing >::size_type":
        return _openstudiomodelresources.GlazingVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GlazingVector_clear(self)

    def swap(self, v: 'GlazingVector') -> "void":
        return _openstudiomodelresources.GlazingVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Glazing >::allocator_type":
        return _openstudiomodelresources.GlazingVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Glazing >::iterator":
        return _openstudiomodelresources.GlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Glazing >::iterator":
        return _openstudiomodelresources.GlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Glazing >::reverse_iterator":
        return _openstudiomodelresources.GlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Glazing >::reverse_iterator":
        return _openstudiomodelresources.GlazingVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Glazing >::iterator":
        return _openstudiomodelresources.GlazingVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_GlazingVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Glazing') -> "void":
        return _openstudiomodelresources.GlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Glazing >::value_type const &":
        return _openstudiomodelresources.GlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Glazing >::value_type const &":
        return _openstudiomodelresources.GlazingVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Glazing >::size_type', x: 'Glazing') -> "void":
        return _openstudiomodelresources.GlazingVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Glazing >::size_type', x: 'Glazing') -> "void":
        return _openstudiomodelresources.GlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GlazingVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Glazing >::size_type') -> "void":
        return _openstudiomodelresources.GlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Glazing >::size_type":
        return _openstudiomodelresources.GlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GlazingVector
    __del__ = lambda self: None
GlazingVector_swigregister = _openstudiomodelresources.GlazingVector_swigregister
GlazingVector_swigregister(GlazingVector)

class OptionalGlazing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGlazing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGlazing, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalGlazing(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::Glazing":
        return _openstudiomodelresources.OptionalGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGlazing_isNull(self)

    def get(self) -> "openstudio::model::Glazing":
        return _openstudiomodelresources.OptionalGlazing_get(self)

    def set(self, t: 'Glazing') -> "void":
        return _openstudiomodelresources.OptionalGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGlazing
    __del__ = lambda self: None
OptionalGlazing_swigregister = _openstudiomodelresources.OptionalGlazing_swigregister
OptionalGlazing_swigregister(OptionalGlazing)

class ShadingMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ShadingMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ShadingMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ShadingMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ShadingMaterial >::size_type":
        return _openstudiomodelresources.ShadingMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ShadingMaterial >::value_type":
        return _openstudiomodelresources.ShadingMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ShadingMaterial >::difference_type', j: 'std::vector< openstudio::model::ShadingMaterial >::difference_type') -> "std::vector< openstudio::model::ShadingMaterial,std::allocator< openstudio::model::ShadingMaterial > > *":
        return _openstudiomodelresources.ShadingMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ShadingMaterial >::difference_type', j: 'std::vector< openstudio::model::ShadingMaterial >::difference_type') -> "void":
        return _openstudiomodelresources.ShadingMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ShadingMaterial >::value_type const &":
        return _openstudiomodelresources.ShadingMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector___setitem__(self, *args)

    def append(self, x: 'ShadingMaterial') -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ShadingMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ShadingMaterial >::size_type":
        return _openstudiomodelresources.ShadingMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_clear(self)

    def swap(self, v: 'ShadingMaterialVector') -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ShadingMaterial >::allocator_type":
        return _openstudiomodelresources.ShadingMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ShadingMaterial >::iterator":
        return _openstudiomodelresources.ShadingMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ShadingMaterial >::iterator":
        return _openstudiomodelresources.ShadingMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ShadingMaterial >::reverse_iterator":
        return _openstudiomodelresources.ShadingMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ShadingMaterial >::reverse_iterator":
        return _openstudiomodelresources.ShadingMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ShadingMaterial >::iterator":
        return _openstudiomodelresources.ShadingMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ShadingMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ShadingMaterial') -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ShadingMaterial >::value_type const &":
        return _openstudiomodelresources.ShadingMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ShadingMaterial >::value_type const &":
        return _openstudiomodelresources.ShadingMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ShadingMaterial >::size_type', x: 'ShadingMaterial') -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ShadingMaterial >::size_type', x: 'ShadingMaterial') -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ShadingMaterial >::size_type') -> "void":
        return _openstudiomodelresources.ShadingMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ShadingMaterial >::size_type":
        return _openstudiomodelresources.ShadingMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingMaterialVector
    __del__ = lambda self: None
ShadingMaterialVector_swigregister = _openstudiomodelresources.ShadingMaterialVector_swigregister
ShadingMaterialVector_swigregister(ShadingMaterialVector)

class OptionalShadingMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalShadingMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalShadingMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalShadingMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalShadingMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::ShadingMaterial":
        return _openstudiomodelresources.OptionalShadingMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalShadingMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalShadingMaterial_isNull(self)

    def get(self) -> "openstudio::model::ShadingMaterial":
        return _openstudiomodelresources.OptionalShadingMaterial_get(self)

    def set(self, t: 'ShadingMaterial') -> "void":
        return _openstudiomodelresources.OptionalShadingMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalShadingMaterial
    __del__ = lambda self: None
OptionalShadingMaterial_swigregister = _openstudiomodelresources.OptionalShadingMaterial_swigregister
OptionalShadingMaterial_swigregister(OptionalShadingMaterial)

class ModelPartitionMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPartitionMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPartitionMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ModelPartitionMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ModelPartitionMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ModelPartitionMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::size_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::value_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ModelPartitionMaterial >::difference_type', j: 'std::vector< openstudio::model::ModelPartitionMaterial >::difference_type') -> "std::vector< openstudio::model::ModelPartitionMaterial,std::allocator< openstudio::model::ModelPartitionMaterial > > *":
        return _openstudiomodelresources.ModelPartitionMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ModelPartitionMaterial >::difference_type', j: 'std::vector< openstudio::model::ModelPartitionMaterial >::difference_type') -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ModelPartitionMaterial >::value_type const &":
        return _openstudiomodelresources.ModelPartitionMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector___setitem__(self, *args)

    def append(self, x: 'ModelPartitionMaterial') -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ModelPartitionMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::size_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_clear(self)

    def swap(self, v: 'ModelPartitionMaterialVector') -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::allocator_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::reverse_iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::reverse_iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ModelPartitionMaterial >::iterator":
        return _openstudiomodelresources.ModelPartitionMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ModelPartitionMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ModelPartitionMaterial') -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::value_type const &":
        return _openstudiomodelresources.ModelPartitionMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::value_type const &":
        return _openstudiomodelresources.ModelPartitionMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ModelPartitionMaterial >::size_type', x: 'ModelPartitionMaterial') -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ModelPartitionMaterial >::size_type', x: 'ModelPartitionMaterial') -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ModelPartitionMaterial >::size_type') -> "void":
        return _openstudiomodelresources.ModelPartitionMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ModelPartitionMaterial >::size_type":
        return _openstudiomodelresources.ModelPartitionMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ModelPartitionMaterialVector
    __del__ = lambda self: None
ModelPartitionMaterialVector_swigregister = _openstudiomodelresources.ModelPartitionMaterialVector_swigregister
ModelPartitionMaterialVector_swigregister(ModelPartitionMaterialVector)

class OptionalModelPartitionMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalModelPartitionMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalModelPartitionMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalModelPartitionMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::ModelPartitionMaterial":
        return _openstudiomodelresources.OptionalModelPartitionMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_isNull(self)

    def get(self) -> "openstudio::model::ModelPartitionMaterial":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_get(self)

    def set(self, t: 'ModelPartitionMaterial') -> "void":
        return _openstudiomodelresources.OptionalModelPartitionMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalModelPartitionMaterial
    __del__ = lambda self: None
OptionalModelPartitionMaterial_swigregister = _openstudiomodelresources.OptionalModelPartitionMaterial_swigregister
OptionalModelPartitionMaterial_swigregister(OptionalModelPartitionMaterial)

class OpaqueMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpaqueMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpaqueMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.OpaqueMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.OpaqueMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.OpaqueMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::OpaqueMaterial >::size_type":
        return _openstudiomodelresources.OpaqueMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::OpaqueMaterial >::value_type":
        return _openstudiomodelresources.OpaqueMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::OpaqueMaterial >::difference_type', j: 'std::vector< openstudio::model::OpaqueMaterial >::difference_type') -> "std::vector< openstudio::model::OpaqueMaterial,std::allocator< openstudio::model::OpaqueMaterial > > *":
        return _openstudiomodelresources.OpaqueMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::OpaqueMaterial >::difference_type', j: 'std::vector< openstudio::model::OpaqueMaterial >::difference_type') -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::OpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.OpaqueMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector___setitem__(self, *args)

    def append(self, x: 'OpaqueMaterial') -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.OpaqueMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::OpaqueMaterial >::size_type":
        return _openstudiomodelresources.OpaqueMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_clear(self)

    def swap(self, v: 'OpaqueMaterialVector') -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::OpaqueMaterial >::allocator_type":
        return _openstudiomodelresources.OpaqueMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::OpaqueMaterial >::iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::OpaqueMaterial >::iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::OpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::OpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::OpaqueMaterial >::iterator":
        return _openstudiomodelresources.OpaqueMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OpaqueMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'OpaqueMaterial') -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::OpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.OpaqueMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::OpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.OpaqueMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::OpaqueMaterial >::size_type', x: 'OpaqueMaterial') -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::OpaqueMaterial >::size_type', x: 'OpaqueMaterial') -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::OpaqueMaterial >::size_type') -> "void":
        return _openstudiomodelresources.OpaqueMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::OpaqueMaterial >::size_type":
        return _openstudiomodelresources.OpaqueMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_OpaqueMaterialVector
    __del__ = lambda self: None
OpaqueMaterialVector_swigregister = _openstudiomodelresources.OpaqueMaterialVector_swigregister
OpaqueMaterialVector_swigregister(OpaqueMaterialVector)

class OptionalOpaqueMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalOpaqueMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalOpaqueMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalOpaqueMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalOpaqueMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::OpaqueMaterial":
        return _openstudiomodelresources.OptionalOpaqueMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalOpaqueMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalOpaqueMaterial_isNull(self)

    def get(self) -> "openstudio::model::OpaqueMaterial":
        return _openstudiomodelresources.OptionalOpaqueMaterial_get(self)

    def set(self, t: 'OpaqueMaterial') -> "void":
        return _openstudiomodelresources.OptionalOpaqueMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalOpaqueMaterial
    __del__ = lambda self: None
OptionalOpaqueMaterial_swigregister = _openstudiomodelresources.OptionalOpaqueMaterial_swigregister
OptionalOpaqueMaterial_swigregister(OptionalOpaqueMaterial)

class AirWallMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AirWallMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AirWallMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.AirWallMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.AirWallMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.AirWallMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirWallMaterial >::size_type":
        return _openstudiomodelresources.AirWallMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::AirWallMaterial >::value_type":
        return _openstudiomodelresources.AirWallMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::AirWallMaterial >::difference_type', j: 'std::vector< openstudio::model::AirWallMaterial >::difference_type') -> "std::vector< openstudio::model::AirWallMaterial,std::allocator< openstudio::model::AirWallMaterial > > *":
        return _openstudiomodelresources.AirWallMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::AirWallMaterial >::difference_type', j: 'std::vector< openstudio::model::AirWallMaterial >::difference_type') -> "void":
        return _openstudiomodelresources.AirWallMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirWallMaterial >::value_type const &":
        return _openstudiomodelresources.AirWallMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector___setitem__(self, *args)

    def append(self, x: 'AirWallMaterial') -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.AirWallMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirWallMaterial >::size_type":
        return _openstudiomodelresources.AirWallMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_clear(self)

    def swap(self, v: 'AirWallMaterialVector') -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::AirWallMaterial >::allocator_type":
        return _openstudiomodelresources.AirWallMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::AirWallMaterial >::iterator":
        return _openstudiomodelresources.AirWallMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirWallMaterial >::iterator":
        return _openstudiomodelresources.AirWallMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirWallMaterial >::reverse_iterator":
        return _openstudiomodelresources.AirWallMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirWallMaterial >::reverse_iterator":
        return _openstudiomodelresources.AirWallMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirWallMaterial >::iterator":
        return _openstudiomodelresources.AirWallMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_AirWallMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'AirWallMaterial') -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirWallMaterial >::value_type const &":
        return _openstudiomodelresources.AirWallMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirWallMaterial >::value_type const &":
        return _openstudiomodelresources.AirWallMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::AirWallMaterial >::size_type', x: 'AirWallMaterial') -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::AirWallMaterial >::size_type', x: 'AirWallMaterial') -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::AirWallMaterial >::size_type') -> "void":
        return _openstudiomodelresources.AirWallMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirWallMaterial >::size_type":
        return _openstudiomodelresources.AirWallMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_AirWallMaterialVector
    __del__ = lambda self: None
AirWallMaterialVector_swigregister = _openstudiomodelresources.AirWallMaterialVector_swigregister
AirWallMaterialVector_swigregister(AirWallMaterialVector)

class OptionalAirWallMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirWallMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirWallMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalAirWallMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalAirWallMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::AirWallMaterial":
        return _openstudiomodelresources.OptionalAirWallMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalAirWallMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalAirWallMaterial_isNull(self)

    def get(self) -> "openstudio::model::AirWallMaterial":
        return _openstudiomodelresources.OptionalAirWallMaterial_get(self)

    def set(self, t: 'AirWallMaterial') -> "void":
        return _openstudiomodelresources.OptionalAirWallMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalAirWallMaterial
    __del__ = lambda self: None
OptionalAirWallMaterial_swigregister = _openstudiomodelresources.OptionalAirWallMaterial_swigregister
OptionalAirWallMaterial_swigregister(OptionalAirWallMaterial)

class BlindVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlindVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlindVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.BlindVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.BlindVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.BlindVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Blind >::size_type":
        return _openstudiomodelresources.BlindVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Blind >::value_type":
        return _openstudiomodelresources.BlindVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Blind >::difference_type', j: 'std::vector< openstudio::model::Blind >::difference_type') -> "std::vector< openstudio::model::Blind,std::allocator< openstudio::model::Blind > > *":
        return _openstudiomodelresources.BlindVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.BlindVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Blind >::difference_type', j: 'std::vector< openstudio::model::Blind >::difference_type') -> "void":
        return _openstudiomodelresources.BlindVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.BlindVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Blind >::value_type const &":
        return _openstudiomodelresources.BlindVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.BlindVector___setitem__(self, *args)

    def append(self, x: 'Blind') -> "void":
        return _openstudiomodelresources.BlindVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.BlindVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Blind >::size_type":
        return _openstudiomodelresources.BlindVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.BlindVector_clear(self)

    def swap(self, v: 'BlindVector') -> "void":
        return _openstudiomodelresources.BlindVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Blind >::allocator_type":
        return _openstudiomodelresources.BlindVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Blind >::iterator":
        return _openstudiomodelresources.BlindVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Blind >::iterator":
        return _openstudiomodelresources.BlindVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Blind >::reverse_iterator":
        return _openstudiomodelresources.BlindVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Blind >::reverse_iterator":
        return _openstudiomodelresources.BlindVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.BlindVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Blind >::iterator":
        return _openstudiomodelresources.BlindVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_BlindVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Blind') -> "void":
        return _openstudiomodelresources.BlindVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Blind >::value_type const &":
        return _openstudiomodelresources.BlindVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Blind >::value_type const &":
        return _openstudiomodelresources.BlindVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Blind >::size_type', x: 'Blind') -> "void":
        return _openstudiomodelresources.BlindVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Blind >::size_type', x: 'Blind') -> "void":
        return _openstudiomodelresources.BlindVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.BlindVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Blind >::size_type') -> "void":
        return _openstudiomodelresources.BlindVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Blind >::size_type":
        return _openstudiomodelresources.BlindVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_BlindVector
    __del__ = lambda self: None
BlindVector_swigregister = _openstudiomodelresources.BlindVector_swigregister
BlindVector_swigregister(BlindVector)

class OptionalBlind(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBlind, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBlind, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalBlind(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalBlind_reset(self)

    def __ref__(self) -> "openstudio::model::Blind":
        return _openstudiomodelresources.OptionalBlind___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalBlind_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalBlind_isNull(self)

    def get(self) -> "openstudio::model::Blind":
        return _openstudiomodelresources.OptionalBlind_get(self)

    def set(self, t: 'Blind') -> "void":
        return _openstudiomodelresources.OptionalBlind_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalBlind
    __del__ = lambda self: None
OptionalBlind_swigregister = _openstudiomodelresources.OptionalBlind_swigregister
OptionalBlind_swigregister(OptionalBlind)

class DaylightRedirectionDeviceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DaylightRedirectionDeviceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DaylightRedirectionDeviceVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::size_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::value_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::DaylightRedirectionDevice >::difference_type', j: 'std::vector< openstudio::model::DaylightRedirectionDevice >::difference_type') -> "std::vector< openstudio::model::DaylightRedirectionDevice,std::allocator< openstudio::model::DaylightRedirectionDevice > > *":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::DaylightRedirectionDevice >::difference_type', j: 'std::vector< openstudio::model::DaylightRedirectionDevice >::difference_type') -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::value_type const &":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___setitem__(self, *args)

    def append(self, x: 'DaylightRedirectionDevice') -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::size_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_clear(self)

    def swap(self, v: 'DaylightRedirectionDeviceVector') -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::allocator_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::reverse_iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::reverse_iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::iterator":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_DaylightRedirectionDeviceVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'DaylightRedirectionDevice') -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::value_type const &":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::value_type const &":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::DaylightRedirectionDevice >::size_type', x: 'DaylightRedirectionDevice') -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::DaylightRedirectionDevice >::size_type', x: 'DaylightRedirectionDevice') -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::DaylightRedirectionDevice >::size_type') -> "void":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DaylightRedirectionDevice >::size_type":
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DaylightRedirectionDeviceVector
    __del__ = lambda self: None
DaylightRedirectionDeviceVector_swigregister = _openstudiomodelresources.DaylightRedirectionDeviceVector_swigregister
DaylightRedirectionDeviceVector_swigregister(DaylightRedirectionDeviceVector)

class OptionalDaylightRedirectionDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDaylightRedirectionDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDaylightRedirectionDevice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalDaylightRedirectionDevice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_reset(self)

    def __ref__(self) -> "openstudio::model::DaylightRedirectionDevice":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_isNull(self)

    def get(self) -> "openstudio::model::DaylightRedirectionDevice":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_get(self)

    def set(self, t: 'DaylightRedirectionDevice') -> "void":
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDaylightRedirectionDevice
    __del__ = lambda self: None
OptionalDaylightRedirectionDevice_swigregister = _openstudiomodelresources.OptionalDaylightRedirectionDevice_swigregister
OptionalDaylightRedirectionDevice_swigregister(OptionalDaylightRedirectionDevice)

class AirGapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AirGapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AirGapVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.AirGapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.AirGapVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.AirGapVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::AirGap >::size_type":
        return _openstudiomodelresources.AirGapVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::AirGap >::value_type":
        return _openstudiomodelresources.AirGapVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::AirGap >::difference_type', j: 'std::vector< openstudio::model::AirGap >::difference_type') -> "std::vector< openstudio::model::AirGap,std::allocator< openstudio::model::AirGap > > *":
        return _openstudiomodelresources.AirGapVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.AirGapVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::AirGap >::difference_type', j: 'std::vector< openstudio::model::AirGap >::difference_type') -> "void":
        return _openstudiomodelresources.AirGapVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.AirGapVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirGap >::value_type const &":
        return _openstudiomodelresources.AirGapVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.AirGapVector___setitem__(self, *args)

    def append(self, x: 'AirGap') -> "void":
        return _openstudiomodelresources.AirGapVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.AirGapVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::AirGap >::size_type":
        return _openstudiomodelresources.AirGapVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.AirGapVector_clear(self)

    def swap(self, v: 'AirGapVector') -> "void":
        return _openstudiomodelresources.AirGapVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::AirGap >::allocator_type":
        return _openstudiomodelresources.AirGapVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::AirGap >::iterator":
        return _openstudiomodelresources.AirGapVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::AirGap >::iterator":
        return _openstudiomodelresources.AirGapVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::AirGap >::reverse_iterator":
        return _openstudiomodelresources.AirGapVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::AirGap >::reverse_iterator":
        return _openstudiomodelresources.AirGapVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.AirGapVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::AirGap >::iterator":
        return _openstudiomodelresources.AirGapVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_AirGapVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'AirGap') -> "void":
        return _openstudiomodelresources.AirGapVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::AirGap >::value_type const &":
        return _openstudiomodelresources.AirGapVector_front(self)

    def back(self) -> "std::vector< openstudio::model::AirGap >::value_type const &":
        return _openstudiomodelresources.AirGapVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::AirGap >::size_type', x: 'AirGap') -> "void":
        return _openstudiomodelresources.AirGapVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::AirGap >::size_type', x: 'AirGap') -> "void":
        return _openstudiomodelresources.AirGapVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.AirGapVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::AirGap >::size_type') -> "void":
        return _openstudiomodelresources.AirGapVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::AirGap >::size_type":
        return _openstudiomodelresources.AirGapVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_AirGapVector
    __del__ = lambda self: None
AirGapVector_swigregister = _openstudiomodelresources.AirGapVector_swigregister
AirGapVector_swigregister(AirGapVector)

class OptionalAirGap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirGap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirGap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalAirGap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalAirGap_reset(self)

    def __ref__(self) -> "openstudio::model::AirGap":
        return _openstudiomodelresources.OptionalAirGap___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalAirGap_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalAirGap_isNull(self)

    def get(self) -> "openstudio::model::AirGap":
        return _openstudiomodelresources.OptionalAirGap_get(self)

    def set(self, t: 'AirGap') -> "void":
        return _openstudiomodelresources.OptionalAirGap_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalAirGap
    __del__ = lambda self: None
OptionalAirGap_swigregister = _openstudiomodelresources.OptionalAirGap_swigregister
OptionalAirGap_swigregister(OptionalAirGap)

class GasVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GasVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GasVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GasVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GasVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GasVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Gas >::size_type":
        return _openstudiomodelresources.GasVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Gas >::value_type":
        return _openstudiomodelresources.GasVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Gas >::difference_type', j: 'std::vector< openstudio::model::Gas >::difference_type') -> "std::vector< openstudio::model::Gas,std::allocator< openstudio::model::Gas > > *":
        return _openstudiomodelresources.GasVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GasVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Gas >::difference_type', j: 'std::vector< openstudio::model::Gas >::difference_type') -> "void":
        return _openstudiomodelresources.GasVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Gas >::value_type const &":
        return _openstudiomodelresources.GasVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasVector___setitem__(self, *args)

    def append(self, x: 'Gas') -> "void":
        return _openstudiomodelresources.GasVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GasVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Gas >::size_type":
        return _openstudiomodelresources.GasVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GasVector_clear(self)

    def swap(self, v: 'GasVector') -> "void":
        return _openstudiomodelresources.GasVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Gas >::allocator_type":
        return _openstudiomodelresources.GasVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Gas >::iterator":
        return _openstudiomodelresources.GasVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Gas >::iterator":
        return _openstudiomodelresources.GasVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Gas >::reverse_iterator":
        return _openstudiomodelresources.GasVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Gas >::reverse_iterator":
        return _openstudiomodelresources.GasVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GasVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Gas >::iterator":
        return _openstudiomodelresources.GasVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_GasVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Gas') -> "void":
        return _openstudiomodelresources.GasVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Gas >::value_type const &":
        return _openstudiomodelresources.GasVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Gas >::value_type const &":
        return _openstudiomodelresources.GasVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Gas >::size_type', x: 'Gas') -> "void":
        return _openstudiomodelresources.GasVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Gas >::size_type', x: 'Gas') -> "void":
        return _openstudiomodelresources.GasVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GasVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Gas >::size_type') -> "void":
        return _openstudiomodelresources.GasVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Gas >::size_type":
        return _openstudiomodelresources.GasVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasVector
    __del__ = lambda self: None
GasVector_swigregister = _openstudiomodelresources.GasVector_swigregister
GasVector_swigregister(GasVector)

class OptionalGas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGas, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalGas(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGas_reset(self)

    def __ref__(self) -> "openstudio::model::Gas":
        return _openstudiomodelresources.OptionalGas___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGas_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGas_isNull(self)

    def get(self) -> "openstudio::model::Gas":
        return _openstudiomodelresources.OptionalGas_get(self)

    def set(self, t: 'Gas') -> "void":
        return _openstudiomodelresources.OptionalGas_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGas
    __del__ = lambda self: None
OptionalGas_swigregister = _openstudiomodelresources.OptionalGas_swigregister
OptionalGas_swigregister(OptionalGas)

class GasMixtureVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GasMixtureVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GasMixtureVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GasMixtureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GasMixtureVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GasMixtureVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GasMixture >::size_type":
        return _openstudiomodelresources.GasMixtureVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::GasMixture >::value_type":
        return _openstudiomodelresources.GasMixtureVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::GasMixture >::difference_type', j: 'std::vector< openstudio::model::GasMixture >::difference_type') -> "std::vector< openstudio::model::GasMixture,std::allocator< openstudio::model::GasMixture > > *":
        return _openstudiomodelresources.GasMixtureVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GasMixtureVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::GasMixture >::difference_type', j: 'std::vector< openstudio::model::GasMixture >::difference_type') -> "void":
        return _openstudiomodelresources.GasMixtureVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasMixtureVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GasMixture >::value_type const &":
        return _openstudiomodelresources.GasMixtureVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasMixtureVector___setitem__(self, *args)

    def append(self, x: 'GasMixture') -> "void":
        return _openstudiomodelresources.GasMixtureVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GasMixtureVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GasMixture >::size_type":
        return _openstudiomodelresources.GasMixtureVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GasMixtureVector_clear(self)

    def swap(self, v: 'GasMixtureVector') -> "void":
        return _openstudiomodelresources.GasMixtureVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::GasMixture >::allocator_type":
        return _openstudiomodelresources.GasMixtureVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::GasMixture >::iterator":
        return _openstudiomodelresources.GasMixtureVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GasMixture >::iterator":
        return _openstudiomodelresources.GasMixtureVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GasMixture >::reverse_iterator":
        return _openstudiomodelresources.GasMixtureVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GasMixture >::reverse_iterator":
        return _openstudiomodelresources.GasMixtureVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GasMixtureVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GasMixture >::iterator":
        return _openstudiomodelresources.GasMixtureVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_GasMixtureVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'GasMixture') -> "void":
        return _openstudiomodelresources.GasMixtureVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GasMixture >::value_type const &":
        return _openstudiomodelresources.GasMixtureVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GasMixture >::value_type const &":
        return _openstudiomodelresources.GasMixtureVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::GasMixture >::size_type', x: 'GasMixture') -> "void":
        return _openstudiomodelresources.GasMixtureVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::GasMixture >::size_type', x: 'GasMixture') -> "void":
        return _openstudiomodelresources.GasMixtureVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GasMixtureVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::GasMixture >::size_type') -> "void":
        return _openstudiomodelresources.GasMixtureVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GasMixture >::size_type":
        return _openstudiomodelresources.GasMixtureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasMixtureVector
    __del__ = lambda self: None
GasMixtureVector_swigregister = _openstudiomodelresources.GasMixtureVector_swigregister
GasMixtureVector_swigregister(GasMixtureVector)

class OptionalGasMixture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGasMixture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGasMixture, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalGasMixture(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGasMixture_reset(self)

    def __ref__(self) -> "openstudio::model::GasMixture":
        return _openstudiomodelresources.OptionalGasMixture___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGasMixture_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGasMixture_isNull(self)

    def get(self) -> "openstudio::model::GasMixture":
        return _openstudiomodelresources.OptionalGasMixture_get(self)

    def set(self, t: 'GasMixture') -> "void":
        return _openstudiomodelresources.OptionalGasMixture_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGasMixture
    __del__ = lambda self: None
OptionalGasMixture_swigregister = _openstudiomodelresources.OptionalGasMixture_swigregister
OptionalGasMixture_swigregister(OptionalGasMixture)

class InfraredTransparentMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfraredTransparentMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InfraredTransparentMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::size_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::value_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::InfraredTransparentMaterial >::difference_type', j: 'std::vector< openstudio::model::InfraredTransparentMaterial >::difference_type') -> "std::vector< openstudio::model::InfraredTransparentMaterial,std::allocator< openstudio::model::InfraredTransparentMaterial > > *":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::InfraredTransparentMaterial >::difference_type', j: 'std::vector< openstudio::model::InfraredTransparentMaterial >::difference_type') -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::value_type const &":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector___setitem__(self, *args)

    def append(self, x: 'InfraredTransparentMaterial') -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::size_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_clear(self)

    def swap(self, v: 'InfraredTransparentMaterialVector') -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::allocator_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::reverse_iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::reverse_iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::iterator":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_InfraredTransparentMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'InfraredTransparentMaterial') -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::value_type const &":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::value_type const &":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::InfraredTransparentMaterial >::size_type', x: 'InfraredTransparentMaterial') -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::InfraredTransparentMaterial >::size_type', x: 'InfraredTransparentMaterial') -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::InfraredTransparentMaterial >::size_type') -> "void":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::InfraredTransparentMaterial >::size_type":
        return _openstudiomodelresources.InfraredTransparentMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_InfraredTransparentMaterialVector
    __del__ = lambda self: None
InfraredTransparentMaterialVector_swigregister = _openstudiomodelresources.InfraredTransparentMaterialVector_swigregister
InfraredTransparentMaterialVector_swigregister(InfraredTransparentMaterialVector)

class OptionalInfraredTransparentMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalInfraredTransparentMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalInfraredTransparentMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalInfraredTransparentMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::InfraredTransparentMaterial":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_isNull(self)

    def get(self) -> "openstudio::model::InfraredTransparentMaterial":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_get(self)

    def set(self, t: 'InfraredTransparentMaterial') -> "void":
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalInfraredTransparentMaterial
    __del__ = lambda self: None
OptionalInfraredTransparentMaterial_swigregister = _openstudiomodelresources.OptionalInfraredTransparentMaterial_swigregister
OptionalInfraredTransparentMaterial_swigregister(OptionalInfraredTransparentMaterial)

class MasslessOpaqueMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MasslessOpaqueMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MasslessOpaqueMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::value_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::MasslessOpaqueMaterial >::difference_type', j: 'std::vector< openstudio::model::MasslessOpaqueMaterial >::difference_type') -> "std::vector< openstudio::model::MasslessOpaqueMaterial,std::allocator< openstudio::model::MasslessOpaqueMaterial > > *":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::MasslessOpaqueMaterial >::difference_type', j: 'std::vector< openstudio::model::MasslessOpaqueMaterial >::difference_type') -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___setitem__(self, *args)

    def append(self, x: 'MasslessOpaqueMaterial') -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_clear(self)

    def swap(self, v: 'MasslessOpaqueMaterialVector') -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::allocator_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::iterator":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_MasslessOpaqueMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'MasslessOpaqueMaterial') -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type', x: 'MasslessOpaqueMaterial') -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type', x: 'MasslessOpaqueMaterial') -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type') -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::MasslessOpaqueMaterial >::size_type":
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MasslessOpaqueMaterialVector
    __del__ = lambda self: None
MasslessOpaqueMaterialVector_swigregister = _openstudiomodelresources.MasslessOpaqueMaterialVector_swigregister
MasslessOpaqueMaterialVector_swigregister(MasslessOpaqueMaterialVector)

class OptionalMasslessOpaqueMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMasslessOpaqueMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMasslessOpaqueMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalMasslessOpaqueMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::MasslessOpaqueMaterial":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_isNull(self)

    def get(self) -> "openstudio::model::MasslessOpaqueMaterial":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_get(self)

    def set(self, t: 'MasslessOpaqueMaterial') -> "void":
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMasslessOpaqueMaterial
    __del__ = lambda self: None
OptionalMasslessOpaqueMaterial_swigregister = _openstudiomodelresources.OptionalMasslessOpaqueMaterial_swigregister
OptionalMasslessOpaqueMaterial_swigregister(OptionalMasslessOpaqueMaterial)

class RefractionExtinctionGlazingVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefractionExtinctionGlazingVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefractionExtinctionGlazingVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::value_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefractionExtinctionGlazing >::difference_type', j: 'std::vector< openstudio::model::RefractionExtinctionGlazing >::difference_type') -> "std::vector< openstudio::model::RefractionExtinctionGlazing,std::allocator< openstudio::model::RefractionExtinctionGlazing > > *":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefractionExtinctionGlazing >::difference_type', j: 'std::vector< openstudio::model::RefractionExtinctionGlazing >::difference_type') -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::value_type const &":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___setitem__(self, *args)

    def append(self, x: 'RefractionExtinctionGlazing') -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_clear(self)

    def swap(self, v: 'RefractionExtinctionGlazingVector') -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::allocator_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::reverse_iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::reverse_iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::iterator":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_RefractionExtinctionGlazingVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefractionExtinctionGlazing') -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::value_type const &":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::value_type const &":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type', x: 'RefractionExtinctionGlazing') -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type', x: 'RefractionExtinctionGlazing') -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type') -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefractionExtinctionGlazing >::size_type":
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_RefractionExtinctionGlazingVector
    __del__ = lambda self: None
RefractionExtinctionGlazingVector_swigregister = _openstudiomodelresources.RefractionExtinctionGlazingVector_swigregister
RefractionExtinctionGlazingVector_swigregister(RefractionExtinctionGlazingVector)

class OptionalRefractionExtinctionGlazing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefractionExtinctionGlazing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefractionExtinctionGlazing, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalRefractionExtinctionGlazing(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::RefractionExtinctionGlazing":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_isNull(self)

    def get(self) -> "openstudio::model::RefractionExtinctionGlazing":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_get(self)

    def set(self, t: 'RefractionExtinctionGlazing') -> "void":
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalRefractionExtinctionGlazing
    __del__ = lambda self: None
OptionalRefractionExtinctionGlazing_swigregister = _openstudiomodelresources.OptionalRefractionExtinctionGlazing_swigregister
OptionalRefractionExtinctionGlazing_swigregister(OptionalRefractionExtinctionGlazing)

class RoofVegetationVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoofVegetationVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RoofVegetationVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.RoofVegetationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.RoofVegetationVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.RoofVegetationVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RoofVegetation >::size_type":
        return _openstudiomodelresources.RoofVegetationVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RoofVegetation >::value_type":
        return _openstudiomodelresources.RoofVegetationVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RoofVegetation >::difference_type', j: 'std::vector< openstudio::model::RoofVegetation >::difference_type') -> "std::vector< openstudio::model::RoofVegetation,std::allocator< openstudio::model::RoofVegetation > > *":
        return _openstudiomodelresources.RoofVegetationVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.RoofVegetationVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RoofVegetation >::difference_type', j: 'std::vector< openstudio::model::RoofVegetation >::difference_type') -> "void":
        return _openstudiomodelresources.RoofVegetationVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.RoofVegetationVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RoofVegetation >::value_type const &":
        return _openstudiomodelresources.RoofVegetationVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.RoofVegetationVector___setitem__(self, *args)

    def append(self, x: 'RoofVegetation') -> "void":
        return _openstudiomodelresources.RoofVegetationVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.RoofVegetationVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RoofVegetation >::size_type":
        return _openstudiomodelresources.RoofVegetationVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.RoofVegetationVector_clear(self)

    def swap(self, v: 'RoofVegetationVector') -> "void":
        return _openstudiomodelresources.RoofVegetationVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RoofVegetation >::allocator_type":
        return _openstudiomodelresources.RoofVegetationVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RoofVegetation >::iterator":
        return _openstudiomodelresources.RoofVegetationVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RoofVegetation >::iterator":
        return _openstudiomodelresources.RoofVegetationVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RoofVegetation >::reverse_iterator":
        return _openstudiomodelresources.RoofVegetationVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RoofVegetation >::reverse_iterator":
        return _openstudiomodelresources.RoofVegetationVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.RoofVegetationVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RoofVegetation >::iterator":
        return _openstudiomodelresources.RoofVegetationVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_RoofVegetationVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RoofVegetation') -> "void":
        return _openstudiomodelresources.RoofVegetationVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RoofVegetation >::value_type const &":
        return _openstudiomodelresources.RoofVegetationVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RoofVegetation >::value_type const &":
        return _openstudiomodelresources.RoofVegetationVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RoofVegetation >::size_type', x: 'RoofVegetation') -> "void":
        return _openstudiomodelresources.RoofVegetationVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RoofVegetation >::size_type', x: 'RoofVegetation') -> "void":
        return _openstudiomodelresources.RoofVegetationVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.RoofVegetationVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RoofVegetation >::size_type') -> "void":
        return _openstudiomodelresources.RoofVegetationVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RoofVegetation >::size_type":
        return _openstudiomodelresources.RoofVegetationVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_RoofVegetationVector
    __del__ = lambda self: None
RoofVegetationVector_swigregister = _openstudiomodelresources.RoofVegetationVector_swigregister
RoofVegetationVector_swigregister(RoofVegetationVector)

class OptionalRoofVegetation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRoofVegetation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRoofVegetation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalRoofVegetation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalRoofVegetation_reset(self)

    def __ref__(self) -> "openstudio::model::RoofVegetation":
        return _openstudiomodelresources.OptionalRoofVegetation___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalRoofVegetation_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalRoofVegetation_isNull(self)

    def get(self) -> "openstudio::model::RoofVegetation":
        return _openstudiomodelresources.OptionalRoofVegetation_get(self)

    def set(self, t: 'RoofVegetation') -> "void":
        return _openstudiomodelresources.OptionalRoofVegetation_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalRoofVegetation
    __del__ = lambda self: None
OptionalRoofVegetation_swigregister = _openstudiomodelresources.OptionalRoofVegetation_swigregister
OptionalRoofVegetation_swigregister(OptionalRoofVegetation)

class ScreenVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ScreenVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ScreenVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ScreenVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Screen >::size_type":
        return _openstudiomodelresources.ScreenVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Screen >::value_type":
        return _openstudiomodelresources.ScreenVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Screen >::difference_type', j: 'std::vector< openstudio::model::Screen >::difference_type') -> "std::vector< openstudio::model::Screen,std::allocator< openstudio::model::Screen > > *":
        return _openstudiomodelresources.ScreenVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ScreenVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Screen >::difference_type', j: 'std::vector< openstudio::model::Screen >::difference_type') -> "void":
        return _openstudiomodelresources.ScreenVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScreenVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Screen >::value_type const &":
        return _openstudiomodelresources.ScreenVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ScreenVector___setitem__(self, *args)

    def append(self, x: 'Screen') -> "void":
        return _openstudiomodelresources.ScreenVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ScreenVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Screen >::size_type":
        return _openstudiomodelresources.ScreenVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ScreenVector_clear(self)

    def swap(self, v: 'ScreenVector') -> "void":
        return _openstudiomodelresources.ScreenVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Screen >::allocator_type":
        return _openstudiomodelresources.ScreenVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Screen >::iterator":
        return _openstudiomodelresources.ScreenVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Screen >::iterator":
        return _openstudiomodelresources.ScreenVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Screen >::reverse_iterator":
        return _openstudiomodelresources.ScreenVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Screen >::reverse_iterator":
        return _openstudiomodelresources.ScreenVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ScreenVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Screen >::iterator":
        return _openstudiomodelresources.ScreenVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ScreenVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Screen') -> "void":
        return _openstudiomodelresources.ScreenVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Screen >::value_type const &":
        return _openstudiomodelresources.ScreenVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Screen >::value_type const &":
        return _openstudiomodelresources.ScreenVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Screen >::size_type', x: 'Screen') -> "void":
        return _openstudiomodelresources.ScreenVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Screen >::size_type', x: 'Screen') -> "void":
        return _openstudiomodelresources.ScreenVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ScreenVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Screen >::size_type') -> "void":
        return _openstudiomodelresources.ScreenVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Screen >::size_type":
        return _openstudiomodelresources.ScreenVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScreenVector
    __del__ = lambda self: None
ScreenVector_swigregister = _openstudiomodelresources.ScreenVector_swigregister
ScreenVector_swigregister(ScreenVector)

class OptionalScreen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalScreen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalScreen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalScreen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalScreen_reset(self)

    def __ref__(self) -> "openstudio::model::Screen":
        return _openstudiomodelresources.OptionalScreen___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalScreen_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalScreen_isNull(self)

    def get(self) -> "openstudio::model::Screen":
        return _openstudiomodelresources.OptionalScreen_get(self)

    def set(self, t: 'Screen') -> "void":
        return _openstudiomodelresources.OptionalScreen_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScreen
    __del__ = lambda self: None
OptionalScreen_swigregister = _openstudiomodelresources.OptionalScreen_swigregister
OptionalScreen_swigregister(OptionalScreen)

class ShadeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadeVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ShadeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ShadeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ShadeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Shade >::size_type":
        return _openstudiomodelresources.ShadeVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Shade >::value_type":
        return _openstudiomodelresources.ShadeVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Shade >::difference_type', j: 'std::vector< openstudio::model::Shade >::difference_type') -> "std::vector< openstudio::model::Shade,std::allocator< openstudio::model::Shade > > *":
        return _openstudiomodelresources.ShadeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ShadeVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Shade >::difference_type', j: 'std::vector< openstudio::model::Shade >::difference_type') -> "void":
        return _openstudiomodelresources.ShadeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Shade >::value_type const &":
        return _openstudiomodelresources.ShadeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadeVector___setitem__(self, *args)

    def append(self, x: 'Shade') -> "void":
        return _openstudiomodelresources.ShadeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ShadeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Shade >::size_type":
        return _openstudiomodelresources.ShadeVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ShadeVector_clear(self)

    def swap(self, v: 'ShadeVector') -> "void":
        return _openstudiomodelresources.ShadeVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Shade >::allocator_type":
        return _openstudiomodelresources.ShadeVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Shade >::iterator":
        return _openstudiomodelresources.ShadeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Shade >::iterator":
        return _openstudiomodelresources.ShadeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Shade >::reverse_iterator":
        return _openstudiomodelresources.ShadeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Shade >::reverse_iterator":
        return _openstudiomodelresources.ShadeVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ShadeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Shade >::iterator":
        return _openstudiomodelresources.ShadeVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ShadeVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Shade') -> "void":
        return _openstudiomodelresources.ShadeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Shade >::value_type const &":
        return _openstudiomodelresources.ShadeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Shade >::value_type const &":
        return _openstudiomodelresources.ShadeVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Shade >::size_type', x: 'Shade') -> "void":
        return _openstudiomodelresources.ShadeVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Shade >::size_type', x: 'Shade') -> "void":
        return _openstudiomodelresources.ShadeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ShadeVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Shade >::size_type') -> "void":
        return _openstudiomodelresources.ShadeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Shade >::size_type":
        return _openstudiomodelresources.ShadeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ShadeVector
    __del__ = lambda self: None
ShadeVector_swigregister = _openstudiomodelresources.ShadeVector_swigregister
ShadeVector_swigregister(ShadeVector)

class OptionalShade(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalShade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalShade, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalShade(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalShade_reset(self)

    def __ref__(self) -> "openstudio::model::Shade":
        return _openstudiomodelresources.OptionalShade___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalShade_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalShade_isNull(self)

    def get(self) -> "openstudio::model::Shade":
        return _openstudiomodelresources.OptionalShade_get(self)

    def set(self, t: 'Shade') -> "void":
        return _openstudiomodelresources.OptionalShade_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalShade
    __del__ = lambda self: None
OptionalShade_swigregister = _openstudiomodelresources.OptionalShade_swigregister
OptionalShade_swigregister(OptionalShade)

class SimpleGlazingVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleGlazingVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleGlazingVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SimpleGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.SimpleGlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.SimpleGlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SimpleGlazing >::size_type":
        return _openstudiomodelresources.SimpleGlazingVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SimpleGlazing >::value_type":
        return _openstudiomodelresources.SimpleGlazingVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SimpleGlazing >::difference_type', j: 'std::vector< openstudio::model::SimpleGlazing >::difference_type') -> "std::vector< openstudio::model::SimpleGlazing,std::allocator< openstudio::model::SimpleGlazing > > *":
        return _openstudiomodelresources.SimpleGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SimpleGlazing >::difference_type', j: 'std::vector< openstudio::model::SimpleGlazing >::difference_type') -> "void":
        return _openstudiomodelresources.SimpleGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SimpleGlazing >::value_type const &":
        return _openstudiomodelresources.SimpleGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector___setitem__(self, *args)

    def append(self, x: 'SimpleGlazing') -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.SimpleGlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SimpleGlazing >::size_type":
        return _openstudiomodelresources.SimpleGlazingVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_clear(self)

    def swap(self, v: 'SimpleGlazingVector') -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SimpleGlazing >::allocator_type":
        return _openstudiomodelresources.SimpleGlazingVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SimpleGlazing >::iterator":
        return _openstudiomodelresources.SimpleGlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SimpleGlazing >::iterator":
        return _openstudiomodelresources.SimpleGlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SimpleGlazing >::reverse_iterator":
        return _openstudiomodelresources.SimpleGlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SimpleGlazing >::reverse_iterator":
        return _openstudiomodelresources.SimpleGlazingVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SimpleGlazing >::iterator":
        return _openstudiomodelresources.SimpleGlazingVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_SimpleGlazingVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SimpleGlazing') -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SimpleGlazing >::value_type const &":
        return _openstudiomodelresources.SimpleGlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SimpleGlazing >::value_type const &":
        return _openstudiomodelresources.SimpleGlazingVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SimpleGlazing >::size_type', x: 'SimpleGlazing') -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SimpleGlazing >::size_type', x: 'SimpleGlazing') -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SimpleGlazing >::size_type') -> "void":
        return _openstudiomodelresources.SimpleGlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SimpleGlazing >::size_type":
        return _openstudiomodelresources.SimpleGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SimpleGlazingVector
    __del__ = lambda self: None
SimpleGlazingVector_swigregister = _openstudiomodelresources.SimpleGlazingVector_swigregister
SimpleGlazingVector_swigregister(SimpleGlazingVector)

class OptionalSimpleGlazing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSimpleGlazing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSimpleGlazing, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalSimpleGlazing(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalSimpleGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::SimpleGlazing":
        return _openstudiomodelresources.OptionalSimpleGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalSimpleGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalSimpleGlazing_isNull(self)

    def get(self) -> "openstudio::model::SimpleGlazing":
        return _openstudiomodelresources.OptionalSimpleGlazing_get(self)

    def set(self, t: 'SimpleGlazing') -> "void":
        return _openstudiomodelresources.OptionalSimpleGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSimpleGlazing
    __del__ = lambda self: None
OptionalSimpleGlazing_swigregister = _openstudiomodelresources.OptionalSimpleGlazing_swigregister
OptionalSimpleGlazing_swigregister(OptionalSimpleGlazing)

class StandardGlazingVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardGlazingVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StandardGlazingVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.StandardGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.StandardGlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.StandardGlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::StandardGlazing >::size_type":
        return _openstudiomodelresources.StandardGlazingVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::StandardGlazing >::value_type":
        return _openstudiomodelresources.StandardGlazingVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::StandardGlazing >::difference_type', j: 'std::vector< openstudio::model::StandardGlazing >::difference_type') -> "std::vector< openstudio::model::StandardGlazing,std::allocator< openstudio::model::StandardGlazing > > *":
        return _openstudiomodelresources.StandardGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.StandardGlazingVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::StandardGlazing >::difference_type', j: 'std::vector< openstudio::model::StandardGlazing >::difference_type') -> "void":
        return _openstudiomodelresources.StandardGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::StandardGlazing >::value_type const &":
        return _openstudiomodelresources.StandardGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardGlazingVector___setitem__(self, *args)

    def append(self, x: 'StandardGlazing') -> "void":
        return _openstudiomodelresources.StandardGlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.StandardGlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::StandardGlazing >::size_type":
        return _openstudiomodelresources.StandardGlazingVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.StandardGlazingVector_clear(self)

    def swap(self, v: 'StandardGlazingVector') -> "void":
        return _openstudiomodelresources.StandardGlazingVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::StandardGlazing >::allocator_type":
        return _openstudiomodelresources.StandardGlazingVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::StandardGlazing >::iterator":
        return _openstudiomodelresources.StandardGlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::StandardGlazing >::iterator":
        return _openstudiomodelresources.StandardGlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::StandardGlazing >::reverse_iterator":
        return _openstudiomodelresources.StandardGlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::StandardGlazing >::reverse_iterator":
        return _openstudiomodelresources.StandardGlazingVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.StandardGlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::StandardGlazing >::iterator":
        return _openstudiomodelresources.StandardGlazingVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_StandardGlazingVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'StandardGlazing') -> "void":
        return _openstudiomodelresources.StandardGlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::StandardGlazing >::value_type const &":
        return _openstudiomodelresources.StandardGlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::StandardGlazing >::value_type const &":
        return _openstudiomodelresources.StandardGlazingVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::StandardGlazing >::size_type', x: 'StandardGlazing') -> "void":
        return _openstudiomodelresources.StandardGlazingVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::StandardGlazing >::size_type', x: 'StandardGlazing') -> "void":
        return _openstudiomodelresources.StandardGlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.StandardGlazingVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::StandardGlazing >::size_type') -> "void":
        return _openstudiomodelresources.StandardGlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::StandardGlazing >::size_type":
        return _openstudiomodelresources.StandardGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardGlazingVector
    __del__ = lambda self: None
StandardGlazingVector_swigregister = _openstudiomodelresources.StandardGlazingVector_swigregister
StandardGlazingVector_swigregister(StandardGlazingVector)

class OptionalStandardGlazing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalStandardGlazing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalStandardGlazing, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalStandardGlazing(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalStandardGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::StandardGlazing":
        return _openstudiomodelresources.OptionalStandardGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardGlazing_isNull(self)

    def get(self) -> "openstudio::model::StandardGlazing":
        return _openstudiomodelresources.OptionalStandardGlazing_get(self)

    def set(self, t: 'StandardGlazing') -> "void":
        return _openstudiomodelresources.OptionalStandardGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardGlazing
    __del__ = lambda self: None
OptionalStandardGlazing_swigregister = _openstudiomodelresources.OptionalStandardGlazing_swigregister
OptionalStandardGlazing_swigregister(OptionalStandardGlazing)

class StandardOpaqueMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardOpaqueMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StandardOpaqueMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::size_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::value_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::StandardOpaqueMaterial >::difference_type', j: 'std::vector< openstudio::model::StandardOpaqueMaterial >::difference_type') -> "std::vector< openstudio::model::StandardOpaqueMaterial,std::allocator< openstudio::model::StandardOpaqueMaterial > > *":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::StandardOpaqueMaterial >::difference_type', j: 'std::vector< openstudio::model::StandardOpaqueMaterial >::difference_type') -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector___setitem__(self, *args)

    def append(self, x: 'StandardOpaqueMaterial') -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::size_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_clear(self)

    def swap(self, v: 'StandardOpaqueMaterialVector') -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::allocator_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::reverse_iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::iterator":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_StandardOpaqueMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'StandardOpaqueMaterial') -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::value_type const &":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::StandardOpaqueMaterial >::size_type', x: 'StandardOpaqueMaterial') -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::StandardOpaqueMaterial >::size_type', x: 'StandardOpaqueMaterial') -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::StandardOpaqueMaterial >::size_type') -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::StandardOpaqueMaterial >::size_type":
        return _openstudiomodelresources.StandardOpaqueMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardOpaqueMaterialVector
    __del__ = lambda self: None
StandardOpaqueMaterialVector_swigregister = _openstudiomodelresources.StandardOpaqueMaterialVector_swigregister
StandardOpaqueMaterialVector_swigregister(StandardOpaqueMaterialVector)

class OptionalStandardOpaqueMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalStandardOpaqueMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalStandardOpaqueMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalStandardOpaqueMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::StandardOpaqueMaterial":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_isNull(self)

    def get(self) -> "openstudio::model::StandardOpaqueMaterial":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_get(self)

    def set(self, t: 'StandardOpaqueMaterial') -> "void":
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardOpaqueMaterial
    __del__ = lambda self: None
OptionalStandardOpaqueMaterial_swigregister = _openstudiomodelresources.OptionalStandardOpaqueMaterial_swigregister
OptionalStandardOpaqueMaterial_swigregister(OptionalStandardOpaqueMaterial)

class ThermochromicGlazingVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermochromicGlazingVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThermochromicGlazingVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ThermochromicGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ThermochromicGlazingVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ThermochromicGlazingVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::size_type":
        return _openstudiomodelresources.ThermochromicGlazingVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::value_type":
        return _openstudiomodelresources.ThermochromicGlazingVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ThermochromicGlazing >::difference_type', j: 'std::vector< openstudio::model::ThermochromicGlazing >::difference_type') -> "std::vector< openstudio::model::ThermochromicGlazing,std::allocator< openstudio::model::ThermochromicGlazing > > *":
        return _openstudiomodelresources.ThermochromicGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ThermochromicGlazing >::difference_type', j: 'std::vector< openstudio::model::ThermochromicGlazing >::difference_type') -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ThermochromicGlazing >::value_type const &":
        return _openstudiomodelresources.ThermochromicGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector___setitem__(self, *args)

    def append(self, x: 'ThermochromicGlazing') -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ThermochromicGlazingVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::size_type":
        return _openstudiomodelresources.ThermochromicGlazingVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_clear(self)

    def swap(self, v: 'ThermochromicGlazingVector') -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::allocator_type":
        return _openstudiomodelresources.ThermochromicGlazingVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::reverse_iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::reverse_iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ThermochromicGlazing >::iterator":
        return _openstudiomodelresources.ThermochromicGlazingVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ThermochromicGlazingVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ThermochromicGlazing') -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::value_type const &":
        return _openstudiomodelresources.ThermochromicGlazingVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::value_type const &":
        return _openstudiomodelresources.ThermochromicGlazingVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ThermochromicGlazing >::size_type', x: 'ThermochromicGlazing') -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ThermochromicGlazing >::size_type', x: 'ThermochromicGlazing') -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ThermochromicGlazing >::size_type') -> "void":
        return _openstudiomodelresources.ThermochromicGlazingVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ThermochromicGlazing >::size_type":
        return _openstudiomodelresources.ThermochromicGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ThermochromicGlazingVector
    __del__ = lambda self: None
ThermochromicGlazingVector_swigregister = _openstudiomodelresources.ThermochromicGlazingVector_swigregister
ThermochromicGlazingVector_swigregister(ThermochromicGlazingVector)

class OptionalThermochromicGlazing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalThermochromicGlazing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalThermochromicGlazing, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalThermochromicGlazing(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalThermochromicGlazing_reset(self)

    def __ref__(self) -> "openstudio::model::ThermochromicGlazing":
        return _openstudiomodelresources.OptionalThermochromicGlazing___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalThermochromicGlazing_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalThermochromicGlazing_isNull(self)

    def get(self) -> "openstudio::model::ThermochromicGlazing":
        return _openstudiomodelresources.OptionalThermochromicGlazing_get(self)

    def set(self, t: 'ThermochromicGlazing') -> "void":
        return _openstudiomodelresources.OptionalThermochromicGlazing_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalThermochromicGlazing
    __del__ = lambda self: None
OptionalThermochromicGlazing_swigregister = _openstudiomodelresources.OptionalThermochromicGlazing_swigregister
OptionalThermochromicGlazing_swigregister(OptionalThermochromicGlazing)

class StandardsInformationMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardsInformationMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StandardsInformationMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.StandardsInformationMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::size_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::value_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::StandardsInformationMaterial >::difference_type', j: 'std::vector< openstudio::model::StandardsInformationMaterial >::difference_type') -> "std::vector< openstudio::model::StandardsInformationMaterial,std::allocator< openstudio::model::StandardsInformationMaterial > > *":
        return _openstudiomodelresources.StandardsInformationMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::StandardsInformationMaterial >::difference_type', j: 'std::vector< openstudio::model::StandardsInformationMaterial >::difference_type') -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::StandardsInformationMaterial >::value_type const &":
        return _openstudiomodelresources.StandardsInformationMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector___setitem__(self, *args)

    def append(self, x: 'StandardsInformationMaterial') -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::size_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_clear(self)

    def swap(self, v: 'StandardsInformationMaterialVector') -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::allocator_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::reverse_iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::reverse_iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::StandardsInformationMaterial >::iterator":
        return _openstudiomodelresources.StandardsInformationMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_StandardsInformationMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'StandardsInformationMaterial') -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::value_type const &":
        return _openstudiomodelresources.StandardsInformationMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::value_type const &":
        return _openstudiomodelresources.StandardsInformationMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::StandardsInformationMaterial >::size_type', x: 'StandardsInformationMaterial') -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::StandardsInformationMaterial >::size_type', x: 'StandardsInformationMaterial') -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::StandardsInformationMaterial >::size_type') -> "void":
        return _openstudiomodelresources.StandardsInformationMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::StandardsInformationMaterial >::size_type":
        return _openstudiomodelresources.StandardsInformationMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationMaterialVector
    __del__ = lambda self: None
StandardsInformationMaterialVector_swigregister = _openstudiomodelresources.StandardsInformationMaterialVector_swigregister
StandardsInformationMaterialVector_swigregister(StandardsInformationMaterialVector)

class OptionalStandardsInformationMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalStandardsInformationMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalStandardsInformationMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalStandardsInformationMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_reset(self)

    def __ref__(self) -> "openstudio::model::StandardsInformationMaterial":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_isNull(self)

    def get(self) -> "openstudio::model::StandardsInformationMaterial":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_get(self)

    def set(self, t: 'StandardsInformationMaterial') -> "void":
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardsInformationMaterial
    __del__ = lambda self: None
OptionalStandardsInformationMaterial_swigregister = _openstudiomodelresources.OptionalStandardsInformationMaterial_swigregister
OptionalStandardsInformationMaterial_swigregister(OptionalStandardsInformationMaterial)

class ConstructionBaseVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstructionBaseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstructionBaseVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ConstructionBaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ConstructionBaseVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ConstructionBaseVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ConstructionBase >::size_type":
        return _openstudiomodelresources.ConstructionBaseVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ConstructionBase >::value_type":
        return _openstudiomodelresources.ConstructionBaseVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ConstructionBase >::difference_type', j: 'std::vector< openstudio::model::ConstructionBase >::difference_type') -> "std::vector< openstudio::model::ConstructionBase,std::allocator< openstudio::model::ConstructionBase > > *":
        return _openstudiomodelresources.ConstructionBaseVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ConstructionBase >::difference_type', j: 'std::vector< openstudio::model::ConstructionBase >::difference_type') -> "void":
        return _openstudiomodelresources.ConstructionBaseVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ConstructionBase >::value_type const &":
        return _openstudiomodelresources.ConstructionBaseVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector___setitem__(self, *args)

    def append(self, x: 'ConstructionBase') -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ConstructionBaseVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ConstructionBase >::size_type":
        return _openstudiomodelresources.ConstructionBaseVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_clear(self)

    def swap(self, v: 'ConstructionBaseVector') -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ConstructionBase >::allocator_type":
        return _openstudiomodelresources.ConstructionBaseVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ConstructionBase >::iterator":
        return _openstudiomodelresources.ConstructionBaseVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ConstructionBase >::iterator":
        return _openstudiomodelresources.ConstructionBaseVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ConstructionBase >::reverse_iterator":
        return _openstudiomodelresources.ConstructionBaseVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ConstructionBase >::reverse_iterator":
        return _openstudiomodelresources.ConstructionBaseVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ConstructionBase >::iterator":
        return _openstudiomodelresources.ConstructionBaseVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ConstructionBaseVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ConstructionBase') -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ConstructionBase >::value_type const &":
        return _openstudiomodelresources.ConstructionBaseVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ConstructionBase >::value_type const &":
        return _openstudiomodelresources.ConstructionBaseVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ConstructionBase >::size_type', x: 'ConstructionBase') -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ConstructionBase >::size_type', x: 'ConstructionBase') -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ConstructionBase >::size_type') -> "void":
        return _openstudiomodelresources.ConstructionBaseVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ConstructionBase >::size_type":
        return _openstudiomodelresources.ConstructionBaseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionBaseVector
    __del__ = lambda self: None
ConstructionBaseVector_swigregister = _openstudiomodelresources.ConstructionBaseVector_swigregister
ConstructionBaseVector_swigregister(ConstructionBaseVector)

class OptionalConstructionBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalConstructionBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalConstructionBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalConstructionBase(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalConstructionBase_reset(self)

    def __ref__(self) -> "openstudio::model::ConstructionBase":
        return _openstudiomodelresources.OptionalConstructionBase___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionBase_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionBase_isNull(self)

    def get(self) -> "openstudio::model::ConstructionBase":
        return _openstudiomodelresources.OptionalConstructionBase_get(self)

    def set(self, t: 'ConstructionBase') -> "void":
        return _openstudiomodelresources.OptionalConstructionBase_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstructionBase
    __del__ = lambda self: None
OptionalConstructionBase_swigregister = _openstudiomodelresources.OptionalConstructionBase_swigregister
OptionalConstructionBase_swigregister(OptionalConstructionBase)

class LayeredConstructionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayeredConstructionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayeredConstructionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.LayeredConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.LayeredConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.LayeredConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LayeredConstruction >::size_type":
        return _openstudiomodelresources.LayeredConstructionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::LayeredConstruction >::value_type":
        return _openstudiomodelresources.LayeredConstructionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::LayeredConstruction >::difference_type', j: 'std::vector< openstudio::model::LayeredConstruction >::difference_type') -> "std::vector< openstudio::model::LayeredConstruction,std::allocator< openstudio::model::LayeredConstruction > > *":
        return _openstudiomodelresources.LayeredConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::LayeredConstruction >::difference_type', j: 'std::vector< openstudio::model::LayeredConstruction >::difference_type') -> "void":
        return _openstudiomodelresources.LayeredConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LayeredConstruction >::value_type const &":
        return _openstudiomodelresources.LayeredConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector___setitem__(self, *args)

    def append(self, x: 'LayeredConstruction') -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.LayeredConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LayeredConstruction >::size_type":
        return _openstudiomodelresources.LayeredConstructionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_clear(self)

    def swap(self, v: 'LayeredConstructionVector') -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::LayeredConstruction >::allocator_type":
        return _openstudiomodelresources.LayeredConstructionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::LayeredConstruction >::iterator":
        return _openstudiomodelresources.LayeredConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LayeredConstruction >::iterator":
        return _openstudiomodelresources.LayeredConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LayeredConstruction >::reverse_iterator":
        return _openstudiomodelresources.LayeredConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LayeredConstruction >::reverse_iterator":
        return _openstudiomodelresources.LayeredConstructionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LayeredConstruction >::iterator":
        return _openstudiomodelresources.LayeredConstructionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_LayeredConstructionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'LayeredConstruction') -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LayeredConstruction >::value_type const &":
        return _openstudiomodelresources.LayeredConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LayeredConstruction >::value_type const &":
        return _openstudiomodelresources.LayeredConstructionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::LayeredConstruction >::size_type', x: 'LayeredConstruction') -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::LayeredConstruction >::size_type', x: 'LayeredConstruction') -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::LayeredConstruction >::size_type') -> "void":
        return _openstudiomodelresources.LayeredConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LayeredConstruction >::size_type":
        return _openstudiomodelresources.LayeredConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_LayeredConstructionVector
    __del__ = lambda self: None
LayeredConstructionVector_swigregister = _openstudiomodelresources.LayeredConstructionVector_swigregister
LayeredConstructionVector_swigregister(LayeredConstructionVector)

class OptionalLayeredConstruction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLayeredConstruction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLayeredConstruction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalLayeredConstruction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalLayeredConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::LayeredConstruction":
        return _openstudiomodelresources.OptionalLayeredConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalLayeredConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalLayeredConstruction_isNull(self)

    def get(self) -> "openstudio::model::LayeredConstruction":
        return _openstudiomodelresources.OptionalLayeredConstruction_get(self)

    def set(self, t: 'LayeredConstruction') -> "void":
        return _openstudiomodelresources.OptionalLayeredConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalLayeredConstruction
    __del__ = lambda self: None
OptionalLayeredConstruction_swigregister = _openstudiomodelresources.OptionalLayeredConstruction_swigregister
OptionalLayeredConstruction_swigregister(OptionalLayeredConstruction)

class ConstructionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstructionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstructionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Construction >::size_type":
        return _openstudiomodelresources.ConstructionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Construction >::value_type":
        return _openstudiomodelresources.ConstructionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Construction >::difference_type', j: 'std::vector< openstudio::model::Construction >::difference_type') -> "std::vector< openstudio::model::Construction,std::allocator< openstudio::model::Construction > > *":
        return _openstudiomodelresources.ConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Construction >::difference_type', j: 'std::vector< openstudio::model::Construction >::difference_type') -> "void":
        return _openstudiomodelresources.ConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Construction >::value_type const &":
        return _openstudiomodelresources.ConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionVector___setitem__(self, *args)

    def append(self, x: 'Construction') -> "void":
        return _openstudiomodelresources.ConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Construction >::size_type":
        return _openstudiomodelresources.ConstructionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ConstructionVector_clear(self)

    def swap(self, v: 'ConstructionVector') -> "void":
        return _openstudiomodelresources.ConstructionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Construction >::allocator_type":
        return _openstudiomodelresources.ConstructionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Construction >::iterator":
        return _openstudiomodelresources.ConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Construction >::iterator":
        return _openstudiomodelresources.ConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Construction >::reverse_iterator":
        return _openstudiomodelresources.ConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Construction >::reverse_iterator":
        return _openstudiomodelresources.ConstructionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Construction >::iterator":
        return _openstudiomodelresources.ConstructionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ConstructionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Construction') -> "void":
        return _openstudiomodelresources.ConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Construction >::value_type const &":
        return _openstudiomodelresources.ConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Construction >::value_type const &":
        return _openstudiomodelresources.ConstructionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Construction >::size_type', x: 'Construction') -> "void":
        return _openstudiomodelresources.ConstructionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Construction >::size_type', x: 'Construction') -> "void":
        return _openstudiomodelresources.ConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Construction >::size_type') -> "void":
        return _openstudiomodelresources.ConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Construction >::size_type":
        return _openstudiomodelresources.ConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionVector
    __del__ = lambda self: None
ConstructionVector_swigregister = _openstudiomodelresources.ConstructionVector_swigregister
ConstructionVector_swigregister(ConstructionVector)

class OptionalConstruction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalConstruction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalConstruction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalConstruction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::Construction":
        return _openstudiomodelresources.OptionalConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalConstruction_isNull(self)

    def get(self) -> "openstudio::model::Construction":
        return _openstudiomodelresources.OptionalConstruction_get(self)

    def set(self, t: 'Construction') -> "void":
        return _openstudiomodelresources.OptionalConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstruction
    __del__ = lambda self: None
OptionalConstruction_swigregister = _openstudiomodelresources.OptionalConstruction_swigregister
OptionalConstruction_swigregister(OptionalConstruction)

class ConstructionWithInternalSourceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstructionWithInternalSourceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstructionWithInternalSourceVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::size_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::value_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ConstructionWithInternalSource >::difference_type', j: 'std::vector< openstudio::model::ConstructionWithInternalSource >::difference_type') -> "std::vector< openstudio::model::ConstructionWithInternalSource,std::allocator< openstudio::model::ConstructionWithInternalSource > > *":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ConstructionWithInternalSource >::difference_type', j: 'std::vector< openstudio::model::ConstructionWithInternalSource >::difference_type') -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::value_type const &":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___setitem__(self, *args)

    def append(self, x: 'ConstructionWithInternalSource') -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::size_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_clear(self)

    def swap(self, v: 'ConstructionWithInternalSourceVector') -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::allocator_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::reverse_iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::reverse_iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::iterator":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ConstructionWithInternalSourceVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ConstructionWithInternalSource') -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::value_type const &":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::value_type const &":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ConstructionWithInternalSource >::size_type', x: 'ConstructionWithInternalSource') -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ConstructionWithInternalSource >::size_type', x: 'ConstructionWithInternalSource') -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ConstructionWithInternalSource >::size_type') -> "void":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ConstructionWithInternalSource >::size_type":
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionWithInternalSourceVector
    __del__ = lambda self: None
ConstructionWithInternalSourceVector_swigregister = _openstudiomodelresources.ConstructionWithInternalSourceVector_swigregister
ConstructionWithInternalSourceVector_swigregister(ConstructionWithInternalSourceVector)

class OptionalConstructionWithInternalSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalConstructionWithInternalSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalConstructionWithInternalSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalConstructionWithInternalSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_reset(self)

    def __ref__(self) -> "openstudio::model::ConstructionWithInternalSource":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_isNull(self)

    def get(self) -> "openstudio::model::ConstructionWithInternalSource":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_get(self)

    def set(self, t: 'ConstructionWithInternalSource') -> "void":
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstructionWithInternalSource
    __del__ = lambda self: None
OptionalConstructionWithInternalSource_swigregister = _openstudiomodelresources.OptionalConstructionWithInternalSource_swigregister
OptionalConstructionWithInternalSource_swigregister(OptionalConstructionWithInternalSource)

class CFactorUndergroundWallConstructionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFactorUndergroundWallConstructionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFactorUndergroundWallConstructionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::value_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CFactorUndergroundWallConstruction >::difference_type', j: 'std::vector< openstudio::model::CFactorUndergroundWallConstruction >::difference_type') -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction,std::allocator< openstudio::model::CFactorUndergroundWallConstruction > > *":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CFactorUndergroundWallConstruction >::difference_type', j: 'std::vector< openstudio::model::CFactorUndergroundWallConstruction >::difference_type') -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::value_type const &":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___setitem__(self, *args)

    def append(self, x: 'CFactorUndergroundWallConstruction') -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_clear(self)

    def swap(self, v: 'CFactorUndergroundWallConstructionVector') -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::allocator_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::reverse_iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::reverse_iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::iterator":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CFactorUndergroundWallConstructionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CFactorUndergroundWallConstruction') -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::value_type const &":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::value_type const &":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type', x: 'CFactorUndergroundWallConstruction') -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type', x: 'CFactorUndergroundWallConstruction') -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type') -> "void":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction >::size_type":
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CFactorUndergroundWallConstructionVector
    __del__ = lambda self: None
CFactorUndergroundWallConstructionVector_swigregister = _openstudiomodelresources.CFactorUndergroundWallConstructionVector_swigregister
CFactorUndergroundWallConstructionVector_swigregister(CFactorUndergroundWallConstructionVector)

class OptionalCFactorUndergroundWallConstruction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCFactorUndergroundWallConstruction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCFactorUndergroundWallConstruction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCFactorUndergroundWallConstruction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::CFactorUndergroundWallConstruction":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_isNull(self)

    def get(self) -> "openstudio::model::CFactorUndergroundWallConstruction":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_get(self)

    def set(self, t: 'CFactorUndergroundWallConstruction') -> "void":
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCFactorUndergroundWallConstruction
    __del__ = lambda self: None
OptionalCFactorUndergroundWallConstruction_swigregister = _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_swigregister
OptionalCFactorUndergroundWallConstruction_swigregister(OptionalCFactorUndergroundWallConstruction)

class FFactorGroundFloorConstructionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFactorGroundFloorConstructionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FFactorGroundFloorConstructionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::value_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::FFactorGroundFloorConstruction >::difference_type', j: 'std::vector< openstudio::model::FFactorGroundFloorConstruction >::difference_type') -> "std::vector< openstudio::model::FFactorGroundFloorConstruction,std::allocator< openstudio::model::FFactorGroundFloorConstruction > > *":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::FFactorGroundFloorConstruction >::difference_type', j: 'std::vector< openstudio::model::FFactorGroundFloorConstruction >::difference_type') -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::value_type const &":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___setitem__(self, *args)

    def append(self, x: 'FFactorGroundFloorConstruction') -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_clear(self)

    def swap(self, v: 'FFactorGroundFloorConstructionVector') -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::allocator_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::reverse_iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::reverse_iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::iterator":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_FFactorGroundFloorConstructionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'FFactorGroundFloorConstruction') -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::value_type const &":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::value_type const &":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type', x: 'FFactorGroundFloorConstruction') -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type', x: 'FFactorGroundFloorConstruction') -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type') -> "void":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::FFactorGroundFloorConstruction >::size_type":
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_FFactorGroundFloorConstructionVector
    __del__ = lambda self: None
FFactorGroundFloorConstructionVector_swigregister = _openstudiomodelresources.FFactorGroundFloorConstructionVector_swigregister
FFactorGroundFloorConstructionVector_swigregister(FFactorGroundFloorConstructionVector)

class OptionalFFactorGroundFloorConstruction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalFFactorGroundFloorConstruction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalFFactorGroundFloorConstruction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalFFactorGroundFloorConstruction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::FFactorGroundFloorConstruction":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_isNull(self)

    def get(self) -> "openstudio::model::FFactorGroundFloorConstruction":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_get(self)

    def set(self, t: 'FFactorGroundFloorConstruction') -> "void":
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalFFactorGroundFloorConstruction
    __del__ = lambda self: None
OptionalFFactorGroundFloorConstruction_swigregister = _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_swigregister
OptionalFFactorGroundFloorConstruction_swigregister(OptionalFFactorGroundFloorConstruction)

class StandardsInformationConstructionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardsInformationConstructionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StandardsInformationConstructionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.StandardsInformationConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstructionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstructionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::size_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::value_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::StandardsInformationConstruction >::difference_type', j: 'std::vector< openstudio::model::StandardsInformationConstruction >::difference_type') -> "std::vector< openstudio::model::StandardsInformationConstruction,std::allocator< openstudio::model::StandardsInformationConstruction > > *":
        return _openstudiomodelresources.StandardsInformationConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::StandardsInformationConstruction >::difference_type', j: 'std::vector< openstudio::model::StandardsInformationConstruction >::difference_type') -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::StandardsInformationConstruction >::value_type const &":
        return _openstudiomodelresources.StandardsInformationConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector___setitem__(self, *args)

    def append(self, x: 'StandardsInformationConstruction') -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstructionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::size_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_clear(self)

    def swap(self, v: 'StandardsInformationConstructionVector') -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::allocator_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::reverse_iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::reverse_iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::StandardsInformationConstruction >::iterator":
        return _openstudiomodelresources.StandardsInformationConstructionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_StandardsInformationConstructionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'StandardsInformationConstruction') -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::value_type const &":
        return _openstudiomodelresources.StandardsInformationConstructionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::value_type const &":
        return _openstudiomodelresources.StandardsInformationConstructionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::StandardsInformationConstruction >::size_type', x: 'StandardsInformationConstruction') -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::StandardsInformationConstruction >::size_type', x: 'StandardsInformationConstruction') -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::StandardsInformationConstruction >::size_type') -> "void":
        return _openstudiomodelresources.StandardsInformationConstructionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::StandardsInformationConstruction >::size_type":
        return _openstudiomodelresources.StandardsInformationConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationConstructionVector
    __del__ = lambda self: None
StandardsInformationConstructionVector_swigregister = _openstudiomodelresources.StandardsInformationConstructionVector_swigregister
StandardsInformationConstructionVector_swigregister(StandardsInformationConstructionVector)

class OptionalStandardsInformationConstruction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalStandardsInformationConstruction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalStandardsInformationConstruction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalStandardsInformationConstruction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_reset(self)

    def __ref__(self) -> "openstudio::model::StandardsInformationConstruction":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_isNull(self)

    def get(self) -> "openstudio::model::StandardsInformationConstruction":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_get(self)

    def set(self, t: 'StandardsInformationConstruction') -> "void":
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardsInformationConstruction
    __del__ = lambda self: None
OptionalStandardsInformationConstruction_swigregister = _openstudiomodelresources.OptionalStandardsInformationConstruction_swigregister
OptionalStandardsInformationConstruction_swigregister(OptionalStandardsInformationConstruction)

class WindowDataFileVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowDataFileVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WindowDataFileVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.WindowDataFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.WindowDataFileVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.WindowDataFileVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WindowDataFile >::size_type":
        return _openstudiomodelresources.WindowDataFileVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::WindowDataFile >::value_type":
        return _openstudiomodelresources.WindowDataFileVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::WindowDataFile >::difference_type', j: 'std::vector< openstudio::model::WindowDataFile >::difference_type') -> "std::vector< openstudio::model::WindowDataFile,std::allocator< openstudio::model::WindowDataFile > > *":
        return _openstudiomodelresources.WindowDataFileVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.WindowDataFileVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::WindowDataFile >::difference_type', j: 'std::vector< openstudio::model::WindowDataFile >::difference_type') -> "void":
        return _openstudiomodelresources.WindowDataFileVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.WindowDataFileVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WindowDataFile >::value_type const &":
        return _openstudiomodelresources.WindowDataFileVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.WindowDataFileVector___setitem__(self, *args)

    def append(self, x: 'WindowDataFile') -> "void":
        return _openstudiomodelresources.WindowDataFileVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.WindowDataFileVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WindowDataFile >::size_type":
        return _openstudiomodelresources.WindowDataFileVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.WindowDataFileVector_clear(self)

    def swap(self, v: 'WindowDataFileVector') -> "void":
        return _openstudiomodelresources.WindowDataFileVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::WindowDataFile >::allocator_type":
        return _openstudiomodelresources.WindowDataFileVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::WindowDataFile >::iterator":
        return _openstudiomodelresources.WindowDataFileVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WindowDataFile >::iterator":
        return _openstudiomodelresources.WindowDataFileVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WindowDataFile >::reverse_iterator":
        return _openstudiomodelresources.WindowDataFileVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WindowDataFile >::reverse_iterator":
        return _openstudiomodelresources.WindowDataFileVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.WindowDataFileVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WindowDataFile >::iterator":
        return _openstudiomodelresources.WindowDataFileVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_WindowDataFileVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WindowDataFile') -> "void":
        return _openstudiomodelresources.WindowDataFileVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WindowDataFile >::value_type const &":
        return _openstudiomodelresources.WindowDataFileVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WindowDataFile >::value_type const &":
        return _openstudiomodelresources.WindowDataFileVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::WindowDataFile >::size_type', x: 'WindowDataFile') -> "void":
        return _openstudiomodelresources.WindowDataFileVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::WindowDataFile >::size_type', x: 'WindowDataFile') -> "void":
        return _openstudiomodelresources.WindowDataFileVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.WindowDataFileVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::WindowDataFile >::size_type') -> "void":
        return _openstudiomodelresources.WindowDataFileVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WindowDataFile >::size_type":
        return _openstudiomodelresources.WindowDataFileVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_WindowDataFileVector
    __del__ = lambda self: None
WindowDataFileVector_swigregister = _openstudiomodelresources.WindowDataFileVector_swigregister
WindowDataFileVector_swigregister(WindowDataFileVector)

class OptionalWindowDataFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWindowDataFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWindowDataFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalWindowDataFile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalWindowDataFile_reset(self)

    def __ref__(self) -> "openstudio::model::WindowDataFile":
        return _openstudiomodelresources.OptionalWindowDataFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalWindowDataFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalWindowDataFile_isNull(self)

    def get(self) -> "openstudio::model::WindowDataFile":
        return _openstudiomodelresources.OptionalWindowDataFile_get(self)

    def set(self, t: 'WindowDataFile') -> "void":
        return _openstudiomodelresources.OptionalWindowDataFile_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalWindowDataFile
    __del__ = lambda self: None
OptionalWindowDataFile_swigregister = _openstudiomodelresources.OptionalWindowDataFile_swigregister
OptionalWindowDataFile_swigregister(OptionalWindowDataFile)

class WindowPropertyFrameAndDividerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowPropertyFrameAndDividerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WindowPropertyFrameAndDividerVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::value_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::WindowPropertyFrameAndDivider >::difference_type', j: 'std::vector< openstudio::model::WindowPropertyFrameAndDivider >::difference_type') -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider,std::allocator< openstudio::model::WindowPropertyFrameAndDivider > > *":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::WindowPropertyFrameAndDivider >::difference_type', j: 'std::vector< openstudio::model::WindowPropertyFrameAndDivider >::difference_type') -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::value_type const &":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___setitem__(self, *args)

    def append(self, x: 'WindowPropertyFrameAndDivider') -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_clear(self)

    def swap(self, v: 'WindowPropertyFrameAndDividerVector') -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::allocator_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::reverse_iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::reverse_iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::iterator":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_WindowPropertyFrameAndDividerVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WindowPropertyFrameAndDivider') -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::value_type const &":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::value_type const &":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type', x: 'WindowPropertyFrameAndDivider') -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type', x: 'WindowPropertyFrameAndDivider') -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type') -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider >::size_type":
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_WindowPropertyFrameAndDividerVector
    __del__ = lambda self: None
WindowPropertyFrameAndDividerVector_swigregister = _openstudiomodelresources.WindowPropertyFrameAndDividerVector_swigregister
WindowPropertyFrameAndDividerVector_swigregister(WindowPropertyFrameAndDividerVector)

class OptionalWindowPropertyFrameAndDivider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWindowPropertyFrameAndDivider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWindowPropertyFrameAndDivider, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalWindowPropertyFrameAndDivider(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_reset(self)

    def __ref__(self) -> "openstudio::model::WindowPropertyFrameAndDivider":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_isNull(self)

    def get(self) -> "openstudio::model::WindowPropertyFrameAndDivider":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_get(self)

    def set(self, t: 'WindowPropertyFrameAndDivider') -> "void":
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalWindowPropertyFrameAndDivider
    __del__ = lambda self: None
OptionalWindowPropertyFrameAndDivider_swigregister = _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_swigregister
OptionalWindowPropertyFrameAndDivider_swigregister(OptionalWindowPropertyFrameAndDivider)

class DefaultSubSurfaceConstructionsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultSubSurfaceConstructionsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultSubSurfaceConstructionsVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::value_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::DefaultSubSurfaceConstructions >::difference_type', j: 'std::vector< openstudio::model::DefaultSubSurfaceConstructions >::difference_type') -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions,std::allocator< openstudio::model::DefaultSubSurfaceConstructions > > *":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::DefaultSubSurfaceConstructions >::difference_type', j: 'std::vector< openstudio::model::DefaultSubSurfaceConstructions >::difference_type') -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___setitem__(self, *args)

    def append(self, x: 'DefaultSubSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_clear(self)

    def swap(self, v: 'DefaultSubSurfaceConstructionsVector') -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::allocator_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::reverse_iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::reverse_iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_DefaultSubSurfaceConstructionsVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'DefaultSubSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type', x: 'DefaultSubSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type', x: 'DefaultSubSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type') -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSubSurfaceConstructionsVector
    __del__ = lambda self: None
DefaultSubSurfaceConstructionsVector_swigregister = _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_swigregister
DefaultSubSurfaceConstructionsVector_swigregister(DefaultSubSurfaceConstructionsVector)

class OptionalDefaultSubSurfaceConstructions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDefaultSubSurfaceConstructions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDefaultSubSurfaceConstructions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalDefaultSubSurfaceConstructions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_reset(self)

    def __ref__(self) -> "openstudio::model::DefaultSubSurfaceConstructions":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_isNull(self)

    def get(self) -> "openstudio::model::DefaultSubSurfaceConstructions":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_get(self)

    def set(self, t: 'DefaultSubSurfaceConstructions') -> "void":
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDefaultSubSurfaceConstructions
    __del__ = lambda self: None
OptionalDefaultSubSurfaceConstructions_swigregister = _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_swigregister
OptionalDefaultSubSurfaceConstructions_swigregister(OptionalDefaultSubSurfaceConstructions)

class DefaultSurfaceConstructionsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultSurfaceConstructionsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultSurfaceConstructionsVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::value_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::DefaultSurfaceConstructions >::difference_type', j: 'std::vector< openstudio::model::DefaultSurfaceConstructions >::difference_type') -> "std::vector< openstudio::model::DefaultSurfaceConstructions,std::allocator< openstudio::model::DefaultSurfaceConstructions > > *":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::DefaultSurfaceConstructions >::difference_type', j: 'std::vector< openstudio::model::DefaultSurfaceConstructions >::difference_type') -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___setitem__(self, *args)

    def append(self, x: 'DefaultSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_clear(self)

    def swap(self, v: 'DefaultSurfaceConstructionsVector') -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::allocator_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::reverse_iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::reverse_iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::iterator":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_DefaultSurfaceConstructionsVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'DefaultSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::value_type const &":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type', x: 'DefaultSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type', x: 'DefaultSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type') -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DefaultSurfaceConstructions >::size_type":
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSurfaceConstructionsVector
    __del__ = lambda self: None
DefaultSurfaceConstructionsVector_swigregister = _openstudiomodelresources.DefaultSurfaceConstructionsVector_swigregister
DefaultSurfaceConstructionsVector_swigregister(DefaultSurfaceConstructionsVector)

class OptionalDefaultSurfaceConstructions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDefaultSurfaceConstructions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDefaultSurfaceConstructions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalDefaultSurfaceConstructions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_reset(self)

    def __ref__(self) -> "openstudio::model::DefaultSurfaceConstructions":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_isNull(self)

    def get(self) -> "openstudio::model::DefaultSurfaceConstructions":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_get(self)

    def set(self, t: 'DefaultSurfaceConstructions') -> "void":
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDefaultSurfaceConstructions
    __del__ = lambda self: None
OptionalDefaultSurfaceConstructions_swigregister = _openstudiomodelresources.OptionalDefaultSurfaceConstructions_swigregister
OptionalDefaultSurfaceConstructions_swigregister(OptionalDefaultSurfaceConstructions)

class ShadingControlVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingControlVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingControlVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ShadingControlVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ShadingControlVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ShadingControlVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ShadingControl >::size_type":
        return _openstudiomodelresources.ShadingControlVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ShadingControl >::value_type":
        return _openstudiomodelresources.ShadingControlVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ShadingControl >::difference_type', j: 'std::vector< openstudio::model::ShadingControl >::difference_type') -> "std::vector< openstudio::model::ShadingControl,std::allocator< openstudio::model::ShadingControl > > *":
        return _openstudiomodelresources.ShadingControlVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingControlVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ShadingControl >::difference_type', j: 'std::vector< openstudio::model::ShadingControl >::difference_type') -> "void":
        return _openstudiomodelresources.ShadingControlVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingControlVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ShadingControl >::value_type const &":
        return _openstudiomodelresources.ShadingControlVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ShadingControlVector___setitem__(self, *args)

    def append(self, x: 'ShadingControl') -> "void":
        return _openstudiomodelresources.ShadingControlVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ShadingControlVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ShadingControl >::size_type":
        return _openstudiomodelresources.ShadingControlVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ShadingControlVector_clear(self)

    def swap(self, v: 'ShadingControlVector') -> "void":
        return _openstudiomodelresources.ShadingControlVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ShadingControl >::allocator_type":
        return _openstudiomodelresources.ShadingControlVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ShadingControl >::iterator":
        return _openstudiomodelresources.ShadingControlVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ShadingControl >::iterator":
        return _openstudiomodelresources.ShadingControlVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ShadingControl >::reverse_iterator":
        return _openstudiomodelresources.ShadingControlVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ShadingControl >::reverse_iterator":
        return _openstudiomodelresources.ShadingControlVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ShadingControlVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ShadingControl >::iterator":
        return _openstudiomodelresources.ShadingControlVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ShadingControlVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ShadingControl') -> "void":
        return _openstudiomodelresources.ShadingControlVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ShadingControl >::value_type const &":
        return _openstudiomodelresources.ShadingControlVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ShadingControl >::value_type const &":
        return _openstudiomodelresources.ShadingControlVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ShadingControl >::size_type', x: 'ShadingControl') -> "void":
        return _openstudiomodelresources.ShadingControlVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ShadingControl >::size_type', x: 'ShadingControl') -> "void":
        return _openstudiomodelresources.ShadingControlVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ShadingControlVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ShadingControl >::size_type') -> "void":
        return _openstudiomodelresources.ShadingControlVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ShadingControl >::size_type":
        return _openstudiomodelresources.ShadingControlVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingControlVector
    __del__ = lambda self: None
ShadingControlVector_swigregister = _openstudiomodelresources.ShadingControlVector_swigregister
ShadingControlVector_swigregister(ShadingControlVector)

class OptionalShadingControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalShadingControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalShadingControl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalShadingControl(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalShadingControl_reset(self)

    def __ref__(self) -> "openstudio::model::ShadingControl":
        return _openstudiomodelresources.OptionalShadingControl___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalShadingControl_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalShadingControl_isNull(self)

    def get(self) -> "openstudio::model::ShadingControl":
        return _openstudiomodelresources.OptionalShadingControl_get(self)

    def set(self, t: 'ShadingControl') -> "void":
        return _openstudiomodelresources.OptionalShadingControl_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalShadingControl
    __del__ = lambda self: None
OptionalShadingControl_swigregister = _openstudiomodelresources.OptionalShadingControl_swigregister
OptionalShadingControl_swigregister(OptionalShadingControl)

class CurveVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::Curve >::size_type":
        return _openstudiomodelresources.CurveVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::Curve >::value_type":
        return _openstudiomodelresources.CurveVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::Curve >::difference_type', j: 'std::vector< openstudio::model::Curve >::difference_type') -> "std::vector< openstudio::model::Curve,std::allocator< openstudio::model::Curve > > *":
        return _openstudiomodelresources.CurveVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::Curve >::difference_type', j: 'std::vector< openstudio::model::Curve >::difference_type') -> "void":
        return _openstudiomodelresources.CurveVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::Curve >::value_type const &":
        return _openstudiomodelresources.CurveVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveVector___setitem__(self, *args)

    def append(self, x: 'Curve') -> "void":
        return _openstudiomodelresources.CurveVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::Curve >::size_type":
        return _openstudiomodelresources.CurveVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveVector_clear(self)

    def swap(self, v: 'CurveVector') -> "void":
        return _openstudiomodelresources.CurveVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::Curve >::allocator_type":
        return _openstudiomodelresources.CurveVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::Curve >::iterator":
        return _openstudiomodelresources.CurveVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::Curve >::iterator":
        return _openstudiomodelresources.CurveVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::Curve >::reverse_iterator":
        return _openstudiomodelresources.CurveVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::Curve >::reverse_iterator":
        return _openstudiomodelresources.CurveVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::Curve >::iterator":
        return _openstudiomodelresources.CurveVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Curve') -> "void":
        return _openstudiomodelresources.CurveVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::Curve >::value_type const &":
        return _openstudiomodelresources.CurveVector_front(self)

    def back(self) -> "std::vector< openstudio::model::Curve >::value_type const &":
        return _openstudiomodelresources.CurveVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::Curve >::size_type', x: 'Curve') -> "void":
        return _openstudiomodelresources.CurveVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::Curve >::size_type', x: 'Curve') -> "void":
        return _openstudiomodelresources.CurveVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::Curve >::size_type') -> "void":
        return _openstudiomodelresources.CurveVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::Curve >::size_type":
        return _openstudiomodelresources.CurveVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveVector
    __del__ = lambda self: None
CurveVector_swigregister = _openstudiomodelresources.CurveVector_swigregister
CurveVector_swigregister(CurveVector)

class OptionalCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurve(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurve_reset(self)

    def __ref__(self) -> "openstudio::model::Curve":
        return _openstudiomodelresources.OptionalCurve___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurve_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurve_isNull(self)

    def get(self) -> "openstudio::model::Curve":
        return _openstudiomodelresources.OptionalCurve_get(self)

    def set(self, t: 'Curve') -> "void":
        return _openstudiomodelresources.OptionalCurve_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurve
    __del__ = lambda self: None
OptionalCurve_swigregister = _openstudiomodelresources.OptionalCurve_swigregister
OptionalCurve_swigregister(OptionalCurve)

class CurveBicubicVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveBicubicVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveBicubicVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveBicubicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveBicubicVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveBicubicVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveBicubic >::size_type":
        return _openstudiomodelresources.CurveBicubicVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveBicubic >::value_type":
        return _openstudiomodelresources.CurveBicubicVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveBicubic >::difference_type', j: 'std::vector< openstudio::model::CurveBicubic >::difference_type') -> "std::vector< openstudio::model::CurveBicubic,std::allocator< openstudio::model::CurveBicubic > > *":
        return _openstudiomodelresources.CurveBicubicVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBicubicVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveBicubic >::difference_type', j: 'std::vector< openstudio::model::CurveBicubic >::difference_type') -> "void":
        return _openstudiomodelresources.CurveBicubicVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBicubicVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveBicubic >::value_type const &":
        return _openstudiomodelresources.CurveBicubicVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBicubicVector___setitem__(self, *args)

    def append(self, x: 'CurveBicubic') -> "void":
        return _openstudiomodelresources.CurveBicubicVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveBicubicVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveBicubic >::size_type":
        return _openstudiomodelresources.CurveBicubicVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveBicubicVector_clear(self)

    def swap(self, v: 'CurveBicubicVector') -> "void":
        return _openstudiomodelresources.CurveBicubicVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveBicubic >::allocator_type":
        return _openstudiomodelresources.CurveBicubicVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveBicubic >::iterator":
        return _openstudiomodelresources.CurveBicubicVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveBicubic >::iterator":
        return _openstudiomodelresources.CurveBicubicVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveBicubic >::reverse_iterator":
        return _openstudiomodelresources.CurveBicubicVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveBicubic >::reverse_iterator":
        return _openstudiomodelresources.CurveBicubicVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveBicubicVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveBicubic >::iterator":
        return _openstudiomodelresources.CurveBicubicVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveBicubicVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveBicubic') -> "void":
        return _openstudiomodelresources.CurveBicubicVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveBicubic >::value_type const &":
        return _openstudiomodelresources.CurveBicubicVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveBicubic >::value_type const &":
        return _openstudiomodelresources.CurveBicubicVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveBicubic >::size_type', x: 'CurveBicubic') -> "void":
        return _openstudiomodelresources.CurveBicubicVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveBicubic >::size_type', x: 'CurveBicubic') -> "void":
        return _openstudiomodelresources.CurveBicubicVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveBicubicVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveBicubic >::size_type') -> "void":
        return _openstudiomodelresources.CurveBicubicVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveBicubic >::size_type":
        return _openstudiomodelresources.CurveBicubicVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBicubicVector
    __del__ = lambda self: None
CurveBicubicVector_swigregister = _openstudiomodelresources.CurveBicubicVector_swigregister
CurveBicubicVector_swigregister(CurveBicubicVector)

class OptionalCurveBicubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveBicubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveBicubic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveBicubic(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveBicubic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveBicubic":
        return _openstudiomodelresources.OptionalCurveBicubic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveBicubic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveBicubic_isNull(self)

    def get(self) -> "openstudio::model::CurveBicubic":
        return _openstudiomodelresources.OptionalCurveBicubic_get(self)

    def set(self, t: 'CurveBicubic') -> "void":
        return _openstudiomodelresources.OptionalCurveBicubic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveBicubic
    __del__ = lambda self: None
OptionalCurveBicubic_swigregister = _openstudiomodelresources.OptionalCurveBicubic_swigregister
OptionalCurveBicubic_swigregister(OptionalCurveBicubic)

class CurveBiquadraticVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveBiquadraticVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveBiquadraticVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveBiquadraticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadraticVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadraticVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveBiquadratic >::size_type":
        return _openstudiomodelresources.CurveBiquadraticVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveBiquadratic >::value_type":
        return _openstudiomodelresources.CurveBiquadraticVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveBiquadratic >::difference_type', j: 'std::vector< openstudio::model::CurveBiquadratic >::difference_type') -> "std::vector< openstudio::model::CurveBiquadratic,std::allocator< openstudio::model::CurveBiquadratic > > *":
        return _openstudiomodelresources.CurveBiquadraticVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveBiquadratic >::difference_type', j: 'std::vector< openstudio::model::CurveBiquadratic >::difference_type') -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveBiquadratic >::value_type const &":
        return _openstudiomodelresources.CurveBiquadraticVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector___setitem__(self, *args)

    def append(self, x: 'CurveBiquadratic') -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadraticVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveBiquadratic >::size_type":
        return _openstudiomodelresources.CurveBiquadraticVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_clear(self)

    def swap(self, v: 'CurveBiquadraticVector') -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveBiquadratic >::allocator_type":
        return _openstudiomodelresources.CurveBiquadraticVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveBiquadratic >::iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveBiquadratic >::iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveBiquadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveBiquadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveBiquadratic >::iterator":
        return _openstudiomodelresources.CurveBiquadraticVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveBiquadraticVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveBiquadratic') -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveBiquadratic >::value_type const &":
        return _openstudiomodelresources.CurveBiquadraticVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveBiquadratic >::value_type const &":
        return _openstudiomodelresources.CurveBiquadraticVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveBiquadratic >::size_type', x: 'CurveBiquadratic') -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveBiquadratic >::size_type', x: 'CurveBiquadratic') -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveBiquadratic >::size_type') -> "void":
        return _openstudiomodelresources.CurveBiquadraticVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveBiquadratic >::size_type":
        return _openstudiomodelresources.CurveBiquadraticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBiquadraticVector
    __del__ = lambda self: None
CurveBiquadraticVector_swigregister = _openstudiomodelresources.CurveBiquadraticVector_swigregister
CurveBiquadraticVector_swigregister(CurveBiquadraticVector)

class OptionalCurveBiquadratic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveBiquadratic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveBiquadratic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveBiquadratic(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveBiquadratic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveBiquadratic":
        return _openstudiomodelresources.OptionalCurveBiquadratic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveBiquadratic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveBiquadratic_isNull(self)

    def get(self) -> "openstudio::model::CurveBiquadratic":
        return _openstudiomodelresources.OptionalCurveBiquadratic_get(self)

    def set(self, t: 'CurveBiquadratic') -> "void":
        return _openstudiomodelresources.OptionalCurveBiquadratic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveBiquadratic
    __del__ = lambda self: None
OptionalCurveBiquadratic_swigregister = _openstudiomodelresources.OptionalCurveBiquadratic_swigregister
OptionalCurveBiquadratic_swigregister(OptionalCurveBiquadratic)

class CurveCubicVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveCubicVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveCubicVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveCubicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveCubicVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveCubicVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveCubic >::size_type":
        return _openstudiomodelresources.CurveCubicVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveCubic >::value_type":
        return _openstudiomodelresources.CurveCubicVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveCubic >::difference_type', j: 'std::vector< openstudio::model::CurveCubic >::difference_type') -> "std::vector< openstudio::model::CurveCubic,std::allocator< openstudio::model::CurveCubic > > *":
        return _openstudiomodelresources.CurveCubicVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveCubicVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveCubic >::difference_type', j: 'std::vector< openstudio::model::CurveCubic >::difference_type') -> "void":
        return _openstudiomodelresources.CurveCubicVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveCubicVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveCubic >::value_type const &":
        return _openstudiomodelresources.CurveCubicVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveCubicVector___setitem__(self, *args)

    def append(self, x: 'CurveCubic') -> "void":
        return _openstudiomodelresources.CurveCubicVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveCubicVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveCubic >::size_type":
        return _openstudiomodelresources.CurveCubicVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveCubicVector_clear(self)

    def swap(self, v: 'CurveCubicVector') -> "void":
        return _openstudiomodelresources.CurveCubicVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveCubic >::allocator_type":
        return _openstudiomodelresources.CurveCubicVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveCubic >::iterator":
        return _openstudiomodelresources.CurveCubicVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveCubic >::iterator":
        return _openstudiomodelresources.CurveCubicVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveCubic >::reverse_iterator":
        return _openstudiomodelresources.CurveCubicVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveCubic >::reverse_iterator":
        return _openstudiomodelresources.CurveCubicVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveCubicVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveCubic >::iterator":
        return _openstudiomodelresources.CurveCubicVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveCubicVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveCubic') -> "void":
        return _openstudiomodelresources.CurveCubicVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveCubic >::value_type const &":
        return _openstudiomodelresources.CurveCubicVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveCubic >::value_type const &":
        return _openstudiomodelresources.CurveCubicVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveCubic >::size_type', x: 'CurveCubic') -> "void":
        return _openstudiomodelresources.CurveCubicVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveCubic >::size_type', x: 'CurveCubic') -> "void":
        return _openstudiomodelresources.CurveCubicVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveCubicVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveCubic >::size_type') -> "void":
        return _openstudiomodelresources.CurveCubicVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveCubic >::size_type":
        return _openstudiomodelresources.CurveCubicVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveCubicVector
    __del__ = lambda self: None
CurveCubicVector_swigregister = _openstudiomodelresources.CurveCubicVector_swigregister
CurveCubicVector_swigregister(CurveCubicVector)

class OptionalCurveCubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveCubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveCubic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveCubic(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveCubic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveCubic":
        return _openstudiomodelresources.OptionalCurveCubic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveCubic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveCubic_isNull(self)

    def get(self) -> "openstudio::model::CurveCubic":
        return _openstudiomodelresources.OptionalCurveCubic_get(self)

    def set(self, t: 'CurveCubic') -> "void":
        return _openstudiomodelresources.OptionalCurveCubic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveCubic
    __del__ = lambda self: None
OptionalCurveCubic_swigregister = _openstudiomodelresources.OptionalCurveCubic_swigregister
OptionalCurveCubic_swigregister(OptionalCurveCubic)

class CurveDoubleExponentialDecayVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveDoubleExponentialDecayVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveDoubleExponentialDecayVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::value_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveDoubleExponentialDecay >::difference_type', j: 'std::vector< openstudio::model::CurveDoubleExponentialDecay >::difference_type') -> "std::vector< openstudio::model::CurveDoubleExponentialDecay,std::allocator< openstudio::model::CurveDoubleExponentialDecay > > *":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveDoubleExponentialDecay >::difference_type', j: 'std::vector< openstudio::model::CurveDoubleExponentialDecay >::difference_type') -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___setitem__(self, *args)

    def append(self, x: 'CurveDoubleExponentialDecay') -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_clear(self)

    def swap(self, v: 'CurveDoubleExponentialDecayVector') -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::allocator_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::reverse_iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::reverse_iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveDoubleExponentialDecayVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveDoubleExponentialDecay') -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type', x: 'CurveDoubleExponentialDecay') -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type', x: 'CurveDoubleExponentialDecay') -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type') -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveDoubleExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveDoubleExponentialDecayVector
    __del__ = lambda self: None
CurveDoubleExponentialDecayVector_swigregister = _openstudiomodelresources.CurveDoubleExponentialDecayVector_swigregister
CurveDoubleExponentialDecayVector_swigregister(CurveDoubleExponentialDecayVector)

class OptionalCurveDoubleExponentialDecay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveDoubleExponentialDecay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveDoubleExponentialDecay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveDoubleExponentialDecay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_reset(self)

    def __ref__(self) -> "openstudio::model::CurveDoubleExponentialDecay":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_isNull(self)

    def get(self) -> "openstudio::model::CurveDoubleExponentialDecay":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_get(self)

    def set(self, t: 'CurveDoubleExponentialDecay') -> "void":
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveDoubleExponentialDecay
    __del__ = lambda self: None
OptionalCurveDoubleExponentialDecay_swigregister = _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_swigregister
OptionalCurveDoubleExponentialDecay_swigregister(OptionalCurveDoubleExponentialDecay)

class CurveExponentVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveExponentVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveExponentVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveExponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveExponent >::size_type":
        return _openstudiomodelresources.CurveExponentVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveExponent >::value_type":
        return _openstudiomodelresources.CurveExponentVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveExponent >::difference_type', j: 'std::vector< openstudio::model::CurveExponent >::difference_type') -> "std::vector< openstudio::model::CurveExponent,std::allocator< openstudio::model::CurveExponent > > *":
        return _openstudiomodelresources.CurveExponentVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveExponent >::difference_type', j: 'std::vector< openstudio::model::CurveExponent >::difference_type') -> "void":
        return _openstudiomodelresources.CurveExponentVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveExponent >::value_type const &":
        return _openstudiomodelresources.CurveExponentVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentVector___setitem__(self, *args)

    def append(self, x: 'CurveExponent') -> "void":
        return _openstudiomodelresources.CurveExponentVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveExponentVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveExponent >::size_type":
        return _openstudiomodelresources.CurveExponentVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveExponentVector_clear(self)

    def swap(self, v: 'CurveExponentVector') -> "void":
        return _openstudiomodelresources.CurveExponentVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveExponent >::allocator_type":
        return _openstudiomodelresources.CurveExponentVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveExponent >::iterator":
        return _openstudiomodelresources.CurveExponentVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveExponent >::iterator":
        return _openstudiomodelresources.CurveExponentVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveExponent >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveExponent >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveExponentVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveExponent >::iterator":
        return _openstudiomodelresources.CurveExponentVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveExponentVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveExponent') -> "void":
        return _openstudiomodelresources.CurveExponentVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveExponent >::value_type const &":
        return _openstudiomodelresources.CurveExponentVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveExponent >::value_type const &":
        return _openstudiomodelresources.CurveExponentVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveExponent >::size_type', x: 'CurveExponent') -> "void":
        return _openstudiomodelresources.CurveExponentVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveExponent >::size_type', x: 'CurveExponent') -> "void":
        return _openstudiomodelresources.CurveExponentVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveExponent >::size_type') -> "void":
        return _openstudiomodelresources.CurveExponentVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveExponent >::size_type":
        return _openstudiomodelresources.CurveExponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentVector
    __del__ = lambda self: None
CurveExponentVector_swigregister = _openstudiomodelresources.CurveExponentVector_swigregister
CurveExponentVector_swigregister(CurveExponentVector)

class OptionalCurveExponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveExponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveExponent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveExponent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveExponent_reset(self)

    def __ref__(self) -> "openstudio::model::CurveExponent":
        return _openstudiomodelresources.OptionalCurveExponent___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponent_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponent_isNull(self)

    def get(self) -> "openstudio::model::CurveExponent":
        return _openstudiomodelresources.OptionalCurveExponent_get(self)

    def set(self, t: 'CurveExponent') -> "void":
        return _openstudiomodelresources.OptionalCurveExponent_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveExponent
    __del__ = lambda self: None
OptionalCurveExponent_swigregister = _openstudiomodelresources.OptionalCurveExponent_swigregister
OptionalCurveExponent_swigregister(OptionalCurveExponent)

class CurveExponentialDecayVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveExponentialDecayVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveExponentialDecayVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveExponentialDecayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecayVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveExponentialDecayVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::value_type":
        return _openstudiomodelresources.CurveExponentialDecayVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveExponentialDecay >::difference_type', j: 'std::vector< openstudio::model::CurveExponentialDecay >::difference_type') -> "std::vector< openstudio::model::CurveExponentialDecay,std::allocator< openstudio::model::CurveExponentialDecay > > *":
        return _openstudiomodelresources.CurveExponentialDecayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveExponentialDecay >::difference_type', j: 'std::vector< openstudio::model::CurveExponentialDecay >::difference_type') -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveExponentialDecayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector___setitem__(self, *args)

    def append(self, x: 'CurveExponentialDecay') -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecayVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveExponentialDecayVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_clear(self)

    def swap(self, v: 'CurveExponentialDecayVector') -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::allocator_type":
        return _openstudiomodelresources.CurveExponentialDecayVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveExponentialDecay >::iterator":
        return _openstudiomodelresources.CurveExponentialDecayVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveExponentialDecayVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveExponentialDecay') -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveExponentialDecayVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::value_type const &":
        return _openstudiomodelresources.CurveExponentialDecayVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveExponentialDecay >::size_type', x: 'CurveExponentialDecay') -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveExponentialDecay >::size_type', x: 'CurveExponentialDecay') -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveExponentialDecay >::size_type') -> "void":
        return _openstudiomodelresources.CurveExponentialDecayVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveExponentialDecay >::size_type":
        return _openstudiomodelresources.CurveExponentialDecayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialDecayVector
    __del__ = lambda self: None
CurveExponentialDecayVector_swigregister = _openstudiomodelresources.CurveExponentialDecayVector_swigregister
CurveExponentialDecayVector_swigregister(CurveExponentialDecayVector)

class OptionalCurveExponentialDecay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveExponentialDecay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveExponentialDecay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveExponentialDecay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_reset(self)

    def __ref__(self) -> "openstudio::model::CurveExponentialDecay":
        return _openstudiomodelresources.OptionalCurveExponentialDecay___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_isNull(self)

    def get(self) -> "openstudio::model::CurveExponentialDecay":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_get(self)

    def set(self, t: 'CurveExponentialDecay') -> "void":
        return _openstudiomodelresources.OptionalCurveExponentialDecay_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveExponentialDecay
    __del__ = lambda self: None
OptionalCurveExponentialDecay_swigregister = _openstudiomodelresources.OptionalCurveExponentialDecay_swigregister
OptionalCurveExponentialDecay_swigregister(OptionalCurveExponentialDecay)

class CurveExponentialSkewNormalVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveExponentialSkewNormalVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveExponentialSkewNormalVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::value_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveExponentialSkewNormal >::difference_type', j: 'std::vector< openstudio::model::CurveExponentialSkewNormal >::difference_type') -> "std::vector< openstudio::model::CurveExponentialSkewNormal,std::allocator< openstudio::model::CurveExponentialSkewNormal > > *":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveExponentialSkewNormal >::difference_type', j: 'std::vector< openstudio::model::CurveExponentialSkewNormal >::difference_type') -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::value_type const &":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___setitem__(self, *args)

    def append(self, x: 'CurveExponentialSkewNormal') -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_clear(self)

    def swap(self, v: 'CurveExponentialSkewNormalVector') -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::allocator_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::reverse_iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::iterator":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveExponentialSkewNormalVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveExponentialSkewNormal') -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::value_type const &":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::value_type const &":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type', x: 'CurveExponentialSkewNormal') -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type', x: 'CurveExponentialSkewNormal') -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type') -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveExponentialSkewNormal >::size_type":
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialSkewNormalVector
    __del__ = lambda self: None
CurveExponentialSkewNormalVector_swigregister = _openstudiomodelresources.CurveExponentialSkewNormalVector_swigregister
CurveExponentialSkewNormalVector_swigregister(CurveExponentialSkewNormalVector)

class OptionalCurveExponentialSkewNormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveExponentialSkewNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveExponentialSkewNormal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveExponentialSkewNormal(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_reset(self)

    def __ref__(self) -> "openstudio::model::CurveExponentialSkewNormal":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_isNull(self)

    def get(self) -> "openstudio::model::CurveExponentialSkewNormal":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_get(self)

    def set(self, t: 'CurveExponentialSkewNormal') -> "void":
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveExponentialSkewNormal
    __del__ = lambda self: None
OptionalCurveExponentialSkewNormal_swigregister = _openstudiomodelresources.OptionalCurveExponentialSkewNormal_swigregister
OptionalCurveExponentialSkewNormal_swigregister(OptionalCurveExponentialSkewNormal)

class CurveFanPressureRiseVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveFanPressureRiseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveFanPressureRiseVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveFanPressureRiseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveFanPressureRiseVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveFanPressureRiseVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::size_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::value_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveFanPressureRise >::difference_type', j: 'std::vector< openstudio::model::CurveFanPressureRise >::difference_type') -> "std::vector< openstudio::model::CurveFanPressureRise,std::allocator< openstudio::model::CurveFanPressureRise > > *":
        return _openstudiomodelresources.CurveFanPressureRiseVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveFanPressureRise >::difference_type', j: 'std::vector< openstudio::model::CurveFanPressureRise >::difference_type') -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveFanPressureRise >::value_type const &":
        return _openstudiomodelresources.CurveFanPressureRiseVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector___setitem__(self, *args)

    def append(self, x: 'CurveFanPressureRise') -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveFanPressureRiseVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::size_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_clear(self)

    def swap(self, v: 'CurveFanPressureRiseVector') -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::allocator_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::reverse_iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::reverse_iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveFanPressureRise >::iterator":
        return _openstudiomodelresources.CurveFanPressureRiseVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveFanPressureRiseVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveFanPressureRise') -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::value_type const &":
        return _openstudiomodelresources.CurveFanPressureRiseVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::value_type const &":
        return _openstudiomodelresources.CurveFanPressureRiseVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveFanPressureRise >::size_type', x: 'CurveFanPressureRise') -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveFanPressureRise >::size_type', x: 'CurveFanPressureRise') -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveFanPressureRise >::size_type') -> "void":
        return _openstudiomodelresources.CurveFanPressureRiseVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveFanPressureRise >::size_type":
        return _openstudiomodelresources.CurveFanPressureRiseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFanPressureRiseVector
    __del__ = lambda self: None
CurveFanPressureRiseVector_swigregister = _openstudiomodelresources.CurveFanPressureRiseVector_swigregister
CurveFanPressureRiseVector_swigregister(CurveFanPressureRiseVector)

class OptionalCurveFanPressureRise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveFanPressureRise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveFanPressureRise, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveFanPressureRise(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_reset(self)

    def __ref__(self) -> "openstudio::model::CurveFanPressureRise":
        return _openstudiomodelresources.OptionalCurveFanPressureRise___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_isNull(self)

    def get(self) -> "openstudio::model::CurveFanPressureRise":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_get(self)

    def set(self, t: 'CurveFanPressureRise') -> "void":
        return _openstudiomodelresources.OptionalCurveFanPressureRise_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveFanPressureRise
    __del__ = lambda self: None
OptionalCurveFanPressureRise_swigregister = _openstudiomodelresources.OptionalCurveFanPressureRise_swigregister
OptionalCurveFanPressureRise_swigregister(OptionalCurveFanPressureRise)

class CurveFunctionalPressureDropVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveFunctionalPressureDropVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveFunctionalPressureDropVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::value_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveFunctionalPressureDrop >::difference_type', j: 'std::vector< openstudio::model::CurveFunctionalPressureDrop >::difference_type') -> "std::vector< openstudio::model::CurveFunctionalPressureDrop,std::allocator< openstudio::model::CurveFunctionalPressureDrop > > *":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveFunctionalPressureDrop >::difference_type', j: 'std::vector< openstudio::model::CurveFunctionalPressureDrop >::difference_type') -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::value_type const &":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___setitem__(self, *args)

    def append(self, x: 'CurveFunctionalPressureDrop') -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_clear(self)

    def swap(self, v: 'CurveFunctionalPressureDropVector') -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::allocator_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::reverse_iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::reverse_iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::iterator":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveFunctionalPressureDropVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveFunctionalPressureDrop') -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::value_type const &":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::value_type const &":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type', x: 'CurveFunctionalPressureDrop') -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type', x: 'CurveFunctionalPressureDrop') -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type') -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveFunctionalPressureDrop >::size_type":
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFunctionalPressureDropVector
    __del__ = lambda self: None
CurveFunctionalPressureDropVector_swigregister = _openstudiomodelresources.CurveFunctionalPressureDropVector_swigregister
CurveFunctionalPressureDropVector_swigregister(CurveFunctionalPressureDropVector)

class OptionalCurveFunctionalPressureDrop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveFunctionalPressureDrop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveFunctionalPressureDrop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveFunctionalPressureDrop(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_reset(self)

    def __ref__(self) -> "openstudio::model::CurveFunctionalPressureDrop":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_isNull(self)

    def get(self) -> "openstudio::model::CurveFunctionalPressureDrop":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_get(self)

    def set(self, t: 'CurveFunctionalPressureDrop') -> "void":
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveFunctionalPressureDrop
    __del__ = lambda self: None
OptionalCurveFunctionalPressureDrop_swigregister = _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_swigregister
OptionalCurveFunctionalPressureDrop_swigregister(OptionalCurveFunctionalPressureDrop)

class CurveLinearVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveLinearVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveLinearVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveLinearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveLinearVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveLinearVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveLinear >::size_type":
        return _openstudiomodelresources.CurveLinearVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveLinear >::value_type":
        return _openstudiomodelresources.CurveLinearVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveLinear >::difference_type', j: 'std::vector< openstudio::model::CurveLinear >::difference_type') -> "std::vector< openstudio::model::CurveLinear,std::allocator< openstudio::model::CurveLinear > > *":
        return _openstudiomodelresources.CurveLinearVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveLinearVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveLinear >::difference_type', j: 'std::vector< openstudio::model::CurveLinear >::difference_type') -> "void":
        return _openstudiomodelresources.CurveLinearVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveLinearVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveLinear >::value_type const &":
        return _openstudiomodelresources.CurveLinearVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveLinearVector___setitem__(self, *args)

    def append(self, x: 'CurveLinear') -> "void":
        return _openstudiomodelresources.CurveLinearVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveLinearVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveLinear >::size_type":
        return _openstudiomodelresources.CurveLinearVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveLinearVector_clear(self)

    def swap(self, v: 'CurveLinearVector') -> "void":
        return _openstudiomodelresources.CurveLinearVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveLinear >::allocator_type":
        return _openstudiomodelresources.CurveLinearVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveLinear >::iterator":
        return _openstudiomodelresources.CurveLinearVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveLinear >::iterator":
        return _openstudiomodelresources.CurveLinearVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveLinear >::reverse_iterator":
        return _openstudiomodelresources.CurveLinearVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveLinear >::reverse_iterator":
        return _openstudiomodelresources.CurveLinearVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveLinearVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveLinear >::iterator":
        return _openstudiomodelresources.CurveLinearVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveLinearVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveLinear') -> "void":
        return _openstudiomodelresources.CurveLinearVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveLinear >::value_type const &":
        return _openstudiomodelresources.CurveLinearVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveLinear >::value_type const &":
        return _openstudiomodelresources.CurveLinearVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveLinear >::size_type', x: 'CurveLinear') -> "void":
        return _openstudiomodelresources.CurveLinearVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveLinear >::size_type', x: 'CurveLinear') -> "void":
        return _openstudiomodelresources.CurveLinearVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveLinearVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveLinear >::size_type') -> "void":
        return _openstudiomodelresources.CurveLinearVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveLinear >::size_type":
        return _openstudiomodelresources.CurveLinearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveLinearVector
    __del__ = lambda self: None
CurveLinearVector_swigregister = _openstudiomodelresources.CurveLinearVector_swigregister
CurveLinearVector_swigregister(CurveLinearVector)

class OptionalCurveLinear(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveLinear, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveLinear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveLinear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveLinear_reset(self)

    def __ref__(self) -> "openstudio::model::CurveLinear":
        return _openstudiomodelresources.OptionalCurveLinear___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveLinear_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveLinear_isNull(self)

    def get(self) -> "openstudio::model::CurveLinear":
        return _openstudiomodelresources.OptionalCurveLinear_get(self)

    def set(self, t: 'CurveLinear') -> "void":
        return _openstudiomodelresources.OptionalCurveLinear_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveLinear
    __del__ = lambda self: None
OptionalCurveLinear_swigregister = _openstudiomodelresources.OptionalCurveLinear_swigregister
OptionalCurveLinear_swigregister(OptionalCurveLinear)

class CurveQuadraticVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveQuadraticVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveQuadraticVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveQuadraticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveQuadratic >::size_type":
        return _openstudiomodelresources.CurveQuadraticVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveQuadratic >::value_type":
        return _openstudiomodelresources.CurveQuadraticVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveQuadratic >::difference_type', j: 'std::vector< openstudio::model::CurveQuadratic >::difference_type') -> "std::vector< openstudio::model::CurveQuadratic,std::allocator< openstudio::model::CurveQuadratic > > *":
        return _openstudiomodelresources.CurveQuadraticVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveQuadratic >::difference_type', j: 'std::vector< openstudio::model::CurveQuadratic >::difference_type') -> "void":
        return _openstudiomodelresources.CurveQuadraticVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveQuadratic >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector___setitem__(self, *args)

    def append(self, x: 'CurveQuadratic') -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveQuadratic >::size_type":
        return _openstudiomodelresources.CurveQuadraticVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_clear(self)

    def swap(self, v: 'CurveQuadraticVector') -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveQuadratic >::allocator_type":
        return _openstudiomodelresources.CurveQuadraticVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveQuadratic >::iterator":
        return _openstudiomodelresources.CurveQuadraticVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveQuadratic >::iterator":
        return _openstudiomodelresources.CurveQuadraticVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveQuadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveQuadraticVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveQuadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveQuadraticVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveQuadratic >::iterator":
        return _openstudiomodelresources.CurveQuadraticVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveQuadraticVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveQuadratic') -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveQuadratic >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveQuadratic >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveQuadratic >::size_type', x: 'CurveQuadratic') -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveQuadratic >::size_type', x: 'CurveQuadratic') -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveQuadratic >::size_type') -> "void":
        return _openstudiomodelresources.CurveQuadraticVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveQuadratic >::size_type":
        return _openstudiomodelresources.CurveQuadraticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadraticVector
    __del__ = lambda self: None
CurveQuadraticVector_swigregister = _openstudiomodelresources.CurveQuadraticVector_swigregister
CurveQuadraticVector_swigregister(CurveQuadraticVector)

class OptionalCurveQuadratic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveQuadratic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveQuadratic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveQuadratic(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveQuadratic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveQuadratic":
        return _openstudiomodelresources.OptionalCurveQuadratic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuadratic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuadratic_isNull(self)

    def get(self) -> "openstudio::model::CurveQuadratic":
        return _openstudiomodelresources.OptionalCurveQuadratic_get(self)

    def set(self, t: 'CurveQuadratic') -> "void":
        return _openstudiomodelresources.OptionalCurveQuadratic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuadratic
    __del__ = lambda self: None
OptionalCurveQuadratic_swigregister = _openstudiomodelresources.OptionalCurveQuadratic_swigregister
OptionalCurveQuadratic_swigregister(OptionalCurveQuadratic)

class CurveQuadraticLinearVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveQuadraticLinearVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveQuadraticLinearVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveQuadraticLinearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinearVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinearVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::size_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::value_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveQuadraticLinear >::difference_type', j: 'std::vector< openstudio::model::CurveQuadraticLinear >::difference_type') -> "std::vector< openstudio::model::CurveQuadraticLinear,std::allocator< openstudio::model::CurveQuadraticLinear > > *":
        return _openstudiomodelresources.CurveQuadraticLinearVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveQuadraticLinear >::difference_type', j: 'std::vector< openstudio::model::CurveQuadraticLinear >::difference_type') -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveQuadraticLinear >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticLinearVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector___setitem__(self, *args)

    def append(self, x: 'CurveQuadraticLinear') -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinearVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::size_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_clear(self)

    def swap(self, v: 'CurveQuadraticLinearVector') -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::allocator_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::reverse_iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::reverse_iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveQuadraticLinear >::iterator":
        return _openstudiomodelresources.CurveQuadraticLinearVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveQuadraticLinearVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveQuadraticLinear') -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticLinearVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::value_type const &":
        return _openstudiomodelresources.CurveQuadraticLinearVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveQuadraticLinear >::size_type', x: 'CurveQuadraticLinear') -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveQuadraticLinear >::size_type', x: 'CurveQuadraticLinear') -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveQuadraticLinear >::size_type') -> "void":
        return _openstudiomodelresources.CurveQuadraticLinearVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveQuadraticLinear >::size_type":
        return _openstudiomodelresources.CurveQuadraticLinearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadraticLinearVector
    __del__ = lambda self: None
CurveQuadraticLinearVector_swigregister = _openstudiomodelresources.CurveQuadraticLinearVector_swigregister
CurveQuadraticLinearVector_swigregister(CurveQuadraticLinearVector)

class OptionalCurveQuadraticLinear(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveQuadraticLinear, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveQuadraticLinear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveQuadraticLinear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_reset(self)

    def __ref__(self) -> "openstudio::model::CurveQuadraticLinear":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_isNull(self)

    def get(self) -> "openstudio::model::CurveQuadraticLinear":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_get(self)

    def set(self, t: 'CurveQuadraticLinear') -> "void":
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuadraticLinear
    __del__ = lambda self: None
OptionalCurveQuadraticLinear_swigregister = _openstudiomodelresources.OptionalCurveQuadraticLinear_swigregister
OptionalCurveQuadraticLinear_swigregister(OptionalCurveQuadraticLinear)

class CurveQuarticVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveQuarticVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveQuarticVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveQuarticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveQuarticVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveQuarticVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveQuartic >::size_type":
        return _openstudiomodelresources.CurveQuarticVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveQuartic >::value_type":
        return _openstudiomodelresources.CurveQuarticVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveQuartic >::difference_type', j: 'std::vector< openstudio::model::CurveQuartic >::difference_type') -> "std::vector< openstudio::model::CurveQuartic,std::allocator< openstudio::model::CurveQuartic > > *":
        return _openstudiomodelresources.CurveQuarticVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuarticVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveQuartic >::difference_type', j: 'std::vector< openstudio::model::CurveQuartic >::difference_type') -> "void":
        return _openstudiomodelresources.CurveQuarticVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuarticVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveQuartic >::value_type const &":
        return _openstudiomodelresources.CurveQuarticVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuarticVector___setitem__(self, *args)

    def append(self, x: 'CurveQuartic') -> "void":
        return _openstudiomodelresources.CurveQuarticVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveQuarticVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveQuartic >::size_type":
        return _openstudiomodelresources.CurveQuarticVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveQuarticVector_clear(self)

    def swap(self, v: 'CurveQuarticVector') -> "void":
        return _openstudiomodelresources.CurveQuarticVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveQuartic >::allocator_type":
        return _openstudiomodelresources.CurveQuarticVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveQuartic >::iterator":
        return _openstudiomodelresources.CurveQuarticVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveQuartic >::iterator":
        return _openstudiomodelresources.CurveQuarticVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveQuartic >::reverse_iterator":
        return _openstudiomodelresources.CurveQuarticVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveQuartic >::reverse_iterator":
        return _openstudiomodelresources.CurveQuarticVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveQuarticVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveQuartic >::iterator":
        return _openstudiomodelresources.CurveQuarticVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveQuarticVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveQuartic') -> "void":
        return _openstudiomodelresources.CurveQuarticVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveQuartic >::value_type const &":
        return _openstudiomodelresources.CurveQuarticVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveQuartic >::value_type const &":
        return _openstudiomodelresources.CurveQuarticVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveQuartic >::size_type', x: 'CurveQuartic') -> "void":
        return _openstudiomodelresources.CurveQuarticVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveQuartic >::size_type', x: 'CurveQuartic') -> "void":
        return _openstudiomodelresources.CurveQuarticVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveQuarticVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveQuartic >::size_type') -> "void":
        return _openstudiomodelresources.CurveQuarticVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveQuartic >::size_type":
        return _openstudiomodelresources.CurveQuarticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuarticVector
    __del__ = lambda self: None
CurveQuarticVector_swigregister = _openstudiomodelresources.CurveQuarticVector_swigregister
CurveQuarticVector_swigregister(CurveQuarticVector)

class OptionalCurveQuartic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveQuartic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveQuartic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveQuartic(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveQuartic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveQuartic":
        return _openstudiomodelresources.OptionalCurveQuartic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuartic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveQuartic_isNull(self)

    def get(self) -> "openstudio::model::CurveQuartic":
        return _openstudiomodelresources.OptionalCurveQuartic_get(self)

    def set(self, t: 'CurveQuartic') -> "void":
        return _openstudiomodelresources.OptionalCurveQuartic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuartic
    __del__ = lambda self: None
OptionalCurveQuartic_swigregister = _openstudiomodelresources.OptionalCurveQuartic_swigregister
OptionalCurveQuartic_swigregister(OptionalCurveQuartic)

class CurveRectangularHyperbola1Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveRectangularHyperbola1Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveRectangularHyperbola1Vector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::value_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveRectangularHyperbola1 >::difference_type', j: 'std::vector< openstudio::model::CurveRectangularHyperbola1 >::difference_type') -> "std::vector< openstudio::model::CurveRectangularHyperbola1,std::allocator< openstudio::model::CurveRectangularHyperbola1 > > *":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveRectangularHyperbola1 >::difference_type', j: 'std::vector< openstudio::model::CurveRectangularHyperbola1 >::difference_type') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___setitem__(self, *args)

    def append(self, x: 'CurveRectangularHyperbola1') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_clear(self)

    def swap(self, v: 'CurveRectangularHyperbola1Vector') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::allocator_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::reverse_iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::reverse_iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveRectangularHyperbola1Vector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveRectangularHyperbola1') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type', x: 'CurveRectangularHyperbola1') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type', x: 'CurveRectangularHyperbola1') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola1 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola1Vector
    __del__ = lambda self: None
CurveRectangularHyperbola1Vector_swigregister = _openstudiomodelresources.CurveRectangularHyperbola1Vector_swigregister
CurveRectangularHyperbola1Vector_swigregister(CurveRectangularHyperbola1Vector)

class OptionalCurveRectangularHyperbola1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveRectangularHyperbola1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveRectangularHyperbola1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveRectangularHyperbola1(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_reset(self)

    def __ref__(self) -> "openstudio::model::CurveRectangularHyperbola1":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_isNull(self)

    def get(self) -> "openstudio::model::CurveRectangularHyperbola1":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_get(self)

    def set(self, t: 'CurveRectangularHyperbola1') -> "void":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveRectangularHyperbola1
    __del__ = lambda self: None
OptionalCurveRectangularHyperbola1_swigregister = _openstudiomodelresources.OptionalCurveRectangularHyperbola1_swigregister
OptionalCurveRectangularHyperbola1_swigregister(OptionalCurveRectangularHyperbola1)

class CurveRectangularHyperbola2Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveRectangularHyperbola2Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveRectangularHyperbola2Vector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::value_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveRectangularHyperbola2 >::difference_type', j: 'std::vector< openstudio::model::CurveRectangularHyperbola2 >::difference_type') -> "std::vector< openstudio::model::CurveRectangularHyperbola2,std::allocator< openstudio::model::CurveRectangularHyperbola2 > > *":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveRectangularHyperbola2 >::difference_type', j: 'std::vector< openstudio::model::CurveRectangularHyperbola2 >::difference_type') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___setitem__(self, *args)

    def append(self, x: 'CurveRectangularHyperbola2') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_clear(self)

    def swap(self, v: 'CurveRectangularHyperbola2Vector') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::allocator_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::reverse_iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::reverse_iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::iterator":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveRectangularHyperbola2Vector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveRectangularHyperbola2') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::value_type const &":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type', x: 'CurveRectangularHyperbola2') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type', x: 'CurveRectangularHyperbola2') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type') -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveRectangularHyperbola2 >::size_type":
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola2Vector
    __del__ = lambda self: None
CurveRectangularHyperbola2Vector_swigregister = _openstudiomodelresources.CurveRectangularHyperbola2Vector_swigregister
CurveRectangularHyperbola2Vector_swigregister(CurveRectangularHyperbola2Vector)

class OptionalCurveRectangularHyperbola2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveRectangularHyperbola2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveRectangularHyperbola2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveRectangularHyperbola2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_reset(self)

    def __ref__(self) -> "openstudio::model::CurveRectangularHyperbola2":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_isNull(self)

    def get(self) -> "openstudio::model::CurveRectangularHyperbola2":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_get(self)

    def set(self, t: 'CurveRectangularHyperbola2') -> "void":
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveRectangularHyperbola2
    __del__ = lambda self: None
OptionalCurveRectangularHyperbola2_swigregister = _openstudiomodelresources.OptionalCurveRectangularHyperbola2_swigregister
OptionalCurveRectangularHyperbola2_swigregister(OptionalCurveRectangularHyperbola2)

class CurveSigmoidVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveSigmoidVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveSigmoidVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveSigmoidVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoidVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoidVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveSigmoid >::size_type":
        return _openstudiomodelresources.CurveSigmoidVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveSigmoid >::value_type":
        return _openstudiomodelresources.CurveSigmoidVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveSigmoid >::difference_type', j: 'std::vector< openstudio::model::CurveSigmoid >::difference_type') -> "std::vector< openstudio::model::CurveSigmoid,std::allocator< openstudio::model::CurveSigmoid > > *":
        return _openstudiomodelresources.CurveSigmoidVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveSigmoid >::difference_type', j: 'std::vector< openstudio::model::CurveSigmoid >::difference_type') -> "void":
        return _openstudiomodelresources.CurveSigmoidVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveSigmoid >::value_type const &":
        return _openstudiomodelresources.CurveSigmoidVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector___setitem__(self, *args)

    def append(self, x: 'CurveSigmoid') -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoidVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveSigmoid >::size_type":
        return _openstudiomodelresources.CurveSigmoidVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_clear(self)

    def swap(self, v: 'CurveSigmoidVector') -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveSigmoid >::allocator_type":
        return _openstudiomodelresources.CurveSigmoidVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveSigmoid >::iterator":
        return _openstudiomodelresources.CurveSigmoidVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveSigmoid >::iterator":
        return _openstudiomodelresources.CurveSigmoidVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveSigmoid >::reverse_iterator":
        return _openstudiomodelresources.CurveSigmoidVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveSigmoid >::reverse_iterator":
        return _openstudiomodelresources.CurveSigmoidVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveSigmoid >::iterator":
        return _openstudiomodelresources.CurveSigmoidVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveSigmoidVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveSigmoid') -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveSigmoid >::value_type const &":
        return _openstudiomodelresources.CurveSigmoidVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveSigmoid >::value_type const &":
        return _openstudiomodelresources.CurveSigmoidVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveSigmoid >::size_type', x: 'CurveSigmoid') -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveSigmoid >::size_type', x: 'CurveSigmoid') -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveSigmoid >::size_type') -> "void":
        return _openstudiomodelresources.CurveSigmoidVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveSigmoid >::size_type":
        return _openstudiomodelresources.CurveSigmoidVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveSigmoidVector
    __del__ = lambda self: None
CurveSigmoidVector_swigregister = _openstudiomodelresources.CurveSigmoidVector_swigregister
CurveSigmoidVector_swigregister(CurveSigmoidVector)

class OptionalCurveSigmoid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveSigmoid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveSigmoid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveSigmoid(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveSigmoid_reset(self)

    def __ref__(self) -> "openstudio::model::CurveSigmoid":
        return _openstudiomodelresources.OptionalCurveSigmoid___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveSigmoid_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveSigmoid_isNull(self)

    def get(self) -> "openstudio::model::CurveSigmoid":
        return _openstudiomodelresources.OptionalCurveSigmoid_get(self)

    def set(self, t: 'CurveSigmoid') -> "void":
        return _openstudiomodelresources.OptionalCurveSigmoid_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveSigmoid
    __del__ = lambda self: None
OptionalCurveSigmoid_swigregister = _openstudiomodelresources.OptionalCurveSigmoid_swigregister
OptionalCurveSigmoid_swigregister(OptionalCurveSigmoid)

class CurveTriquadraticVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveTriquadraticVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveTriquadraticVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.CurveTriquadraticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadraticVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadraticVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::CurveTriquadratic >::size_type":
        return _openstudiomodelresources.CurveTriquadraticVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::CurveTriquadratic >::value_type":
        return _openstudiomodelresources.CurveTriquadraticVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::CurveTriquadratic >::difference_type', j: 'std::vector< openstudio::model::CurveTriquadratic >::difference_type') -> "std::vector< openstudio::model::CurveTriquadratic,std::allocator< openstudio::model::CurveTriquadratic > > *":
        return _openstudiomodelresources.CurveTriquadraticVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::CurveTriquadratic >::difference_type', j: 'std::vector< openstudio::model::CurveTriquadratic >::difference_type') -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::CurveTriquadratic >::value_type const &":
        return _openstudiomodelresources.CurveTriquadraticVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector___setitem__(self, *args)

    def append(self, x: 'CurveTriquadratic') -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadraticVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::CurveTriquadratic >::size_type":
        return _openstudiomodelresources.CurveTriquadraticVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_clear(self)

    def swap(self, v: 'CurveTriquadraticVector') -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::CurveTriquadratic >::allocator_type":
        return _openstudiomodelresources.CurveTriquadraticVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::CurveTriquadratic >::iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::CurveTriquadratic >::iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::CurveTriquadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::CurveTriquadratic >::reverse_iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::CurveTriquadratic >::iterator":
        return _openstudiomodelresources.CurveTriquadraticVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_CurveTriquadraticVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'CurveTriquadratic') -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::CurveTriquadratic >::value_type const &":
        return _openstudiomodelresources.CurveTriquadraticVector_front(self)

    def back(self) -> "std::vector< openstudio::model::CurveTriquadratic >::value_type const &":
        return _openstudiomodelresources.CurveTriquadraticVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::CurveTriquadratic >::size_type', x: 'CurveTriquadratic') -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::CurveTriquadratic >::size_type', x: 'CurveTriquadratic') -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::CurveTriquadratic >::size_type') -> "void":
        return _openstudiomodelresources.CurveTriquadraticVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::CurveTriquadratic >::size_type":
        return _openstudiomodelresources.CurveTriquadraticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveTriquadraticVector
    __del__ = lambda self: None
CurveTriquadraticVector_swigregister = _openstudiomodelresources.CurveTriquadraticVector_swigregister
CurveTriquadraticVector_swigregister(CurveTriquadraticVector)

class OptionalCurveTriquadratic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCurveTriquadratic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCurveTriquadratic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalCurveTriquadratic(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalCurveTriquadratic_reset(self)

    def __ref__(self) -> "openstudio::model::CurveTriquadratic":
        return _openstudiomodelresources.OptionalCurveTriquadratic___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveTriquadratic_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalCurveTriquadratic_isNull(self)

    def get(self) -> "openstudio::model::CurveTriquadratic":
        return _openstudiomodelresources.OptionalCurveTriquadratic_get(self)

    def set(self, t: 'CurveTriquadratic') -> "void":
        return _openstudiomodelresources.OptionalCurveTriquadratic_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveTriquadratic
    __del__ = lambda self: None
OptionalCurveTriquadratic_swigregister = _openstudiomodelresources.OptionalCurveTriquadratic_swigregister
OptionalCurveTriquadratic_swigregister(OptionalCurveTriquadratic)

class TableMultiVariableLookupPointVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableMultiVariableLookupPointVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableMultiVariableLookupPointVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::value_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::TableMultiVariableLookupPoint >::difference_type', j: 'std::vector< openstudio::model::TableMultiVariableLookupPoint >::difference_type') -> "std::vector< openstudio::model::TableMultiVariableLookupPoint,std::allocator< openstudio::model::TableMultiVariableLookupPoint > > *":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::TableMultiVariableLookupPoint >::difference_type', j: 'std::vector< openstudio::model::TableMultiVariableLookupPoint >::difference_type') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___setitem__(self, *args)

    def append(self, x: 'TableMultiVariableLookupPoint') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_clear(self)

    def swap(self, v: 'TableMultiVariableLookupPointVector') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::allocator_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::reverse_iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::reverse_iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_TableMultiVariableLookupPointVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'TableMultiVariableLookupPoint') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_front(self)

    def back(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type', x: 'TableMultiVariableLookupPoint') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type', x: 'TableMultiVariableLookupPoint') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookupPointVector
    __del__ = lambda self: None
TableMultiVariableLookupPointVector_swigregister = _openstudiomodelresources.TableMultiVariableLookupPointVector_swigregister
TableMultiVariableLookupPointVector_swigregister(TableMultiVariableLookupPointVector)

class OptionalTableMultiVariableLookupPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalTableMultiVariableLookupPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalTableMultiVariableLookupPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalTableMultiVariableLookupPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_reset(self)

    def __ref__(self) -> "openstudio::model::TableMultiVariableLookupPoint":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_isNull(self)

    def get(self) -> "openstudio::model::TableMultiVariableLookupPoint":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_get(self)

    def set(self, t: 'TableMultiVariableLookupPoint') -> "void":
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalTableMultiVariableLookupPoint
    __del__ = lambda self: None
OptionalTableMultiVariableLookupPoint_swigregister = _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_swigregister
OptionalTableMultiVariableLookupPoint_swigregister(OptionalTableMultiVariableLookupPoint)

class TableMultiVariableLookupVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableMultiVariableLookupVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableMultiVariableLookupVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.TableMultiVariableLookupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::value_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::TableMultiVariableLookup >::difference_type', j: 'std::vector< openstudio::model::TableMultiVariableLookup >::difference_type') -> "std::vector< openstudio::model::TableMultiVariableLookup,std::allocator< openstudio::model::TableMultiVariableLookup > > *":
        return _openstudiomodelresources.TableMultiVariableLookupVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::TableMultiVariableLookup >::difference_type', j: 'std::vector< openstudio::model::TableMultiVariableLookup >::difference_type') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::TableMultiVariableLookup >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector___setitem__(self, *args)

    def append(self, x: 'TableMultiVariableLookup') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookupVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_clear(self)

    def swap(self, v: 'TableMultiVariableLookupVector') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::allocator_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::reverse_iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::reverse_iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::TableMultiVariableLookup >::iterator":
        return _openstudiomodelresources.TableMultiVariableLookupVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_TableMultiVariableLookupVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'TableMultiVariableLookup') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupVector_front(self)

    def back(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::value_type const &":
        return _openstudiomodelresources.TableMultiVariableLookupVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::TableMultiVariableLookup >::size_type', x: 'TableMultiVariableLookup') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::TableMultiVariableLookup >::size_type', x: 'TableMultiVariableLookup') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::TableMultiVariableLookup >::size_type') -> "void":
        return _openstudiomodelresources.TableMultiVariableLookupVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::TableMultiVariableLookup >::size_type":
        return _openstudiomodelresources.TableMultiVariableLookupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookupVector
    __del__ = lambda self: None
TableMultiVariableLookupVector_swigregister = _openstudiomodelresources.TableMultiVariableLookupVector_swigregister
TableMultiVariableLookupVector_swigregister(TableMultiVariableLookupVector)

class OptionalTableMultiVariableLookup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalTableMultiVariableLookup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalTableMultiVariableLookup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalTableMultiVariableLookup(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_reset(self)

    def __ref__(self) -> "openstudio::model::TableMultiVariableLookup":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_isNull(self)

    def get(self) -> "openstudio::model::TableMultiVariableLookup":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_get(self)

    def set(self, t: 'TableMultiVariableLookup') -> "void":
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalTableMultiVariableLookup
    __del__ = lambda self: None
OptionalTableMultiVariableLookup_swigregister = _openstudiomodelresources.OptionalTableMultiVariableLookup_swigregister
OptionalTableMultiVariableLookup_swigregister(OptionalTableMultiVariableLookup)

class SpaceLoadDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpaceLoadDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpaceLoadDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::size_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::value_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SpaceLoadDefinition >::difference_type', j: 'std::vector< openstudio::model::SpaceLoadDefinition >::difference_type') -> "std::vector< openstudio::model::SpaceLoadDefinition,std::allocator< openstudio::model::SpaceLoadDefinition > > *":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SpaceLoadDefinition >::difference_type', j: 'std::vector< openstudio::model::SpaceLoadDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SpaceLoadDefinition >::value_type const &":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector___setitem__(self, *args)

    def append(self, x: 'SpaceLoadDefinition') -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::size_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_clear(self)

    def swap(self, v: 'SpaceLoadDefinitionVector') -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::allocator_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::reverse_iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::reverse_iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SpaceLoadDefinition >::iterator":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_SpaceLoadDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SpaceLoadDefinition') -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::value_type const &":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::value_type const &":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SpaceLoadDefinition >::size_type', x: 'SpaceLoadDefinition') -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SpaceLoadDefinition >::size_type', x: 'SpaceLoadDefinition') -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SpaceLoadDefinition >::size_type') -> "void":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SpaceLoadDefinition >::size_type":
        return _openstudiomodelresources.SpaceLoadDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SpaceLoadDefinitionVector
    __del__ = lambda self: None
SpaceLoadDefinitionVector_swigregister = _openstudiomodelresources.SpaceLoadDefinitionVector_swigregister
SpaceLoadDefinitionVector_swigregister(SpaceLoadDefinitionVector)

class OptionalSpaceLoadDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSpaceLoadDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSpaceLoadDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalSpaceLoadDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::SpaceLoadDefinition":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_isNull(self)

    def get(self) -> "openstudio::model::SpaceLoadDefinition":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_get(self)

    def set(self, t: 'SpaceLoadDefinition') -> "void":
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSpaceLoadDefinition
    __del__ = lambda self: None
OptionalSpaceLoadDefinition_swigregister = _openstudiomodelresources.OptionalSpaceLoadDefinition_swigregister
OptionalSpaceLoadDefinition_swigregister(OptionalSpaceLoadDefinition)

class PeopleDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeopleDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeopleDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.PeopleDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::PeopleDefinition >::size_type":
        return _openstudiomodelresources.PeopleDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::PeopleDefinition >::value_type":
        return _openstudiomodelresources.PeopleDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::PeopleDefinition >::difference_type', j: 'std::vector< openstudio::model::PeopleDefinition >::difference_type') -> "std::vector< openstudio::model::PeopleDefinition,std::allocator< openstudio::model::PeopleDefinition > > *":
        return _openstudiomodelresources.PeopleDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::PeopleDefinition >::difference_type', j: 'std::vector< openstudio::model::PeopleDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::PeopleDefinition >::value_type const &":
        return _openstudiomodelresources.PeopleDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector___setitem__(self, *args)

    def append(self, x: 'PeopleDefinition') -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::PeopleDefinition >::size_type":
        return _openstudiomodelresources.PeopleDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_clear(self)

    def swap(self, v: 'PeopleDefinitionVector') -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::PeopleDefinition >::allocator_type":
        return _openstudiomodelresources.PeopleDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::PeopleDefinition >::iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::PeopleDefinition >::iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::PeopleDefinition >::reverse_iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::PeopleDefinition >::reverse_iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::PeopleDefinition >::iterator":
        return _openstudiomodelresources.PeopleDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_PeopleDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PeopleDefinition') -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::PeopleDefinition >::value_type const &":
        return _openstudiomodelresources.PeopleDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::PeopleDefinition >::value_type const &":
        return _openstudiomodelresources.PeopleDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::PeopleDefinition >::size_type', x: 'PeopleDefinition') -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::PeopleDefinition >::size_type', x: 'PeopleDefinition') -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::PeopleDefinition >::size_type') -> "void":
        return _openstudiomodelresources.PeopleDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::PeopleDefinition >::size_type":
        return _openstudiomodelresources.PeopleDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_PeopleDefinitionVector
    __del__ = lambda self: None
PeopleDefinitionVector_swigregister = _openstudiomodelresources.PeopleDefinitionVector_swigregister
PeopleDefinitionVector_swigregister(PeopleDefinitionVector)

class OptionalPeopleDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPeopleDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPeopleDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalPeopleDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalPeopleDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::PeopleDefinition":
        return _openstudiomodelresources.OptionalPeopleDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalPeopleDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalPeopleDefinition_isNull(self)

    def get(self) -> "openstudio::model::PeopleDefinition":
        return _openstudiomodelresources.OptionalPeopleDefinition_get(self)

    def set(self, t: 'PeopleDefinition') -> "void":
        return _openstudiomodelresources.OptionalPeopleDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalPeopleDefinition
    __del__ = lambda self: None
OptionalPeopleDefinition_swigregister = _openstudiomodelresources.OptionalPeopleDefinition_swigregister
OptionalPeopleDefinition_swigregister(OptionalPeopleDefinition)

class LightsDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightsDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightsDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.LightsDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.LightsDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.LightsDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LightsDefinition >::size_type":
        return _openstudiomodelresources.LightsDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::LightsDefinition >::value_type":
        return _openstudiomodelresources.LightsDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::LightsDefinition >::difference_type', j: 'std::vector< openstudio::model::LightsDefinition >::difference_type') -> "std::vector< openstudio::model::LightsDefinition,std::allocator< openstudio::model::LightsDefinition > > *":
        return _openstudiomodelresources.LightsDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::LightsDefinition >::difference_type', j: 'std::vector< openstudio::model::LightsDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.LightsDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LightsDefinition >::value_type const &":
        return _openstudiomodelresources.LightsDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector___setitem__(self, *args)

    def append(self, x: 'LightsDefinition') -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.LightsDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LightsDefinition >::size_type":
        return _openstudiomodelresources.LightsDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_clear(self)

    def swap(self, v: 'LightsDefinitionVector') -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::LightsDefinition >::allocator_type":
        return _openstudiomodelresources.LightsDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::LightsDefinition >::iterator":
        return _openstudiomodelresources.LightsDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LightsDefinition >::iterator":
        return _openstudiomodelresources.LightsDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LightsDefinition >::reverse_iterator":
        return _openstudiomodelresources.LightsDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LightsDefinition >::reverse_iterator":
        return _openstudiomodelresources.LightsDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LightsDefinition >::iterator":
        return _openstudiomodelresources.LightsDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_LightsDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'LightsDefinition') -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LightsDefinition >::value_type const &":
        return _openstudiomodelresources.LightsDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LightsDefinition >::value_type const &":
        return _openstudiomodelresources.LightsDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::LightsDefinition >::size_type', x: 'LightsDefinition') -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::LightsDefinition >::size_type', x: 'LightsDefinition') -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::LightsDefinition >::size_type') -> "void":
        return _openstudiomodelresources.LightsDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LightsDefinition >::size_type":
        return _openstudiomodelresources.LightsDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_LightsDefinitionVector
    __del__ = lambda self: None
LightsDefinitionVector_swigregister = _openstudiomodelresources.LightsDefinitionVector_swigregister
LightsDefinitionVector_swigregister(LightsDefinitionVector)

class OptionalLightsDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLightsDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLightsDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalLightsDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalLightsDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::LightsDefinition":
        return _openstudiomodelresources.OptionalLightsDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalLightsDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalLightsDefinition_isNull(self)

    def get(self) -> "openstudio::model::LightsDefinition":
        return _openstudiomodelresources.OptionalLightsDefinition_get(self)

    def set(self, t: 'LightsDefinition') -> "void":
        return _openstudiomodelresources.OptionalLightsDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalLightsDefinition
    __del__ = lambda self: None
OptionalLightsDefinition_swigregister = _openstudiomodelresources.OptionalLightsDefinition_swigregister
OptionalLightsDefinition_swigregister(OptionalLightsDefinition)

class LuminaireDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LuminaireDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LuminaireDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.LuminaireDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::LuminaireDefinition >::size_type":
        return _openstudiomodelresources.LuminaireDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::LuminaireDefinition >::value_type":
        return _openstudiomodelresources.LuminaireDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::LuminaireDefinition >::difference_type', j: 'std::vector< openstudio::model::LuminaireDefinition >::difference_type') -> "std::vector< openstudio::model::LuminaireDefinition,std::allocator< openstudio::model::LuminaireDefinition > > *":
        return _openstudiomodelresources.LuminaireDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::LuminaireDefinition >::difference_type', j: 'std::vector< openstudio::model::LuminaireDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::LuminaireDefinition >::value_type const &":
        return _openstudiomodelresources.LuminaireDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector___setitem__(self, *args)

    def append(self, x: 'LuminaireDefinition') -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::LuminaireDefinition >::size_type":
        return _openstudiomodelresources.LuminaireDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_clear(self)

    def swap(self, v: 'LuminaireDefinitionVector') -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::LuminaireDefinition >::allocator_type":
        return _openstudiomodelresources.LuminaireDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::LuminaireDefinition >::iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::LuminaireDefinition >::iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::LuminaireDefinition >::reverse_iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::LuminaireDefinition >::reverse_iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::LuminaireDefinition >::iterator":
        return _openstudiomodelresources.LuminaireDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_LuminaireDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'LuminaireDefinition') -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::LuminaireDefinition >::value_type const &":
        return _openstudiomodelresources.LuminaireDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::LuminaireDefinition >::value_type const &":
        return _openstudiomodelresources.LuminaireDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::LuminaireDefinition >::size_type', x: 'LuminaireDefinition') -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::LuminaireDefinition >::size_type', x: 'LuminaireDefinition') -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::LuminaireDefinition >::size_type') -> "void":
        return _openstudiomodelresources.LuminaireDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::LuminaireDefinition >::size_type":
        return _openstudiomodelresources.LuminaireDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_LuminaireDefinitionVector
    __del__ = lambda self: None
LuminaireDefinitionVector_swigregister = _openstudiomodelresources.LuminaireDefinitionVector_swigregister
LuminaireDefinitionVector_swigregister(LuminaireDefinitionVector)

class OptionalLuminaireDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLuminaireDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLuminaireDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalLuminaireDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalLuminaireDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::LuminaireDefinition":
        return _openstudiomodelresources.OptionalLuminaireDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalLuminaireDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalLuminaireDefinition_isNull(self)

    def get(self) -> "openstudio::model::LuminaireDefinition":
        return _openstudiomodelresources.OptionalLuminaireDefinition_get(self)

    def set(self, t: 'LuminaireDefinition') -> "void":
        return _openstudiomodelresources.OptionalLuminaireDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalLuminaireDefinition
    __del__ = lambda self: None
OptionalLuminaireDefinition_swigregister = _openstudiomodelresources.OptionalLuminaireDefinition_swigregister
OptionalLuminaireDefinition_swigregister(OptionalLuminaireDefinition)

class ElectricEquipmentDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricEquipmentDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElectricEquipmentDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::value_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ElectricEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::ElectricEquipmentDefinition >::difference_type') -> "std::vector< openstudio::model::ElectricEquipmentDefinition,std::allocator< openstudio::model::ElectricEquipmentDefinition > > *":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ElectricEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::ElectricEquipmentDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___setitem__(self, *args)

    def append(self, x: 'ElectricEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_clear(self)

    def swap(self, v: 'ElectricEquipmentDefinitionVector') -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ElectricEquipmentDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ElectricEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type', x: 'ElectricEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type', x: 'ElectricEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type') -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ElectricEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentDefinitionVector
    __del__ = lambda self: None
ElectricEquipmentDefinitionVector_swigregister = _openstudiomodelresources.ElectricEquipmentDefinitionVector_swigregister
ElectricEquipmentDefinitionVector_swigregister(ElectricEquipmentDefinitionVector)

class OptionalElectricEquipmentDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalElectricEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalElectricEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalElectricEquipmentDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ElectricEquipmentDefinition":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::ElectricEquipmentDefinition":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_get(self)

    def set(self, t: 'ElectricEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalElectricEquipmentDefinition
    __del__ = lambda self: None
OptionalElectricEquipmentDefinition_swigregister = _openstudiomodelresources.OptionalElectricEquipmentDefinition_swigregister
OptionalElectricEquipmentDefinition_swigregister(OptionalElectricEquipmentDefinition)

class GasEquipmentDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GasEquipmentDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GasEquipmentDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::size_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::value_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::GasEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::GasEquipmentDefinition >::difference_type') -> "std::vector< openstudio::model::GasEquipmentDefinition,std::allocator< openstudio::model::GasEquipmentDefinition > > *":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::GasEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::GasEquipmentDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::GasEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector___setitem__(self, *args)

    def append(self, x: 'GasEquipmentDefinition') -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::size_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_clear(self)

    def swap(self, v: 'GasEquipmentDefinitionVector') -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::GasEquipmentDefinition >::iterator":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_GasEquipmentDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'GasEquipmentDefinition') -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::GasEquipmentDefinition >::size_type', x: 'GasEquipmentDefinition') -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::GasEquipmentDefinition >::size_type', x: 'GasEquipmentDefinition') -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::GasEquipmentDefinition >::size_type') -> "void":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::GasEquipmentDefinition >::size_type":
        return _openstudiomodelresources.GasEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasEquipmentDefinitionVector
    __del__ = lambda self: None
GasEquipmentDefinitionVector_swigregister = _openstudiomodelresources.GasEquipmentDefinitionVector_swigregister
GasEquipmentDefinitionVector_swigregister(GasEquipmentDefinitionVector)

class OptionalGasEquipmentDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalGasEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalGasEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalGasEquipmentDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::GasEquipmentDefinition":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::GasEquipmentDefinition":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_get(self)

    def set(self, t: 'GasEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGasEquipmentDefinition
    __del__ = lambda self: None
OptionalGasEquipmentDefinition_swigregister = _openstudiomodelresources.OptionalGasEquipmentDefinition_swigregister
OptionalGasEquipmentDefinition_swigregister(OptionalGasEquipmentDefinition)

class HotWaterEquipmentDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HotWaterEquipmentDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HotWaterEquipmentDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::value_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::HotWaterEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::HotWaterEquipmentDefinition >::difference_type') -> "std::vector< openstudio::model::HotWaterEquipmentDefinition,std::allocator< openstudio::model::HotWaterEquipmentDefinition > > *":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::HotWaterEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::HotWaterEquipmentDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___setitem__(self, *args)

    def append(self, x: 'HotWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_clear(self)

    def swap(self, v: 'HotWaterEquipmentDefinitionVector') -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_HotWaterEquipmentDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'HotWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type', x: 'HotWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type', x: 'HotWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type') -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::HotWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_HotWaterEquipmentDefinitionVector
    __del__ = lambda self: None
HotWaterEquipmentDefinitionVector_swigregister = _openstudiomodelresources.HotWaterEquipmentDefinitionVector_swigregister
HotWaterEquipmentDefinitionVector_swigregister(HotWaterEquipmentDefinitionVector)

class OptionalHotWaterEquipmentDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalHotWaterEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalHotWaterEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalHotWaterEquipmentDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::HotWaterEquipmentDefinition":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::HotWaterEquipmentDefinition":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_get(self)

    def set(self, t: 'HotWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalHotWaterEquipmentDefinition
    __del__ = lambda self: None
OptionalHotWaterEquipmentDefinition_swigregister = _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_swigregister
OptionalHotWaterEquipmentDefinition_swigregister(OptionalHotWaterEquipmentDefinition)

class SteamEquipmentDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteamEquipmentDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SteamEquipmentDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::size_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::value_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::SteamEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::SteamEquipmentDefinition >::difference_type') -> "std::vector< openstudio::model::SteamEquipmentDefinition,std::allocator< openstudio::model::SteamEquipmentDefinition > > *":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::SteamEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::SteamEquipmentDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___setitem__(self, *args)

    def append(self, x: 'SteamEquipmentDefinition') -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::size_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_clear(self)

    def swap(self, v: 'SteamEquipmentDefinitionVector') -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::iterator":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_SteamEquipmentDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'SteamEquipmentDefinition') -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::SteamEquipmentDefinition >::size_type', x: 'SteamEquipmentDefinition') -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::SteamEquipmentDefinition >::size_type', x: 'SteamEquipmentDefinition') -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::SteamEquipmentDefinition >::size_type') -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::SteamEquipmentDefinition >::size_type":
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SteamEquipmentDefinitionVector
    __del__ = lambda self: None
SteamEquipmentDefinitionVector_swigregister = _openstudiomodelresources.SteamEquipmentDefinitionVector_swigregister
SteamEquipmentDefinitionVector_swigregister(SteamEquipmentDefinitionVector)

class OptionalSteamEquipmentDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSteamEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSteamEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalSteamEquipmentDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::SteamEquipmentDefinition":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::SteamEquipmentDefinition":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_get(self)

    def set(self, t: 'SteamEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSteamEquipmentDefinition
    __del__ = lambda self: None
OptionalSteamEquipmentDefinition_swigregister = _openstudiomodelresources.OptionalSteamEquipmentDefinition_swigregister
OptionalSteamEquipmentDefinition_swigregister(OptionalSteamEquipmentDefinition)

class OtherEquipmentDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OtherEquipmentDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OtherEquipmentDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::size_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::value_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::OtherEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::OtherEquipmentDefinition >::difference_type') -> "std::vector< openstudio::model::OtherEquipmentDefinition,std::allocator< openstudio::model::OtherEquipmentDefinition > > *":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::OtherEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::OtherEquipmentDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___setitem__(self, *args)

    def append(self, x: 'OtherEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::size_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_clear(self)

    def swap(self, v: 'OtherEquipmentDefinitionVector') -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::iterator":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OtherEquipmentDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'OtherEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::OtherEquipmentDefinition >::size_type', x: 'OtherEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::OtherEquipmentDefinition >::size_type', x: 'OtherEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::OtherEquipmentDefinition >::size_type') -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::OtherEquipmentDefinition >::size_type":
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_OtherEquipmentDefinitionVector
    __del__ = lambda self: None
OtherEquipmentDefinitionVector_swigregister = _openstudiomodelresources.OtherEquipmentDefinitionVector_swigregister
OtherEquipmentDefinitionVector_swigregister(OtherEquipmentDefinitionVector)

class OptionalOtherEquipmentDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalOtherEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalOtherEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalOtherEquipmentDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::OtherEquipmentDefinition":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::OtherEquipmentDefinition":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_get(self)

    def set(self, t: 'OtherEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalOtherEquipmentDefinition
    __del__ = lambda self: None
OptionalOtherEquipmentDefinition_swigregister = _openstudiomodelresources.OptionalOtherEquipmentDefinition_swigregister
OptionalOtherEquipmentDefinition_swigregister(OptionalOtherEquipmentDefinition)

class InternalMassDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternalMassDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InternalMassDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.InternalMassDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.InternalMassDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.InternalMassDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::InternalMassDefinition >::size_type":
        return _openstudiomodelresources.InternalMassDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::InternalMassDefinition >::value_type":
        return _openstudiomodelresources.InternalMassDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::InternalMassDefinition >::difference_type', j: 'std::vector< openstudio::model::InternalMassDefinition >::difference_type') -> "std::vector< openstudio::model::InternalMassDefinition,std::allocator< openstudio::model::InternalMassDefinition > > *":
        return _openstudiomodelresources.InternalMassDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::InternalMassDefinition >::difference_type', j: 'std::vector< openstudio::model::InternalMassDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::InternalMassDefinition >::value_type const &":
        return _openstudiomodelresources.InternalMassDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector___setitem__(self, *args)

    def append(self, x: 'InternalMassDefinition') -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.InternalMassDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::InternalMassDefinition >::size_type":
        return _openstudiomodelresources.InternalMassDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_clear(self)

    def swap(self, v: 'InternalMassDefinitionVector') -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::InternalMassDefinition >::allocator_type":
        return _openstudiomodelresources.InternalMassDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::InternalMassDefinition >::iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::InternalMassDefinition >::iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::InternalMassDefinition >::reverse_iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::InternalMassDefinition >::reverse_iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::InternalMassDefinition >::iterator":
        return _openstudiomodelresources.InternalMassDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_InternalMassDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'InternalMassDefinition') -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::InternalMassDefinition >::value_type const &":
        return _openstudiomodelresources.InternalMassDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::InternalMassDefinition >::value_type const &":
        return _openstudiomodelresources.InternalMassDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::InternalMassDefinition >::size_type', x: 'InternalMassDefinition') -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::InternalMassDefinition >::size_type', x: 'InternalMassDefinition') -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::InternalMassDefinition >::size_type') -> "void":
        return _openstudiomodelresources.InternalMassDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::InternalMassDefinition >::size_type":
        return _openstudiomodelresources.InternalMassDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_InternalMassDefinitionVector
    __del__ = lambda self: None
InternalMassDefinitionVector_swigregister = _openstudiomodelresources.InternalMassDefinitionVector_swigregister
InternalMassDefinitionVector_swigregister(InternalMassDefinitionVector)

class OptionalInternalMassDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalInternalMassDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalInternalMassDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalInternalMassDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalInternalMassDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::InternalMassDefinition":
        return _openstudiomodelresources.OptionalInternalMassDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalInternalMassDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalInternalMassDefinition_isNull(self)

    def get(self) -> "openstudio::model::InternalMassDefinition":
        return _openstudiomodelresources.OptionalInternalMassDefinition_get(self)

    def set(self, t: 'InternalMassDefinition') -> "void":
        return _openstudiomodelresources.OptionalInternalMassDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalInternalMassDefinition
    __del__ = lambda self: None
OptionalInternalMassDefinition_swigregister = _openstudiomodelresources.OptionalInternalMassDefinition_swigregister
OptionalInternalMassDefinition_swigregister(OptionalInternalMassDefinition)

class ExteriorLoadDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExteriorLoadDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExteriorLoadDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::value_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExteriorLoadDefinition >::difference_type', j: 'std::vector< openstudio::model::ExteriorLoadDefinition >::difference_type') -> "std::vector< openstudio::model::ExteriorLoadDefinition,std::allocator< openstudio::model::ExteriorLoadDefinition > > *":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExteriorLoadDefinition >::difference_type', j: 'std::vector< openstudio::model::ExteriorLoadDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___setitem__(self, *args)

    def append(self, x: 'ExteriorLoadDefinition') -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_clear(self)

    def swap(self, v: 'ExteriorLoadDefinitionVector') -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::allocator_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ExteriorLoadDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExteriorLoadDefinition') -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExteriorLoadDefinition >::size_type', x: 'ExteriorLoadDefinition') -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExteriorLoadDefinition >::size_type', x: 'ExteriorLoadDefinition') -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExteriorLoadDefinition >::size_type') -> "void":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExteriorLoadDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLoadDefinitionVector
    __del__ = lambda self: None
ExteriorLoadDefinitionVector_swigregister = _openstudiomodelresources.ExteriorLoadDefinitionVector_swigregister
ExteriorLoadDefinitionVector_swigregister(ExteriorLoadDefinitionVector)

class OptionalExteriorLoadDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExteriorLoadDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExteriorLoadDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalExteriorLoadDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ExteriorLoadDefinition":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_isNull(self)

    def get(self) -> "openstudio::model::ExteriorLoadDefinition":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_get(self)

    def set(self, t: 'ExteriorLoadDefinition') -> "void":
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorLoadDefinition
    __del__ = lambda self: None
OptionalExteriorLoadDefinition_swigregister = _openstudiomodelresources.OptionalExteriorLoadDefinition_swigregister
OptionalExteriorLoadDefinition_swigregister(OptionalExteriorLoadDefinition)

class ExteriorLightsDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExteriorLightsDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExteriorLightsDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::value_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExteriorLightsDefinition >::difference_type', j: 'std::vector< openstudio::model::ExteriorLightsDefinition >::difference_type') -> "std::vector< openstudio::model::ExteriorLightsDefinition,std::allocator< openstudio::model::ExteriorLightsDefinition > > *":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExteriorLightsDefinition >::difference_type', j: 'std::vector< openstudio::model::ExteriorLightsDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___setitem__(self, *args)

    def append(self, x: 'ExteriorLightsDefinition') -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_clear(self)

    def swap(self, v: 'ExteriorLightsDefinitionVector') -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::allocator_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::iterator":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ExteriorLightsDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExteriorLightsDefinition') -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExteriorLightsDefinition >::size_type', x: 'ExteriorLightsDefinition') -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExteriorLightsDefinition >::size_type', x: 'ExteriorLightsDefinition') -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExteriorLightsDefinition >::size_type') -> "void":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExteriorLightsDefinition >::size_type":
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLightsDefinitionVector
    __del__ = lambda self: None
ExteriorLightsDefinitionVector_swigregister = _openstudiomodelresources.ExteriorLightsDefinitionVector_swigregister
ExteriorLightsDefinitionVector_swigregister(ExteriorLightsDefinitionVector)

class OptionalExteriorLightsDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExteriorLightsDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExteriorLightsDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalExteriorLightsDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ExteriorLightsDefinition":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_isNull(self)

    def get(self) -> "openstudio::model::ExteriorLightsDefinition":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_get(self)

    def set(self, t: 'ExteriorLightsDefinition') -> "void":
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorLightsDefinition
    __del__ = lambda self: None
OptionalExteriorLightsDefinition_swigregister = _openstudiomodelresources.OptionalExteriorLightsDefinition_swigregister
OptionalExteriorLightsDefinition_swigregister(OptionalExteriorLightsDefinition)

class ExteriorFuelEquipmentDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExteriorFuelEquipmentDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExteriorFuelEquipmentDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::value_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::difference_type') -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition,std::allocator< openstudio::model::ExteriorFuelEquipmentDefinition > > *":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___setitem__(self, *args)

    def append(self, x: 'ExteriorFuelEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_clear(self)

    def swap(self, v: 'ExteriorFuelEquipmentDefinitionVector') -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ExteriorFuelEquipmentDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExteriorFuelEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type', x: 'ExteriorFuelEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type', x: 'ExteriorFuelEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type') -> "void":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorFuelEquipmentDefinitionVector
    __del__ = lambda self: None
ExteriorFuelEquipmentDefinitionVector_swigregister = _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_swigregister
ExteriorFuelEquipmentDefinitionVector_swigregister(ExteriorFuelEquipmentDefinitionVector)

class OptionalExteriorFuelEquipmentDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExteriorFuelEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExteriorFuelEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalExteriorFuelEquipmentDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ExteriorFuelEquipmentDefinition":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::ExteriorFuelEquipmentDefinition":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_get(self)

    def set(self, t: 'ExteriorFuelEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorFuelEquipmentDefinition
    __del__ = lambda self: None
OptionalExteriorFuelEquipmentDefinition_swigregister = _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_swigregister
OptionalExteriorFuelEquipmentDefinition_swigregister(OptionalExteriorFuelEquipmentDefinition)

class ExteriorWaterEquipmentDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExteriorWaterEquipmentDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExteriorWaterEquipmentDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::value_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::difference_type') -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition,std::allocator< openstudio::model::ExteriorWaterEquipmentDefinition > > *":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::difference_type') -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___setitem__(self, *args)

    def append(self, x: 'ExteriorWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_clear(self)

    def swap(self, v: 'ExteriorWaterEquipmentDefinitionVector') -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::allocator_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::reverse_iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::iterator":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ExteriorWaterEquipmentDefinitionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ExteriorWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::value_type const &":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type', x: 'ExteriorWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type', x: 'ExteriorWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type') -> "void":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition >::size_type":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorWaterEquipmentDefinitionVector
    __del__ = lambda self: None
ExteriorWaterEquipmentDefinitionVector_swigregister = _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_swigregister
ExteriorWaterEquipmentDefinitionVector_swigregister(ExteriorWaterEquipmentDefinitionVector)

class OptionalExteriorWaterEquipmentDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalExteriorWaterEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalExteriorWaterEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalExteriorWaterEquipmentDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_reset(self)

    def __ref__(self) -> "openstudio::model::ExteriorWaterEquipmentDefinition":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_isNull(self)

    def get(self) -> "openstudio::model::ExteriorWaterEquipmentDefinition":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_get(self)

    def set(self, t: 'ExteriorWaterEquipmentDefinition') -> "void":
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorWaterEquipmentDefinition
    __del__ = lambda self: None
OptionalExteriorWaterEquipmentDefinition_swigregister = _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_swigregister
OptionalExteriorWaterEquipmentDefinition_swigregister(OptionalExteriorWaterEquipmentDefinition)

class RenderingColorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderingColorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderingColorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.RenderingColorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.RenderingColorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.RenderingColorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RenderingColor >::size_type":
        return _openstudiomodelresources.RenderingColorVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RenderingColor >::value_type":
        return _openstudiomodelresources.RenderingColorVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RenderingColor >::difference_type', j: 'std::vector< openstudio::model::RenderingColor >::difference_type') -> "std::vector< openstudio::model::RenderingColor,std::allocator< openstudio::model::RenderingColor > > *":
        return _openstudiomodelresources.RenderingColorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.RenderingColorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RenderingColor >::difference_type', j: 'std::vector< openstudio::model::RenderingColor >::difference_type') -> "void":
        return _openstudiomodelresources.RenderingColorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.RenderingColorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RenderingColor >::value_type const &":
        return _openstudiomodelresources.RenderingColorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.RenderingColorVector___setitem__(self, *args)

    def append(self, x: 'RenderingColor') -> "void":
        return _openstudiomodelresources.RenderingColorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.RenderingColorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RenderingColor >::size_type":
        return _openstudiomodelresources.RenderingColorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.RenderingColorVector_clear(self)

    def swap(self, v: 'RenderingColorVector') -> "void":
        return _openstudiomodelresources.RenderingColorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RenderingColor >::allocator_type":
        return _openstudiomodelresources.RenderingColorVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RenderingColor >::iterator":
        return _openstudiomodelresources.RenderingColorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RenderingColor >::iterator":
        return _openstudiomodelresources.RenderingColorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RenderingColor >::reverse_iterator":
        return _openstudiomodelresources.RenderingColorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RenderingColor >::reverse_iterator":
        return _openstudiomodelresources.RenderingColorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.RenderingColorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RenderingColor >::iterator":
        return _openstudiomodelresources.RenderingColorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_RenderingColorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RenderingColor') -> "void":
        return _openstudiomodelresources.RenderingColorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RenderingColor >::value_type const &":
        return _openstudiomodelresources.RenderingColorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RenderingColor >::value_type const &":
        return _openstudiomodelresources.RenderingColorVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RenderingColor >::size_type', x: 'RenderingColor') -> "void":
        return _openstudiomodelresources.RenderingColorVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RenderingColor >::size_type', x: 'RenderingColor') -> "void":
        return _openstudiomodelresources.RenderingColorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.RenderingColorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RenderingColor >::size_type') -> "void":
        return _openstudiomodelresources.RenderingColorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RenderingColor >::size_type":
        return _openstudiomodelresources.RenderingColorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_RenderingColorVector
    __del__ = lambda self: None
RenderingColorVector_swigregister = _openstudiomodelresources.RenderingColorVector_swigregister
RenderingColorVector_swigregister(RenderingColorVector)

class OptionalRenderingColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRenderingColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRenderingColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalRenderingColor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalRenderingColor_reset(self)

    def __ref__(self) -> "openstudio::model::RenderingColor":
        return _openstudiomodelresources.OptionalRenderingColor___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalRenderingColor_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalRenderingColor_isNull(self)

    def get(self) -> "openstudio::model::RenderingColor":
        return _openstudiomodelresources.OptionalRenderingColor_get(self)

    def set(self, t: 'RenderingColor') -> "void":
        return _openstudiomodelresources.OptionalRenderingColor_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalRenderingColor
    __del__ = lambda self: None
OptionalRenderingColor_swigregister = _openstudiomodelresources.OptionalRenderingColor_swigregister
OptionalRenderingColor_swigregister(OptionalRenderingColor)

class DesignSpecificationOutdoorAirVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignSpecificationOutdoorAirVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DesignSpecificationOutdoorAirVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::value_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::DesignSpecificationOutdoorAir >::difference_type', j: 'std::vector< openstudio::model::DesignSpecificationOutdoorAir >::difference_type') -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir,std::allocator< openstudio::model::DesignSpecificationOutdoorAir > > *":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::DesignSpecificationOutdoorAir >::difference_type', j: 'std::vector< openstudio::model::DesignSpecificationOutdoorAir >::difference_type') -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::value_type const &":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___setitem__(self, *args)

    def append(self, x: 'DesignSpecificationOutdoorAir') -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_clear(self)

    def swap(self, v: 'DesignSpecificationOutdoorAirVector') -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::allocator_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::reverse_iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::reverse_iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::iterator":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelresources.new_DesignSpecificationOutdoorAirVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'DesignSpecificationOutdoorAir') -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::value_type const &":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_front(self)

    def back(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::value_type const &":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type', x: 'DesignSpecificationOutdoorAir') -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type', x: 'DesignSpecificationOutdoorAir') -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type') -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir >::size_type":
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DesignSpecificationOutdoorAirVector
    __del__ = lambda self: None
DesignSpecificationOutdoorAirVector_swigregister = _openstudiomodelresources.DesignSpecificationOutdoorAirVector_swigregister
DesignSpecificationOutdoorAirVector_swigregister(DesignSpecificationOutdoorAirVector)

class OptionalDesignSpecificationOutdoorAir(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDesignSpecificationOutdoorAir, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDesignSpecificationOutdoorAir, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_OptionalDesignSpecificationOutdoorAir(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_reset(self)

    def __ref__(self) -> "openstudio::model::DesignSpecificationOutdoorAir":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_isNull(self)

    def get(self) -> "openstudio::model::DesignSpecificationOutdoorAir":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_get(self)

    def set(self, t: 'DesignSpecificationOutdoorAir') -> "void":
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_set(self, t)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDesignSpecificationOutdoorAir
    __del__ = lambda self: None
OptionalDesignSpecificationOutdoorAir_swigregister = _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_swigregister
OptionalDesignSpecificationOutdoorAir_swigregister(OptionalDesignSpecificationOutdoorAir)

class ScheduleInterval(openstudiomodelcore.Schedule):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.Schedule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.Schedule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleInterval, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleInterval
    __del__ = lambda self: None
    __swig_getmethods__["fromTimeSeries"] = lambda x: _openstudiomodelresources.ScheduleInterval_fromTimeSeries
    if _newclass:
        fromTimeSeries = staticmethod(_openstudiomodelresources.ScheduleInterval_fromTimeSeries)

    def timeSeries(self) -> "openstudio::TimeSeries":
        return _openstudiomodelresources.ScheduleInterval_timeSeries(self)

    def setTimeSeries(self, timeSeries: 'TimeSeries') -> "bool":
        return _openstudiomodelresources.ScheduleInterval_setTimeSeries(self, timeSeries)
ScheduleInterval_swigregister = _openstudiomodelresources.ScheduleInterval_swigregister
ScheduleInterval_swigregister(ScheduleInterval)

def ScheduleInterval_fromTimeSeries(timeSeries: 'TimeSeries', model: 'Model') -> "boost::optional< openstudio::model::ScheduleInterval >":
    return _openstudiomodelresources.ScheduleInterval_fromTimeSeries(timeSeries, model)
ScheduleInterval_fromTimeSeries = _openstudiomodelresources.ScheduleInterval_fromTimeSeries


def toScheduleInterval(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleInterval >":
    return _openstudiomodelresources.toScheduleInterval(idfObject)
toScheduleInterval = _openstudiomodelresources.toScheduleInterval

def getScheduleInterval(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleInterval >":
    return _openstudiomodelresources.getScheduleInterval(t_model, t_handle)
getScheduleInterval = _openstudiomodelresources.getScheduleInterval

def getScheduleIntervals(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleInterval,std::allocator< openstudio::model::ScheduleInterval > >":
    return _openstudiomodelresources.getScheduleIntervals(t_model)
getScheduleIntervals = _openstudiomodelresources.getScheduleIntervals

def getScheduleIntervalByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleInterval >":
    return _openstudiomodelresources.getScheduleIntervalByName(t_model, t_name)
getScheduleIntervalByName = _openstudiomodelresources.getScheduleIntervalByName

def getScheduleIntervalsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleInterval,std::allocator< openstudio::model::ScheduleInterval > >":
    return _openstudiomodelresources.getScheduleIntervalsByName(t_model, t_name, t_exactMatch)
getScheduleIntervalsByName = _openstudiomodelresources.getScheduleIntervalsByName
class ScheduleFile(ScheduleInterval):
    __swig_setmethods__ = {}
    for _s in [ScheduleInterval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleFile, name, value)
    __swig_getmethods__ = {}
    for _s in [ScheduleInterval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleFile, name)
    __repr__ = _swig_repr

    def __init__(self, externalfile: 'ExternalFile', column: 'int'=1, rowsToSkip: 'int'=0):
        this = _openstudiomodelresources.new_ScheduleFile(externalfile, column, rowsToSkip)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFile
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ScheduleFile_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ScheduleFile_iddObjectType)
    __swig_getmethods__["minutesperItemValues"] = lambda x: _openstudiomodelresources.ScheduleFile_minutesperItemValues
    if _newclass:
        minutesperItemValues = staticmethod(_openstudiomodelresources.ScheduleFile_minutesperItemValues)

    def scheduleTypeLimits(self) -> "boost::optional< openstudio::model::ScheduleTypeLimits >":
        return _openstudiomodelresources.ScheduleFile_scheduleTypeLimits(self)

    def externalFile(self) -> "openstudio::model::ExternalFile":
        return _openstudiomodelresources.ScheduleFile_externalFile(self)

    def columnNumber(self) -> "int":
        return _openstudiomodelresources.ScheduleFile_columnNumber(self)

    def rowstoSkipatTop(self) -> "int":
        return _openstudiomodelresources.ScheduleFile_rowstoSkipatTop(self)

    def numberofHoursofData(self) -> "boost::optional< int >":
        return _openstudiomodelresources.ScheduleFile_numberofHoursofData(self)

    def isNumberofHoursofDataDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_isNumberofHoursofDataDefaulted(self)

    def columnSeparator(self) -> "std::string":
        return _openstudiomodelresources.ScheduleFile_columnSeparator(self)

    def isColumnSeparatorDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_isColumnSeparatorDefaulted(self)

    def interpolatetoTimestep(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_isInterpolatetoTimestepDefaulted(self)

    def minutesperItem(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.ScheduleFile_minutesperItem(self)

    def isMinutesperItemDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_isMinutesperItemDefaulted(self)

    def setScheduleTypeLimits(self, scheduleTypeLimits: 'ScheduleTypeLimits') -> "bool":
        return _openstudiomodelresources.ScheduleFile_setScheduleTypeLimits(self, scheduleTypeLimits)

    def resetScheduleTypeLimits(self) -> "bool":
        return _openstudiomodelresources.ScheduleFile_resetScheduleTypeLimits(self)

    def setColumnNumber(self, columnNumber: 'int') -> "bool":
        return _openstudiomodelresources.ScheduleFile_setColumnNumber(self, columnNumber)

    def setRowstoSkipatTop(self, rowstoSkipatTop: 'int') -> "bool":
        return _openstudiomodelresources.ScheduleFile_setRowstoSkipatTop(self, rowstoSkipatTop)

    def setNumberofHoursofData(self, numberofHours: 'int') -> "bool":
        return _openstudiomodelresources.ScheduleFile_setNumberofHoursofData(self, numberofHours)

    def setColumnSeparator(self, columnSeparator: 'std::string const &') -> "bool":
        return _openstudiomodelresources.ScheduleFile_setColumnSeparator(self, columnSeparator)

    def resetColumnSeparator(self) -> "void":
        return _openstudiomodelresources.ScheduleFile_resetColumnSeparator(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep: 'bool') -> "bool":
        return _openstudiomodelresources.ScheduleFile_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self) -> "void":
        return _openstudiomodelresources.ScheduleFile_resetInterpolatetoTimestep(self)

    def setMinutesperItem(self, minutesperItem: 'std::string const &') -> "bool":
        return _openstudiomodelresources.ScheduleFile_setMinutesperItem(self, minutesperItem)

    def resetMinutesperItem(self) -> "void":
        return _openstudiomodelresources.ScheduleFile_resetMinutesperItem(self)
ScheduleFile_swigregister = _openstudiomodelresources.ScheduleFile_swigregister
ScheduleFile_swigregister(ScheduleFile)

def ScheduleFile_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleFile_iddObjectType()
ScheduleFile_iddObjectType = _openstudiomodelresources.ScheduleFile_iddObjectType

def ScheduleFile_minutesperItemValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ScheduleFile_minutesperItemValues()
ScheduleFile_minutesperItemValues = _openstudiomodelresources.ScheduleFile_minutesperItemValues


def toScheduleFile(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleFile >":
    return _openstudiomodelresources.toScheduleFile(idfObject)
toScheduleFile = _openstudiomodelresources.toScheduleFile

def getScheduleFile(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleFile >":
    return _openstudiomodelresources.getScheduleFile(t_model, t_handle)
getScheduleFile = _openstudiomodelresources.getScheduleFile

def getScheduleFiles(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleFile,std::allocator< openstudio::model::ScheduleFile > >":
    return _openstudiomodelresources.getScheduleFiles(t_model)
getScheduleFiles = _openstudiomodelresources.getScheduleFiles

def getScheduleFileByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleFile >":
    return _openstudiomodelresources.getScheduleFileByName(t_model, t_name)
getScheduleFileByName = _openstudiomodelresources.getScheduleFileByName

def getScheduleFilesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleFile,std::allocator< openstudio::model::ScheduleFile > >":
    return _openstudiomodelresources.getScheduleFilesByName(t_model, t_name, t_exactMatch)
getScheduleFilesByName = _openstudiomodelresources.getScheduleFilesByName
class ExternalFile(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalFile, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalFile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ExternalFile
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ExternalFile_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ExternalFile_iddObjectType)
    __swig_getmethods__["columnSeparatorValues"] = lambda x: _openstudiomodelresources.ExternalFile_columnSeparatorValues
    if _newclass:
        columnSeparatorValues = staticmethod(_openstudiomodelresources.ExternalFile_columnSeparatorValues)
    __swig_getmethods__["getExternalFile"] = lambda x: _openstudiomodelresources.ExternalFile_getExternalFile
    if _newclass:
        getExternalFile = staticmethod(_openstudiomodelresources.ExternalFile_getExternalFile)

    def fileName(self) -> "std::string":
        return _openstudiomodelresources.ExternalFile_fileName(self)

    def filePath(self) -> "openstudio::path":
        return _openstudiomodelresources.ExternalFile_filePath(self)

    def scheduleFiles(self) -> "std::vector< openstudio::model::ScheduleFile,std::allocator< openstudio::model::ScheduleFile > >":
        return _openstudiomodelresources.ExternalFile_scheduleFiles(self)
ExternalFile_swigregister = _openstudiomodelresources.ExternalFile_swigregister
ExternalFile_swigregister(ExternalFile)

def ExternalFile_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ExternalFile_iddObjectType()
ExternalFile_iddObjectType = _openstudiomodelresources.ExternalFile_iddObjectType

def ExternalFile_columnSeparatorValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ExternalFile_columnSeparatorValues()
ExternalFile_columnSeparatorValues = _openstudiomodelresources.ExternalFile_columnSeparatorValues

def ExternalFile_getExternalFile(model: 'Model', filename: 'std::string const &') -> "boost::optional< openstudio::model::ExternalFile >":
    return _openstudiomodelresources.ExternalFile_getExternalFile(model, filename)
ExternalFile_getExternalFile = _openstudiomodelresources.ExternalFile_getExternalFile


def toExternalFile(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExternalFile >":
    return _openstudiomodelresources.toExternalFile(idfObject)
toExternalFile = _openstudiomodelresources.toExternalFile

def getExternalFile(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExternalFile >":
    return _openstudiomodelresources.getExternalFile(t_model, t_handle)
getExternalFile = _openstudiomodelresources.getExternalFile

def getExternalFiles(t_model: 'Model') -> "std::vector< openstudio::model::ExternalFile,std::allocator< openstudio::model::ExternalFile > >":
    return _openstudiomodelresources.getExternalFiles(t_model)
getExternalFiles = _openstudiomodelresources.getExternalFiles

def getExternalFileByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExternalFile >":
    return _openstudiomodelresources.getExternalFileByName(t_model, t_name)
getExternalFileByName = _openstudiomodelresources.getExternalFileByName

def getExternalFilesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExternalFile,std::allocator< openstudio::model::ExternalFile > >":
    return _openstudiomodelresources.getExternalFilesByName(t_model, t_name, t_exactMatch)
getExternalFilesByName = _openstudiomodelresources.getExternalFilesByName
class ScheduleFixedInterval(ScheduleInterval):
    __swig_setmethods__ = {}
    for _s in [ScheduleInterval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleFixedInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [ScheduleInterval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleFixedInterval, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_ScheduleFixedInterval(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFixedInterval
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ScheduleFixedInterval_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ScheduleFixedInterval_iddObjectType)

    def interpolatetoTimestep(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_isInterpolatetoTimestepDefaulted(self)

    def intervalLength(self) -> "double":
        return _openstudiomodelresources.ScheduleFixedInterval_intervalLength(self)

    def outOfRangeValue(self) -> "double":
        return _openstudiomodelresources.ScheduleFixedInterval_outOfRangeValue(self)

    def isOutOfRangeValueDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_isOutOfRangeValueDefaulted(self)

    def startMonth(self) -> "int":
        return _openstudiomodelresources.ScheduleFixedInterval_startMonth(self)

    def startDay(self) -> "int":
        return _openstudiomodelresources.ScheduleFixedInterval_startDay(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep: 'bool') -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self) -> "void":
        return _openstudiomodelresources.ScheduleFixedInterval_resetInterpolatetoTimestep(self)

    def setIntervalLength(self, intervalLength: 'double') -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setIntervalLength(self, intervalLength)

    def setOutOfRangeValue(self, outOfRangeValue: 'double') -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setOutOfRangeValue(self, outOfRangeValue)

    def resetOutOfRangeValue(self) -> "void":
        return _openstudiomodelresources.ScheduleFixedInterval_resetOutOfRangeValue(self)

    def setStartMonth(self, startMonth: 'int') -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setStartMonth(self, startMonth)

    def setStartDay(self, startDay: 'int') -> "bool":
        return _openstudiomodelresources.ScheduleFixedInterval_setStartDay(self, startDay)
ScheduleFixedInterval_swigregister = _openstudiomodelresources.ScheduleFixedInterval_swigregister
ScheduleFixedInterval_swigregister(ScheduleFixedInterval)

def ScheduleFixedInterval_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleFixedInterval_iddObjectType()
ScheduleFixedInterval_iddObjectType = _openstudiomodelresources.ScheduleFixedInterval_iddObjectType


def toScheduleFixedInterval(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleFixedInterval >":
    return _openstudiomodelresources.toScheduleFixedInterval(idfObject)
toScheduleFixedInterval = _openstudiomodelresources.toScheduleFixedInterval

def getScheduleFixedInterval(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleFixedInterval >":
    return _openstudiomodelresources.getScheduleFixedInterval(t_model, t_handle)
getScheduleFixedInterval = _openstudiomodelresources.getScheduleFixedInterval

def getScheduleFixedIntervals(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleFixedInterval,std::allocator< openstudio::model::ScheduleFixedInterval > >":
    return _openstudiomodelresources.getScheduleFixedIntervals(t_model)
getScheduleFixedIntervals = _openstudiomodelresources.getScheduleFixedIntervals

def getScheduleFixedIntervalByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleFixedInterval >":
    return _openstudiomodelresources.getScheduleFixedIntervalByName(t_model, t_name)
getScheduleFixedIntervalByName = _openstudiomodelresources.getScheduleFixedIntervalByName

def getScheduleFixedIntervalsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleFixedInterval,std::allocator< openstudio::model::ScheduleFixedInterval > >":
    return _openstudiomodelresources.getScheduleFixedIntervalsByName(t_model, t_name, t_exactMatch)
getScheduleFixedIntervalsByName = _openstudiomodelresources.getScheduleFixedIntervalsByName
class ScheduleVariableInterval(ScheduleInterval):
    __swig_setmethods__ = {}
    for _s in [ScheduleInterval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleVariableInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [ScheduleInterval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleVariableInterval, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_ScheduleVariableInterval(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleVariableInterval
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ScheduleVariableInterval_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ScheduleVariableInterval_iddObjectType)

    def interpolatetoTimestep(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_isInterpolatetoTimestepDefaulted(self)

    def outOfRangeValue(self) -> "double":
        return _openstudiomodelresources.ScheduleVariableInterval_outOfRangeValue(self)

    def isOutOfRangeValueDefaulted(self) -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_isOutOfRangeValueDefaulted(self)

    def startMonth(self) -> "int":
        return _openstudiomodelresources.ScheduleVariableInterval_startMonth(self)

    def startDay(self) -> "int":
        return _openstudiomodelresources.ScheduleVariableInterval_startDay(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep: 'bool') -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self) -> "void":
        return _openstudiomodelresources.ScheduleVariableInterval_resetInterpolatetoTimestep(self)

    def setOutOfRangeValue(self, outOfRangeValue: 'double') -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_setOutOfRangeValue(self, outOfRangeValue)

    def resetOutOfRangeValue(self) -> "void":
        return _openstudiomodelresources.ScheduleVariableInterval_resetOutOfRangeValue(self)

    def setStartMonth(self, startMonth: 'int') -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_setStartMonth(self, startMonth)

    def setStartDay(self, startDay: 'int') -> "bool":
        return _openstudiomodelresources.ScheduleVariableInterval_setStartDay(self, startDay)
ScheduleVariableInterval_swigregister = _openstudiomodelresources.ScheduleVariableInterval_swigregister
ScheduleVariableInterval_swigregister(ScheduleVariableInterval)

def ScheduleVariableInterval_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleVariableInterval_iddObjectType()
ScheduleVariableInterval_iddObjectType = _openstudiomodelresources.ScheduleVariableInterval_iddObjectType


def toScheduleVariableInterval(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleVariableInterval >":
    return _openstudiomodelresources.toScheduleVariableInterval(idfObject)
toScheduleVariableInterval = _openstudiomodelresources.toScheduleVariableInterval

def getScheduleVariableInterval(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleVariableInterval >":
    return _openstudiomodelresources.getScheduleVariableInterval(t_model, t_handle)
getScheduleVariableInterval = _openstudiomodelresources.getScheduleVariableInterval

def getScheduleVariableIntervals(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleVariableInterval,std::allocator< openstudio::model::ScheduleVariableInterval > >":
    return _openstudiomodelresources.getScheduleVariableIntervals(t_model)
getScheduleVariableIntervals = _openstudiomodelresources.getScheduleVariableIntervals

def getScheduleVariableIntervalByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleVariableInterval >":
    return _openstudiomodelresources.getScheduleVariableIntervalByName(t_model, t_name)
getScheduleVariableIntervalByName = _openstudiomodelresources.getScheduleVariableIntervalByName

def getScheduleVariableIntervalsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleVariableInterval,std::allocator< openstudio::model::ScheduleVariableInterval > >":
    return _openstudiomodelresources.getScheduleVariableIntervalsByName(t_model, t_name, t_exactMatch)
getScheduleVariableIntervalsByName = _openstudiomodelresources.getScheduleVariableIntervalsByName
class ScheduleCompact(openstudiomodelcore.Schedule):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.Schedule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleCompact, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.Schedule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleCompact, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ScheduleCompact(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleCompact
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ScheduleCompact_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ScheduleCompact_iddObjectType)

    def setToConstantValue(self, *args) -> "bool":
        return _openstudiomodelresources.ScheduleCompact_setToConstantValue(self, *args)

    def isConstantValue(self) -> "bool":
        return _openstudiomodelresources.ScheduleCompact_isConstantValue(self)

    def constantValue(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ScheduleCompact_constantValue(self)

    def getConstantValue(self, returnIP: 'bool'=False) -> "boost::optional< openstudio::Quantity >":
        return _openstudiomodelresources.ScheduleCompact_getConstantValue(self, returnIP)
ScheduleCompact_swigregister = _openstudiomodelresources.ScheduleCompact_swigregister
ScheduleCompact_swigregister(ScheduleCompact)

def ScheduleCompact_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleCompact_iddObjectType()
ScheduleCompact_iddObjectType = _openstudiomodelresources.ScheduleCompact_iddObjectType


def toScheduleCompact(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleCompact >":
    return _openstudiomodelresources.toScheduleCompact(idfObject)
toScheduleCompact = _openstudiomodelresources.toScheduleCompact

def getScheduleCompact(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleCompact >":
    return _openstudiomodelresources.getScheduleCompact(t_model, t_handle)
getScheduleCompact = _openstudiomodelresources.getScheduleCompact

def getScheduleCompacts(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleCompact,std::allocator< openstudio::model::ScheduleCompact > >":
    return _openstudiomodelresources.getScheduleCompacts(t_model)
getScheduleCompacts = _openstudiomodelresources.getScheduleCompacts

def getScheduleCompactByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleCompact >":
    return _openstudiomodelresources.getScheduleCompactByName(t_model, t_name)
getScheduleCompactByName = _openstudiomodelresources.getScheduleCompactByName

def getScheduleCompactsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleCompact,std::allocator< openstudio::model::ScheduleCompact > >":
    return _openstudiomodelresources.getScheduleCompactsByName(t_model, t_name, t_exactMatch)
getScheduleCompactsByName = _openstudiomodelresources.getScheduleCompactsByName
class ScheduleConstant(openstudiomodelcore.Schedule):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.Schedule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleConstant, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.Schedule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleConstant, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_ScheduleConstant(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleConstant
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ScheduleConstant_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ScheduleConstant_iddObjectType)

    def value(self) -> "double":
        return _openstudiomodelresources.ScheduleConstant_value(self)

    def getValue(self, returnIP: 'bool'=False) -> "boost::optional< openstudio::Quantity >":
        return _openstudiomodelresources.ScheduleConstant_getValue(self, returnIP)

    def setValue(self, *args) -> "bool":
        return _openstudiomodelresources.ScheduleConstant_setValue(self, *args)
ScheduleConstant_swigregister = _openstudiomodelresources.ScheduleConstant_swigregister
ScheduleConstant_swigregister(ScheduleConstant)

def ScheduleConstant_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ScheduleConstant_iddObjectType()
ScheduleConstant_iddObjectType = _openstudiomodelresources.ScheduleConstant_iddObjectType


def toScheduleConstant(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ScheduleConstant >":
    return _openstudiomodelresources.toScheduleConstant(idfObject)
toScheduleConstant = _openstudiomodelresources.toScheduleConstant

def getScheduleConstant(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ScheduleConstant >":
    return _openstudiomodelresources.getScheduleConstant(t_model, t_handle)
getScheduleConstant = _openstudiomodelresources.getScheduleConstant

def getScheduleConstants(t_model: 'Model') -> "std::vector< openstudio::model::ScheduleConstant,std::allocator< openstudio::model::ScheduleConstant > >":
    return _openstudiomodelresources.getScheduleConstants(t_model)
getScheduleConstants = _openstudiomodelresources.getScheduleConstants

def getScheduleConstantByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ScheduleConstant >":
    return _openstudiomodelresources.getScheduleConstantByName(t_model, t_name)
getScheduleConstantByName = _openstudiomodelresources.getScheduleConstantByName

def getScheduleConstantsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ScheduleConstant,std::allocator< openstudio::model::ScheduleConstant > >":
    return _openstudiomodelresources.getScheduleConstantsByName(t_model, t_name, t_exactMatch)
getScheduleConstantsByName = _openstudiomodelresources.getScheduleConstantsByName
class DefaultScheduleType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultScheduleType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultScheduleType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_DefaultScheduleType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueName(self) -> "std::string":
        return _openstudiomodelresources.DefaultScheduleType_valueName(self)

    def value(self) -> "int":
        return _openstudiomodelresources.DefaultScheduleType_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudiomodelresources.DefaultScheduleType_valueDescription(self)

    def __eq__(self, other: 'DefaultScheduleType') -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___eq__(self, other)

    def __ne__(self, other: 'DefaultScheduleType') -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___ne__(self, other)

    def __gt__(self, other: 'DefaultScheduleType') -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___gt__(self, other)

    def __ge__(self, other: 'DefaultScheduleType') -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___ge__(self, other)

    def __lt__(self, other: 'DefaultScheduleType') -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___lt__(self, other)

    def __le__(self, other: 'DefaultScheduleType') -> "bool":
        return _openstudiomodelresources.DefaultScheduleType___le__(self, other)
    __swig_getmethods__["enumName"] = lambda x: _openstudiomodelresources.DefaultScheduleType_enumName
    if _newclass:
        enumName = staticmethod(_openstudiomodelresources.DefaultScheduleType_enumName)
    __swig_getmethods__["getValues"] = lambda x: _openstudiomodelresources.DefaultScheduleType_getValues
    if _newclass:
        getValues = staticmethod(_openstudiomodelresources.DefaultScheduleType_getValues)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultScheduleType
    __del__ = lambda self: None
DefaultScheduleType_swigregister = _openstudiomodelresources.DefaultScheduleType_swigregister
DefaultScheduleType_swigregister(DefaultScheduleType)

def DefaultScheduleType_enumName() -> "std::string":
    return _openstudiomodelresources.DefaultScheduleType_enumName()
DefaultScheduleType_enumName = _openstudiomodelresources.DefaultScheduleType_enumName

def DefaultScheduleType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudiomodelresources.DefaultScheduleType_getValues()
DefaultScheduleType_getValues = _openstudiomodelresources.DefaultScheduleType_getValues

class DefaultScheduleSet(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultScheduleSet, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultScheduleSet, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_DefaultScheduleSet(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultScheduleSet
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.DefaultScheduleSet_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.DefaultScheduleSet_iddObjectType)

    def hoursofOperationSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_hoursofOperationSchedule(self)

    def numberofPeopleSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_numberofPeopleSchedule(self)

    def peopleActivityLevelSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_peopleActivityLevelSchedule(self)

    def lightingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_lightingSchedule(self)

    def electricEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_electricEquipmentSchedule(self)

    def gasEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_gasEquipmentSchedule(self)

    def hotWaterEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_hotWaterEquipmentSchedule(self)

    def infiltrationSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_infiltrationSchedule(self)

    def steamEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_steamEquipmentSchedule(self)

    def otherEquipmentSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_otherEquipmentSchedule(self)

    def setHoursofOperationSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setHoursofOperationSchedule(self, schedule)

    def resetHoursofOperationSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetHoursofOperationSchedule(self)

    def setNumberofPeopleSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setNumberofPeopleSchedule(self, schedule)

    def resetNumberofPeopleSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetNumberofPeopleSchedule(self)

    def setPeopleActivityLevelSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setPeopleActivityLevelSchedule(self, schedule)

    def resetPeopleActivityLevelSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetPeopleActivityLevelSchedule(self)

    def setLightingSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setLightingSchedule(self, schedule)

    def resetLightingSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetLightingSchedule(self)

    def setElectricEquipmentSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setElectricEquipmentSchedule(self, schedule)

    def resetElectricEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetElectricEquipmentSchedule(self)

    def setGasEquipmentSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setGasEquipmentSchedule(self, schedule)

    def resetGasEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetGasEquipmentSchedule(self)

    def setHotWaterEquipmentSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setHotWaterEquipmentSchedule(self, schedule)

    def resetHotWaterEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetHotWaterEquipmentSchedule(self)

    def setInfiltrationSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setInfiltrationSchedule(self, schedule)

    def resetInfiltrationSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetInfiltrationSchedule(self)

    def setSteamEquipmentSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setSteamEquipmentSchedule(self, schedule)

    def resetSteamEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetSteamEquipmentSchedule(self)

    def setOtherEquipmentSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DefaultScheduleSet_setOtherEquipmentSchedule(self, schedule)

    def resetOtherEquipmentSchedule(self) -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_resetOtherEquipmentSchedule(self)

    def getDefaultSchedule(self, defaultScheduleType: 'DefaultScheduleType') -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DefaultScheduleSet_getDefaultSchedule(self, defaultScheduleType)

    def merge(self, other: 'DefaultScheduleSet') -> "void":
        return _openstudiomodelresources.DefaultScheduleSet_merge(self, other)
DefaultScheduleSet_swigregister = _openstudiomodelresources.DefaultScheduleSet_swigregister
DefaultScheduleSet_swigregister(DefaultScheduleSet)

def DefaultScheduleSet_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DefaultScheduleSet_iddObjectType()
DefaultScheduleSet_iddObjectType = _openstudiomodelresources.DefaultScheduleSet_iddObjectType


def toDefaultScheduleSet(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::DefaultScheduleSet >":
    return _openstudiomodelresources.toDefaultScheduleSet(idfObject)
toDefaultScheduleSet = _openstudiomodelresources.toDefaultScheduleSet

def getDefaultScheduleSet(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::DefaultScheduleSet >":
    return _openstudiomodelresources.getDefaultScheduleSet(t_model, t_handle)
getDefaultScheduleSet = _openstudiomodelresources.getDefaultScheduleSet

def getDefaultScheduleSets(t_model: 'Model') -> "std::vector< openstudio::model::DefaultScheduleSet,std::allocator< openstudio::model::DefaultScheduleSet > >":
    return _openstudiomodelresources.getDefaultScheduleSets(t_model)
getDefaultScheduleSets = _openstudiomodelresources.getDefaultScheduleSets

def getDefaultScheduleSetByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::DefaultScheduleSet >":
    return _openstudiomodelresources.getDefaultScheduleSetByName(t_model, t_name)
getDefaultScheduleSetByName = _openstudiomodelresources.getDefaultScheduleSetByName

def getDefaultScheduleSetsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::DefaultScheduleSet,std::allocator< openstudio::model::DefaultScheduleSet > >":
    return _openstudiomodelresources.getDefaultScheduleSetsByName(t_model, t_name, t_exactMatch)
getDefaultScheduleSetsByName = _openstudiomodelresources.getDefaultScheduleSetsByName
class SpectralDataField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpectralDataField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpectralDataField, name)
    __repr__ = _swig_repr

    def __init__(self, wavelength: 'double', transmittance: 'double', frontReflectance: 'double', backReflectance: 'double'):
        this = _openstudiomodelresources.new_SpectralDataField(wavelength, transmittance, frontReflectance, backReflectance)
        try:
            self.this.append(this)
        except:
            self.this = this

    def wavelength(self) -> "double":
        return _openstudiomodelresources.SpectralDataField_wavelength(self)

    def transmittance(self) -> "double":
        return _openstudiomodelresources.SpectralDataField_transmittance(self)

    def frontReflectance(self) -> "double":
        return _openstudiomodelresources.SpectralDataField_frontReflectance(self)

    def backReflectance(self) -> "double":
        return _openstudiomodelresources.SpectralDataField_backReflectance(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SpectralDataField
    __del__ = lambda self: None
SpectralDataField_swigregister = _openstudiomodelresources.SpectralDataField_swigregister
SpectralDataField_swigregister(SpectralDataField)

class MaterialPropertyGlazingSpectralData(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialPropertyGlazingSpectralData, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialPropertyGlazingSpectralData, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_MaterialPropertyGlazingSpectralData(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyGlazingSpectralData
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.MaterialPropertyGlazingSpectralData_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.MaterialPropertyGlazingSpectralData_iddObjectType)

    def spectralDataFields(self) -> "std::vector< openstudio::model::SpectralDataField,std::allocator< openstudio::model::SpectralDataField > >":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_spectralDataFields(self)

    def setSpectralDataFields(self, spectralDataFields: 'std::vector< openstudio::model::SpectralDataField,std::allocator< openstudio::model::SpectralDataField > > const &') -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_setSpectralDataFields(self, spectralDataFields)

    def addSpectralDataField(self, *args) -> "bool":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_addSpectralDataField(self, *args)

    def resetSpectralDataFields(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_resetSpectralDataFields(self)
MaterialPropertyGlazingSpectralData_swigregister = _openstudiomodelresources.MaterialPropertyGlazingSpectralData_swigregister
MaterialPropertyGlazingSpectralData_swigregister(MaterialPropertyGlazingSpectralData)

def MaterialPropertyGlazingSpectralData_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_iddObjectType()
MaterialPropertyGlazingSpectralData_iddObjectType = _openstudiomodelresources.MaterialPropertyGlazingSpectralData_iddObjectType


def toMaterialPropertyGlazingSpectralData(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::MaterialPropertyGlazingSpectralData >":
    return _openstudiomodelresources.toMaterialPropertyGlazingSpectralData(idfObject)
toMaterialPropertyGlazingSpectralData = _openstudiomodelresources.toMaterialPropertyGlazingSpectralData

def getMaterialPropertyGlazingSpectralData(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::MaterialPropertyGlazingSpectralData >":
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralData(t_model, t_handle)
getMaterialPropertyGlazingSpectralData = _openstudiomodelresources.getMaterialPropertyGlazingSpectralData

def getMaterialPropertyGlazingSpectralDatas(t_model: 'Model') -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData,std::allocator< openstudio::model::MaterialPropertyGlazingSpectralData > >":
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralDatas(t_model)
getMaterialPropertyGlazingSpectralDatas = _openstudiomodelresources.getMaterialPropertyGlazingSpectralDatas

def getMaterialPropertyGlazingSpectralDataByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::MaterialPropertyGlazingSpectralData >":
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralDataByName(t_model, t_name)
getMaterialPropertyGlazingSpectralDataByName = _openstudiomodelresources.getMaterialPropertyGlazingSpectralDataByName

def getMaterialPropertyGlazingSpectralDatasByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::MaterialPropertyGlazingSpectralData,std::allocator< openstudio::model::MaterialPropertyGlazingSpectralData > >":
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralDatasByName(t_model, t_name, t_exactMatch)
getMaterialPropertyGlazingSpectralDatasByName = _openstudiomodelresources.getMaterialPropertyGlazingSpectralDatasByName
class MaterialPropertyMoisturePenetrationDepthSettings(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialPropertyMoisturePenetrationDepthSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialPropertyMoisturePenetrationDepthSettings, name)
    __repr__ = _swig_repr

    def __init__(self, material: 'Material', waterVaporDiffusionResistanceFactor: 'double', moistureEquationCoefficientA: 'double', moistureEquationCoefficientB: 'double', moistureEquationCoefficientC: 'double', moistureEquationCoefficientD: 'double', coatingLayerThickness: 'double', coatingLayerWaterVaporDiffusionResistanceFactor: 'double'):
        this = _openstudiomodelresources.new_MaterialPropertyMoisturePenetrationDepthSettings(material, waterVaporDiffusionResistanceFactor, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD, coatingLayerThickness, coatingLayerWaterVaporDiffusionResistanceFactor)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyMoisturePenetrationDepthSettings
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType)

    def materialName(self) -> "std::string":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_materialName(self)

    def waterVaporDiffusionResistanceFactor(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_waterVaporDiffusionResistanceFactor(self)

    def moistureEquationCoefficientA(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientA(self)

    def moistureEquationCoefficientB(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientB(self)

    def moistureEquationCoefficientC(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientC(self)

    def moistureEquationCoefficientD(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientD(self)

    def moistureEquationCoefficients(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficients(self)

    def surfaceLayerPenetrationDepth(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_surfaceLayerPenetrationDepth(self)

    def isSurfaceLayerPenetrationDepthAutocalculated(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_isSurfaceLayerPenetrationDepthAutocalculated(self)

    def deepLayerPenetrationDepth(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_deepLayerPenetrationDepth(self)

    def isDeepLayerPenetrationDepthAutocalculated(self) -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_isDeepLayerPenetrationDepthAutocalculated(self)

    def coatingLayerThickness(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_coatingLayerThickness(self)

    def coatingLayerWaterVaporDiffusionResistanceFactor(self) -> "double":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_coatingLayerWaterVaporDiffusionResistanceFactor(self)

    def setWaterVaporDiffusionResistanceFactor(self, waterVaporDiffusionResistanceFactor: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setWaterVaporDiffusionResistanceFactor(self, waterVaporDiffusionResistanceFactor)

    def setMoistureEquationCoefficientA(self, moistureEquationCoefficientA: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientA(self, moistureEquationCoefficientA)

    def setMoistureEquationCoefficientB(self, moistureEquationCoefficientB: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientB(self, moistureEquationCoefficientB)

    def setMoistureEquationCoefficientC(self, moistureEquationCoefficientC: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientC(self, moistureEquationCoefficientC)

    def setMoistureEquationCoefficientD(self, moistureEquationCoefficientD: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientD(self, moistureEquationCoefficientD)

    def setMoistureEquationCoefficients(self, moistureEquationCoefficientA: 'double', moistureEquationCoefficientB: 'double', moistureEquationCoefficientC: 'double', moistureEquationCoefficientD: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficients(self, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD)

    def setSurfaceLayerPenetrationDepth(self, surfaceLayerPenetrationDepth: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setSurfaceLayerPenetrationDepth(self, surfaceLayerPenetrationDepth)

    def autocalculateSurfaceLayerPenetrationDepth(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_autocalculateSurfaceLayerPenetrationDepth(self)

    def setDeepLayerPenetrationDepth(self, deepLayerPenetrationDepth: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setDeepLayerPenetrationDepth(self, deepLayerPenetrationDepth)

    def autocalculateDeepLayerPenetrationDepth(self) -> "void":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_autocalculateDeepLayerPenetrationDepth(self)

    def setCoatingLayerThickness(self, coatingLayerThickness: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setCoatingLayerThickness(self, coatingLayerThickness)

    def setCoatingLayerWaterVaporDiffusionResistanceFactor(self, coatingLayerWaterVaporDiffusionResistanceFactor: 'double') -> "bool":
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setCoatingLayerWaterVaporDiffusionResistanceFactor(self, coatingLayerWaterVaporDiffusionResistanceFactor)
MaterialPropertyMoisturePenetrationDepthSettings_swigregister = _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_swigregister
MaterialPropertyMoisturePenetrationDepthSettings_swigregister(MaterialPropertyMoisturePenetrationDepthSettings)

def MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType()
MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType = _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType


def toMaterialPropertyMoisturePenetrationDepthSettings(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
    return _openstudiomodelresources.toMaterialPropertyMoisturePenetrationDepthSettings(idfObject)
toMaterialPropertyMoisturePenetrationDepthSettings = _openstudiomodelresources.toMaterialPropertyMoisturePenetrationDepthSettings

def getMaterialPropertyMoisturePenetrationDepthSettings(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettings(t_model, t_handle)
getMaterialPropertyMoisturePenetrationDepthSettings = _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettings

def getMaterialPropertyMoisturePenetrationDepthSettingss(t_model: 'Model') -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings,std::allocator< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings > >":
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingss(t_model)
getMaterialPropertyMoisturePenetrationDepthSettingss = _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingss

def getMaterialPropertyMoisturePenetrationDepthSettingsByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingsByName(t_model, t_name)
getMaterialPropertyMoisturePenetrationDepthSettingsByName = _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingsByName

def getMaterialPropertyMoisturePenetrationDepthSettingssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings,std::allocator< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings > >":
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingssByName(t_model, t_name, t_exactMatch)
getMaterialPropertyMoisturePenetrationDepthSettingssByName = _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingssByName
class Material(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Material
    __del__ = lambda self: None

    def thickness(self) -> "double":
        return _openstudiomodelresources.Material_thickness(self)

    def getVisibleTransmittance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Material_getVisibleTransmittance(self)

    def interiorVisibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Material_interiorVisibleAbsorptance(self)

    def exteriorVisibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Material_exteriorVisibleAbsorptance(self)

    def standardsInformation(self) -> "openstudio::model::StandardsInformationMaterial":
        return _openstudiomodelresources.Material_standardsInformation(self)

    def setThickness(self, value: 'double') -> "bool":
        return _openstudiomodelresources.Material_setThickness(self, value)

    def createMaterialPropertyMoisturePenetrationDepthSettings(self, waterVaporDiffusionResistanceFactor: 'double', moistureEquationCoefficientA: 'double', moistureEquationCoefficientB: 'double', moistureEquationCoefficientC: 'double', moistureEquationCoefficientD: 'double', coatingLayerThickness: 'double', coatingLayerWaterVaporDiffusionResistanceFactor: 'double') -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
        return _openstudiomodelresources.Material_createMaterialPropertyMoisturePenetrationDepthSettings(self, waterVaporDiffusionResistanceFactor, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD, coatingLayerThickness, coatingLayerWaterVaporDiffusionResistanceFactor)

    def materialPropertyMoisturePenetrationDepthSettings(self) -> "boost::optional< openstudio::model::MaterialPropertyMoisturePenetrationDepthSettings >":
        return _openstudiomodelresources.Material_materialPropertyMoisturePenetrationDepthSettings(self)

    def resetMaterialPropertyMoisturePenetrationDepthSettings(self) -> "void":
        return _openstudiomodelresources.Material_resetMaterialPropertyMoisturePenetrationDepthSettings(self)
Material_swigregister = _openstudiomodelresources.Material_swigregister
Material_swigregister(Material)


def toMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Material >":
    return _openstudiomodelresources.toMaterial(idfObject)
toMaterial = _openstudiomodelresources.toMaterial

def getMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Material >":
    return _openstudiomodelresources.getMaterial(t_model, t_handle)
getMaterial = _openstudiomodelresources.getMaterial

def getMaterials(t_model: 'Model') -> "std::vector< openstudio::model::Material,std::allocator< openstudio::model::Material > >":
    return _openstudiomodelresources.getMaterials(t_model)
getMaterials = _openstudiomodelresources.getMaterials

def getMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Material >":
    return _openstudiomodelresources.getMaterialByName(t_model, t_name)
getMaterialByName = _openstudiomodelresources.getMaterialByName

def getMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Material,std::allocator< openstudio::model::Material > >":
    return _openstudiomodelresources.getMaterialsByName(t_model, t_name, t_exactMatch)
getMaterialsByName = _openstudiomodelresources.getMaterialsByName
class FenestrationMaterial(Material):
    __swig_setmethods__ = {}
    for _s in [Material]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FenestrationMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [Material]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FenestrationMaterial, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_FenestrationMaterial
    __del__ = lambda self: None
    __swig_getmethods__["ufactorInsideAirTemperature"] = lambda x: _openstudiomodelresources.FenestrationMaterial_ufactorInsideAirTemperature
    if _newclass:
        ufactorInsideAirTemperature = staticmethod(_openstudiomodelresources.FenestrationMaterial_ufactorInsideAirTemperature)
    __swig_getmethods__["ufactorOutsideAirTemperature"] = lambda x: _openstudiomodelresources.FenestrationMaterial_ufactorOutsideAirTemperature
    if _newclass:
        ufactorOutsideAirTemperature = staticmethod(_openstudiomodelresources.FenestrationMaterial_ufactorOutsideAirTemperature)
    __swig_getmethods__["airThermalConductivityCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_airThermalConductivityCoefficients
    if _newclass:
        airThermalConductivityCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_airThermalConductivityCoefficients)
    __swig_getmethods__["airViscosityCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_airViscosityCoefficients
    if _newclass:
        airViscosityCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_airViscosityCoefficients)
    __swig_getmethods__["airSpecificHeatCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_airSpecificHeatCoefficients
    if _newclass:
        airSpecificHeatCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_airSpecificHeatCoefficients)
    __swig_getmethods__["airMolecularWeight"] = lambda x: _openstudiomodelresources.FenestrationMaterial_airMolecularWeight
    if _newclass:
        airMolecularWeight = staticmethod(_openstudiomodelresources.FenestrationMaterial_airMolecularWeight)
    __swig_getmethods__["argonThermalConductivityCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_argonThermalConductivityCoefficients
    if _newclass:
        argonThermalConductivityCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_argonThermalConductivityCoefficients)
    __swig_getmethods__["argonViscosityCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_argonViscosityCoefficients
    if _newclass:
        argonViscosityCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_argonViscosityCoefficients)
    __swig_getmethods__["argonSpecificHeatCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_argonSpecificHeatCoefficients
    if _newclass:
        argonSpecificHeatCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_argonSpecificHeatCoefficients)
    __swig_getmethods__["argonMolecularWeight"] = lambda x: _openstudiomodelresources.FenestrationMaterial_argonMolecularWeight
    if _newclass:
        argonMolecularWeight = staticmethod(_openstudiomodelresources.FenestrationMaterial_argonMolecularWeight)
    __swig_getmethods__["kryptonThermalConductivityCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_kryptonThermalConductivityCoefficients
    if _newclass:
        kryptonThermalConductivityCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_kryptonThermalConductivityCoefficients)
    __swig_getmethods__["kryptonViscosityCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_kryptonViscosityCoefficients
    if _newclass:
        kryptonViscosityCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_kryptonViscosityCoefficients)
    __swig_getmethods__["kryptonSpecificHeatCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_kryptonSpecificHeatCoefficients
    if _newclass:
        kryptonSpecificHeatCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_kryptonSpecificHeatCoefficients)
    __swig_getmethods__["kryptonMolecularWeight"] = lambda x: _openstudiomodelresources.FenestrationMaterial_kryptonMolecularWeight
    if _newclass:
        kryptonMolecularWeight = staticmethod(_openstudiomodelresources.FenestrationMaterial_kryptonMolecularWeight)
    __swig_getmethods__["xenonThermalConductivityCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_xenonThermalConductivityCoefficients
    if _newclass:
        xenonThermalConductivityCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_xenonThermalConductivityCoefficients)
    __swig_getmethods__["xenonViscosityCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_xenonViscosityCoefficients
    if _newclass:
        xenonViscosityCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_xenonViscosityCoefficients)
    __swig_getmethods__["xenonSpecificHeatCoefficients"] = lambda x: _openstudiomodelresources.FenestrationMaterial_xenonSpecificHeatCoefficients
    if _newclass:
        xenonSpecificHeatCoefficients = staticmethod(_openstudiomodelresources.FenestrationMaterial_xenonSpecificHeatCoefficients)
    __swig_getmethods__["xenonMolecularWeight"] = lambda x: _openstudiomodelresources.FenestrationMaterial_xenonMolecularWeight
    if _newclass:
        xenonMolecularWeight = staticmethod(_openstudiomodelresources.FenestrationMaterial_xenonMolecularWeight)
FenestrationMaterial_swigregister = _openstudiomodelresources.FenestrationMaterial_swigregister
FenestrationMaterial_swigregister(FenestrationMaterial)

def FenestrationMaterial_ufactorInsideAirTemperature() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_ufactorInsideAirTemperature()
FenestrationMaterial_ufactorInsideAirTemperature = _openstudiomodelresources.FenestrationMaterial_ufactorInsideAirTemperature

def FenestrationMaterial_ufactorOutsideAirTemperature() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_ufactorOutsideAirTemperature()
FenestrationMaterial_ufactorOutsideAirTemperature = _openstudiomodelresources.FenestrationMaterial_ufactorOutsideAirTemperature

def FenestrationMaterial_airThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_airThermalConductivityCoefficients()
FenestrationMaterial_airThermalConductivityCoefficients = _openstudiomodelresources.FenestrationMaterial_airThermalConductivityCoefficients

def FenestrationMaterial_airViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_airViscosityCoefficients()
FenestrationMaterial_airViscosityCoefficients = _openstudiomodelresources.FenestrationMaterial_airViscosityCoefficients

def FenestrationMaterial_airSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_airSpecificHeatCoefficients()
FenestrationMaterial_airSpecificHeatCoefficients = _openstudiomodelresources.FenestrationMaterial_airSpecificHeatCoefficients

def FenestrationMaterial_airMolecularWeight() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_airMolecularWeight()
FenestrationMaterial_airMolecularWeight = _openstudiomodelresources.FenestrationMaterial_airMolecularWeight

def FenestrationMaterial_argonThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_argonThermalConductivityCoefficients()
FenestrationMaterial_argonThermalConductivityCoefficients = _openstudiomodelresources.FenestrationMaterial_argonThermalConductivityCoefficients

def FenestrationMaterial_argonViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_argonViscosityCoefficients()
FenestrationMaterial_argonViscosityCoefficients = _openstudiomodelresources.FenestrationMaterial_argonViscosityCoefficients

def FenestrationMaterial_argonSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_argonSpecificHeatCoefficients()
FenestrationMaterial_argonSpecificHeatCoefficients = _openstudiomodelresources.FenestrationMaterial_argonSpecificHeatCoefficients

def FenestrationMaterial_argonMolecularWeight() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_argonMolecularWeight()
FenestrationMaterial_argonMolecularWeight = _openstudiomodelresources.FenestrationMaterial_argonMolecularWeight

def FenestrationMaterial_kryptonThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_kryptonThermalConductivityCoefficients()
FenestrationMaterial_kryptonThermalConductivityCoefficients = _openstudiomodelresources.FenestrationMaterial_kryptonThermalConductivityCoefficients

def FenestrationMaterial_kryptonViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_kryptonViscosityCoefficients()
FenestrationMaterial_kryptonViscosityCoefficients = _openstudiomodelresources.FenestrationMaterial_kryptonViscosityCoefficients

def FenestrationMaterial_kryptonSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_kryptonSpecificHeatCoefficients()
FenestrationMaterial_kryptonSpecificHeatCoefficients = _openstudiomodelresources.FenestrationMaterial_kryptonSpecificHeatCoefficients

def FenestrationMaterial_kryptonMolecularWeight() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_kryptonMolecularWeight()
FenestrationMaterial_kryptonMolecularWeight = _openstudiomodelresources.FenestrationMaterial_kryptonMolecularWeight

def FenestrationMaterial_xenonThermalConductivityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_xenonThermalConductivityCoefficients()
FenestrationMaterial_xenonThermalConductivityCoefficients = _openstudiomodelresources.FenestrationMaterial_xenonThermalConductivityCoefficients

def FenestrationMaterial_xenonViscosityCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_xenonViscosityCoefficients()
FenestrationMaterial_xenonViscosityCoefficients = _openstudiomodelresources.FenestrationMaterial_xenonViscosityCoefficients

def FenestrationMaterial_xenonSpecificHeatCoefficients() -> "std::vector< double,std::allocator< double > > const":
    return _openstudiomodelresources.FenestrationMaterial_xenonSpecificHeatCoefficients()
FenestrationMaterial_xenonSpecificHeatCoefficients = _openstudiomodelresources.FenestrationMaterial_xenonSpecificHeatCoefficients

def FenestrationMaterial_xenonMolecularWeight() -> "double":
    return _openstudiomodelresources.FenestrationMaterial_xenonMolecularWeight()
FenestrationMaterial_xenonMolecularWeight = _openstudiomodelresources.FenestrationMaterial_xenonMolecularWeight


def toFenestrationMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::FenestrationMaterial >":
    return _openstudiomodelresources.toFenestrationMaterial(idfObject)
toFenestrationMaterial = _openstudiomodelresources.toFenestrationMaterial

def getFenestrationMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::FenestrationMaterial >":
    return _openstudiomodelresources.getFenestrationMaterial(t_model, t_handle)
getFenestrationMaterial = _openstudiomodelresources.getFenestrationMaterial

def getFenestrationMaterials(t_model: 'Model') -> "std::vector< openstudio::model::FenestrationMaterial,std::allocator< openstudio::model::FenestrationMaterial > >":
    return _openstudiomodelresources.getFenestrationMaterials(t_model)
getFenestrationMaterials = _openstudiomodelresources.getFenestrationMaterials

def getFenestrationMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::FenestrationMaterial >":
    return _openstudiomodelresources.getFenestrationMaterialByName(t_model, t_name)
getFenestrationMaterialByName = _openstudiomodelresources.getFenestrationMaterialByName

def getFenestrationMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::FenestrationMaterial,std::allocator< openstudio::model::FenestrationMaterial > >":
    return _openstudiomodelresources.getFenestrationMaterialsByName(t_model, t_name, t_exactMatch)
getFenestrationMaterialsByName = _openstudiomodelresources.getFenestrationMaterialsByName
class GasLayer(FenestrationMaterial):
    __swig_setmethods__ = {}
    for _s in [FenestrationMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GasLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FenestrationMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GasLayer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_GasLayer
    __del__ = lambda self: None
GasLayer_swigregister = _openstudiomodelresources.GasLayer_swigregister
GasLayer_swigregister(GasLayer)


def toGasLayer(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GasLayer >":
    return _openstudiomodelresources.toGasLayer(idfObject)
toGasLayer = _openstudiomodelresources.toGasLayer

def getGasLayer(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GasLayer >":
    return _openstudiomodelresources.getGasLayer(t_model, t_handle)
getGasLayer = _openstudiomodelresources.getGasLayer

def getGasLayers(t_model: 'Model') -> "std::vector< openstudio::model::GasLayer,std::allocator< openstudio::model::GasLayer > >":
    return _openstudiomodelresources.getGasLayers(t_model)
getGasLayers = _openstudiomodelresources.getGasLayers

def getGasLayerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GasLayer >":
    return _openstudiomodelresources.getGasLayerByName(t_model, t_name)
getGasLayerByName = _openstudiomodelresources.getGasLayerByName

def getGasLayersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GasLayer,std::allocator< openstudio::model::GasLayer > >":
    return _openstudiomodelresources.getGasLayersByName(t_model, t_name, t_exactMatch)
getGasLayersByName = _openstudiomodelresources.getGasLayersByName
class Glazing(FenestrationMaterial):
    __swig_setmethods__ = {}
    for _s in [FenestrationMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Glazing, name, value)
    __swig_getmethods__ = {}
    for _s in [FenestrationMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Glazing, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Glazing
    __del__ = lambda self: None
Glazing_swigregister = _openstudiomodelresources.Glazing_swigregister
Glazing_swigregister(Glazing)


def toGlazing(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Glazing >":
    return _openstudiomodelresources.toGlazing(idfObject)
toGlazing = _openstudiomodelresources.toGlazing

def getGlazing(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Glazing >":
    return _openstudiomodelresources.getGlazing(t_model, t_handle)
getGlazing = _openstudiomodelresources.getGlazing

def getGlazings(t_model: 'Model') -> "std::vector< openstudio::model::Glazing,std::allocator< openstudio::model::Glazing > >":
    return _openstudiomodelresources.getGlazings(t_model)
getGlazings = _openstudiomodelresources.getGlazings

def getGlazingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Glazing >":
    return _openstudiomodelresources.getGlazingByName(t_model, t_name)
getGlazingByName = _openstudiomodelresources.getGlazingByName

def getGlazingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Glazing,std::allocator< openstudio::model::Glazing > >":
    return _openstudiomodelresources.getGlazingsByName(t_model, t_name, t_exactMatch)
getGlazingsByName = _openstudiomodelresources.getGlazingsByName
class ShadingMaterial(FenestrationMaterial):
    __swig_setmethods__ = {}
    for _s in [FenestrationMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [FenestrationMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingMaterial, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingMaterial
    __del__ = lambda self: None
ShadingMaterial_swigregister = _openstudiomodelresources.ShadingMaterial_swigregister
ShadingMaterial_swigregister(ShadingMaterial)


def toShadingMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ShadingMaterial >":
    return _openstudiomodelresources.toShadingMaterial(idfObject)
toShadingMaterial = _openstudiomodelresources.toShadingMaterial

def getShadingMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ShadingMaterial >":
    return _openstudiomodelresources.getShadingMaterial(t_model, t_handle)
getShadingMaterial = _openstudiomodelresources.getShadingMaterial

def getShadingMaterials(t_model: 'Model') -> "std::vector< openstudio::model::ShadingMaterial,std::allocator< openstudio::model::ShadingMaterial > >":
    return _openstudiomodelresources.getShadingMaterials(t_model)
getShadingMaterials = _openstudiomodelresources.getShadingMaterials

def getShadingMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ShadingMaterial >":
    return _openstudiomodelresources.getShadingMaterialByName(t_model, t_name)
getShadingMaterialByName = _openstudiomodelresources.getShadingMaterialByName

def getShadingMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ShadingMaterial,std::allocator< openstudio::model::ShadingMaterial > >":
    return _openstudiomodelresources.getShadingMaterialsByName(t_model, t_name, t_exactMatch)
getShadingMaterialsByName = _openstudiomodelresources.getShadingMaterialsByName
class ModelPartitionMaterial(Material):
    __swig_setmethods__ = {}
    for _s in [Material]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPartitionMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [Material]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPartitionMaterial, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ModelPartitionMaterial
    __del__ = lambda self: None
ModelPartitionMaterial_swigregister = _openstudiomodelresources.ModelPartitionMaterial_swigregister
ModelPartitionMaterial_swigregister(ModelPartitionMaterial)


def toModelPartitionMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ModelPartitionMaterial >":
    return _openstudiomodelresources.toModelPartitionMaterial(idfObject)
toModelPartitionMaterial = _openstudiomodelresources.toModelPartitionMaterial

def getModelPartitionMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ModelPartitionMaterial >":
    return _openstudiomodelresources.getModelPartitionMaterial(t_model, t_handle)
getModelPartitionMaterial = _openstudiomodelresources.getModelPartitionMaterial

def getModelPartitionMaterials(t_model: 'Model') -> "std::vector< openstudio::model::ModelPartitionMaterial,std::allocator< openstudio::model::ModelPartitionMaterial > >":
    return _openstudiomodelresources.getModelPartitionMaterials(t_model)
getModelPartitionMaterials = _openstudiomodelresources.getModelPartitionMaterials

def getModelPartitionMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ModelPartitionMaterial >":
    return _openstudiomodelresources.getModelPartitionMaterialByName(t_model, t_name)
getModelPartitionMaterialByName = _openstudiomodelresources.getModelPartitionMaterialByName

def getModelPartitionMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ModelPartitionMaterial,std::allocator< openstudio::model::ModelPartitionMaterial > >":
    return _openstudiomodelresources.getModelPartitionMaterialsByName(t_model, t_name, t_exactMatch)
getModelPartitionMaterialsByName = _openstudiomodelresources.getModelPartitionMaterialsByName
class OpaqueMaterial(Material):
    __swig_setmethods__ = {}
    for _s in [Material]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpaqueMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [Material]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpaqueMaterial, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_OpaqueMaterial
    __del__ = lambda self: None

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalResistance(self)

    def thermalAbsorptance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_thermalAbsorptance(self)

    def thermalReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OpaqueMaterial_thermalReflectance(self)

    def solarAbsorptance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_solarAbsorptance(self)

    def solarReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OpaqueMaterial_solarReflectance(self)

    def visibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.OpaqueMaterial_visibleAbsorptance(self)

    def visibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OpaqueMaterial_visibleReflectance(self)

    def setThermalConductivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalConductivity(self, value)

    def setThermalConductance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalConductance(self, value)

    def setThermalResistivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalResistivity(self, value)

    def setThermalResistance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalResistance(self, value)

    def setThermalAbsorptance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalAbsorptance(self, value)

    def setThermalReflectance(self, value: 'OptionalDouble') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setThermalReflectance(self, value)

    def setSolarAbsorptance(self, value: 'OptionalDouble') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setSolarAbsorptance(self, value)

    def setSolarReflectance(self, value: 'OptionalDouble') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setSolarReflectance(self, value)

    def setVisibleAbsorptance(self, value: 'OptionalDouble') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setVisibleAbsorptance(self, value)

    def setVisibleReflectance(self, value: 'OptionalDouble') -> "bool":
        return _openstudiomodelresources.OpaqueMaterial_setVisibleReflectance(self, value)

    def heatCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OpaqueMaterial_heatCapacity(self)
OpaqueMaterial_swigregister = _openstudiomodelresources.OpaqueMaterial_swigregister
OpaqueMaterial_swigregister(OpaqueMaterial)


def toOpaqueMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::OpaqueMaterial >":
    return _openstudiomodelresources.toOpaqueMaterial(idfObject)
toOpaqueMaterial = _openstudiomodelresources.toOpaqueMaterial

def getOpaqueMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::OpaqueMaterial >":
    return _openstudiomodelresources.getOpaqueMaterial(t_model, t_handle)
getOpaqueMaterial = _openstudiomodelresources.getOpaqueMaterial

def getOpaqueMaterials(t_model: 'Model') -> "std::vector< openstudio::model::OpaqueMaterial,std::allocator< openstudio::model::OpaqueMaterial > >":
    return _openstudiomodelresources.getOpaqueMaterials(t_model)
getOpaqueMaterials = _openstudiomodelresources.getOpaqueMaterials

def getOpaqueMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::OpaqueMaterial >":
    return _openstudiomodelresources.getOpaqueMaterialByName(t_model, t_name)
getOpaqueMaterialByName = _openstudiomodelresources.getOpaqueMaterialByName

def getOpaqueMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::OpaqueMaterial,std::allocator< openstudio::model::OpaqueMaterial > >":
    return _openstudiomodelresources.getOpaqueMaterialsByName(t_model, t_name, t_exactMatch)
getOpaqueMaterialsByName = _openstudiomodelresources.getOpaqueMaterialsByName
class AirWallMaterial(ModelPartitionMaterial):
    __swig_setmethods__ = {}
    for _s in [ModelPartitionMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AirWallMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelPartitionMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AirWallMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_AirWallMaterial(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_AirWallMaterial
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.AirWallMaterial_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.AirWallMaterial_iddObjectType)
AirWallMaterial_swigregister = _openstudiomodelresources.AirWallMaterial_swigregister
AirWallMaterial_swigregister(AirWallMaterial)

def AirWallMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.AirWallMaterial_iddObjectType()
AirWallMaterial_iddObjectType = _openstudiomodelresources.AirWallMaterial_iddObjectType


def toAirWallMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirWallMaterial >":
    return _openstudiomodelresources.toAirWallMaterial(idfObject)
toAirWallMaterial = _openstudiomodelresources.toAirWallMaterial

def getAirWallMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirWallMaterial >":
    return _openstudiomodelresources.getAirWallMaterial(t_model, t_handle)
getAirWallMaterial = _openstudiomodelresources.getAirWallMaterial

def getAirWallMaterials(t_model: 'Model') -> "std::vector< openstudio::model::AirWallMaterial,std::allocator< openstudio::model::AirWallMaterial > >":
    return _openstudiomodelresources.getAirWallMaterials(t_model)
getAirWallMaterials = _openstudiomodelresources.getAirWallMaterials

def getAirWallMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirWallMaterial >":
    return _openstudiomodelresources.getAirWallMaterialByName(t_model, t_name)
getAirWallMaterialByName = _openstudiomodelresources.getAirWallMaterialByName

def getAirWallMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirWallMaterial,std::allocator< openstudio::model::AirWallMaterial > >":
    return _openstudiomodelresources.getAirWallMaterialsByName(t_model, t_name, t_exactMatch)
getAirWallMaterialsByName = _openstudiomodelresources.getAirWallMaterialsByName
class Blind(ShadingMaterial):
    __swig_setmethods__ = {}
    for _s in [ShadingMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Blind, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Blind, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', slatWidth: 'double'=0.025, slatSeparation: 'double'=0.01875, frontSideSlatBeamSolarReflectance: 'double'=0.5, backSideSlatBeamSolarReflectance: 'double'=0.5, frontSideSlatDiffuseSolarReflectance: 'double'=0.5, backSideSlatDiffuseSolarReflectance: 'double'=0.5, slatBeamVisibleTransmittance: 'double'=0.0):
        this = _openstudiomodelresources.new_Blind(model, slatWidth, slatSeparation, frontSideSlatBeamSolarReflectance, backSideSlatBeamSolarReflectance, frontSideSlatDiffuseSolarReflectance, backSideSlatDiffuseSolarReflectance, slatBeamVisibleTransmittance)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_Blind
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.Blind_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.Blind_iddObjectType)
    __swig_getmethods__["slatOrientationValues"] = lambda x: _openstudiomodelresources.Blind_slatOrientationValues
    if _newclass:
        slatOrientationValues = staticmethod(_openstudiomodelresources.Blind_slatOrientationValues)

    def slatOrientation(self) -> "std::string":
        return _openstudiomodelresources.Blind_slatOrientation(self)

    def isSlatOrientationDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatOrientationDefaulted(self)

    def slatWidth(self) -> "double":
        return _openstudiomodelresources.Blind_slatWidth(self)

    def getSlatWidth(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatWidth(self, returnIP)

    def slatSeparation(self) -> "double":
        return _openstudiomodelresources.Blind_slatSeparation(self)

    def getSlatSeparation(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatSeparation(self, returnIP)

    def slatThickness(self) -> "double":
        return _openstudiomodelresources.Blind_slatThickness(self)

    def getSlatThickness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatThickness(self, returnIP)

    def isSlatThicknessDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatThicknessDefaulted(self)

    def slatAngle(self) -> "double":
        return _openstudiomodelresources.Blind_slatAngle(self)

    def getSlatAngle(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatAngle(self, returnIP)

    def isSlatAngleDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatAngleDefaulted(self)

    def slatConductivity(self) -> "double":
        return _openstudiomodelresources.Blind_slatConductivity(self)

    def getSlatConductivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatConductivity(self, returnIP)

    def isSlatConductivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatConductivityDefaulted(self)

    def slatBeamSolarTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatBeamSolarTransmittance(self)

    def getSlatBeamSolarTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatBeamSolarTransmittance(self, returnIP)

    def isSlatBeamSolarTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatBeamSolarTransmittanceDefaulted(self)

    def frontSideSlatBeamSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Blind_frontSideSlatBeamSolarReflectance(self)

    def getFrontSideSlatBeamSolarReflectance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getFrontSideSlatBeamSolarReflectance(self, returnIP)

    def backSideSlatBeamSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Blind_backSideSlatBeamSolarReflectance(self)

    def getBackSideSlatBeamSolarReflectance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getBackSideSlatBeamSolarReflectance(self, returnIP)

    def slatDiffuseSolarTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatDiffuseSolarTransmittance(self)

    def getSlatDiffuseSolarTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatDiffuseSolarTransmittance(self, returnIP)

    def isSlatDiffuseSolarTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatDiffuseSolarTransmittanceDefaulted(self)

    def frontSideSlatDiffuseSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Blind_frontSideSlatDiffuseSolarReflectance(self)

    def getFrontSideSlatDiffuseSolarReflectance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getFrontSideSlatDiffuseSolarReflectance(self, returnIP)

    def backSideSlatDiffuseSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Blind_backSideSlatDiffuseSolarReflectance(self)

    def getBackSideSlatDiffuseSolarReflectance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getBackSideSlatDiffuseSolarReflectance(self, returnIP)

    def slatBeamVisibleTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatBeamVisibleTransmittance(self)

    def getSlatBeamVisibleTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatBeamVisibleTransmittance(self, returnIP)

    def frontSideSlatBeamVisibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Blind_frontSideSlatBeamVisibleReflectance(self)

    def getFrontSideSlatBeamVisibleReflectance(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Blind_getFrontSideSlatBeamVisibleReflectance(self, returnIP)

    def backSideSlatBeamVisibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Blind_backSideSlatBeamVisibleReflectance(self)

    def getBackSideSlatBeamVisibleReflectance(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Blind_getBackSideSlatBeamVisibleReflectance(self, returnIP)

    def slatDiffuseVisibleTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatDiffuseVisibleTransmittance(self)

    def getSlatDiffuseVisibleTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatDiffuseVisibleTransmittance(self, returnIP)

    def isSlatDiffuseVisibleTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatDiffuseVisibleTransmittanceDefaulted(self)

    def frontSideSlatDiffuseVisibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Blind_frontSideSlatDiffuseVisibleReflectance(self)

    def getFrontSideSlatDiffuseVisibleReflectance(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Blind_getFrontSideSlatDiffuseVisibleReflectance(self, returnIP)

    def backSideSlatDiffuseVisibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Blind_backSideSlatDiffuseVisibleReflectance(self)

    def getBackSideSlatDiffuseVisibleReflectance(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Blind_getBackSideSlatDiffuseVisibleReflectance(self, returnIP)

    def slatInfraredHemisphericalTransmittance(self) -> "double":
        return _openstudiomodelresources.Blind_slatInfraredHemisphericalTransmittance(self)

    def getSlatInfraredHemisphericalTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getSlatInfraredHemisphericalTransmittance(self, returnIP)

    def isSlatInfraredHemisphericalTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isSlatInfraredHemisphericalTransmittanceDefaulted(self)

    def frontSideSlatInfraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.Blind_frontSideSlatInfraredHemisphericalEmissivity(self)

    def getFrontSideSlatInfraredHemisphericalEmissivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getFrontSideSlatInfraredHemisphericalEmissivity(self, returnIP)

    def isFrontSideSlatInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isFrontSideSlatInfraredHemisphericalEmissivityDefaulted(self)

    def backSideSlatInfraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.Blind_backSideSlatInfraredHemisphericalEmissivity(self)

    def getBackSideSlatInfraredHemisphericalEmissivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getBackSideSlatInfraredHemisphericalEmissivity(self, returnIP)

    def isBackSideSlatInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBackSideSlatInfraredHemisphericalEmissivityDefaulted(self)

    def blindtoGlassDistance(self) -> "double":
        return _openstudiomodelresources.Blind_blindtoGlassDistance(self)

    def getBlindtoGlassDistance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getBlindtoGlassDistance(self, returnIP)

    def isBlindtoGlassDistanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindtoGlassDistanceDefaulted(self)

    def blindTopOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Blind_blindTopOpeningMultiplier(self)

    def getBlindTopOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getBlindTopOpeningMultiplier(self, returnIP)

    def isBlindTopOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindTopOpeningMultiplierDefaulted(self)

    def blindBottomOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Blind_blindBottomOpeningMultiplier(self)

    def getBlindBottomOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getBlindBottomOpeningMultiplier(self, returnIP)

    def isBlindBottomOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindBottomOpeningMultiplierDefaulted(self)

    def blindLeftSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Blind_blindLeftSideOpeningMultiplier(self)

    def getBlindLeftSideOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getBlindLeftSideOpeningMultiplier(self, returnIP)

    def isBlindLeftSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindLeftSideOpeningMultiplierDefaulted(self)

    def blindRightSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Blind_blindRightSideOpeningMultiplier(self)

    def getBlindRightSideOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getBlindRightSideOpeningMultiplier(self, returnIP)

    def isBlindRightSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isBlindRightSideOpeningMultiplierDefaulted(self)

    def minimumSlatAngle(self) -> "double":
        return _openstudiomodelresources.Blind_minimumSlatAngle(self)

    def getMinimumSlatAngle(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getMinimumSlatAngle(self, returnIP)

    def isMinimumSlatAngleDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isMinimumSlatAngleDefaulted(self)

    def maximumSlatAngle(self) -> "double":
        return _openstudiomodelresources.Blind_maximumSlatAngle(self)

    def getMaximumSlatAngle(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Blind_getMaximumSlatAngle(self, returnIP)

    def isMaximumSlatAngleDefaulted(self) -> "bool":
        return _openstudiomodelresources.Blind_isMaximumSlatAngleDefaulted(self)

    def setSlatOrientation(self, slatOrientation: 'std::string') -> "bool":
        return _openstudiomodelresources.Blind_setSlatOrientation(self, slatOrientation)

    def resetSlatOrientation(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatOrientation(self)

    def setSlatWidth(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatWidth(self, *args)

    def setSlatSeparation(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatSeparation(self, *args)

    def setSlatThickness(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatThickness(self, *args)

    def resetSlatThickness(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatThickness(self)

    def setSlatAngle(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatAngle(self, *args)

    def resetSlatAngle(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatAngle(self)

    def setSlatConductivity(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatConductivity(self, *args)

    def resetSlatConductivity(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatConductivity(self)

    def setSlatBeamSolarTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatBeamSolarTransmittance(self, *args)

    def resetSlatBeamSolarTransmittance(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatBeamSolarTransmittance(self)

    def setFrontSideSlatBeamSolarReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatBeamSolarReflectance(self, *args)

    def setBackSideSlatBeamSolarReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatBeamSolarReflectance(self, *args)

    def setSlatDiffuseSolarTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatDiffuseSolarTransmittance(self, *args)

    def resetSlatDiffuseSolarTransmittance(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatDiffuseSolarTransmittance(self)

    def setFrontSideSlatDiffuseSolarReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatDiffuseSolarReflectance(self, *args)

    def setBackSideSlatDiffuseSolarReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatDiffuseSolarReflectance(self, *args)

    def setSlatBeamVisibleTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatBeamVisibleTransmittance(self, *args)

    def setFrontSideSlatBeamVisibleReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatBeamVisibleReflectance(self, *args)

    def resetFrontSideSlatBeamVisibleReflectance(self) -> "void":
        return _openstudiomodelresources.Blind_resetFrontSideSlatBeamVisibleReflectance(self)

    def setBackSideSlatBeamVisibleReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatBeamVisibleReflectance(self, *args)

    def resetBackSideSlatBeamVisibleReflectance(self) -> "void":
        return _openstudiomodelresources.Blind_resetBackSideSlatBeamVisibleReflectance(self)

    def setSlatDiffuseVisibleTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatDiffuseVisibleTransmittance(self, *args)

    def resetSlatDiffuseVisibleTransmittance(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatDiffuseVisibleTransmittance(self)

    def setFrontSideSlatDiffuseVisibleReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatDiffuseVisibleReflectance(self, *args)

    def resetFrontSideSlatDiffuseVisibleReflectance(self) -> "void":
        return _openstudiomodelresources.Blind_resetFrontSideSlatDiffuseVisibleReflectance(self)

    def setBackSideSlatDiffuseVisibleReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatDiffuseVisibleReflectance(self, *args)

    def resetBackSideSlatDiffuseVisibleReflectance(self) -> "void":
        return _openstudiomodelresources.Blind_resetBackSideSlatDiffuseVisibleReflectance(self)

    def setSlatInfraredHemisphericalTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setSlatInfraredHemisphericalTransmittance(self, *args)

    def resetSlatInfraredHemisphericalTransmittance(self) -> "void":
        return _openstudiomodelresources.Blind_resetSlatInfraredHemisphericalTransmittance(self)

    def setFrontSideSlatInfraredHemisphericalEmissivity(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setFrontSideSlatInfraredHemisphericalEmissivity(self, *args)

    def resetFrontSideSlatInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.Blind_resetFrontSideSlatInfraredHemisphericalEmissivity(self)

    def setBackSideSlatInfraredHemisphericalEmissivity(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBackSideSlatInfraredHemisphericalEmissivity(self, *args)

    def resetBackSideSlatInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.Blind_resetBackSideSlatInfraredHemisphericalEmissivity(self)

    def setBlindtoGlassDistance(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBlindtoGlassDistance(self, *args)

    def resetBlindtoGlassDistance(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindtoGlassDistance(self)

    def setBlindTopOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBlindTopOpeningMultiplier(self, *args)

    def resetBlindTopOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindTopOpeningMultiplier(self)

    def setBlindBottomOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBlindBottomOpeningMultiplier(self, *args)

    def resetBlindBottomOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindBottomOpeningMultiplier(self)

    def setBlindLeftSideOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBlindLeftSideOpeningMultiplier(self, *args)

    def resetBlindLeftSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindLeftSideOpeningMultiplier(self)

    def setBlindRightSideOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setBlindRightSideOpeningMultiplier(self, *args)

    def resetBlindRightSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Blind_resetBlindRightSideOpeningMultiplier(self)

    def setMinimumSlatAngle(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setMinimumSlatAngle(self, *args)

    def resetMinimumSlatAngle(self) -> "void":
        return _openstudiomodelresources.Blind_resetMinimumSlatAngle(self)

    def setMaximumSlatAngle(self, *args) -> "bool":
        return _openstudiomodelresources.Blind_setMaximumSlatAngle(self, *args)

    def resetMaximumSlatAngle(self) -> "void":
        return _openstudiomodelresources.Blind_resetMaximumSlatAngle(self)
Blind_swigregister = _openstudiomodelresources.Blind_swigregister
Blind_swigregister(Blind)

def Blind_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Blind_iddObjectType()
Blind_iddObjectType = _openstudiomodelresources.Blind_iddObjectType

def Blind_slatOrientationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Blind_slatOrientationValues()
Blind_slatOrientationValues = _openstudiomodelresources.Blind_slatOrientationValues


def toBlind(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Blind >":
    return _openstudiomodelresources.toBlind(idfObject)
toBlind = _openstudiomodelresources.toBlind

def getBlind(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Blind >":
    return _openstudiomodelresources.getBlind(t_model, t_handle)
getBlind = _openstudiomodelresources.getBlind

def getBlinds(t_model: 'Model') -> "std::vector< openstudio::model::Blind,std::allocator< openstudio::model::Blind > >":
    return _openstudiomodelresources.getBlinds(t_model)
getBlinds = _openstudiomodelresources.getBlinds

def getBlindByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Blind >":
    return _openstudiomodelresources.getBlindByName(t_model, t_name)
getBlindByName = _openstudiomodelresources.getBlindByName

def getBlindsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Blind,std::allocator< openstudio::model::Blind > >":
    return _openstudiomodelresources.getBlindsByName(t_model, t_name, t_exactMatch)
getBlindsByName = _openstudiomodelresources.getBlindsByName
class DaylightRedirectionDevice(ShadingMaterial):
    __swig_setmethods__ = {}
    for _s in [ShadingMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DaylightRedirectionDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DaylightRedirectionDevice, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_DaylightRedirectionDevice(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_DaylightRedirectionDevice
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.DaylightRedirectionDevice_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.DaylightRedirectionDevice_iddObjectType)
    __swig_getmethods__["daylightRedirectionDeviceTypeValues"] = lambda x: _openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues
    if _newclass:
        daylightRedirectionDeviceTypeValues = staticmethod(_openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues)

    def daylightRedirectionDeviceType(self) -> "std::string":
        return _openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceType(self)

    def isDaylightRedirectionDeviceTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDevice_isDaylightRedirectionDeviceTypeDefaulted(self)

    def setDaylightRedirectionDeviceType(self, daylightRedirectionDeviceType: 'std::string const &') -> "bool":
        return _openstudiomodelresources.DaylightRedirectionDevice_setDaylightRedirectionDeviceType(self, daylightRedirectionDeviceType)

    def resetDaylightRedirectionDeviceType(self) -> "void":
        return _openstudiomodelresources.DaylightRedirectionDevice_resetDaylightRedirectionDeviceType(self)
DaylightRedirectionDevice_swigregister = _openstudiomodelresources.DaylightRedirectionDevice_swigregister
DaylightRedirectionDevice_swigregister(DaylightRedirectionDevice)

def DaylightRedirectionDevice_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DaylightRedirectionDevice_iddObjectType()
DaylightRedirectionDevice_iddObjectType = _openstudiomodelresources.DaylightRedirectionDevice_iddObjectType

def DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues()
DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues = _openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues


def toDaylightRedirectionDevice(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::DaylightRedirectionDevice >":
    return _openstudiomodelresources.toDaylightRedirectionDevice(idfObject)
toDaylightRedirectionDevice = _openstudiomodelresources.toDaylightRedirectionDevice

def getDaylightRedirectionDevice(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::DaylightRedirectionDevice >":
    return _openstudiomodelresources.getDaylightRedirectionDevice(t_model, t_handle)
getDaylightRedirectionDevice = _openstudiomodelresources.getDaylightRedirectionDevice

def getDaylightRedirectionDevices(t_model: 'Model') -> "std::vector< openstudio::model::DaylightRedirectionDevice,std::allocator< openstudio::model::DaylightRedirectionDevice > >":
    return _openstudiomodelresources.getDaylightRedirectionDevices(t_model)
getDaylightRedirectionDevices = _openstudiomodelresources.getDaylightRedirectionDevices

def getDaylightRedirectionDeviceByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::DaylightRedirectionDevice >":
    return _openstudiomodelresources.getDaylightRedirectionDeviceByName(t_model, t_name)
getDaylightRedirectionDeviceByName = _openstudiomodelresources.getDaylightRedirectionDeviceByName

def getDaylightRedirectionDevicesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::DaylightRedirectionDevice,std::allocator< openstudio::model::DaylightRedirectionDevice > >":
    return _openstudiomodelresources.getDaylightRedirectionDevicesByName(t_model, t_name, t_exactMatch)
getDaylightRedirectionDevicesByName = _openstudiomodelresources.getDaylightRedirectionDevicesByName
class AirGap(OpaqueMaterial):
    __swig_setmethods__ = {}
    for _s in [OpaqueMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AirGap, name, value)
    __swig_getmethods__ = {}
    for _s in [OpaqueMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AirGap, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', thermalResistance: 'double'=0.1):
        this = _openstudiomodelresources.new_AirGap(model, thermalResistance)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_AirGap
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.AirGap_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.AirGap_iddObjectType)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.AirGap_thermalResistance(self)

    def getThermalResistance(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.AirGap_getThermalResistance(self, returnIP)

    def setThermalResistance(self, *args) -> "bool":
        return _openstudiomodelresources.AirGap_setThermalResistance(self, *args)

    def resetThermalResistance(self) -> "void":
        return _openstudiomodelresources.AirGap_resetThermalResistance(self)
AirGap_swigregister = _openstudiomodelresources.AirGap_swigregister
AirGap_swigregister(AirGap)

def AirGap_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.AirGap_iddObjectType()
AirGap_iddObjectType = _openstudiomodelresources.AirGap_iddObjectType


def toAirGap(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirGap >":
    return _openstudiomodelresources.toAirGap(idfObject)
toAirGap = _openstudiomodelresources.toAirGap

def getAirGap(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirGap >":
    return _openstudiomodelresources.getAirGap(t_model, t_handle)
getAirGap = _openstudiomodelresources.getAirGap

def getAirGaps(t_model: 'Model') -> "std::vector< openstudio::model::AirGap,std::allocator< openstudio::model::AirGap > >":
    return _openstudiomodelresources.getAirGaps(t_model)
getAirGaps = _openstudiomodelresources.getAirGaps

def getAirGapByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirGap >":
    return _openstudiomodelresources.getAirGapByName(t_model, t_name)
getAirGapByName = _openstudiomodelresources.getAirGapByName

def getAirGapsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirGap,std::allocator< openstudio::model::AirGap > >":
    return _openstudiomodelresources.getAirGapsByName(t_model, t_name, t_exactMatch)
getAirGapsByName = _openstudiomodelresources.getAirGapsByName
class Gas(GasLayer):
    __swig_setmethods__ = {}
    for _s in [GasLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gas, name, value)
    __swig_getmethods__ = {}
    for _s in [GasLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gas, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_Gas(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_Gas
    __del__ = lambda self: None
    __swig_getmethods__["validGasTypes"] = lambda x: _openstudiomodelresources.Gas_validGasTypes
    if _newclass:
        validGasTypes = staticmethod(_openstudiomodelresources.Gas_validGasTypes)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.Gas_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.Gas_iddObjectType)
    __swig_getmethods__["gasTypeValues"] = lambda x: _openstudiomodelresources.Gas_gasTypeValues
    if _newclass:
        gasTypeValues = staticmethod(_openstudiomodelresources.Gas_gasTypeValues)

    def gasType(self) -> "std::string":
        return _openstudiomodelresources.Gas_gasType(self)

    def getThermalConductivity(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.Gas_getThermalConductivity(self, temperature)

    def getThermalConductance(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.Gas_getThermalConductance(self, temperature)

    def getThermalResistivity(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.Gas_getThermalResistivity(self, temperature)

    def getThermalResistance(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.Gas_getThermalResistance(self, temperature)

    def getViscosity(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.Gas_getViscosity(self, temperature)

    def getSpecificHeat(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.Gas_getSpecificHeat(self, temperature)

    def customConductivityCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customConductivityCoefficientA(self)

    def customConductivityCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customConductivityCoefficientB(self)

    def customConductivityCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customConductivityCoefficientC(self)

    def customViscosityCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customViscosityCoefficientA(self)

    def customViscosityCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customViscosityCoefficientB(self)

    def customViscosityCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customViscosityCoefficientC(self)

    def customSpecificHeatCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customSpecificHeatCoefficientA(self)

    def customSpecificHeatCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customSpecificHeatCoefficientB(self)

    def customSpecificHeatCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customSpecificHeatCoefficientC(self)

    def customMolecularWeight(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_customMolecularWeight(self)

    def specificHeatRatio(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_specificHeatRatio(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.Gas_thickness(self)

    def getThickness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Gas_getThickness(self, returnIP)

    def conductivityCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_conductivityCoefficientA(self)

    def getConductivityCoefficientA(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getConductivityCoefficientA(self, returnIP)

    def conductivityCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_conductivityCoefficientB(self)

    def getConductivityCoefficientB(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getConductivityCoefficientB(self, returnIP)

    def conductivityCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_conductivityCoefficientC(self)

    def getConductivityCoefficientC(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getConductivityCoefficientC(self, returnIP)

    def viscosityCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_viscosityCoefficientA(self)

    def getViscosityCoefficientA(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getViscosityCoefficientA(self, returnIP)

    def viscosityCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_viscosityCoefficientB(self)

    def getViscosityCoefficientB(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getViscosityCoefficientB(self, returnIP)

    def viscosityCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_viscosityCoefficientC(self)

    def getViscosityCoefficientC(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getViscosityCoefficientC(self, returnIP)

    def specificHeatCoefficientA(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_specificHeatCoefficientA(self)

    def getSpecificHeatCoefficientA(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getSpecificHeatCoefficientA(self, returnIP)

    def specificHeatCoefficientB(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_specificHeatCoefficientB(self)

    def getSpecificHeatCoefficientB(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getSpecificHeatCoefficientB(self, returnIP)

    def specificHeatCoefficientC(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_specificHeatCoefficientC(self)

    def getSpecificHeatCoefficientC(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getSpecificHeatCoefficientC(self, returnIP)

    def molecularWeight(self) -> "boost::optional< double >":
        return _openstudiomodelresources.Gas_molecularWeight(self)

    def getMolecularWeight(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getMolecularWeight(self, returnIP)

    def getSpecificHeatRatio(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.Gas_getSpecificHeatRatio(self, returnIP)

    def setCustomConductivity(self, A: 'double', B: 'double', C: 'double') -> "bool":
        return _openstudiomodelresources.Gas_setCustomConductivity(self, A, B, C)

    def setCustomViscosity(self, A: 'double', B: 'double', C: 'double') -> "bool":
        return _openstudiomodelresources.Gas_setCustomViscosity(self, A, B, C)

    def setCustomSpecificHeat(self, A: 'double', B: 'double', C: 'double') -> "bool":
        return _openstudiomodelresources.Gas_setCustomSpecificHeat(self, A, B, C)

    def setCustomMolecularWeight(self, value: 'double') -> "bool":
        return _openstudiomodelresources.Gas_setCustomMolecularWeight(self, value)

    def setGasType(self, gasType: 'std::string') -> "bool":
        return _openstudiomodelresources.Gas_setGasType(self, gasType)

    def setThickness(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setThickness(self, *args)

    def setConductivityCoefficientA(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setConductivityCoefficientA(self, *args)

    def resetConductivityCoefficientA(self) -> "void":
        return _openstudiomodelresources.Gas_resetConductivityCoefficientA(self)

    def setConductivityCoefficientB(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setConductivityCoefficientB(self, *args)

    def resetConductivityCoefficientB(self) -> "void":
        return _openstudiomodelresources.Gas_resetConductivityCoefficientB(self)

    def setConductivityCoefficientC(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setConductivityCoefficientC(self, *args)

    def resetConductivityCoefficientC(self) -> "void":
        return _openstudiomodelresources.Gas_resetConductivityCoefficientC(self)

    def setViscosityCoefficientA(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setViscosityCoefficientA(self, *args)

    def resetViscosityCoefficientA(self) -> "void":
        return _openstudiomodelresources.Gas_resetViscosityCoefficientA(self)

    def setViscosityCoefficientB(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setViscosityCoefficientB(self, *args)

    def resetViscosityCoefficientB(self) -> "void":
        return _openstudiomodelresources.Gas_resetViscosityCoefficientB(self)

    def setViscosityCoefficientC(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setViscosityCoefficientC(self, *args)

    def resetViscosityCoefficientC(self) -> "void":
        return _openstudiomodelresources.Gas_resetViscosityCoefficientC(self)

    def setSpecificHeatCoefficientA(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setSpecificHeatCoefficientA(self, *args)

    def resetSpecificHeatCoefficientA(self) -> "void":
        return _openstudiomodelresources.Gas_resetSpecificHeatCoefficientA(self)

    def setSpecificHeatCoefficientB(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setSpecificHeatCoefficientB(self, *args)

    def resetSpecificHeatCoefficientB(self) -> "void":
        return _openstudiomodelresources.Gas_resetSpecificHeatCoefficientB(self)

    def setSpecificHeatCoefficientC(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setSpecificHeatCoefficientC(self, *args)

    def resetSpecificHeatCoefficientC(self) -> "void":
        return _openstudiomodelresources.Gas_resetSpecificHeatCoefficientC(self)

    def setMolecularWeight(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setMolecularWeight(self, *args)

    def resetMolecularWeight(self) -> "void":
        return _openstudiomodelresources.Gas_resetMolecularWeight(self)

    def setSpecificHeatRatio(self, *args) -> "bool":
        return _openstudiomodelresources.Gas_setSpecificHeatRatio(self, *args)

    def resetSpecificHeatRatio(self) -> "void":
        return _openstudiomodelresources.Gas_resetSpecificHeatRatio(self)
Gas_swigregister = _openstudiomodelresources.Gas_swigregister
Gas_swigregister(Gas)

def Gas_validGasTypes() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Gas_validGasTypes()
Gas_validGasTypes = _openstudiomodelresources.Gas_validGasTypes

def Gas_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Gas_iddObjectType()
Gas_iddObjectType = _openstudiomodelresources.Gas_iddObjectType

def Gas_gasTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Gas_gasTypeValues()
Gas_gasTypeValues = _openstudiomodelresources.Gas_gasTypeValues


def toGas(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Gas >":
    return _openstudiomodelresources.toGas(idfObject)
toGas = _openstudiomodelresources.toGas

def getGas(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Gas >":
    return _openstudiomodelresources.getGas(t_model, t_handle)
getGas = _openstudiomodelresources.getGas

def getGass(t_model: 'Model') -> "std::vector< openstudio::model::Gas,std::allocator< openstudio::model::Gas > >":
    return _openstudiomodelresources.getGass(t_model)
getGass = _openstudiomodelresources.getGass

def getGasByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Gas >":
    return _openstudiomodelresources.getGasByName(t_model, t_name)
getGasByName = _openstudiomodelresources.getGasByName

def getGassByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Gas,std::allocator< openstudio::model::Gas > >":
    return _openstudiomodelresources.getGassByName(t_model, t_name, t_exactMatch)
getGassByName = _openstudiomodelresources.getGassByName
class GasMixture(GasLayer):
    __swig_setmethods__ = {}
    for _s in [GasLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GasMixture, name, value)
    __swig_getmethods__ = {}
    for _s in [GasLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GasMixture, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_GasMixture(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_GasMixture
    __del__ = lambda self: None
    __swig_getmethods__["validGasTypes"] = lambda x: _openstudiomodelresources.GasMixture_validGasTypes
    if _newclass:
        validGasTypes = staticmethod(_openstudiomodelresources.GasMixture_validGasTypes)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.GasMixture_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.GasMixture_iddObjectType)
    __swig_getmethods__["gas1TypeValues"] = lambda x: _openstudiomodelresources.GasMixture_gas1TypeValues
    if _newclass:
        gas1TypeValues = staticmethod(_openstudiomodelresources.GasMixture_gas1TypeValues)
    __swig_getmethods__["gas2TypeValues"] = lambda x: _openstudiomodelresources.GasMixture_gas2TypeValues
    if _newclass:
        gas2TypeValues = staticmethod(_openstudiomodelresources.GasMixture_gas2TypeValues)
    __swig_getmethods__["gas3TypeValues"] = lambda x: _openstudiomodelresources.GasMixture_gas3TypeValues
    if _newclass:
        gas3TypeValues = staticmethod(_openstudiomodelresources.GasMixture_gas3TypeValues)
    __swig_getmethods__["gas4TypeValues"] = lambda x: _openstudiomodelresources.GasMixture_gas4TypeValues
    if _newclass:
        gas4TypeValues = staticmethod(_openstudiomodelresources.GasMixture_gas4TypeValues)

    def getGasType(self, index: 'unsigned int') -> "std::string":
        return _openstudiomodelresources.GasMixture_getGasType(self, index)

    def getGasFraction(self, index: 'unsigned int') -> "double":
        return _openstudiomodelresources.GasMixture_getGasFraction(self, index)

    def getThermalConductivity(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.GasMixture_getThermalConductivity(self, temperature)

    def getThermalConductance(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.GasMixture_getThermalConductance(self, temperature)

    def getThermalResistivity(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.GasMixture_getThermalResistivity(self, temperature)

    def getThermalResistance(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.GasMixture_getThermalResistance(self, temperature)

    def getViscosity(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.GasMixture_getViscosity(self, temperature)

    def getSpecificHeat(self, temperature: 'double') -> "double":
        return _openstudiomodelresources.GasMixture_getSpecificHeat(self, temperature)

    def thickness(self) -> "double":
        return _openstudiomodelresources.GasMixture_thickness(self)

    def getThickness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.GasMixture_getThickness(self, returnIP)

    def numberofGasesinMixture(self) -> "int":
        return _openstudiomodelresources.GasMixture_numberofGasesinMixture(self)

    def gas1Type(self) -> "std::string":
        return _openstudiomodelresources.GasMixture_gas1Type(self)

    def gas1Fraction(self) -> "double":
        return _openstudiomodelresources.GasMixture_gas1Fraction(self)

    def getGas1Fraction(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.GasMixture_getGas1Fraction(self, returnIP)

    def gas2Type(self) -> "std::string":
        return _openstudiomodelresources.GasMixture_gas2Type(self)

    def gas2Fraction(self) -> "double":
        return _openstudiomodelresources.GasMixture_gas2Fraction(self)

    def getGas2Fraction(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.GasMixture_getGas2Fraction(self, returnIP)

    def gas3Type(self) -> "std::string":
        return _openstudiomodelresources.GasMixture_gas3Type(self)

    def gas3Fraction(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasMixture_gas3Fraction(self)

    def getGas3Fraction(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.GasMixture_getGas3Fraction(self, returnIP)

    def gas4Type(self) -> "std::string":
        return _openstudiomodelresources.GasMixture_gas4Type(self)

    def gas4Fraction(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasMixture_gas4Fraction(self)

    def getGas4Fraction(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.GasMixture_getGas4Fraction(self, returnIP)

    def setGas(self, index: 'unsigned int', type: 'std::string const &', fraction: 'double') -> "bool":
        return _openstudiomodelresources.GasMixture_setGas(self, index, type, fraction)

    def setGasType(self, index: 'unsigned int', type: 'std::string const &') -> "bool":
        return _openstudiomodelresources.GasMixture_setGasType(self, index, type)

    def setGasFraction(self, index: 'unsigned int', fraction: 'double') -> "bool":
        return _openstudiomodelresources.GasMixture_setGasFraction(self, index, fraction)

    def addGas(self, type: 'std::string const &', fraction: 'double') -> "bool":
        return _openstudiomodelresources.GasMixture_addGas(self, type, fraction)

    def setFractions(self, fractions: 'DoubleVector') -> "bool":
        return _openstudiomodelresources.GasMixture_setFractions(self, fractions)

    def balanceFractions(self, index: 'unsigned int') -> "bool":
        return _openstudiomodelresources.GasMixture_balanceFractions(self, index)

    def setThickness(self, *args) -> "bool":
        return _openstudiomodelresources.GasMixture_setThickness(self, *args)

    def setNumberofGasesinMixture(self, numberofGasesinMixture: 'int') -> "bool":
        return _openstudiomodelresources.GasMixture_setNumberofGasesinMixture(self, numberofGasesinMixture)

    def setGas1Type(self, gas1Type: 'std::string') -> "bool":
        return _openstudiomodelresources.GasMixture_setGas1Type(self, gas1Type)

    def resetGas1Type(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas1Type(self)

    def setGas1Fraction(self, *args) -> "bool":
        return _openstudiomodelresources.GasMixture_setGas1Fraction(self, *args)

    def resetGas1Fraction(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas1Fraction(self)

    def setGas2Type(self, gas2Type: 'std::string') -> "bool":
        return _openstudiomodelresources.GasMixture_setGas2Type(self, gas2Type)

    def resetGas2Type(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas2Type(self)

    def setGas2Fraction(self, *args) -> "bool":
        return _openstudiomodelresources.GasMixture_setGas2Fraction(self, *args)

    def resetGas2Fraction(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas2Fraction(self)

    def setGas3Type(self, gas3Type: 'std::string') -> "bool":
        return _openstudiomodelresources.GasMixture_setGas3Type(self, gas3Type)

    def resetGas3Type(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas3Type(self)

    def setGas3Fraction(self, *args) -> "bool":
        return _openstudiomodelresources.GasMixture_setGas3Fraction(self, *args)

    def resetGas3Fraction(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas3Fraction(self)

    def setGas4Type(self, gas4Type: 'std::string') -> "bool":
        return _openstudiomodelresources.GasMixture_setGas4Type(self, gas4Type)

    def resetGas4Type(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas4Type(self)

    def setGas4Fraction(self, *args) -> "bool":
        return _openstudiomodelresources.GasMixture_setGas4Fraction(self, *args)

    def resetGas4Fraction(self) -> "void":
        return _openstudiomodelresources.GasMixture_resetGas4Fraction(self)

    def numGases(self) -> "unsigned int":
        return _openstudiomodelresources.GasMixture_numGases(self)
GasMixture_swigregister = _openstudiomodelresources.GasMixture_swigregister
GasMixture_swigregister(GasMixture)

def GasMixture_validGasTypes() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_validGasTypes()
GasMixture_validGasTypes = _openstudiomodelresources.GasMixture_validGasTypes

def GasMixture_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.GasMixture_iddObjectType()
GasMixture_iddObjectType = _openstudiomodelresources.GasMixture_iddObjectType

def GasMixture_gas1TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_gas1TypeValues()
GasMixture_gas1TypeValues = _openstudiomodelresources.GasMixture_gas1TypeValues

def GasMixture_gas2TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_gas2TypeValues()
GasMixture_gas2TypeValues = _openstudiomodelresources.GasMixture_gas2TypeValues

def GasMixture_gas3TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_gas3TypeValues()
GasMixture_gas3TypeValues = _openstudiomodelresources.GasMixture_gas3TypeValues

def GasMixture_gas4TypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasMixture_gas4TypeValues()
GasMixture_gas4TypeValues = _openstudiomodelresources.GasMixture_gas4TypeValues


def toGasMixture(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GasMixture >":
    return _openstudiomodelresources.toGasMixture(idfObject)
toGasMixture = _openstudiomodelresources.toGasMixture

def getGasMixture(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GasMixture >":
    return _openstudiomodelresources.getGasMixture(t_model, t_handle)
getGasMixture = _openstudiomodelresources.getGasMixture

def getGasMixtures(t_model: 'Model') -> "std::vector< openstudio::model::GasMixture,std::allocator< openstudio::model::GasMixture > >":
    return _openstudiomodelresources.getGasMixtures(t_model)
getGasMixtures = _openstudiomodelresources.getGasMixtures

def getGasMixtureByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GasMixture >":
    return _openstudiomodelresources.getGasMixtureByName(t_model, t_name)
getGasMixtureByName = _openstudiomodelresources.getGasMixtureByName

def getGasMixturesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GasMixture,std::allocator< openstudio::model::GasMixture > >":
    return _openstudiomodelresources.getGasMixturesByName(t_model, t_name, t_exactMatch)
getGasMixturesByName = _openstudiomodelresources.getGasMixturesByName
class InfraredTransparentMaterial(ModelPartitionMaterial):
    __swig_setmethods__ = {}
    for _s in [ModelPartitionMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfraredTransparentMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelPartitionMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfraredTransparentMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_InfraredTransparentMaterial(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_InfraredTransparentMaterial
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.InfraredTransparentMaterial_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.InfraredTransparentMaterial_iddObjectType)
InfraredTransparentMaterial_swigregister = _openstudiomodelresources.InfraredTransparentMaterial_swigregister
InfraredTransparentMaterial_swigregister(InfraredTransparentMaterial)

def InfraredTransparentMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.InfraredTransparentMaterial_iddObjectType()
InfraredTransparentMaterial_iddObjectType = _openstudiomodelresources.InfraredTransparentMaterial_iddObjectType


def toInfraredTransparentMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::InfraredTransparentMaterial >":
    return _openstudiomodelresources.toInfraredTransparentMaterial(idfObject)
toInfraredTransparentMaterial = _openstudiomodelresources.toInfraredTransparentMaterial

def getInfraredTransparentMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::InfraredTransparentMaterial >":
    return _openstudiomodelresources.getInfraredTransparentMaterial(t_model, t_handle)
getInfraredTransparentMaterial = _openstudiomodelresources.getInfraredTransparentMaterial

def getInfraredTransparentMaterials(t_model: 'Model') -> "std::vector< openstudio::model::InfraredTransparentMaterial,std::allocator< openstudio::model::InfraredTransparentMaterial > >":
    return _openstudiomodelresources.getInfraredTransparentMaterials(t_model)
getInfraredTransparentMaterials = _openstudiomodelresources.getInfraredTransparentMaterials

def getInfraredTransparentMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::InfraredTransparentMaterial >":
    return _openstudiomodelresources.getInfraredTransparentMaterialByName(t_model, t_name)
getInfraredTransparentMaterialByName = _openstudiomodelresources.getInfraredTransparentMaterialByName

def getInfraredTransparentMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::InfraredTransparentMaterial,std::allocator< openstudio::model::InfraredTransparentMaterial > >":
    return _openstudiomodelresources.getInfraredTransparentMaterialsByName(t_model, t_name, t_exactMatch)
getInfraredTransparentMaterialsByName = _openstudiomodelresources.getInfraredTransparentMaterialsByName
class MasslessOpaqueMaterial(OpaqueMaterial):
    __swig_setmethods__ = {}
    for _s in [OpaqueMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MasslessOpaqueMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [OpaqueMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MasslessOpaqueMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_MasslessOpaqueMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_MasslessOpaqueMaterial
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.MasslessOpaqueMaterial_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.MasslessOpaqueMaterial_iddObjectType)
    __swig_getmethods__["roughnessValues"] = lambda x: _openstudiomodelresources.MasslessOpaqueMaterial_roughnessValues
    if _newclass:
        roughnessValues = staticmethod(_openstudiomodelresources.MasslessOpaqueMaterial_roughnessValues)

    def roughness(self) -> "std::string":
        return _openstudiomodelresources.MasslessOpaqueMaterial_roughness(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.MasslessOpaqueMaterial_thermalResistance(self)

    def getThermalResistance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.MasslessOpaqueMaterial_getThermalResistance(self, returnIP)

    def thermalAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MasslessOpaqueMaterial_thermalAbsorptance(self)

    def getThermalAbsorptance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.MasslessOpaqueMaterial_getThermalAbsorptance(self, returnIP)

    def isThermalAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_isThermalAbsorptanceDefaulted(self)

    def solarAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MasslessOpaqueMaterial_solarAbsorptance(self)

    def getSolarAbsorptance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.MasslessOpaqueMaterial_getSolarAbsorptance(self, returnIP)

    def isSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_isSolarAbsorptanceDefaulted(self)

    def visibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.MasslessOpaqueMaterial_visibleAbsorptance(self)

    def getVisibleAbsorptance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.MasslessOpaqueMaterial_getVisibleAbsorptance(self, returnIP)

    def isVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_isVisibleAbsorptanceDefaulted(self)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.MasslessOpaqueMaterial_conductivity(self)

    def getConductivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.MasslessOpaqueMaterial_getConductivity(self, returnIP)

    def density(self) -> "double":
        return _openstudiomodelresources.MasslessOpaqueMaterial_density(self)

    def getDensity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.MasslessOpaqueMaterial_getDensity(self, returnIP)

    def specificHeat(self) -> "double":
        return _openstudiomodelresources.MasslessOpaqueMaterial_specificHeat(self)

    def getSpecificHeat(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.MasslessOpaqueMaterial_getSpecificHeat(self, returnIP)

    def setRoughness(self, roughness: 'std::string') -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setRoughness(self, roughness)

    def setThermalResistance(self, *args) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setThermalResistance(self, *args)

    def setThermalAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setThermalAbsorptance(self, *args)

    def resetThermalAbsorptance(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetThermalAbsorptance(self)

    def setSolarAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setSolarAbsorptance(self, *args)

    def resetSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetSolarAbsorptance(self)

    def setVisibleAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setVisibleAbsorptance(self, *args)

    def resetVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetVisibleAbsorptance(self)

    def setConductivity(self, *args) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setConductivity(self, *args)

    def setDensity(self, *args) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setDensity(self, *args)

    def setSpecificHeat(self, *args) -> "bool":
        return _openstudiomodelresources.MasslessOpaqueMaterial_setSpecificHeat(self, *args)
MasslessOpaqueMaterial_swigregister = _openstudiomodelresources.MasslessOpaqueMaterial_swigregister
MasslessOpaqueMaterial_swigregister(MasslessOpaqueMaterial)

def MasslessOpaqueMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.MasslessOpaqueMaterial_iddObjectType()
MasslessOpaqueMaterial_iddObjectType = _openstudiomodelresources.MasslessOpaqueMaterial_iddObjectType

def MasslessOpaqueMaterial_roughnessValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.MasslessOpaqueMaterial_roughnessValues()
MasslessOpaqueMaterial_roughnessValues = _openstudiomodelresources.MasslessOpaqueMaterial_roughnessValues


def toMasslessOpaqueMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::MasslessOpaqueMaterial >":
    return _openstudiomodelresources.toMasslessOpaqueMaterial(idfObject)
toMasslessOpaqueMaterial = _openstudiomodelresources.toMasslessOpaqueMaterial

def getMasslessOpaqueMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::MasslessOpaqueMaterial >":
    return _openstudiomodelresources.getMasslessOpaqueMaterial(t_model, t_handle)
getMasslessOpaqueMaterial = _openstudiomodelresources.getMasslessOpaqueMaterial

def getMasslessOpaqueMaterials(t_model: 'Model') -> "std::vector< openstudio::model::MasslessOpaqueMaterial,std::allocator< openstudio::model::MasslessOpaqueMaterial > >":
    return _openstudiomodelresources.getMasslessOpaqueMaterials(t_model)
getMasslessOpaqueMaterials = _openstudiomodelresources.getMasslessOpaqueMaterials

def getMasslessOpaqueMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::MasslessOpaqueMaterial >":
    return _openstudiomodelresources.getMasslessOpaqueMaterialByName(t_model, t_name)
getMasslessOpaqueMaterialByName = _openstudiomodelresources.getMasslessOpaqueMaterialByName

def getMasslessOpaqueMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::MasslessOpaqueMaterial,std::allocator< openstudio::model::MasslessOpaqueMaterial > >":
    return _openstudiomodelresources.getMasslessOpaqueMaterialsByName(t_model, t_name, t_exactMatch)
getMasslessOpaqueMaterialsByName = _openstudiomodelresources.getMasslessOpaqueMaterialsByName
class RefractionExtinctionGlazing(Glazing):
    __swig_setmethods__ = {}
    for _s in [Glazing]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefractionExtinctionGlazing, name, value)
    __swig_getmethods__ = {}
    for _s in [Glazing]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefractionExtinctionGlazing, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', thickness: 'double'=0.1, solarIndexofRefraction: 'double'=1.1, solarExtinctionCoefficient: 'double'=0.1, visibleIndexofRefraction: 'double'=1.1, visibleExtinctionCoefficient: 'double'=0.1):
        this = _openstudiomodelresources.new_RefractionExtinctionGlazing(model, thickness, solarIndexofRefraction, solarExtinctionCoefficient, visibleIndexofRefraction, visibleExtinctionCoefficient)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_RefractionExtinctionGlazing
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.RefractionExtinctionGlazing_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.RefractionExtinctionGlazing_iddObjectType)

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalResistance(self)

    def thermalTransmittance(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalTransmittance(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_thickness(self)

    def getThickness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RefractionExtinctionGlazing_getThickness(self, returnIP)

    def solarIndexofRefraction(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_solarIndexofRefraction(self)

    def getSolarIndexofRefraction(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RefractionExtinctionGlazing_getSolarIndexofRefraction(self, returnIP)

    def solarExtinctionCoefficient(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_solarExtinctionCoefficient(self)

    def getSolarExtinctionCoefficient(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RefractionExtinctionGlazing_getSolarExtinctionCoefficient(self, returnIP)

    def visibleIndexofRefraction(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_visibleIndexofRefraction(self)

    def getVisibleIndexofRefraction(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RefractionExtinctionGlazing_getVisibleIndexofRefraction(self, returnIP)

    def visibleExtinctionCoefficient(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_visibleExtinctionCoefficient(self)

    def getVisibleExtinctionCoefficient(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RefractionExtinctionGlazing_getVisibleExtinctionCoefficient(self, returnIP)

    def infraredTransmittanceatNormalIncidence(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_infraredTransmittanceatNormalIncidence(self)

    def getInfraredTransmittanceatNormalIncidence(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RefractionExtinctionGlazing_getInfraredTransmittanceatNormalIncidence(self, returnIP)

    def isInfraredTransmittanceatNormalIncidenceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isInfraredTransmittanceatNormalIncidenceDefaulted(self)

    def infraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_infraredHemisphericalEmissivity(self)

    def getInfraredHemisphericalEmissivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RefractionExtinctionGlazing_getInfraredHemisphericalEmissivity(self, returnIP)

    def isInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isInfraredHemisphericalEmissivityDefaulted(self)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_conductivity(self)

    def getConductivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RefractionExtinctionGlazing_getConductivity(self, returnIP)

    def isConductivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isConductivityDefaulted(self)

    def dirtCorrectionFactorforSolarandVisibleTransmittance(self) -> "double":
        return _openstudiomodelresources.RefractionExtinctionGlazing_dirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def getDirtCorrectionFactorforSolarandVisibleTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RefractionExtinctionGlazing_getDirtCorrectionFactorforSolarandVisibleTransmittance(self, returnIP)

    def isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self)

    def solarDiffusing(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_solarDiffusing(self)

    def isSolarDiffusingDefaulted(self) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_isSolarDiffusingDefaulted(self)

    def setThermalConductivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalConductivity(self, value)

    def setThermalConductance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalConductance(self, value)

    def setThermalResistivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalResistivity(self, value)

    def setThermalResistance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalResistance(self, value)

    def setThermalTransmittance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalTransmittance(self, value)

    def setThickness(self, *args) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThickness(self, *args)

    def setSolarIndexofRefraction(self, *args) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarIndexofRefraction(self, *args)

    def setSolarExtinctionCoefficient(self, *args) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarExtinctionCoefficient(self, *args)

    def setVisibleIndexofRefraction(self, *args) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setVisibleIndexofRefraction(self, *args)

    def setVisibleExtinctionCoefficient(self, *args) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setVisibleExtinctionCoefficient(self, *args)

    def setInfraredTransmittanceatNormalIncidence(self, *args) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setInfraredTransmittanceatNormalIncidence(self, *args)

    def resetInfraredTransmittanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetInfraredTransmittanceatNormalIncidence(self)

    def setInfraredHemisphericalEmissivity(self, *args) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setInfraredHemisphericalEmissivity(self, *args)

    def resetInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetInfraredHemisphericalEmissivity(self)

    def setConductivity(self, *args) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setConductivity(self, *args)

    def resetConductivity(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetConductivity(self)

    def setDirtCorrectionFactorforSolarandVisibleTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setDirtCorrectionFactorforSolarandVisibleTransmittance(self, *args)

    def resetDirtCorrectionFactorforSolarandVisibleTransmittance(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetDirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def setSolarDiffusing(self, solarDiffusing: 'bool') -> "bool":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarDiffusing(self, solarDiffusing)

    def setSolarDiffusingNoFail(self, solarDiffusing: 'bool') -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarDiffusingNoFail(self, solarDiffusing)

    def resetSolarDiffusing(self) -> "void":
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetSolarDiffusing(self)
RefractionExtinctionGlazing_swigregister = _openstudiomodelresources.RefractionExtinctionGlazing_swigregister
RefractionExtinctionGlazing_swigregister(RefractionExtinctionGlazing)

def RefractionExtinctionGlazing_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.RefractionExtinctionGlazing_iddObjectType()
RefractionExtinctionGlazing_iddObjectType = _openstudiomodelresources.RefractionExtinctionGlazing_iddObjectType


def toRefractionExtinctionGlazing(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefractionExtinctionGlazing >":
    return _openstudiomodelresources.toRefractionExtinctionGlazing(idfObject)
toRefractionExtinctionGlazing = _openstudiomodelresources.toRefractionExtinctionGlazing

def getRefractionExtinctionGlazing(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefractionExtinctionGlazing >":
    return _openstudiomodelresources.getRefractionExtinctionGlazing(t_model, t_handle)
getRefractionExtinctionGlazing = _openstudiomodelresources.getRefractionExtinctionGlazing

def getRefractionExtinctionGlazings(t_model: 'Model') -> "std::vector< openstudio::model::RefractionExtinctionGlazing,std::allocator< openstudio::model::RefractionExtinctionGlazing > >":
    return _openstudiomodelresources.getRefractionExtinctionGlazings(t_model)
getRefractionExtinctionGlazings = _openstudiomodelresources.getRefractionExtinctionGlazings

def getRefractionExtinctionGlazingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefractionExtinctionGlazing >":
    return _openstudiomodelresources.getRefractionExtinctionGlazingByName(t_model, t_name)
getRefractionExtinctionGlazingByName = _openstudiomodelresources.getRefractionExtinctionGlazingByName

def getRefractionExtinctionGlazingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefractionExtinctionGlazing,std::allocator< openstudio::model::RefractionExtinctionGlazing > >":
    return _openstudiomodelresources.getRefractionExtinctionGlazingsByName(t_model, t_name, t_exactMatch)
getRefractionExtinctionGlazingsByName = _openstudiomodelresources.getRefractionExtinctionGlazingsByName
class RoofVegetation(OpaqueMaterial):
    __swig_setmethods__ = {}
    for _s in [OpaqueMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoofVegetation, name, value)
    __swig_getmethods__ = {}
    for _s in [OpaqueMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoofVegetation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_RoofVegetation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_RoofVegetation
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.RoofVegetation_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.RoofVegetation_iddObjectType)
    __swig_getmethods__["roughnessValues"] = lambda x: _openstudiomodelresources.RoofVegetation_roughnessValues
    if _newclass:
        roughnessValues = staticmethod(_openstudiomodelresources.RoofVegetation_roughnessValues)
    __swig_getmethods__["moistureDiffusionCalculationMethodValues"] = lambda x: _openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethodValues
    if _newclass:
        moistureDiffusionCalculationMethodValues = staticmethod(_openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethodValues)

    def heightofPlants(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_heightofPlants(self)

    def getHeightofPlants(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getHeightofPlants(self, returnIP)

    def isHeightofPlantsDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isHeightofPlantsDefaulted(self)

    def leafAreaIndex(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_leafAreaIndex(self)

    def getLeafAreaIndex(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getLeafAreaIndex(self, returnIP)

    def isLeafAreaIndexDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isLeafAreaIndexDefaulted(self)

    def leafReflectivity(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_leafReflectivity(self)

    def getLeafReflectivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getLeafReflectivity(self, returnIP)

    def isLeafReflectivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isLeafReflectivityDefaulted(self)

    def leafEmissivity(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_leafEmissivity(self)

    def getLeafEmissivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getLeafEmissivity(self, returnIP)

    def isLeafEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isLeafEmissivityDefaulted(self)

    def minimumStomatalResistance(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_minimumStomatalResistance(self)

    def getMinimumStomatalResistance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getMinimumStomatalResistance(self, returnIP)

    def isMinimumStomatalResistanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isMinimumStomatalResistanceDefaulted(self)

    def soilLayerName(self) -> "std::string":
        return _openstudiomodelresources.RoofVegetation_soilLayerName(self)

    def isSoilLayerNameDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isSoilLayerNameDefaulted(self)

    def roughness(self) -> "std::string":
        return _openstudiomodelresources.RoofVegetation_roughness(self)

    def density(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_density(self)

    def specificHeat(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_specificHeat(self)

    def saturationVolumetricMoistureContent(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_saturationVolumetricMoistureContent(self)

    def residualVolumetricMoistureContent(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_residualVolumetricMoistureContent(self)

    def initialVolumetricMoistureContent(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_initialVolumetricMoistureContent(self)

    def isRoughnessDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isRoughnessDefaulted(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_thickness(self)

    def getThickness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getThickness(self, returnIP)

    def isThicknessDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isThicknessDefaulted(self)

    def conductivityofDrySoil(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_conductivityofDrySoil(self)

    def getConductivityofDrySoil(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getConductivityofDrySoil(self, returnIP)

    def isConductivityofDrySoilDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isConductivityofDrySoilDefaulted(self)

    def densityofDrySoil(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_densityofDrySoil(self)

    def getDensityofDrySoil(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getDensityofDrySoil(self, returnIP)

    def isDensityofDrySoilDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isDensityofDrySoilDefaulted(self)

    def specificHeatofDrySoil(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_specificHeatofDrySoil(self)

    def getSpecificHeatofDrySoil(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getSpecificHeatofDrySoil(self, returnIP)

    def isSpecificHeatofDrySoilDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isSpecificHeatofDrySoilDefaulted(self)

    def thermalAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.RoofVegetation_thermalAbsorptance(self)

    def getThermalAbsorptance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getThermalAbsorptance(self, returnIP)

    def isThermalAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isThermalAbsorptanceDefaulted(self)

    def solarAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.RoofVegetation_solarAbsorptance(self)

    def getSolarAbsorptance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getSolarAbsorptance(self, returnIP)

    def isSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isSolarAbsorptanceDefaulted(self)

    def visibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.RoofVegetation_visibleAbsorptance(self)

    def getVisibleAbsorptance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getVisibleAbsorptance(self, returnIP)

    def isVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isVisibleAbsorptanceDefaulted(self)

    def saturationVolumetricMoistureContentoftheSoilLayer(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_saturationVolumetricMoistureContentoftheSoilLayer(self)

    def getSaturationVolumetricMoistureContentoftheSoilLayer(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getSaturationVolumetricMoistureContentoftheSoilLayer(self, returnIP)

    def isSaturationVolumetricMoistureContentoftheSoilLayerDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isSaturationVolumetricMoistureContentoftheSoilLayerDefaulted(self)

    def residualVolumetricMoistureContentoftheSoilLayer(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_residualVolumetricMoistureContentoftheSoilLayer(self)

    def getResidualVolumetricMoistureContentoftheSoilLayer(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getResidualVolumetricMoistureContentoftheSoilLayer(self, returnIP)

    def isResidualVolumetricMoistureContentoftheSoilLayerDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isResidualVolumetricMoistureContentoftheSoilLayerDefaulted(self)

    def initialVolumetricMoistureContentoftheSoilLayer(self) -> "double":
        return _openstudiomodelresources.RoofVegetation_initialVolumetricMoistureContentoftheSoilLayer(self)

    def getInitialVolumetricMoistureContentoftheSoilLayer(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.RoofVegetation_getInitialVolumetricMoistureContentoftheSoilLayer(self, returnIP)

    def isInitialVolumetricMoistureContentoftheSoilLayerDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isInitialVolumetricMoistureContentoftheSoilLayerDefaulted(self)

    def moistureDiffusionCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethod(self)

    def isMoistureDiffusionCalculationMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.RoofVegetation_isMoistureDiffusionCalculationMethodDefaulted(self)

    def setSoilLayerName(self, name: 'std::string const &') -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSoilLayerName(self, name)

    def setRoughness(self, value: 'std::string const &') -> "bool":
        return _openstudiomodelresources.RoofVegetation_setRoughness(self, value)

    def setDensity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RoofVegetation_setDensity(self, value)

    def setSpecificHeat(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSpecificHeat(self, value)

    def setSaturationVolumetricMoistureContent(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSaturationVolumetricMoistureContent(self, value)

    def setResidualVolumetricMoistureContent(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RoofVegetation_setResidualVolumetricMoistureContent(self, value)

    def setInitialVolumetricMoistureConent(self, value: 'double') -> "bool":
        return _openstudiomodelresources.RoofVegetation_setInitialVolumetricMoistureConent(self, value)

    def setMoistureDiffusionCalculationMethod(self, value: 'std::string const &') -> "bool":
        return _openstudiomodelresources.RoofVegetation_setMoistureDiffusionCalculationMethod(self, value)

    def setHeightofPlants(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setHeightofPlants(self, *args)

    def resetHeightofPlants(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetHeightofPlants(self)

    def setLeafAreaIndex(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setLeafAreaIndex(self, *args)

    def resetLeafAreaIndex(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetLeafAreaIndex(self)

    def setLeafReflectivity(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setLeafReflectivity(self, *args)

    def resetLeafReflectivity(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetLeafReflectivity(self)

    def setLeafEmissivity(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setLeafEmissivity(self, *args)

    def resetLeafEmissivity(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetLeafEmissivity(self)

    def setMinimumStomatalResistance(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setMinimumStomatalResistance(self, *args)

    def resetMinimumStomatalResistance(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetMinimumStomatalResistance(self)

    def resetSoilLayerName(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetSoilLayerName(self)

    def resetRoughness(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetRoughness(self)

    def setThickness(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setThickness(self, *args)

    def resetThickness(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetThickness(self)

    def setConductivityofDrySoil(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setConductivityofDrySoil(self, *args)

    def resetConductivityofDrySoil(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetConductivityofDrySoil(self)

    def setDensityofDrySoil(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setDensityofDrySoil(self, *args)

    def resetDensityofDrySoil(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetDensityofDrySoil(self)

    def setSpecificHeatofDrySoil(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSpecificHeatofDrySoil(self, *args)

    def resetSpecificHeatofDrySoil(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetSpecificHeatofDrySoil(self)

    def setThermalAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setThermalAbsorptance(self, *args)

    def resetThermalAbsorptance(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetThermalAbsorptance(self)

    def setSolarAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSolarAbsorptance(self, *args)

    def resetSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetSolarAbsorptance(self)

    def setVisibleAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setVisibleAbsorptance(self, *args)

    def resetVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetVisibleAbsorptance(self)

    def setSaturationVolumetricMoistureContentoftheSoilLayer(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setSaturationVolumetricMoistureContentoftheSoilLayer(self, *args)

    def resetSaturationVolumetricMoistureContentoftheSoilLayer(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetSaturationVolumetricMoistureContentoftheSoilLayer(self)

    def setResidualVolumetricMoistureContentoftheSoilLayer(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setResidualVolumetricMoistureContentoftheSoilLayer(self, *args)

    def resetResidualVolumetricMoistureContentoftheSoilLayer(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetResidualVolumetricMoistureContentoftheSoilLayer(self)

    def setInitialVolumetricMoistureContentoftheSoilLayer(self, *args) -> "bool":
        return _openstudiomodelresources.RoofVegetation_setInitialVolumetricMoistureContentoftheSoilLayer(self, *args)

    def resetInitialVolumetricMoistureContentoftheSoilLayer(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetInitialVolumetricMoistureContentoftheSoilLayer(self)

    def resetMoistureDiffusionCalculationMethod(self) -> "void":
        return _openstudiomodelresources.RoofVegetation_resetMoistureDiffusionCalculationMethod(self)
RoofVegetation_swigregister = _openstudiomodelresources.RoofVegetation_swigregister
RoofVegetation_swigregister(RoofVegetation)

def RoofVegetation_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.RoofVegetation_iddObjectType()
RoofVegetation_iddObjectType = _openstudiomodelresources.RoofVegetation_iddObjectType

def RoofVegetation_roughnessValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.RoofVegetation_roughnessValues()
RoofVegetation_roughnessValues = _openstudiomodelresources.RoofVegetation_roughnessValues

def RoofVegetation_moistureDiffusionCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethodValues()
RoofVegetation_moistureDiffusionCalculationMethodValues = _openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethodValues


def toRoofVegetation(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RoofVegetation >":
    return _openstudiomodelresources.toRoofVegetation(idfObject)
toRoofVegetation = _openstudiomodelresources.toRoofVegetation

def getRoofVegetation(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RoofVegetation >":
    return _openstudiomodelresources.getRoofVegetation(t_model, t_handle)
getRoofVegetation = _openstudiomodelresources.getRoofVegetation

def getRoofVegetations(t_model: 'Model') -> "std::vector< openstudio::model::RoofVegetation,std::allocator< openstudio::model::RoofVegetation > >":
    return _openstudiomodelresources.getRoofVegetations(t_model)
getRoofVegetations = _openstudiomodelresources.getRoofVegetations

def getRoofVegetationByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RoofVegetation >":
    return _openstudiomodelresources.getRoofVegetationByName(t_model, t_name)
getRoofVegetationByName = _openstudiomodelresources.getRoofVegetationByName

def getRoofVegetationsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RoofVegetation,std::allocator< openstudio::model::RoofVegetation > >":
    return _openstudiomodelresources.getRoofVegetationsByName(t_model, t_name, t_exactMatch)
getRoofVegetationsByName = _openstudiomodelresources.getRoofVegetationsByName
class Screen(ShadingMaterial):
    __swig_setmethods__ = {}
    for _s in [ShadingMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Screen, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Screen, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', diffuseSolarReflectance: 'double'=0.08, diffuseVisibleReflectance: 'double'=0.08, screenMaterialSpacing: 'double'=0.00157, screenMaterialDiameter: 'double'=0.000381):
        this = _openstudiomodelresources.new_Screen(model, diffuseSolarReflectance, diffuseVisibleReflectance, screenMaterialSpacing, screenMaterialDiameter)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_Screen
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.Screen_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.Screen_iddObjectType)
    __swig_getmethods__["reflectedBeamTransmittanceAccountingMethodValues"] = lambda x: _openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethodValues
    if _newclass:
        reflectedBeamTransmittanceAccountingMethodValues = staticmethod(_openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethodValues)
    __swig_getmethods__["angleofResolutionforScreenTransmittanceOutputMapValues"] = lambda x: _openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMapValues
    if _newclass:
        angleofResolutionforScreenTransmittanceOutputMapValues = staticmethod(_openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMapValues)

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.Screen_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.Screen_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.Screen_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.Screen_thermalResistance(self)

    def reflectedBeamTransmittanceAccountingMethod(self) -> "std::string":
        return _openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethod(self)

    def isReflectedBeamTransmittanceAccountingMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isReflectedBeamTransmittanceAccountingMethodDefaulted(self)

    def diffuseSolarReflectance(self) -> "double":
        return _openstudiomodelresources.Screen_diffuseSolarReflectance(self)

    def getDiffuseSolarReflectance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getDiffuseSolarReflectance(self, returnIP)

    def diffuseVisibleReflectance(self) -> "double":
        return _openstudiomodelresources.Screen_diffuseVisibleReflectance(self)

    def getDiffuseVisibleReflectance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getDiffuseVisibleReflectance(self, returnIP)

    def thermalHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.Screen_thermalHemisphericalEmissivity(self)

    def getThermalHemisphericalEmissivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getThermalHemisphericalEmissivity(self, returnIP)

    def isThermalHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isThermalHemisphericalEmissivityDefaulted(self)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.Screen_conductivity(self)

    def getConductivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getConductivity(self, returnIP)

    def isConductivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isConductivityDefaulted(self)

    def screenMaterialSpacing(self) -> "double":
        return _openstudiomodelresources.Screen_screenMaterialSpacing(self)

    def getScreenMaterialSpacing(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getScreenMaterialSpacing(self, returnIP)

    def screenMaterialDiameter(self) -> "double":
        return _openstudiomodelresources.Screen_screenMaterialDiameter(self)

    def getScreenMaterialDiameter(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getScreenMaterialDiameter(self, returnIP)

    def screentoGlassDistance(self) -> "double":
        return _openstudiomodelresources.Screen_screentoGlassDistance(self)

    def getScreentoGlassDistance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getScreentoGlassDistance(self, returnIP)

    def isScreentoGlassDistanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isScreentoGlassDistanceDefaulted(self)

    def topOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Screen_topOpeningMultiplier(self)

    def getTopOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getTopOpeningMultiplier(self, returnIP)

    def isTopOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isTopOpeningMultiplierDefaulted(self)

    def bottomOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Screen_bottomOpeningMultiplier(self)

    def getBottomOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getBottomOpeningMultiplier(self, returnIP)

    def isBottomOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isBottomOpeningMultiplierDefaulted(self)

    def leftSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Screen_leftSideOpeningMultiplier(self)

    def getLeftSideOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getLeftSideOpeningMultiplier(self, returnIP)

    def isLeftSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isLeftSideOpeningMultiplierDefaulted(self)

    def rightSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Screen_rightSideOpeningMultiplier(self)

    def getRightSideOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Screen_getRightSideOpeningMultiplier(self, returnIP)

    def isRightSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isRightSideOpeningMultiplierDefaulted(self)

    def angleofResolutionforScreenTransmittanceOutputMap(self) -> "std::string":
        return _openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMap(self)

    def isAngleofResolutionforScreenTransmittanceOutputMapDefaulted(self) -> "bool":
        return _openstudiomodelresources.Screen_isAngleofResolutionforScreenTransmittanceOutputMapDefaulted(self)

    def setThermalConductivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.Screen_setThermalConductivity(self, value)

    def setThermalResistivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.Screen_setThermalResistivity(self, value)

    def setReflectedBeamTransmittanceAccountingMethod(self, reflectedBeamTransmittanceAccountingMethod: 'std::string') -> "bool":
        return _openstudiomodelresources.Screen_setReflectedBeamTransmittanceAccountingMethod(self, reflectedBeamTransmittanceAccountingMethod)

    def resetReflectedBeamTransmittanceAccountingMethod(self) -> "void":
        return _openstudiomodelresources.Screen_resetReflectedBeamTransmittanceAccountingMethod(self)

    def setDiffuseSolarReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setDiffuseSolarReflectance(self, *args)

    def setDiffuseVisibleReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setDiffuseVisibleReflectance(self, *args)

    def setThermalHemisphericalEmissivity(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setThermalHemisphericalEmissivity(self, *args)

    def resetThermalHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.Screen_resetThermalHemisphericalEmissivity(self)

    def setConductivity(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setConductivity(self, *args)

    def resetConductivity(self) -> "void":
        return _openstudiomodelresources.Screen_resetConductivity(self)

    def setScreenMaterialSpacing(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setScreenMaterialSpacing(self, *args)

    def setScreenMaterialDiameter(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setScreenMaterialDiameter(self, *args)

    def setScreentoGlassDistance(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setScreentoGlassDistance(self, *args)

    def resetScreentoGlassDistance(self) -> "void":
        return _openstudiomodelresources.Screen_resetScreentoGlassDistance(self)

    def setTopOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setTopOpeningMultiplier(self, *args)

    def resetTopOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Screen_resetTopOpeningMultiplier(self)

    def setBottomOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setBottomOpeningMultiplier(self, *args)

    def resetBottomOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Screen_resetBottomOpeningMultiplier(self)

    def setLeftSideOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setLeftSideOpeningMultiplier(self, *args)

    def resetLeftSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Screen_resetLeftSideOpeningMultiplier(self)

    def setRightSideOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Screen_setRightSideOpeningMultiplier(self, *args)

    def resetRightSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Screen_resetRightSideOpeningMultiplier(self)

    def setAngleofResolutionforScreenTransmittanceOutputMap(self, angleofResolutionforScreenTransmittanceOutputMap: 'std::string') -> "bool":
        return _openstudiomodelresources.Screen_setAngleofResolutionforScreenTransmittanceOutputMap(self, angleofResolutionforScreenTransmittanceOutputMap)

    def resetAngleofResolutionforScreenTransmittanceOutputMap(self) -> "void":
        return _openstudiomodelresources.Screen_resetAngleofResolutionforScreenTransmittanceOutputMap(self)
Screen_swigregister = _openstudiomodelresources.Screen_swigregister
Screen_swigregister(Screen)

def Screen_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Screen_iddObjectType()
Screen_iddObjectType = _openstudiomodelresources.Screen_iddObjectType

def Screen_reflectedBeamTransmittanceAccountingMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethodValues()
Screen_reflectedBeamTransmittanceAccountingMethodValues = _openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethodValues

def Screen_angleofResolutionforScreenTransmittanceOutputMapValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMapValues()
Screen_angleofResolutionforScreenTransmittanceOutputMapValues = _openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMapValues


def toScreen(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Screen >":
    return _openstudiomodelresources.toScreen(idfObject)
toScreen = _openstudiomodelresources.toScreen

def getScreen(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Screen >":
    return _openstudiomodelresources.getScreen(t_model, t_handle)
getScreen = _openstudiomodelresources.getScreen

def getScreens(t_model: 'Model') -> "std::vector< openstudio::model::Screen,std::allocator< openstudio::model::Screen > >":
    return _openstudiomodelresources.getScreens(t_model)
getScreens = _openstudiomodelresources.getScreens

def getScreenByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Screen >":
    return _openstudiomodelresources.getScreenByName(t_model, t_name)
getScreenByName = _openstudiomodelresources.getScreenByName

def getScreensByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Screen,std::allocator< openstudio::model::Screen > >":
    return _openstudiomodelresources.getScreensByName(t_model, t_name, t_exactMatch)
getScreensByName = _openstudiomodelresources.getScreensByName
class Shade(ShadingMaterial):
    __swig_setmethods__ = {}
    for _s in [ShadingMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shade, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Shade, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', solarTransmittance: 'double'=0.4, solarReflectance: 'double'=0.5, visibleTransmittance: 'double'=0.4, visibleReflectance: 'double'=0.5, thermalHemisphericalEmissivity: 'double'=0.9, thermalTransmittance: 'double'=0.0, thickness: 'double'=0.005, conductivity: 'double'=0.1):
        this = _openstudiomodelresources.new_Shade(model, solarTransmittance, solarReflectance, visibleTransmittance, visibleReflectance, thermalHemisphericalEmissivity, thermalTransmittance, thickness, conductivity)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_Shade
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.Shade_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.Shade_iddObjectType)

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.Shade_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.Shade_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.Shade_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.Shade_thermalResistance(self)

    def solarTransmittance(self) -> "double":
        return _openstudiomodelresources.Shade_solarTransmittance(self)

    def getSolarTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getSolarTransmittance(self, returnIP)

    def solarReflectance(self) -> "double":
        return _openstudiomodelresources.Shade_solarReflectance(self)

    def getSolarReflectance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getSolarReflectance(self, returnIP)

    def visibleTransmittance(self) -> "double":
        return _openstudiomodelresources.Shade_visibleTransmittance(self)

    def getVisibleTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getVisibleTransmittance(self, returnIP)

    def visibleReflectance(self) -> "double":
        return _openstudiomodelresources.Shade_visibleReflectance(self)

    def getVisibleReflectance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getVisibleReflectance(self, returnIP)

    def thermalHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.Shade_thermalHemisphericalEmissivity(self)

    def getThermalHemisphericalEmissivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getThermalHemisphericalEmissivity(self, returnIP)

    def thermalTransmittance(self) -> "double":
        return _openstudiomodelresources.Shade_thermalTransmittance(self)

    def solarAbsorptance(self) -> "double":
        return _openstudiomodelresources.Shade_solarAbsorptance(self)

    def visibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.Shade_visibleAbsorptance(self)

    def getThermalTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getThermalTransmittance(self, returnIP)

    def thickness(self) -> "double":
        return _openstudiomodelresources.Shade_thickness(self)

    def getThickness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getThickness(self, returnIP)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.Shade_conductivity(self)

    def getConductivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getConductivity(self, returnIP)

    def shadetoGlassDistance(self) -> "double":
        return _openstudiomodelresources.Shade_shadetoGlassDistance(self)

    def getShadetoGlassDistance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getShadetoGlassDistance(self, returnIP)

    def isShadetoGlassDistanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isShadetoGlassDistanceDefaulted(self)

    def topOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Shade_topOpeningMultiplier(self)

    def getTopOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getTopOpeningMultiplier(self, returnIP)

    def isTopOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isTopOpeningMultiplierDefaulted(self)

    def bottomOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Shade_bottomOpeningMultiplier(self)

    def getBottomOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getBottomOpeningMultiplier(self, returnIP)

    def isBottomOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isBottomOpeningMultiplierDefaulted(self)

    def leftSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Shade_leftSideOpeningMultiplier(self)

    def getLeftSideOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getLeftSideOpeningMultiplier(self, returnIP)

    def isLeftSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isLeftSideOpeningMultiplierDefaulted(self)

    def rightSideOpeningMultiplier(self) -> "double":
        return _openstudiomodelresources.Shade_rightSideOpeningMultiplier(self)

    def getRightSideOpeningMultiplier(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getRightSideOpeningMultiplier(self, returnIP)

    def isRightSideOpeningMultiplierDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isRightSideOpeningMultiplierDefaulted(self)

    def airflowPermeability(self) -> "double":
        return _openstudiomodelresources.Shade_airflowPermeability(self)

    def getAirflowPermeability(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.Shade_getAirflowPermeability(self, returnIP)

    def isAirflowPermeabilityDefaulted(self) -> "bool":
        return _openstudiomodelresources.Shade_isAirflowPermeabilityDefaulted(self)

    def setThermalConductivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.Shade_setThermalConductivity(self, value)

    def setThermalConductance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.Shade_setThermalConductance(self, value)

    def setThermalResistivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.Shade_setThermalResistivity(self, value)

    def setThermalResistance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.Shade_setThermalResistance(self, value)

    def setSolarTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setSolarTransmittance(self, *args)

    def setSolarReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setSolarReflectance(self, *args)

    def setVisibleTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setVisibleTransmittance(self, *args)

    def setVisibleReflectance(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setVisibleReflectance(self, *args)

    def setThermalHemisphericalEmissivity(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setThermalHemisphericalEmissivity(self, *args)

    def setThermalTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setThermalTransmittance(self, *args)

    def setThickness(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setThickness(self, *args)

    def setConductivity(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setConductivity(self, *args)

    def setShadetoGlassDistance(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setShadetoGlassDistance(self, *args)

    def resetShadetoGlassDistance(self) -> "void":
        return _openstudiomodelresources.Shade_resetShadetoGlassDistance(self)

    def setTopOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setTopOpeningMultiplier(self, *args)

    def resetTopOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Shade_resetTopOpeningMultiplier(self)

    def setBottomOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setBottomOpeningMultiplier(self, *args)

    def resetBottomOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Shade_resetBottomOpeningMultiplier(self)

    def setLeftSideOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setLeftSideOpeningMultiplier(self, *args)

    def resetLeftSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Shade_resetLeftSideOpeningMultiplier(self)

    def setRightSideOpeningMultiplier(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setRightSideOpeningMultiplier(self, *args)

    def resetRightSideOpeningMultiplier(self) -> "void":
        return _openstudiomodelresources.Shade_resetRightSideOpeningMultiplier(self)

    def setAirflowPermeability(self, *args) -> "bool":
        return _openstudiomodelresources.Shade_setAirflowPermeability(self, *args)

    def resetAirflowPermeability(self) -> "void":
        return _openstudiomodelresources.Shade_resetAirflowPermeability(self)
Shade_swigregister = _openstudiomodelresources.Shade_swigregister
Shade_swigregister(Shade)

def Shade_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Shade_iddObjectType()
Shade_iddObjectType = _openstudiomodelresources.Shade_iddObjectType


def toShade(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Shade >":
    return _openstudiomodelresources.toShade(idfObject)
toShade = _openstudiomodelresources.toShade

def getShade(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Shade >":
    return _openstudiomodelresources.getShade(t_model, t_handle)
getShade = _openstudiomodelresources.getShade

def getShades(t_model: 'Model') -> "std::vector< openstudio::model::Shade,std::allocator< openstudio::model::Shade > >":
    return _openstudiomodelresources.getShades(t_model)
getShades = _openstudiomodelresources.getShades

def getShadeByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Shade >":
    return _openstudiomodelresources.getShadeByName(t_model, t_name)
getShadeByName = _openstudiomodelresources.getShadeByName

def getShadesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Shade,std::allocator< openstudio::model::Shade > >":
    return _openstudiomodelresources.getShadesByName(t_model, t_name, t_exactMatch)
getShadesByName = _openstudiomodelresources.getShadesByName
class SimpleGlazing(Glazing):
    __swig_setmethods__ = {}
    for _s in [Glazing]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleGlazing, name, value)
    __swig_getmethods__ = {}
    for _s in [Glazing]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleGlazing, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', uFactor: 'double'=0.1, solarHeatGainCoefficient: 'double'=0.1):
        this = _openstudiomodelresources.new_SimpleGlazing(model, uFactor, solarHeatGainCoefficient)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_SimpleGlazing
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.SimpleGlazing_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.SimpleGlazing_iddObjectType)

    def uFactor(self) -> "double":
        return _openstudiomodelresources.SimpleGlazing_uFactor(self)

    def getUFactor(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.SimpleGlazing_getUFactor(self, returnIP)

    def solarHeatGainCoefficient(self) -> "double":
        return _openstudiomodelresources.SimpleGlazing_solarHeatGainCoefficient(self)

    def getSolarHeatGainCoefficient(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.SimpleGlazing_getSolarHeatGainCoefficient(self, returnIP)

    def visibleTransmittance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.SimpleGlazing_visibleTransmittance(self)

    def getVisibleTransmittance(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.SimpleGlazing_getVisibleTransmittance(self, returnIP)

    def setUFactor(self, *args) -> "bool":
        return _openstudiomodelresources.SimpleGlazing_setUFactor(self, *args)

    def setSolarHeatGainCoefficient(self, *args) -> "bool":
        return _openstudiomodelresources.SimpleGlazing_setSolarHeatGainCoefficient(self, *args)

    def setVisibleTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.SimpleGlazing_setVisibleTransmittance(self, *args)

    def resetVisibleTransmittance(self) -> "void":
        return _openstudiomodelresources.SimpleGlazing_resetVisibleTransmittance(self)
SimpleGlazing_swigregister = _openstudiomodelresources.SimpleGlazing_swigregister
SimpleGlazing_swigregister(SimpleGlazing)

def SimpleGlazing_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.SimpleGlazing_iddObjectType()
SimpleGlazing_iddObjectType = _openstudiomodelresources.SimpleGlazing_iddObjectType


def toSimpleGlazing(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SimpleGlazing >":
    return _openstudiomodelresources.toSimpleGlazing(idfObject)
toSimpleGlazing = _openstudiomodelresources.toSimpleGlazing

def getSimpleGlazing(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SimpleGlazing >":
    return _openstudiomodelresources.getSimpleGlazing(t_model, t_handle)
getSimpleGlazing = _openstudiomodelresources.getSimpleGlazing

def getSimpleGlazings(t_model: 'Model') -> "std::vector< openstudio::model::SimpleGlazing,std::allocator< openstudio::model::SimpleGlazing > >":
    return _openstudiomodelresources.getSimpleGlazings(t_model)
getSimpleGlazings = _openstudiomodelresources.getSimpleGlazings

def getSimpleGlazingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SimpleGlazing >":
    return _openstudiomodelresources.getSimpleGlazingByName(t_model, t_name)
getSimpleGlazingByName = _openstudiomodelresources.getSimpleGlazingByName

def getSimpleGlazingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SimpleGlazing,std::allocator< openstudio::model::SimpleGlazing > >":
    return _openstudiomodelresources.getSimpleGlazingsByName(t_model, t_name, t_exactMatch)
getSimpleGlazingsByName = _openstudiomodelresources.getSimpleGlazingsByName
class StandardGlazing(Glazing):
    __swig_setmethods__ = {}
    for _s in [Glazing]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardGlazing, name, value)
    __swig_getmethods__ = {}
    for _s in [Glazing]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardGlazing, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_StandardGlazing(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_StandardGlazing
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.StandardGlazing_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.StandardGlazing_iddObjectType)
    __swig_getmethods__["opticalDataTypeValues"] = lambda x: _openstudiomodelresources.StandardGlazing_opticalDataTypeValues
    if _newclass:
        opticalDataTypeValues = staticmethod(_openstudiomodelresources.StandardGlazing_opticalDataTypeValues)

    def opticalDataType(self) -> "std::string":
        return _openstudiomodelresources.StandardGlazing_opticalDataType(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thickness(self)

    def windowGlassSpectralDataSetName(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardGlazing_windowGlassSpectralDataSetName(self)

    def windowGlassSpectralDataSet(self) -> "boost::optional< openstudio::model::MaterialPropertyGlazingSpectralData >":
        return _openstudiomodelresources.StandardGlazing_windowGlassSpectralDataSet(self)

    def solarTransmittance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_solarTransmittance(self)

    def getThickness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardGlazing_getThickness(self, returnIP)

    def solarTransmittanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_solarTransmittanceatNormalIncidence(self)

    def getSolarTransmittanceatNormalIncidence(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.StandardGlazing_getSolarTransmittanceatNormalIncidence(self, returnIP)

    def frontSideSolarReflectanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_frontSideSolarReflectanceatNormalIncidence(self)

    def getFrontSideSolarReflectanceatNormalIncidence(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.StandardGlazing_getFrontSideSolarReflectanceatNormalIncidence(self, returnIP)

    def backSideSolarReflectanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_backSideSolarReflectanceatNormalIncidence(self)

    def getBackSideSolarReflectanceatNormalIncidence(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.StandardGlazing_getBackSideSolarReflectanceatNormalIncidence(self, returnIP)

    def visibleTransmittanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_visibleTransmittanceatNormalIncidence(self)

    def getVisibleTransmittanceatNormalIncidence(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.StandardGlazing_getVisibleTransmittanceatNormalIncidence(self, returnIP)

    def frontSideVisibleReflectanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_frontSideVisibleReflectanceatNormalIncidence(self)

    def getFrontSideVisibleReflectanceatNormalIncidence(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.StandardGlazing_getFrontSideVisibleReflectanceatNormalIncidence(self, returnIP)

    def backSideVisibleReflectanceatNormalIncidence(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardGlazing_backSideVisibleReflectanceatNormalIncidence(self)

    def infraredTransmittance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_infraredTransmittance(self)

    def getBackSideVisibleReflectanceatNormalIncidence(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.StandardGlazing_getBackSideVisibleReflectanceatNormalIncidence(self, returnIP)

    def infraredTransmittanceatNormalIncidence(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_infraredTransmittanceatNormalIncidence(self)

    def getInfraredTransmittanceatNormalIncidence(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardGlazing_getInfraredTransmittanceatNormalIncidence(self, returnIP)

    def isInfraredTransmittanceatNormalIncidenceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isInfraredTransmittanceatNormalIncidenceDefaulted(self)

    def frontSideInfraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_frontSideInfraredHemisphericalEmissivity(self)

    def getFrontSideInfraredHemisphericalEmissivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardGlazing_getFrontSideInfraredHemisphericalEmissivity(self, returnIP)

    def isFrontSideInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isFrontSideInfraredHemisphericalEmissivityDefaulted(self)

    def backSideInfraredHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_backSideInfraredHemisphericalEmissivity(self)

    def getBackSideInfraredHemisphericalEmissivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardGlazing_getBackSideInfraredHemisphericalEmissivity(self, returnIP)

    def isBackSideInfraredHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isBackSideInfraredHemisphericalEmissivityDefaulted(self)

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thermalConductivity(self)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_conductivity(self)

    def getConductivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardGlazing_getConductivity(self, returnIP)

    def isConductivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isConductivityDefaulted(self)

    def dirtCorrectionFactorforSolarandVisibleTransmittance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_dirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def getDirtCorrectionFactorforSolarandVisibleTransmittance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardGlazing_getDirtCorrectionFactorforSolarandVisibleTransmittance(self, returnIP)

    def isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self)

    def solarDiffusing(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_solarDiffusing(self)

    def isSolarDiffusingDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardGlazing_isSolarDiffusingDefaulted(self)

    def setOpticalDataType(self, opticalDataType: 'std::string') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setOpticalDataType(self, opticalDataType)

    def setWindowGlassSpectralDataSetName(self, windowGlassSpectralDataSetName: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setWindowGlassSpectralDataSetName(self, windowGlassSpectralDataSetName)

    def resetWindowGlassSpectralDataSetName(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetWindowGlassSpectralDataSetName(self)

    def setWindowGlassSpectralDataSet(self, spectralData: 'MaterialPropertyGlazingSpectralData') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setWindowGlassSpectralDataSet(self, spectralData)

    def resetWindowGlassSpectralDataSet(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetWindowGlassSpectralDataSet(self)

    def setThickness(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThickness(self, *args)

    def setSolarTransmittance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setSolarTransmittance(self, value)

    def setSolarTransmittanceatNormalIncidence(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setSolarTransmittanceatNormalIncidence(self, *args)

    def resetSolarTransmittanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetSolarTransmittanceatNormalIncidence(self)

    def setFrontSideSolarReflectanceatNormalIncidence(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setFrontSideSolarReflectanceatNormalIncidence(self, *args)

    def resetFrontSideSolarReflectanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetFrontSideSolarReflectanceatNormalIncidence(self)

    def setBackSideSolarReflectanceatNormalIncidence(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setBackSideSolarReflectanceatNormalIncidence(self, *args)

    def resetBackSideSolarReflectanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetBackSideSolarReflectanceatNormalIncidence(self)

    def setVisibleTransmittance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setVisibleTransmittance(self, value)

    def setVisibleTransmittanceatNormalIncidence(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setVisibleTransmittanceatNormalIncidence(self, *args)

    def resetVisibleTransmittanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetVisibleTransmittanceatNormalIncidence(self)

    def setFrontSideVisibleReflectanceatNormalIncidence(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setFrontSideVisibleReflectanceatNormalIncidence(self, *args)

    def resetFrontSideVisibleReflectanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetFrontSideVisibleReflectanceatNormalIncidence(self)

    def setBackSideVisibleReflectanceatNormalIncidence(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setBackSideVisibleReflectanceatNormalIncidence(self, *args)

    def resetBackSideVisibleReflectanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetBackSideVisibleReflectanceatNormalIncidence(self)

    def setInfraredTransmittance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setInfraredTransmittance(self, value)

    def setInfraredTransmittanceatNormalIncidence(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setInfraredTransmittanceatNormalIncidence(self, *args)

    def resetInfraredTransmittanceatNormalIncidence(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetInfraredTransmittanceatNormalIncidence(self)

    def setFrontSideInfraredHemisphericalEmissivity(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setFrontSideInfraredHemisphericalEmissivity(self, *args)

    def resetFrontSideInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetFrontSideInfraredHemisphericalEmissivity(self)

    def setBackSideInfraredHemisphericalEmissivity(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setBackSideInfraredHemisphericalEmissivity(self, *args)

    def resetBackSideInfraredHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetBackSideInfraredHemisphericalEmissivity(self)

    def setThermalConductivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThermalConductivity(self, value)

    def setConductivity(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setConductivity(self, *args)

    def resetConductivity(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetConductivity(self)

    def setDirtCorrectionFactorforSolarandVisibleTransmittance(self, *args) -> "bool":
        return _openstudiomodelresources.StandardGlazing_setDirtCorrectionFactorforSolarandVisibleTransmittance(self, *args)

    def resetDirtCorrectionFactorforSolarandVisibleTransmittance(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetDirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def setSolarDiffusing(self, solarDiffusing: 'bool') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setSolarDiffusing(self, solarDiffusing)

    def setSolarDiffusingNoFail(self, solarDiffusing: 'bool') -> "void":
        return _openstudiomodelresources.StandardGlazing_setSolarDiffusingNoFail(self, solarDiffusing)

    def resetSolarDiffusing(self) -> "void":
        return _openstudiomodelresources.StandardGlazing_resetSolarDiffusing(self)

    def interiorVisibleReflectance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_interiorVisibleReflectance(self)

    def exteriorVisibleReflectance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_exteriorVisibleReflectance(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.StandardGlazing_thermalResistance(self)

    def setThermalConductance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThermalConductance(self, value)

    def setThermalResistivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThermalResistivity(self, value)

    def setThermalResistance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardGlazing_setThermalResistance(self, value)
StandardGlazing_swigregister = _openstudiomodelresources.StandardGlazing_swigregister
StandardGlazing_swigregister(StandardGlazing)

def StandardGlazing_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.StandardGlazing_iddObjectType()
StandardGlazing_iddObjectType = _openstudiomodelresources.StandardGlazing_iddObjectType

def StandardGlazing_opticalDataTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardGlazing_opticalDataTypeValues()
StandardGlazing_opticalDataTypeValues = _openstudiomodelresources.StandardGlazing_opticalDataTypeValues


def toStandardGlazing(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::StandardGlazing >":
    return _openstudiomodelresources.toStandardGlazing(idfObject)
toStandardGlazing = _openstudiomodelresources.toStandardGlazing

def getStandardGlazing(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::StandardGlazing >":
    return _openstudiomodelresources.getStandardGlazing(t_model, t_handle)
getStandardGlazing = _openstudiomodelresources.getStandardGlazing

def getStandardGlazings(t_model: 'Model') -> "std::vector< openstudio::model::StandardGlazing,std::allocator< openstudio::model::StandardGlazing > >":
    return _openstudiomodelresources.getStandardGlazings(t_model)
getStandardGlazings = _openstudiomodelresources.getStandardGlazings

def getStandardGlazingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::StandardGlazing >":
    return _openstudiomodelresources.getStandardGlazingByName(t_model, t_name)
getStandardGlazingByName = _openstudiomodelresources.getStandardGlazingByName

def getStandardGlazingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::StandardGlazing,std::allocator< openstudio::model::StandardGlazing > >":
    return _openstudiomodelresources.getStandardGlazingsByName(t_model, t_name, t_exactMatch)
getStandardGlazingsByName = _openstudiomodelresources.getStandardGlazingsByName
class StandardOpaqueMaterial(OpaqueMaterial):
    __swig_setmethods__ = {}
    for _s in [OpaqueMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardOpaqueMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [OpaqueMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardOpaqueMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_StandardOpaqueMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_StandardOpaqueMaterial
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.StandardOpaqueMaterial_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.StandardOpaqueMaterial_iddObjectType)
    __swig_getmethods__["roughnessValues"] = lambda x: _openstudiomodelresources.StandardOpaqueMaterial_roughnessValues
    if _newclass:
        roughnessValues = staticmethod(_openstudiomodelresources.StandardOpaqueMaterial_roughnessValues)

    def thermalConductivity(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalConductivity(self)

    def thermalConductance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalConductance(self)

    def thermalResistivity(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalResistivity(self)

    def thermalResistance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalResistance(self)

    def thermalReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalReflectance(self)

    def solarReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardOpaqueMaterial_solarReflectance(self)

    def visibleReflectance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardOpaqueMaterial_visibleReflectance(self)

    def roughness(self) -> "std::string":
        return _openstudiomodelresources.StandardOpaqueMaterial_roughness(self)

    def thickness(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thickness(self)

    def getThickness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardOpaqueMaterial_getThickness(self, returnIP)

    def conductivity(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_conductivity(self)

    def getConductivity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardOpaqueMaterial_getConductivity(self, returnIP)

    def density(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_density(self)

    def getDensity(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardOpaqueMaterial_getDensity(self, returnIP)

    def specificHeat(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_specificHeat(self)

    def getSpecificHeat(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardOpaqueMaterial_getSpecificHeat(self, returnIP)

    def thermalAbsorptance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalAbsorptance(self)

    def getThermalAbsorptance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardOpaqueMaterial_getThermalAbsorptance(self, returnIP)

    def isThermalAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_isThermalAbsorptanceDefaulted(self)

    def solarAbsorptance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_solarAbsorptance(self)

    def getSolarAbsorptance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardOpaqueMaterial_getSolarAbsorptance(self, returnIP)

    def isSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_isSolarAbsorptanceDefaulted(self)

    def visibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.StandardOpaqueMaterial_visibleAbsorptance(self)

    def getVisibleAbsorptance(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.StandardOpaqueMaterial_getVisibleAbsorptance(self, returnIP)

    def isVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_isVisibleAbsorptanceDefaulted(self)

    def setThermalConductivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalConductivity(self, value)

    def setThermalConductance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalConductance(self, value)

    def setThermalResistivity(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalResistivity(self, value)

    def setThermalResistance(self, value: 'double') -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalResistance(self, value)

    def setThermalReflectance(self, value: 'OptionalDouble') -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalReflectance(self, value)

    def setSolarReflectance(self, value: 'OptionalDouble') -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setSolarReflectance(self, value)

    def setVisibleReflectance(self, value: 'OptionalDouble') -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setVisibleReflectance(self, value)

    def setRoughness(self, roughness: 'std::string') -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setRoughness(self, roughness)

    def setThickness(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThickness(self, *args)

    def setConductivity(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setConductivity(self, *args)

    def setDensity(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setDensity(self, *args)

    def setSpecificHeat(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setSpecificHeat(self, *args)

    def setThermalAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalAbsorptance(self, *args)

    def resetThermalAbsorptance(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterial_resetThermalAbsorptance(self)

    def setSolarAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setSolarAbsorptance(self, *args)

    def resetSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterial_resetSolarAbsorptance(self)

    def setVisibleAbsorptance(self, *args) -> "bool":
        return _openstudiomodelresources.StandardOpaqueMaterial_setVisibleAbsorptance(self, *args)

    def resetVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.StandardOpaqueMaterial_resetVisibleAbsorptance(self)

    def heatCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelresources.StandardOpaqueMaterial_heatCapacity(self)
StandardOpaqueMaterial_swigregister = _openstudiomodelresources.StandardOpaqueMaterial_swigregister
StandardOpaqueMaterial_swigregister(StandardOpaqueMaterial)

def StandardOpaqueMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.StandardOpaqueMaterial_iddObjectType()
StandardOpaqueMaterial_iddObjectType = _openstudiomodelresources.StandardOpaqueMaterial_iddObjectType

def StandardOpaqueMaterial_roughnessValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardOpaqueMaterial_roughnessValues()
StandardOpaqueMaterial_roughnessValues = _openstudiomodelresources.StandardOpaqueMaterial_roughnessValues


def toStandardOpaqueMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::StandardOpaqueMaterial >":
    return _openstudiomodelresources.toStandardOpaqueMaterial(idfObject)
toStandardOpaqueMaterial = _openstudiomodelresources.toStandardOpaqueMaterial

def getStandardOpaqueMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::StandardOpaqueMaterial >":
    return _openstudiomodelresources.getStandardOpaqueMaterial(t_model, t_handle)
getStandardOpaqueMaterial = _openstudiomodelresources.getStandardOpaqueMaterial

def getStandardOpaqueMaterials(t_model: 'Model') -> "std::vector< openstudio::model::StandardOpaqueMaterial,std::allocator< openstudio::model::StandardOpaqueMaterial > >":
    return _openstudiomodelresources.getStandardOpaqueMaterials(t_model)
getStandardOpaqueMaterials = _openstudiomodelresources.getStandardOpaqueMaterials

def getStandardOpaqueMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::StandardOpaqueMaterial >":
    return _openstudiomodelresources.getStandardOpaqueMaterialByName(t_model, t_name)
getStandardOpaqueMaterialByName = _openstudiomodelresources.getStandardOpaqueMaterialByName

def getStandardOpaqueMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::StandardOpaqueMaterial,std::allocator< openstudio::model::StandardOpaqueMaterial > >":
    return _openstudiomodelresources.getStandardOpaqueMaterialsByName(t_model, t_name, t_exactMatch)
getStandardOpaqueMaterialsByName = _openstudiomodelresources.getStandardOpaqueMaterialsByName
class ThermochromicGlazing(Glazing):
    __swig_setmethods__ = {}
    for _s in [Glazing]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermochromicGlazing, name, value)
    __swig_getmethods__ = {}
    for _s in [Glazing]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThermochromicGlazing, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', opticalDataTemperature: 'double'=80.0):
        this = _openstudiomodelresources.new_ThermochromicGlazing(model, opticalDataTemperature)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ThermochromicGlazing
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ThermochromicGlazing_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ThermochromicGlazing_iddObjectType)

    def opticalDataTemperature(self) -> "double":
        return _openstudiomodelresources.ThermochromicGlazing_opticalDataTemperature(self)

    def setOpticalDataTemperature(self, value: 'double') -> "bool":
        return _openstudiomodelresources.ThermochromicGlazing_setOpticalDataTemperature(self, value)
ThermochromicGlazing_swigregister = _openstudiomodelresources.ThermochromicGlazing_swigregister
ThermochromicGlazing_swigregister(ThermochromicGlazing)

def ThermochromicGlazing_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ThermochromicGlazing_iddObjectType()
ThermochromicGlazing_iddObjectType = _openstudiomodelresources.ThermochromicGlazing_iddObjectType


def toThermochromicGlazing(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ThermochromicGlazing >":
    return _openstudiomodelresources.toThermochromicGlazing(idfObject)
toThermochromicGlazing = _openstudiomodelresources.toThermochromicGlazing

def getThermochromicGlazing(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ThermochromicGlazing >":
    return _openstudiomodelresources.getThermochromicGlazing(t_model, t_handle)
getThermochromicGlazing = _openstudiomodelresources.getThermochromicGlazing

def getThermochromicGlazings(t_model: 'Model') -> "std::vector< openstudio::model::ThermochromicGlazing,std::allocator< openstudio::model::ThermochromicGlazing > >":
    return _openstudiomodelresources.getThermochromicGlazings(t_model)
getThermochromicGlazings = _openstudiomodelresources.getThermochromicGlazings

def getThermochromicGlazingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ThermochromicGlazing >":
    return _openstudiomodelresources.getThermochromicGlazingByName(t_model, t_name)
getThermochromicGlazingByName = _openstudiomodelresources.getThermochromicGlazingByName

def getThermochromicGlazingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ThermochromicGlazing,std::allocator< openstudio::model::ThermochromicGlazing > >":
    return _openstudiomodelresources.getThermochromicGlazingsByName(t_model, t_name, t_exactMatch)
getThermochromicGlazingsByName = _openstudiomodelresources.getThermochromicGlazingsByName
class StandardsInformationMaterial(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardsInformationMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardsInformationMaterial, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationMaterial
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.StandardsInformationMaterial_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.StandardsInformationMaterial_iddObjectType)

    def material(self) -> "openstudio::model::Material":
        return _openstudiomodelresources.StandardsInformationMaterial_material(self)

    def materialStandard(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_materialStandard(self)

    def suggestedMaterialStandards(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedMaterialStandards(self)

    def materialStandardSource(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_materialStandardSource(self)

    def suggestedMaterialStandardSources(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedMaterialStandardSources(self)

    def standardsCategory(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_standardsCategory(self)

    def suggestedStandardsCategories(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedStandardsCategories(self)

    def isCompositeMaterial(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_isCompositeMaterial(self)

    def standardsIdentifier(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_standardsIdentifier(self)

    def suggestedStandardsIdentifiers(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedStandardsIdentifiers(self)

    def compositeFramingMaterial(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingMaterial(self)

    def suggestedCompositeFramingMaterials(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingMaterials(self)

    def compositeFramingConfiguration(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingConfiguration(self)

    def suggestedCompositeFramingConfigurations(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingConfigurations(self)

    def compositeFramingDepth(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingDepth(self)

    def suggestedCompositeFramingDepths(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingDepths(self)

    def compositeFramingSize(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingSize(self)

    def suggestedCompositeFramingSizes(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingSizes(self)

    def compositeCavityInsulation(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationMaterial_compositeCavityInsulation(self)

    def suggestedCompositeCavityInsulations(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeCavityInsulations(self)

    def setMaterialStandard(self, materialStandard: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setMaterialStandard(self, materialStandard)

    def resetMaterialStandard(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetMaterialStandard(self)

    def setMaterialStandardSource(self, materialStandardSource: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setMaterialStandardSource(self, materialStandardSource)

    def resetMaterialStandardSource(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetMaterialStandardSource(self)

    def setStandardsCategory(self, standardsCategory: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setStandardsCategory(self, standardsCategory)

    def resetStandardsCategory(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetStandardsCategory(self)

    def setStandardsIdentifier(self, standardsIdentifier: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setStandardsIdentifier(self, standardsIdentifier)

    def resetStandardsIdentifier(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetStandardsIdentifier(self)

    def setCompositeFramingMaterial(self, compositeFramingMaterial: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingMaterial(self, compositeFramingMaterial)

    def resetCompositeFramingMaterial(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingMaterial(self)

    def setCompositeFramingConfiguration(self, compositeFramingConfiguration: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingConfiguration(self, compositeFramingConfiguration)

    def resetCompositeFramingConfiguration(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingConfiguration(self)

    def setCompositeFramingDepth(self, compositeFramingDepth: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingDepth(self, compositeFramingDepth)

    def resetCompositeFramingDepth(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingDepth(self)

    def setCompositeFramingSize(self, compositeFramingSize: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingSize(self, compositeFramingSize)

    def resetCompositeFramingSize(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingSize(self)

    def setCompositeCavityInsulation(self, compositeCavityInsulation: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeCavityInsulation(self, compositeCavityInsulation)

    def resetCompositeCavityInsulation(self) -> "void":
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeCavityInsulation(self)
StandardsInformationMaterial_swigregister = _openstudiomodelresources.StandardsInformationMaterial_swigregister
StandardsInformationMaterial_swigregister(StandardsInformationMaterial)

def StandardsInformationMaterial_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.StandardsInformationMaterial_iddObjectType()
StandardsInformationMaterial_iddObjectType = _openstudiomodelresources.StandardsInformationMaterial_iddObjectType


def toStandardsInformationMaterial(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::StandardsInformationMaterial >":
    return _openstudiomodelresources.toStandardsInformationMaterial(idfObject)
toStandardsInformationMaterial = _openstudiomodelresources.toStandardsInformationMaterial

def getStandardsInformationMaterial(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::StandardsInformationMaterial >":
    return _openstudiomodelresources.getStandardsInformationMaterial(t_model, t_handle)
getStandardsInformationMaterial = _openstudiomodelresources.getStandardsInformationMaterial

def getStandardsInformationMaterials(t_model: 'Model') -> "std::vector< openstudio::model::StandardsInformationMaterial,std::allocator< openstudio::model::StandardsInformationMaterial > >":
    return _openstudiomodelresources.getStandardsInformationMaterials(t_model)
getStandardsInformationMaterials = _openstudiomodelresources.getStandardsInformationMaterials

def getStandardsInformationMaterialByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::StandardsInformationMaterial >":
    return _openstudiomodelresources.getStandardsInformationMaterialByName(t_model, t_name)
getStandardsInformationMaterialByName = _openstudiomodelresources.getStandardsInformationMaterialByName

def getStandardsInformationMaterialsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::StandardsInformationMaterial,std::allocator< openstudio::model::StandardsInformationMaterial > >":
    return _openstudiomodelresources.getStandardsInformationMaterialsByName(t_model, t_name, t_exactMatch)
getStandardsInformationMaterialsByName = _openstudiomodelresources.getStandardsInformationMaterialsByName
class ConstructionBase(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstructionBase, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstructionBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionBase
    __del__ = lambda self: None

    def standardsInformation(self) -> "openstudio::model::StandardsInformationConstruction":
        return _openstudiomodelresources.ConstructionBase_standardsInformation(self)

    def getNetArea(self) -> "double":
        return _openstudiomodelresources.ConstructionBase_getNetArea(self)

    def setUFactor(self, *args) -> "bool":
        return _openstudiomodelresources.ConstructionBase_setUFactor(self, *args)

    def setConductance(self, *args) -> "bool":
        return _openstudiomodelresources.ConstructionBase_setConductance(self, *args)

    def isOpaque(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isOpaque(self)

    def isFenestration(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isFenestration(self)

    def isSolarDiffusing(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isSolarDiffusing(self)

    def isModelPartition(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isModelPartition(self)

    def isGreenRoof(self) -> "bool":
        return _openstudiomodelresources.ConstructionBase_isGreenRoof(self)

    def uFactor(self, *args) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_uFactor(self, *args)

    def thermalConductance(self, *args) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_thermalConductance(self, *args)

    def heatCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_heatCapacity(self)

    def interiorVisibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_interiorVisibleAbsorptance(self)

    def interiorVisibleAbsorbtance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_interiorVisibleAbsorbtance(self)

    def exteriorVisibleAbsorptance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_exteriorVisibleAbsorptance(self)

    def exteriorVisibleAbsorbtance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_exteriorVisibleAbsorbtance(self)

    def visibleTransmittance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ConstructionBase_visibleTransmittance(self)

    def renderingColor(self) -> "boost::optional< openstudio::model::RenderingColor >":
        return _openstudiomodelresources.ConstructionBase_renderingColor(self)

    def setRenderingColor(self, renderingColor: 'RenderingColor') -> "bool":
        return _openstudiomodelresources.ConstructionBase_setRenderingColor(self, renderingColor)

    def resetRenderingColor(self) -> "void":
        return _openstudiomodelresources.ConstructionBase_resetRenderingColor(self)
ConstructionBase_swigregister = _openstudiomodelresources.ConstructionBase_swigregister
ConstructionBase_swigregister(ConstructionBase)


def toConstructionBase(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ConstructionBase >":
    return _openstudiomodelresources.toConstructionBase(idfObject)
toConstructionBase = _openstudiomodelresources.toConstructionBase

def getConstructionBase(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ConstructionBase >":
    return _openstudiomodelresources.getConstructionBase(t_model, t_handle)
getConstructionBase = _openstudiomodelresources.getConstructionBase

def getConstructionBases(t_model: 'Model') -> "std::vector< openstudio::model::ConstructionBase,std::allocator< openstudio::model::ConstructionBase > >":
    return _openstudiomodelresources.getConstructionBases(t_model)
getConstructionBases = _openstudiomodelresources.getConstructionBases

def getConstructionBaseByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ConstructionBase >":
    return _openstudiomodelresources.getConstructionBaseByName(t_model, t_name)
getConstructionBaseByName = _openstudiomodelresources.getConstructionBaseByName

def getConstructionBasesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ConstructionBase,std::allocator< openstudio::model::ConstructionBase > >":
    return _openstudiomodelresources.getConstructionBasesByName(t_model, t_name, t_exactMatch)
getConstructionBasesByName = _openstudiomodelresources.getConstructionBasesByName
class LayeredConstruction(ConstructionBase):
    __swig_setmethods__ = {}
    for _s in [ConstructionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayeredConstruction, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstructionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayeredConstruction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_LayeredConstruction
    __del__ = lambda self: None
    __swig_getmethods__["layersAreValid"] = lambda x: _openstudiomodelresources.LayeredConstruction_layersAreValid
    if _newclass:
        layersAreValid = staticmethod(_openstudiomodelresources.LayeredConstruction_layersAreValid)

    def layers(self) -> "std::vector< openstudio::model::Material,std::allocator< openstudio::model::Material > >":
        return _openstudiomodelresources.LayeredConstruction_layers(self)

    def getLayer(self, layerIndex: 'unsigned int') -> "openstudio::model::Material":
        return _openstudiomodelresources.LayeredConstruction_getLayer(self, layerIndex)

    def eraseLayer(self, layerIndex: 'unsigned int') -> "bool":
        return _openstudiomodelresources.LayeredConstruction_eraseLayer(self, layerIndex)

    def insertLayer(self, layerIndex: 'unsigned int', material: 'Material') -> "bool":
        return _openstudiomodelresources.LayeredConstruction_insertLayer(self, layerIndex, material)

    def setLayers(self, materials: 'MaterialVector') -> "bool":
        return _openstudiomodelresources.LayeredConstruction_setLayers(self, materials)

    def setLayer(self, *args) -> "bool":
        return _openstudiomodelresources.LayeredConstruction_setLayer(self, *args)

    def isSymmetric(self) -> "bool":
        return _openstudiomodelresources.LayeredConstruction_isSymmetric(self)

    def equalLayers(self, other: 'LayeredConstruction') -> "bool":
        return _openstudiomodelresources.LayeredConstruction_equalLayers(self, other)

    def reverseEqualLayers(self, other: 'LayeredConstruction') -> "bool":
        return _openstudiomodelresources.LayeredConstruction_reverseEqualLayers(self, other)

    def nullLayers(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _openstudiomodelresources.LayeredConstruction_nullLayers(self)

    def numLayers(self) -> "unsigned int":
        return _openstudiomodelresources.LayeredConstruction_numLayers(self)

    def getLayerIndices(self, material: 'Material') -> "std::vector< unsigned int,std::allocator< unsigned int > >":
        return _openstudiomodelresources.LayeredConstruction_getLayerIndices(self, material)

    def insulation(self) -> "boost::optional< openstudio::model::OpaqueMaterial >":
        return _openstudiomodelresources.LayeredConstruction_insulation(self)

    def setInsulation(self, insulationLayer: 'OpaqueMaterial') -> "bool":
        return _openstudiomodelresources.LayeredConstruction_setInsulation(self, insulationLayer)

    def resetInsulation(self) -> "void":
        return _openstudiomodelresources.LayeredConstruction_resetInsulation(self)

    def ensureUniqueLayers(self) -> "void":
        return _openstudiomodelresources.LayeredConstruction_ensureUniqueLayers(self)
LayeredConstruction_swigregister = _openstudiomodelresources.LayeredConstruction_swigregister
LayeredConstruction_swigregister(LayeredConstruction)

def LayeredConstruction_layersAreValid(*args) -> "bool":
    return _openstudiomodelresources.LayeredConstruction_layersAreValid(*args)
LayeredConstruction_layersAreValid = _openstudiomodelresources.LayeredConstruction_layersAreValid


def toLayeredConstruction(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::LayeredConstruction >":
    return _openstudiomodelresources.toLayeredConstruction(idfObject)
toLayeredConstruction = _openstudiomodelresources.toLayeredConstruction

def getLayeredConstruction(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::LayeredConstruction >":
    return _openstudiomodelresources.getLayeredConstruction(t_model, t_handle)
getLayeredConstruction = _openstudiomodelresources.getLayeredConstruction

def getLayeredConstructions(t_model: 'Model') -> "std::vector< openstudio::model::LayeredConstruction,std::allocator< openstudio::model::LayeredConstruction > >":
    return _openstudiomodelresources.getLayeredConstructions(t_model)
getLayeredConstructions = _openstudiomodelresources.getLayeredConstructions

def getLayeredConstructionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::LayeredConstruction >":
    return _openstudiomodelresources.getLayeredConstructionByName(t_model, t_name)
getLayeredConstructionByName = _openstudiomodelresources.getLayeredConstructionByName

def getLayeredConstructionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::LayeredConstruction,std::allocator< openstudio::model::LayeredConstruction > >":
    return _openstudiomodelresources.getLayeredConstructionsByName(t_model, t_name, t_exactMatch)
getLayeredConstructionsByName = _openstudiomodelresources.getLayeredConstructionsByName
class Construction(LayeredConstruction):
    __swig_setmethods__ = {}
    for _s in [LayeredConstruction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Construction, name, value)
    __swig_getmethods__ = {}
    for _s in [LayeredConstruction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Construction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_Construction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_Construction
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.Construction_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.Construction_iddObjectType)

    def reverseConstruction(self) -> "openstudio::model::Construction":
        return _openstudiomodelresources.Construction_reverseConstruction(self)
Construction_swigregister = _openstudiomodelresources.Construction_swigregister
Construction_swigregister(Construction)

def Construction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.Construction_iddObjectType()
Construction_iddObjectType = _openstudiomodelresources.Construction_iddObjectType


def toConstruction(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Construction >":
    return _openstudiomodelresources.toConstruction(idfObject)
toConstruction = _openstudiomodelresources.toConstruction

def getConstruction(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Construction >":
    return _openstudiomodelresources.getConstruction(t_model, t_handle)
getConstruction = _openstudiomodelresources.getConstruction

def getConstructions(t_model: 'Model') -> "std::vector< openstudio::model::Construction,std::allocator< openstudio::model::Construction > >":
    return _openstudiomodelresources.getConstructions(t_model)
getConstructions = _openstudiomodelresources.getConstructions

def getConstructionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Construction >":
    return _openstudiomodelresources.getConstructionByName(t_model, t_name)
getConstructionByName = _openstudiomodelresources.getConstructionByName

def getConstructionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Construction,std::allocator< openstudio::model::Construction > >":
    return _openstudiomodelresources.getConstructionsByName(t_model, t_name, t_exactMatch)
getConstructionsByName = _openstudiomodelresources.getConstructionsByName
class ConstructionWithInternalSource(LayeredConstruction):
    __swig_setmethods__ = {}
    for _s in [LayeredConstruction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstructionWithInternalSource, name, value)
    __swig_getmethods__ = {}
    for _s in [LayeredConstruction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstructionWithInternalSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ConstructionWithInternalSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionWithInternalSource
    __del__ = lambda self: None

    def sourcePresentAfterLayerNumber(self) -> "int":
        return _openstudiomodelresources.ConstructionWithInternalSource_sourcePresentAfterLayerNumber(self)

    def setSourcePresentAfterLayerNumber(self, sourcePresentAfterLayerNumber: 'int') -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSource_setSourcePresentAfterLayerNumber(self, sourcePresentAfterLayerNumber)

    def temperatureCalculationRequestedAfterLayerNumber(self) -> "int":
        return _openstudiomodelresources.ConstructionWithInternalSource_temperatureCalculationRequestedAfterLayerNumber(self)

    def setTemperatureCalculationRequestedAfterLayerNumber(self, temperatureCalculationRequestedAfterLayerNumber: 'int') -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSource_setTemperatureCalculationRequestedAfterLayerNumber(self, temperatureCalculationRequestedAfterLayerNumber)

    def dimensionsForTheCTFCalculation(self) -> "int":
        return _openstudiomodelresources.ConstructionWithInternalSource_dimensionsForTheCTFCalculation(self)

    def setDimensionsForTheCTFCalculation(self, dimensionsForTheCTFCalculation: 'int') -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSource_setDimensionsForTheCTFCalculation(self, dimensionsForTheCTFCalculation)

    def tubeSpacing(self) -> "double":
        return _openstudiomodelresources.ConstructionWithInternalSource_tubeSpacing(self)

    def setTubeSpacing(self, tubeSpacing: 'double') -> "bool":
        return _openstudiomodelresources.ConstructionWithInternalSource_setTubeSpacing(self, tubeSpacing)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ConstructionWithInternalSource_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ConstructionWithInternalSource_iddObjectType)

    def reverseConstructionWithInternalSource(self) -> "openstudio::model::ConstructionWithInternalSource":
        return _openstudiomodelresources.ConstructionWithInternalSource_reverseConstructionWithInternalSource(self)
ConstructionWithInternalSource_swigregister = _openstudiomodelresources.ConstructionWithInternalSource_swigregister
ConstructionWithInternalSource_swigregister(ConstructionWithInternalSource)

def ConstructionWithInternalSource_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ConstructionWithInternalSource_iddObjectType()
ConstructionWithInternalSource_iddObjectType = _openstudiomodelresources.ConstructionWithInternalSource_iddObjectType


def toConstructionWithInternalSource(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ConstructionWithInternalSource >":
    return _openstudiomodelresources.toConstructionWithInternalSource(idfObject)
toConstructionWithInternalSource = _openstudiomodelresources.toConstructionWithInternalSource

def getConstructionWithInternalSource(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ConstructionWithInternalSource >":
    return _openstudiomodelresources.getConstructionWithInternalSource(t_model, t_handle)
getConstructionWithInternalSource = _openstudiomodelresources.getConstructionWithInternalSource

def getConstructionWithInternalSources(t_model: 'Model') -> "std::vector< openstudio::model::ConstructionWithInternalSource,std::allocator< openstudio::model::ConstructionWithInternalSource > >":
    return _openstudiomodelresources.getConstructionWithInternalSources(t_model)
getConstructionWithInternalSources = _openstudiomodelresources.getConstructionWithInternalSources

def getConstructionWithInternalSourceByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ConstructionWithInternalSource >":
    return _openstudiomodelresources.getConstructionWithInternalSourceByName(t_model, t_name)
getConstructionWithInternalSourceByName = _openstudiomodelresources.getConstructionWithInternalSourceByName

def getConstructionWithInternalSourcesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ConstructionWithInternalSource,std::allocator< openstudio::model::ConstructionWithInternalSource > >":
    return _openstudiomodelresources.getConstructionWithInternalSourcesByName(t_model, t_name, t_exactMatch)
getConstructionWithInternalSourcesByName = _openstudiomodelresources.getConstructionWithInternalSourcesByName
class CFactorUndergroundWallConstruction(ConstructionBase):
    __swig_setmethods__ = {}
    for _s in [ConstructionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFactorUndergroundWallConstruction, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstructionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFactorUndergroundWallConstruction, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', cFactor: 'double'=0.1, height: 'double'=0.1):
        this = _openstudiomodelresources.new_CFactorUndergroundWallConstruction(model, cFactor, height)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CFactorUndergroundWallConstruction
    __del__ = lambda self: None

    def cFactor(self) -> "double":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_cFactor(self)

    def getCFactor(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_getCFactor(self, returnIP)

    def setCFactor(self, *args) -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_setCFactor(self, *args)

    def height(self) -> "double":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_height(self)

    def getHeight(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_getHeight(self, returnIP)

    def setHeight(self, *args) -> "bool":
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_setHeight(self, *args)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CFactorUndergroundWallConstruction_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CFactorUndergroundWallConstruction_iddObjectType)
CFactorUndergroundWallConstruction_swigregister = _openstudiomodelresources.CFactorUndergroundWallConstruction_swigregister
CFactorUndergroundWallConstruction_swigregister(CFactorUndergroundWallConstruction)

def CFactorUndergroundWallConstruction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CFactorUndergroundWallConstruction_iddObjectType()
CFactorUndergroundWallConstruction_iddObjectType = _openstudiomodelresources.CFactorUndergroundWallConstruction_iddObjectType


def toCFactorUndergroundWallConstruction(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CFactorUndergroundWallConstruction >":
    return _openstudiomodelresources.toCFactorUndergroundWallConstruction(idfObject)
toCFactorUndergroundWallConstruction = _openstudiomodelresources.toCFactorUndergroundWallConstruction

def getCFactorUndergroundWallConstruction(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CFactorUndergroundWallConstruction >":
    return _openstudiomodelresources.getCFactorUndergroundWallConstruction(t_model, t_handle)
getCFactorUndergroundWallConstruction = _openstudiomodelresources.getCFactorUndergroundWallConstruction

def getCFactorUndergroundWallConstructions(t_model: 'Model') -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction,std::allocator< openstudio::model::CFactorUndergroundWallConstruction > >":
    return _openstudiomodelresources.getCFactorUndergroundWallConstructions(t_model)
getCFactorUndergroundWallConstructions = _openstudiomodelresources.getCFactorUndergroundWallConstructions

def getCFactorUndergroundWallConstructionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CFactorUndergroundWallConstruction >":
    return _openstudiomodelresources.getCFactorUndergroundWallConstructionByName(t_model, t_name)
getCFactorUndergroundWallConstructionByName = _openstudiomodelresources.getCFactorUndergroundWallConstructionByName

def getCFactorUndergroundWallConstructionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CFactorUndergroundWallConstruction,std::allocator< openstudio::model::CFactorUndergroundWallConstruction > >":
    return _openstudiomodelresources.getCFactorUndergroundWallConstructionsByName(t_model, t_name, t_exactMatch)
getCFactorUndergroundWallConstructionsByName = _openstudiomodelresources.getCFactorUndergroundWallConstructionsByName
class FFactorGroundFloorConstruction(ConstructionBase):
    __swig_setmethods__ = {}
    for _s in [ConstructionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFactorGroundFloorConstruction, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstructionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFactorGroundFloorConstruction, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', fFactor: 'double'=0.1, area: 'double'=0.1, perimeterExposed: 'double'=0.1):
        this = _openstudiomodelresources.new_FFactorGroundFloorConstruction(model, fFactor, area, perimeterExposed)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_FFactorGroundFloorConstruction
    __del__ = lambda self: None

    def fFactor(self) -> "double":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_fFactor(self)

    def getFFactor(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_getFFactor(self, returnIP)

    def setFFactor(self, *args) -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_setFFactor(self, *args)

    def area(self) -> "double":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_area(self)

    def getArea(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_getArea(self, returnIP)

    def setArea(self, *args) -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_setArea(self, *args)

    def perimeterExposed(self) -> "double":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_perimeterExposed(self)

    def getPerimeterExposed(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_getPerimeterExposed(self, returnIP)

    def setPerimeterExposed(self, *args) -> "bool":
        return _openstudiomodelresources.FFactorGroundFloorConstruction_setPerimeterExposed(self, *args)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.FFactorGroundFloorConstruction_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.FFactorGroundFloorConstruction_iddObjectType)
FFactorGroundFloorConstruction_swigregister = _openstudiomodelresources.FFactorGroundFloorConstruction_swigregister
FFactorGroundFloorConstruction_swigregister(FFactorGroundFloorConstruction)

def FFactorGroundFloorConstruction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.FFactorGroundFloorConstruction_iddObjectType()
FFactorGroundFloorConstruction_iddObjectType = _openstudiomodelresources.FFactorGroundFloorConstruction_iddObjectType


def toFFactorGroundFloorConstruction(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::FFactorGroundFloorConstruction >":
    return _openstudiomodelresources.toFFactorGroundFloorConstruction(idfObject)
toFFactorGroundFloorConstruction = _openstudiomodelresources.toFFactorGroundFloorConstruction

def getFFactorGroundFloorConstruction(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::FFactorGroundFloorConstruction >":
    return _openstudiomodelresources.getFFactorGroundFloorConstruction(t_model, t_handle)
getFFactorGroundFloorConstruction = _openstudiomodelresources.getFFactorGroundFloorConstruction

def getFFactorGroundFloorConstructions(t_model: 'Model') -> "std::vector< openstudio::model::FFactorGroundFloorConstruction,std::allocator< openstudio::model::FFactorGroundFloorConstruction > >":
    return _openstudiomodelresources.getFFactorGroundFloorConstructions(t_model)
getFFactorGroundFloorConstructions = _openstudiomodelresources.getFFactorGroundFloorConstructions

def getFFactorGroundFloorConstructionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::FFactorGroundFloorConstruction >":
    return _openstudiomodelresources.getFFactorGroundFloorConstructionByName(t_model, t_name)
getFFactorGroundFloorConstructionByName = _openstudiomodelresources.getFFactorGroundFloorConstructionByName

def getFFactorGroundFloorConstructionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::FFactorGroundFloorConstruction,std::allocator< openstudio::model::FFactorGroundFloorConstruction > >":
    return _openstudiomodelresources.getFFactorGroundFloorConstructionsByName(t_model, t_name, t_exactMatch)
getFFactorGroundFloorConstructionsByName = _openstudiomodelresources.getFFactorGroundFloorConstructionsByName
class StandardsInformationConstruction(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardsInformationConstruction, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardsInformationConstruction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationConstruction
    __del__ = lambda self: None
    __swig_getmethods__["standardPerturbableLayerTypeValues"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_standardPerturbableLayerTypeValues
    if _newclass:
        standardPerturbableLayerTypeValues = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_standardPerturbableLayerTypeValues)
    __swig_getmethods__["fenestrationTypeValues"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_fenestrationTypeValues
    if _newclass:
        fenestrationTypeValues = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_fenestrationTypeValues)
    __swig_getmethods__["fenestrationAssemblyContextValues"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContextValues
    if _newclass:
        fenestrationAssemblyContextValues = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContextValues)
    __swig_getmethods__["fenestrationNumberOfPanesValues"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanesValues
    if _newclass:
        fenestrationNumberOfPanesValues = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanesValues)
    __swig_getmethods__["fenestrationFrameTypeValues"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameTypeValues
    if _newclass:
        fenestrationFrameTypeValues = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameTypeValues)
    __swig_getmethods__["fenestrationDividerTypeValues"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerTypeValues
    if _newclass:
        fenestrationDividerTypeValues = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerTypeValues)
    __swig_getmethods__["fenestrationTintValues"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_fenestrationTintValues
    if _newclass:
        fenestrationTintValues = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_fenestrationTintValues)
    __swig_getmethods__["fenestrationGasFillValues"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFillValues
    if _newclass:
        fenestrationGasFillValues = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFillValues)
    __swig_getmethods__["intendedSurfaceTypeValues"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceTypeValues
    if _newclass:
        intendedSurfaceTypeValues = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceTypeValues)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.StandardsInformationConstruction_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.StandardsInformationConstruction_iddObjectType)

    def construction(self) -> "openstudio::model::ConstructionBase":
        return _openstudiomodelresources.StandardsInformationConstruction_construction(self)

    def intendedSurfaceType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceType(self)

    def standardsConstructionType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_standardsConstructionType(self)

    def suggestedStandardsConstructionTypes(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_suggestedStandardsConstructionTypes(self)

    def perturbableLayer(self) -> "boost::optional< openstudio::model::Material >":
        return _openstudiomodelresources.StandardsInformationConstruction_perturbableLayer(self)

    def perturbableLayerType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_perturbableLayerType(self)

    def isPerturbableLayerTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_isPerturbableLayerTypeDefaulted(self)

    def otherPerturbableLayerType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_otherPerturbableLayerType(self)

    def suggestedConstructionStandards(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_suggestedConstructionStandards(self)

    def constructionStandard(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_constructionStandard(self)

    def suggestedConstructionStandardSources(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.StandardsInformationConstruction_suggestedConstructionStandardSources(self)

    def constructionStandardSource(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_constructionStandardSource(self)

    def fenestrationType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationType(self)

    def fenestrationAssemblyContext(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContext(self)

    def fenestrationNumberOfPanes(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanes(self)

    def fenestrationFrameType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameType(self)

    def fenestrationDividerType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerType(self)

    def fenestrationTint(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTint(self)

    def fenestrationGasFill(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFill(self)

    def fenestrationLowEmissivityCoating(self) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationLowEmissivityCoating(self)

    def setIntendedSurfaceType(self, type: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setIntendedSurfaceType(self, type)

    def resetIntendedSurfaceType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetIntendedSurfaceType(self)

    def setStandardsConstructionType(self, type: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setStandardsConstructionType(self, type)

    def resetStandardsConstructionType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetStandardsConstructionType(self)

    def setPerturbableLayer(self, *args) -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setPerturbableLayer(self, *args)

    def resetPerturbableLayer(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetPerturbableLayer(self)

    def setPerturbableLayerType(self, type: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setPerturbableLayerType(self, type)

    def resetPerturbableLayerType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetPerturbableLayerType(self)

    def setOtherPerturbableLayerType(self, otherPerturbableLayerType: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setOtherPerturbableLayerType(self, otherPerturbableLayerType)

    def resetOtherPerturbableLayerType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetOtherPerturbableLayerType(self)

    def setConstructionStandard(self, constructionStandard: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setConstructionStandard(self, constructionStandard)

    def resetConstructionStandard(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetConstructionStandard(self)

    def setConstructionStandardSource(self, constructionStandardSource: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setConstructionStandardSource(self, constructionStandardSource)

    def resetConstructionStandardSource(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetConstructionStandardSource(self)

    def setFenestrationType(self, fenestrationType: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationType(self, fenestrationType)

    def resetFenestrationType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationType(self)

    def setFenestrationAssemblyContext(self, fenestrationAssemblyContext: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationAssemblyContext(self, fenestrationAssemblyContext)

    def resetFenestrationAssemblyContext(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationAssemblyContext(self)

    def setFenestrationNumberOfPanes(self, fenestrationNumberofPanes: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationNumberOfPanes(self, fenestrationNumberofPanes)

    def resetFenestrationNumberOfPanes(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationNumberOfPanes(self)

    def setFenestrationFrameType(self, fenestrationFrameType: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationFrameType(self, fenestrationFrameType)

    def resetFenestrationFrameType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationFrameType(self)

    def setFenestrationDividerType(self, fenestrationDividerType: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationDividerType(self, fenestrationDividerType)

    def resetFenestrationDividerType(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationDividerType(self)

    def setFenestrationTint(self, fenestrationTint: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationTint(self, fenestrationTint)

    def resetFenestrationTint(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationTint(self)

    def setFenestrationGasFill(self, fenestrationGasFill: 'std::string const &') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationGasFill(self, fenestrationGasFill)

    def resetFenestrationGasFill(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationGasFill(self)

    def setFenestrationLowEmissivityCoating(self, fenestrationLowEmissivityCoating: 'bool') -> "bool":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationLowEmissivityCoating(self, fenestrationLowEmissivityCoating)

    def setFenestrationLowEmissivityCoatingNoFail(self, fenestrationLowEmissivityCoating: 'bool') -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationLowEmissivityCoatingNoFail(self, fenestrationLowEmissivityCoating)

    def resetFenestrationLowEmissivityCoating(self) -> "void":
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationLowEmissivityCoating(self)
StandardsInformationConstruction_swigregister = _openstudiomodelresources.StandardsInformationConstruction_swigregister
StandardsInformationConstruction_swigregister(StandardsInformationConstruction)

def StandardsInformationConstruction_standardPerturbableLayerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_standardPerturbableLayerTypeValues()
StandardsInformationConstruction_standardPerturbableLayerTypeValues = _openstudiomodelresources.StandardsInformationConstruction_standardPerturbableLayerTypeValues

def StandardsInformationConstruction_fenestrationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTypeValues()
StandardsInformationConstruction_fenestrationTypeValues = _openstudiomodelresources.StandardsInformationConstruction_fenestrationTypeValues

def StandardsInformationConstruction_fenestrationAssemblyContextValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContextValues()
StandardsInformationConstruction_fenestrationAssemblyContextValues = _openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContextValues

def StandardsInformationConstruction_fenestrationNumberOfPanesValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanesValues()
StandardsInformationConstruction_fenestrationNumberOfPanesValues = _openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanesValues

def StandardsInformationConstruction_fenestrationFrameTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameTypeValues()
StandardsInformationConstruction_fenestrationFrameTypeValues = _openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameTypeValues

def StandardsInformationConstruction_fenestrationDividerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerTypeValues()
StandardsInformationConstruction_fenestrationDividerTypeValues = _openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerTypeValues

def StandardsInformationConstruction_fenestrationTintValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTintValues()
StandardsInformationConstruction_fenestrationTintValues = _openstudiomodelresources.StandardsInformationConstruction_fenestrationTintValues

def StandardsInformationConstruction_fenestrationGasFillValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFillValues()
StandardsInformationConstruction_fenestrationGasFillValues = _openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFillValues

def StandardsInformationConstruction_intendedSurfaceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceTypeValues()
StandardsInformationConstruction_intendedSurfaceTypeValues = _openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceTypeValues

def StandardsInformationConstruction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.StandardsInformationConstruction_iddObjectType()
StandardsInformationConstruction_iddObjectType = _openstudiomodelresources.StandardsInformationConstruction_iddObjectType


def toStandardsInformationConstruction(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::StandardsInformationConstruction >":
    return _openstudiomodelresources.toStandardsInformationConstruction(idfObject)
toStandardsInformationConstruction = _openstudiomodelresources.toStandardsInformationConstruction

def getStandardsInformationConstruction(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::StandardsInformationConstruction >":
    return _openstudiomodelresources.getStandardsInformationConstruction(t_model, t_handle)
getStandardsInformationConstruction = _openstudiomodelresources.getStandardsInformationConstruction

def getStandardsInformationConstructions(t_model: 'Model') -> "std::vector< openstudio::model::StandardsInformationConstruction,std::allocator< openstudio::model::StandardsInformationConstruction > >":
    return _openstudiomodelresources.getStandardsInformationConstructions(t_model)
getStandardsInformationConstructions = _openstudiomodelresources.getStandardsInformationConstructions

def getStandardsInformationConstructionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::StandardsInformationConstruction >":
    return _openstudiomodelresources.getStandardsInformationConstructionByName(t_model, t_name)
getStandardsInformationConstructionByName = _openstudiomodelresources.getStandardsInformationConstructionByName

def getStandardsInformationConstructionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::StandardsInformationConstruction,std::allocator< openstudio::model::StandardsInformationConstruction > >":
    return _openstudiomodelresources.getStandardsInformationConstructionsByName(t_model, t_name, t_exactMatch)
getStandardsInformationConstructionsByName = _openstudiomodelresources.getStandardsInformationConstructionsByName
class WindowDataFile(ConstructionBase):
    __swig_setmethods__ = {}
    for _s in [ConstructionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowDataFile, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstructionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WindowDataFile, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_WindowDataFile(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_WindowDataFile
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.WindowDataFile_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.WindowDataFile_iddObjectType)
WindowDataFile_swigregister = _openstudiomodelresources.WindowDataFile_swigregister
WindowDataFile_swigregister(WindowDataFile)

def WindowDataFile_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.WindowDataFile_iddObjectType()
WindowDataFile_iddObjectType = _openstudiomodelresources.WindowDataFile_iddObjectType


def toWindowDataFile(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WindowDataFile >":
    return _openstudiomodelresources.toWindowDataFile(idfObject)
toWindowDataFile = _openstudiomodelresources.toWindowDataFile

def getWindowDataFile(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WindowDataFile >":
    return _openstudiomodelresources.getWindowDataFile(t_model, t_handle)
getWindowDataFile = _openstudiomodelresources.getWindowDataFile

def getWindowDataFiles(t_model: 'Model') -> "std::vector< openstudio::model::WindowDataFile,std::allocator< openstudio::model::WindowDataFile > >":
    return _openstudiomodelresources.getWindowDataFiles(t_model)
getWindowDataFiles = _openstudiomodelresources.getWindowDataFiles

def getWindowDataFileByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WindowDataFile >":
    return _openstudiomodelresources.getWindowDataFileByName(t_model, t_name)
getWindowDataFileByName = _openstudiomodelresources.getWindowDataFileByName

def getWindowDataFilesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WindowDataFile,std::allocator< openstudio::model::WindowDataFile > >":
    return _openstudiomodelresources.getWindowDataFilesByName(t_model, t_name, t_exactMatch)
getWindowDataFilesByName = _openstudiomodelresources.getWindowDataFilesByName
class WindowPropertyFrameAndDivider(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowPropertyFrameAndDivider, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WindowPropertyFrameAndDivider, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_WindowPropertyFrameAndDivider(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_WindowPropertyFrameAndDivider
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.WindowPropertyFrameAndDivider_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.WindowPropertyFrameAndDivider_iddObjectType)
    __swig_getmethods__["dividerTypeValues"] = lambda x: _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerTypeValues
    if _newclass:
        dividerTypeValues = staticmethod(_openstudiomodelresources.WindowPropertyFrameAndDivider_dividerTypeValues)

    def frameWidth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameWidth(self)

    def isFrameWidthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameWidthDefaulted(self)

    def frameOutsideProjection(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameOutsideProjection(self)

    def isFrameOutsideProjectionDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameOutsideProjectionDefaulted(self)

    def frameInsideProjection(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameInsideProjection(self)

    def isFrameInsideProjectionDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameInsideProjectionDefaulted(self)

    def frameConductance(self) -> "boost::optional< double >":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameConductance(self)

    def ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self)

    def isRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self)

    def frameSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameSolarAbsorptance(self)

    def isFrameSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameSolarAbsorptanceDefaulted(self)

    def frameVisibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameVisibleAbsorptance(self)

    def isFrameVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameVisibleAbsorptanceDefaulted(self)

    def frameThermalHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameThermalHemisphericalEmissivity(self)

    def isFrameThermalHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameThermalHemisphericalEmissivityDefaulted(self)

    def dividerType(self) -> "std::string":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerType(self)

    def isDividerTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerTypeDefaulted(self)

    def dividerWidth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerWidth(self)

    def isDividerWidthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerWidthDefaulted(self)

    def numberOfHorizontalDividers(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_numberOfHorizontalDividers(self)

    def isNumberOfHorizontalDividersDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isNumberOfHorizontalDividersDefaulted(self)

    def numberOfVerticalDividers(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_numberOfVerticalDividers(self)

    def isNumberOfVerticalDividersDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isNumberOfVerticalDividersDefaulted(self)

    def dividerOutsideProjection(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerOutsideProjection(self)

    def isDividerOutsideProjectionDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerOutsideProjectionDefaulted(self)

    def dividerInsideProjection(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerInsideProjection(self)

    def isDividerInsideProjectionDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerInsideProjectionDefaulted(self)

    def dividerConductance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerConductance(self)

    def isDividerConductanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerConductanceDefaulted(self)

    def ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self)

    def isRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self)

    def dividerSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerSolarAbsorptance(self)

    def isDividerSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerSolarAbsorptanceDefaulted(self)

    def dividerVisibleAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerVisibleAbsorptance(self)

    def isDividerVisibleAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerVisibleAbsorptanceDefaulted(self)

    def dividerThermalHemisphericalEmissivity(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerThermalHemisphericalEmissivity(self)

    def isDividerThermalHemisphericalEmissivityDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerThermalHemisphericalEmissivityDefaulted(self)

    def outsideRevealDepth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_outsideRevealDepth(self)

    def isOutsideRevealDepthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isOutsideRevealDepthDefaulted(self)

    def outsideRevealSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_outsideRevealSolarAbsorptance(self)

    def isOutsideRevealSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isOutsideRevealSolarAbsorptanceDefaulted(self)

    def insideSillDepth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideSillDepth(self)

    def isInsideSillDepthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideSillDepthDefaulted(self)

    def insideSillSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideSillSolarAbsorptance(self)

    def isInsideSillSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideSillSolarAbsorptanceDefaulted(self)

    def insideRevealDepth(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideRevealDepth(self)

    def isInsideRevealDepthDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideRevealDepthDefaulted(self)

    def insideRevealSolarAbsorptance(self) -> "double":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideRevealSolarAbsorptance(self)

    def isInsideRevealSolarAbsorptanceDefaulted(self) -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideRevealSolarAbsorptanceDefaulted(self)

    def setFrameWidth(self, frameWidth: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameWidth(self, frameWidth)

    def resetFrameWidth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameWidth(self)

    def setFrameOutsideProjection(self, frameOutsideProjection: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameOutsideProjection(self, frameOutsideProjection)

    def resetFrameOutsideProjection(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameOutsideProjection(self)

    def setFrameInsideProjection(self, frameInsideProjection: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameInsideProjection(self, frameInsideProjection)

    def resetFrameInsideProjection(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameInsideProjection(self)

    def setFrameConductance(self, frameConductance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameConductance(self, frameConductance)

    def resetFrameConductance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameConductance(self)

    def setRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance)

    def resetRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self)

    def setFrameSolarAbsorptance(self, frameSolarAbsorptance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameSolarAbsorptance(self, frameSolarAbsorptance)

    def resetFrameSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameSolarAbsorptance(self)

    def setFrameVisibleAbsorptance(self, frameVisibleAbsorptance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameVisibleAbsorptance(self, frameVisibleAbsorptance)

    def resetFrameVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameVisibleAbsorptance(self)

    def setFrameThermalHemisphericalEmissivity(self, frameThermalHemisphericalEmissivity: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameThermalHemisphericalEmissivity(self, frameThermalHemisphericalEmissivity)

    def resetFrameThermalHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameThermalHemisphericalEmissivity(self)

    def setDividerType(self, dividerType: 'std::string') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerType(self, dividerType)

    def resetDividerType(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerType(self)

    def setDividerWidth(self, dividerWidth: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerWidth(self, dividerWidth)

    def resetDividerWidth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerWidth(self)

    def setNumberOfHorizontalDividers(self, numberOfHorizontalDividers: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setNumberOfHorizontalDividers(self, numberOfHorizontalDividers)

    def resetNumberOfHorizontalDividers(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetNumberOfHorizontalDividers(self)

    def setNumberOfVerticalDividers(self, numberOfVerticalDividers: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setNumberOfVerticalDividers(self, numberOfVerticalDividers)

    def resetNumberOfVerticalDividers(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetNumberOfVerticalDividers(self)

    def setDividerOutsideProjection(self, dividerOutsideProjection: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerOutsideProjection(self, dividerOutsideProjection)

    def resetDividerOutsideProjection(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerOutsideProjection(self)

    def setDividerInsideProjection(self, dividerInsideProjection: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerInsideProjection(self, dividerInsideProjection)

    def resetDividerInsideProjection(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerInsideProjection(self)

    def setDividerConductance(self, dividerConductance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerConductance(self, dividerConductance)

    def resetDividerConductance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerConductance(self)

    def setRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance)

    def resetRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self)

    def setDividerSolarAbsorptance(self, dividerSolarAbsorptance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerSolarAbsorptance(self, dividerSolarAbsorptance)

    def resetDividerSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerSolarAbsorptance(self)

    def setDividerVisibleAbsorptance(self, dividerVisibleAbsorptance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerVisibleAbsorptance(self, dividerVisibleAbsorptance)

    def resetDividerVisibleAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerVisibleAbsorptance(self)

    def setDividerThermalHemisphericalEmissivity(self, dividerThermalHemisphericalEmissivity: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerThermalHemisphericalEmissivity(self, dividerThermalHemisphericalEmissivity)

    def resetDividerThermalHemisphericalEmissivity(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerThermalHemisphericalEmissivity(self)

    def setOutsideRevealDepth(self, outsideRevealDepth: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setOutsideRevealDepth(self, outsideRevealDepth)

    def resetOutsideRevealDepth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetOutsideRevealDepth(self)

    def setOutsideRevealSolarAbsorptance(self, outsideRevealSolarAbsorptance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setOutsideRevealSolarAbsorptance(self, outsideRevealSolarAbsorptance)

    def resetOutsideRevealSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetOutsideRevealSolarAbsorptance(self)

    def setInsideSillDepth(self, insideSillDepth: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideSillDepth(self, insideSillDepth)

    def resetInsideSillDepth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideSillDepth(self)

    def setInsideSillSolarAbsorptance(self, insideSillSolarAbsorptance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideSillSolarAbsorptance(self, insideSillSolarAbsorptance)

    def resetInsideSillSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideSillSolarAbsorptance(self)

    def setInsideRevealDepth(self, insideRevealDepth: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideRevealDepth(self, insideRevealDepth)

    def resetInsideRevealDepth(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideRevealDepth(self)

    def setInsideRevealSolarAbsorptance(self, insideRevealSolarAbsorptance: 'double') -> "bool":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideRevealSolarAbsorptance(self, insideRevealSolarAbsorptance)

    def resetInsideRevealSolarAbsorptance(self) -> "void":
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideRevealSolarAbsorptance(self)
WindowPropertyFrameAndDivider_swigregister = _openstudiomodelresources.WindowPropertyFrameAndDivider_swigregister
WindowPropertyFrameAndDivider_swigregister(WindowPropertyFrameAndDivider)

def WindowPropertyFrameAndDivider_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.WindowPropertyFrameAndDivider_iddObjectType()
WindowPropertyFrameAndDivider_iddObjectType = _openstudiomodelresources.WindowPropertyFrameAndDivider_iddObjectType

def WindowPropertyFrameAndDivider_dividerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerTypeValues()
WindowPropertyFrameAndDivider_dividerTypeValues = _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerTypeValues


def toWindowPropertyFrameAndDivider(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WindowPropertyFrameAndDivider >":
    return _openstudiomodelresources.toWindowPropertyFrameAndDivider(idfObject)
toWindowPropertyFrameAndDivider = _openstudiomodelresources.toWindowPropertyFrameAndDivider

def getWindowPropertyFrameAndDivider(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WindowPropertyFrameAndDivider >":
    return _openstudiomodelresources.getWindowPropertyFrameAndDivider(t_model, t_handle)
getWindowPropertyFrameAndDivider = _openstudiomodelresources.getWindowPropertyFrameAndDivider

def getWindowPropertyFrameAndDividers(t_model: 'Model') -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider,std::allocator< openstudio::model::WindowPropertyFrameAndDivider > >":
    return _openstudiomodelresources.getWindowPropertyFrameAndDividers(t_model)
getWindowPropertyFrameAndDividers = _openstudiomodelresources.getWindowPropertyFrameAndDividers

def getWindowPropertyFrameAndDividerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WindowPropertyFrameAndDivider >":
    return _openstudiomodelresources.getWindowPropertyFrameAndDividerByName(t_model, t_name)
getWindowPropertyFrameAndDividerByName = _openstudiomodelresources.getWindowPropertyFrameAndDividerByName

def getWindowPropertyFrameAndDividersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WindowPropertyFrameAndDivider,std::allocator< openstudio::model::WindowPropertyFrameAndDivider > >":
    return _openstudiomodelresources.getWindowPropertyFrameAndDividersByName(t_model, t_name, t_exactMatch)
getWindowPropertyFrameAndDividersByName = _openstudiomodelresources.getWindowPropertyFrameAndDividersByName
class DefaultSubSurfaceConstructions(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultSubSurfaceConstructions, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultSubSurfaceConstructions, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_DefaultSubSurfaceConstructions(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSubSurfaceConstructions
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.DefaultSubSurfaceConstructions_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.DefaultSubSurfaceConstructions_iddObjectType)

    def fixedWindowConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_fixedWindowConstruction(self)

    def operableWindowConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_operableWindowConstruction(self)

    def doorConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_doorConstruction(self)

    def glassDoorConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_glassDoorConstruction(self)

    def overheadDoorConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_overheadDoorConstruction(self)

    def skylightConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_skylightConstruction(self)

    def tubularDaylightDomeConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_tubularDaylightDomeConstruction(self)

    def tubularDaylightDiffuserConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_tubularDaylightDiffuserConstruction(self)

    def setFixedWindowConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setFixedWindowConstruction(self, construction)

    def resetFixedWindowConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetFixedWindowConstruction(self)

    def setOperableWindowConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setOperableWindowConstruction(self, construction)

    def resetOperableWindowConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetOperableWindowConstruction(self)

    def setDoorConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setDoorConstruction(self, construction)

    def resetDoorConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetDoorConstruction(self)

    def setGlassDoorConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setGlassDoorConstruction(self, construction)

    def resetGlassDoorConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetGlassDoorConstruction(self)

    def setOverheadDoorConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setOverheadDoorConstruction(self, construction)

    def resetOverheadDoorConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetOverheadDoorConstruction(self)

    def setSkylightConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setSkylightConstruction(self, construction)

    def resetSkylightConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetSkylightConstruction(self)

    def setTubularDaylightDomeConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setTubularDaylightDomeConstruction(self, construction)

    def resetTubularDaylightDomeConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetTubularDaylightDomeConstruction(self)

    def setTubularDaylightDiffuserConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setTubularDaylightDiffuserConstruction(self, construction)

    def resetTubularDaylightDiffuserConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetTubularDaylightDiffuserConstruction(self)

    def merge(self, other: 'DefaultSubSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_merge(self, other)
DefaultSubSurfaceConstructions_swigregister = _openstudiomodelresources.DefaultSubSurfaceConstructions_swigregister
DefaultSubSurfaceConstructions_swigregister(DefaultSubSurfaceConstructions)

def DefaultSubSurfaceConstructions_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DefaultSubSurfaceConstructions_iddObjectType()
DefaultSubSurfaceConstructions_iddObjectType = _openstudiomodelresources.DefaultSubSurfaceConstructions_iddObjectType


def toDefaultSubSurfaceConstructions(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::DefaultSubSurfaceConstructions >":
    return _openstudiomodelresources.toDefaultSubSurfaceConstructions(idfObject)
toDefaultSubSurfaceConstructions = _openstudiomodelresources.toDefaultSubSurfaceConstructions

def getDefaultSubSurfaceConstructions(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::DefaultSubSurfaceConstructions >":
    return _openstudiomodelresources.getDefaultSubSurfaceConstructions(t_model, t_handle)
getDefaultSubSurfaceConstructions = _openstudiomodelresources.getDefaultSubSurfaceConstructions

def getDefaultSubSurfaceConstructionss(t_model: 'Model') -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions,std::allocator< openstudio::model::DefaultSubSurfaceConstructions > >":
    return _openstudiomodelresources.getDefaultSubSurfaceConstructionss(t_model)
getDefaultSubSurfaceConstructionss = _openstudiomodelresources.getDefaultSubSurfaceConstructionss

def getDefaultSubSurfaceConstructionsByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::DefaultSubSurfaceConstructions >":
    return _openstudiomodelresources.getDefaultSubSurfaceConstructionsByName(t_model, t_name)
getDefaultSubSurfaceConstructionsByName = _openstudiomodelresources.getDefaultSubSurfaceConstructionsByName

def getDefaultSubSurfaceConstructionssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::DefaultSubSurfaceConstructions,std::allocator< openstudio::model::DefaultSubSurfaceConstructions > >":
    return _openstudiomodelresources.getDefaultSubSurfaceConstructionssByName(t_model, t_name, t_exactMatch)
getDefaultSubSurfaceConstructionssByName = _openstudiomodelresources.getDefaultSubSurfaceConstructionssByName
class DefaultSurfaceConstructions(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultSurfaceConstructions, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultSurfaceConstructions, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_DefaultSurfaceConstructions(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSurfaceConstructions
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.DefaultSurfaceConstructions_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.DefaultSurfaceConstructions_iddObjectType)

    def floorConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSurfaceConstructions_floorConstruction(self)

    def wallConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSurfaceConstructions_wallConstruction(self)

    def roofCeilingConstruction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.DefaultSurfaceConstructions_roofCeilingConstruction(self)

    def setFloorConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructions_setFloorConstruction(self, construction)

    def resetFloorConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructions_resetFloorConstruction(self)

    def setWallConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructions_setWallConstruction(self, construction)

    def resetWallConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructions_resetWallConstruction(self)

    def setRoofCeilingConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.DefaultSurfaceConstructions_setRoofCeilingConstruction(self, construction)

    def resetRoofCeilingConstruction(self) -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructions_resetRoofCeilingConstruction(self)

    def merge(self, other: 'DefaultSurfaceConstructions') -> "void":
        return _openstudiomodelresources.DefaultSurfaceConstructions_merge(self, other)
DefaultSurfaceConstructions_swigregister = _openstudiomodelresources.DefaultSurfaceConstructions_swigregister
DefaultSurfaceConstructions_swigregister(DefaultSurfaceConstructions)

def DefaultSurfaceConstructions_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DefaultSurfaceConstructions_iddObjectType()
DefaultSurfaceConstructions_iddObjectType = _openstudiomodelresources.DefaultSurfaceConstructions_iddObjectType


def toDefaultSurfaceConstructions(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::DefaultSurfaceConstructions >":
    return _openstudiomodelresources.toDefaultSurfaceConstructions(idfObject)
toDefaultSurfaceConstructions = _openstudiomodelresources.toDefaultSurfaceConstructions

def getDefaultSurfaceConstructions(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::DefaultSurfaceConstructions >":
    return _openstudiomodelresources.getDefaultSurfaceConstructions(t_model, t_handle)
getDefaultSurfaceConstructions = _openstudiomodelresources.getDefaultSurfaceConstructions

def getDefaultSurfaceConstructionss(t_model: 'Model') -> "std::vector< openstudio::model::DefaultSurfaceConstructions,std::allocator< openstudio::model::DefaultSurfaceConstructions > >":
    return _openstudiomodelresources.getDefaultSurfaceConstructionss(t_model)
getDefaultSurfaceConstructionss = _openstudiomodelresources.getDefaultSurfaceConstructionss

def getDefaultSurfaceConstructionsByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::DefaultSurfaceConstructions >":
    return _openstudiomodelresources.getDefaultSurfaceConstructionsByName(t_model, t_name)
getDefaultSurfaceConstructionsByName = _openstudiomodelresources.getDefaultSurfaceConstructionsByName

def getDefaultSurfaceConstructionssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::DefaultSurfaceConstructions,std::allocator< openstudio::model::DefaultSurfaceConstructions > >":
    return _openstudiomodelresources.getDefaultSurfaceConstructionssByName(t_model, t_name, t_exactMatch)
getDefaultSurfaceConstructionssByName = _openstudiomodelresources.getDefaultSurfaceConstructionssByName
class ShadingControl(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingControl, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingControl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_ShadingControl(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingControl
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ShadingControl_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ShadingControl_iddObjectType)
    __swig_getmethods__["shadingTypeValues"] = lambda x: _openstudiomodelresources.ShadingControl_shadingTypeValues
    if _newclass:
        shadingTypeValues = staticmethod(_openstudiomodelresources.ShadingControl_shadingTypeValues)
    __swig_getmethods__["shadingControlTypeValues"] = lambda x: _openstudiomodelresources.ShadingControl_shadingControlTypeValues
    if _newclass:
        shadingControlTypeValues = staticmethod(_openstudiomodelresources.ShadingControl_shadingControlTypeValues)

    def construction(self) -> "boost::optional< openstudio::model::Construction >":
        return _openstudiomodelresources.ShadingControl_construction(self)

    def shadingMaterial(self) -> "boost::optional< openstudio::model::ShadingMaterial >":
        return _openstudiomodelresources.ShadingControl_shadingMaterial(self)

    def shadingType(self) -> "std::string":
        return _openstudiomodelresources.ShadingControl_shadingType(self)

    def shadingControlType(self) -> "std::string":
        return _openstudiomodelresources.ShadingControl_shadingControlType(self)

    def isShadingControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isShadingControlTypeDefaulted(self)

    def schedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.ShadingControl_schedule(self)

    def setpoint(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ShadingControl_setpoint(self)

    def isSetpointDefaulted(self) -> "bool":
        return _openstudiomodelresources.ShadingControl_isSetpointDefaulted(self)

    def setShadingType(self, shadingType: 'std::string const &') -> "bool":
        return _openstudiomodelresources.ShadingControl_setShadingType(self, shadingType)

    def setShadingControlType(self, shadingControlType: 'std::string const &') -> "bool":
        return _openstudiomodelresources.ShadingControl_setShadingControlType(self, shadingControlType)

    def resetShadingControlType(self) -> "void":
        return _openstudiomodelresources.ShadingControl_resetShadingControlType(self)

    def setSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.ShadingControl_setSchedule(self, schedule)

    def resetSchedule(self) -> "void":
        return _openstudiomodelresources.ShadingControl_resetSchedule(self)

    def setSetpoint(self, setpoint: 'double') -> "bool":
        return _openstudiomodelresources.ShadingControl_setSetpoint(self, setpoint)

    def resetSetpoint(self) -> "void":
        return _openstudiomodelresources.ShadingControl_resetSetpoint(self)

    def subSurfaces(self) -> "std::vector< openstudio::model::SubSurface,std::allocator< openstudio::model::SubSurface > >":
        return _openstudiomodelresources.ShadingControl_subSurfaces(self)
ShadingControl_swigregister = _openstudiomodelresources.ShadingControl_swigregister
ShadingControl_swigregister(ShadingControl)

def ShadingControl_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ShadingControl_iddObjectType()
ShadingControl_iddObjectType = _openstudiomodelresources.ShadingControl_iddObjectType

def ShadingControl_shadingTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ShadingControl_shadingTypeValues()
ShadingControl_shadingTypeValues = _openstudiomodelresources.ShadingControl_shadingTypeValues

def ShadingControl_shadingControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ShadingControl_shadingControlTypeValues()
ShadingControl_shadingControlTypeValues = _openstudiomodelresources.ShadingControl_shadingControlTypeValues


def toShadingControl(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ShadingControl >":
    return _openstudiomodelresources.toShadingControl(idfObject)
toShadingControl = _openstudiomodelresources.toShadingControl

def getShadingControl(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ShadingControl >":
    return _openstudiomodelresources.getShadingControl(t_model, t_handle)
getShadingControl = _openstudiomodelresources.getShadingControl

def getShadingControls(t_model: 'Model') -> "std::vector< openstudio::model::ShadingControl,std::allocator< openstudio::model::ShadingControl > >":
    return _openstudiomodelresources.getShadingControls(t_model)
getShadingControls = _openstudiomodelresources.getShadingControls

def getShadingControlByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ShadingControl >":
    return _openstudiomodelresources.getShadingControlByName(t_model, t_name)
getShadingControlByName = _openstudiomodelresources.getShadingControlByName

def getShadingControlsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ShadingControl,std::allocator< openstudio::model::ShadingControl > >":
    return _openstudiomodelresources.getShadingControlsByName(t_model, t_name, t_exactMatch)
getShadingControlsByName = _openstudiomodelresources.getShadingControlsByName
class Curve(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Curve
    __del__ = lambda self: None

    def numVariables(self) -> "int":
        return _openstudiomodelresources.Curve_numVariables(self)

    def evaluate(self, *args) -> "double":
        return _openstudiomodelresources.Curve_evaluate(self, *args)
Curve_swigregister = _openstudiomodelresources.Curve_swigregister
Curve_swigregister(Curve)


def toCurve(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Curve >":
    return _openstudiomodelresources.toCurve(idfObject)
toCurve = _openstudiomodelresources.toCurve

def getCurve(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Curve >":
    return _openstudiomodelresources.getCurve(t_model, t_handle)
getCurve = _openstudiomodelresources.getCurve

def getCurves(t_model: 'Model') -> "std::vector< openstudio::model::Curve,std::allocator< openstudio::model::Curve > >":
    return _openstudiomodelresources.getCurves(t_model)
getCurves = _openstudiomodelresources.getCurves

def getCurveByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Curve >":
    return _openstudiomodelresources.getCurveByName(t_model, t_name)
getCurveByName = _openstudiomodelresources.getCurveByName

def getCurvesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Curve,std::allocator< openstudio::model::Curve > >":
    return _openstudiomodelresources.getCurvesByName(t_model, t_name, t_exactMatch)
getCurvesByName = _openstudiomodelresources.getCurvesByName
class CurveBicubic(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveBicubic, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveBicubic, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveBicubic(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBicubic
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveBicubic_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveBicubic_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforXValues"] = lambda x: _openstudiomodelresources.CurveBicubic_validInputUnitTypeforXValues
    if _newclass:
        validInputUnitTypeforXValues = staticmethod(_openstudiomodelresources.CurveBicubic_validInputUnitTypeforXValues)
    __swig_getmethods__["validInputUnitTypeforYValues"] = lambda x: _openstudiomodelresources.CurveBicubic_validInputUnitTypeforYValues
    if _newclass:
        validInputUnitTypeforYValues = staticmethod(_openstudiomodelresources.CurveBicubic_validInputUnitTypeforYValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveBicubic_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveBicubic_validOutputUnitTypeValues)

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient3xPOW2(self)

    def coefficient4y(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient4y(self)

    def coefficient5yPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient5yPOW2(self)

    def coefficient6xTIMESY(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient6xTIMESY(self)

    def coefficient7xPOW3(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient7xPOW3(self)

    def coefficient8yPOW3(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient8yPOW3(self)

    def coefficient9xPOW2TIMESY(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient9xPOW2TIMESY(self)

    def coefficient10xTIMESYPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_coefficient10xTIMESYPOW2(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_maximumValueofx(self)

    def minimumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_minimumValueofy(self)

    def maximumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveBicubic_maximumValueofy(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveBicubic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveBicubic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveBicubic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBicubic_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self) -> "std::string":
        return _openstudiomodelresources.CurveBicubic_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBicubic_isInputUnitTypeforYDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveBicubic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBicubic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4y(self, coefficient4y: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient4y(self, coefficient4y)

    def setCoefficient5yPOW2(self, coefficient5yPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient5yPOW2(self, coefficient5yPOW2)

    def setCoefficient6xTIMESY(self, coefficient6xTIMESY: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient6xTIMESY(self, coefficient6xTIMESY)

    def setCoefficient7xPOW3(self, coefficient7xPOW3: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient7xPOW3(self, coefficient7xPOW3)

    def setCoefficient8yPOW3(self, coefficient8yPOW3: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient8yPOW3(self, coefficient8yPOW3)

    def setCoefficient9xPOW2TIMESY(self, coefficient9xPOW2TIMESY: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient9xPOW2TIMESY(self, coefficient9xPOW2TIMESY)

    def setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMaximumValueofy(self, maximumValueofy)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetInputUnitTypeforY(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveBicubic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveBicubic_resetOutputUnitType(self)
CurveBicubic_swigregister = _openstudiomodelresources.CurveBicubic_swigregister
CurveBicubic_swigregister(CurveBicubic)

def CurveBicubic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveBicubic_iddObjectType()
CurveBicubic_iddObjectType = _openstudiomodelresources.CurveBicubic_iddObjectType

def CurveBicubic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBicubic_validInputUnitTypeforXValues()
CurveBicubic_validInputUnitTypeforXValues = _openstudiomodelresources.CurveBicubic_validInputUnitTypeforXValues

def CurveBicubic_validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBicubic_validInputUnitTypeforYValues()
CurveBicubic_validInputUnitTypeforYValues = _openstudiomodelresources.CurveBicubic_validInputUnitTypeforYValues

def CurveBicubic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBicubic_validOutputUnitTypeValues()
CurveBicubic_validOutputUnitTypeValues = _openstudiomodelresources.CurveBicubic_validOutputUnitTypeValues


def toCurveBicubic(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveBicubic >":
    return _openstudiomodelresources.toCurveBicubic(idfObject)
toCurveBicubic = _openstudiomodelresources.toCurveBicubic

def getCurveBicubic(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveBicubic >":
    return _openstudiomodelresources.getCurveBicubic(t_model, t_handle)
getCurveBicubic = _openstudiomodelresources.getCurveBicubic

def getCurveBicubics(t_model: 'Model') -> "std::vector< openstudio::model::CurveBicubic,std::allocator< openstudio::model::CurveBicubic > >":
    return _openstudiomodelresources.getCurveBicubics(t_model)
getCurveBicubics = _openstudiomodelresources.getCurveBicubics

def getCurveBicubicByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveBicubic >":
    return _openstudiomodelresources.getCurveBicubicByName(t_model, t_name)
getCurveBicubicByName = _openstudiomodelresources.getCurveBicubicByName

def getCurveBicubicsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveBicubic,std::allocator< openstudio::model::CurveBicubic > >":
    return _openstudiomodelresources.getCurveBicubicsByName(t_model, t_name, t_exactMatch)
getCurveBicubicsByName = _openstudiomodelresources.getCurveBicubicsByName
class CurveBiquadratic(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveBiquadratic, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveBiquadratic, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveBiquadratic(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBiquadratic
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveBiquadratic_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveBiquadratic_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforXValues"] = lambda x: _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforXValues
    if _newclass:
        validInputUnitTypeforXValues = staticmethod(_openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforXValues)
    __swig_getmethods__["validInputUnitTypeforYValues"] = lambda x: _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforYValues
    if _newclass:
        validInputUnitTypeforYValues = staticmethod(_openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforYValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveBiquadratic_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveBiquadratic_validOutputUnitTypeValues)

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient3xPOW2(self)

    def coefficient4y(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient4y(self)

    def coefficient5yPOW2(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient5yPOW2(self)

    def coefficient6xTIMESY(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_coefficient6xTIMESY(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_maximumValueofx(self)

    def minimumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_minimumValueofy(self)

    def maximumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveBiquadratic_maximumValueofy(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveBiquadratic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveBiquadratic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveBiquadratic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self) -> "std::string":
        return _openstudiomodelresources.CurveBiquadratic_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_isInputUnitTypeforYDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveBiquadratic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4y(self, coefficient4y: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient4y(self, coefficient4y)

    def setCoefficient5yPOW2(self, coefficient5yPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient5yPOW2(self, coefficient5yPOW2)

    def setCoefficient6xTIMESY(self, coefficient6xTIMESY: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient6xTIMESY(self, coefficient6xTIMESY)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMaximumValueofy(self, maximumValueofy)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetInputUnitTypeforY(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveBiquadratic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveBiquadratic_resetOutputUnitType(self)
CurveBiquadratic_swigregister = _openstudiomodelresources.CurveBiquadratic_swigregister
CurveBiquadratic_swigregister(CurveBiquadratic)

def CurveBiquadratic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveBiquadratic_iddObjectType()
CurveBiquadratic_iddObjectType = _openstudiomodelresources.CurveBiquadratic_iddObjectType

def CurveBiquadratic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforXValues()
CurveBiquadratic_validInputUnitTypeforXValues = _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforXValues

def CurveBiquadratic_validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforYValues()
CurveBiquadratic_validInputUnitTypeforYValues = _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforYValues

def CurveBiquadratic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveBiquadratic_validOutputUnitTypeValues()
CurveBiquadratic_validOutputUnitTypeValues = _openstudiomodelresources.CurveBiquadratic_validOutputUnitTypeValues


def toCurveBiquadratic(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveBiquadratic >":
    return _openstudiomodelresources.toCurveBiquadratic(idfObject)
toCurveBiquadratic = _openstudiomodelresources.toCurveBiquadratic

def getCurveBiquadratic(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveBiquadratic >":
    return _openstudiomodelresources.getCurveBiquadratic(t_model, t_handle)
getCurveBiquadratic = _openstudiomodelresources.getCurveBiquadratic

def getCurveBiquadratics(t_model: 'Model') -> "std::vector< openstudio::model::CurveBiquadratic,std::allocator< openstudio::model::CurveBiquadratic > >":
    return _openstudiomodelresources.getCurveBiquadratics(t_model)
getCurveBiquadratics = _openstudiomodelresources.getCurveBiquadratics

def getCurveBiquadraticByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveBiquadratic >":
    return _openstudiomodelresources.getCurveBiquadraticByName(t_model, t_name)
getCurveBiquadraticByName = _openstudiomodelresources.getCurveBiquadraticByName

def getCurveBiquadraticsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveBiquadratic,std::allocator< openstudio::model::CurveBiquadratic > >":
    return _openstudiomodelresources.getCurveBiquadraticsByName(t_model, t_name, t_exactMatch)
getCurveBiquadraticsByName = _openstudiomodelresources.getCurveBiquadraticsByName
class CurveCubic(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveCubic, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveCubic, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveCubic(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveCubic
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveCubic_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveCubic_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforXValues"] = lambda x: _openstudiomodelresources.CurveCubic_validInputUnitTypeforXValues
    if _newclass:
        validInputUnitTypeforXValues = staticmethod(_openstudiomodelresources.CurveCubic_validInputUnitTypeforXValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveCubic_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveCubic_validOutputUnitTypeValues)

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveCubic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveCubic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveCubic_coefficient3xPOW2(self)

    def coefficient4xPOW3(self) -> "double":
        return _openstudiomodelresources.CurveCubic_coefficient4xPOW3(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveCubic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveCubic_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveCubic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveCubic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveCubic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveCubic_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveCubic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveCubic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveCubic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: 'double') -> "bool":
        return _openstudiomodelresources.CurveCubic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveCubic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4xPOW3(self, coefficient4xPOW3: 'double') -> "bool":
        return _openstudiomodelresources.CurveCubic_setCoefficient4xPOW3(self, coefficient4xPOW3)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveCubic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveCubic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveCubic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveCubic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveCubic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveCubic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveCubic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveCubic_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveCubic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveCubic_resetOutputUnitType(self)
CurveCubic_swigregister = _openstudiomodelresources.CurveCubic_swigregister
CurveCubic_swigregister(CurveCubic)

def CurveCubic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveCubic_iddObjectType()
CurveCubic_iddObjectType = _openstudiomodelresources.CurveCubic_iddObjectType

def CurveCubic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveCubic_validInputUnitTypeforXValues()
CurveCubic_validInputUnitTypeforXValues = _openstudiomodelresources.CurveCubic_validInputUnitTypeforXValues

def CurveCubic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveCubic_validOutputUnitTypeValues()
CurveCubic_validOutputUnitTypeValues = _openstudiomodelresources.CurveCubic_validOutputUnitTypeValues


def toCurveCubic(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveCubic >":
    return _openstudiomodelresources.toCurveCubic(idfObject)
toCurveCubic = _openstudiomodelresources.toCurveCubic

def getCurveCubic(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveCubic >":
    return _openstudiomodelresources.getCurveCubic(t_model, t_handle)
getCurveCubic = _openstudiomodelresources.getCurveCubic

def getCurveCubics(t_model: 'Model') -> "std::vector< openstudio::model::CurveCubic,std::allocator< openstudio::model::CurveCubic > >":
    return _openstudiomodelresources.getCurveCubics(t_model)
getCurveCubics = _openstudiomodelresources.getCurveCubics

def getCurveCubicByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveCubic >":
    return _openstudiomodelresources.getCurveCubicByName(t_model, t_name)
getCurveCubicByName = _openstudiomodelresources.getCurveCubicByName

def getCurveCubicsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveCubic,std::allocator< openstudio::model::CurveCubic > >":
    return _openstudiomodelresources.getCurveCubicsByName(t_model, t_name, t_exactMatch)
getCurveCubicsByName = _openstudiomodelresources.getCurveCubicsByName
class CurveDoubleExponentialDecay(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveDoubleExponentialDecay, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveDoubleExponentialDecay, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveDoubleExponentialDecay(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveDoubleExponentialDecay
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveDoubleExponentialDecay_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveDoubleExponentialDecay_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforxValues"] = lambda x: _openstudiomodelresources.CurveDoubleExponentialDecay_validInputUnitTypeforxValues
    if _newclass:
        validInputUnitTypeforxValues = staticmethod(_openstudiomodelresources.CurveDoubleExponentialDecay_validInputUnitTypeforxValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveDoubleExponentialDecay_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveDoubleExponentialDecay_validOutputUnitTypeValues)

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient3C3(self)

    def coefficient3C4(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient3C4(self)

    def coefficient3C5(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient3C5(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: 'double') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: 'double') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: 'double') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient3C4(self, coefficient3C4: 'double') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient3C4(self, coefficient3C4)

    def setCoefficient3C5(self, coefficient3C5: 'double') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient3C5(self, coefficient3C5)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetOutputUnitType(self)
CurveDoubleExponentialDecay_swigregister = _openstudiomodelresources.CurveDoubleExponentialDecay_swigregister
CurveDoubleExponentialDecay_swigregister(CurveDoubleExponentialDecay)

def CurveDoubleExponentialDecay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveDoubleExponentialDecay_iddObjectType()
CurveDoubleExponentialDecay_iddObjectType = _openstudiomodelresources.CurveDoubleExponentialDecay_iddObjectType

def CurveDoubleExponentialDecay_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveDoubleExponentialDecay_validInputUnitTypeforxValues()
CurveDoubleExponentialDecay_validInputUnitTypeforxValues = _openstudiomodelresources.CurveDoubleExponentialDecay_validInputUnitTypeforxValues

def CurveDoubleExponentialDecay_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveDoubleExponentialDecay_validOutputUnitTypeValues()
CurveDoubleExponentialDecay_validOutputUnitTypeValues = _openstudiomodelresources.CurveDoubleExponentialDecay_validOutputUnitTypeValues


def toCurveDoubleExponentialDecay(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveDoubleExponentialDecay >":
    return _openstudiomodelresources.toCurveDoubleExponentialDecay(idfObject)
toCurveDoubleExponentialDecay = _openstudiomodelresources.toCurveDoubleExponentialDecay

def getCurveDoubleExponentialDecay(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveDoubleExponentialDecay >":
    return _openstudiomodelresources.getCurveDoubleExponentialDecay(t_model, t_handle)
getCurveDoubleExponentialDecay = _openstudiomodelresources.getCurveDoubleExponentialDecay

def getCurveDoubleExponentialDecays(t_model: 'Model') -> "std::vector< openstudio::model::CurveDoubleExponentialDecay,std::allocator< openstudio::model::CurveDoubleExponentialDecay > >":
    return _openstudiomodelresources.getCurveDoubleExponentialDecays(t_model)
getCurveDoubleExponentialDecays = _openstudiomodelresources.getCurveDoubleExponentialDecays

def getCurveDoubleExponentialDecayByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveDoubleExponentialDecay >":
    return _openstudiomodelresources.getCurveDoubleExponentialDecayByName(t_model, t_name)
getCurveDoubleExponentialDecayByName = _openstudiomodelresources.getCurveDoubleExponentialDecayByName

def getCurveDoubleExponentialDecaysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveDoubleExponentialDecay,std::allocator< openstudio::model::CurveDoubleExponentialDecay > >":
    return _openstudiomodelresources.getCurveDoubleExponentialDecaysByName(t_model, t_name, t_exactMatch)
getCurveDoubleExponentialDecaysByName = _openstudiomodelresources.getCurveDoubleExponentialDecaysByName
class CurveExponent(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveExponent, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveExponent, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveExponent(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponent
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveExponent_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveExponent_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforXValues"] = lambda x: _openstudiomodelresources.CurveExponent_validInputUnitTypeforXValues
    if _newclass:
        validInputUnitTypeforXValues = staticmethod(_openstudiomodelresources.CurveExponent_validInputUnitTypeforXValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveExponent_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveExponent_validOutputUnitTypeValues)

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveExponent_coefficient1Constant(self)

    def coefficient2Constant(self) -> "double":
        return _openstudiomodelresources.CurveExponent_coefficient2Constant(self)

    def coefficient3Constant(self) -> "double":
        return _openstudiomodelresources.CurveExponent_coefficient3Constant(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponent_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponent_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponent_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponent_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveExponent_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponent_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveExponent_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponent_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponent_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2Constant(self, coefficient2Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponent_setCoefficient2Constant(self, coefficient2Constant)

    def setCoefficient3Constant(self, coefficient3Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponent_setCoefficient3Constant(self, coefficient3Constant)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponent_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponent_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponent_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponent_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponent_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponent_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveExponent_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveExponent_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveExponent_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveExponent_resetOutputUnitType(self)
CurveExponent_swigregister = _openstudiomodelresources.CurveExponent_swigregister
CurveExponent_swigregister(CurveExponent)

def CurveExponent_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveExponent_iddObjectType()
CurveExponent_iddObjectType = _openstudiomodelresources.CurveExponent_iddObjectType

def CurveExponent_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponent_validInputUnitTypeforXValues()
CurveExponent_validInputUnitTypeforXValues = _openstudiomodelresources.CurveExponent_validInputUnitTypeforXValues

def CurveExponent_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponent_validOutputUnitTypeValues()
CurveExponent_validOutputUnitTypeValues = _openstudiomodelresources.CurveExponent_validOutputUnitTypeValues


def toCurveExponent(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveExponent >":
    return _openstudiomodelresources.toCurveExponent(idfObject)
toCurveExponent = _openstudiomodelresources.toCurveExponent

def getCurveExponent(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveExponent >":
    return _openstudiomodelresources.getCurveExponent(t_model, t_handle)
getCurveExponent = _openstudiomodelresources.getCurveExponent

def getCurveExponents(t_model: 'Model') -> "std::vector< openstudio::model::CurveExponent,std::allocator< openstudio::model::CurveExponent > >":
    return _openstudiomodelresources.getCurveExponents(t_model)
getCurveExponents = _openstudiomodelresources.getCurveExponents

def getCurveExponentByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveExponent >":
    return _openstudiomodelresources.getCurveExponentByName(t_model, t_name)
getCurveExponentByName = _openstudiomodelresources.getCurveExponentByName

def getCurveExponentsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveExponent,std::allocator< openstudio::model::CurveExponent > >":
    return _openstudiomodelresources.getCurveExponentsByName(t_model, t_name, t_exactMatch)
getCurveExponentsByName = _openstudiomodelresources.getCurveExponentsByName
class CurveExponentialDecay(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveExponentialDecay, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveExponentialDecay, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveExponentialDecay(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialDecay
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveExponentialDecay_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveExponentialDecay_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforxValues"] = lambda x: _openstudiomodelresources.CurveExponentialDecay_validInputUnitTypeforxValues
    if _newclass:
        validInputUnitTypeforxValues = staticmethod(_openstudiomodelresources.CurveExponentialDecay_validInputUnitTypeforxValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveExponentialDecay_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveExponentialDecay_validOutputUnitTypeValues)

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_coefficient3C3(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponentialDecay_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponentialDecay_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponentialDecay_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveExponentialDecay_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveExponentialDecay_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setCoefficient3C3(self, coefficient3C3)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecay_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecay_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecay_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveExponentialDecay_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveExponentialDecay_resetOutputUnitType(self)
CurveExponentialDecay_swigregister = _openstudiomodelresources.CurveExponentialDecay_swigregister
CurveExponentialDecay_swigregister(CurveExponentialDecay)

def CurveExponentialDecay_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveExponentialDecay_iddObjectType()
CurveExponentialDecay_iddObjectType = _openstudiomodelresources.CurveExponentialDecay_iddObjectType

def CurveExponentialDecay_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponentialDecay_validInputUnitTypeforxValues()
CurveExponentialDecay_validInputUnitTypeforxValues = _openstudiomodelresources.CurveExponentialDecay_validInputUnitTypeforxValues

def CurveExponentialDecay_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponentialDecay_validOutputUnitTypeValues()
CurveExponentialDecay_validOutputUnitTypeValues = _openstudiomodelresources.CurveExponentialDecay_validOutputUnitTypeValues


def toCurveExponentialDecay(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveExponentialDecay >":
    return _openstudiomodelresources.toCurveExponentialDecay(idfObject)
toCurveExponentialDecay = _openstudiomodelresources.toCurveExponentialDecay

def getCurveExponentialDecay(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveExponentialDecay >":
    return _openstudiomodelresources.getCurveExponentialDecay(t_model, t_handle)
getCurveExponentialDecay = _openstudiomodelresources.getCurveExponentialDecay

def getCurveExponentialDecays(t_model: 'Model') -> "std::vector< openstudio::model::CurveExponentialDecay,std::allocator< openstudio::model::CurveExponentialDecay > >":
    return _openstudiomodelresources.getCurveExponentialDecays(t_model)
getCurveExponentialDecays = _openstudiomodelresources.getCurveExponentialDecays

def getCurveExponentialDecayByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveExponentialDecay >":
    return _openstudiomodelresources.getCurveExponentialDecayByName(t_model, t_name)
getCurveExponentialDecayByName = _openstudiomodelresources.getCurveExponentialDecayByName

def getCurveExponentialDecaysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveExponentialDecay,std::allocator< openstudio::model::CurveExponentialDecay > >":
    return _openstudiomodelresources.getCurveExponentialDecaysByName(t_model, t_name, t_exactMatch)
getCurveExponentialDecaysByName = _openstudiomodelresources.getCurveExponentialDecaysByName
class CurveExponentialSkewNormal(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveExponentialSkewNormal, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveExponentialSkewNormal, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveExponentialSkewNormal(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialSkewNormal
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveExponentialSkewNormal_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveExponentialSkewNormal_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforxValues"] = lambda x: _openstudiomodelresources.CurveExponentialSkewNormal_validInputUnitTypeforxValues
    if _newclass:
        validInputUnitTypeforxValues = staticmethod(_openstudiomodelresources.CurveExponentialSkewNormal_validInputUnitTypeforxValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveExponentialSkewNormal_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveExponentialSkewNormal_validOutputUnitTypeValues)

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient3C3(self)

    def coefficient4C4(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient4C4(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveExponentialSkewNormal_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponentialSkewNormal_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveExponentialSkewNormal_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveExponentialSkewNormal_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveExponentialSkewNormal_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient4C4(self, coefficient4C4)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveExponentialSkewNormal_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetOutputUnitType(self)
CurveExponentialSkewNormal_swigregister = _openstudiomodelresources.CurveExponentialSkewNormal_swigregister
CurveExponentialSkewNormal_swigregister(CurveExponentialSkewNormal)

def CurveExponentialSkewNormal_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveExponentialSkewNormal_iddObjectType()
CurveExponentialSkewNormal_iddObjectType = _openstudiomodelresources.CurveExponentialSkewNormal_iddObjectType

def CurveExponentialSkewNormal_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponentialSkewNormal_validInputUnitTypeforxValues()
CurveExponentialSkewNormal_validInputUnitTypeforxValues = _openstudiomodelresources.CurveExponentialSkewNormal_validInputUnitTypeforxValues

def CurveExponentialSkewNormal_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveExponentialSkewNormal_validOutputUnitTypeValues()
CurveExponentialSkewNormal_validOutputUnitTypeValues = _openstudiomodelresources.CurveExponentialSkewNormal_validOutputUnitTypeValues


def toCurveExponentialSkewNormal(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveExponentialSkewNormal >":
    return _openstudiomodelresources.toCurveExponentialSkewNormal(idfObject)
toCurveExponentialSkewNormal = _openstudiomodelresources.toCurveExponentialSkewNormal

def getCurveExponentialSkewNormal(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveExponentialSkewNormal >":
    return _openstudiomodelresources.getCurveExponentialSkewNormal(t_model, t_handle)
getCurveExponentialSkewNormal = _openstudiomodelresources.getCurveExponentialSkewNormal

def getCurveExponentialSkewNormals(t_model: 'Model') -> "std::vector< openstudio::model::CurveExponentialSkewNormal,std::allocator< openstudio::model::CurveExponentialSkewNormal > >":
    return _openstudiomodelresources.getCurveExponentialSkewNormals(t_model)
getCurveExponentialSkewNormals = _openstudiomodelresources.getCurveExponentialSkewNormals

def getCurveExponentialSkewNormalByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveExponentialSkewNormal >":
    return _openstudiomodelresources.getCurveExponentialSkewNormalByName(t_model, t_name)
getCurveExponentialSkewNormalByName = _openstudiomodelresources.getCurveExponentialSkewNormalByName

def getCurveExponentialSkewNormalsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveExponentialSkewNormal,std::allocator< openstudio::model::CurveExponentialSkewNormal > >":
    return _openstudiomodelresources.getCurveExponentialSkewNormalsByName(t_model, t_name, t_exactMatch)
getCurveExponentialSkewNormalsByName = _openstudiomodelresources.getCurveExponentialSkewNormalsByName
class CurveFanPressureRise(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveFanPressureRise, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveFanPressureRise, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveFanPressureRise(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFanPressureRise
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveFanPressureRise_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveFanPressureRise_iddObjectType)

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_coefficient3C3(self)

    def coefficient4C4(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_coefficient4C4(self)

    def minimumValueofQfan(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_minimumValueofQfan(self)

    def maximumValueofQfan(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_maximumValueofQfan(self)

    def minimumValueofPsm(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_minimumValueofPsm(self)

    def maximumValueofPsm(self) -> "double":
        return _openstudiomodelresources.CurveFanPressureRise_maximumValueofPsm(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFanPressureRise_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFanPressureRise_maximumCurveOutput(self)

    def setCoefficient1C1(self, coefficient1C1: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient4C4(self, coefficient4C4)

    def setMinimumValueofQfan(self, minimumValueofQfan: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMinimumValueofQfan(self, minimumValueofQfan)

    def setMaximumValueofQfan(self, maximumValueofQfan: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMaximumValueofQfan(self, maximumValueofQfan)

    def setMinimumValueofPsm(self, minimumValueofPsm: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMinimumValueofPsm(self, minimumValueofPsm)

    def setMaximumValueofPsm(self, maximumValueofPsm: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMaximumValueofPsm(self, maximumValueofPsm)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveFanPressureRise_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveFanPressureRise_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveFanPressureRise_resetMaximumCurveOutput(self)
CurveFanPressureRise_swigregister = _openstudiomodelresources.CurveFanPressureRise_swigregister
CurveFanPressureRise_swigregister(CurveFanPressureRise)

def CurveFanPressureRise_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveFanPressureRise_iddObjectType()
CurveFanPressureRise_iddObjectType = _openstudiomodelresources.CurveFanPressureRise_iddObjectType


def toCurveFanPressureRise(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveFanPressureRise >":
    return _openstudiomodelresources.toCurveFanPressureRise(idfObject)
toCurveFanPressureRise = _openstudiomodelresources.toCurveFanPressureRise

def getCurveFanPressureRise(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveFanPressureRise >":
    return _openstudiomodelresources.getCurveFanPressureRise(t_model, t_handle)
getCurveFanPressureRise = _openstudiomodelresources.getCurveFanPressureRise

def getCurveFanPressureRises(t_model: 'Model') -> "std::vector< openstudio::model::CurveFanPressureRise,std::allocator< openstudio::model::CurveFanPressureRise > >":
    return _openstudiomodelresources.getCurveFanPressureRises(t_model)
getCurveFanPressureRises = _openstudiomodelresources.getCurveFanPressureRises

def getCurveFanPressureRiseByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveFanPressureRise >":
    return _openstudiomodelresources.getCurveFanPressureRiseByName(t_model, t_name)
getCurveFanPressureRiseByName = _openstudiomodelresources.getCurveFanPressureRiseByName

def getCurveFanPressureRisesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveFanPressureRise,std::allocator< openstudio::model::CurveFanPressureRise > >":
    return _openstudiomodelresources.getCurveFanPressureRisesByName(t_model, t_name, t_exactMatch)
getCurveFanPressureRisesByName = _openstudiomodelresources.getCurveFanPressureRisesByName
class CurveFunctionalPressureDrop(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveFunctionalPressureDrop, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveFunctionalPressureDrop, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveFunctionalPressureDrop(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFunctionalPressureDrop
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveFunctionalPressureDrop_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveFunctionalPressureDrop_iddObjectType)

    def diameter(self) -> "double":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_diameter(self)

    def minorLossCoefficient(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_minorLossCoefficient(self)

    def length(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_length(self)

    def roughness(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_roughness(self)

    def fixedFrictionFactor(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_fixedFrictionFactor(self)

    def setDiameter(self, diameter: 'double') -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setDiameter(self, diameter)

    def setMinorLossCoefficient(self, minorLossCoefficient: 'double') -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setMinorLossCoefficient(self, minorLossCoefficient)

    def resetMinorLossCoefficient(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetMinorLossCoefficient(self)

    def setLength(self, length: 'double') -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setLength(self, length)

    def resetLength(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetLength(self)

    def setRoughness(self, roughness: 'double') -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setRoughness(self, roughness)

    def resetRoughness(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetRoughness(self)

    def setFixedFrictionFactor(self, fixedFrictionFactor: 'double') -> "bool":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setFixedFrictionFactor(self, fixedFrictionFactor)

    def resetFixedFrictionFactor(self) -> "void":
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetFixedFrictionFactor(self)
CurveFunctionalPressureDrop_swigregister = _openstudiomodelresources.CurveFunctionalPressureDrop_swigregister
CurveFunctionalPressureDrop_swigregister(CurveFunctionalPressureDrop)

def CurveFunctionalPressureDrop_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveFunctionalPressureDrop_iddObjectType()
CurveFunctionalPressureDrop_iddObjectType = _openstudiomodelresources.CurveFunctionalPressureDrop_iddObjectType


def toCurveFunctionalPressureDrop(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveFunctionalPressureDrop >":
    return _openstudiomodelresources.toCurveFunctionalPressureDrop(idfObject)
toCurveFunctionalPressureDrop = _openstudiomodelresources.toCurveFunctionalPressureDrop

def getCurveFunctionalPressureDrop(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveFunctionalPressureDrop >":
    return _openstudiomodelresources.getCurveFunctionalPressureDrop(t_model, t_handle)
getCurveFunctionalPressureDrop = _openstudiomodelresources.getCurveFunctionalPressureDrop

def getCurveFunctionalPressureDrops(t_model: 'Model') -> "std::vector< openstudio::model::CurveFunctionalPressureDrop,std::allocator< openstudio::model::CurveFunctionalPressureDrop > >":
    return _openstudiomodelresources.getCurveFunctionalPressureDrops(t_model)
getCurveFunctionalPressureDrops = _openstudiomodelresources.getCurveFunctionalPressureDrops

def getCurveFunctionalPressureDropByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveFunctionalPressureDrop >":
    return _openstudiomodelresources.getCurveFunctionalPressureDropByName(t_model, t_name)
getCurveFunctionalPressureDropByName = _openstudiomodelresources.getCurveFunctionalPressureDropByName

def getCurveFunctionalPressureDropsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveFunctionalPressureDrop,std::allocator< openstudio::model::CurveFunctionalPressureDrop > >":
    return _openstudiomodelresources.getCurveFunctionalPressureDropsByName(t_model, t_name, t_exactMatch)
getCurveFunctionalPressureDropsByName = _openstudiomodelresources.getCurveFunctionalPressureDropsByName
class CurveLinear(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveLinear, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveLinear, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveLinear(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveLinear
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveLinear_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveLinear_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforXValues"] = lambda x: _openstudiomodelresources.CurveLinear_validInputUnitTypeforXValues
    if _newclass:
        validInputUnitTypeforXValues = staticmethod(_openstudiomodelresources.CurveLinear_validInputUnitTypeforXValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveLinear_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveLinear_validOutputUnitTypeValues)

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveLinear_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveLinear_coefficient2x(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveLinear_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveLinear_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveLinear_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveLinear_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveLinear_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveLinear_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveLinear_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveLinear_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveLinear_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: 'double') -> "bool":
        return _openstudiomodelresources.CurveLinear_setCoefficient2x(self, coefficient2x)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveLinear_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveLinear_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveLinear_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveLinear_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveLinear_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveLinear_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveLinear_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveLinear_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveLinear_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveLinear_resetOutputUnitType(self)
CurveLinear_swigregister = _openstudiomodelresources.CurveLinear_swigregister
CurveLinear_swigregister(CurveLinear)

def CurveLinear_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveLinear_iddObjectType()
CurveLinear_iddObjectType = _openstudiomodelresources.CurveLinear_iddObjectType

def CurveLinear_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveLinear_validInputUnitTypeforXValues()
CurveLinear_validInputUnitTypeforXValues = _openstudiomodelresources.CurveLinear_validInputUnitTypeforXValues

def CurveLinear_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveLinear_validOutputUnitTypeValues()
CurveLinear_validOutputUnitTypeValues = _openstudiomodelresources.CurveLinear_validOutputUnitTypeValues


def toCurveLinear(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveLinear >":
    return _openstudiomodelresources.toCurveLinear(idfObject)
toCurveLinear = _openstudiomodelresources.toCurveLinear

def getCurveLinear(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveLinear >":
    return _openstudiomodelresources.getCurveLinear(t_model, t_handle)
getCurveLinear = _openstudiomodelresources.getCurveLinear

def getCurveLinears(t_model: 'Model') -> "std::vector< openstudio::model::CurveLinear,std::allocator< openstudio::model::CurveLinear > >":
    return _openstudiomodelresources.getCurveLinears(t_model)
getCurveLinears = _openstudiomodelresources.getCurveLinears

def getCurveLinearByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveLinear >":
    return _openstudiomodelresources.getCurveLinearByName(t_model, t_name)
getCurveLinearByName = _openstudiomodelresources.getCurveLinearByName

def getCurveLinearsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveLinear,std::allocator< openstudio::model::CurveLinear > >":
    return _openstudiomodelresources.getCurveLinearsByName(t_model, t_name, t_exactMatch)
getCurveLinearsByName = _openstudiomodelresources.getCurveLinearsByName
class CurveQuadratic(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveQuadratic, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveQuadratic, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveQuadratic(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadratic
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveQuadratic_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveQuadratic_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforXValues"] = lambda x: _openstudiomodelresources.CurveQuadratic_validInputUnitTypeforXValues
    if _newclass:
        validInputUnitTypeforXValues = staticmethod(_openstudiomodelresources.CurveQuadratic_validInputUnitTypeforXValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveQuadratic_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveQuadratic_validOutputUnitTypeValues)

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_coefficient3xPOW2(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuadratic_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuadratic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuadratic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadratic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadratic_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadratic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadratic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuadratic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuadratic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveQuadratic_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveQuadratic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveQuadratic_resetOutputUnitType(self)
CurveQuadratic_swigregister = _openstudiomodelresources.CurveQuadratic_swigregister
CurveQuadratic_swigregister(CurveQuadratic)

def CurveQuadratic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveQuadratic_iddObjectType()
CurveQuadratic_iddObjectType = _openstudiomodelresources.CurveQuadratic_iddObjectType

def CurveQuadratic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadratic_validInputUnitTypeforXValues()
CurveQuadratic_validInputUnitTypeforXValues = _openstudiomodelresources.CurveQuadratic_validInputUnitTypeforXValues

def CurveQuadratic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadratic_validOutputUnitTypeValues()
CurveQuadratic_validOutputUnitTypeValues = _openstudiomodelresources.CurveQuadratic_validOutputUnitTypeValues


def toCurveQuadratic(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveQuadratic >":
    return _openstudiomodelresources.toCurveQuadratic(idfObject)
toCurveQuadratic = _openstudiomodelresources.toCurveQuadratic

def getCurveQuadratic(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveQuadratic >":
    return _openstudiomodelresources.getCurveQuadratic(t_model, t_handle)
getCurveQuadratic = _openstudiomodelresources.getCurveQuadratic

def getCurveQuadratics(t_model: 'Model') -> "std::vector< openstudio::model::CurveQuadratic,std::allocator< openstudio::model::CurveQuadratic > >":
    return _openstudiomodelresources.getCurveQuadratics(t_model)
getCurveQuadratics = _openstudiomodelresources.getCurveQuadratics

def getCurveQuadraticByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveQuadratic >":
    return _openstudiomodelresources.getCurveQuadraticByName(t_model, t_name)
getCurveQuadraticByName = _openstudiomodelresources.getCurveQuadraticByName

def getCurveQuadraticsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveQuadratic,std::allocator< openstudio::model::CurveQuadratic > >":
    return _openstudiomodelresources.getCurveQuadraticsByName(t_model, t_name, t_exactMatch)
getCurveQuadraticsByName = _openstudiomodelresources.getCurveQuadraticsByName
class CurveQuadraticLinear(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveQuadraticLinear, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveQuadraticLinear, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveQuadraticLinear(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadraticLinear
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveQuadraticLinear_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveQuadraticLinear_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforXValues"] = lambda x: _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforXValues
    if _newclass:
        validInputUnitTypeforXValues = staticmethod(_openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforXValues)
    __swig_getmethods__["validInputUnitTypeforYValues"] = lambda x: _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforYValues
    if _newclass:
        validInputUnitTypeforYValues = staticmethod(_openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforYValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveQuadraticLinear_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveQuadraticLinear_validOutputUnitTypeValues)

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient3xPOW2(self)

    def coefficient4y(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient4y(self)

    def coefficient5xTIMESY(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient5xTIMESY(self)

    def coefficient6xPOW2TIMESY(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient6xPOW2TIMESY(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_maximumValueofx(self)

    def minimumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_minimumValueofy(self)

    def maximumValueofy(self) -> "double":
        return _openstudiomodelresources.CurveQuadraticLinear_maximumValueofy(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuadraticLinear_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuadraticLinear_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadraticLinear_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadraticLinear_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_isInputUnitTypeforYDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveQuadraticLinear_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4y(self, coefficient4y: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient4y(self, coefficient4y)

    def setCoefficient5xTIMESY(self, coefficient5xTIMESY: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient5xTIMESY(self, coefficient5xTIMESY)

    def setCoefficient6xPOW2TIMESY(self, coefficient6xPOW2TIMESY: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient6xPOW2TIMESY(self, coefficient6xPOW2TIMESY)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMaximumValueofy(self, maximumValueofy)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetInputUnitTypeforY(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveQuadraticLinear_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveQuadraticLinear_resetOutputUnitType(self)
CurveQuadraticLinear_swigregister = _openstudiomodelresources.CurveQuadraticLinear_swigregister
CurveQuadraticLinear_swigregister(CurveQuadraticLinear)

def CurveQuadraticLinear_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveQuadraticLinear_iddObjectType()
CurveQuadraticLinear_iddObjectType = _openstudiomodelresources.CurveQuadraticLinear_iddObjectType

def CurveQuadraticLinear_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforXValues()
CurveQuadraticLinear_validInputUnitTypeforXValues = _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforXValues

def CurveQuadraticLinear_validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforYValues()
CurveQuadraticLinear_validInputUnitTypeforYValues = _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforYValues

def CurveQuadraticLinear_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuadraticLinear_validOutputUnitTypeValues()
CurveQuadraticLinear_validOutputUnitTypeValues = _openstudiomodelresources.CurveQuadraticLinear_validOutputUnitTypeValues


def toCurveQuadraticLinear(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveQuadraticLinear >":
    return _openstudiomodelresources.toCurveQuadraticLinear(idfObject)
toCurveQuadraticLinear = _openstudiomodelresources.toCurveQuadraticLinear

def getCurveQuadraticLinear(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveQuadraticLinear >":
    return _openstudiomodelresources.getCurveQuadraticLinear(t_model, t_handle)
getCurveQuadraticLinear = _openstudiomodelresources.getCurveQuadraticLinear

def getCurveQuadraticLinears(t_model: 'Model') -> "std::vector< openstudio::model::CurveQuadraticLinear,std::allocator< openstudio::model::CurveQuadraticLinear > >":
    return _openstudiomodelresources.getCurveQuadraticLinears(t_model)
getCurveQuadraticLinears = _openstudiomodelresources.getCurveQuadraticLinears

def getCurveQuadraticLinearByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveQuadraticLinear >":
    return _openstudiomodelresources.getCurveQuadraticLinearByName(t_model, t_name)
getCurveQuadraticLinearByName = _openstudiomodelresources.getCurveQuadraticLinearByName

def getCurveQuadraticLinearsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveQuadraticLinear,std::allocator< openstudio::model::CurveQuadraticLinear > >":
    return _openstudiomodelresources.getCurveQuadraticLinearsByName(t_model, t_name, t_exactMatch)
getCurveQuadraticLinearsByName = _openstudiomodelresources.getCurveQuadraticLinearsByName
class CurveQuartic(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveQuartic, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveQuartic, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveQuartic(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuartic
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveQuartic_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveQuartic_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforXValues"] = lambda x: _openstudiomodelresources.CurveQuartic_validInputUnitTypeforXValues
    if _newclass:
        validInputUnitTypeforXValues = staticmethod(_openstudiomodelresources.CurveQuartic_validInputUnitTypeforXValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveQuartic_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveQuartic_validOutputUnitTypeValues)

    def coefficient1Constant(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient1Constant(self)

    def coefficient2x(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient2x(self)

    def coefficient3xPOW2(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient3xPOW2(self)

    def coefficient4xPOW3(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient4xPOW3(self)

    def coefficient5xPOW4(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_coefficient5xPOW4(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveQuartic_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuartic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveQuartic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveQuartic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuartic_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveQuartic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveQuartic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4xPOW3(self, coefficient4xPOW3: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient4xPOW3(self, coefficient4xPOW3)

    def setCoefficient5xPOW4(self, coefficient5xPOW4: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setCoefficient5xPOW4(self, coefficient5xPOW4)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuartic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveQuartic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveQuartic_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveQuartic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveQuartic_resetOutputUnitType(self)
CurveQuartic_swigregister = _openstudiomodelresources.CurveQuartic_swigregister
CurveQuartic_swigregister(CurveQuartic)

def CurveQuartic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveQuartic_iddObjectType()
CurveQuartic_iddObjectType = _openstudiomodelresources.CurveQuartic_iddObjectType

def CurveQuartic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuartic_validInputUnitTypeforXValues()
CurveQuartic_validInputUnitTypeforXValues = _openstudiomodelresources.CurveQuartic_validInputUnitTypeforXValues

def CurveQuartic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveQuartic_validOutputUnitTypeValues()
CurveQuartic_validOutputUnitTypeValues = _openstudiomodelresources.CurveQuartic_validOutputUnitTypeValues


def toCurveQuartic(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveQuartic >":
    return _openstudiomodelresources.toCurveQuartic(idfObject)
toCurveQuartic = _openstudiomodelresources.toCurveQuartic

def getCurveQuartic(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveQuartic >":
    return _openstudiomodelresources.getCurveQuartic(t_model, t_handle)
getCurveQuartic = _openstudiomodelresources.getCurveQuartic

def getCurveQuartics(t_model: 'Model') -> "std::vector< openstudio::model::CurveQuartic,std::allocator< openstudio::model::CurveQuartic > >":
    return _openstudiomodelresources.getCurveQuartics(t_model)
getCurveQuartics = _openstudiomodelresources.getCurveQuartics

def getCurveQuarticByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveQuartic >":
    return _openstudiomodelresources.getCurveQuarticByName(t_model, t_name)
getCurveQuarticByName = _openstudiomodelresources.getCurveQuarticByName

def getCurveQuarticsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveQuartic,std::allocator< openstudio::model::CurveQuartic > >":
    return _openstudiomodelresources.getCurveQuarticsByName(t_model, t_name, t_exactMatch)
getCurveQuarticsByName = _openstudiomodelresources.getCurveQuarticsByName
class CurveRectangularHyperbola1(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveRectangularHyperbola1, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveRectangularHyperbola1, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveRectangularHyperbola1(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola1
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveRectangularHyperbola1_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveRectangularHyperbola1_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforxValues"] = lambda x: _openstudiomodelresources.CurveRectangularHyperbola1_validInputUnitTypeforxValues
    if _newclass:
        validInputUnitTypeforxValues = staticmethod(_openstudiomodelresources.CurveRectangularHyperbola1_validInputUnitTypeforxValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveRectangularHyperbola1_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveRectangularHyperbola1_validOutputUnitTypeValues)

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_coefficient3C3(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola1_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveRectangularHyperbola1_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveRectangularHyperbola1_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveRectangularHyperbola1_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveRectangularHyperbola1_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setCoefficient3C3(self, coefficient3C3)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola1_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetOutputUnitType(self)
CurveRectangularHyperbola1_swigregister = _openstudiomodelresources.CurveRectangularHyperbola1_swigregister
CurveRectangularHyperbola1_swigregister(CurveRectangularHyperbola1)

def CurveRectangularHyperbola1_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveRectangularHyperbola1_iddObjectType()
CurveRectangularHyperbola1_iddObjectType = _openstudiomodelresources.CurveRectangularHyperbola1_iddObjectType

def CurveRectangularHyperbola1_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveRectangularHyperbola1_validInputUnitTypeforxValues()
CurveRectangularHyperbola1_validInputUnitTypeforxValues = _openstudiomodelresources.CurveRectangularHyperbola1_validInputUnitTypeforxValues

def CurveRectangularHyperbola1_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveRectangularHyperbola1_validOutputUnitTypeValues()
CurveRectangularHyperbola1_validOutputUnitTypeValues = _openstudiomodelresources.CurveRectangularHyperbola1_validOutputUnitTypeValues


def toCurveRectangularHyperbola1(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveRectangularHyperbola1 >":
    return _openstudiomodelresources.toCurveRectangularHyperbola1(idfObject)
toCurveRectangularHyperbola1 = _openstudiomodelresources.toCurveRectangularHyperbola1

def getCurveRectangularHyperbola1(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveRectangularHyperbola1 >":
    return _openstudiomodelresources.getCurveRectangularHyperbola1(t_model, t_handle)
getCurveRectangularHyperbola1 = _openstudiomodelresources.getCurveRectangularHyperbola1

def getCurveRectangularHyperbola1s(t_model: 'Model') -> "std::vector< openstudio::model::CurveRectangularHyperbola1,std::allocator< openstudio::model::CurveRectangularHyperbola1 > >":
    return _openstudiomodelresources.getCurveRectangularHyperbola1s(t_model)
getCurveRectangularHyperbola1s = _openstudiomodelresources.getCurveRectangularHyperbola1s

def getCurveRectangularHyperbola1ByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveRectangularHyperbola1 >":
    return _openstudiomodelresources.getCurveRectangularHyperbola1ByName(t_model, t_name)
getCurveRectangularHyperbola1ByName = _openstudiomodelresources.getCurveRectangularHyperbola1ByName

def getCurveRectangularHyperbola1sByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveRectangularHyperbola1,std::allocator< openstudio::model::CurveRectangularHyperbola1 > >":
    return _openstudiomodelresources.getCurveRectangularHyperbola1sByName(t_model, t_name, t_exactMatch)
getCurveRectangularHyperbola1sByName = _openstudiomodelresources.getCurveRectangularHyperbola1sByName
class CurveRectangularHyperbola2(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveRectangularHyperbola2, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveRectangularHyperbola2, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveRectangularHyperbola2(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola2
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveRectangularHyperbola2_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveRectangularHyperbola2_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforxValues"] = lambda x: _openstudiomodelresources.CurveRectangularHyperbola2_validInputUnitTypeforxValues
    if _newclass:
        validInputUnitTypeforxValues = staticmethod(_openstudiomodelresources.CurveRectangularHyperbola2_validInputUnitTypeforxValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveRectangularHyperbola2_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveRectangularHyperbola2_validOutputUnitTypeValues)

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_coefficient3C3(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveRectangularHyperbola2_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveRectangularHyperbola2_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveRectangularHyperbola2_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveRectangularHyperbola2_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveRectangularHyperbola2_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setCoefficient3C3(self, coefficient3C3)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveRectangularHyperbola2_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetOutputUnitType(self)
CurveRectangularHyperbola2_swigregister = _openstudiomodelresources.CurveRectangularHyperbola2_swigregister
CurveRectangularHyperbola2_swigregister(CurveRectangularHyperbola2)

def CurveRectangularHyperbola2_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveRectangularHyperbola2_iddObjectType()
CurveRectangularHyperbola2_iddObjectType = _openstudiomodelresources.CurveRectangularHyperbola2_iddObjectType

def CurveRectangularHyperbola2_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveRectangularHyperbola2_validInputUnitTypeforxValues()
CurveRectangularHyperbola2_validInputUnitTypeforxValues = _openstudiomodelresources.CurveRectangularHyperbola2_validInputUnitTypeforxValues

def CurveRectangularHyperbola2_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveRectangularHyperbola2_validOutputUnitTypeValues()
CurveRectangularHyperbola2_validOutputUnitTypeValues = _openstudiomodelresources.CurveRectangularHyperbola2_validOutputUnitTypeValues


def toCurveRectangularHyperbola2(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveRectangularHyperbola2 >":
    return _openstudiomodelresources.toCurveRectangularHyperbola2(idfObject)
toCurveRectangularHyperbola2 = _openstudiomodelresources.toCurveRectangularHyperbola2

def getCurveRectangularHyperbola2(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveRectangularHyperbola2 >":
    return _openstudiomodelresources.getCurveRectangularHyperbola2(t_model, t_handle)
getCurveRectangularHyperbola2 = _openstudiomodelresources.getCurveRectangularHyperbola2

def getCurveRectangularHyperbola2s(t_model: 'Model') -> "std::vector< openstudio::model::CurveRectangularHyperbola2,std::allocator< openstudio::model::CurveRectangularHyperbola2 > >":
    return _openstudiomodelresources.getCurveRectangularHyperbola2s(t_model)
getCurveRectangularHyperbola2s = _openstudiomodelresources.getCurveRectangularHyperbola2s

def getCurveRectangularHyperbola2ByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveRectangularHyperbola2 >":
    return _openstudiomodelresources.getCurveRectangularHyperbola2ByName(t_model, t_name)
getCurveRectangularHyperbola2ByName = _openstudiomodelresources.getCurveRectangularHyperbola2ByName

def getCurveRectangularHyperbola2sByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveRectangularHyperbola2,std::allocator< openstudio::model::CurveRectangularHyperbola2 > >":
    return _openstudiomodelresources.getCurveRectangularHyperbola2sByName(t_model, t_name, t_exactMatch)
getCurveRectangularHyperbola2sByName = _openstudiomodelresources.getCurveRectangularHyperbola2sByName
class CurveSigmoid(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveSigmoid, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveSigmoid, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveSigmoid(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveSigmoid
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveSigmoid_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveSigmoid_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforxValues"] = lambda x: _openstudiomodelresources.CurveSigmoid_validInputUnitTypeforxValues
    if _newclass:
        validInputUnitTypeforxValues = staticmethod(_openstudiomodelresources.CurveSigmoid_validInputUnitTypeforxValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveSigmoid_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveSigmoid_validOutputUnitTypeValues)

    def coefficient1C1(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient1C1(self)

    def coefficient2C2(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient2C2(self)

    def coefficient3C3(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient3C3(self)

    def coefficient4C4(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient4C4(self)

    def coefficient5C5(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_coefficient5C5(self)

    def minimumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_minimumValueofx(self)

    def maximumValueofx(self) -> "double":
        return _openstudiomodelresources.CurveSigmoid_maximumValueofx(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveSigmoid_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveSigmoid_maximumCurveOutput(self)

    def inputUnitTypeforx(self) -> "std::string":
        return _openstudiomodelresources.CurveSigmoid_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoid_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveSigmoid_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveSigmoid_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1: 'double') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2: 'double') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3: 'double') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4: 'double') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient4C4(self, coefficient4C4)

    def setCoefficient5C5(self, coefficient5C5: 'double') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setCoefficient5C5(self, coefficient5C5)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveSigmoid_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveSigmoid_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self) -> "void":
        return _openstudiomodelresources.CurveSigmoid_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveSigmoid_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveSigmoid_resetOutputUnitType(self)
CurveSigmoid_swigregister = _openstudiomodelresources.CurveSigmoid_swigregister
CurveSigmoid_swigregister(CurveSigmoid)

def CurveSigmoid_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveSigmoid_iddObjectType()
CurveSigmoid_iddObjectType = _openstudiomodelresources.CurveSigmoid_iddObjectType

def CurveSigmoid_validInputUnitTypeforxValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveSigmoid_validInputUnitTypeforxValues()
CurveSigmoid_validInputUnitTypeforxValues = _openstudiomodelresources.CurveSigmoid_validInputUnitTypeforxValues

def CurveSigmoid_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveSigmoid_validOutputUnitTypeValues()
CurveSigmoid_validOutputUnitTypeValues = _openstudiomodelresources.CurveSigmoid_validOutputUnitTypeValues


def toCurveSigmoid(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveSigmoid >":
    return _openstudiomodelresources.toCurveSigmoid(idfObject)
toCurveSigmoid = _openstudiomodelresources.toCurveSigmoid

def getCurveSigmoid(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveSigmoid >":
    return _openstudiomodelresources.getCurveSigmoid(t_model, t_handle)
getCurveSigmoid = _openstudiomodelresources.getCurveSigmoid

def getCurveSigmoids(t_model: 'Model') -> "std::vector< openstudio::model::CurveSigmoid,std::allocator< openstudio::model::CurveSigmoid > >":
    return _openstudiomodelresources.getCurveSigmoids(t_model)
getCurveSigmoids = _openstudiomodelresources.getCurveSigmoids

def getCurveSigmoidByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveSigmoid >":
    return _openstudiomodelresources.getCurveSigmoidByName(t_model, t_name)
getCurveSigmoidByName = _openstudiomodelresources.getCurveSigmoidByName

def getCurveSigmoidsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveSigmoid,std::allocator< openstudio::model::CurveSigmoid > >":
    return _openstudiomodelresources.getCurveSigmoidsByName(t_model, t_name, t_exactMatch)
getCurveSigmoidsByName = _openstudiomodelresources.getCurveSigmoidsByName
class CurveTriquadratic(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveTriquadratic, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveTriquadratic, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_CurveTriquadratic(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_CurveTriquadratic
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.CurveTriquadratic_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.CurveTriquadratic_iddObjectType)
    __swig_getmethods__["validInputUnitTypeforXValues"] = lambda x: _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforXValues
    if _newclass:
        validInputUnitTypeforXValues = staticmethod(_openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforXValues)
    __swig_getmethods__["validInputUnitTypeforYValues"] = lambda x: _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforYValues
    if _newclass:
        validInputUnitTypeforYValues = staticmethod(_openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforYValues)
    __swig_getmethods__["validInputUnitTypeforZValues"] = lambda x: _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforZValues
    if _newclass:
        validInputUnitTypeforZValues = staticmethod(_openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforZValues)
    __swig_getmethods__["validOutputUnitTypeValues"] = lambda x: _openstudiomodelresources.CurveTriquadratic_validOutputUnitTypeValues
    if _newclass:
        validOutputUnitTypeValues = staticmethod(_openstudiomodelresources.CurveTriquadratic_validOutputUnitTypeValues)

    def coefficient1Constant(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient1Constant(self)

    def coefficient2xPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient2xPOW2(self)

    def coefficient3x(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient3x(self)

    def coefficient4yPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient4yPOW2(self)

    def coefficient5y(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient5y(self)

    def coefficient6zPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient6zPOW2(self)

    def coefficient7z(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient7z(self)

    def coefficient8xPOW2TIMESYPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient8xPOW2TIMESYPOW2(self)

    def coefficient9xTIMESY(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient9xTIMESY(self)

    def coefficient10xTIMESYPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient10xTIMESYPOW2(self)

    def coefficient11xPOW2TIMESY(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient11xPOW2TIMESY(self)

    def coefficient12xPOW2TIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient12xPOW2TIMESZPOW2(self)

    def coefficient13xTIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient13xTIMESZ(self)

    def coefficient14xTIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient14xTIMESZPOW2(self)

    def coefficient15xPOW2TIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient15xPOW2TIMESZ(self)

    def coefficient16yPOW2TIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient16yPOW2TIMESZPOW2(self)

    def coefficient17yTIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient17yTIMESZ(self)

    def coefficient18yTIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient18yTIMESZPOW2(self)

    def coefficient19yPOW2TIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient19yPOW2TIMESZ(self)

    def coefficient20xPOW2TIMESYPOW2TIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient20xPOW2TIMESYPOW2TIMESZPOW2(self)

    def coefficient21xPOW2TIMESYPOW2TIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient21xPOW2TIMESYPOW2TIMESZ(self)

    def coefficient22xPOW2TIMESYTIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient22xPOW2TIMESYTIMESZPOW2(self)

    def coefficient23xTIMESYPOW2TIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient23xTIMESYPOW2TIMESZPOW2(self)

    def coefficient24xPOW2TIMESYTIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient24xPOW2TIMESYTIMESZ(self)

    def coefficient25xTIMESYPOW2TIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient25xTIMESYPOW2TIMESZ(self)

    def coefficient26xTIMESYTIMESZPOW2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient26xTIMESYTIMESZPOW2(self)

    def coefficient27xTIMESYTIMESZ(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_coefficient27xTIMESYTIMESZ(self)

    def minimumValueofx(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_minimumValueofx(self)

    def maximumValueofx(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_maximumValueofx(self)

    def minimumValueofy(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_minimumValueofy(self)

    def maximumValueofy(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_maximumValueofy(self)

    def minimumValueofz(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_minimumValueofz(self)

    def maximumValueofz(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_maximumValueofz(self)

    def minimumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_minimumCurveOutput(self)

    def maximumCurveOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.CurveTriquadratic_maximumCurveOutput(self)

    def inputUnitTypeforX(self) -> "std::string":
        return _openstudiomodelresources.CurveTriquadratic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self) -> "std::string":
        return _openstudiomodelresources.CurveTriquadratic_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_isInputUnitTypeforYDefaulted(self)

    def inputUnitTypeforZ(self) -> "std::string":
        return _openstudiomodelresources.CurveTriquadratic_inputUnitTypeforZ(self)

    def isInputUnitTypeforZDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_isInputUnitTypeforZDefaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.CurveTriquadratic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient1Constant(self, coefficient1Constant)

    def resetCoefficient1Constant(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient1Constant(self)

    def setCoefficient2xPOW2(self, coefficient2xPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient2xPOW2(self, coefficient2xPOW2)

    def resetCoefficient2xPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient2xPOW2(self)

    def setCoefficient3x(self, coefficient3x: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient3x(self, coefficient3x)

    def resetCoefficient3x(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient3x(self)

    def setCoefficient4yPOW2(self, coefficient4yPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient4yPOW2(self, coefficient4yPOW2)

    def resetCoefficient4yPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient4yPOW2(self)

    def setCoefficient5y(self, coefficient5y: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient5y(self, coefficient5y)

    def resetCoefficient5y(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient5y(self)

    def setCoefficient6zPOW2(self, coefficient6zPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient6zPOW2(self, coefficient6zPOW2)

    def resetCoefficient6zPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient6zPOW2(self)

    def setCoefficient7z(self, coefficient7z: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient7z(self, coefficient7z)

    def resetCoefficient7z(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient7z(self)

    def setCoefficient8xPOW2TIMESYPOW2(self, coefficient8xPOW2TIMESYPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient8xPOW2TIMESYPOW2(self, coefficient8xPOW2TIMESYPOW2)

    def resetCoefficient8xPOW2TIMESYPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient8xPOW2TIMESYPOW2(self)

    def setCoefficient9xTIMESY(self, coefficient9xTIMESY: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient9xTIMESY(self, coefficient9xTIMESY)

    def resetCoefficient9xTIMESY(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient9xTIMESY(self)

    def setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2)

    def resetCoefficient10xTIMESYPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient10xTIMESYPOW2(self)

    def setCoefficient11xPOW2TIMESY(self, coefficient11xPOW2TIMESY: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient11xPOW2TIMESY(self, coefficient11xPOW2TIMESY)

    def resetCoefficient11xPOW2TIMESY(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient11xPOW2TIMESY(self)

    def setCoefficient12xPOW2TIMESZPOW2(self, coefficient12xPOW2TIMESZPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient12xPOW2TIMESZPOW2(self, coefficient12xPOW2TIMESZPOW2)

    def resetCoefficient12xPOW2TIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient12xPOW2TIMESZPOW2(self)

    def setCoefficient13xTIMESZ(self, coefficient13xTIMESZ: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient13xTIMESZ(self, coefficient13xTIMESZ)

    def resetCoefficient13xTIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient13xTIMESZ(self)

    def setCoefficient14xTIMESZPOW2(self, coefficient14xTIMESZPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient14xTIMESZPOW2(self, coefficient14xTIMESZPOW2)

    def resetCoefficient14xTIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient14xTIMESZPOW2(self)

    def setCoefficient15xPOW2TIMESZ(self, coefficient15xPOW2TIMESZ: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient15xPOW2TIMESZ(self, coefficient15xPOW2TIMESZ)

    def resetCoefficient15xPOW2TIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient15xPOW2TIMESZ(self)

    def setCoefficient16yPOW2TIMESZPOW2(self, coefficient16yPOW2TIMESZPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient16yPOW2TIMESZPOW2(self, coefficient16yPOW2TIMESZPOW2)

    def resetCoefficient16yPOW2TIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient16yPOW2TIMESZPOW2(self)

    def setCoefficient17yTIMESZ(self, coefficient17yTIMESZ: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient17yTIMESZ(self, coefficient17yTIMESZ)

    def resetCoefficient17yTIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient17yTIMESZ(self)

    def setCoefficient18yTIMESZPOW2(self, coefficient18yTIMESZPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient18yTIMESZPOW2(self, coefficient18yTIMESZPOW2)

    def resetCoefficient18yTIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient18yTIMESZPOW2(self)

    def setCoefficient19yPOW2TIMESZ(self, coefficient19yPOW2TIMESZ: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient19yPOW2TIMESZ(self, coefficient19yPOW2TIMESZ)

    def resetCoefficient19yPOW2TIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient19yPOW2TIMESZ(self)

    def setCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self, coefficient20xPOW2TIMESYPOW2TIMESZPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self, coefficient20xPOW2TIMESYPOW2TIMESZPOW2)

    def resetCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self)

    def setCoefficient21xPOW2TIMESYPOW2TIMESZ(self, coefficient21xPOW2TIMESYPOW2TIMESZ: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient21xPOW2TIMESYPOW2TIMESZ(self, coefficient21xPOW2TIMESYPOW2TIMESZ)

    def resetCoefficient21xPOW2TIMESYPOW2TIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient21xPOW2TIMESYPOW2TIMESZ(self)

    def setCoefficient22xPOW2TIMESYTIMESZPOW2(self, coefficient22xPOW2TIMESYTIMESZPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient22xPOW2TIMESYTIMESZPOW2(self, coefficient22xPOW2TIMESYTIMESZPOW2)

    def resetCoefficient22xPOW2TIMESYTIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient22xPOW2TIMESYTIMESZPOW2(self)

    def setCoefficient23xTIMESYPOW2TIMESZPOW2(self, coefficient23xTIMESYPOW2TIMESZPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient23xTIMESYPOW2TIMESZPOW2(self, coefficient23xTIMESYPOW2TIMESZPOW2)

    def resetCoefficient23xTIMESYPOW2TIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient23xTIMESYPOW2TIMESZPOW2(self)

    def setCoefficient24xPOW2TIMESYTIMESZ(self, coefficient24xPOW2TIMESYTIMESZ: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient24xPOW2TIMESYTIMESZ(self, coefficient24xPOW2TIMESYTIMESZ)

    def resetCoefficient24xPOW2TIMESYTIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient24xPOW2TIMESYTIMESZ(self)

    def setCoefficient25xTIMESYPOW2TIMESZ(self, coefficient25xTIMESYPOW2TIMESZ: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient25xTIMESYPOW2TIMESZ(self, coefficient25xTIMESYPOW2TIMESZ)

    def resetCoefficient25xTIMESYPOW2TIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient25xTIMESYPOW2TIMESZ(self)

    def setCoefficient26xTIMESYTIMESZPOW2(self, coefficient26xTIMESYTIMESZPOW2: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient26xTIMESYTIMESZPOW2(self, coefficient26xTIMESYTIMESZPOW2)

    def resetCoefficient26xTIMESYTIMESZPOW2(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient26xTIMESYTIMESZPOW2(self)

    def setCoefficient27xTIMESYTIMESZ(self, coefficient27xTIMESYTIMESZ: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient27xTIMESYTIMESZ(self, coefficient27xTIMESYTIMESZ)

    def resetCoefficient27xTIMESYTIMESZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient27xTIMESYTIMESZ(self)

    def setMinimumValueofx(self, minimumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMinimumValueofx(self, minimumValueofx)

    def resetMinimumValueofx(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumValueofx(self)

    def setMaximumValueofx(self, maximumValueofx: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMaximumValueofx(self, maximumValueofx)

    def resetMaximumValueofx(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumValueofx(self)

    def setMinimumValueofy(self, minimumValueofy: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMinimumValueofy(self, minimumValueofy)

    def resetMinimumValueofy(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumValueofy(self)

    def setMaximumValueofy(self, maximumValueofy: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMaximumValueofy(self, maximumValueofy)

    def resetMaximumValueofy(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumValueofy(self)

    def setMinimumValueofz(self, minimumValueofz: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMinimumValueofz(self, minimumValueofz)

    def resetMinimumValueofz(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumValueofz(self)

    def setMaximumValueofz(self, maximumValueofz: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMaximumValueofz(self, maximumValueofz)

    def resetMaximumValueofz(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumValueofz(self)

    def setMinimumCurveOutput(self, minimumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput: 'double') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetInputUnitTypeforY(self)

    def setInputUnitTypeforZ(self, inputUnitTypeforZ: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setInputUnitTypeforZ(self, inputUnitTypeforZ)

    def resetInputUnitTypeforZ(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetInputUnitTypeforZ(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.CurveTriquadratic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.CurveTriquadratic_resetOutputUnitType(self)
CurveTriquadratic_swigregister = _openstudiomodelresources.CurveTriquadratic_swigregister
CurveTriquadratic_swigregister(CurveTriquadratic)

def CurveTriquadratic_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.CurveTriquadratic_iddObjectType()
CurveTriquadratic_iddObjectType = _openstudiomodelresources.CurveTriquadratic_iddObjectType

def CurveTriquadratic_validInputUnitTypeforXValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforXValues()
CurveTriquadratic_validInputUnitTypeforXValues = _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforXValues

def CurveTriquadratic_validInputUnitTypeforYValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforYValues()
CurveTriquadratic_validInputUnitTypeforYValues = _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforYValues

def CurveTriquadratic_validInputUnitTypeforZValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforZValues()
CurveTriquadratic_validInputUnitTypeforZValues = _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforZValues

def CurveTriquadratic_validOutputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.CurveTriquadratic_validOutputUnitTypeValues()
CurveTriquadratic_validOutputUnitTypeValues = _openstudiomodelresources.CurveTriquadratic_validOutputUnitTypeValues


def toCurveTriquadratic(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CurveTriquadratic >":
    return _openstudiomodelresources.toCurveTriquadratic(idfObject)
toCurveTriquadratic = _openstudiomodelresources.toCurveTriquadratic

def getCurveTriquadratic(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CurveTriquadratic >":
    return _openstudiomodelresources.getCurveTriquadratic(t_model, t_handle)
getCurveTriquadratic = _openstudiomodelresources.getCurveTriquadratic

def getCurveTriquadratics(t_model: 'Model') -> "std::vector< openstudio::model::CurveTriquadratic,std::allocator< openstudio::model::CurveTriquadratic > >":
    return _openstudiomodelresources.getCurveTriquadratics(t_model)
getCurveTriquadratics = _openstudiomodelresources.getCurveTriquadratics

def getCurveTriquadraticByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CurveTriquadratic >":
    return _openstudiomodelresources.getCurveTriquadraticByName(t_model, t_name)
getCurveTriquadraticByName = _openstudiomodelresources.getCurveTriquadraticByName

def getCurveTriquadraticsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CurveTriquadratic,std::allocator< openstudio::model::CurveTriquadratic > >":
    return _openstudiomodelresources.getCurveTriquadraticsByName(t_model, t_name, t_exactMatch)
getCurveTriquadraticsByName = _openstudiomodelresources.getCurveTriquadraticsByName
class TableMultiVariableLookupPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableMultiVariableLookupPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableMultiVariableLookupPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelresources.new_TableMultiVariableLookupPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def x(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelresources.TableMultiVariableLookupPoint_x(self)

    def y(self) -> "double":
        return _openstudiomodelresources.TableMultiVariableLookupPoint_y(self)

    def __str__(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookupPoint___str__(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookupPoint
    __del__ = lambda self: None
TableMultiVariableLookupPoint_swigregister = _openstudiomodelresources.TableMultiVariableLookupPoint_swigregister
TableMultiVariableLookupPoint_swigregister(TableMultiVariableLookupPoint)


def __lshift__(out: 'std::ostream &', point: 'TableMultiVariableLookupPoint') -> "std::ostream &":
    return _openstudiomodelresources.__lshift__(out, point)
__lshift__ = _openstudiomodelresources.__lshift__
class TableMultiVariableLookup(Curve):
    __swig_setmethods__ = {}
    for _s in [Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableMultiVariableLookup, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableMultiVariableLookup, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', numberofIndependentVariables: 'int const &'):
        this = _openstudiomodelresources.new_TableMultiVariableLookup(model, numberofIndependentVariables)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookup
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_iddObjectType)
    __swig_getmethods__["interpolationMethodValues"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_interpolationMethodValues
    if _newclass:
        interpolationMethodValues = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_interpolationMethodValues)
    __swig_getmethods__["curveTypeValues"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_curveTypeValues
    if _newclass:
        curveTypeValues = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_curveTypeValues)
    __swig_getmethods__["tableDataFormatValues"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_tableDataFormatValues
    if _newclass:
        tableDataFormatValues = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_tableDataFormatValues)
    __swig_getmethods__["x1SortOrderValues"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_x1SortOrderValues
    if _newclass:
        x1SortOrderValues = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_x1SortOrderValues)
    __swig_getmethods__["x2SortOrderValues"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_x2SortOrderValues
    if _newclass:
        x2SortOrderValues = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_x2SortOrderValues)
    __swig_getmethods__["inputUnitTypeforX1Values"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1Values
    if _newclass:
        inputUnitTypeforX1Values = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1Values)
    __swig_getmethods__["inputUnitTypeforX2Values"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2Values
    if _newclass:
        inputUnitTypeforX2Values = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2Values)
    __swig_getmethods__["inputUnitTypeforX3Values"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3Values
    if _newclass:
        inputUnitTypeforX3Values = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3Values)
    __swig_getmethods__["inputUnitTypeforX4Values"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4Values
    if _newclass:
        inputUnitTypeforX4Values = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4Values)
    __swig_getmethods__["inputUnitTypeforX5Values"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5Values
    if _newclass:
        inputUnitTypeforX5Values = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5Values)
    __swig_getmethods__["outputUnitTypeValues"] = lambda x: _openstudiomodelresources.TableMultiVariableLookup_outputUnitTypeValues
    if _newclass:
        outputUnitTypeValues = staticmethod(_openstudiomodelresources.TableMultiVariableLookup_outputUnitTypeValues)

    def interpolationMethod(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_interpolationMethod(self)

    def isInterpolationMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInterpolationMethodDefaulted(self)

    def numberofInterpolationPoints(self) -> "int":
        return _openstudiomodelresources.TableMultiVariableLookup_numberofInterpolationPoints(self)

    def isNumberofInterpolationPointsDefaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isNumberofInterpolationPointsDefaulted(self)

    def curveType(self) -> "boost::optional< std::string >":
        return _openstudiomodelresources.TableMultiVariableLookup_curveType(self)

    def tableDataFormat(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_tableDataFormat(self)

    def isTableDataFormatDefaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isTableDataFormatDefaulted(self)

    def normalizationReference(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_normalizationReference(self)

    def minimumValueofX1(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX1(self)

    def maximumValueofX1(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX1(self)

    def minimumValueofX2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX2(self)

    def maximumValueofX2(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX2(self)

    def minimumValueofX3(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX3(self)

    def maximumValueofX3(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX3(self)

    def minimumValueofX4(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX4(self)

    def maximumValueofX4(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX4(self)

    def minimumValueofX5(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX5(self)

    def maximumValueofX5(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX5(self)

    def minimumTableOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_minimumTableOutput(self)

    def maximumTableOutput(self) -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_maximumTableOutput(self)

    def inputUnitTypeforX1(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1(self)

    def isInputUnitTypeforX1Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX1Defaulted(self)

    def inputUnitTypeforX2(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2(self)

    def isInputUnitTypeforX2Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX2Defaulted(self)

    def inputUnitTypeforX3(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3(self)

    def isInputUnitTypeforX3Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX3Defaulted(self)

    def inputUnitTypeforX4(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4(self)

    def isInputUnitTypeforX4Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX4Defaulted(self)

    def inputUnitTypeforX5(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5(self)

    def isInputUnitTypeforX5Defaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX5Defaulted(self)

    def outputUnitType(self) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_isOutputUnitTypeDefaulted(self)

    def numberofIndependentVariables(self) -> "int":
        return _openstudiomodelresources.TableMultiVariableLookup_numberofIndependentVariables(self)

    def printTable(self, precision: 'unsigned int'=3) -> "std::string":
        return _openstudiomodelresources.TableMultiVariableLookup_printTable(self, precision)

    def setInterpolationMethod(self, interpolationMethod: 'std::string') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInterpolationMethod(self, interpolationMethod)

    def resetInterpolationMethod(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInterpolationMethod(self)

    def setNumberofInterpolationPoints(self, numberofInterpolationPoints: 'int') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setNumberofInterpolationPoints(self, numberofInterpolationPoints)

    def resetNumberofInterpolationPoints(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetNumberofInterpolationPoints(self)

    def setCurveType(self, curveType: 'std::string') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setCurveType(self, curveType)

    def resetCurveType(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetCurveType(self)

    def setTableDataFormat(self, tableDataFormat: 'std::string') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setTableDataFormat(self, tableDataFormat)

    def resetTableDataFormat(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetTableDataFormat(self)

    def setNormalizationReference(self, normalizationReference: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setNormalizationReference(self, normalizationReference)

    def resetNormalizationReference(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetNormalizationReference(self)

    def setMinimumValueofX1(self, minimumValueofX1: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX1(self, minimumValueofX1)

    def resetMinimumValueofX1(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX1(self)

    def setMaximumValueofX1(self, maximumValueofX1: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX1(self, maximumValueofX1)

    def resetMaximumValueofX1(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX1(self)

    def setMinimumValueofX2(self, minimumValueofX2: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX2(self, minimumValueofX2)

    def resetMinimumValueofX2(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX2(self)

    def setMaximumValueofX2(self, maximumValueofX2: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX2(self, maximumValueofX2)

    def resetMaximumValueofX2(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX2(self)

    def setMinimumValueofX3(self, minimumValueofX3: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX3(self, minimumValueofX3)

    def resetMinimumValueofX3(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX3(self)

    def setMaximumValueofX3(self, maximumValueofX3: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX3(self, maximumValueofX3)

    def resetMaximumValueofX3(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX3(self)

    def setMinimumValueofX4(self, minimumValueofX4: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX4(self, minimumValueofX4)

    def resetMinimumValueofX4(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX4(self)

    def setMaximumValueofX4(self, maximumValueofX4: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX4(self, maximumValueofX4)

    def resetMaximumValueofX4(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX4(self)

    def setMinimumValueofX5(self, minimumValueofX5: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX5(self, minimumValueofX5)

    def resetMinimumValueofX5(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX5(self)

    def setMaximumValueofX5(self, maximumValueofX5: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX5(self, maximumValueofX5)

    def resetMaximumValueofX5(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX5(self)

    def setMinimumTableOutput(self, minimumTableOutput: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumTableOutput(self, minimumTableOutput)

    def resetMinimumTableOutput(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumTableOutput(self)

    def setMaximumTableOutput(self, maximumTableOutput: 'double') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumTableOutput(self, maximumTableOutput)

    def resetMaximumTableOutput(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumTableOutput(self)

    def setInputUnitTypeforX1(self, inputUnitTypeforX1: 'std::string') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX1(self, inputUnitTypeforX1)

    def resetInputUnitTypeforX1(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX1(self)

    def setInputUnitTypeforX2(self, inputUnitTypeforX2: 'std::string') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX2(self, inputUnitTypeforX2)

    def resetInputUnitTypeforX2(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX2(self)

    def setInputUnitTypeforX3(self, inputUnitTypeforX3: 'std::string') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX3(self, inputUnitTypeforX3)

    def resetInputUnitTypeforX3(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX3(self)

    def setInputUnitTypeforX4(self, inputUnitTypeforX4: 'std::string') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX4(self, inputUnitTypeforX4)

    def resetInputUnitTypeforX4(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX4(self)

    def setInputUnitTypeforX5(self, inputUnitTypeforX5: 'std::string') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX5(self, inputUnitTypeforX5)

    def resetInputUnitTypeforX5(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX5(self)

    def setOutputUnitType(self, outputUnitType: 'std::string') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self) -> "void":
        return _openstudiomodelresources.TableMultiVariableLookup_resetOutputUnitType(self)

    def addPoint(self, *args) -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_addPoint(self, *args)

    def points(self) -> "std::vector< openstudio::model::TableMultiVariableLookupPoint,std::allocator< openstudio::model::TableMultiVariableLookupPoint > >":
        return _openstudiomodelresources.TableMultiVariableLookup_points(self)

    def setPoints(self, points: 'TableMultiVariableLookupPointVector') -> "bool":
        return _openstudiomodelresources.TableMultiVariableLookup_setPoints(self, points)

    def yValue(self, xValues: 'DoubleVector') -> "boost::optional< double >":
        return _openstudiomodelresources.TableMultiVariableLookup_yValue(self, xValues)

    def xValues(self, i: 'int') -> "std::vector< double,std::allocator< double > >":
        return _openstudiomodelresources.TableMultiVariableLookup_xValues(self, i)

    def numVariables(self) -> "int":
        return _openstudiomodelresources.TableMultiVariableLookup_numVariables(self)

    def evaluate(self, x: 'DoubleVector') -> "double":
        return _openstudiomodelresources.TableMultiVariableLookup_evaluate(self, x)
TableMultiVariableLookup_swigregister = _openstudiomodelresources.TableMultiVariableLookup_swigregister
TableMultiVariableLookup_swigregister(TableMultiVariableLookup)

def TableMultiVariableLookup_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.TableMultiVariableLookup_iddObjectType()
TableMultiVariableLookup_iddObjectType = _openstudiomodelresources.TableMultiVariableLookup_iddObjectType

def TableMultiVariableLookup_interpolationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_interpolationMethodValues()
TableMultiVariableLookup_interpolationMethodValues = _openstudiomodelresources.TableMultiVariableLookup_interpolationMethodValues

def TableMultiVariableLookup_curveTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_curveTypeValues()
TableMultiVariableLookup_curveTypeValues = _openstudiomodelresources.TableMultiVariableLookup_curveTypeValues

def TableMultiVariableLookup_tableDataFormatValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_tableDataFormatValues()
TableMultiVariableLookup_tableDataFormatValues = _openstudiomodelresources.TableMultiVariableLookup_tableDataFormatValues

def TableMultiVariableLookup_x1SortOrderValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_x1SortOrderValues()
TableMultiVariableLookup_x1SortOrderValues = _openstudiomodelresources.TableMultiVariableLookup_x1SortOrderValues

def TableMultiVariableLookup_x2SortOrderValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_x2SortOrderValues()
TableMultiVariableLookup_x2SortOrderValues = _openstudiomodelresources.TableMultiVariableLookup_x2SortOrderValues

def TableMultiVariableLookup_inputUnitTypeforX1Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1Values()
TableMultiVariableLookup_inputUnitTypeforX1Values = _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1Values

def TableMultiVariableLookup_inputUnitTypeforX2Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2Values()
TableMultiVariableLookup_inputUnitTypeforX2Values = _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2Values

def TableMultiVariableLookup_inputUnitTypeforX3Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3Values()
TableMultiVariableLookup_inputUnitTypeforX3Values = _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3Values

def TableMultiVariableLookup_inputUnitTypeforX4Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4Values()
TableMultiVariableLookup_inputUnitTypeforX4Values = _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4Values

def TableMultiVariableLookup_inputUnitTypeforX5Values() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5Values()
TableMultiVariableLookup_inputUnitTypeforX5Values = _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5Values

def TableMultiVariableLookup_outputUnitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.TableMultiVariableLookup_outputUnitTypeValues()
TableMultiVariableLookup_outputUnitTypeValues = _openstudiomodelresources.TableMultiVariableLookup_outputUnitTypeValues


def toTableMultiVariableLookup(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::TableMultiVariableLookup >":
    return _openstudiomodelresources.toTableMultiVariableLookup(idfObject)
toTableMultiVariableLookup = _openstudiomodelresources.toTableMultiVariableLookup

def getTableMultiVariableLookup(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::TableMultiVariableLookup >":
    return _openstudiomodelresources.getTableMultiVariableLookup(t_model, t_handle)
getTableMultiVariableLookup = _openstudiomodelresources.getTableMultiVariableLookup

def getTableMultiVariableLookups(t_model: 'Model') -> "std::vector< openstudio::model::TableMultiVariableLookup,std::allocator< openstudio::model::TableMultiVariableLookup > >":
    return _openstudiomodelresources.getTableMultiVariableLookups(t_model)
getTableMultiVariableLookups = _openstudiomodelresources.getTableMultiVariableLookups

def getTableMultiVariableLookupByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::TableMultiVariableLookup >":
    return _openstudiomodelresources.getTableMultiVariableLookupByName(t_model, t_name)
getTableMultiVariableLookupByName = _openstudiomodelresources.getTableMultiVariableLookupByName

def getTableMultiVariableLookupsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::TableMultiVariableLookup,std::allocator< openstudio::model::TableMultiVariableLookup > >":
    return _openstudiomodelresources.getTableMultiVariableLookupsByName(t_model, t_name, t_exactMatch)
getTableMultiVariableLookupsByName = _openstudiomodelresources.getTableMultiVariableLookupsByName
class SpaceLoadDefinition(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpaceLoadDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpaceLoadDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_SpaceLoadDefinition
    __del__ = lambda self: None

    def instances(self) -> "std::vector< openstudio::model::SpaceLoadInstance,std::allocator< openstudio::model::SpaceLoadInstance > >":
        return _openstudiomodelresources.SpaceLoadDefinition_instances(self)

    def floorArea(self) -> "double":
        return _openstudiomodelresources.SpaceLoadDefinition_floorArea(self)

    def quantity(self) -> "int":
        return _openstudiomodelresources.SpaceLoadDefinition_quantity(self)
SpaceLoadDefinition_swigregister = _openstudiomodelresources.SpaceLoadDefinition_swigregister
SpaceLoadDefinition_swigregister(SpaceLoadDefinition)


def toSpaceLoadDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SpaceLoadDefinition >":
    return _openstudiomodelresources.toSpaceLoadDefinition(idfObject)
toSpaceLoadDefinition = _openstudiomodelresources.toSpaceLoadDefinition

def getSpaceLoadDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SpaceLoadDefinition >":
    return _openstudiomodelresources.getSpaceLoadDefinition(t_model, t_handle)
getSpaceLoadDefinition = _openstudiomodelresources.getSpaceLoadDefinition

def getSpaceLoadDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::SpaceLoadDefinition,std::allocator< openstudio::model::SpaceLoadDefinition > >":
    return _openstudiomodelresources.getSpaceLoadDefinitions(t_model)
getSpaceLoadDefinitions = _openstudiomodelresources.getSpaceLoadDefinitions

def getSpaceLoadDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SpaceLoadDefinition >":
    return _openstudiomodelresources.getSpaceLoadDefinitionByName(t_model, t_name)
getSpaceLoadDefinitionByName = _openstudiomodelresources.getSpaceLoadDefinitionByName

def getSpaceLoadDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SpaceLoadDefinition,std::allocator< openstudio::model::SpaceLoadDefinition > >":
    return _openstudiomodelresources.getSpaceLoadDefinitionsByName(t_model, t_name, t_exactMatch)
getSpaceLoadDefinitionsByName = _openstudiomodelresources.getSpaceLoadDefinitionsByName
class PeopleDefinition(SpaceLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeopleDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeopleDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_PeopleDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_PeopleDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.PeopleDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.PeopleDefinition_iddObjectType)
    __swig_getmethods__["numberofPeopleCalculationMethodValues"] = lambda x: _openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethodValues
    if _newclass:
        numberofPeopleCalculationMethodValues = staticmethod(_openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethodValues)
    __swig_getmethods__["meanRadiantTemperatureCalculationTypeValues"] = lambda x: _openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationTypeValues
    if _newclass:
        meanRadiantTemperatureCalculationTypeValues = staticmethod(_openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationTypeValues)
    __swig_getmethods__["thermalComfortModelTypeValues"] = lambda x: _openstudiomodelresources.PeopleDefinition_thermalComfortModelTypeValues
    if _newclass:
        thermalComfortModelTypeValues = staticmethod(_openstudiomodelresources.PeopleDefinition_thermalComfortModelTypeValues)

    def numberofPeopleCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethod(self)

    def numberofPeople(self) -> "boost::optional< double >":
        return _openstudiomodelresources.PeopleDefinition_numberofPeople(self)

    def peopleperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.PeopleDefinition_peopleperSpaceFloorArea(self)

    def spaceFloorAreaperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.PeopleDefinition_spaceFloorAreaperPerson(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.PeopleDefinition_fractionRadiant(self)

    def sensibleHeatFraction(self) -> "boost::optional< double >":
        return _openstudiomodelresources.PeopleDefinition_sensibleHeatFraction(self)

    def isSensibleHeatFractionDefaulted(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isSensibleHeatFractionDefaulted(self)

    def isSensibleHeatFractionAutocalculated(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isSensibleHeatFractionAutocalculated(self)

    def carbonDioxideGenerationRate(self) -> "double":
        return _openstudiomodelresources.PeopleDefinition_carbonDioxideGenerationRate(self)

    def isCarbonDioxideGenerationRateDefaulted(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isCarbonDioxideGenerationRateDefaulted(self)

    def enableASHRAE55ComfortWarnings(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_enableASHRAE55ComfortWarnings(self)

    def isEnableASHRAE55ComfortWarningsDefaulted(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isEnableASHRAE55ComfortWarningsDefaulted(self)

    def meanRadiantTemperatureCalculationType(self) -> "std::string":
        return _openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationType(self)

    def isMeanRadiantTemperatureCalculationTypeDefaulted(self) -> "bool":
        return _openstudiomodelresources.PeopleDefinition_isMeanRadiantTemperatureCalculationTypeDefaulted(self)

    def getThermalComfortModelType(self, i: 'int') -> "boost::optional< std::string >":
        return _openstudiomodelresources.PeopleDefinition_getThermalComfortModelType(self, i)

    def numThermalComfortModelTypes(self) -> "int":
        return _openstudiomodelresources.PeopleDefinition_numThermalComfortModelTypes(self)

    def setNumberofPeople(self, numberofPeople: 'double') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setNumberofPeople(self, numberofPeople)

    def setPeopleperSpaceFloorArea(self, peopleperSpaceFloorArea: 'double') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setPeopleperSpaceFloorArea(self, peopleperSpaceFloorArea)

    def setSpaceFloorAreaperPerson(self, spaceFloorAreaperPerson: 'double') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setSpaceFloorAreaperPerson(self, spaceFloorAreaperPerson)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setFractionRadiant(self, fractionRadiant)

    def setSensibleHeatFraction(self, sensibleHeatFraction: 'double') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setSensibleHeatFraction(self, sensibleHeatFraction)

    def resetSensibleHeatFraction(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_resetSensibleHeatFraction(self)

    def autocalculateSensibleHeatFraction(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_autocalculateSensibleHeatFraction(self)

    def setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate: 'double') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate)

    def resetCarbonDioxideGenerationRate(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_resetCarbonDioxideGenerationRate(self)

    def setEnableASHRAE55ComfortWarnings(self, enableASHRAE55ComfortWarnings: 'bool') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setEnableASHRAE55ComfortWarnings(self, enableASHRAE55ComfortWarnings)

    def resetEnableASHRAE55ComfortWarnings(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_resetEnableASHRAE55ComfortWarnings(self)

    def setMeanRadiantTemperatureCalculationType(self, meanRadiantTemperatureCalculationType: 'std::string') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setMeanRadiantTemperatureCalculationType(self, meanRadiantTemperatureCalculationType)

    def resetMeanRadiantTemperatureCalculationType(self) -> "void":
        return _openstudiomodelresources.PeopleDefinition_resetMeanRadiantTemperatureCalculationType(self)

    def pushThermalComfortModelType(self, thermalComfortModelType: 'std::string const &') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_pushThermalComfortModelType(self, thermalComfortModelType)

    def setThermalComfortModelType(self, i: 'int', thermalComfortModelType: 'std::string const &') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setThermalComfortModelType(self, i, thermalComfortModelType)

    def eraseThermalComfortModelType(self, i: 'int') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_eraseThermalComfortModelType(self, i)

    def getNumberOfPeople(self, floorArea: 'double') -> "double":
        return _openstudiomodelresources.PeopleDefinition_getNumberOfPeople(self, floorArea)

    def getPeoplePerFloorArea(self, floorArea: 'double') -> "double":
        return _openstudiomodelresources.PeopleDefinition_getPeoplePerFloorArea(self, floorArea)

    def getFloorAreaPerPerson(self, floorArea: 'double') -> "double":
        return _openstudiomodelresources.PeopleDefinition_getFloorAreaPerPerson(self, floorArea)

    def setNumberOfPeopleCalculationMethod(self, method: 'std::string const &', floorArea: 'double') -> "bool":
        return _openstudiomodelresources.PeopleDefinition_setNumberOfPeopleCalculationMethod(self, method, floorArea)
PeopleDefinition_swigregister = _openstudiomodelresources.PeopleDefinition_swigregister
PeopleDefinition_swigregister(PeopleDefinition)

def PeopleDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.PeopleDefinition_iddObjectType()
PeopleDefinition_iddObjectType = _openstudiomodelresources.PeopleDefinition_iddObjectType

def PeopleDefinition_numberofPeopleCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethodValues()
PeopleDefinition_numberofPeopleCalculationMethodValues = _openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethodValues

def PeopleDefinition_meanRadiantTemperatureCalculationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationTypeValues()
PeopleDefinition_meanRadiantTemperatureCalculationTypeValues = _openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationTypeValues

def PeopleDefinition_thermalComfortModelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.PeopleDefinition_thermalComfortModelTypeValues()
PeopleDefinition_thermalComfortModelTypeValues = _openstudiomodelresources.PeopleDefinition_thermalComfortModelTypeValues


def toPeopleDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PeopleDefinition >":
    return _openstudiomodelresources.toPeopleDefinition(idfObject)
toPeopleDefinition = _openstudiomodelresources.toPeopleDefinition

def getPeopleDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PeopleDefinition >":
    return _openstudiomodelresources.getPeopleDefinition(t_model, t_handle)
getPeopleDefinition = _openstudiomodelresources.getPeopleDefinition

def getPeopleDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::PeopleDefinition,std::allocator< openstudio::model::PeopleDefinition > >":
    return _openstudiomodelresources.getPeopleDefinitions(t_model)
getPeopleDefinitions = _openstudiomodelresources.getPeopleDefinitions

def getPeopleDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PeopleDefinition >":
    return _openstudiomodelresources.getPeopleDefinitionByName(t_model, t_name)
getPeopleDefinitionByName = _openstudiomodelresources.getPeopleDefinitionByName

def getPeopleDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PeopleDefinition,std::allocator< openstudio::model::PeopleDefinition > >":
    return _openstudiomodelresources.getPeopleDefinitionsByName(t_model, t_name, t_exactMatch)
getPeopleDefinitionsByName = _openstudiomodelresources.getPeopleDefinitionsByName
class LightsDefinition(SpaceLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightsDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightsDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_LightsDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_LightsDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.LightsDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.LightsDefinition_iddObjectType)
    __swig_getmethods__["validDesignLevelCalculationMethodValues"] = lambda x: _openstudiomodelresources.LightsDefinition_validDesignLevelCalculationMethodValues
    if _newclass:
        validDesignLevelCalculationMethodValues = staticmethod(_openstudiomodelresources.LightsDefinition_validDesignLevelCalculationMethodValues)

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.LightsDefinition_designLevelCalculationMethod(self)

    def lightingLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.LightsDefinition_lightingLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.LightsDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.LightsDefinition_wattsperPerson(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isFractionRadiantDefaulted(self)

    def fractionVisible(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_fractionVisible(self)

    def isFractionVisibleDefaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isFractionVisibleDefaulted(self)

    def returnAirFraction(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_returnAirFraction(self)

    def isReturnAirFractionDefaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionDefaulted(self)

    def returnAirFractionCalculatedfromPlenumTemperature(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_returnAirFractionCalculatedfromPlenumTemperature(self)

    def isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient1(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient2(self) -> "double":
        return _openstudiomodelresources.LightsDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self) -> "bool":
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self)

    def setLightingLevel(self, lightingLevel: 'double') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setLightingLevel(self, lightingLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: 'double') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: 'double') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetFractionRadiant(self)

    def setFractionVisible(self, fractionVisible: 'double') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setFractionVisible(self, fractionVisible)

    def resetFractionVisible(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetFractionVisible(self)

    def setReturnAirFraction(self, returnAirFraction: 'double') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setReturnAirFraction(self, returnAirFraction)

    def resetReturnAirFraction(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFraction(self)

    def setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature: 'bool') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature)

    def resetReturnAirFractionCalculatedfromPlenumTemperature(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFractionCalculatedfromPlenumTemperature(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1: 'double') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2: 'double') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self) -> "void":
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

    def getLightingPower(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.LightsDefinition_getLightingPower(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.LightsDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.LightsDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: 'std::string const &', floorArea: 'double', numPeople: 'double') -> "bool":
        return _openstudiomodelresources.LightsDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)
LightsDefinition_swigregister = _openstudiomodelresources.LightsDefinition_swigregister
LightsDefinition_swigregister(LightsDefinition)

def LightsDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.LightsDefinition_iddObjectType()
LightsDefinition_iddObjectType = _openstudiomodelresources.LightsDefinition_iddObjectType

def LightsDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.LightsDefinition_validDesignLevelCalculationMethodValues()
LightsDefinition_validDesignLevelCalculationMethodValues = _openstudiomodelresources.LightsDefinition_validDesignLevelCalculationMethodValues


def toLightsDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::LightsDefinition >":
    return _openstudiomodelresources.toLightsDefinition(idfObject)
toLightsDefinition = _openstudiomodelresources.toLightsDefinition

def getLightsDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::LightsDefinition >":
    return _openstudiomodelresources.getLightsDefinition(t_model, t_handle)
getLightsDefinition = _openstudiomodelresources.getLightsDefinition

def getLightsDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::LightsDefinition,std::allocator< openstudio::model::LightsDefinition > >":
    return _openstudiomodelresources.getLightsDefinitions(t_model)
getLightsDefinitions = _openstudiomodelresources.getLightsDefinitions

def getLightsDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::LightsDefinition >":
    return _openstudiomodelresources.getLightsDefinitionByName(t_model, t_name)
getLightsDefinitionByName = _openstudiomodelresources.getLightsDefinitionByName

def getLightsDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::LightsDefinition,std::allocator< openstudio::model::LightsDefinition > >":
    return _openstudiomodelresources.getLightsDefinitionsByName(t_model, t_name, t_exactMatch)
getLightsDefinitionsByName = _openstudiomodelresources.getLightsDefinitionsByName
class LuminaireDefinition(SpaceLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LuminaireDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LuminaireDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_LuminaireDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_LuminaireDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.LuminaireDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.LuminaireDefinition_iddObjectType)

    def lightingPower(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_lightingPower(self)

    def isLightingPowerDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isLightingPowerDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isFractionRadiantDefaulted(self)

    def fractionVisible(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_fractionVisible(self)

    def isFractionVisibleDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isFractionVisibleDefaulted(self)

    def returnAirFraction(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_returnAirFraction(self)

    def isReturnAirFractionDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionDefaulted(self)

    def returnAirFractionCalculatedfromPlenumTemperature(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_returnAirFractionCalculatedfromPlenumTemperature(self)

    def isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient1(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient2(self) -> "double":
        return _openstudiomodelresources.LuminaireDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self) -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self)

    def setLightingPower(self, lightingPower: 'double') -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setLightingPower(self, lightingPower)

    def resetLightingPower(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetLightingPower(self)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetFractionRadiant(self)

    def setFractionVisible(self, fractionVisible: 'double') -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setFractionVisible(self, fractionVisible)

    def resetFractionVisible(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetFractionVisible(self)

    def setReturnAirFraction(self, returnAirFraction: 'double') -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFraction(self, returnAirFraction)

    def resetReturnAirFraction(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFraction(self)

    def setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature: 'bool') -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature)

    def resetReturnAirFractionCalculatedfromPlenumTemperature(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFractionCalculatedfromPlenumTemperature(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1: 'double') -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2: 'double') -> "bool":
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self) -> "void":
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self)
LuminaireDefinition_swigregister = _openstudiomodelresources.LuminaireDefinition_swigregister
LuminaireDefinition_swigregister(LuminaireDefinition)

def LuminaireDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.LuminaireDefinition_iddObjectType()
LuminaireDefinition_iddObjectType = _openstudiomodelresources.LuminaireDefinition_iddObjectType


def toLuminaireDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::LuminaireDefinition >":
    return _openstudiomodelresources.toLuminaireDefinition(idfObject)
toLuminaireDefinition = _openstudiomodelresources.toLuminaireDefinition

def getLuminaireDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::LuminaireDefinition >":
    return _openstudiomodelresources.getLuminaireDefinition(t_model, t_handle)
getLuminaireDefinition = _openstudiomodelresources.getLuminaireDefinition

def getLuminaireDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::LuminaireDefinition,std::allocator< openstudio::model::LuminaireDefinition > >":
    return _openstudiomodelresources.getLuminaireDefinitions(t_model)
getLuminaireDefinitions = _openstudiomodelresources.getLuminaireDefinitions

def getLuminaireDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::LuminaireDefinition >":
    return _openstudiomodelresources.getLuminaireDefinitionByName(t_model, t_name)
getLuminaireDefinitionByName = _openstudiomodelresources.getLuminaireDefinitionByName

def getLuminaireDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::LuminaireDefinition,std::allocator< openstudio::model::LuminaireDefinition > >":
    return _openstudiomodelresources.getLuminaireDefinitionsByName(t_model, t_name, t_exactMatch)
getLuminaireDefinitionsByName = _openstudiomodelresources.getLuminaireDefinitionsByName
class ElectricEquipmentDefinition(SpaceLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElectricEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_ElectricEquipmentDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ElectricEquipmentDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ElectricEquipmentDefinition_iddObjectType)
    __swig_getmethods__["validDesignLevelCalculationMethodValues"] = lambda x: _openstudiomodelresources.ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues
    if _newclass:
        validDesignLevelCalculationMethodValues = staticmethod(_openstudiomodelresources.ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues)

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.ElectricEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ElectricEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ElectricEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.ElectricEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel: 'double') -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: 'double') -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: 'double') -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: 'double') -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: 'double') -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.ElectricEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.ElectricEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: 'std::string const &', floorArea: 'double', numPeople: 'double') -> "bool":
        return _openstudiomodelresources.ElectricEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)
ElectricEquipmentDefinition_swigregister = _openstudiomodelresources.ElectricEquipmentDefinition_swigregister
ElectricEquipmentDefinition_swigregister(ElectricEquipmentDefinition)

def ElectricEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ElectricEquipmentDefinition_iddObjectType()
ElectricEquipmentDefinition_iddObjectType = _openstudiomodelresources.ElectricEquipmentDefinition_iddObjectType

def ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues()
ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues = _openstudiomodelresources.ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues


def toElectricEquipmentDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ElectricEquipmentDefinition >":
    return _openstudiomodelresources.toElectricEquipmentDefinition(idfObject)
toElectricEquipmentDefinition = _openstudiomodelresources.toElectricEquipmentDefinition

def getElectricEquipmentDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ElectricEquipmentDefinition >":
    return _openstudiomodelresources.getElectricEquipmentDefinition(t_model, t_handle)
getElectricEquipmentDefinition = _openstudiomodelresources.getElectricEquipmentDefinition

def getElectricEquipmentDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::ElectricEquipmentDefinition,std::allocator< openstudio::model::ElectricEquipmentDefinition > >":
    return _openstudiomodelresources.getElectricEquipmentDefinitions(t_model)
getElectricEquipmentDefinitions = _openstudiomodelresources.getElectricEquipmentDefinitions

def getElectricEquipmentDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ElectricEquipmentDefinition >":
    return _openstudiomodelresources.getElectricEquipmentDefinitionByName(t_model, t_name)
getElectricEquipmentDefinitionByName = _openstudiomodelresources.getElectricEquipmentDefinitionByName

def getElectricEquipmentDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ElectricEquipmentDefinition,std::allocator< openstudio::model::ElectricEquipmentDefinition > >":
    return _openstudiomodelresources.getElectricEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)
getElectricEquipmentDefinitionsByName = _openstudiomodelresources.getElectricEquipmentDefinitionsByName
class GasEquipmentDefinition(SpaceLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GasEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GasEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_GasEquipmentDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_GasEquipmentDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.GasEquipmentDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.GasEquipmentDefinition_iddObjectType)
    __swig_getmethods__["validDesignLevelCalculationMethodValues"] = lambda x: _openstudiomodelresources.GasEquipmentDefinition_validDesignLevelCalculationMethodValues
    if _newclass:
        validDesignLevelCalculationMethodValues = staticmethod(_openstudiomodelresources.GasEquipmentDefinition_validDesignLevelCalculationMethodValues)

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.GasEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.GasEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_isFractionLostDefaulted(self)

    def carbonDioxideGenerationRate(self) -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_carbonDioxideGenerationRate(self)

    def isCarbonDioxideGenerationRateDefaulted(self) -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_isCarbonDioxideGenerationRateDefaulted(self)

    def setDesignLevel(self, designLevel: 'double') -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: 'double') -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: 'double') -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: 'double') -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: 'double') -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinition_resetFractionLost(self)

    def setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate: 'double') -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate)

    def resetCarbonDioxideGenerationRate(self) -> "void":
        return _openstudiomodelresources.GasEquipmentDefinition_resetCarbonDioxideGenerationRate(self)

    def getDesignLevel(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.GasEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: 'std::string const &', floorArea: 'double', numPeople: 'double') -> "bool":
        return _openstudiomodelresources.GasEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)
GasEquipmentDefinition_swigregister = _openstudiomodelresources.GasEquipmentDefinition_swigregister
GasEquipmentDefinition_swigregister(GasEquipmentDefinition)

def GasEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.GasEquipmentDefinition_iddObjectType()
GasEquipmentDefinition_iddObjectType = _openstudiomodelresources.GasEquipmentDefinition_iddObjectType

def GasEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.GasEquipmentDefinition_validDesignLevelCalculationMethodValues()
GasEquipmentDefinition_validDesignLevelCalculationMethodValues = _openstudiomodelresources.GasEquipmentDefinition_validDesignLevelCalculationMethodValues


def toGasEquipmentDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::GasEquipmentDefinition >":
    return _openstudiomodelresources.toGasEquipmentDefinition(idfObject)
toGasEquipmentDefinition = _openstudiomodelresources.toGasEquipmentDefinition

def getGasEquipmentDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::GasEquipmentDefinition >":
    return _openstudiomodelresources.getGasEquipmentDefinition(t_model, t_handle)
getGasEquipmentDefinition = _openstudiomodelresources.getGasEquipmentDefinition

def getGasEquipmentDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::GasEquipmentDefinition,std::allocator< openstudio::model::GasEquipmentDefinition > >":
    return _openstudiomodelresources.getGasEquipmentDefinitions(t_model)
getGasEquipmentDefinitions = _openstudiomodelresources.getGasEquipmentDefinitions

def getGasEquipmentDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::GasEquipmentDefinition >":
    return _openstudiomodelresources.getGasEquipmentDefinitionByName(t_model, t_name)
getGasEquipmentDefinitionByName = _openstudiomodelresources.getGasEquipmentDefinitionByName

def getGasEquipmentDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::GasEquipmentDefinition,std::allocator< openstudio::model::GasEquipmentDefinition > >":
    return _openstudiomodelresources.getGasEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)
getGasEquipmentDefinitionsByName = _openstudiomodelresources.getGasEquipmentDefinitionsByName
class HotWaterEquipmentDefinition(SpaceLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HotWaterEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HotWaterEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_HotWaterEquipmentDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_HotWaterEquipmentDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.HotWaterEquipmentDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.HotWaterEquipmentDefinition_iddObjectType)
    __swig_getmethods__["validDesignLevelCalculationMethodValues"] = lambda x: _openstudiomodelresources.HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues
    if _newclass:
        validDesignLevelCalculationMethodValues = staticmethod(_openstudiomodelresources.HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues)

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel: 'double') -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: 'double') -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: 'double') -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: 'double') -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: 'double') -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: 'std::string const &', floorArea: 'double', numPeople: 'double') -> "bool":
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)
HotWaterEquipmentDefinition_swigregister = _openstudiomodelresources.HotWaterEquipmentDefinition_swigregister
HotWaterEquipmentDefinition_swigregister(HotWaterEquipmentDefinition)

def HotWaterEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.HotWaterEquipmentDefinition_iddObjectType()
HotWaterEquipmentDefinition_iddObjectType = _openstudiomodelresources.HotWaterEquipmentDefinition_iddObjectType

def HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues()
HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues = _openstudiomodelresources.HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues


def toHotWaterEquipmentDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::HotWaterEquipmentDefinition >":
    return _openstudiomodelresources.toHotWaterEquipmentDefinition(idfObject)
toHotWaterEquipmentDefinition = _openstudiomodelresources.toHotWaterEquipmentDefinition

def getHotWaterEquipmentDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::HotWaterEquipmentDefinition >":
    return _openstudiomodelresources.getHotWaterEquipmentDefinition(t_model, t_handle)
getHotWaterEquipmentDefinition = _openstudiomodelresources.getHotWaterEquipmentDefinition

def getHotWaterEquipmentDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::HotWaterEquipmentDefinition,std::allocator< openstudio::model::HotWaterEquipmentDefinition > >":
    return _openstudiomodelresources.getHotWaterEquipmentDefinitions(t_model)
getHotWaterEquipmentDefinitions = _openstudiomodelresources.getHotWaterEquipmentDefinitions

def getHotWaterEquipmentDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::HotWaterEquipmentDefinition >":
    return _openstudiomodelresources.getHotWaterEquipmentDefinitionByName(t_model, t_name)
getHotWaterEquipmentDefinitionByName = _openstudiomodelresources.getHotWaterEquipmentDefinitionByName

def getHotWaterEquipmentDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::HotWaterEquipmentDefinition,std::allocator< openstudio::model::HotWaterEquipmentDefinition > >":
    return _openstudiomodelresources.getHotWaterEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)
getHotWaterEquipmentDefinitionsByName = _openstudiomodelresources.getHotWaterEquipmentDefinitionsByName
class SteamEquipmentDefinition(SpaceLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteamEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SteamEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_SteamEquipmentDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_SteamEquipmentDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.SteamEquipmentDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.SteamEquipmentDefinition_iddObjectType)
    __swig_getmethods__["validDesignLevelCalculationMethodValues"] = lambda x: _openstudiomodelresources.SteamEquipmentDefinition_validDesignLevelCalculationMethodValues
    if _newclass:
        validDesignLevelCalculationMethodValues = staticmethod(_openstudiomodelresources.SteamEquipmentDefinition_validDesignLevelCalculationMethodValues)

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.SteamEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.SteamEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.SteamEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.SteamEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel: 'double') -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: 'double') -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: 'double') -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: 'double') -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: 'double') -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.SteamEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.SteamEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: 'std::string const &', floorArea: 'double', numPeople: 'double') -> "bool":
        return _openstudiomodelresources.SteamEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)
SteamEquipmentDefinition_swigregister = _openstudiomodelresources.SteamEquipmentDefinition_swigregister
SteamEquipmentDefinition_swigregister(SteamEquipmentDefinition)

def SteamEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.SteamEquipmentDefinition_iddObjectType()
SteamEquipmentDefinition_iddObjectType = _openstudiomodelresources.SteamEquipmentDefinition_iddObjectType

def SteamEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.SteamEquipmentDefinition_validDesignLevelCalculationMethodValues()
SteamEquipmentDefinition_validDesignLevelCalculationMethodValues = _openstudiomodelresources.SteamEquipmentDefinition_validDesignLevelCalculationMethodValues


def toSteamEquipmentDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SteamEquipmentDefinition >":
    return _openstudiomodelresources.toSteamEquipmentDefinition(idfObject)
toSteamEquipmentDefinition = _openstudiomodelresources.toSteamEquipmentDefinition

def getSteamEquipmentDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SteamEquipmentDefinition >":
    return _openstudiomodelresources.getSteamEquipmentDefinition(t_model, t_handle)
getSteamEquipmentDefinition = _openstudiomodelresources.getSteamEquipmentDefinition

def getSteamEquipmentDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::SteamEquipmentDefinition,std::allocator< openstudio::model::SteamEquipmentDefinition > >":
    return _openstudiomodelresources.getSteamEquipmentDefinitions(t_model)
getSteamEquipmentDefinitions = _openstudiomodelresources.getSteamEquipmentDefinitions

def getSteamEquipmentDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SteamEquipmentDefinition >":
    return _openstudiomodelresources.getSteamEquipmentDefinitionByName(t_model, t_name)
getSteamEquipmentDefinitionByName = _openstudiomodelresources.getSteamEquipmentDefinitionByName

def getSteamEquipmentDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SteamEquipmentDefinition,std::allocator< openstudio::model::SteamEquipmentDefinition > >":
    return _openstudiomodelresources.getSteamEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)
getSteamEquipmentDefinitionsByName = _openstudiomodelresources.getSteamEquipmentDefinitionsByName
class OtherEquipmentDefinition(SpaceLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OtherEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OtherEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_OtherEquipmentDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_OtherEquipmentDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.OtherEquipmentDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.OtherEquipmentDefinition_iddObjectType)
    __swig_getmethods__["validDesignLevelCalculationMethodValues"] = lambda x: _openstudiomodelresources.OtherEquipmentDefinition_validDesignLevelCalculationMethodValues
    if _newclass:
        validDesignLevelCalculationMethodValues = staticmethod(_openstudiomodelresources.OtherEquipmentDefinition_validDesignLevelCalculationMethodValues)

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.OtherEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OtherEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OtherEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.OtherEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self) -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self) -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self) -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self) -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel: 'double') -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea: 'double') -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson: 'double') -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent: 'double') -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant: 'double') -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost: 'double') -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self) -> "void":
        return _openstudiomodelresources.OtherEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.OtherEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: 'std::string const &', floorArea: 'double', numPeople: 'double') -> "bool":
        return _openstudiomodelresources.OtherEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)
OtherEquipmentDefinition_swigregister = _openstudiomodelresources.OtherEquipmentDefinition_swigregister
OtherEquipmentDefinition_swigregister(OtherEquipmentDefinition)

def OtherEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.OtherEquipmentDefinition_iddObjectType()
OtherEquipmentDefinition_iddObjectType = _openstudiomodelresources.OtherEquipmentDefinition_iddObjectType

def OtherEquipmentDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.OtherEquipmentDefinition_validDesignLevelCalculationMethodValues()
OtherEquipmentDefinition_validDesignLevelCalculationMethodValues = _openstudiomodelresources.OtherEquipmentDefinition_validDesignLevelCalculationMethodValues


def toOtherEquipmentDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::OtherEquipmentDefinition >":
    return _openstudiomodelresources.toOtherEquipmentDefinition(idfObject)
toOtherEquipmentDefinition = _openstudiomodelresources.toOtherEquipmentDefinition

def getOtherEquipmentDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::OtherEquipmentDefinition >":
    return _openstudiomodelresources.getOtherEquipmentDefinition(t_model, t_handle)
getOtherEquipmentDefinition = _openstudiomodelresources.getOtherEquipmentDefinition

def getOtherEquipmentDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::OtherEquipmentDefinition,std::allocator< openstudio::model::OtherEquipmentDefinition > >":
    return _openstudiomodelresources.getOtherEquipmentDefinitions(t_model)
getOtherEquipmentDefinitions = _openstudiomodelresources.getOtherEquipmentDefinitions

def getOtherEquipmentDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::OtherEquipmentDefinition >":
    return _openstudiomodelresources.getOtherEquipmentDefinitionByName(t_model, t_name)
getOtherEquipmentDefinitionByName = _openstudiomodelresources.getOtherEquipmentDefinitionByName

def getOtherEquipmentDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::OtherEquipmentDefinition,std::allocator< openstudio::model::OtherEquipmentDefinition > >":
    return _openstudiomodelresources.getOtherEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)
getOtherEquipmentDefinitionsByName = _openstudiomodelresources.getOtherEquipmentDefinitionsByName
class InternalMassDefinition(SpaceLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternalMassDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SpaceLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InternalMassDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_InternalMassDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_InternalMassDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.InternalMassDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.InternalMassDefinition_iddObjectType)
    __swig_getmethods__["validDesignLevelCalculationMethodValues"] = lambda x: _openstudiomodelresources.InternalMassDefinition_validDesignLevelCalculationMethodValues
    if _newclass:
        validDesignLevelCalculationMethodValues = staticmethod(_openstudiomodelresources.InternalMassDefinition_validDesignLevelCalculationMethodValues)

    def construction(self) -> "boost::optional< openstudio::model::ConstructionBase >":
        return _openstudiomodelresources.InternalMassDefinition_construction(self)

    def isConstructionDefaulted(self) -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_isConstructionDefaulted(self)

    def designLevelCalculationMethod(self) -> "std::string":
        return _openstudiomodelresources.InternalMassDefinition_designLevelCalculationMethod(self)

    def surfaceArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.InternalMassDefinition_surfaceArea(self)

    def surfaceAreaperSpaceFloorArea(self) -> "boost::optional< double >":
        return _openstudiomodelresources.InternalMassDefinition_surfaceAreaperSpaceFloorArea(self)

    def surfaceAreaperPerson(self) -> "boost::optional< double >":
        return _openstudiomodelresources.InternalMassDefinition_surfaceAreaperPerson(self)

    def setConstruction(self, construction: 'ConstructionBase') -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setConstruction(self, construction)

    def resetConstruction(self) -> "void":
        return _openstudiomodelresources.InternalMassDefinition_resetConstruction(self)

    def setSurfaceArea(self, surfaceArea: 'double') -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setSurfaceArea(self, surfaceArea)

    def setSurfaceAreaperSpaceFloorArea(self, surfaceAreaperSpaceFloorArea: 'double') -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setSurfaceAreaperSpaceFloorArea(self, surfaceAreaperSpaceFloorArea)

    def setSurfaceAreaperPerson(self, surfaceAreaperPerson: 'double') -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setSurfaceAreaperPerson(self, surfaceAreaperPerson)

    def getSurfaceArea(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.InternalMassDefinition_getSurfaceArea(self, floorArea, numPeople)

    def getSurfaceAreaPerFloorArea(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.InternalMassDefinition_getSurfaceAreaPerFloorArea(self, floorArea, numPeople)

    def getSurfaceAreaPerPerson(self, floorArea: 'double', numPeople: 'double') -> "double":
        return _openstudiomodelresources.InternalMassDefinition_getSurfaceAreaPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method: 'std::string const &', floorArea: 'double', numPeople: 'double') -> "bool":
        return _openstudiomodelresources.InternalMassDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)
InternalMassDefinition_swigregister = _openstudiomodelresources.InternalMassDefinition_swigregister
InternalMassDefinition_swigregister(InternalMassDefinition)

def InternalMassDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.InternalMassDefinition_iddObjectType()
InternalMassDefinition_iddObjectType = _openstudiomodelresources.InternalMassDefinition_iddObjectType

def InternalMassDefinition_validDesignLevelCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.InternalMassDefinition_validDesignLevelCalculationMethodValues()
InternalMassDefinition_validDesignLevelCalculationMethodValues = _openstudiomodelresources.InternalMassDefinition_validDesignLevelCalculationMethodValues


def toInternalMassDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::InternalMassDefinition >":
    return _openstudiomodelresources.toInternalMassDefinition(idfObject)
toInternalMassDefinition = _openstudiomodelresources.toInternalMassDefinition

def getInternalMassDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::InternalMassDefinition >":
    return _openstudiomodelresources.getInternalMassDefinition(t_model, t_handle)
getInternalMassDefinition = _openstudiomodelresources.getInternalMassDefinition

def getInternalMassDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::InternalMassDefinition,std::allocator< openstudio::model::InternalMassDefinition > >":
    return _openstudiomodelresources.getInternalMassDefinitions(t_model)
getInternalMassDefinitions = _openstudiomodelresources.getInternalMassDefinitions

def getInternalMassDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::InternalMassDefinition >":
    return _openstudiomodelresources.getInternalMassDefinitionByName(t_model, t_name)
getInternalMassDefinitionByName = _openstudiomodelresources.getInternalMassDefinitionByName

def getInternalMassDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::InternalMassDefinition,std::allocator< openstudio::model::InternalMassDefinition > >":
    return _openstudiomodelresources.getInternalMassDefinitionsByName(t_model, t_name, t_exactMatch)
getInternalMassDefinitionsByName = _openstudiomodelresources.getInternalMassDefinitionsByName
class ExteriorLoadDefinition(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExteriorLoadDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExteriorLoadDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLoadDefinition
    __del__ = lambda self: None

    def instances(self) -> "std::vector< openstudio::model::ExteriorLoadInstance,std::allocator< openstudio::model::ExteriorLoadInstance > >":
        return _openstudiomodelresources.ExteriorLoadDefinition_instances(self)

    def quantity(self) -> "int":
        return _openstudiomodelresources.ExteriorLoadDefinition_quantity(self)
ExteriorLoadDefinition_swigregister = _openstudiomodelresources.ExteriorLoadDefinition_swigregister
ExteriorLoadDefinition_swigregister(ExteriorLoadDefinition)


def toExteriorLoadDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExteriorLoadDefinition >":
    return _openstudiomodelresources.toExteriorLoadDefinition(idfObject)
toExteriorLoadDefinition = _openstudiomodelresources.toExteriorLoadDefinition

def getExteriorLoadDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExteriorLoadDefinition >":
    return _openstudiomodelresources.getExteriorLoadDefinition(t_model, t_handle)
getExteriorLoadDefinition = _openstudiomodelresources.getExteriorLoadDefinition

def getExteriorLoadDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::ExteriorLoadDefinition,std::allocator< openstudio::model::ExteriorLoadDefinition > >":
    return _openstudiomodelresources.getExteriorLoadDefinitions(t_model)
getExteriorLoadDefinitions = _openstudiomodelresources.getExteriorLoadDefinitions

def getExteriorLoadDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExteriorLoadDefinition >":
    return _openstudiomodelresources.getExteriorLoadDefinitionByName(t_model, t_name)
getExteriorLoadDefinitionByName = _openstudiomodelresources.getExteriorLoadDefinitionByName

def getExteriorLoadDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExteriorLoadDefinition,std::allocator< openstudio::model::ExteriorLoadDefinition > >":
    return _openstudiomodelresources.getExteriorLoadDefinitionsByName(t_model, t_name, t_exactMatch)
getExteriorLoadDefinitionsByName = _openstudiomodelresources.getExteriorLoadDefinitionsByName
class ExteriorLightsDefinition(ExteriorLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [ExteriorLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExteriorLightsDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [ExteriorLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExteriorLightsDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_ExteriorLightsDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLightsDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ExteriorLightsDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ExteriorLightsDefinition_iddObjectType)

    def designLevel(self) -> "double":
        return _openstudiomodelresources.ExteriorLightsDefinition_designLevel(self)

    def setDesignLevel(self, designLevel: 'double') -> "bool":
        return _openstudiomodelresources.ExteriorLightsDefinition_setDesignLevel(self, designLevel)
ExteriorLightsDefinition_swigregister = _openstudiomodelresources.ExteriorLightsDefinition_swigregister
ExteriorLightsDefinition_swigregister(ExteriorLightsDefinition)

def ExteriorLightsDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ExteriorLightsDefinition_iddObjectType()
ExteriorLightsDefinition_iddObjectType = _openstudiomodelresources.ExteriorLightsDefinition_iddObjectType


def toExteriorLightsDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExteriorLightsDefinition >":
    return _openstudiomodelresources.toExteriorLightsDefinition(idfObject)
toExteriorLightsDefinition = _openstudiomodelresources.toExteriorLightsDefinition

def getExteriorLightsDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExteriorLightsDefinition >":
    return _openstudiomodelresources.getExteriorLightsDefinition(t_model, t_handle)
getExteriorLightsDefinition = _openstudiomodelresources.getExteriorLightsDefinition

def getExteriorLightsDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::ExteriorLightsDefinition,std::allocator< openstudio::model::ExteriorLightsDefinition > >":
    return _openstudiomodelresources.getExteriorLightsDefinitions(t_model)
getExteriorLightsDefinitions = _openstudiomodelresources.getExteriorLightsDefinitions

def getExteriorLightsDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExteriorLightsDefinition >":
    return _openstudiomodelresources.getExteriorLightsDefinitionByName(t_model, t_name)
getExteriorLightsDefinitionByName = _openstudiomodelresources.getExteriorLightsDefinitionByName

def getExteriorLightsDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExteriorLightsDefinition,std::allocator< openstudio::model::ExteriorLightsDefinition > >":
    return _openstudiomodelresources.getExteriorLightsDefinitionsByName(t_model, t_name, t_exactMatch)
getExteriorLightsDefinitionsByName = _openstudiomodelresources.getExteriorLightsDefinitionsByName
class ExteriorFuelEquipmentDefinition(ExteriorLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [ExteriorLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExteriorFuelEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [ExteriorLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExteriorFuelEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_ExteriorFuelEquipmentDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorFuelEquipmentDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ExteriorFuelEquipmentDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ExteriorFuelEquipmentDefinition_iddObjectType)

    def designLevel(self) -> "double":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_designLevel(self)

    def setDesignLevel(self, designLevel: 'double') -> "bool":
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_setDesignLevel(self, designLevel)
ExteriorFuelEquipmentDefinition_swigregister = _openstudiomodelresources.ExteriorFuelEquipmentDefinition_swigregister
ExteriorFuelEquipmentDefinition_swigregister(ExteriorFuelEquipmentDefinition)

def ExteriorFuelEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_iddObjectType()
ExteriorFuelEquipmentDefinition_iddObjectType = _openstudiomodelresources.ExteriorFuelEquipmentDefinition_iddObjectType


def toExteriorFuelEquipmentDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExteriorFuelEquipmentDefinition >":
    return _openstudiomodelresources.toExteriorFuelEquipmentDefinition(idfObject)
toExteriorFuelEquipmentDefinition = _openstudiomodelresources.toExteriorFuelEquipmentDefinition

def getExteriorFuelEquipmentDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExteriorFuelEquipmentDefinition >":
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinition(t_model, t_handle)
getExteriorFuelEquipmentDefinition = _openstudiomodelresources.getExteriorFuelEquipmentDefinition

def getExteriorFuelEquipmentDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition,std::allocator< openstudio::model::ExteriorFuelEquipmentDefinition > >":
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinitions(t_model)
getExteriorFuelEquipmentDefinitions = _openstudiomodelresources.getExteriorFuelEquipmentDefinitions

def getExteriorFuelEquipmentDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExteriorFuelEquipmentDefinition >":
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinitionByName(t_model, t_name)
getExteriorFuelEquipmentDefinitionByName = _openstudiomodelresources.getExteriorFuelEquipmentDefinitionByName

def getExteriorFuelEquipmentDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExteriorFuelEquipmentDefinition,std::allocator< openstudio::model::ExteriorFuelEquipmentDefinition > >":
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)
getExteriorFuelEquipmentDefinitionsByName = _openstudiomodelresources.getExteriorFuelEquipmentDefinitionsByName
class ExteriorWaterEquipmentDefinition(ExteriorLoadDefinition):
    __swig_setmethods__ = {}
    for _s in [ExteriorLoadDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExteriorWaterEquipmentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [ExteriorLoadDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExteriorWaterEquipmentDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_ExteriorWaterEquipmentDefinition(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorWaterEquipmentDefinition
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.ExteriorWaterEquipmentDefinition_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.ExteriorWaterEquipmentDefinition_iddObjectType)

    def designLevel(self) -> "double":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_designLevel(self)

    def setDesignLevel(self, designLevel: 'double') -> "bool":
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_setDesignLevel(self, designLevel)
ExteriorWaterEquipmentDefinition_swigregister = _openstudiomodelresources.ExteriorWaterEquipmentDefinition_swigregister
ExteriorWaterEquipmentDefinition_swigregister(ExteriorWaterEquipmentDefinition)

def ExteriorWaterEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_iddObjectType()
ExteriorWaterEquipmentDefinition_iddObjectType = _openstudiomodelresources.ExteriorWaterEquipmentDefinition_iddObjectType


def toExteriorWaterEquipmentDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ExteriorWaterEquipmentDefinition >":
    return _openstudiomodelresources.toExteriorWaterEquipmentDefinition(idfObject)
toExteriorWaterEquipmentDefinition = _openstudiomodelresources.toExteriorWaterEquipmentDefinition

def getExteriorWaterEquipmentDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ExteriorWaterEquipmentDefinition >":
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinition(t_model, t_handle)
getExteriorWaterEquipmentDefinition = _openstudiomodelresources.getExteriorWaterEquipmentDefinition

def getExteriorWaterEquipmentDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition,std::allocator< openstudio::model::ExteriorWaterEquipmentDefinition > >":
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinitions(t_model)
getExteriorWaterEquipmentDefinitions = _openstudiomodelresources.getExteriorWaterEquipmentDefinitions

def getExteriorWaterEquipmentDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ExteriorWaterEquipmentDefinition >":
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinitionByName(t_model, t_name)
getExteriorWaterEquipmentDefinitionByName = _openstudiomodelresources.getExteriorWaterEquipmentDefinitionByName

def getExteriorWaterEquipmentDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ExteriorWaterEquipmentDefinition,std::allocator< openstudio::model::ExteriorWaterEquipmentDefinition > >":
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)
getExteriorWaterEquipmentDefinitionsByName = _openstudiomodelresources.getExteriorWaterEquipmentDefinitionsByName
class RenderingColor(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderingColor, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderingColor, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_RenderingColor(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_RenderingColor
    __del__ = lambda self: None
    __swig_getmethods__["fromColorString"] = lambda x: _openstudiomodelresources.RenderingColor_fromColorString
    if _newclass:
        fromColorString = staticmethod(_openstudiomodelresources.RenderingColor_fromColorString)
    __swig_getmethods__["randomColor"] = lambda x: _openstudiomodelresources.RenderingColor_randomColor
    if _newclass:
        randomColor = staticmethod(_openstudiomodelresources.RenderingColor_randomColor)
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.RenderingColor_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.RenderingColor_iddObjectType)

    def renderingRedValue(self) -> "int":
        return _openstudiomodelresources.RenderingColor_renderingRedValue(self)

    def renderingGreenValue(self) -> "int":
        return _openstudiomodelresources.RenderingColor_renderingGreenValue(self)

    def renderingBlueValue(self) -> "int":
        return _openstudiomodelresources.RenderingColor_renderingBlueValue(self)

    def renderingAlphaValue(self) -> "int":
        return _openstudiomodelresources.RenderingColor_renderingAlphaValue(self)

    def isRenderingAlphaValueDefaulted(self) -> "bool":
        return _openstudiomodelresources.RenderingColor_isRenderingAlphaValueDefaulted(self)

    def setRenderingRedValue(self, renderingRedValue: 'int') -> "bool":
        return _openstudiomodelresources.RenderingColor_setRenderingRedValue(self, renderingRedValue)

    def setRenderingGreenValue(self, renderingGreenValue: 'int') -> "bool":
        return _openstudiomodelresources.RenderingColor_setRenderingGreenValue(self, renderingGreenValue)

    def setRenderingBlueValue(self, renderingBlueValue: 'int') -> "bool":
        return _openstudiomodelresources.RenderingColor_setRenderingBlueValue(self, renderingBlueValue)

    def setRenderingAlphaValue(self, renderingAlphaValue: 'int') -> "bool":
        return _openstudiomodelresources.RenderingColor_setRenderingAlphaValue(self, renderingAlphaValue)

    def resetRenderingAlphaValue(self) -> "void":
        return _openstudiomodelresources.RenderingColor_resetRenderingAlphaValue(self)

    def colorString(self) -> "std::string":
        return _openstudiomodelresources.RenderingColor_colorString(self)
RenderingColor_swigregister = _openstudiomodelresources.RenderingColor_swigregister
RenderingColor_swigregister(RenderingColor)

def RenderingColor_fromColorString(s: 'std::string const &', model: 'Model') -> "boost::optional< openstudio::model::RenderingColor >":
    return _openstudiomodelresources.RenderingColor_fromColorString(s, model)
RenderingColor_fromColorString = _openstudiomodelresources.RenderingColor_fromColorString

def RenderingColor_randomColor() -> "QColor":
    return _openstudiomodelresources.RenderingColor_randomColor()
RenderingColor_randomColor = _openstudiomodelresources.RenderingColor_randomColor

def RenderingColor_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.RenderingColor_iddObjectType()
RenderingColor_iddObjectType = _openstudiomodelresources.RenderingColor_iddObjectType


def toRenderingColor(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RenderingColor >":
    return _openstudiomodelresources.toRenderingColor(idfObject)
toRenderingColor = _openstudiomodelresources.toRenderingColor

def getRenderingColor(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RenderingColor >":
    return _openstudiomodelresources.getRenderingColor(t_model, t_handle)
getRenderingColor = _openstudiomodelresources.getRenderingColor

def getRenderingColors(t_model: 'Model') -> "std::vector< openstudio::model::RenderingColor,std::allocator< openstudio::model::RenderingColor > >":
    return _openstudiomodelresources.getRenderingColors(t_model)
getRenderingColors = _openstudiomodelresources.getRenderingColors

def getRenderingColorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RenderingColor >":
    return _openstudiomodelresources.getRenderingColorByName(t_model, t_name)
getRenderingColorByName = _openstudiomodelresources.getRenderingColorByName

def getRenderingColorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RenderingColor,std::allocator< openstudio::model::RenderingColor > >":
    return _openstudiomodelresources.getRenderingColorsByName(t_model, t_name, t_exactMatch)
getRenderingColorsByName = _openstudiomodelresources.getRenderingColorsByName
class DesignSpecificationOutdoorAir(openstudiomodelcore.ResourceObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignSpecificationOutdoorAir, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DesignSpecificationOutdoorAir, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelresources.new_DesignSpecificationOutdoorAir(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_DesignSpecificationOutdoorAir
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelresources.DesignSpecificationOutdoorAir_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelresources.DesignSpecificationOutdoorAir_iddObjectType)
    __swig_getmethods__["outdoorAirMethodValues"] = lambda x: _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethodValues
    if _newclass:
        outdoorAirMethodValues = staticmethod(_openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethodValues)
    __swig_getmethods__["validOutdoorAirMethodValues"] = lambda x: _openstudiomodelresources.DesignSpecificationOutdoorAir_validOutdoorAirMethodValues
    if _newclass:
        validOutdoorAirMethodValues = staticmethod(_openstudiomodelresources.DesignSpecificationOutdoorAir_validOutdoorAirMethodValues)

    def outdoorAirMethod(self) -> "std::string":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethod(self)

    def isOutdoorAirMethodDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirMethodDefaulted(self)

    def outdoorAirFlowperPerson(self) -> "double":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowperPerson(self)

    def getOutdoorAirFlowperPerson(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_getOutdoorAirFlowperPerson(self, returnIP)

    def isOutdoorAirFlowperPersonDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowperPersonDefaulted(self)

    def outdoorAirFlowperFloorArea(self) -> "double":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowperFloorArea(self)

    def getOutdoorAirFlowperFloorArea(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_getOutdoorAirFlowperFloorArea(self, returnIP)

    def isOutdoorAirFlowperFloorAreaDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowperFloorAreaDefaulted(self)

    def outdoorAirFlowRate(self) -> "double":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowRate(self)

    def getOutdoorAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_getOutdoorAirFlowRate(self, returnIP)

    def isOutdoorAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowRateDefaulted(self)

    def outdoorAirFlowAirChangesperHour(self) -> "double":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowAirChangesperHour(self)

    def getOutdoorAirFlowAirChangesperHour(self, returnIP: 'bool'=False) -> "openstudio::Quantity":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_getOutdoorAirFlowAirChangesperHour(self, returnIP)

    def isOutdoorAirFlowAirChangesperHourDefaulted(self) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowAirChangesperHourDefaulted(self)

    def outdoorAirFlowRateFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowRateFractionSchedule(self)

    def setOutdoorAirMethod(self, outdoorAirMethod: 'std::string') -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirMethod(self, outdoorAirMethod)

    def resetOutdoorAirMethod(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirMethod(self)

    def setOutdoorAirFlowperPerson(self, *args) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowperPerson(self, *args)

    def resetOutdoorAirFlowperPerson(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowperPerson(self)

    def setOutdoorAirFlowperFloorArea(self, *args) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowperFloorArea(self, *args)

    def resetOutdoorAirFlowperFloorArea(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowperFloorArea(self)

    def setOutdoorAirFlowRate(self, *args) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowRate(self, *args)

    def resetOutdoorAirFlowRate(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowRate(self)

    def setOutdoorAirFlowAirChangesperHour(self, *args) -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowAirChangesperHour(self, *args)

    def resetOutdoorAirFlowAirChangesperHour(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowAirChangesperHour(self)

    def setOutdoorAirFlowRateFractionSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowRateFractionSchedule(self, schedule)

    def resetOutdoorAirFlowRateFractionSchedule(self) -> "void":
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowRateFractionSchedule(self)
DesignSpecificationOutdoorAir_swigregister = _openstudiomodelresources.DesignSpecificationOutdoorAir_swigregister
DesignSpecificationOutdoorAir_swigregister(DesignSpecificationOutdoorAir)

def DesignSpecificationOutdoorAir_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelresources.DesignSpecificationOutdoorAir_iddObjectType()
DesignSpecificationOutdoorAir_iddObjectType = _openstudiomodelresources.DesignSpecificationOutdoorAir_iddObjectType

def DesignSpecificationOutdoorAir_outdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethodValues()
DesignSpecificationOutdoorAir_outdoorAirMethodValues = _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethodValues

def DesignSpecificationOutdoorAir_validOutdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelresources.DesignSpecificationOutdoorAir_validOutdoorAirMethodValues()
DesignSpecificationOutdoorAir_validOutdoorAirMethodValues = _openstudiomodelresources.DesignSpecificationOutdoorAir_validOutdoorAirMethodValues


def toDesignSpecificationOutdoorAir(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::DesignSpecificationOutdoorAir >":
    return _openstudiomodelresources.toDesignSpecificationOutdoorAir(idfObject)
toDesignSpecificationOutdoorAir = _openstudiomodelresources.toDesignSpecificationOutdoorAir

def getDesignSpecificationOutdoorAir(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::DesignSpecificationOutdoorAir >":
    return _openstudiomodelresources.getDesignSpecificationOutdoorAir(t_model, t_handle)
getDesignSpecificationOutdoorAir = _openstudiomodelresources.getDesignSpecificationOutdoorAir

def getDesignSpecificationOutdoorAirs(t_model: 'Model') -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir,std::allocator< openstudio::model::DesignSpecificationOutdoorAir > >":
    return _openstudiomodelresources.getDesignSpecificationOutdoorAirs(t_model)
getDesignSpecificationOutdoorAirs = _openstudiomodelresources.getDesignSpecificationOutdoorAirs

def getDesignSpecificationOutdoorAirByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::DesignSpecificationOutdoorAir >":
    return _openstudiomodelresources.getDesignSpecificationOutdoorAirByName(t_model, t_name)
getDesignSpecificationOutdoorAirByName = _openstudiomodelresources.getDesignSpecificationOutdoorAirByName

def getDesignSpecificationOutdoorAirsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::DesignSpecificationOutdoorAir,std::allocator< openstudio::model::DesignSpecificationOutdoorAir > >":
    return _openstudiomodelresources.getDesignSpecificationOutdoorAirsByName(t_model, t_name, t_exactMatch)
getDesignSpecificationOutdoorAirsByName = _openstudiomodelresources.getDesignSpecificationOutdoorAirsByName
class ScheduleType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["className"] = _openstudiomodelresources.ScheduleType_className_set
    __swig_getmethods__["className"] = _openstudiomodelresources.ScheduleType_className_get
    if _newclass:
        className = _swig_property(_openstudiomodelresources.ScheduleType_className_get, _openstudiomodelresources.ScheduleType_className_set)
    __swig_setmethods__["scheduleDisplayName"] = _openstudiomodelresources.ScheduleType_scheduleDisplayName_set
    __swig_getmethods__["scheduleDisplayName"] = _openstudiomodelresources.ScheduleType_scheduleDisplayName_get
    if _newclass:
        scheduleDisplayName = _swig_property(_openstudiomodelresources.ScheduleType_scheduleDisplayName_get, _openstudiomodelresources.ScheduleType_scheduleDisplayName_set)
    __swig_setmethods__["scheduleRelationshipName"] = _openstudiomodelresources.ScheduleType_scheduleRelationshipName_set
    __swig_getmethods__["scheduleRelationshipName"] = _openstudiomodelresources.ScheduleType_scheduleRelationshipName_get
    if _newclass:
        scheduleRelationshipName = _swig_property(_openstudiomodelresources.ScheduleType_scheduleRelationshipName_get, _openstudiomodelresources.ScheduleType_scheduleRelationshipName_set)
    __swig_setmethods__["isContinuous"] = _openstudiomodelresources.ScheduleType_isContinuous_set
    __swig_getmethods__["isContinuous"] = _openstudiomodelresources.ScheduleType_isContinuous_get
    if _newclass:
        isContinuous = _swig_property(_openstudiomodelresources.ScheduleType_isContinuous_get, _openstudiomodelresources.ScheduleType_isContinuous_set)
    __swig_setmethods__["unitType"] = _openstudiomodelresources.ScheduleType_unitType_set
    __swig_getmethods__["unitType"] = _openstudiomodelresources.ScheduleType_unitType_get
    if _newclass:
        unitType = _swig_property(_openstudiomodelresources.ScheduleType_unitType_get, _openstudiomodelresources.ScheduleType_unitType_set)
    __swig_setmethods__["lowerLimitValue"] = _openstudiomodelresources.ScheduleType_lowerLimitValue_set
    __swig_getmethods__["lowerLimitValue"] = _openstudiomodelresources.ScheduleType_lowerLimitValue_get
    if _newclass:
        lowerLimitValue = _swig_property(_openstudiomodelresources.ScheduleType_lowerLimitValue_get, _openstudiomodelresources.ScheduleType_lowerLimitValue_set)
    __swig_setmethods__["upperLimitValue"] = _openstudiomodelresources.ScheduleType_upperLimitValue_set
    __swig_getmethods__["upperLimitValue"] = _openstudiomodelresources.ScheduleType_upperLimitValue_get
    if _newclass:
        upperLimitValue = _swig_property(_openstudiomodelresources.ScheduleType_upperLimitValue_get, _openstudiomodelresources.ScheduleType_upperLimitValue_set)

    def getLowerLimitValue(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.ScheduleType_getLowerLimitValue(self, returnIP)

    def getUpperLimitValue(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":
        return _openstudiomodelresources.ScheduleType_getUpperLimitValue(self, returnIP)

    def __init__(self):
        this = _openstudiomodelresources.new_ScheduleType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleType
    __del__ = lambda self: None
ScheduleType_swigregister = _openstudiomodelresources.ScheduleType_swigregister
ScheduleType_swigregister(ScheduleType)

class ScheduleTypeRegistrySingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleTypeRegistrySingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleTypeRegistrySingleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def classNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_classNames(self)

    def getScheduleTypesByClassName(self, className: 'std::string const &') -> "std::vector< openstudio::model::ScheduleType,std::allocator< openstudio::model::ScheduleType > >":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getScheduleTypesByClassName(self, className)

    def getScheduleType(self, className: 'std::string const &', scheduleDisplayName: 'std::string const &') -> "openstudio::model::ScheduleType":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getScheduleType(self, className, scheduleDisplayName)

    def getOrCreateScheduleTypeLimits(self, scheduleType: 'ScheduleType', model: 'Model') -> "openstudio::model::ScheduleTypeLimits":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getOrCreateScheduleTypeLimits(self, scheduleType, model)

    def getDefaultName(self, scheduleType: 'ScheduleType') -> "std::string":
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getDefaultName(self, scheduleType)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleTypeRegistrySingleton
    __del__ = lambda self: None
ScheduleTypeRegistrySingleton_swigregister = _openstudiomodelresources.ScheduleTypeRegistrySingleton_swigregister
ScheduleTypeRegistrySingleton_swigregister(ScheduleTypeRegistrySingleton)


def isCompatible(*args) -> "bool":
    return _openstudiomodelresources.isCompatible(*args)
isCompatible = _openstudiomodelresources.isCompatible

def checkOrAssignScheduleTypeLimits(className: 'std::string const &', scheduleDisplayName: 'std::string const &', schedule: 'Schedule') -> "bool":
    return _openstudiomodelresources.checkOrAssignScheduleTypeLimits(className, scheduleDisplayName, schedule)
checkOrAssignScheduleTypeLimits = _openstudiomodelresources.checkOrAssignScheduleTypeLimits

def getCompatibleScheduleTypeLimits(model: 'Model', className: 'std::string const &', scheduleDisplayName: 'std::string const &') -> "std::vector< openstudio::model::ScheduleTypeLimits,std::allocator< openstudio::model::ScheduleTypeLimits > >":
    return _openstudiomodelresources.getCompatibleScheduleTypeLimits(model, className, scheduleDisplayName)
getCompatibleScheduleTypeLimits = _openstudiomodelresources.getCompatibleScheduleTypeLimits

def getCompatibleSchedules(model: 'Model', className: 'std::string const &', scheduleDisplayName: 'std::string const &') -> "std::vector< openstudio::model::Schedule,std::allocator< openstudio::model::Schedule > >":
    return _openstudiomodelresources.getCompatibleSchedules(model, className, scheduleDisplayName)
getCompatibleSchedules = _openstudiomodelresources.getCompatibleSchedules
# This file is compatible with both classic and new-style classes.


