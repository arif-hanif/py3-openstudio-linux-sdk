# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudioosversion', [dirname(__file__)])
        except ImportError:
            import _openstudioosversion
            return _openstudioosversion
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudioosversion', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudioosversion = swig_import_helper()
    del swig_import_helper
else:
    import _openstudioosversion
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioosversion.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudioosversion.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioosversion.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioosversion.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudioosversion.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioosversion.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudioosversion.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudioosversion.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudioosversion.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudioosversion.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioosversion.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioosversion.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioosversion.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioosversion.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioosversion.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioosversion.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudioosversion.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudioosversion.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudioosversion.SHARED_PTR_DISOWN_swigconstant(_openstudioosversion)
SHARED_PTR_DISOWN = _openstudioosversion.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudiomodel
class VersionTranslator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VersionTranslator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VersionTranslator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudioosversion.new_VersionTranslator()
        try:
            self.this.append(this)
        except:
            self.this = this

    def loadModel(self, *args) -> "boost::optional< openstudio::model::Model >":
        return _openstudioosversion.VersionTranslator_loadModel(self, *args)

    def loadModelFromString(self, str: 'std::string const &', progressBar: 'ProgressBar'=None) -> "boost::optional< openstudio::model::Model >":
        return _openstudioosversion.VersionTranslator_loadModelFromString(self, str, progressBar)

    def loadComponent(self, *args) -> "boost::optional< openstudio::model::Component >":
        return _openstudioosversion.VersionTranslator_loadComponent(self, *args)

    def originalVersion(self) -> "openstudio::VersionString":
        return _openstudioosversion.VersionTranslator_originalVersion(self)

    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioosversion.VersionTranslator_warnings(self)

    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioosversion.VersionTranslator_errors(self)

    def deprecatedObjects(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudioosversion.VersionTranslator_deprecatedObjects(self)

    def untranslatedObjects(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudioosversion.VersionTranslator_untranslatedObjects(self)

    def newObjects(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudioosversion.VersionTranslator_newObjects(self)

    def refactoredObjects(self) -> "std::vector< std::pair< openstudio::IdfObject,openstudio::IdfObject >,std::allocator< std::pair< openstudio::IdfObject,openstudio::IdfObject > > >":
        return _openstudioosversion.VersionTranslator_refactoredObjects(self)

    def allowNewerVersions(self) -> "bool":
        return _openstudioosversion.VersionTranslator_allowNewerVersions(self)

    def setAllowNewerVersions(self, allowNewerVersions: 'bool') -> "void":
        return _openstudioosversion.VersionTranslator_setAllowNewerVersions(self, allowNewerVersions)
    __swig_destroy__ = _openstudioosversion.delete_VersionTranslator
    __del__ = lambda self: None
VersionTranslator_swigregister = _openstudioosversion.VersionTranslator_swigregister
VersionTranslator_swigregister(VersionTranslator)

# This file is compatible with both classic and new-style classes.


