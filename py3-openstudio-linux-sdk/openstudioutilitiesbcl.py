# This file was automatically generated by SWIG (http://www.swig.org).

# Version 3.0.7

#

# Do not make changes to this file unless you know what you are doing--modify

# the SWIG interface file instead.











from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():

        from os.path import dirname

        import imp

        fp = None

        try:

            fp, pathname, description = imp.find_module('_openstudioutilitiesbcl', [dirname(__file__)])

        except ImportError:

            import _openstudioutilitiesbcl

            return _openstudioutilitiesbcl

        if fp is not None:

            try:

                _mod = imp.load_module('_openstudioutilitiesbcl', fp, pathname, description)

            finally:

                fp.close()

            return _mod

    _openstudioutilitiesbcl = swig_import_helper()

    del swig_import_helper

else:

    import _openstudioutilitiesbcl

del version_info

try:

    _swig_property = property

except NameError:

    pass  # Python < 2.2 doesn't have 'property'.





def _swig_setattr_nondynamic(self, class_type, name, value, static=1):

    if (name == "thisown"):

        return self.this.own(value)

    if (name == "this"):

        if type(value).__name__ == 'SwigPyObject':

            self.__dict__[name] = value

            return

    method = class_type.__swig_setmethods__.get(name, None)

    if method:

        return method(self, value)

    if (not static):

        if _newclass:

            object.__setattr__(self, name, value)

        else:

            self.__dict__[name] = value

    else:

        raise AttributeError("You cannot add attributes to %s" % self)





def _swig_setattr(self, class_type, name, value):

    return _swig_setattr_nondynamic(self, class_type, name, value, 0)





def _swig_getattr_nondynamic(self, class_type, name, static=1):

    if (name == "thisown"):

        return self.this.own()

    method = class_type.__swig_getmethods__.get(name, None)

    if method:

        return method(self)

    if (not static):

        return object.__getattr__(self, name)

    else:

        raise AttributeError(name)



def _swig_getattr(self, class_type, name):

    return _swig_getattr_nondynamic(self, class_type, name, 0)





def _swig_repr(self):

    try:

        strthis = "proxy of " + self.this.__repr__()

    except:

        strthis = ""

    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)



try:

    _object = object

    _newclass = 1

except AttributeError:

    class _object:

        pass

    _newclass = 0





try:

    import weakref

    weakref_proxy = weakref.proxy

except:

    weakref_proxy = lambda x: x





class SwigPyIterator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiesbcl.delete_SwigPyIterator

    __del__ = lambda self: None



    def value(self) -> "PyObject *":

        return _openstudioutilitiesbcl.SwigPyIterator_value(self)



    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.SwigPyIterator_incr(self, n)



    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.SwigPyIterator_decr(self, n)



    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":

        return _openstudioutilitiesbcl.SwigPyIterator_distance(self, x)



    def equal(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiesbcl.SwigPyIterator_equal(self, x)



    def copy(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.SwigPyIterator_copy(self)



    def next(self) -> "PyObject *":

        return _openstudioutilitiesbcl.SwigPyIterator_next(self)



    def __next__(self) -> "PyObject *":

        return _openstudioutilitiesbcl.SwigPyIterator___next__(self)



    def previous(self) -> "PyObject *":

        return _openstudioutilitiesbcl.SwigPyIterator_previous(self)



    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.SwigPyIterator_advance(self, n)



    def __eq__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiesbcl.SwigPyIterator___eq__(self, x)



    def __ne__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiesbcl.SwigPyIterator___ne__(self, x)



    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiesbcl.SwigPyIterator___iadd__(self, n)



    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiesbcl.SwigPyIterator___isub__(self, n)



    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.SwigPyIterator___add__(self, n)



    def __sub__(self, *args) -> "ptrdiff_t":

        return _openstudioutilitiesbcl.SwigPyIterator___sub__(self, *args)

    def __iter__(self):

        return self

SwigPyIterator_swigregister = _openstudioutilitiesbcl.SwigPyIterator_swigregister

SwigPyIterator_swigregister(SwigPyIterator)





_openstudioutilitiesbcl.SHARED_PTR_DISOWN_swigconstant(_openstudioutilitiesbcl)

SHARED_PTR_DISOWN = _openstudioutilitiesbcl.SHARED_PTR_DISOWN

from .import openstudioutilitiescore

from .import openstudioutilitiessql

from .import openstudioutilitiesgeometry

from .import openstudioutilitiesplot

from .import openstudioutilitiesdata

from .import openstudioutilitiestime

from .import openstudioutilitiesunits

class RemoteQueryResponseVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoteQueryResponseVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, RemoteQueryResponseVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::RemoteQueryResponse >::size_type":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector___len__(self)



    def pop(self) -> "std::vector< openstudio::RemoteQueryResponse >::value_type":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::RemoteQueryResponse >::difference_type', j: 'std::vector< openstudio::RemoteQueryResponse >::difference_type') -> "std::vector< openstudio::RemoteQueryResponse,std::allocator< openstudio::RemoteQueryResponse > > *":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::RemoteQueryResponse >::difference_type', j: 'std::vector< openstudio::RemoteQueryResponse >::difference_type') -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::RemoteQueryResponse >::value_type const &":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector___setitem__(self, *args)



    def append(self, x: 'RemoteQueryResponse') -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_empty(self)



    def size(self) -> "std::vector< openstudio::RemoteQueryResponse >::size_type":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_clear(self)



    def swap(self, v: 'RemoteQueryResponseVector') -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::RemoteQueryResponse >::allocator_type":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::RemoteQueryResponse >::iterator":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_begin(self)



    def end(self) -> "std::vector< openstudio::RemoteQueryResponse >::iterator":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::RemoteQueryResponse >::reverse_iterator":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::RemoteQueryResponse >::reverse_iterator":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::RemoteQueryResponse >::iterator":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_RemoteQueryResponseVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'RemoteQueryResponse') -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::RemoteQueryResponse >::value_type const &":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_front(self)



    def back(self) -> "std::vector< openstudio::RemoteQueryResponse >::value_type const &":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_back(self)



    def assign(self, n: 'std::vector< openstudio::RemoteQueryResponse >::size_type', x: 'RemoteQueryResponse') -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::RemoteQueryResponse >::size_type', x: 'RemoteQueryResponse') -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::RemoteQueryResponse >::size_type') -> "void":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::RemoteQueryResponse >::size_type":

        return _openstudioutilitiesbcl.RemoteQueryResponseVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_RemoteQueryResponseVector

    __del__ = lambda self: None

RemoteQueryResponseVector_swigregister = _openstudioutilitiesbcl.RemoteQueryResponseVector_swigregister

RemoteQueryResponseVector_swigregister(RemoteQueryResponseVector)



class BCLSearchResultVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLSearchResultVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLSearchResultVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLSearchResultVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLSearchResultVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLSearchResultVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLSearchResult >::size_type":

        return _openstudioutilitiesbcl.BCLSearchResultVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLSearchResult >::value_type":

        return _openstudioutilitiesbcl.BCLSearchResultVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLSearchResult >::difference_type', j: 'std::vector< openstudio::BCLSearchResult >::difference_type') -> "std::vector< openstudio::BCLSearchResult,std::allocator< openstudio::BCLSearchResult > > *":

        return _openstudioutilitiesbcl.BCLSearchResultVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLSearchResult >::difference_type', j: 'std::vector< openstudio::BCLSearchResult >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLSearchResult >::value_type const &":

        return _openstudioutilitiesbcl.BCLSearchResultVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector___setitem__(self, *args)



    def append(self, x: 'BCLSearchResult') -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLSearchResultVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLSearchResult >::size_type":

        return _openstudioutilitiesbcl.BCLSearchResultVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector_clear(self)



    def swap(self, v: 'BCLSearchResultVector') -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLSearchResult >::allocator_type":

        return _openstudioutilitiesbcl.BCLSearchResultVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLSearchResult >::iterator":

        return _openstudioutilitiesbcl.BCLSearchResultVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLSearchResult >::iterator":

        return _openstudioutilitiesbcl.BCLSearchResultVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLSearchResult >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLSearchResultVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLSearchResult >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLSearchResultVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLSearchResult >::iterator":

        return _openstudioutilitiesbcl.BCLSearchResultVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLSearchResultVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLSearchResult') -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLSearchResult >::value_type const &":

        return _openstudioutilitiesbcl.BCLSearchResultVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLSearchResult >::value_type const &":

        return _openstudioutilitiesbcl.BCLSearchResultVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLSearchResult >::size_type', x: 'BCLSearchResult') -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLSearchResult >::size_type', x: 'BCLSearchResult') -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLSearchResult >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLSearchResultVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLSearchResult >::size_type":

        return _openstudioutilitiesbcl.BCLSearchResultVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLSearchResultVector

    __del__ = lambda self: None

BCLSearchResultVector_swigregister = _openstudioutilitiesbcl.BCLSearchResultVector_swigregister

BCLSearchResultVector_swigregister(BCLSearchResultVector)



class OptionalBCLSearchResult(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBCLSearchResult, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBCLSearchResult, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_OptionalBCLSearchResult(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesbcl.OptionalBCLSearchResult_reset(self)



    def __ref__(self) -> "openstudio::BCLSearchResult":

        return _openstudioutilitiesbcl.OptionalBCLSearchResult___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLSearchResult_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLSearchResult_isNull(self)



    def get(self) -> "openstudio::BCLSearchResult":

        return _openstudioutilitiesbcl.OptionalBCLSearchResult_get(self)



    def set(self, t: 'BCLSearchResult') -> "void":

        return _openstudioutilitiesbcl.OptionalBCLSearchResult_set(self, t)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLSearchResult

    __del__ = lambda self: None

OptionalBCLSearchResult_swigregister = _openstudioutilitiesbcl.OptionalBCLSearchResult_swigregister

OptionalBCLSearchResult_swigregister(OptionalBCLSearchResult)



class BCLMetaSearchResultVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLMetaSearchResultVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLMetaSearchResultVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLMetaSearchResult >::size_type":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLMetaSearchResult >::value_type":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLMetaSearchResult >::difference_type', j: 'std::vector< openstudio::BCLMetaSearchResult >::difference_type') -> "std::vector< openstudio::BCLMetaSearchResult,std::allocator< openstudio::BCLMetaSearchResult > > *":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLMetaSearchResult >::difference_type', j: 'std::vector< openstudio::BCLMetaSearchResult >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLMetaSearchResult >::value_type const &":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___setitem__(self, *args)



    def append(self, x: 'BCLMetaSearchResult') -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLMetaSearchResult >::size_type":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_clear(self)



    def swap(self, v: 'BCLMetaSearchResultVector') -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLMetaSearchResult >::allocator_type":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLMetaSearchResult >::iterator":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLMetaSearchResult >::iterator":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLMetaSearchResult >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLMetaSearchResult >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLMetaSearchResult >::iterator":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLMetaSearchResultVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLMetaSearchResult') -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLMetaSearchResult >::value_type const &":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLMetaSearchResult >::value_type const &":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLMetaSearchResult >::size_type', x: 'BCLMetaSearchResult') -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLMetaSearchResult >::size_type', x: 'BCLMetaSearchResult') -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLMetaSearchResult >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLMetaSearchResult >::size_type":

        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMetaSearchResultVector

    __del__ = lambda self: None

BCLMetaSearchResultVector_swigregister = _openstudioutilitiesbcl.BCLMetaSearchResultVector_swigregister

BCLMetaSearchResultVector_swigregister(BCLMetaSearchResultVector)



class OptionalBCLMetaSearchResult(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBCLMetaSearchResult, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBCLMetaSearchResult, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_OptionalBCLMetaSearchResult(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_reset(self)



    def __ref__(self) -> "openstudio::BCLMetaSearchResult":

        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_isNull(self)



    def get(self) -> "openstudio::BCLMetaSearchResult":

        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_get(self)



    def set(self, t: 'BCLMetaSearchResult') -> "void":

        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_set(self, t)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLMetaSearchResult

    __del__ = lambda self: None

OptionalBCLMetaSearchResult_swigregister = _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_swigregister

OptionalBCLMetaSearchResult_swigregister(OptionalBCLMetaSearchResult)



class BCLFacetVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLFacetVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLFacetVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLFacetVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFacetVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFacetVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLFacet >::size_type":

        return _openstudioutilitiesbcl.BCLFacetVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLFacet >::value_type":

        return _openstudioutilitiesbcl.BCLFacetVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLFacet >::difference_type', j: 'std::vector< openstudio::BCLFacet >::difference_type') -> "std::vector< openstudio::BCLFacet,std::allocator< openstudio::BCLFacet > > *":

        return _openstudioutilitiesbcl.BCLFacetVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLFacet >::difference_type', j: 'std::vector< openstudio::BCLFacet >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLFacet >::value_type const &":

        return _openstudioutilitiesbcl.BCLFacetVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector___setitem__(self, *args)



    def append(self, x: 'BCLFacet') -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFacetVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLFacet >::size_type":

        return _openstudioutilitiesbcl.BCLFacetVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector_clear(self)



    def swap(self, v: 'BCLFacetVector') -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLFacet >::allocator_type":

        return _openstudioutilitiesbcl.BCLFacetVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLFacet >::iterator":

        return _openstudioutilitiesbcl.BCLFacetVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLFacet >::iterator":

        return _openstudioutilitiesbcl.BCLFacetVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLFacet >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLFacetVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLFacet >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLFacetVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLFacet >::iterator":

        return _openstudioutilitiesbcl.BCLFacetVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLFacetVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLFacet') -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLFacet >::value_type const &":

        return _openstudioutilitiesbcl.BCLFacetVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLFacet >::value_type const &":

        return _openstudioutilitiesbcl.BCLFacetVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLFacet >::size_type', x: 'BCLFacet') -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLFacet >::size_type', x: 'BCLFacet') -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLFacet >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLFacetVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLFacet >::size_type":

        return _openstudioutilitiesbcl.BCLFacetVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFacetVector

    __del__ = lambda self: None

BCLFacetVector_swigregister = _openstudioutilitiesbcl.BCLFacetVector_swigregister

BCLFacetVector_swigregister(BCLFacetVector)



class BCLTaxonomyTermVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLTaxonomyTermVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLTaxonomyTermVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::size_type":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::value_type":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLTaxonomyTerm >::difference_type', j: 'std::vector< openstudio::BCLTaxonomyTerm >::difference_type') -> "std::vector< openstudio::BCLTaxonomyTerm,std::allocator< openstudio::BCLTaxonomyTerm > > *":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLTaxonomyTerm >::difference_type', j: 'std::vector< openstudio::BCLTaxonomyTerm >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLTaxonomyTerm >::value_type const &":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___setitem__(self, *args)



    def append(self, x: 'BCLTaxonomyTerm') -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::size_type":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_clear(self)



    def swap(self, v: 'BCLTaxonomyTermVector') -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::allocator_type":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::iterator":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::iterator":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLTaxonomyTerm >::iterator":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLTaxonomyTermVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLTaxonomyTerm') -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::value_type const &":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::value_type const &":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLTaxonomyTerm >::size_type', x: 'BCLTaxonomyTerm') -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLTaxonomyTerm >::size_type', x: 'BCLTaxonomyTerm') -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLTaxonomyTerm >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLTaxonomyTerm >::size_type":

        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLTaxonomyTermVector

    __del__ = lambda self: None

BCLTaxonomyTermVector_swigregister = _openstudioutilitiesbcl.BCLTaxonomyTermVector_swigregister

BCLTaxonomyTermVector_swigregister(BCLTaxonomyTermVector)



class BCLFileVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLFileVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLFileVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLFileVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFileVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFileVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLFile >::size_type":

        return _openstudioutilitiesbcl.BCLFileVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLFile >::value_type":

        return _openstudioutilitiesbcl.BCLFileVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLFile >::difference_type', j: 'std::vector< openstudio::BCLFile >::difference_type') -> "std::vector< openstudio::BCLFile,std::allocator< openstudio::BCLFile > > *":

        return _openstudioutilitiesbcl.BCLFileVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFileVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLFile >::difference_type', j: 'std::vector< openstudio::BCLFile >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLFileVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFileVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLFile >::value_type const &":

        return _openstudioutilitiesbcl.BCLFileVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFileVector___setitem__(self, *args)



    def append(self, x: 'BCLFile') -> "void":

        return _openstudioutilitiesbcl.BCLFileVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFileVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLFile >::size_type":

        return _openstudioutilitiesbcl.BCLFileVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLFileVector_clear(self)



    def swap(self, v: 'BCLFileVector') -> "void":

        return _openstudioutilitiesbcl.BCLFileVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLFile >::allocator_type":

        return _openstudioutilitiesbcl.BCLFileVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLFile >::iterator":

        return _openstudioutilitiesbcl.BCLFileVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLFile >::iterator":

        return _openstudioutilitiesbcl.BCLFileVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLFile >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLFileVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLFile >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLFileVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLFileVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLFile >::iterator":

        return _openstudioutilitiesbcl.BCLFileVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLFileVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLFile') -> "void":

        return _openstudioutilitiesbcl.BCLFileVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLFile >::value_type const &":

        return _openstudioutilitiesbcl.BCLFileVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLFile >::value_type const &":

        return _openstudioutilitiesbcl.BCLFileVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLFile >::size_type', x: 'BCLFile') -> "void":

        return _openstudioutilitiesbcl.BCLFileVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLFile >::size_type', x: 'BCLFile') -> "void":

        return _openstudioutilitiesbcl.BCLFileVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFileVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLFile >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLFileVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLFile >::size_type":

        return _openstudioutilitiesbcl.BCLFileVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFileVector

    __del__ = lambda self: None

BCLFileVector_swigregister = _openstudioutilitiesbcl.BCLFileVector_swigregister

BCLFileVector_swigregister(BCLFileVector)



class BCLProvenanceVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLProvenanceVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLProvenanceVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLProvenanceVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLProvenanceVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLProvenanceVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLProvenance >::size_type":

        return _openstudioutilitiesbcl.BCLProvenanceVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLProvenance >::value_type":

        return _openstudioutilitiesbcl.BCLProvenanceVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLProvenance >::difference_type', j: 'std::vector< openstudio::BCLProvenance >::difference_type') -> "std::vector< openstudio::BCLProvenance,std::allocator< openstudio::BCLProvenance > > *":

        return _openstudioutilitiesbcl.BCLProvenanceVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLProvenance >::difference_type', j: 'std::vector< openstudio::BCLProvenance >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLProvenance >::value_type const &":

        return _openstudioutilitiesbcl.BCLProvenanceVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector___setitem__(self, *args)



    def append(self, x: 'BCLProvenance') -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLProvenanceVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLProvenance >::size_type":

        return _openstudioutilitiesbcl.BCLProvenanceVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector_clear(self)



    def swap(self, v: 'BCLProvenanceVector') -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLProvenance >::allocator_type":

        return _openstudioutilitiesbcl.BCLProvenanceVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLProvenance >::iterator":

        return _openstudioutilitiesbcl.BCLProvenanceVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLProvenance >::iterator":

        return _openstudioutilitiesbcl.BCLProvenanceVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLProvenance >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLProvenanceVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLProvenance >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLProvenanceVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLProvenance >::iterator":

        return _openstudioutilitiesbcl.BCLProvenanceVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLProvenanceVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLProvenance') -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLProvenance >::value_type const &":

        return _openstudioutilitiesbcl.BCLProvenanceVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLProvenance >::value_type const &":

        return _openstudioutilitiesbcl.BCLProvenanceVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLProvenance >::size_type', x: 'BCLProvenance') -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLProvenance >::size_type', x: 'BCLProvenance') -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLProvenance >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLProvenanceVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLProvenance >::size_type":

        return _openstudioutilitiesbcl.BCLProvenanceVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLProvenanceVector

    __del__ = lambda self: None

BCLProvenanceVector_swigregister = _openstudioutilitiesbcl.BCLProvenanceVector_swigregister

BCLProvenanceVector_swigregister(BCLProvenanceVector)



class BCLCostVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLCostVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLCostVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLCostVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLCostVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLCostVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLCost >::size_type":

        return _openstudioutilitiesbcl.BCLCostVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLCost >::value_type":

        return _openstudioutilitiesbcl.BCLCostVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLCost >::difference_type', j: 'std::vector< openstudio::BCLCost >::difference_type') -> "std::vector< openstudio::BCLCost,std::allocator< openstudio::BCLCost > > *":

        return _openstudioutilitiesbcl.BCLCostVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLCostVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLCost >::difference_type', j: 'std::vector< openstudio::BCLCost >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLCostVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLCostVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLCost >::value_type const &":

        return _openstudioutilitiesbcl.BCLCostVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLCostVector___setitem__(self, *args)



    def append(self, x: 'BCLCost') -> "void":

        return _openstudioutilitiesbcl.BCLCostVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLCostVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLCost >::size_type":

        return _openstudioutilitiesbcl.BCLCostVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLCostVector_clear(self)



    def swap(self, v: 'BCLCostVector') -> "void":

        return _openstudioutilitiesbcl.BCLCostVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLCost >::allocator_type":

        return _openstudioutilitiesbcl.BCLCostVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLCost >::iterator":

        return _openstudioutilitiesbcl.BCLCostVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLCost >::iterator":

        return _openstudioutilitiesbcl.BCLCostVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLCost >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLCostVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLCost >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLCostVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLCostVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLCost >::iterator":

        return _openstudioutilitiesbcl.BCLCostVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLCostVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLCost') -> "void":

        return _openstudioutilitiesbcl.BCLCostVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLCost >::value_type const &":

        return _openstudioutilitiesbcl.BCLCostVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLCost >::value_type const &":

        return _openstudioutilitiesbcl.BCLCostVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLCost >::size_type', x: 'BCLCost') -> "void":

        return _openstudioutilitiesbcl.BCLCostVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLCost >::size_type', x: 'BCLCost') -> "void":

        return _openstudioutilitiesbcl.BCLCostVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLCostVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLCost >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLCostVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLCost >::size_type":

        return _openstudioutilitiesbcl.BCLCostVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLCostVector

    __del__ = lambda self: None

BCLCostVector_swigregister = _openstudioutilitiesbcl.BCLCostVector_swigregister

BCLCostVector_swigregister(BCLCostVector)



class OptionalBCLFileReference(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBCLFileReference, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBCLFileReference, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_OptionalBCLFileReference(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesbcl.OptionalBCLFileReference_reset(self)



    def __ref__(self) -> "openstudio::BCLFileReference":

        return _openstudioutilitiesbcl.OptionalBCLFileReference___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLFileReference_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLFileReference_isNull(self)



    def get(self) -> "openstudio::BCLFileReference":

        return _openstudioutilitiesbcl.OptionalBCLFileReference_get(self)



    def set(self, t: 'BCLFileReference') -> "void":

        return _openstudioutilitiesbcl.OptionalBCLFileReference_set(self, t)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLFileReference

    __del__ = lambda self: None

OptionalBCLFileReference_swigregister = _openstudioutilitiesbcl.OptionalBCLFileReference_swigregister

OptionalBCLFileReference_swigregister(OptionalBCLFileReference)



class BCLFileReferenceVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLFileReferenceVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLFileReferenceVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFileReferenceVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFileReferenceVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLFileReference >::size_type":

        return _openstudioutilitiesbcl.BCLFileReferenceVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLFileReference >::value_type":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLFileReference >::difference_type', j: 'std::vector< openstudio::BCLFileReference >::difference_type') -> "std::vector< openstudio::BCLFileReference,std::allocator< openstudio::BCLFileReference > > *":

        return _openstudioutilitiesbcl.BCLFileReferenceVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLFileReference >::difference_type', j: 'std::vector< openstudio::BCLFileReference >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLFileReference >::value_type const &":

        return _openstudioutilitiesbcl.BCLFileReferenceVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector___setitem__(self, *args)



    def append(self, x: 'BCLFileReference') -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLFileReference >::size_type":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_clear(self)



    def swap(self, v: 'BCLFileReferenceVector') -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLFileReference >::allocator_type":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLFileReference >::iterator":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLFileReference >::iterator":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLFileReference >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLFileReference >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLFileReference >::iterator":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLFileReferenceVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLFileReference') -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLFileReference >::value_type const &":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLFileReference >::value_type const &":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLFileReference >::size_type', x: 'BCLFileReference') -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLFileReference >::size_type', x: 'BCLFileReference') -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLFileReference >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLFileReference >::size_type":

        return _openstudioutilitiesbcl.BCLFileReferenceVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFileReferenceVector

    __del__ = lambda self: None

BCLFileReferenceVector_swigregister = _openstudioutilitiesbcl.BCLFileReferenceVector_swigregister

BCLFileReferenceVector_swigregister(BCLFileReferenceVector)



class OptionalBCLComponent(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBCLComponent, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBCLComponent, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_OptionalBCLComponent(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesbcl.OptionalBCLComponent_reset(self)



    def __ref__(self) -> "openstudio::BCLComponent":

        return _openstudioutilitiesbcl.OptionalBCLComponent___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLComponent_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLComponent_isNull(self)



    def get(self) -> "openstudio::BCLComponent":

        return _openstudioutilitiesbcl.OptionalBCLComponent_get(self)



    def set(self, t: 'BCLComponent') -> "void":

        return _openstudioutilitiesbcl.OptionalBCLComponent_set(self, t)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLComponent

    __del__ = lambda self: None

OptionalBCLComponent_swigregister = _openstudioutilitiesbcl.OptionalBCLComponent_swigregister

OptionalBCLComponent_swigregister(OptionalBCLComponent)



class BCLComponentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLComponentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLComponentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLComponentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLComponentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLComponentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLComponent >::size_type":

        return _openstudioutilitiesbcl.BCLComponentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLComponent >::value_type":

        return _openstudioutilitiesbcl.BCLComponentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLComponent >::difference_type', j: 'std::vector< openstudio::BCLComponent >::difference_type') -> "std::vector< openstudio::BCLComponent,std::allocator< openstudio::BCLComponent > > *":

        return _openstudioutilitiesbcl.BCLComponentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLComponent >::difference_type', j: 'std::vector< openstudio::BCLComponent >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLComponent >::value_type const &":

        return _openstudioutilitiesbcl.BCLComponentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector___setitem__(self, *args)



    def append(self, x: 'BCLComponent') -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLComponentVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLComponent >::size_type":

        return _openstudioutilitiesbcl.BCLComponentVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector_clear(self)



    def swap(self, v: 'BCLComponentVector') -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLComponent >::allocator_type":

        return _openstudioutilitiesbcl.BCLComponentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLComponent >::iterator":

        return _openstudioutilitiesbcl.BCLComponentVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLComponent >::iterator":

        return _openstudioutilitiesbcl.BCLComponentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLComponent >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLComponentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLComponent >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLComponentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLComponent >::iterator":

        return _openstudioutilitiesbcl.BCLComponentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLComponentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLComponent') -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLComponent >::value_type const &":

        return _openstudioutilitiesbcl.BCLComponentVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLComponent >::value_type const &":

        return _openstudioutilitiesbcl.BCLComponentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLComponent >::size_type', x: 'BCLComponent') -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLComponent >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLComponentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLComponent >::size_type":

        return _openstudioutilitiesbcl.BCLComponentVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLComponentVector

    __del__ = lambda self: None

BCLComponentVector_swigregister = _openstudioutilitiesbcl.BCLComponentVector_swigregister

BCLComponentVector_swigregister(BCLComponentVector)



class OptionalBCLMeasureArgument(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBCLMeasureArgument, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBCLMeasureArgument, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_OptionalBCLMeasureArgument(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_reset(self)



    def __ref__(self) -> "openstudio::BCLMeasureArgument":

        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_isNull(self)



    def get(self) -> "openstudio::BCLMeasureArgument":

        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_get(self)



    def set(self, t: 'BCLMeasureArgument') -> "void":

        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_set(self, t)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLMeasureArgument

    __del__ = lambda self: None

OptionalBCLMeasureArgument_swigregister = _openstudioutilitiesbcl.OptionalBCLMeasureArgument_swigregister

OptionalBCLMeasureArgument_swigregister(OptionalBCLMeasureArgument)



class BCLMeasureArgumentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLMeasureArgumentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLMeasureArgumentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLMeasureArgument >::size_type":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLMeasureArgument >::value_type":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLMeasureArgument >::difference_type', j: 'std::vector< openstudio::BCLMeasureArgument >::difference_type') -> "std::vector< openstudio::BCLMeasureArgument,std::allocator< openstudio::BCLMeasureArgument > > *":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLMeasureArgument >::difference_type', j: 'std::vector< openstudio::BCLMeasureArgument >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLMeasureArgument >::value_type const &":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___setitem__(self, *args)



    def append(self, x: 'BCLMeasureArgument') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLMeasureArgument >::size_type":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_clear(self)



    def swap(self, v: 'BCLMeasureArgumentVector') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLMeasureArgument >::allocator_type":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLMeasureArgument >::iterator":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLMeasureArgument >::iterator":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLMeasureArgument >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLMeasureArgument >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLMeasureArgument >::iterator":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLMeasureArgumentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLMeasureArgument') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLMeasureArgument >::value_type const &":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLMeasureArgument >::value_type const &":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLMeasureArgument >::size_type', x: 'BCLMeasureArgument') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLMeasureArgument >::size_type', x: 'BCLMeasureArgument') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLMeasureArgument >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLMeasureArgument >::size_type":

        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureArgumentVector

    __del__ = lambda self: None

BCLMeasureArgumentVector_swigregister = _openstudioutilitiesbcl.BCLMeasureArgumentVector_swigregister

BCLMeasureArgumentVector_swigregister(BCLMeasureArgumentVector)



class OptionalBCLMeasureOutput(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBCLMeasureOutput, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBCLMeasureOutput, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_OptionalBCLMeasureOutput(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_reset(self)



    def __ref__(self) -> "openstudio::BCLMeasureOutput":

        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_isNull(self)



    def get(self) -> "openstudio::BCLMeasureOutput":

        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_get(self)



    def set(self, t: 'BCLMeasureOutput') -> "void":

        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_set(self, t)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLMeasureOutput

    __del__ = lambda self: None

OptionalBCLMeasureOutput_swigregister = _openstudioutilitiesbcl.OptionalBCLMeasureOutput_swigregister

OptionalBCLMeasureOutput_swigregister(OptionalBCLMeasureOutput)



class BCLMeasureOutputVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLMeasureOutputVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLMeasureOutputVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLMeasureOutput >::size_type":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLMeasureOutput >::value_type":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLMeasureOutput >::difference_type', j: 'std::vector< openstudio::BCLMeasureOutput >::difference_type') -> "std::vector< openstudio::BCLMeasureOutput,std::allocator< openstudio::BCLMeasureOutput > > *":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLMeasureOutput >::difference_type', j: 'std::vector< openstudio::BCLMeasureOutput >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLMeasureOutput >::value_type const &":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector___setitem__(self, *args)



    def append(self, x: 'BCLMeasureOutput') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLMeasureOutput >::size_type":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_clear(self)



    def swap(self, v: 'BCLMeasureOutputVector') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLMeasureOutput >::allocator_type":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLMeasureOutput >::iterator":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLMeasureOutput >::iterator":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLMeasureOutput >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLMeasureOutput >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLMeasureOutput >::iterator":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLMeasureOutputVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLMeasureOutput') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLMeasureOutput >::value_type const &":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLMeasureOutput >::value_type const &":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLMeasureOutput >::size_type', x: 'BCLMeasureOutput') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLMeasureOutput >::size_type', x: 'BCLMeasureOutput') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLMeasureOutput >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLMeasureOutput >::size_type":

        return _openstudioutilitiesbcl.BCLMeasureOutputVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureOutputVector

    __del__ = lambda self: None

BCLMeasureOutputVector_swigregister = _openstudioutilitiesbcl.BCLMeasureOutputVector_swigregister

BCLMeasureOutputVector_swigregister(BCLMeasureOutputVector)



class OptionalBCLMeasure(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBCLMeasure, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBCLMeasure, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_OptionalBCLMeasure(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiesbcl.OptionalBCLMeasure_reset(self)



    def __ref__(self) -> "openstudio::BCLMeasure":

        return _openstudioutilitiesbcl.OptionalBCLMeasure___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLMeasure_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiesbcl.OptionalBCLMeasure_isNull(self)



    def get(self) -> "openstudio::BCLMeasure":

        return _openstudioutilitiesbcl.OptionalBCLMeasure_get(self)



    def set(self, t: 'BCLMeasure') -> "void":

        return _openstudioutilitiesbcl.OptionalBCLMeasure_set(self, t)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLMeasure

    __del__ = lambda self: None

OptionalBCLMeasure_swigregister = _openstudioutilitiesbcl.OptionalBCLMeasure_swigregister

OptionalBCLMeasure_swigregister(OptionalBCLMeasure)



class BCLMeasureVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLMeasureVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLMeasureVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiesbcl.BCLMeasureVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::BCLMeasure >::size_type":

        return _openstudioutilitiesbcl.BCLMeasureVector___len__(self)



    def pop(self) -> "std::vector< openstudio::BCLMeasure >::value_type":

        return _openstudioutilitiesbcl.BCLMeasureVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::BCLMeasure >::difference_type', j: 'std::vector< openstudio::BCLMeasure >::difference_type') -> "std::vector< openstudio::BCLMeasure,std::allocator< openstudio::BCLMeasure > > *":

        return _openstudioutilitiesbcl.BCLMeasureVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::BCLMeasure >::difference_type', j: 'std::vector< openstudio::BCLMeasure >::difference_type') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::BCLMeasure >::value_type const &":

        return _openstudioutilitiesbcl.BCLMeasureVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector___setitem__(self, *args)



    def append(self, x: 'BCLMeasure') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureVector_empty(self)



    def size(self) -> "std::vector< openstudio::BCLMeasure >::size_type":

        return _openstudioutilitiesbcl.BCLMeasureVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector_clear(self)



    def swap(self, v: 'BCLMeasureVector') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::BCLMeasure >::allocator_type":

        return _openstudioutilitiesbcl.BCLMeasureVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::BCLMeasure >::iterator":

        return _openstudioutilitiesbcl.BCLMeasureVector_begin(self)



    def end(self) -> "std::vector< openstudio::BCLMeasure >::iterator":

        return _openstudioutilitiesbcl.BCLMeasureVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::BCLMeasure >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLMeasureVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::BCLMeasure >::reverse_iterator":

        return _openstudioutilitiesbcl.BCLMeasureVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::BCLMeasure >::iterator":

        return _openstudioutilitiesbcl.BCLMeasureVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLMeasureVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'BCLMeasure') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::BCLMeasure >::value_type const &":

        return _openstudioutilitiesbcl.BCLMeasureVector_front(self)



    def back(self) -> "std::vector< openstudio::BCLMeasure >::value_type const &":

        return _openstudioutilitiesbcl.BCLMeasureVector_back(self)



    def assign(self, n: 'std::vector< openstudio::BCLMeasure >::size_type', x: 'BCLMeasure') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::BCLMeasure >::size_type', x: 'BCLMeasure') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::BCLMeasure >::size_type') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::BCLMeasure >::size_type":

        return _openstudioutilitiesbcl.BCLMeasureVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureVector

    __del__ = lambda self: None

BCLMeasureVector_swigregister = _openstudioutilitiesbcl.BCLMeasureVector_swigregister

BCLMeasureVector_swigregister(BCLMeasureVector)



class BCLFileReference(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLFileReference, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLFileReference, name)

    __repr__ = _swig_repr



    def __init__(self, path: 'path', setMembers: 'bool const'=False):

        this = _openstudioutilitiesbcl.new_BCLFileReference(path, setMembers)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFileReference

    __del__ = lambda self: None



    def path(self) -> "openstudio::path":

        return _openstudioutilitiesbcl.BCLFileReference_path(self)



    def checksum(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFileReference_checksum(self)



    def softwareProgram(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFileReference_softwareProgram(self)



    def softwareProgramVersion(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFileReference_softwareProgramVersion(self)



    def minCompatibleVersion(self) -> "boost::optional< openstudio::VersionString >":

        return _openstudioutilitiesbcl.BCLFileReference_minCompatibleVersion(self)



    def maxCompatibleVersion(self) -> "boost::optional< openstudio::VersionString >":

        return _openstudioutilitiesbcl.BCLFileReference_maxCompatibleVersion(self)



    def fileName(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFileReference_fileName(self)



    def fileType(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFileReference_fileType(self)



    def usageType(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFileReference_usageType(self)



    def setChecksum(self, checksum: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLFileReference_setChecksum(self, checksum)



    def setSoftwareProgram(self, softwareProgram: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLFileReference_setSoftwareProgram(self, softwareProgram)



    def setSoftwareProgramVersion(self, softwareProgramVersion: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLFileReference_setSoftwareProgramVersion(self, softwareProgramVersion)



    def setMinCompatibleVersion(self, minCompatibleVersion: 'VersionString') -> "void":

        return _openstudioutilitiesbcl.BCLFileReference_setMinCompatibleVersion(self, minCompatibleVersion)



    def resetMinCompatibleVersion(self) -> "void":

        return _openstudioutilitiesbcl.BCLFileReference_resetMinCompatibleVersion(self)



    def setMaxCompatibleVersion(self, maxCompatibleVersion: 'VersionString') -> "void":

        return _openstudioutilitiesbcl.BCLFileReference_setMaxCompatibleVersion(self, maxCompatibleVersion)



    def resetMaxCompatibleVersion(self) -> "void":

        return _openstudioutilitiesbcl.BCLFileReference_resetMaxCompatibleVersion(self)



    def setUsageType(self, usageType: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLFileReference_setUsageType(self, usageType)



    def writeValues(self, doc: 'QDomDocument', element: 'QDomElement') -> "void":

        return _openstudioutilitiesbcl.BCLFileReference_writeValues(self, doc, element)



    def checkForUpdate(self) -> "bool":

        return _openstudioutilitiesbcl.BCLFileReference_checkForUpdate(self)

BCLFileReference_swigregister = _openstudioutilitiesbcl.BCLFileReference_swigregister

BCLFileReference_swigregister(BCLFileReference)



class BCLXMLType(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLXMLType, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLXMLType, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLXMLType(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXMLType_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiesbcl.BCLXMLType_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXMLType_valueDescription(self)



    def __eq__(self, other: 'BCLXMLType') -> "bool":

        return _openstudioutilitiesbcl.BCLXMLType___eq__(self, other)



    def __ne__(self, other: 'BCLXMLType') -> "bool":

        return _openstudioutilitiesbcl.BCLXMLType___ne__(self, other)



    def __gt__(self, other: 'BCLXMLType') -> "bool":

        return _openstudioutilitiesbcl.BCLXMLType___gt__(self, other)



    def __ge__(self, other: 'BCLXMLType') -> "bool":

        return _openstudioutilitiesbcl.BCLXMLType___ge__(self, other)



    def __lt__(self, other: 'BCLXMLType') -> "bool":

        return _openstudioutilitiesbcl.BCLXMLType___lt__(self, other)



    def __le__(self, other: 'BCLXMLType') -> "bool":

        return _openstudioutilitiesbcl.BCLXMLType___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesbcl.BCLXMLType_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiesbcl.BCLXMLType_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesbcl.BCLXMLType_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiesbcl.BCLXMLType_getValues)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLXMLType

    __del__ = lambda self: None

BCLXMLType_swigregister = _openstudioutilitiesbcl.BCLXMLType_swigregister

BCLXMLType_swigregister(BCLXMLType)



def BCLXMLType_enumName() -> "std::string":

    return _openstudioutilitiesbcl.BCLXMLType_enumName()

BCLXMLType_enumName = _openstudioutilitiesbcl.BCLXMLType_enumName



def BCLXMLType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiesbcl.BCLXMLType_getValues()

BCLXMLType_getValues = _openstudioutilitiesbcl.BCLXMLType_getValues



class BCLXML(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLXML, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLXML, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLXML(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesbcl.BCLXML_load

    if _newclass:

        load = staticmethod(_openstudioutilitiesbcl.BCLXML_load)

    __swig_getmethods__["escapeString"] = lambda x: _openstudioutilitiesbcl.BCLXML_escapeString

    if _newclass:

        escapeString = staticmethod(_openstudioutilitiesbcl.BCLXML_escapeString)

    __swig_getmethods__["decodeString"] = lambda x: _openstudioutilitiesbcl.BCLXML_decodeString

    if _newclass:

        decodeString = staticmethod(_openstudioutilitiesbcl.BCLXML_decodeString)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLXML

    __del__ = lambda self: None



    def path(self) -> "openstudio::path":

        return _openstudioutilitiesbcl.BCLXML_path(self)



    def directory(self) -> "openstudio::path":

        return _openstudioutilitiesbcl.BCLXML_directory(self)



    def error(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLXML_error(self)



    def uid(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXML_uid(self)



    def versionId(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXML_versionId(self)



    def versionModified(self) -> "boost::optional< openstudio::DateTime >":

        return _openstudioutilitiesbcl.BCLXML_versionModified(self)



    def xmlChecksum(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXML_xmlChecksum(self)



    def name(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXML_name(self)



    def displayName(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXML_displayName(self)



    def className(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXML_className(self)



    def description(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXML_description(self)



    def modelerDescription(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLXML_modelerDescription(self)



    def arguments(self) -> "std::vector< BCLMeasureArgument,std::allocator< openstudio::BCLMeasureArgument > >":

        return _openstudioutilitiesbcl.BCLXML_arguments(self)



    def outputs(self) -> "std::vector< BCLMeasureOutput,std::allocator< openstudio::BCLMeasureOutput > >":

        return _openstudioutilitiesbcl.BCLXML_outputs(self)



    def files(self, *args) -> "std::vector< openstudio::BCLFileReference,std::allocator< openstudio::BCLFileReference > >":

        return _openstudioutilitiesbcl.BCLXML_files(self, *args)



    def attributes(self) -> "std::vector< openstudio::Attribute,std::allocator< openstudio::Attribute > >":

        return _openstudioutilitiesbcl.BCLXML_attributes(self)



    def getAttributes(self, name: 'std::string const &') -> "std::vector< openstudio::Attribute,std::allocator< openstudio::Attribute > >":

        return _openstudioutilitiesbcl.BCLXML_getAttributes(self, name)



    def tags(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.BCLXML_tags(self)



    def resetXMLChecksum(self) -> "void":

        return _openstudioutilitiesbcl.BCLXML_resetXMLChecksum(self)



    def setError(self, error: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLXML_setError(self, error)



    def resetError(self) -> "void":

        return _openstudioutilitiesbcl.BCLXML_resetError(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLXML_setName(self, name)



    def setDisplayName(self, displayName: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLXML_setDisplayName(self, displayName)



    def setClassName(self, className: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLXML_setClassName(self, className)



    def setDescription(self, description: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLXML_setDescription(self, description)



    def setModelerDescription(self, modelerDescription: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLXML_setModelerDescription(self, modelerDescription)



    def setArguments(self, arguments: 'std::vector< BCLMeasureArgument,std::allocator< openstudio::BCLMeasureArgument > > const &') -> "void":

        return _openstudioutilitiesbcl.BCLXML_setArguments(self, arguments)



    def setOutputs(self, outputs: 'std::vector< BCLMeasureOutput,std::allocator< openstudio::BCLMeasureOutput > > const &') -> "void":

        return _openstudioutilitiesbcl.BCLXML_setOutputs(self, outputs)



    def addFile(self, file: 'BCLFileReference') -> "void":

        return _openstudioutilitiesbcl.BCLXML_addFile(self, file)



    def hasFile(self, path: 'path') -> "bool":

        return _openstudioutilitiesbcl.BCLXML_hasFile(self, path)



    def removeFile(self, path: 'path') -> "bool":

        return _openstudioutilitiesbcl.BCLXML_removeFile(self, path)



    def clearFiles(self) -> "void":

        return _openstudioutilitiesbcl.BCLXML_clearFiles(self)



    def addAttribute(self, attribute: 'Attribute') -> "void":

        return _openstudioutilitiesbcl.BCLXML_addAttribute(self, attribute)



    def removeAttributes(self, name: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.BCLXML_removeAttributes(self, name)



    def clearAttributes(self) -> "void":

        return _openstudioutilitiesbcl.BCLXML_clearAttributes(self)



    def addTag(self, tagName: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLXML_addTag(self, tagName)



    def removeTag(self, tagName: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.BCLXML_removeTag(self, tagName)



    def clearTags(self) -> "void":

        return _openstudioutilitiesbcl.BCLXML_clearTags(self)



    def save(self) -> "bool":

        return _openstudioutilitiesbcl.BCLXML_save(self)



    def saveAs(self, xmlPath: 'path') -> "bool":

        return _openstudioutilitiesbcl.BCLXML_saveAs(self, xmlPath)



    def changeUID(self) -> "void":

        return _openstudioutilitiesbcl.BCLXML_changeUID(self)



    def incrementVersionId(self) -> "void":

        return _openstudioutilitiesbcl.BCLXML_incrementVersionId(self)



    def checkForUpdatesXML(self) -> "bool":

        return _openstudioutilitiesbcl.BCLXML_checkForUpdatesXML(self)

BCLXML_swigregister = _openstudioutilitiesbcl.BCLXML_swigregister

BCLXML_swigregister(BCLXML)



def BCLXML_load(xmlPath: 'path') -> "boost::optional< openstudio::BCLXML >":

    return _openstudioutilitiesbcl.BCLXML_load(xmlPath)

BCLXML_load = _openstudioutilitiesbcl.BCLXML_load



def BCLXML_escapeString(txt: 'std::string const &') -> "std::string":

    return _openstudioutilitiesbcl.BCLXML_escapeString(txt)

BCLXML_escapeString = _openstudioutilitiesbcl.BCLXML_escapeString



def BCLXML_decodeString(txt: 'std::string const &') -> "std::string":

    return _openstudioutilitiesbcl.BCLXML_decodeString(txt)

BCLXML_decodeString = _openstudioutilitiesbcl.BCLXML_decodeString



class BCLComponent(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLComponent, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLComponent, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLComponent(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLComponent

    __del__ = lambda self: None



    def directory(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLComponent_directory(self)



    def uid(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLComponent_uid(self)



    def versionId(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLComponent_versionId(self)



    def name(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLComponent_name(self)



    def description(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLComponent_description(self)



    def files(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.BCLComponent_files(self, *args)



    def filetypes(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.BCLComponent_filetypes(self)



    def attributes(self) -> "std::vector< openstudio::Attribute,std::allocator< openstudio::Attribute > >":

        return _openstudioutilitiesbcl.BCLComponent_attributes(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLComponent_setName(self, name)



    def __eq__(self, other: 'BCLComponent') -> "bool":

        return _openstudioutilitiesbcl.BCLComponent___eq__(self, other)



    def __ne__(self, other: 'BCLComponent') -> "bool":

        return _openstudioutilitiesbcl.BCLComponent___ne__(self, other)

BCLComponent_swigregister = _openstudioutilitiesbcl.BCLComponent_swigregister

BCLComponent_swigregister(BCLComponent)



class BCLMeasureArgument(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLMeasureArgument, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLMeasureArgument, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLMeasureArgument(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def name(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasureArgument_name(self)



    def displayName(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasureArgument_displayName(self)



    def description(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLMeasureArgument_description(self)



    def type(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasureArgument_type(self)



    def units(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLMeasureArgument_units(self)



    def required(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureArgument_required(self)



    def modelDependent(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureArgument_modelDependent(self)



    def defaultValue(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLMeasureArgument_defaultValue(self)



    def choiceValues(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.BCLMeasureArgument_choiceValues(self)



    def choiceDisplayNames(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.BCLMeasureArgument_choiceDisplayNames(self)



    def minValue(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLMeasureArgument_minValue(self)



    def maxValue(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLMeasureArgument_maxValue(self)



    def writeValues(self, doc: 'QDomDocument', element: 'QDomElement') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureArgument_writeValues(self, doc, element)



    def __eq__(self, other: 'BCLMeasureArgument') -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureArgument___eq__(self, other)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureArgument

    __del__ = lambda self: None

BCLMeasureArgument_swigregister = _openstudioutilitiesbcl.BCLMeasureArgument_swigregister

BCLMeasureArgument_swigregister(BCLMeasureArgument)



class BCLMeasureOutput(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLMeasureOutput, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLMeasureOutput, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLMeasureOutput(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def name(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasureOutput_name(self)



    def displayName(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasureOutput_displayName(self)



    def shortName(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLMeasureOutput_shortName(self)



    def description(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLMeasureOutput_description(self)



    def type(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasureOutput_type(self)



    def units(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLMeasureOutput_units(self)



    def modelDependent(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureOutput_modelDependent(self)



    def writeValues(self, doc: 'QDomDocument', element: 'QDomElement') -> "void":

        return _openstudioutilitiesbcl.BCLMeasureOutput_writeValues(self, doc, element)



    def __eq__(self, other: 'BCLMeasureOutput') -> "bool":

        return _openstudioutilitiesbcl.BCLMeasureOutput___eq__(self, other)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureOutput

    __del__ = lambda self: None

BCLMeasureOutput_swigregister = _openstudioutilitiesbcl.BCLMeasureOutput_swigregister

BCLMeasureOutput_swigregister(BCLMeasureOutput)



class MeasureType(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasureType, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, MeasureType, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_MeasureType(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiesbcl.MeasureType_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiesbcl.MeasureType_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiesbcl.MeasureType_valueDescription(self)



    def __eq__(self, other: 'MeasureType') -> "bool":

        return _openstudioutilitiesbcl.MeasureType___eq__(self, other)



    def __ne__(self, other: 'MeasureType') -> "bool":

        return _openstudioutilitiesbcl.MeasureType___ne__(self, other)



    def __gt__(self, other: 'MeasureType') -> "bool":

        return _openstudioutilitiesbcl.MeasureType___gt__(self, other)



    def __ge__(self, other: 'MeasureType') -> "bool":

        return _openstudioutilitiesbcl.MeasureType___ge__(self, other)



    def __lt__(self, other: 'MeasureType') -> "bool":

        return _openstudioutilitiesbcl.MeasureType___lt__(self, other)



    def __le__(self, other: 'MeasureType') -> "bool":

        return _openstudioutilitiesbcl.MeasureType___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesbcl.MeasureType_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiesbcl.MeasureType_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesbcl.MeasureType_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiesbcl.MeasureType_getValues)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_MeasureType

    __del__ = lambda self: None

MeasureType_swigregister = _openstudioutilitiesbcl.MeasureType_swigregister

MeasureType_swigregister(MeasureType)



def MeasureType_enumName() -> "std::string":

    return _openstudioutilitiesbcl.MeasureType_enumName()

MeasureType_enumName = _openstudioutilitiesbcl.MeasureType_enumName



def MeasureType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiesbcl.MeasureType_getValues()

MeasureType_getValues = _openstudioutilitiesbcl.MeasureType_getValues



class MeasureBadgeType(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasureBadgeType, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, MeasureBadgeType, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_MeasureBadgeType(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiesbcl.MeasureBadgeType_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiesbcl.MeasureBadgeType_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiesbcl.MeasureBadgeType_valueDescription(self)



    def __eq__(self, other: 'MeasureBadgeType') -> "bool":

        return _openstudioutilitiesbcl.MeasureBadgeType___eq__(self, other)



    def __ne__(self, other: 'MeasureBadgeType') -> "bool":

        return _openstudioutilitiesbcl.MeasureBadgeType___ne__(self, other)



    def __gt__(self, other: 'MeasureBadgeType') -> "bool":

        return _openstudioutilitiesbcl.MeasureBadgeType___gt__(self, other)



    def __ge__(self, other: 'MeasureBadgeType') -> "bool":

        return _openstudioutilitiesbcl.MeasureBadgeType___ge__(self, other)



    def __lt__(self, other: 'MeasureBadgeType') -> "bool":

        return _openstudioutilitiesbcl.MeasureBadgeType___lt__(self, other)



    def __le__(self, other: 'MeasureBadgeType') -> "bool":

        return _openstudioutilitiesbcl.MeasureBadgeType___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesbcl.MeasureBadgeType_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiesbcl.MeasureBadgeType_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesbcl.MeasureBadgeType_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiesbcl.MeasureBadgeType_getValues)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_MeasureBadgeType

    __del__ = lambda self: None

MeasureBadgeType_swigregister = _openstudioutilitiesbcl.MeasureBadgeType_swigregister

MeasureBadgeType_swigregister(MeasureBadgeType)



def MeasureBadgeType_enumName() -> "std::string":

    return _openstudioutilitiesbcl.MeasureBadgeType_enumName()

MeasureBadgeType_enumName = _openstudioutilitiesbcl.MeasureBadgeType_enumName



def MeasureBadgeType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiesbcl.MeasureBadgeType_getValues()

MeasureBadgeType_getValues = _openstudioutilitiesbcl.MeasureBadgeType_getValues



class BCLMeasure(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLMeasure, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLMeasure, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiesbcl.new_BCLMeasure(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_getmethods__["makeClassName"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_makeClassName

    if _newclass:

        makeClassName = staticmethod(_openstudioutilitiesbcl.BCLMeasure_makeClassName)

    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_load

    if _newclass:

        load = staticmethod(_openstudioutilitiesbcl.BCLMeasure_load)

    __swig_getmethods__["localBCLMeasures"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_localBCLMeasures

    if _newclass:

        localBCLMeasures = staticmethod(_openstudioutilitiesbcl.BCLMeasure_localBCLMeasures)

    __swig_getmethods__["userMeasures"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_userMeasures

    if _newclass:

        userMeasures = staticmethod(_openstudioutilitiesbcl.BCLMeasure_userMeasures)

    __swig_getmethods__["userMeasuresDir"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_userMeasuresDir

    if _newclass:

        userMeasuresDir = staticmethod(_openstudioutilitiesbcl.BCLMeasure_userMeasuresDir)

    __swig_getmethods__["setUserMeasuresDir"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_setUserMeasuresDir

    if _newclass:

        setUserMeasuresDir = staticmethod(_openstudioutilitiesbcl.BCLMeasure_setUserMeasuresDir)

    __swig_getmethods__["clearUserMeasuresDir"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_clearUserMeasuresDir

    if _newclass:

        clearUserMeasuresDir = staticmethod(_openstudioutilitiesbcl.BCLMeasure_clearUserMeasuresDir)

    __swig_getmethods__["suggestedIntendedSoftwareTools"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_suggestedIntendedSoftwareTools

    if _newclass:

        suggestedIntendedSoftwareTools = staticmethod(_openstudioutilitiesbcl.BCLMeasure_suggestedIntendedSoftwareTools)

    __swig_getmethods__["suggestedIntendedUseCases"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_suggestedIntendedUseCases

    if _newclass:

        suggestedIntendedUseCases = staticmethod(_openstudioutilitiesbcl.BCLMeasure_suggestedIntendedUseCases)

    __swig_getmethods__["suggestedFirstLevelTaxonomyTerms"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_suggestedFirstLevelTaxonomyTerms

    if _newclass:

        suggestedFirstLevelTaxonomyTerms = staticmethod(_openstudioutilitiesbcl.BCLMeasure_suggestedFirstLevelTaxonomyTerms)

    __swig_getmethods__["suggestedSecondLevelTaxonomyTerms"] = lambda x: _openstudioutilitiesbcl.BCLMeasure_suggestedSecondLevelTaxonomyTerms

    if _newclass:

        suggestedSecondLevelTaxonomyTerms = staticmethod(_openstudioutilitiesbcl.BCLMeasure_suggestedSecondLevelTaxonomyTerms)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasure

    __del__ = lambda self: None



    def directory(self) -> "openstudio::path":

        return _openstudioutilitiesbcl.BCLMeasure_directory(self)



    def error(self) -> "boost::optional< std::string >":

        return _openstudioutilitiesbcl.BCLMeasure_error(self)



    def uid(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasure_uid(self)



    def uuid(self) -> "openstudio::UUID":

        return _openstudioutilitiesbcl.BCLMeasure_uuid(self)



    def versionId(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasure_versionId(self)



    def versionUUID(self) -> "openstudio::UUID":

        return _openstudioutilitiesbcl.BCLMeasure_versionUUID(self)



    def versionModified(self) -> "boost::optional< openstudio::DateTime >":

        return _openstudioutilitiesbcl.BCLMeasure_versionModified(self)



    def xmlChecksum(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasure_xmlChecksum(self)



    def name(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasure_name(self)



    def displayName(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasure_displayName(self)



    def className(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasure_className(self)



    def description(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasure_description(self)



    def modelerDescription(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasure_modelerDescription(self)



    def arguments(self) -> "std::vector< openstudio::BCLMeasureArgument,std::allocator< openstudio::BCLMeasureArgument > >":

        return _openstudioutilitiesbcl.BCLMeasure_arguments(self)



    def outputs(self) -> "std::vector< openstudio::BCLMeasureOutput,std::allocator< openstudio::BCLMeasureOutput > >":

        return _openstudioutilitiesbcl.BCLMeasure_outputs(self)



    def tags(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.BCLMeasure_tags(self)



    def attributes(self) -> "std::vector< openstudio::Attribute,std::allocator< openstudio::Attribute > >":

        return _openstudioutilitiesbcl.BCLMeasure_attributes(self)



    def files(self) -> "std::vector< openstudio::BCLFileReference,std::allocator< openstudio::BCLFileReference > >":

        return _openstudioutilitiesbcl.BCLMeasure_files(self)



    def setError(self, error: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setError(self, error)



    def resetError(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_resetError(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setName(self, name)



    def setDisplayName(self, displayName: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setDisplayName(self, displayName)



    def setClassName(self, className: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setClassName(self, className)



    def setDescription(self, description: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setDescription(self, description)



    def setModelerDescription(self, modelerDescription: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setModelerDescription(self, modelerDescription)



    def setArguments(self, arguments: 'BCLMeasureArgumentVector') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setArguments(self, arguments)



    def setOutputs(self, outputs: 'BCLMeasureOutputVector') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setOutputs(self, outputs)



    def taxonomyTag(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLMeasure_taxonomyTag(self)



    def setTaxonomyTag(self, taxonomyTag: 'std::string const &') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setTaxonomyTag(self, taxonomyTag)



    def measureType(self) -> "openstudio::MeasureType":

        return _openstudioutilitiesbcl.BCLMeasure_measureType(self)



    def setMeasureType(self, measureType: 'MeasureType') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_setMeasureType(self, measureType)



    def intendedSoftwareTools(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.BCLMeasure_intendedSoftwareTools(self)



    def intendedUseCases(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.BCLMeasure_intendedUseCases(self)



    def primaryRubyScriptPath(self) -> "boost::optional< openstudio::path >":

        return _openstudioutilitiesbcl.BCLMeasure_primaryRubyScriptPath(self)



    def inputFileType(self) -> "openstudio::FileReferenceType":

        return _openstudioutilitiesbcl.BCLMeasure_inputFileType(self)



    def outputFileType(self) -> "openstudio::FileReferenceType":

        return _openstudioutilitiesbcl.BCLMeasure_outputFileType(self)



    def clearFiles(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_clearFiles(self)



    def addAttribute(self, attribute: 'Attribute') -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_addAttribute(self, attribute)



    def getAttributes(self, name: 'std::string const &') -> "std::vector< openstudio::Attribute,std::allocator< openstudio::Attribute > >":

        return _openstudioutilitiesbcl.BCLMeasure_getAttributes(self, name)



    def removeAttributes(self, name: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.BCLMeasure_removeAttributes(self, name)



    def clearAttributes(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_clearAttributes(self)



    def missingRequiredFields(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasure_missingRequiredFields(self)



    def checkForUpdatesFiles(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasure_checkForUpdatesFiles(self)



    def checkForUpdatesXML(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasure_checkForUpdatesXML(self)



    def __eq__(self, other: 'BCLMeasure') -> "bool":

        return _openstudioutilitiesbcl.BCLMeasure___eq__(self, other)



    def __ne__(self, other: 'BCLMeasure') -> "bool":

        return _openstudioutilitiesbcl.BCLMeasure___ne__(self, other)



    def save(self) -> "bool":

        return _openstudioutilitiesbcl.BCLMeasure_save(self)



    def clone(self, newDir: 'path') -> "boost::optional< openstudio::BCLMeasure >":

        return _openstudioutilitiesbcl.BCLMeasure_clone(self, newDir)



    def changeUID(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_changeUID(self)



    def incrementVersionId(self) -> "void":

        return _openstudioutilitiesbcl.BCLMeasure_incrementVersionId(self)



    def updateMeasureScript(self, oldMeasureType: 'MeasureType', newMeasureType: 'MeasureType', oldClassName: 'std::string const &', newClassName: 'std::string const &', name: 'std::string const &', description: 'std::string const &', modelerDescription: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.BCLMeasure_updateMeasureScript(self, oldMeasureType, newMeasureType, oldClassName, newClassName, name, description, modelerDescription)



    def updateMeasureTests(self, oldClassName: 'std::string const &', newClassName: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.BCLMeasure_updateMeasureTests(self, oldClassName, newClassName)

BCLMeasure_swigregister = _openstudioutilitiesbcl.BCLMeasure_swigregister

BCLMeasure_swigregister(BCLMeasure)



def BCLMeasure_makeClassName(name: 'std::string const &') -> "std::string":

    return _openstudioutilitiesbcl.BCLMeasure_makeClassName(name)

BCLMeasure_makeClassName = _openstudioutilitiesbcl.BCLMeasure_makeClassName



def BCLMeasure_load(dir: 'path') -> "boost::optional< openstudio::BCLMeasure >":

    return _openstudioutilitiesbcl.BCLMeasure_load(dir)

BCLMeasure_load = _openstudioutilitiesbcl.BCLMeasure_load



def BCLMeasure_localBCLMeasures() -> "std::vector< openstudio::BCLMeasure,std::allocator< openstudio::BCLMeasure > >":

    return _openstudioutilitiesbcl.BCLMeasure_localBCLMeasures()

BCLMeasure_localBCLMeasures = _openstudioutilitiesbcl.BCLMeasure_localBCLMeasures



def BCLMeasure_userMeasures() -> "std::vector< openstudio::BCLMeasure,std::allocator< openstudio::BCLMeasure > >":

    return _openstudioutilitiesbcl.BCLMeasure_userMeasures()

BCLMeasure_userMeasures = _openstudioutilitiesbcl.BCLMeasure_userMeasures



def BCLMeasure_userMeasuresDir() -> "openstudio::path":

    return _openstudioutilitiesbcl.BCLMeasure_userMeasuresDir()

BCLMeasure_userMeasuresDir = _openstudioutilitiesbcl.BCLMeasure_userMeasuresDir



def BCLMeasure_setUserMeasuresDir(userMeasuresDir: 'path') -> "bool":

    return _openstudioutilitiesbcl.BCLMeasure_setUserMeasuresDir(userMeasuresDir)

BCLMeasure_setUserMeasuresDir = _openstudioutilitiesbcl.BCLMeasure_setUserMeasuresDir



def BCLMeasure_clearUserMeasuresDir() -> "void":

    return _openstudioutilitiesbcl.BCLMeasure_clearUserMeasuresDir()

BCLMeasure_clearUserMeasuresDir = _openstudioutilitiesbcl.BCLMeasure_clearUserMeasuresDir



def BCLMeasure_suggestedIntendedSoftwareTools() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudioutilitiesbcl.BCLMeasure_suggestedIntendedSoftwareTools()

BCLMeasure_suggestedIntendedSoftwareTools = _openstudioutilitiesbcl.BCLMeasure_suggestedIntendedSoftwareTools



def BCLMeasure_suggestedIntendedUseCases() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudioutilitiesbcl.BCLMeasure_suggestedIntendedUseCases()

BCLMeasure_suggestedIntendedUseCases = _openstudioutilitiesbcl.BCLMeasure_suggestedIntendedUseCases



def BCLMeasure_suggestedFirstLevelTaxonomyTerms() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudioutilitiesbcl.BCLMeasure_suggestedFirstLevelTaxonomyTerms()

BCLMeasure_suggestedFirstLevelTaxonomyTerms = _openstudioutilitiesbcl.BCLMeasure_suggestedFirstLevelTaxonomyTerms



def BCLMeasure_suggestedSecondLevelTaxonomyTerms(firstLevelTaxonomyTerm: 'std::string const &') -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudioutilitiesbcl.BCLMeasure_suggestedSecondLevelTaxonomyTerms(firstLevelTaxonomyTerm)

BCLMeasure_suggestedSecondLevelTaxonomyTerms = _openstudioutilitiesbcl.BCLMeasure_suggestedSecondLevelTaxonomyTerms



class BCLFacet(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLFacet, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLFacet, name)

    __repr__ = _swig_repr



    def __init__(self, facetElement: 'QDomElement'):

        this = _openstudioutilitiesbcl.new_BCLFacet(facetElement)

        try:

            self.this.append(this)

        except:

            self.this = this



    def field(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFacet_field(self)



    def label(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFacet_label(self)



    def items(self) -> "std::vector< std::pair< std::string,uint >,std::allocator< std::pair< std::string,uint > > >":

        return _openstudioutilitiesbcl.BCLFacet_items(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFacet

    __del__ = lambda self: None

BCLFacet_swigregister = _openstudioutilitiesbcl.BCLFacet_swigregister

BCLFacet_swigregister(BCLFacet)



class BCLTaxonomyTerm(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLTaxonomyTerm, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLTaxonomyTerm, name)

    __repr__ = _swig_repr



    def __init__(self, taxonomyElement: 'QDomElement'):

        this = _openstudioutilitiesbcl.new_BCLTaxonomyTerm(taxonomyElement)

        try:

            self.this.append(this)

        except:

            self.this = this



    def name(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLTaxonomyTerm_name(self)



    def tid(self) -> "unsigned int":

        return _openstudioutilitiesbcl.BCLTaxonomyTerm_tid(self)



    def numResults(self) -> "unsigned int":

        return _openstudioutilitiesbcl.BCLTaxonomyTerm_numResults(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLTaxonomyTerm

    __del__ = lambda self: None

BCLTaxonomyTerm_swigregister = _openstudioutilitiesbcl.BCLTaxonomyTerm_swigregister

BCLTaxonomyTerm_swigregister(BCLTaxonomyTerm)



class BCLFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLFile, name)

    __repr__ = _swig_repr



    def __init__(self, fileElement: 'QDomElement'):

        this = _openstudioutilitiesbcl.new_BCLFile(fileElement)

        try:

            self.this.append(this)

        except:

            self.this = this



    def softwareProgram(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFile_softwareProgram(self)



    def identifier(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFile_identifier(self)



    def minCompatibleVersion(self) -> "boost::optional< openstudio::VersionString >":

        return _openstudioutilitiesbcl.BCLFile_minCompatibleVersion(self)



    def maxCompatibleVersion(self) -> "boost::optional< openstudio::VersionString >":

        return _openstudioutilitiesbcl.BCLFile_maxCompatibleVersion(self)



    def filename(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFile_filename(self)



    def url(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFile_url(self)



    def filetype(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFile_filetype(self)



    def usageType(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFile_usageType(self)



    def checksum(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLFile_checksum(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFile

    __del__ = lambda self: None

BCLFile_swigregister = _openstudioutilitiesbcl.BCLFile_swigregister

BCLFile_swigregister(BCLFile)



class BCLProvenance(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLProvenance, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLProvenance, name)

    __repr__ = _swig_repr



    def __init__(self, provenanceElement: 'QDomElement'):

        this = _openstudioutilitiesbcl.new_BCLProvenance(provenanceElement)

        try:

            self.this.append(this)

        except:

            self.this = this



    def author(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLProvenance_author(self)



    def datetime(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLProvenance_datetime(self)



    def comment(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLProvenance_comment(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLProvenance

    __del__ = lambda self: None

BCLProvenance_swigregister = _openstudioutilitiesbcl.BCLProvenance_swigregister

BCLProvenance_swigregister(BCLProvenance)



class BCLCost(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLCost, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLCost, name)

    __repr__ = _swig_repr



    def __init__(self, costElement: 'QDomElement'):

        this = _openstudioutilitiesbcl.new_BCLCost(costElement)

        try:

            self.this.append(this)

        except:

            self.this = this



    def instanceName(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_instanceName(self)



    def costType(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_costType(self)



    def category(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_category(self)



    def value(self) -> "double":

        return _openstudioutilitiesbcl.BCLCost_value(self)



    def units(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_units(self)



    def interval(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_interval(self)



    def intervalUnits(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_intervalUnits(self)



    def year(self) -> "unsigned int":

        return _openstudioutilitiesbcl.BCLCost_year(self)



    def location(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_location(self)



    def currency(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_currency(self)



    def source(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_source(self)



    def referenceComponentName(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_referenceComponentName(self)



    def referenceComponentId(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLCost_referenceComponentId(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLCost

    __del__ = lambda self: None

BCLCost_swigregister = _openstudioutilitiesbcl.BCLCost_swigregister

BCLCost_swigregister(BCLCost)



class BCLMetaSearchResult(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLMetaSearchResult, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLMetaSearchResult, name)

    __repr__ = _swig_repr



    def __init__(self, resultElement: 'QDomElement'):

        this = _openstudioutilitiesbcl.new_BCLMetaSearchResult(resultElement)

        try:

            self.this.append(this)

        except:

            self.this = this



    def numResults(self) -> "unsigned int":

        return _openstudioutilitiesbcl.BCLMetaSearchResult_numResults(self)



    def facets(self) -> "std::vector< openstudio::BCLFacet,std::allocator< openstudio::BCLFacet > >":

        return _openstudioutilitiesbcl.BCLMetaSearchResult_facets(self)



    def taxonomyTerms(self) -> "std::vector< openstudio::BCLTaxonomyTerm,std::allocator< openstudio::BCLTaxonomyTerm > >":

        return _openstudioutilitiesbcl.BCLMetaSearchResult_taxonomyTerms(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMetaSearchResult

    __del__ = lambda self: None

BCLMetaSearchResult_swigregister = _openstudioutilitiesbcl.BCLMetaSearchResult_swigregister

BCLMetaSearchResult_swigregister(BCLMetaSearchResult)



class BCLSearchResult(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLSearchResult, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLSearchResult, name)

    __repr__ = _swig_repr



    def __init__(self, componentElement: 'QDomElement'):

        this = _openstudioutilitiesbcl.new_BCLSearchResult(componentElement)

        try:

            self.this.append(this)

        except:

            self.this = this



    def name(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLSearchResult_name(self)



    def uid(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLSearchResult_uid(self)



    def versionId(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLSearchResult_versionId(self)



    def description(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLSearchResult_description(self)



    def modelerDescription(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLSearchResult_modelerDescription(self)



    def fidelityLevel(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLSearchResult_fidelityLevel(self)



    def componentType(self) -> "std::string":

        return _openstudioutilitiesbcl.BCLSearchResult_componentType(self)



    def provenanceRequired(self) -> "bool":

        return _openstudioutilitiesbcl.BCLSearchResult_provenanceRequired(self)



    def provenances(self) -> "std::vector< openstudio::BCLProvenance,std::allocator< openstudio::BCLProvenance > >":

        return _openstudioutilitiesbcl.BCLSearchResult_provenances(self)



    def tags(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.BCLSearchResult_tags(self)



    def attributes(self) -> "std::vector< openstudio::Attribute,std::allocator< openstudio::Attribute > >":

        return _openstudioutilitiesbcl.BCLSearchResult_attributes(self)



    def files(self) -> "std::vector< openstudio::BCLFile,std::allocator< openstudio::BCLFile > >":

        return _openstudioutilitiesbcl.BCLSearchResult_files(self)



    def costs(self) -> "std::vector< openstudio::BCLCost,std::allocator< openstudio::BCLCost > >":

        return _openstudioutilitiesbcl.BCLSearchResult_costs(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLSearchResult

    __del__ = lambda self: None

BCLSearchResult_swigregister = _openstudioutilitiesbcl.BCLSearchResult_swigregister

BCLSearchResult_swigregister(BCLSearchResult)



class BCL(openstudioutilitiescore.QObject):

    __swig_setmethods__ = {}

    for _s in [openstudioutilitiescore.QObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCL, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudioutilitiescore.QObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, BCL, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCL

    __del__ = lambda self: None



    def getComponent(self, *args) -> "boost::optional< openstudio::BCLComponent >":

        return _openstudioutilitiesbcl.BCL_getComponent(self, *args)



    def getMeasure(self, *args) -> "boost::optional< openstudio::BCLMeasure >":

        return _openstudioutilitiesbcl.BCL_getMeasure(self, *args)

BCL_swigregister = _openstudioutilitiesbcl.BCL_swigregister

BCL_swigregister(BCL)





def getComponent(*args) -> "boost::optional< openstudio::BCLComponent >":

    return _openstudioutilitiesbcl.getComponent(*args)

getComponent = _openstudioutilitiesbcl.getComponent



def getMeasure(*args) -> "boost::optional< openstudio::BCLMeasure >":

    return _openstudioutilitiesbcl.getMeasure(*args)

getMeasure = _openstudioutilitiesbcl.getMeasure

class RemoteQueryResponse(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoteQueryResponse, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, RemoteQueryResponse, name)

    __repr__ = _swig_repr



    def __init__(self, domDocument: 'QDomDocument'):

        this = _openstudioutilitiesbcl.new_RemoteQueryResponse(domDocument)

        try:

            self.this.append(this)

        except:

            self.this = this



    def domDocument(self) -> "QDomDocument":

        return _openstudioutilitiesbcl.RemoteQueryResponse_domDocument(self)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_RemoteQueryResponse

    __del__ = lambda self: None

RemoteQueryResponse_swigregister = _openstudioutilitiesbcl.RemoteQueryResponse_swigregister

RemoteQueryResponse_swigregister(RemoteQueryResponse)



class RemoteBCL(BCL):

    __swig_setmethods__ = {}

    for _s in [BCL]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoteBCL, name, value)

    __swig_getmethods__ = {}

    for _s in [BCL]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, RemoteBCL, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiesbcl.new_RemoteBCL()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiesbcl.delete_RemoteBCL

    __del__ = lambda self: None



    def getComponent(self, *args) -> "boost::optional< openstudio::BCLComponent >":

        return _openstudioutilitiesbcl.RemoteBCL_getComponent(self, *args)



    def getMeasure(self, *args) -> "boost::optional< openstudio::BCLMeasure >":

        return _openstudioutilitiesbcl.RemoteBCL_getMeasure(self, *args)



    def metaSearchComponentLibrary(self, *args) -> "boost::optional< openstudio::BCLMetaSearchResult >":

        return _openstudioutilitiesbcl.RemoteBCL_metaSearchComponentLibrary(self, *args)



    def searchComponentLibrary(self, *args) -> "std::vector< openstudio::BCLSearchResult,std::allocator< openstudio::BCLSearchResult > >":

        return _openstudioutilitiesbcl.RemoteBCL_searchComponentLibrary(self, *args)



    def searchMeasureLibrary(self, *args) -> "std::vector< openstudio::BCLSearchResult,std::allocator< openstudio::BCLSearchResult > >":

        return _openstudioutilitiesbcl.RemoteBCL_searchMeasureLibrary(self, *args)



    def checkForComponentUpdates(self) -> "int":

        return _openstudioutilitiesbcl.RemoteBCL_checkForComponentUpdates(self)



    def checkForMeasureUpdates(self) -> "int":

        return _openstudioutilitiesbcl.RemoteBCL_checkForMeasureUpdates(self)



    def componentsWithUpdates(self) -> "std::vector< openstudio::BCLSearchResult,std::allocator< openstudio::BCLSearchResult > >":

        return _openstudioutilitiesbcl.RemoteBCL_componentsWithUpdates(self)



    def measuresWithUpdates(self) -> "std::vector< openstudio::BCLSearchResult,std::allocator< openstudio::BCLSearchResult > >":

        return _openstudioutilitiesbcl.RemoteBCL_measuresWithUpdates(self)



    def updateComponents(self) -> "void":

        return _openstudioutilitiesbcl.RemoteBCL_updateComponents(self)



    def updateMeasures(self) -> "void":

        return _openstudioutilitiesbcl.RemoteBCL_updateMeasures(self)



    def isOnline(self) -> "bool":

        return _openstudioutilitiesbcl.RemoteBCL_isOnline(self)



    def lastComponentDownload(self) -> "boost::optional< openstudio::BCLComponent >":

        return _openstudioutilitiesbcl.RemoteBCL_lastComponentDownload(self)



    def lastMeasureDownload(self) -> "boost::optional< openstudio::BCLMeasure >":

        return _openstudioutilitiesbcl.RemoteBCL_lastMeasureDownload(self)



    def lastMetaSearch(self) -> "boost::optional< openstudio::BCLMetaSearchResult >":

        return _openstudioutilitiesbcl.RemoteBCL_lastMetaSearch(self)



    def lastSearch(self) -> "std::vector< openstudio::BCLSearchResult,std::allocator< openstudio::BCLSearchResult > >":

        return _openstudioutilitiesbcl.RemoteBCL_lastSearch(self)



    def remoteUrl(self) -> "std::string":

        return _openstudioutilitiesbcl.RemoteBCL_remoteUrl(self)



    def remoteProductionUrl(self) -> "std::string":

        return _openstudioutilitiesbcl.RemoteBCL_remoteProductionUrl(self)



    def remoteDevelopmentUrl(self) -> "std::string":

        return _openstudioutilitiesbcl.RemoteBCL_remoteDevelopmentUrl(self)



    def useRemoteDevelopmentUrl(self) -> "void":

        return _openstudioutilitiesbcl.RemoteBCL_useRemoteDevelopmentUrl(self)



    def useRemoteProductionUrl(self) -> "void":

        return _openstudioutilitiesbcl.RemoteBCL_useRemoteProductionUrl(self)



    def authKey(self) -> "std::string":

        return _openstudioutilitiesbcl.RemoteBCL_authKey(self)



    def prodAuthKey(self) -> "std::string":

        return _openstudioutilitiesbcl.RemoteBCL_prodAuthKey(self)



    def setProdAuthKey(self, prodAuthKey: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.RemoteBCL_setProdAuthKey(self, prodAuthKey)



    def devAuthKey(self) -> "std::string":

        return _openstudioutilitiesbcl.RemoteBCL_devAuthKey(self)



    def setDevAuthKey(self, devAuthKey: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.RemoteBCL_setDevAuthKey(self, devAuthKey)



    def resultsPerQuery(self) -> "int":

        return _openstudioutilitiesbcl.RemoteBCL_resultsPerQuery(self)



    def lastTotalResults(self) -> "int":

        return _openstudioutilitiesbcl.RemoteBCL_lastTotalResults(self)



    def numResultPages(self) -> "int":

        return _openstudioutilitiesbcl.RemoteBCL_numResultPages(self)



    def waitForComponentDownload(self, msec: 'int'=50000) -> "boost::optional< openstudio::BCLComponent >":

        return _openstudioutilitiesbcl.RemoteBCL_waitForComponentDownload(self, msec)



    def waitForMeasureDownload(self, msec: 'int'=50000) -> "boost::optional< openstudio::BCLMeasure >":

        return _openstudioutilitiesbcl.RemoteBCL_waitForMeasureDownload(self, msec)



    def waitForMetaSearch(self, msec: 'int'=50000) -> "boost::optional< openstudio::BCLMetaSearchResult >":

        return _openstudioutilitiesbcl.RemoteBCL_waitForMetaSearch(self, msec)



    def waitForSearch(self, msec: 'int'=50000) -> "std::vector< openstudio::BCLSearchResult,std::allocator< openstudio::BCLSearchResult > >":

        return _openstudioutilitiesbcl.RemoteBCL_waitForSearch(self, msec)

    __swig_getmethods__["initializeSSL"] = lambda x: _openstudioutilitiesbcl.RemoteBCL_initializeSSL

    if _newclass:

        initializeSSL = staticmethod(_openstudioutilitiesbcl.RemoteBCL_initializeSSL)



    def downloadComponent(self, uid: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.RemoteBCL_downloadComponent(self, uid)



    def downloadMeasure(self, uid: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.RemoteBCL_downloadMeasure(self, uid)



    def startComponentLibraryMetaSearch(self, *args) -> "bool":

        return _openstudioutilitiesbcl.RemoteBCL_startComponentLibraryMetaSearch(self, *args)



    def startComponentLibrarySearch(self, *args) -> "bool":

        return _openstudioutilitiesbcl.RemoteBCL_startComponentLibrarySearch(self, *args)

RemoteBCL_swigregister = _openstudioutilitiesbcl.RemoteBCL_swigregister

RemoteBCL_swigregister(RemoteBCL)



def RemoteBCL_initializeSSL(*args) -> "bool":

    return _openstudioutilitiesbcl.RemoteBCL_initializeSSL(*args)

RemoteBCL_initializeSSL = _openstudioutilitiesbcl.RemoteBCL_initializeSSL



class LocalBCL(BCL):

    __swig_setmethods__ = {}

    for _s in [BCL]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalBCL, name, value)

    __swig_getmethods__ = {}

    for _s in [BCL]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, LocalBCL, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_getmethods__["instance"] = lambda x: _openstudioutilitiesbcl.LocalBCL_instance

    if _newclass:

        instance = staticmethod(_openstudioutilitiesbcl.LocalBCL_instance)

    __swig_getmethods__["close"] = lambda x: _openstudioutilitiesbcl.LocalBCL_close

    if _newclass:

        close = staticmethod(_openstudioutilitiesbcl.LocalBCL_close)

    __swig_destroy__ = _openstudioutilitiesbcl.delete_LocalBCL

    __del__ = lambda self: None



    def getComponent(self, *args) -> "boost::optional< openstudio::BCLComponent >":

        return _openstudioutilitiesbcl.LocalBCL_getComponent(self, *args)



    def getMeasure(self, *args) -> "boost::optional< openstudio::BCLMeasure >":

        return _openstudioutilitiesbcl.LocalBCL_getMeasure(self, *args)



    def components(self) -> "std::vector< openstudio::BCLComponent,std::allocator< openstudio::BCLComponent > >":

        return _openstudioutilitiesbcl.LocalBCL_components(self)



    def measures(self) -> "std::vector< openstudio::BCLMeasure,std::allocator< openstudio::BCLMeasure > >":

        return _openstudioutilitiesbcl.LocalBCL_measures(self)



    def measureUids(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiesbcl.LocalBCL_measureUids(self)



    def searchComponents(self, *args) -> "std::vector< openstudio::BCLComponent,std::allocator< openstudio::BCLComponent > >":

        return _openstudioutilitiesbcl.LocalBCL_searchComponents(self, *args)



    def searchMeasures(self, *args) -> "std::vector< openstudio::BCLMeasure,std::allocator< openstudio::BCLMeasure > >":

        return _openstudioutilitiesbcl.LocalBCL_searchMeasures(self, *args)



    def addComponent(self, component: 'BCLComponent') -> "bool":

        return _openstudioutilitiesbcl.LocalBCL_addComponent(self, component)



    def removeComponent(self, component: 'BCLComponent') -> "bool":

        return _openstudioutilitiesbcl.LocalBCL_removeComponent(self, component)



    def addMeasure(self, measure: 'BCLMeasure') -> "bool":

        return _openstudioutilitiesbcl.LocalBCL_addMeasure(self, measure)



    def removeMeasure(self, measure: 'BCLMeasure') -> "bool":

        return _openstudioutilitiesbcl.LocalBCL_removeMeasure(self, measure)



    def componentAttributeSearch(self, searchTerms: 'std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &') -> "std::vector< openstudio::BCLComponent,std::allocator< openstudio::BCLComponent > >":

        return _openstudioutilitiesbcl.LocalBCL_componentAttributeSearch(self, searchTerms)



    def measureAttributeSearch(self, searchTerms: 'std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &') -> "std::vector< openstudio::BCLMeasure,std::allocator< openstudio::BCLMeasure > >":

        return _openstudioutilitiesbcl.LocalBCL_measureAttributeSearch(self, searchTerms)



    def prodAuthKeyUserPrompt(self, parent: 'QWidget'=None) -> "bool":

        return _openstudioutilitiesbcl.LocalBCL_prodAuthKeyUserPrompt(self, parent)



    def devAuthKeyUserPrompt(self, parent: 'QWidget'=None) -> "bool":

        return _openstudioutilitiesbcl.LocalBCL_devAuthKeyUserPrompt(self, parent)



    def prodAuthKey(self) -> "std::string":

        return _openstudioutilitiesbcl.LocalBCL_prodAuthKey(self)



    def setProdAuthKey(self, prodAuthKey: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.LocalBCL_setProdAuthKey(self, prodAuthKey)



    def devAuthKey(self) -> "std::string":

        return _openstudioutilitiesbcl.LocalBCL_devAuthKey(self)



    def setDevAuthKey(self, devAuthKey: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.LocalBCL_setDevAuthKey(self, devAuthKey)



    def libraryPath(self) -> "QString":

        return _openstudioutilitiesbcl.LocalBCL_libraryPath(self)



    def setLibraryPath(self, libraryPath: 'std::string const &') -> "bool":

        return _openstudioutilitiesbcl.LocalBCL_setLibraryPath(self, libraryPath)

LocalBCL_swigregister = _openstudioutilitiesbcl.LocalBCL_swigregister

LocalBCL_swigregister(LocalBCL)



def LocalBCL_instance(*args) -> "openstudio::LocalBCL &":

    return _openstudioutilitiesbcl.LocalBCL_instance(*args)

LocalBCL_instance = _openstudioutilitiesbcl.LocalBCL_instance



def LocalBCL_close() -> "void":

    return _openstudioutilitiesbcl.LocalBCL_close()

LocalBCL_close = _openstudioutilitiesbcl.LocalBCL_close



# This file is compatible with both classic and new-style classes.





