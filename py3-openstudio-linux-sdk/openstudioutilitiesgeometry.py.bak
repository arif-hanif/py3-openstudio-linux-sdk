# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudioutilitiesgeometry', [dirname(__file__)])
        except ImportError:
            import _openstudioutilitiesgeometry
            return _openstudioutilitiesgeometry
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudioutilitiesgeometry', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudioutilitiesgeometry = swig_import_helper()
    del swig_import_helper
else:
    import _openstudioutilitiesgeometry
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudioutilitiesgeometry.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudioutilitiesgeometry.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioutilitiesgeometry.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudioutilitiesgeometry.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudioutilitiesgeometry.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudioutilitiesgeometry.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioutilitiesgeometry.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioutilitiesgeometry.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioutilitiesgeometry.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioutilitiesgeometry.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudioutilitiesgeometry.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudioutilitiesgeometry.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudioutilitiesgeometry.SHARED_PTR_DISOWN_swigconstant(_openstudioutilitiesgeometry)
SHARED_PTR_DISOWN = _openstudioutilitiesgeometry.SHARED_PTR_DISOWN
import openstudioutilitiesplot
import openstudioutilitiesdata
import openstudioutilitiestime
import openstudioutilitiescore
import openstudioutilitiesunits
class OptionalPoint3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPoint3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPoint3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalPoint3d(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalPoint3d_reset(self)

    def __ref__(self) -> "openstudio::Point3d":
        return _openstudioutilitiesgeometry.OptionalPoint3d___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalPoint3d_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalPoint3d_isNull(self)

    def get(self) -> "openstudio::Point3d":
        return _openstudioutilitiesgeometry.OptionalPoint3d_get(self)

    def set(self, t: 'Point3d') -> "void":
        return _openstudioutilitiesgeometry.OptionalPoint3d_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalPoint3d
    __del__ = lambda self: None
OptionalPoint3d_swigregister = _openstudioutilitiesgeometry.OptionalPoint3d_swigregister
OptionalPoint3d_swigregister(OptionalPoint3d)

class OptionalPointLatLon(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPointLatLon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPointLatLon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalPointLatLon(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalPointLatLon_reset(self)

    def __ref__(self) -> "openstudio::PointLatLon":
        return _openstudioutilitiesgeometry.OptionalPointLatLon___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalPointLatLon_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalPointLatLon_isNull(self)

    def get(self) -> "openstudio::PointLatLon":
        return _openstudioutilitiesgeometry.OptionalPointLatLon_get(self)

    def set(self, t: 'PointLatLon') -> "void":
        return _openstudioutilitiesgeometry.OptionalPointLatLon_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalPointLatLon
    __del__ = lambda self: None
OptionalPointLatLon_swigregister = _openstudioutilitiesgeometry.OptionalPointLatLon_swigregister
OptionalPointLatLon_swigregister(OptionalPointLatLon)

class OptionalVector3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalVector3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalVector3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalVector3d(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalVector3d_reset(self)

    def __ref__(self) -> "openstudio::Vector3d":
        return _openstudioutilitiesgeometry.OptionalVector3d___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalVector3d_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalVector3d_isNull(self)

    def get(self) -> "openstudio::Vector3d":
        return _openstudioutilitiesgeometry.OptionalVector3d_get(self)

    def set(self, t: 'Vector3d') -> "void":
        return _openstudioutilitiesgeometry.OptionalVector3d_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalVector3d
    __del__ = lambda self: None
OptionalVector3d_swigregister = _openstudioutilitiesgeometry.OptionalVector3d_swigregister
OptionalVector3d_swigregister(OptionalVector3d)

class OptionalPlane(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlane, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalPlane(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalPlane_reset(self)

    def __ref__(self) -> "openstudio::Plane":
        return _openstudioutilitiesgeometry.OptionalPlane___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalPlane_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalPlane_isNull(self)

    def get(self) -> "openstudio::Plane":
        return _openstudioutilitiesgeometry.OptionalPlane_get(self)

    def set(self, t: 'Plane') -> "void":
        return _openstudioutilitiesgeometry.OptionalPlane_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalPlane
    __del__ = lambda self: None
OptionalPlane_swigregister = _openstudioutilitiesgeometry.OptionalPlane_swigregister
OptionalPlane_swigregister(OptionalPlane)

class OptionalEulerAngles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEulerAngles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEulerAngles, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalEulerAngles(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalEulerAngles_reset(self)

    def __ref__(self) -> "openstudio::EulerAngles":
        return _openstudioutilitiesgeometry.OptionalEulerAngles___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalEulerAngles_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalEulerAngles_isNull(self)

    def get(self) -> "openstudio::EulerAngles":
        return _openstudioutilitiesgeometry.OptionalEulerAngles_get(self)

    def set(self, t: 'EulerAngles') -> "void":
        return _openstudioutilitiesgeometry.OptionalEulerAngles_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalEulerAngles
    __del__ = lambda self: None
OptionalEulerAngles_swigregister = _openstudioutilitiesgeometry.OptionalEulerAngles_swigregister
OptionalEulerAngles_swigregister(OptionalEulerAngles)

class OptionalBoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBoundingBox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalBoundingBox(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalBoundingBox_reset(self)

    def __ref__(self) -> "openstudio::BoundingBox":
        return _openstudioutilitiesgeometry.OptionalBoundingBox___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalBoundingBox_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalBoundingBox_isNull(self)

    def get(self) -> "openstudio::BoundingBox":
        return _openstudioutilitiesgeometry.OptionalBoundingBox_get(self)

    def set(self, t: 'BoundingBox') -> "void":
        return _openstudioutilitiesgeometry.OptionalBoundingBox_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalBoundingBox
    __del__ = lambda self: None
OptionalBoundingBox_swigregister = _openstudioutilitiesgeometry.OptionalBoundingBox_swigregister
OptionalBoundingBox_swigregister(OptionalBoundingBox)

class OptionalIntersectionResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIntersectionResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIntersectionResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalIntersectionResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalIntersectionResult_reset(self)

    def __ref__(self) -> "openstudio::IntersectionResult":
        return _openstudioutilitiesgeometry.OptionalIntersectionResult___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalIntersectionResult_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalIntersectionResult_isNull(self)

    def get(self) -> "openstudio::IntersectionResult":
        return _openstudioutilitiesgeometry.OptionalIntersectionResult_get(self)

    def set(self, t: 'IntersectionResult') -> "void":
        return _openstudioutilitiesgeometry.OptionalIntersectionResult_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalIntersectionResult
    __del__ = lambda self: None
OptionalIntersectionResult_swigregister = _openstudioutilitiesgeometry.OptionalIntersectionResult_swigregister
OptionalIntersectionResult_swigregister(OptionalIntersectionResult)

class OptionalThreeScene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalThreeScene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalThreeScene, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalThreeScene(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalThreeScene_reset(self)

    def __ref__(self) -> "openstudio::ThreeScene":
        return _openstudioutilitiesgeometry.OptionalThreeScene___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalThreeScene_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalThreeScene_isNull(self)

    def get(self) -> "openstudio::ThreeScene":
        return _openstudioutilitiesgeometry.OptionalThreeScene_get(self)

    def set(self, t: 'ThreeScene') -> "void":
        return _openstudioutilitiesgeometry.OptionalThreeScene_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalThreeScene
    __del__ = lambda self: None
OptionalThreeScene_swigregister = _openstudioutilitiesgeometry.OptionalThreeScene_swigregister
OptionalThreeScene_swigregister(OptionalThreeScene)

class OptionalThreeMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalThreeMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalThreeMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalThreeMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalThreeMaterial_reset(self)

    def __ref__(self) -> "openstudio::ThreeMaterial":
        return _openstudioutilitiesgeometry.OptionalThreeMaterial___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalThreeMaterial_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalThreeMaterial_isNull(self)

    def get(self) -> "openstudio::ThreeMaterial":
        return _openstudioutilitiesgeometry.OptionalThreeMaterial_get(self)

    def set(self, t: 'ThreeMaterial') -> "void":
        return _openstudioutilitiesgeometry.OptionalThreeMaterial_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalThreeMaterial
    __del__ = lambda self: None
OptionalThreeMaterial_swigregister = _openstudioutilitiesgeometry.OptionalThreeMaterial_swigregister
OptionalThreeMaterial_swigregister(OptionalThreeMaterial)

class OptionalThreeGeometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalThreeGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalThreeGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalThreeGeometry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalThreeGeometry_reset(self)

    def __ref__(self) -> "openstudio::ThreeGeometry":
        return _openstudioutilitiesgeometry.OptionalThreeGeometry___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalThreeGeometry_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalThreeGeometry_isNull(self)

    def get(self) -> "openstudio::ThreeGeometry":
        return _openstudioutilitiesgeometry.OptionalThreeGeometry_get(self)

    def set(self, t: 'ThreeGeometry') -> "void":
        return _openstudioutilitiesgeometry.OptionalThreeGeometry_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalThreeGeometry
    __del__ = lambda self: None
OptionalThreeGeometry_swigregister = _openstudioutilitiesgeometry.OptionalThreeGeometry_swigregister
OptionalThreeGeometry_swigregister(OptionalThreeGeometry)

class OptionalFloorplanJS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalFloorplanJS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalFloorplanJS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_OptionalFloorplanJS(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesgeometry.OptionalFloorplanJS_reset(self)

    def __ref__(self) -> "openstudio::FloorplanJS":
        return _openstudioutilitiesgeometry.OptionalFloorplanJS___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalFloorplanJS_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesgeometry.OptionalFloorplanJS_isNull(self)

    def get(self) -> "openstudio::FloorplanJS":
        return _openstudioutilitiesgeometry.OptionalFloorplanJS_get(self)

    def set(self, t: 'FloorplanJS') -> "void":
        return _openstudioutilitiesgeometry.OptionalFloorplanJS_set(self, t)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_OptionalFloorplanJS
    __del__ = lambda self: None
OptionalFloorplanJS_swigregister = _openstudioutilitiesgeometry.OptionalFloorplanJS_swigregister
OptionalFloorplanJS_swigregister(OptionalFloorplanJS)

class Point3dVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3dVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3dVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.Point3dVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.Point3dVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.Point3dVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::Point3d >::size_type":
        return _openstudioutilitiesgeometry.Point3dVector___len__(self)

    def pop(self) -> "std::vector< openstudio::Point3d >::value_type":
        return _openstudioutilitiesgeometry.Point3dVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::Point3d >::difference_type', j: 'std::vector< openstudio::Point3d >::difference_type') -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > > *":
        return _openstudioutilitiesgeometry.Point3dVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::Point3d >::difference_type', j: 'std::vector< openstudio::Point3d >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.Point3dVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::Point3d >::value_type const &":
        return _openstudioutilitiesgeometry.Point3dVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVector___setitem__(self, *args)

    def append(self, x: 'Point3d') -> "void":
        return _openstudioutilitiesgeometry.Point3dVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.Point3dVector_empty(self)

    def size(self) -> "std::vector< openstudio::Point3d >::size_type":
        return _openstudioutilitiesgeometry.Point3dVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.Point3dVector_clear(self)

    def swap(self, v: 'Point3dVector') -> "void":
        return _openstudioutilitiesgeometry.Point3dVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::Point3d >::allocator_type":
        return _openstudioutilitiesgeometry.Point3dVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::Point3d >::iterator":
        return _openstudioutilitiesgeometry.Point3dVector_begin(self)

    def end(self) -> "std::vector< openstudio::Point3d >::iterator":
        return _openstudioutilitiesgeometry.Point3dVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::Point3d >::reverse_iterator":
        return _openstudioutilitiesgeometry.Point3dVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::Point3d >::reverse_iterator":
        return _openstudioutilitiesgeometry.Point3dVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.Point3dVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::Point3d >::iterator":
        return _openstudioutilitiesgeometry.Point3dVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_Point3dVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Point3d') -> "void":
        return _openstudioutilitiesgeometry.Point3dVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::Point3d >::value_type const &":
        return _openstudioutilitiesgeometry.Point3dVector_front(self)

    def back(self) -> "std::vector< openstudio::Point3d >::value_type const &":
        return _openstudioutilitiesgeometry.Point3dVector_back(self)

    def assign(self, n: 'std::vector< openstudio::Point3d >::size_type', x: 'Point3d') -> "void":
        return _openstudioutilitiesgeometry.Point3dVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::Point3d >::size_type') -> "void":
        return _openstudioutilitiesgeometry.Point3dVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::Point3d >::size_type":
        return _openstudioutilitiesgeometry.Point3dVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_Point3dVector
    __del__ = lambda self: None
Point3dVector_swigregister = _openstudioutilitiesgeometry.Point3dVector_swigregister
Point3dVector_swigregister(Point3dVector)

class Point3dVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3dVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3dVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.Point3dVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.Point3dVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.Point3dVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< openstudio::Point3d > >::size_type":
        return _openstudioutilitiesgeometry.Point3dVectorVector___len__(self)

    def pop(self) -> "std::vector< std::vector< openstudio::Point3d > >::value_type":
        return _openstudioutilitiesgeometry.Point3dVectorVector_pop(self)

    def __getslice__(self, i: 'std::vector< std::vector< openstudio::Point3d > >::difference_type', j: 'std::vector< std::vector< openstudio::Point3d > >::difference_type') -> "std::vector< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >,std::allocator< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > > > > *":
        return _openstudioutilitiesgeometry.Point3dVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::vector< openstudio::Point3d > >::difference_type', j: 'std::vector< std::vector< openstudio::Point3d > >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< openstudio::Point3d > >::value_type const &":
        return _openstudioutilitiesgeometry.Point3dVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector___setitem__(self, *args)

    def append(self, x: 'Point3dVector') -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.Point3dVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< openstudio::Point3d > >::size_type":
        return _openstudioutilitiesgeometry.Point3dVectorVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector_clear(self)

    def swap(self, v: 'Point3dVectorVector') -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< std::vector< openstudio::Point3d > >::allocator_type":
        return _openstudioutilitiesgeometry.Point3dVectorVector_get_allocator(self)

    def begin(self) -> "std::vector< std::vector< openstudio::Point3d > >::iterator":
        return _openstudioutilitiesgeometry.Point3dVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< openstudio::Point3d > >::iterator":
        return _openstudioutilitiesgeometry.Point3dVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< openstudio::Point3d > >::reverse_iterator":
        return _openstudioutilitiesgeometry.Point3dVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< openstudio::Point3d > >::reverse_iterator":
        return _openstudioutilitiesgeometry.Point3dVectorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< openstudio::Point3d > >::iterator":
        return _openstudioutilitiesgeometry.Point3dVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_Point3dVectorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Point3dVector') -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< openstudio::Point3d > >::value_type const &":
        return _openstudioutilitiesgeometry.Point3dVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< openstudio::Point3d > >::value_type const &":
        return _openstudioutilitiesgeometry.Point3dVectorVector_back(self)

    def assign(self, n: 'std::vector< std::vector< openstudio::Point3d > >::size_type', x: 'Point3dVector') -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::vector< openstudio::Point3d > >::size_type') -> "void":
        return _openstudioutilitiesgeometry.Point3dVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< openstudio::Point3d > >::size_type":
        return _openstudioutilitiesgeometry.Point3dVectorVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_Point3dVectorVector
    __del__ = lambda self: None
Point3dVectorVector_swigregister = _openstudioutilitiesgeometry.Point3dVectorVector_swigregister
Point3dVectorVector_swigregister(Point3dVectorVector)

class PointLatLonVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointLatLonVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointLatLonVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.PointLatLonVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.PointLatLonVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.PointLatLonVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::PointLatLon >::size_type":
        return _openstudioutilitiesgeometry.PointLatLonVector___len__(self)

    def pop(self) -> "std::vector< openstudio::PointLatLon >::value_type":
        return _openstudioutilitiesgeometry.PointLatLonVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::PointLatLon >::difference_type', j: 'std::vector< openstudio::PointLatLon >::difference_type') -> "std::vector< openstudio::PointLatLon,std::allocator< openstudio::PointLatLon > > *":
        return _openstudioutilitiesgeometry.PointLatLonVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::PointLatLon >::difference_type', j: 'std::vector< openstudio::PointLatLon >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::PointLatLon >::value_type const &":
        return _openstudioutilitiesgeometry.PointLatLonVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector___setitem__(self, *args)

    def append(self, x: 'PointLatLon') -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.PointLatLonVector_empty(self)

    def size(self) -> "std::vector< openstudio::PointLatLon >::size_type":
        return _openstudioutilitiesgeometry.PointLatLonVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector_clear(self)

    def swap(self, v: 'PointLatLonVector') -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::PointLatLon >::allocator_type":
        return _openstudioutilitiesgeometry.PointLatLonVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::PointLatLon >::iterator":
        return _openstudioutilitiesgeometry.PointLatLonVector_begin(self)

    def end(self) -> "std::vector< openstudio::PointLatLon >::iterator":
        return _openstudioutilitiesgeometry.PointLatLonVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::PointLatLon >::reverse_iterator":
        return _openstudioutilitiesgeometry.PointLatLonVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::PointLatLon >::reverse_iterator":
        return _openstudioutilitiesgeometry.PointLatLonVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::PointLatLon >::iterator":
        return _openstudioutilitiesgeometry.PointLatLonVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_PointLatLonVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'PointLatLon') -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::PointLatLon >::value_type const &":
        return _openstudioutilitiesgeometry.PointLatLonVector_front(self)

    def back(self) -> "std::vector< openstudio::PointLatLon >::value_type const &":
        return _openstudioutilitiesgeometry.PointLatLonVector_back(self)

    def assign(self, n: 'std::vector< openstudio::PointLatLon >::size_type', x: 'PointLatLon') -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::PointLatLon >::size_type') -> "void":
        return _openstudioutilitiesgeometry.PointLatLonVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::PointLatLon >::size_type":
        return _openstudioutilitiesgeometry.PointLatLonVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_PointLatLonVector
    __del__ = lambda self: None
PointLatLonVector_swigregister = _openstudioutilitiesgeometry.PointLatLonVector_swigregister
PointLatLonVector_swigregister(PointLatLonVector)

class Vector3dVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3dVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3dVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.Vector3dVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.Vector3dVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.Vector3dVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::Vector3d >::size_type":
        return _openstudioutilitiesgeometry.Vector3dVector___len__(self)

    def pop(self) -> "std::vector< openstudio::Vector3d >::value_type":
        return _openstudioutilitiesgeometry.Vector3dVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::Vector3d >::difference_type', j: 'std::vector< openstudio::Vector3d >::difference_type') -> "std::vector< openstudio::Vector3d,std::allocator< openstudio::Vector3d > > *":
        return _openstudioutilitiesgeometry.Vector3dVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::Vector3d >::difference_type', j: 'std::vector< openstudio::Vector3d >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::Vector3d >::value_type const &":
        return _openstudioutilitiesgeometry.Vector3dVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector___setitem__(self, *args)

    def append(self, x: 'Vector3d') -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.Vector3dVector_empty(self)

    def size(self) -> "std::vector< openstudio::Vector3d >::size_type":
        return _openstudioutilitiesgeometry.Vector3dVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector_clear(self)

    def swap(self, v: 'Vector3dVector') -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::Vector3d >::allocator_type":
        return _openstudioutilitiesgeometry.Vector3dVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::Vector3d >::iterator":
        return _openstudioutilitiesgeometry.Vector3dVector_begin(self)

    def end(self) -> "std::vector< openstudio::Vector3d >::iterator":
        return _openstudioutilitiesgeometry.Vector3dVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::Vector3d >::reverse_iterator":
        return _openstudioutilitiesgeometry.Vector3dVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::Vector3d >::reverse_iterator":
        return _openstudioutilitiesgeometry.Vector3dVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::Vector3d >::iterator":
        return _openstudioutilitiesgeometry.Vector3dVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_Vector3dVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Vector3d') -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::Vector3d >::value_type const &":
        return _openstudioutilitiesgeometry.Vector3dVector_front(self)

    def back(self) -> "std::vector< openstudio::Vector3d >::value_type const &":
        return _openstudioutilitiesgeometry.Vector3dVector_back(self)

    def assign(self, n: 'std::vector< openstudio::Vector3d >::size_type', x: 'Vector3d') -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::Vector3d >::size_type') -> "void":
        return _openstudioutilitiesgeometry.Vector3dVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::Vector3d >::size_type":
        return _openstudioutilitiesgeometry.Vector3dVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_Vector3dVector
    __del__ = lambda self: None
Vector3dVector_swigregister = _openstudioutilitiesgeometry.Vector3dVector_swigregister
Vector3dVector_swigregister(Vector3dVector)

class PlaneVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlaneVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlaneVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.PlaneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.PlaneVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.PlaneVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::Plane >::size_type":
        return _openstudioutilitiesgeometry.PlaneVector___len__(self)

    def pop(self) -> "std::vector< openstudio::Plane >::value_type":
        return _openstudioutilitiesgeometry.PlaneVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::Plane >::difference_type', j: 'std::vector< openstudio::Plane >::difference_type') -> "std::vector< openstudio::Plane,std::allocator< openstudio::Plane > > *":
        return _openstudioutilitiesgeometry.PlaneVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.PlaneVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::Plane >::difference_type', j: 'std::vector< openstudio::Plane >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.PlaneVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.PlaneVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::Plane >::value_type const &":
        return _openstudioutilitiesgeometry.PlaneVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.PlaneVector___setitem__(self, *args)

    def append(self, x: 'Plane') -> "void":
        return _openstudioutilitiesgeometry.PlaneVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.PlaneVector_empty(self)

    def size(self) -> "std::vector< openstudio::Plane >::size_type":
        return _openstudioutilitiesgeometry.PlaneVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.PlaneVector_clear(self)

    def swap(self, v: 'PlaneVector') -> "void":
        return _openstudioutilitiesgeometry.PlaneVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::Plane >::allocator_type":
        return _openstudioutilitiesgeometry.PlaneVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::Plane >::iterator":
        return _openstudioutilitiesgeometry.PlaneVector_begin(self)

    def end(self) -> "std::vector< openstudio::Plane >::iterator":
        return _openstudioutilitiesgeometry.PlaneVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::Plane >::reverse_iterator":
        return _openstudioutilitiesgeometry.PlaneVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::Plane >::reverse_iterator":
        return _openstudioutilitiesgeometry.PlaneVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.PlaneVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::Plane >::iterator":
        return _openstudioutilitiesgeometry.PlaneVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_PlaneVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'Plane') -> "void":
        return _openstudioutilitiesgeometry.PlaneVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::Plane >::value_type const &":
        return _openstudioutilitiesgeometry.PlaneVector_front(self)

    def back(self) -> "std::vector< openstudio::Plane >::value_type const &":
        return _openstudioutilitiesgeometry.PlaneVector_back(self)

    def assign(self, n: 'std::vector< openstudio::Plane >::size_type', x: 'Plane') -> "void":
        return _openstudioutilitiesgeometry.PlaneVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::Plane >::size_type', x: 'Plane') -> "void":
        return _openstudioutilitiesgeometry.PlaneVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.PlaneVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::Plane >::size_type') -> "void":
        return _openstudioutilitiesgeometry.PlaneVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::Plane >::size_type":
        return _openstudioutilitiesgeometry.PlaneVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_PlaneVector
    __del__ = lambda self: None
PlaneVector_swigregister = _openstudioutilitiesgeometry.PlaneVector_swigregister
PlaneVector_swigregister(PlaneVector)

class EulerAnglesVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EulerAnglesVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EulerAnglesVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.EulerAnglesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.EulerAnglesVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.EulerAnglesVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::EulerAngles >::size_type":
        return _openstudioutilitiesgeometry.EulerAnglesVector___len__(self)

    def pop(self) -> "std::vector< openstudio::EulerAngles >::value_type":
        return _openstudioutilitiesgeometry.EulerAnglesVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::EulerAngles >::difference_type', j: 'std::vector< openstudio::EulerAngles >::difference_type') -> "std::vector< openstudio::EulerAngles,std::allocator< openstudio::EulerAngles > > *":
        return _openstudioutilitiesgeometry.EulerAnglesVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::EulerAngles >::difference_type', j: 'std::vector< openstudio::EulerAngles >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::EulerAngles >::value_type const &":
        return _openstudioutilitiesgeometry.EulerAnglesVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector___setitem__(self, *args)

    def append(self, x: 'EulerAngles') -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.EulerAnglesVector_empty(self)

    def size(self) -> "std::vector< openstudio::EulerAngles >::size_type":
        return _openstudioutilitiesgeometry.EulerAnglesVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector_clear(self)

    def swap(self, v: 'EulerAnglesVector') -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::EulerAngles >::allocator_type":
        return _openstudioutilitiesgeometry.EulerAnglesVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::EulerAngles >::iterator":
        return _openstudioutilitiesgeometry.EulerAnglesVector_begin(self)

    def end(self) -> "std::vector< openstudio::EulerAngles >::iterator":
        return _openstudioutilitiesgeometry.EulerAnglesVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::EulerAngles >::reverse_iterator":
        return _openstudioutilitiesgeometry.EulerAnglesVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::EulerAngles >::reverse_iterator":
        return _openstudioutilitiesgeometry.EulerAnglesVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::EulerAngles >::iterator":
        return _openstudioutilitiesgeometry.EulerAnglesVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_EulerAnglesVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EulerAngles') -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::EulerAngles >::value_type const &":
        return _openstudioutilitiesgeometry.EulerAnglesVector_front(self)

    def back(self) -> "std::vector< openstudio::EulerAngles >::value_type const &":
        return _openstudioutilitiesgeometry.EulerAnglesVector_back(self)

    def assign(self, n: 'std::vector< openstudio::EulerAngles >::size_type', x: 'EulerAngles') -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::EulerAngles >::size_type') -> "void":
        return _openstudioutilitiesgeometry.EulerAnglesVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::EulerAngles >::size_type":
        return _openstudioutilitiesgeometry.EulerAnglesVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_EulerAnglesVector
    __del__ = lambda self: None
EulerAnglesVector_swigregister = _openstudioutilitiesgeometry.EulerAnglesVector_swigregister
EulerAnglesVector_swigregister(EulerAnglesVector)

class BoundingBoxVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBoxVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBoxVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.BoundingBoxVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.BoundingBoxVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.BoundingBoxVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::BoundingBox >::size_type":
        return _openstudioutilitiesgeometry.BoundingBoxVector___len__(self)

    def pop(self) -> "std::vector< openstudio::BoundingBox >::value_type":
        return _openstudioutilitiesgeometry.BoundingBoxVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::BoundingBox >::difference_type', j: 'std::vector< openstudio::BoundingBox >::difference_type') -> "std::vector< openstudio::BoundingBox,std::allocator< openstudio::BoundingBox > > *":
        return _openstudioutilitiesgeometry.BoundingBoxVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::BoundingBox >::difference_type', j: 'std::vector< openstudio::BoundingBox >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::BoundingBox >::value_type const &":
        return _openstudioutilitiesgeometry.BoundingBoxVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector___setitem__(self, *args)

    def append(self, x: 'BoundingBox') -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.BoundingBoxVector_empty(self)

    def size(self) -> "std::vector< openstudio::BoundingBox >::size_type":
        return _openstudioutilitiesgeometry.BoundingBoxVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector_clear(self)

    def swap(self, v: 'BoundingBoxVector') -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::BoundingBox >::allocator_type":
        return _openstudioutilitiesgeometry.BoundingBoxVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::BoundingBox >::iterator":
        return _openstudioutilitiesgeometry.BoundingBoxVector_begin(self)

    def end(self) -> "std::vector< openstudio::BoundingBox >::iterator":
        return _openstudioutilitiesgeometry.BoundingBoxVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::BoundingBox >::reverse_iterator":
        return _openstudioutilitiesgeometry.BoundingBoxVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::BoundingBox >::reverse_iterator":
        return _openstudioutilitiesgeometry.BoundingBoxVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::BoundingBox >::iterator":
        return _openstudioutilitiesgeometry.BoundingBoxVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_BoundingBoxVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'BoundingBox') -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::BoundingBox >::value_type const &":
        return _openstudioutilitiesgeometry.BoundingBoxVector_front(self)

    def back(self) -> "std::vector< openstudio::BoundingBox >::value_type const &":
        return _openstudioutilitiesgeometry.BoundingBoxVector_back(self)

    def assign(self, n: 'std::vector< openstudio::BoundingBox >::size_type', x: 'BoundingBox') -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::BoundingBox >::size_type') -> "void":
        return _openstudioutilitiesgeometry.BoundingBoxVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::BoundingBox >::size_type":
        return _openstudioutilitiesgeometry.BoundingBoxVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_BoundingBoxVector
    __del__ = lambda self: None
BoundingBoxVector_swigregister = _openstudioutilitiesgeometry.BoundingBoxVector_swigregister
BoundingBoxVector_swigregister(BoundingBoxVector)

class ThreeSceneChildVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeSceneChildVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeSceneChildVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::ThreeSceneChild >::size_type":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector___len__(self)

    def pop(self) -> "std::vector< openstudio::ThreeSceneChild >::value_type":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::ThreeSceneChild >::difference_type', j: 'std::vector< openstudio::ThreeSceneChild >::difference_type') -> "std::vector< openstudio::ThreeSceneChild,std::allocator< openstudio::ThreeSceneChild > > *":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::ThreeSceneChild >::difference_type', j: 'std::vector< openstudio::ThreeSceneChild >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::ThreeSceneChild >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector___setitem__(self, *args)

    def append(self, x: 'ThreeSceneChild') -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_empty(self)

    def size(self) -> "std::vector< openstudio::ThreeSceneChild >::size_type":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_clear(self)

    def swap(self, v: 'ThreeSceneChildVector') -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::ThreeSceneChild >::allocator_type":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::ThreeSceneChild >::iterator":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_begin(self)

    def end(self) -> "std::vector< openstudio::ThreeSceneChild >::iterator":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::ThreeSceneChild >::reverse_iterator":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::ThreeSceneChild >::reverse_iterator":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::ThreeSceneChild >::iterator":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_ThreeSceneChildVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ThreeSceneChild') -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::ThreeSceneChild >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_front(self)

    def back(self) -> "std::vector< openstudio::ThreeSceneChild >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_back(self)

    def assign(self, n: 'std::vector< openstudio::ThreeSceneChild >::size_type', x: 'ThreeSceneChild') -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::ThreeSceneChild >::size_type', x: 'ThreeSceneChild') -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::ThreeSceneChild >::size_type') -> "void":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::ThreeSceneChild >::size_type":
        return _openstudioutilitiesgeometry.ThreeSceneChildVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeSceneChildVector
    __del__ = lambda self: None
ThreeSceneChildVector_swigregister = _openstudioutilitiesgeometry.ThreeSceneChildVector_swigregister
ThreeSceneChildVector_swigregister(ThreeSceneChildVector)

class ThreeGeometryVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeGeometryVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeGeometryVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeGeometryVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeGeometryVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::ThreeGeometry >::size_type":
        return _openstudioutilitiesgeometry.ThreeGeometryVector___len__(self)

    def pop(self) -> "std::vector< openstudio::ThreeGeometry >::value_type":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::ThreeGeometry >::difference_type', j: 'std::vector< openstudio::ThreeGeometry >::difference_type') -> "std::vector< openstudio::ThreeGeometry,std::allocator< openstudio::ThreeGeometry > > *":
        return _openstudioutilitiesgeometry.ThreeGeometryVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::ThreeGeometry >::difference_type', j: 'std::vector< openstudio::ThreeGeometry >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::ThreeGeometry >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeGeometryVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector___setitem__(self, *args)

    def append(self, x: 'ThreeGeometry') -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_empty(self)

    def size(self) -> "std::vector< openstudio::ThreeGeometry >::size_type":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_clear(self)

    def swap(self, v: 'ThreeGeometryVector') -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::ThreeGeometry >::allocator_type":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::ThreeGeometry >::iterator":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_begin(self)

    def end(self) -> "std::vector< openstudio::ThreeGeometry >::iterator":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::ThreeGeometry >::reverse_iterator":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::ThreeGeometry >::reverse_iterator":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::ThreeGeometry >::iterator":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_ThreeGeometryVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ThreeGeometry') -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::ThreeGeometry >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_front(self)

    def back(self) -> "std::vector< openstudio::ThreeGeometry >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_back(self)

    def assign(self, n: 'std::vector< openstudio::ThreeGeometry >::size_type', x: 'ThreeGeometry') -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::ThreeGeometry >::size_type', x: 'ThreeGeometry') -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::ThreeGeometry >::size_type') -> "void":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::ThreeGeometry >::size_type":
        return _openstudioutilitiesgeometry.ThreeGeometryVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeGeometryVector
    __del__ = lambda self: None
ThreeGeometryVector_swigregister = _openstudioutilitiesgeometry.ThreeGeometryVector_swigregister
ThreeGeometryVector_swigregister(ThreeGeometryVector)

class ThreeMaterialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeMaterialVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeMaterialVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::ThreeMaterial >::size_type":
        return _openstudioutilitiesgeometry.ThreeMaterialVector___len__(self)

    def pop(self) -> "std::vector< openstudio::ThreeMaterial >::value_type":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::ThreeMaterial >::difference_type', j: 'std::vector< openstudio::ThreeMaterial >::difference_type') -> "std::vector< openstudio::ThreeMaterial,std::allocator< openstudio::ThreeMaterial > > *":
        return _openstudioutilitiesgeometry.ThreeMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::ThreeMaterial >::difference_type', j: 'std::vector< openstudio::ThreeMaterial >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::ThreeMaterial >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector___setitem__(self, *args)

    def append(self, x: 'ThreeMaterial') -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_empty(self)

    def size(self) -> "std::vector< openstudio::ThreeMaterial >::size_type":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_clear(self)

    def swap(self, v: 'ThreeMaterialVector') -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::ThreeMaterial >::allocator_type":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::ThreeMaterial >::iterator":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_begin(self)

    def end(self) -> "std::vector< openstudio::ThreeMaterial >::iterator":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::ThreeMaterial >::reverse_iterator":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::ThreeMaterial >::reverse_iterator":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::ThreeMaterial >::iterator":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_ThreeMaterialVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ThreeMaterial') -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::ThreeMaterial >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_front(self)

    def back(self) -> "std::vector< openstudio::ThreeMaterial >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_back(self)

    def assign(self, n: 'std::vector< openstudio::ThreeMaterial >::size_type', x: 'ThreeMaterial') -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::ThreeMaterial >::size_type', x: 'ThreeMaterial') -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::ThreeMaterial >::size_type') -> "void":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::ThreeMaterial >::size_type":
        return _openstudioutilitiesgeometry.ThreeMaterialVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeMaterialVector
    __del__ = lambda self: None
ThreeMaterialVector_swigregister = _openstudioutilitiesgeometry.ThreeMaterialVector_swigregister
ThreeMaterialVector_swigregister(ThreeMaterialVector)

class ThreeModelObjectMetadataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeModelObjectMetadataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeModelObjectMetadataVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::size_type":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector___len__(self)

    def pop(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::value_type":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::ThreeModelObjectMetadata >::difference_type', j: 'std::vector< openstudio::ThreeModelObjectMetadata >::difference_type') -> "std::vector< openstudio::ThreeModelObjectMetadata,std::allocator< openstudio::ThreeModelObjectMetadata > > *":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::ThreeModelObjectMetadata >::difference_type', j: 'std::vector< openstudio::ThreeModelObjectMetadata >::difference_type') -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::ThreeModelObjectMetadata >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector___setitem__(self, *args)

    def append(self, x: 'ThreeModelObjectMetadata') -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_empty(self)

    def size(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::size_type":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_clear(self)

    def swap(self, v: 'ThreeModelObjectMetadataVector') -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::allocator_type":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::iterator":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_begin(self)

    def end(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::iterator":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::reverse_iterator":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::reverse_iterator":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::ThreeModelObjectMetadata >::iterator":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_ThreeModelObjectMetadataVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'ThreeModelObjectMetadata') -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_front(self)

    def back(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::value_type const &":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_back(self)

    def assign(self, n: 'std::vector< openstudio::ThreeModelObjectMetadata >::size_type', x: 'ThreeModelObjectMetadata') -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::ThreeModelObjectMetadata >::size_type') -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::ThreeModelObjectMetadata >::size_type":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeModelObjectMetadataVector
    __del__ = lambda self: None
ThreeModelObjectMetadataVector_swigregister = _openstudioutilitiesgeometry.ThreeModelObjectMetadataVector_swigregister
ThreeModelObjectMetadataVector_swigregister(ThreeModelObjectMetadataVector)

class Vector3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_Vector3d(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def x(self) -> "double":
        return _openstudioutilitiesgeometry.Vector3d_x(self)

    def y(self) -> "double":
        return _openstudioutilitiesgeometry.Vector3d_y(self)

    def z(self) -> "double":
        return _openstudioutilitiesgeometry.Vector3d_z(self)

    def __add__(self, other: 'Vector3d') -> "openstudio::Vector3d":
        return _openstudioutilitiesgeometry.Vector3d___add__(self, other)

    def __iadd__(self, other: 'Vector3d') -> "openstudio::Vector3d &":
        return _openstudioutilitiesgeometry.Vector3d___iadd__(self, other)

    def __sub__(self, other: 'Vector3d') -> "openstudio::Vector3d":
        return _openstudioutilitiesgeometry.Vector3d___sub__(self, other)

    def __isub__(self, other: 'Vector3d') -> "openstudio::Vector3d &":
        return _openstudioutilitiesgeometry.Vector3d___isub__(self, other)

    def __eq__(self, other: 'Vector3d') -> "bool":
        return _openstudioutilitiesgeometry.Vector3d___eq__(self, other)

    def normalize(self) -> "bool":
        return _openstudioutilitiesgeometry.Vector3d_normalize(self)

    def reverseVector(self) -> "openstudio::Vector3d":
        return _openstudioutilitiesgeometry.Vector3d_reverseVector(self)

    def length(self) -> "double":
        return _openstudioutilitiesgeometry.Vector3d_length(self)

    def setLength(self, newLength: 'double') -> "bool":
        return _openstudioutilitiesgeometry.Vector3d_setLength(self, newLength)

    def dot(self, other: 'Vector3d') -> "double":
        return _openstudioutilitiesgeometry.Vector3d_dot(self, other)

    def cross(self, other: 'Vector3d') -> "openstudio::Vector3d":
        return _openstudioutilitiesgeometry.Vector3d_cross(self, other)

    def vector(self) -> "openstudio::Vector":
        return _openstudioutilitiesgeometry.Vector3d_vector(self)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesgeometry.Vector3d___str__(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_Vector3d
    __del__ = lambda self: None
Vector3d_swigregister = _openstudioutilitiesgeometry.Vector3d_swigregister
Vector3d_swigregister(Vector3d)


def __sub__(*args) -> "openstudio::Vector3d":
    return _openstudioutilitiesgeometry.__sub__(*args)
__sub__ = _openstudioutilitiesgeometry.__sub__

def __mul__(*args) -> "openstudio::Vector3d":
    return _openstudioutilitiesgeometry.__mul__(*args)
__mul__ = _openstudioutilitiesgeometry.__mul__
class Point3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_Point3d(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def x(self) -> "double":
        return _openstudioutilitiesgeometry.Point3d_x(self)

    def y(self) -> "double":
        return _openstudioutilitiesgeometry.Point3d_y(self)

    def z(self) -> "double":
        return _openstudioutilitiesgeometry.Point3d_z(self)

    def __add__(self, vec: 'Vector3d') -> "openstudio::Point3d":
        return _openstudioutilitiesgeometry.Point3d___add__(self, vec)

    def __iadd__(self, vec: 'Vector3d') -> "openstudio::Point3d &":
        return _openstudioutilitiesgeometry.Point3d___iadd__(self, vec)

    def __sub__(self, other: 'Point3d') -> "openstudio::Vector3d":
        return _openstudioutilitiesgeometry.Point3d___sub__(self, other)

    def __eq__(self, other: 'Point3d') -> "bool":
        return _openstudioutilitiesgeometry.Point3d___eq__(self, other)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesgeometry.Point3d___str__(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_Point3d
    __del__ = lambda self: None
Point3d_swigregister = _openstudioutilitiesgeometry.Point3d_swigregister
Point3d_swigregister(Point3d)

class PointLatLon(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointLatLon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointLatLon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_PointLatLon(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_PointLatLon
    __del__ = lambda self: None

    def lat(self) -> "double":
        return _openstudioutilitiesgeometry.PointLatLon_lat(self)

    def lon(self) -> "double":
        return _openstudioutilitiesgeometry.PointLatLon_lon(self)

    def height(self) -> "double":
        return _openstudioutilitiesgeometry.PointLatLon_height(self)

    def __eq__(self, other: 'PointLatLon') -> "bool":
        return _openstudioutilitiesgeometry.PointLatLon___eq__(self, other)

    def __sub__(self, other: 'PointLatLon') -> "double":
        return _openstudioutilitiesgeometry.PointLatLon___sub__(self, other)

    def toLocalCartesian(self, *args) -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
        return _openstudioutilitiesgeometry.PointLatLon_toLocalCartesian(self, *args)

    def fromLocalCartesian(self, *args) -> "std::vector< openstudio::PointLatLon,std::allocator< openstudio::PointLatLon > >":
        return _openstudioutilitiesgeometry.PointLatLon_fromLocalCartesian(self, *args)

    def utmZone(self) -> "int":
        return _openstudioutilitiesgeometry.PointLatLon_utmZone(self)

    def toUTM(self, *args) -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
        return _openstudioutilitiesgeometry.PointLatLon_toUTM(self, *args)

    def fromUTM(self, *args) -> "std::vector< openstudio::PointLatLon,std::allocator< openstudio::PointLatLon > >":
        return _openstudioutilitiesgeometry.PointLatLon_fromUTM(self, *args)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesgeometry.PointLatLon___str__(self)
PointLatLon_swigregister = _openstudioutilitiesgeometry.PointLatLon_swigregister
PointLatLon_swigregister(PointLatLon)


def getDistanceLatLon(lat1: 'double', lon1: 'double', lat2: 'double', lon2: 'double') -> "double":
    return _openstudioutilitiesgeometry.getDistanceLatLon(lat1, lon1, lat2, lon2)
getDistanceLatLon = _openstudioutilitiesgeometry.getDistanceLatLon
class Plane(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plane, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_Plane(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_Plane
    __del__ = lambda self: None

    def outwardNormal(self) -> "openstudio::Vector3d":
        return _openstudioutilitiesgeometry.Plane_outwardNormal(self)

    def parallel(self, other: 'Plane', tol: 'double'=0.001) -> "bool":
        return _openstudioutilitiesgeometry.Plane_parallel(self, other, tol)

    def equal(self, other: 'Plane', tol: 'double'=0.001) -> "bool":
        return _openstudioutilitiesgeometry.Plane_equal(self, other, tol)

    def reverseEqual(self, other: 'Plane', tol: 'double'=0.001) -> "bool":
        return _openstudioutilitiesgeometry.Plane_reverseEqual(self, other, tol)

    def reversePlane(self) -> "openstudio::Plane":
        return _openstudioutilitiesgeometry.Plane_reversePlane(self)

    def project(self, *args) -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
        return _openstudioutilitiesgeometry.Plane_project(self, *args)

    def pointOnPlane(self, point: 'Point3d', tol: 'double'=0.001) -> "bool":
        return _openstudioutilitiesgeometry.Plane_pointOnPlane(self, point, tol)

    def a(self) -> "double":
        return _openstudioutilitiesgeometry.Plane_a(self)

    def b(self) -> "double":
        return _openstudioutilitiesgeometry.Plane_b(self)

    def c(self) -> "double":
        return _openstudioutilitiesgeometry.Plane_c(self)

    def d(self) -> "double":
        return _openstudioutilitiesgeometry.Plane_d(self)
Plane_swigregister = _openstudioutilitiesgeometry.Plane_swigregister
Plane_swigregister(Plane)

class EulerAngles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EulerAngles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EulerAngles, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_EulerAngles(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def psi(self) -> "double":
        return _openstudioutilitiesgeometry.EulerAngles_psi(self)

    def theta(self) -> "double":
        return _openstudioutilitiesgeometry.EulerAngles_theta(self)

    def phi(self) -> "double":
        return _openstudioutilitiesgeometry.EulerAngles_phi(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_EulerAngles
    __del__ = lambda self: None
EulerAngles_swigregister = _openstudioutilitiesgeometry.EulerAngles_swigregister
EulerAngles_swigregister(EulerAngles)


def degToRad(degrees: 'double') -> "double":
    return _openstudioutilitiesgeometry.degToRad(degrees)
degToRad = _openstudioutilitiesgeometry.degToRad

def radToDeg(radians: 'double') -> "double":
    return _openstudioutilitiesgeometry.radToDeg(radians)
radToDeg = _openstudioutilitiesgeometry.radToDeg

def getArea(points: 'Point3dVector') -> "boost::optional< double >":
    return _openstudioutilitiesgeometry.getArea(points)
getArea = _openstudioutilitiesgeometry.getArea

def getNewallVector(points: 'Point3dVector') -> "boost::optional< openstudio::Vector3d >":
    return _openstudioutilitiesgeometry.getNewallVector(points)
getNewallVector = _openstudioutilitiesgeometry.getNewallVector

def getOutwardNormal(points: 'Point3dVector') -> "boost::optional< openstudio::Vector3d >":
    return _openstudioutilitiesgeometry.getOutwardNormal(points)
getOutwardNormal = _openstudioutilitiesgeometry.getOutwardNormal

def getCentroid(points: 'Point3dVector') -> "boost::optional< openstudio::Point3d >":
    return _openstudioutilitiesgeometry.getCentroid(points)
getCentroid = _openstudioutilitiesgeometry.getCentroid

def reorderULC(points: 'Point3dVector') -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
    return _openstudioutilitiesgeometry.reorderULC(points)
reorderULC = _openstudioutilitiesgeometry.reorderULC

def removeCollinear(points: 'Point3dVector', tol: 'double'=0.001) -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
    return _openstudioutilitiesgeometry.removeCollinear(points, tol)
removeCollinear = _openstudioutilitiesgeometry.removeCollinear

def removeCollinearLegacy(points: 'Point3dVector', tol: 'double'=0.001) -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
    return _openstudioutilitiesgeometry.removeCollinearLegacy(points, tol)
removeCollinearLegacy = _openstudioutilitiesgeometry.removeCollinearLegacy

def getDistance(point1: 'Point3d', point2: 'Point3d') -> "double":
    return _openstudioutilitiesgeometry.getDistance(point1, point2)
getDistance = _openstudioutilitiesgeometry.getDistance

def getDistancePointToLineSegment(point: 'Point3d', lineSegment: 'Point3dVector') -> "double":
    return _openstudioutilitiesgeometry.getDistancePointToLineSegment(point, lineSegment)
getDistancePointToLineSegment = _openstudioutilitiesgeometry.getDistancePointToLineSegment

def getDistancePointToTriangle(point: 'Point3d', triangle: 'Point3dVector') -> "double":
    return _openstudioutilitiesgeometry.getDistancePointToTriangle(point, triangle)
getDistancePointToTriangle = _openstudioutilitiesgeometry.getDistancePointToTriangle

def getAngle(vector1: 'Vector3d', vector2: 'Vector3d') -> "double":
    return _openstudioutilitiesgeometry.getAngle(vector1, vector2)
getAngle = _openstudioutilitiesgeometry.getAngle

def circularEqual(points1: 'Point3dVector', points2: 'Point3dVector', tol: 'double'=0.001) -> "bool":
    return _openstudioutilitiesgeometry.circularEqual(points1, points2, tol)
circularEqual = _openstudioutilitiesgeometry.circularEqual

def getCombinedPoint(point3d: 'Point3d', allPoints: 'Point3dVector', tol: 'double'=0.001) -> "openstudio::Point3d":
    return _openstudioutilitiesgeometry.getCombinedPoint(point3d, allPoints, tol)
getCombinedPoint = _openstudioutilitiesgeometry.getCombinedPoint

def computeTriangulation(vertices: 'Point3dVector', holes: 'Point3dVectorVector', tol: 'double'=0.001) -> "std::vector< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >,std::allocator< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > > > >":
    return _openstudioutilitiesgeometry.computeTriangulation(vertices, holes, tol)
computeTriangulation = _openstudioutilitiesgeometry.computeTriangulation

def moveVerticesTowardsPoint(vertices: 'Point3dVector', point: 'Point3d', distance: 'double') -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
    return _openstudioutilitiesgeometry.moveVerticesTowardsPoint(vertices, point, distance)
moveVerticesTowardsPoint = _openstudioutilitiesgeometry.moveVerticesTowardsPoint

def reverse(vertices: 'Point3dVector') -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
    return _openstudioutilitiesgeometry.reverse(vertices)
reverse = _openstudioutilitiesgeometry.reverse

def applyViewAndDaylightingGlassRatios(viewGlassToWallRatio: 'double', daylightingGlassToWallRatio: 'double', desiredViewGlassSillHeight: 'double', desiredDaylightingGlassHeaderHeight: 'double', exteriorShadingProjectionFactor: 'double', interiorShelfProjectionFactor: 'double', surfaceVertices: 'Point3dVector', viewVertices: 'Point3dVector', daylightingVertices: 'Point3dVector', exteriorShadingVertices: 'Point3dVector', interiorShelfVertices: 'Point3dVector') -> "bool":
    return _openstudioutilitiesgeometry.applyViewAndDaylightingGlassRatios(viewGlassToWallRatio, daylightingGlassToWallRatio, desiredViewGlassSillHeight, desiredDaylightingGlassHeaderHeight, exteriorShadingProjectionFactor, interiorShelfProjectionFactor, surfaceVertices, viewVertices, daylightingVertices, exteriorShadingVertices, interiorShelfVertices)
applyViewAndDaylightingGlassRatios = _openstudioutilitiesgeometry.applyViewAndDaylightingGlassRatios
class Transformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transformation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_Transformation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["rotation"] = lambda x: _openstudioutilitiesgeometry.Transformation_rotation
    if _newclass:
        rotation = staticmethod(_openstudioutilitiesgeometry.Transformation_rotation)
    __swig_getmethods__["alignZPrime"] = lambda x: _openstudioutilitiesgeometry.Transformation_alignZPrime
    if _newclass:
        alignZPrime = staticmethod(_openstudioutilitiesgeometry.Transformation_alignZPrime)
    __swig_getmethods__["alignFace"] = lambda x: _openstudioutilitiesgeometry.Transformation_alignFace
    if _newclass:
        alignFace = staticmethod(_openstudioutilitiesgeometry.Transformation_alignFace)

    def inverse(self) -> "openstudio::Transformation":
        return _openstudioutilitiesgeometry.Transformation_inverse(self)

    def matrix(self) -> "openstudio::Matrix":
        return _openstudioutilitiesgeometry.Transformation_matrix(self)

    def vector(self) -> "openstudio::Vector":
        return _openstudioutilitiesgeometry.Transformation_vector(self)

    def eulerAngles(self) -> "openstudio::EulerAngles":
        return _openstudioutilitiesgeometry.Transformation_eulerAngles(self)

    def rotationMatrix(self) -> "openstudio::Matrix":
        return _openstudioutilitiesgeometry.Transformation_rotationMatrix(self)

    def translation(self, *args) -> "openstudio::Vector3d":
        return _openstudioutilitiesgeometry.Transformation_translation(self, *args)

    def __mul__(self, *args) -> "openstudio::Transformation":
        return _openstudioutilitiesgeometry.Transformation___mul__(self, *args)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_Transformation
    __del__ = lambda self: None
Transformation_swigregister = _openstudioutilitiesgeometry.Transformation_swigregister
Transformation_swigregister(Transformation)

def Transformation_rotation(*args) -> "openstudio::Transformation":
    return _openstudioutilitiesgeometry.Transformation_rotation(*args)
Transformation_rotation = _openstudioutilitiesgeometry.Transformation_rotation

def Transformation_alignZPrime(zPrime: 'Vector3d') -> "openstudio::Transformation":
    return _openstudioutilitiesgeometry.Transformation_alignZPrime(zPrime)
Transformation_alignZPrime = _openstudioutilitiesgeometry.Transformation_alignZPrime

def Transformation_alignFace(vertices: 'Point3dVector') -> "openstudio::Transformation":
    return _openstudioutilitiesgeometry.Transformation_alignFace(vertices)
Transformation_alignFace = _openstudioutilitiesgeometry.Transformation_alignFace


def createRotation(*args) -> "openstudio::Transformation":
    return _openstudioutilitiesgeometry.createRotation(*args)
createRotation = _openstudioutilitiesgeometry.createRotation

def createTranslation(translation: 'Vector3d') -> "openstudio::Transformation":
    return _openstudioutilitiesgeometry.createTranslation(translation)
createTranslation = _openstudioutilitiesgeometry.createTranslation
class BoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudioutilitiesgeometry.new_BoundingBox()
        try:
            self.this.append(this)
        except:
            self.this = this

    def add(self, other: 'BoundingBox') -> "void":
        return _openstudioutilitiesgeometry.BoundingBox_add(self, other)

    def addPoint(self, point: 'Point3d') -> "void":
        return _openstudioutilitiesgeometry.BoundingBox_addPoint(self, point)

    def addPoints(self, points: 'Point3dVector') -> "void":
        return _openstudioutilitiesgeometry.BoundingBox_addPoints(self, points)

    def intersects(self, other: 'BoundingBox', tol: 'double'=0.001) -> "bool":
        return _openstudioutilitiesgeometry.BoundingBox_intersects(self, other, tol)

    def isEmpty(self) -> "bool":
        return _openstudioutilitiesgeometry.BoundingBox_isEmpty(self)

    def minX(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.BoundingBox_minX(self)

    def minY(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.BoundingBox_minY(self)

    def minZ(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.BoundingBox_minZ(self)

    def maxX(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.BoundingBox_maxX(self)

    def maxY(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.BoundingBox_maxY(self)

    def maxZ(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.BoundingBox_maxZ(self)

    def corners(self) -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
        return _openstudioutilitiesgeometry.BoundingBox_corners(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_BoundingBox
    __del__ = lambda self: None
BoundingBox_swigregister = _openstudioutilitiesgeometry.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

class IntersectionResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectionResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectionResult, name)
    __repr__ = _swig_repr

    def __init__(self, polygon1: 'Point3dVector', polygon2: 'Point3dVector', newPolygons1: 'Point3dVectorVector', newPolygons2: 'Point3dVectorVector'):
        this = _openstudioutilitiesgeometry.new_IntersectionResult(polygon1, polygon2, newPolygons1, newPolygons2)
        try:
            self.this.append(this)
        except:
            self.this = this

    def polygon1(self) -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
        return _openstudioutilitiesgeometry.IntersectionResult_polygon1(self)

    def polygon2(self) -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
        return _openstudioutilitiesgeometry.IntersectionResult_polygon2(self)

    def newPolygons1(self) -> "std::vector< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >,std::allocator< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > > > >":
        return _openstudioutilitiesgeometry.IntersectionResult_newPolygons1(self)

    def newPolygons2(self) -> "std::vector< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >,std::allocator< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > > > >":
        return _openstudioutilitiesgeometry.IntersectionResult_newPolygons2(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_IntersectionResult
    __del__ = lambda self: None
IntersectionResult_swigregister = _openstudioutilitiesgeometry.IntersectionResult_swigregister
IntersectionResult_swigregister(IntersectionResult)


def removeSpikes(polygon: 'Point3dVector', tol: 'double') -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
    return _openstudioutilitiesgeometry.removeSpikes(polygon, tol)
removeSpikes = _openstudioutilitiesgeometry.removeSpikes

def pointInPolygon(point: 'Point3d', polygon: 'Point3dVector', tol: 'double') -> "bool":
    return _openstudioutilitiesgeometry.pointInPolygon(point, polygon, tol)
pointInPolygon = _openstudioutilitiesgeometry.pointInPolygon

def join(polygon1: 'Point3dVector', polygon2: 'Point3dVector', tol: 'double') -> "boost::optional< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > > >":
    return _openstudioutilitiesgeometry.join(polygon1, polygon2, tol)
join = _openstudioutilitiesgeometry.join

def joinAll(polygons: 'Point3dVectorVector', tol: 'double') -> "std::vector< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >,std::allocator< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > > > >":
    return _openstudioutilitiesgeometry.joinAll(polygons, tol)
joinAll = _openstudioutilitiesgeometry.joinAll

def intersect(polygon1: 'Point3dVector', polygon2: 'Point3dVector', tol: 'double') -> "boost::optional< openstudio::IntersectionResult >":
    return _openstudioutilitiesgeometry.intersect(polygon1, polygon2, tol)
intersect = _openstudioutilitiesgeometry.intersect

def subtract(polygon: 'Point3dVector', holes: 'Point3dVectorVector', tol: 'double') -> "std::vector< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >,std::allocator< std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > > > >":
    return _openstudioutilitiesgeometry.subtract(polygon, holes, tol)
subtract = _openstudioutilitiesgeometry.subtract

def selfIntersects(polygon: 'Point3dVector', tol: 'double') -> "bool":
    return _openstudioutilitiesgeometry.selfIntersects(polygon, tol)
selfIntersects = _openstudioutilitiesgeometry.selfIntersects

def intersects(polygon1: 'Point3dVector', polygon2: 'Point3dVector', tol: 'double') -> "bool":
    return _openstudioutilitiesgeometry.intersects(polygon1, polygon2, tol)
intersects = _openstudioutilitiesgeometry.intersects

def within(*args) -> "bool":
    return _openstudioutilitiesgeometry.within(*args)
within = _openstudioutilitiesgeometry.within

def simplify(vertices: 'Point3dVector', removeCollinear: 'bool', tol: 'double') -> "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > >":
    return _openstudioutilitiesgeometry.simplify(vertices, removeCollinear, tol)
simplify = _openstudioutilitiesgeometry.simplify

_openstudioutilitiesgeometry.FrontSide_swigconstant(_openstudioutilitiesgeometry)
FrontSide = _openstudioutilitiesgeometry.FrontSide

_openstudioutilitiesgeometry.BackSide_swigconstant(_openstudioutilitiesgeometry)
BackSide = _openstudioutilitiesgeometry.BackSide

_openstudioutilitiesgeometry.DoubleSide_swigconstant(_openstudioutilitiesgeometry)
DoubleSide = _openstudioutilitiesgeometry.DoubleSide

def openstudioFaceFormatId() -> "unsigned int":
    return _openstudioutilitiesgeometry.openstudioFaceFormatId()
openstudioFaceFormatId = _openstudioutilitiesgeometry.openstudioFaceFormatId

def toThreeColor(*args) -> "unsigned int":
    return _openstudioutilitiesgeometry.toThreeColor(*args)
toThreeColor = _openstudioutilitiesgeometry.toThreeColor

def getObjectThreeMaterialName(iddObjectType: 'std::string const &', name: 'std::string const &') -> "std::string":
    return _openstudioutilitiesgeometry.getObjectThreeMaterialName(iddObjectType, name)
getObjectThreeMaterialName = _openstudioutilitiesgeometry.getObjectThreeMaterialName

def getSurfaceTypeThreeMaterialName(surfaceType: 'std::string const &') -> "std::string":
    return _openstudioutilitiesgeometry.getSurfaceTypeThreeMaterialName(surfaceType)
getSurfaceTypeThreeMaterialName = _openstudioutilitiesgeometry.getSurfaceTypeThreeMaterialName

def makeThreeMaterial(*args) -> "openstudio::ThreeMaterial":
    return _openstudioutilitiesgeometry.makeThreeMaterial(*args)
makeThreeMaterial = _openstudioutilitiesgeometry.makeThreeMaterial

def addThreeMaterial(materials: 'ThreeMaterialVector', materialMap: 'std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > &', material: 'ThreeMaterial') -> "void":
    return _openstudioutilitiesgeometry.addThreeMaterial(materials, materialMap, material)
addThreeMaterial = _openstudioutilitiesgeometry.addThreeMaterial

def getThreeMaterialId(materialName: 'std::string const &', materialMap: 'std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > &') -> "std::string":
    return _openstudioutilitiesgeometry.getThreeMaterialId(materialName, materialMap)
getThreeMaterialId = _openstudioutilitiesgeometry.getThreeMaterialId

def makeStandardThreeMaterials() -> "std::vector< openstudio::ThreeMaterial,std::allocator< openstudio::ThreeMaterial > >":
    return _openstudioutilitiesgeometry.makeStandardThreeMaterials()
makeStandardThreeMaterials = _openstudioutilitiesgeometry.makeStandardThreeMaterials

def toThreeUUID(uuid: 'std::string const &') -> "std::string":
    return _openstudioutilitiesgeometry.toThreeUUID(uuid)
toThreeUUID = _openstudioutilitiesgeometry.toThreeUUID

def fromThreeUUID(uuid: 'std::string const &') -> "std::string":
    return _openstudioutilitiesgeometry.fromThreeUUID(uuid)
fromThreeUUID = _openstudioutilitiesgeometry.fromThreeUUID

def toThreeVector(vertices: 'Point3dVector') -> "std::vector< double,std::allocator< double > >":
    return _openstudioutilitiesgeometry.toThreeVector(vertices)
toThreeVector = _openstudioutilitiesgeometry.toThreeVector

def fromThreeVector(vertices: 'DoubleVector') -> "openstudio::Point3dVector":
    return _openstudioutilitiesgeometry.fromThreeVector(vertices)
fromThreeVector = _openstudioutilitiesgeometry.fromThreeVector

def toThreeMatrix(*args) -> "openstudio::Transformation":
    return _openstudioutilitiesgeometry.toThreeMatrix(*args)
toThreeMatrix = _openstudioutilitiesgeometry.toThreeMatrix
class ThreeGeometryData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeGeometryData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeGeometryData, name)
    __repr__ = _swig_repr

    def __init__(self, vertices: 'DoubleVector', faces: 'std::vector< size_t,std::allocator< size_t > > const &'):
        this = _openstudioutilitiesgeometry.new_ThreeGeometryData(vertices, faces)
        try:
            self.this.append(this)
        except:
            self.this = this

    def vertices(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudioutilitiesgeometry.ThreeGeometryData_vertices(self)

    def normals(self) -> "std::vector< size_t,std::allocator< size_t > >":
        return _openstudioutilitiesgeometry.ThreeGeometryData_normals(self)

    def uvs(self) -> "std::vector< size_t,std::allocator< size_t > >":
        return _openstudioutilitiesgeometry.ThreeGeometryData_uvs(self)

    def faces(self) -> "std::vector< size_t,std::allocator< size_t > >":
        return _openstudioutilitiesgeometry.ThreeGeometryData_faces(self)

    def scale(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeGeometryData_scale(self)

    def visible(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeGeometryData_visible(self)

    def castShadow(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeGeometryData_castShadow(self)

    def receiveShadow(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeGeometryData_receiveShadow(self)

    def doubleSided(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeGeometryData_doubleSided(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeGeometryData
    __del__ = lambda self: None
ThreeGeometryData_swigregister = _openstudioutilitiesgeometry.ThreeGeometryData_swigregister
ThreeGeometryData_swigregister(ThreeGeometryData)

class ThreeGeometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, uuid: 'std::string const &', type: '::std::string const &', data: 'ThreeGeometryData'):
        this = _openstudioutilitiesgeometry.new_ThreeGeometry(uuid, type, data)
        try:
            self.this.append(this)
        except:
            self.this = this

    def uuid(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeGeometry_uuid(self)

    def type(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeGeometry_type(self)

    def data(self) -> "openstudio::ThreeGeometryData":
        return _openstudioutilitiesgeometry.ThreeGeometry_data(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeGeometry
    __del__ = lambda self: None
ThreeGeometry_swigregister = _openstudioutilitiesgeometry.ThreeGeometry_swigregister
ThreeGeometry_swigregister(ThreeGeometry)

class ThreeMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, uuid: 'std::string const &', name: 'std::string const &', type: '::std::string const &', color: 'unsigned int', ambient: 'unsigned int', emissive: 'unsigned int', specular: 'unsigned int', shininess: 'unsigned int', opacity: 'double', transparent: 'bool', wireframe: 'bool', side: 'unsigned int'):
        this = _openstudioutilitiesgeometry.new_ThreeMaterial(uuid, name, type, color, ambient, emissive, specular, shininess, opacity, transparent, wireframe, side)
        try:
            self.this.append(this)
        except:
            self.this = this

    def uuid(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeMaterial_uuid(self)

    def name(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeMaterial_name(self)

    def type(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeMaterial_type(self)

    def color(self) -> "unsigned int":
        return _openstudioutilitiesgeometry.ThreeMaterial_color(self)

    def ambient(self) -> "unsigned int":
        return _openstudioutilitiesgeometry.ThreeMaterial_ambient(self)

    def emissive(self) -> "unsigned int":
        return _openstudioutilitiesgeometry.ThreeMaterial_emissive(self)

    def specular(self) -> "unsigned int":
        return _openstudioutilitiesgeometry.ThreeMaterial_specular(self)

    def shininess(self) -> "unsigned int":
        return _openstudioutilitiesgeometry.ThreeMaterial_shininess(self)

    def opacity(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeMaterial_opacity(self)

    def transparent(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeMaterial_transparent(self)

    def wireframe(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeMaterial_wireframe(self)

    def side(self) -> "unsigned int":
        return _openstudioutilitiesgeometry.ThreeMaterial_side(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeMaterial
    __del__ = lambda self: None
ThreeMaterial_swigregister = _openstudioutilitiesgeometry.ThreeMaterial_swigregister
ThreeMaterial_swigregister(ThreeMaterial)

class ThreeUserData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeUserData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeUserData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudioutilitiesgeometry.new_ThreeUserData()
        try:
            self.this.append(this)
        except:
            self.this = this

    def handle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_handle(self)

    def name(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_name(self)

    def surfaceType(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_surfaceType(self)

    def surfaceTypeMaterialName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_surfaceTypeMaterialName(self)

    def constructionName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_constructionName(self)

    def constructionHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_constructionHandle(self)

    def constructionMaterialName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_constructionMaterialName(self)

    def surfaceName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_surfaceName(self)

    def surfaceHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_surfaceHandle(self)

    def subSurfaceName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_subSurfaceName(self)

    def subSurfaceHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_subSurfaceHandle(self)

    def spaceName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_spaceName(self)

    def spaceHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_spaceHandle(self)

    def shadingName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_shadingName(self)

    def shadingHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_shadingHandle(self)

    def thermalZoneName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_thermalZoneName(self)

    def thermalZoneHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_thermalZoneHandle(self)

    def thermalZoneMaterialName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_thermalZoneMaterialName(self)

    def spaceTypeName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_spaceTypeName(self)

    def spaceTypeHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_spaceTypeHandle(self)

    def spaceTypeMaterialName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_spaceTypeMaterialName(self)

    def buildingStoryName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_buildingStoryName(self)

    def buildingStoryHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_buildingStoryHandle(self)

    def buildingStoryMaterialName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_buildingStoryMaterialName(self)

    def buildingUnitName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_buildingUnitName(self)

    def buildingUnitHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_buildingUnitHandle(self)

    def buildingUnitMaterialName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_buildingUnitMaterialName(self)

    def constructionSetName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_constructionSetName(self)

    def constructionSetHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_constructionSetHandle(self)

    def constructionSetMaterialName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_constructionSetMaterialName(self)

    def outsideBoundaryCondition(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_outsideBoundaryCondition(self)

    def outsideBoundaryConditionObjectName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_outsideBoundaryConditionObjectName(self)

    def outsideBoundaryConditionObjectHandle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_outsideBoundaryConditionObjectHandle(self)

    def boundaryMaterialName(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_boundaryMaterialName(self)

    def coincidentWithOutsideObject(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeUserData_coincidentWithOutsideObject(self)

    def sunExposure(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_sunExposure(self)

    def windExposure(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeUserData_windExposure(self)

    def illuminanceSetpoint(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeUserData_illuminanceSetpoint(self)

    def airWall(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeUserData_airWall(self)

    def setHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setHandle(self, s)

    def setName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setName(self, s)

    def setSurfaceType(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSurfaceType(self, s)

    def setSurfaceTypeMaterialName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSurfaceTypeMaterialName(self, s)

    def setConstructionName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setConstructionName(self, s)

    def setConstructionHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setConstructionHandle(self, s)

    def setConstructionMaterialName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setConstructionMaterialName(self, s)

    def setSurfaceName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSurfaceName(self, s)

    def setSurfaceHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSurfaceHandle(self, s)

    def setSubSurfaceName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSubSurfaceName(self, s)

    def setSubSurfaceHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSubSurfaceHandle(self, s)

    def setSpaceName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSpaceName(self, s)

    def setSpaceHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSpaceHandle(self, s)

    def setShadingName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setShadingName(self, s)

    def setShadingHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setShadingHandle(self, s)

    def setThermalZoneName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setThermalZoneName(self, s)

    def setThermalZoneHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setThermalZoneHandle(self, s)

    def setThermalZoneMaterialName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setThermalZoneMaterialName(self, s)

    def setSpaceTypeName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSpaceTypeName(self, s)

    def setSpaceTypeHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSpaceTypeHandle(self, s)

    def setSpaceTypeMaterialName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSpaceTypeMaterialName(self, s)

    def setBuildingStoryName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setBuildingStoryName(self, s)

    def setBuildingStoryHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setBuildingStoryHandle(self, s)

    def setBuildingStoryMaterialName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setBuildingStoryMaterialName(self, s)

    def setBuildingUnitName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setBuildingUnitName(self, s)

    def setBuildingUnitHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setBuildingUnitHandle(self, s)

    def setBuildingUnitMaterialName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setBuildingUnitMaterialName(self, s)

    def setConstructionSetName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setConstructionSetName(self, s)

    def setConstructionSetHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setConstructionSetHandle(self, s)

    def setConstructionSetMaterialName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setConstructionSetMaterialName(self, s)

    def setOutsideBoundaryCondition(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setOutsideBoundaryCondition(self, s)

    def setOutsideBoundaryConditionObjectName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setOutsideBoundaryConditionObjectName(self, s)

    def setOutsideBoundaryConditionObjectHandle(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setOutsideBoundaryConditionObjectHandle(self, s)

    def setBoundaryMaterialName(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setBoundaryMaterialName(self, s)

    def setCoincidentWithOutsideObject(self, b: 'bool') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setCoincidentWithOutsideObject(self, b)

    def setSunExposure(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setSunExposure(self, s)

    def setWindExposure(self, s: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setWindExposure(self, s)

    def setIlluminanceSetpoint(self, d: 'double') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setIlluminanceSetpoint(self, d)

    def setAirWall(self, b: 'bool') -> "void":
        return _openstudioutilitiesgeometry.ThreeUserData_setAirWall(self, b)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeUserData
    __del__ = lambda self: None
ThreeUserData_swigregister = _openstudioutilitiesgeometry.ThreeUserData_swigregister
ThreeUserData_swigregister(ThreeUserData)

class ThreeSceneChild(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeSceneChild, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeSceneChild, name)
    __repr__ = _swig_repr

    def __init__(self, uuid: 'std::string const &', name: 'std::string const &', type: 'std::string const &', geometryId: 'std::string const &', materialId: 'std::string const &', userData: 'ThreeUserData'):
        this = _openstudioutilitiesgeometry.new_ThreeSceneChild(uuid, name, type, geometryId, materialId, userData)
        try:
            self.this.append(this)
        except:
            self.this = this

    def uuid(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneChild_uuid(self)

    def name(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneChild_name(self)

    def type(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneChild_type(self)

    def geometry(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneChild_geometry(self)

    def material(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneChild_material(self)

    def matrix(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudioutilitiesgeometry.ThreeSceneChild_matrix(self)

    def userData(self) -> "openstudio::ThreeUserData":
        return _openstudioutilitiesgeometry.ThreeSceneChild_userData(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeSceneChild
    __del__ = lambda self: None
ThreeSceneChild_swigregister = _openstudioutilitiesgeometry.ThreeSceneChild_swigregister
ThreeSceneChild_swigregister(ThreeSceneChild)

class ThreeSceneObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeSceneObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeSceneObject, name)
    __repr__ = _swig_repr

    def __init__(self, uuid: 'std::string const &', children: 'ThreeSceneChildVector'):
        this = _openstudioutilitiesgeometry.new_ThreeSceneObject(uuid, children)
        try:
            self.this.append(this)
        except:
            self.this = this

    def uuid(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneObject_uuid(self)

    def type(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneObject_type(self)

    def matrix(self) -> "std::vector< double,std::allocator< double > >":
        return _openstudioutilitiesgeometry.ThreeSceneObject_matrix(self)

    def children(self) -> "std::vector< openstudio::ThreeSceneChild,std::allocator< openstudio::ThreeSceneChild > >":
        return _openstudioutilitiesgeometry.ThreeSceneObject_children(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeSceneObject
    __del__ = lambda self: None
ThreeSceneObject_swigregister = _openstudioutilitiesgeometry.ThreeSceneObject_swigregister
ThreeSceneObject_swigregister(ThreeSceneObject)

class ThreeBoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeBoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeBoundingBox, name)
    __repr__ = _swig_repr

    def __init__(self, minX: 'double', minY: 'double', minZ: 'double', maxX: 'double', maxY: 'double', maxZ: 'double', lookAtX: 'double', lookAtY: 'double', lookAtZ: 'double', lookAtR: 'double'):
        this = _openstudioutilitiesgeometry.new_ThreeBoundingBox(minX, minY, minZ, maxX, maxY, maxZ, lookAtX, lookAtY, lookAtZ, lookAtR)
        try:
            self.this.append(this)
        except:
            self.this = this

    def minX(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_minX(self)

    def minY(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_minY(self)

    def minZ(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_minZ(self)

    def maxX(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_maxX(self)

    def maxY(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_maxY(self)

    def maxZ(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_maxZ(self)

    def lookAtX(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_lookAtX(self)

    def lookAtY(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_lookAtY(self)

    def lookAtZ(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_lookAtZ(self)

    def lookAtR(self) -> "double":
        return _openstudioutilitiesgeometry.ThreeBoundingBox_lookAtR(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeBoundingBox
    __del__ = lambda self: None
ThreeBoundingBox_swigregister = _openstudioutilitiesgeometry.ThreeBoundingBox_swigregister
ThreeBoundingBox_swigregister(ThreeBoundingBox)

class ThreeModelObjectMetadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeModelObjectMetadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeModelObjectMetadata, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_ThreeModelObjectMetadata(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def iddObjectType(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_iddObjectType(self)

    def handle(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_handle(self)

    def name(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_name(self)

    def color(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_color(self)

    def setColor(self, c: 'std::string const &') -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_setColor(self, c)

    def resetColor(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_resetColor(self)

    def openToBelow(self) -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_openToBelow(self)

    def setOpenToBelow(self, t: 'bool') -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_setOpenToBelow(self, t)

    def resetOpenToBelow(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_resetOpenToBelow(self)

    def multiplier(self) -> "boost::optional< unsigned int >":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_multiplier(self)

    def setMultiplier(self, mult: 'unsigned int') -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_setMultiplier(self, mult)

    def resetMultiplier(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_resetMultiplier(self)

    def nominalZCoordinate(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_nominalZCoordinate(self)

    def setNominalZCoordinate(self, z: 'double') -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_setNominalZCoordinate(self, z)

    def resetNominalZCoordinate(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_resetNominalZCoordinate(self)

    def belowFloorPlenumHeight(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_belowFloorPlenumHeight(self)

    def setBelowFloorPlenumHeight(self, height: 'double') -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_setBelowFloorPlenumHeight(self, height)

    def resetBelowFloorPlenumHeight(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_resetBelowFloorPlenumHeight(self)

    def floorToCeilingHeight(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_floorToCeilingHeight(self)

    def setFloorToCeilingHeight(self, height: 'double') -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_setFloorToCeilingHeight(self, height)

    def resetFloorToCeilingHeight(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_resetFloorToCeilingHeight(self)

    def aboveCeilingPlenumHeight(self) -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_aboveCeilingPlenumHeight(self)

    def setAboveCeilingPlenumHeight(self, height: 'double') -> "bool":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_setAboveCeilingPlenumHeight(self, height)

    def resetAboveCeilingPlenumHeight(self) -> "void":
        return _openstudioutilitiesgeometry.ThreeModelObjectMetadata_resetAboveCeilingPlenumHeight(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeModelObjectMetadata
    __del__ = lambda self: None
ThreeModelObjectMetadata_swigregister = _openstudioutilitiesgeometry.ThreeModelObjectMetadata_swigregister
ThreeModelObjectMetadata_swigregister(ThreeModelObjectMetadata)

class ThreeSceneMetadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeSceneMetadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeSceneMetadata, name)
    __repr__ = _swig_repr

    def __init__(self, buildingStoryNames: 'StringVector', boundingBox: 'ThreeBoundingBox', modelObjectMetadata: 'ThreeModelObjectMetadataVector'):
        this = _openstudioutilitiesgeometry.new_ThreeSceneMetadata(buildingStoryNames, boundingBox, modelObjectMetadata)
        try:
            self.this.append(this)
        except:
            self.this = this

    def version(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneMetadata_version(self)

    def type(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneMetadata_type(self)

    def generator(self) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeSceneMetadata_generator(self)

    def buildingStoryNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesgeometry.ThreeSceneMetadata_buildingStoryNames(self)

    def boundingBox(self) -> "openstudio::ThreeBoundingBox":
        return _openstudioutilitiesgeometry.ThreeSceneMetadata_boundingBox(self)

    def modelObjectMetadata(self) -> "std::vector< openstudio::ThreeModelObjectMetadata,std::allocator< openstudio::ThreeModelObjectMetadata > >":
        return _openstudioutilitiesgeometry.ThreeSceneMetadata_modelObjectMetadata(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeSceneMetadata
    __del__ = lambda self: None
ThreeSceneMetadata_swigregister = _openstudioutilitiesgeometry.ThreeSceneMetadata_swigregister
ThreeSceneMetadata_swigregister(ThreeSceneMetadata)

class ThreeScene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeScene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeScene, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_ThreeScene(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesgeometry.ThreeScene_load
    if _newclass:
        load = staticmethod(_openstudioutilitiesgeometry.ThreeScene_load)

    def toJSON(self, prettyPrint: 'bool'=False) -> "std::string":
        return _openstudioutilitiesgeometry.ThreeScene_toJSON(self, prettyPrint)

    def metadata(self) -> "openstudio::ThreeSceneMetadata":
        return _openstudioutilitiesgeometry.ThreeScene_metadata(self)

    def geometries(self) -> "std::vector< openstudio::ThreeGeometry,std::allocator< openstudio::ThreeGeometry > >":
        return _openstudioutilitiesgeometry.ThreeScene_geometries(self)

    def getGeometry(self, geometryId: 'std::string const &') -> "boost::optional< openstudio::ThreeGeometry >":
        return _openstudioutilitiesgeometry.ThreeScene_getGeometry(self, geometryId)

    def materials(self) -> "std::vector< openstudio::ThreeMaterial,std::allocator< openstudio::ThreeMaterial > >":
        return _openstudioutilitiesgeometry.ThreeScene_materials(self)

    def getMaterial(self, materialId: 'std::string const &') -> "boost::optional< openstudio::ThreeMaterial >":
        return _openstudioutilitiesgeometry.ThreeScene_getMaterial(self, materialId)

    def object(self) -> "openstudio::ThreeSceneObject":
        return _openstudioutilitiesgeometry.ThreeScene_object(self)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_ThreeScene
    __del__ = lambda self: None
ThreeScene_swigregister = _openstudioutilitiesgeometry.ThreeScene_swigregister
ThreeScene_swigregister(ThreeScene)

def ThreeScene_load(json: 'std::string const &') -> "boost::optional< openstudio::ThreeScene >":
    return _openstudioutilitiesgeometry.ThreeScene_load(json)
ThreeScene_load = _openstudioutilitiesgeometry.ThreeScene_load

class FloorplanObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloorplanObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloorplanObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_FloorplanObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def id(self) -> "std::string":
        return _openstudioutilitiesgeometry.FloorplanObject_id(self)

    def name(self) -> "std::string":
        return _openstudioutilitiesgeometry.FloorplanObject_name(self)

    def handle(self) -> "openstudio::UUID":
        return _openstudioutilitiesgeometry.FloorplanObject_handle(self)

    def handleString(self) -> "std::string":
        return _openstudioutilitiesgeometry.FloorplanObject_handleString(self)

    def parentHandleString(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesgeometry.FloorplanObject_parentHandleString(self)

    def setParentHandleString(self, parentHandleString: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.FloorplanObject_setParentHandleString(self, parentHandleString)

    def resetParentHandleString(self) -> "void":
        return _openstudioutilitiesgeometry.FloorplanObject_resetParentHandleString(self)

    def getDataDouble(self, key: 'std::string const &') -> "boost::optional< double >":
        return _openstudioutilitiesgeometry.FloorplanObject_getDataDouble(self, key)

    def getDataInt(self, key: 'std::string const &') -> "boost::optional< int >":
        return _openstudioutilitiesgeometry.FloorplanObject_getDataInt(self, key)

    def getDataBool(self, key: 'std::string const &') -> "boost::optional< bool >":
        return _openstudioutilitiesgeometry.FloorplanObject_getDataBool(self, key)

    def getDataString(self, key: 'std::string const &') -> "boost::optional< std::string >":
        return _openstudioutilitiesgeometry.FloorplanObject_getDataString(self, key)

    def getDataReference(self, key: 'std::string const &') -> "boost::optional< openstudio::FloorplanObject >":
        return _openstudioutilitiesgeometry.FloorplanObject_getDataReference(self, key)

    def setDataDouble(self, key: 'std::string const &', value: 'double') -> "void":
        return _openstudioutilitiesgeometry.FloorplanObject_setDataDouble(self, key, value)

    def setDataInt(self, key: 'std::string const &', value: 'int') -> "void":
        return _openstudioutilitiesgeometry.FloorplanObject_setDataInt(self, key, value)

    def setDataBool(self, key: 'std::string const &', value: 'bool') -> "void":
        return _openstudioutilitiesgeometry.FloorplanObject_setDataBool(self, key, value)

    def setDataString(self, key: 'std::string const &', value: 'std::string const &') -> "void":
        return _openstudioutilitiesgeometry.FloorplanObject_setDataString(self, key, value)

    def setDataReference(self, key: 'std::string const &', value: 'FloorplanObject') -> "void":
        return _openstudioutilitiesgeometry.FloorplanObject_setDataReference(self, key, value)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_FloorplanObject
    __del__ = lambda self: None
FloorplanObject_swigregister = _openstudioutilitiesgeometry.FloorplanObject_swigregister
FloorplanObject_swigregister(FloorplanObject)

class FloorplanJS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloorplanJS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloorplanJS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesgeometry.new_FloorplanJS(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesgeometry.FloorplanJS_load
    if _newclass:
        load = staticmethod(_openstudioutilitiesgeometry.FloorplanJS_load)

    def toJSON(self, prettyPrint: 'bool'=False) -> "std::string":
        return _openstudioutilitiesgeometry.FloorplanJS_toJSON(self, prettyPrint)

    def toThreeScene(self, openstudioFormat: 'bool') -> "openstudio::ThreeScene":
        return _openstudioutilitiesgeometry.FloorplanJS_toThreeScene(self, openstudioFormat)

    def units(self) -> "std::string":
        return _openstudioutilitiesgeometry.FloorplanJS_units(self)

    def setUnits(self, units: 'std::string const &') -> "bool":
        return _openstudioutilitiesgeometry.FloorplanJS_setUnits(self, units)

    def resetUnits(self) -> "void":
        return _openstudioutilitiesgeometry.FloorplanJS_resetUnits(self)

    def northAxis(self) -> "double":
        return _openstudioutilitiesgeometry.FloorplanJS_northAxis(self)

    def setNorthAxis(self, northAxis: 'double') -> "bool":
        return _openstudioutilitiesgeometry.FloorplanJS_setNorthAxis(self, northAxis)

    def resetNorthAxis(self) -> "void":
        return _openstudioutilitiesgeometry.FloorplanJS_resetNorthAxis(self)

    def updateStories(self, objects: 'std::vector< openstudio::FloorplanObject,std::allocator< openstudio::FloorplanObject > > const &', removeMissingObjects: 'bool') -> "void":
        return _openstudioutilitiesgeometry.FloorplanJS_updateStories(self, objects, removeMissingObjects)

    def updateSpaces(self, objects: 'std::vector< openstudio::FloorplanObject,std::allocator< openstudio::FloorplanObject > > const &', removeMissingObjects: 'bool') -> "void":
        return _openstudioutilitiesgeometry.FloorplanJS_updateSpaces(self, objects, removeMissingObjects)

    def updateBuildingUnits(self, objects: 'std::vector< openstudio::FloorplanObject,std::allocator< openstudio::FloorplanObject > > const &', removeMissingObjects: 'bool') -> "void":
        return _openstudioutilitiesgeometry.FloorplanJS_updateBuildingUnits(self, objects, removeMissingObjects)

    def updateThermalZones(self, objects: 'std::vector< openstudio::FloorplanObject,std::allocator< openstudio::FloorplanObject > > const &', removeMissingObjects: 'bool') -> "void":
        return _openstudioutilitiesgeometry.FloorplanJS_updateThermalZones(self, objects, removeMissingObjects)

    def updateSpaceTypes(self, objects: 'std::vector< openstudio::FloorplanObject,std::allocator< openstudio::FloorplanObject > > const &', removeMissingObjects: 'bool') -> "void":
        return _openstudioutilitiesgeometry.FloorplanJS_updateSpaceTypes(self, objects, removeMissingObjects)

    def updateConstructionSets(self, objects: 'std::vector< openstudio::FloorplanObject,std::allocator< openstudio::FloorplanObject > > const &', removeMissingObjects: 'bool') -> "void":
        return _openstudioutilitiesgeometry.FloorplanJS_updateConstructionSets(self, objects, removeMissingObjects)
    __swig_destroy__ = _openstudioutilitiesgeometry.delete_FloorplanJS
    __del__ = lambda self: None
FloorplanJS_swigregister = _openstudioutilitiesgeometry.FloorplanJS_swigregister
FloorplanJS_swigregister(FloorplanJS)

def FloorplanJS_load(json: 'std::string const &') -> "boost::optional< openstudio::FloorplanJS >":
    return _openstudioutilitiesgeometry.FloorplanJS_load(json)
FloorplanJS_load = _openstudioutilitiesgeometry.FloorplanJS_load


def floorplanToThreeJS(json: 'std::string const &', openstudioFormat: 'bool') -> "std::string":
    return _openstudioutilitiesgeometry.floorplanToThreeJS(json, openstudioFormat)
floorplanToThreeJS = _openstudioutilitiesgeometry.floorplanToThreeJS
# This file is compatible with both classic and new-style classes.


