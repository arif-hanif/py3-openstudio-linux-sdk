# This file was automatically generated by SWIG (http://www.swig.org).

# Version 3.0.7

#

# Do not make changes to this file unless you know what you are doing--modify

# the SWIG interface file instead.











from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():

        from os.path import dirname

        import imp

        fp = None

        try:

            fp, pathname, description = imp.find_module('_openstudioutilitiescore', [dirname(__file__)])

        except ImportError:

            import _openstudioutilitiescore

            return _openstudioutilitiescore

        if fp is not None:

            try:

                _mod = imp.load_module('_openstudioutilitiescore', fp, pathname, description)

            finally:

                fp.close()

            return _mod

    _openstudioutilitiescore = swig_import_helper()

    del swig_import_helper

else:

    import _openstudioutilitiescore

del version_info

try:

    _swig_property = property

except NameError:

    pass  # Python < 2.2 doesn't have 'property'.





def _swig_setattr_nondynamic(self, class_type, name, value, static=1):

    if (name == "thisown"):

        return self.this.own(value)

    if (name == "this"):

        if type(value).__name__ == 'SwigPyObject':

            self.__dict__[name] = value

            return

    method = class_type.__swig_setmethods__.get(name, None)

    if method:

        return method(self, value)

    if (not static):

        if _newclass:

            object.__setattr__(self, name, value)

        else:

            self.__dict__[name] = value

    else:

        raise AttributeError("You cannot add attributes to %s" % self)





def _swig_setattr(self, class_type, name, value):

    return _swig_setattr_nondynamic(self, class_type, name, value, 0)





def _swig_getattr_nondynamic(self, class_type, name, static=1):

    if (name == "thisown"):

        return self.this.own()

    method = class_type.__swig_getmethods__.get(name, None)

    if method:

        return method(self)

    if (not static):

        return object.__getattr__(self, name)

    else:

        raise AttributeError(name)



def _swig_getattr(self, class_type, name):

    return _swig_getattr_nondynamic(self, class_type, name, 0)





def _swig_repr(self):

    try:

        strthis = "proxy of " + self.this.__repr__()

    except:

        strthis = ""

    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)



try:

    _object = object

    _newclass = 1

except AttributeError:

    class _object:

        pass

    _newclass = 0





try:

    import weakref

    weakref_proxy = weakref.proxy

except:

    weakref_proxy = lambda x: x





class SwigPyIterator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_SwigPyIterator

    __del__ = lambda self: None



    def value(self) -> "PyObject *":

        return _openstudioutilitiescore.SwigPyIterator_value(self)



    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.SwigPyIterator_incr(self, n)



    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.SwigPyIterator_decr(self, n)



    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":

        return _openstudioutilitiescore.SwigPyIterator_distance(self, x)



    def equal(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiescore.SwigPyIterator_equal(self, x)



    def copy(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.SwigPyIterator_copy(self)



    def next(self) -> "PyObject *":

        return _openstudioutilitiescore.SwigPyIterator_next(self)



    def __next__(self) -> "PyObject *":

        return _openstudioutilitiescore.SwigPyIterator___next__(self)



    def previous(self) -> "PyObject *":

        return _openstudioutilitiescore.SwigPyIterator_previous(self)



    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.SwigPyIterator_advance(self, n)



    def __eq__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiescore.SwigPyIterator___eq__(self, x)



    def __ne__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioutilitiescore.SwigPyIterator___ne__(self, x)



    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiescore.SwigPyIterator___iadd__(self, n)



    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioutilitiescore.SwigPyIterator___isub__(self, n)



    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.SwigPyIterator___add__(self, n)



    def __sub__(self, *args) -> "ptrdiff_t":

        return _openstudioutilitiescore.SwigPyIterator___sub__(self, *args)

    def __iter__(self):

        return self

SwigPyIterator_swigregister = _openstudioutilitiescore.SwigPyIterator_swigregister

SwigPyIterator_swigregister(SwigPyIterator)





_openstudioutilitiescore.SHARED_PTR_DISOWN_swigconstant(_openstudioutilitiescore)

SHARED_PTR_DISOWN = _openstudioutilitiescore.SHARED_PTR_DISOWN



def throwException() -> "void":

    return _openstudioutilitiescore.throwException()

throwException = _openstudioutilitiescore.throwException

class Exception(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_Exception(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_Exception

    __del__ = lambda self: None



    def message(self) -> "std::string const &":

        return _openstudioutilitiescore.Exception_message(self)



    def what(self) -> "char const *":

        return _openstudioutilitiescore.Exception_what(self)

Exception_swigregister = _openstudioutilitiescore.Exception_swigregister

Exception_swigregister(Exception)





def eraseEmptyElements(sv: 'StringVector') -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudioutilitiescore.eraseEmptyElements(sv)

eraseEmptyElements = _openstudioutilitiescore.eraseEmptyElements

class BoolVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.BoolVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.BoolVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.BoolVector___bool__(self)



    def __len__(self) -> "std::vector< bool >::size_type":

        return _openstudioutilitiescore.BoolVector___len__(self)



    def pop(self) -> "std::vector< bool >::value_type":

        return _openstudioutilitiescore.BoolVector_pop(self)



    def __getslice__(self, i: 'std::vector< bool >::difference_type', j: 'std::vector< bool >::difference_type') -> "std::vector< bool,std::allocator< bool > > *":

        return _openstudioutilitiescore.BoolVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.BoolVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< bool >::difference_type', j: 'std::vector< bool >::difference_type') -> "void":

        return _openstudioutilitiescore.BoolVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.BoolVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< bool >::value_type":

        return _openstudioutilitiescore.BoolVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.BoolVector___setitem__(self, *args)



    def append(self, x: 'std::vector< bool >::value_type') -> "void":

        return _openstudioutilitiescore.BoolVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.BoolVector_empty(self)



    def size(self) -> "std::vector< bool >::size_type":

        return _openstudioutilitiescore.BoolVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.BoolVector_clear(self)



    def swap(self, v: 'BoolVector') -> "void":

        return _openstudioutilitiescore.BoolVector_swap(self, v)



    def get_allocator(self) -> "std::vector< bool >::allocator_type":

        return _openstudioutilitiescore.BoolVector_get_allocator(self)



    def begin(self) -> "std::vector< bool >::iterator":

        return _openstudioutilitiescore.BoolVector_begin(self)



    def end(self) -> "std::vector< bool >::iterator":

        return _openstudioutilitiescore.BoolVector_end(self)



    def rbegin(self) -> "std::vector< bool >::reverse_iterator":

        return _openstudioutilitiescore.BoolVector_rbegin(self)



    def rend(self) -> "std::vector< bool >::reverse_iterator":

        return _openstudioutilitiescore.BoolVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.BoolVector_pop_back(self)



    def erase(self, *args) -> "std::vector< bool >::iterator":

        return _openstudioutilitiescore.BoolVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_BoolVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'std::vector< bool >::value_type') -> "void":

        return _openstudioutilitiescore.BoolVector_push_back(self, x)



    def front(self) -> "std::vector< bool >::value_type":

        return _openstudioutilitiescore.BoolVector_front(self)



    def back(self) -> "std::vector< bool >::value_type":

        return _openstudioutilitiescore.BoolVector_back(self)



    def assign(self, n: 'std::vector< bool >::size_type', x: 'std::vector< bool >::value_type') -> "void":

        return _openstudioutilitiescore.BoolVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.BoolVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.BoolVector_insert(self, *args)



    def reserve(self, n: 'std::vector< bool >::size_type') -> "void":

        return _openstudioutilitiescore.BoolVector_reserve(self, n)



    def capacity(self) -> "std::vector< bool >::size_type":

        return _openstudioutilitiescore.BoolVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_BoolVector

    __del__ = lambda self: None

BoolVector_swigregister = _openstudioutilitiescore.BoolVector_swigregister

BoolVector_swigregister(BoolVector)



class UnsignedVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.UnsignedVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.UnsignedVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.UnsignedVector___bool__(self)



    def __len__(self) -> "std::vector< unsigned int >::size_type":

        return _openstudioutilitiescore.UnsignedVector___len__(self)



    def pop(self) -> "std::vector< unsigned int >::value_type":

        return _openstudioutilitiescore.UnsignedVector_pop(self)



    def __getslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "std::vector< unsigned int,std::allocator< unsigned int > > *":

        return _openstudioutilitiescore.UnsignedVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.UnsignedVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "void":

        return _openstudioutilitiescore.UnsignedVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.UnsignedVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":

        return _openstudioutilitiescore.UnsignedVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.UnsignedVector___setitem__(self, *args)



    def append(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":

        return _openstudioutilitiescore.UnsignedVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.UnsignedVector_empty(self)



    def size(self) -> "std::vector< unsigned int >::size_type":

        return _openstudioutilitiescore.UnsignedVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.UnsignedVector_clear(self)



    def swap(self, v: 'UnsignedVector') -> "void":

        return _openstudioutilitiescore.UnsignedVector_swap(self, v)



    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":

        return _openstudioutilitiescore.UnsignedVector_get_allocator(self)



    def begin(self) -> "std::vector< unsigned int >::iterator":

        return _openstudioutilitiescore.UnsignedVector_begin(self)



    def end(self) -> "std::vector< unsigned int >::iterator":

        return _openstudioutilitiescore.UnsignedVector_end(self)



    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":

        return _openstudioutilitiescore.UnsignedVector_rbegin(self)



    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":

        return _openstudioutilitiescore.UnsignedVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.UnsignedVector_pop_back(self)



    def erase(self, *args) -> "std::vector< unsigned int >::iterator":

        return _openstudioutilitiescore.UnsignedVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_UnsignedVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":

        return _openstudioutilitiescore.UnsignedVector_push_back(self, x)



    def front(self) -> "std::vector< unsigned int >::value_type const &":

        return _openstudioutilitiescore.UnsignedVector_front(self)



    def back(self) -> "std::vector< unsigned int >::value_type const &":

        return _openstudioutilitiescore.UnsignedVector_back(self)



    def assign(self, n: 'std::vector< unsigned int >::size_type', x: 'std::vector< unsigned int >::value_type const &') -> "void":

        return _openstudioutilitiescore.UnsignedVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.UnsignedVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.UnsignedVector_insert(self, *args)



    def reserve(self, n: 'std::vector< unsigned int >::size_type') -> "void":

        return _openstudioutilitiescore.UnsignedVector_reserve(self, n)



    def capacity(self) -> "std::vector< unsigned int >::size_type":

        return _openstudioutilitiescore.UnsignedVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_UnsignedVector

    __del__ = lambda self: None

UnsignedVector_swigregister = _openstudioutilitiescore.UnsignedVector_swigregister

UnsignedVector_swigregister(UnsignedVector)



class IntVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.IntVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.IntVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.IntVector___bool__(self)



    def __len__(self) -> "std::vector< int >::size_type":

        return _openstudioutilitiescore.IntVector___len__(self)



    def pop(self) -> "std::vector< int >::value_type":

        return _openstudioutilitiescore.IntVector_pop(self)



    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":

        return _openstudioutilitiescore.IntVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.IntVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":

        return _openstudioutilitiescore.IntVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.IntVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":

        return _openstudioutilitiescore.IntVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.IntVector___setitem__(self, *args)



    def append(self, x: 'std::vector< int >::value_type const &') -> "void":

        return _openstudioutilitiescore.IntVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.IntVector_empty(self)



    def size(self) -> "std::vector< int >::size_type":

        return _openstudioutilitiescore.IntVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.IntVector_clear(self)



    def swap(self, v: 'IntVector') -> "void":

        return _openstudioutilitiescore.IntVector_swap(self, v)



    def get_allocator(self) -> "std::vector< int >::allocator_type":

        return _openstudioutilitiescore.IntVector_get_allocator(self)



    def begin(self) -> "std::vector< int >::iterator":

        return _openstudioutilitiescore.IntVector_begin(self)



    def end(self) -> "std::vector< int >::iterator":

        return _openstudioutilitiescore.IntVector_end(self)



    def rbegin(self) -> "std::vector< int >::reverse_iterator":

        return _openstudioutilitiescore.IntVector_rbegin(self)



    def rend(self) -> "std::vector< int >::reverse_iterator":

        return _openstudioutilitiescore.IntVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.IntVector_pop_back(self)



    def erase(self, *args) -> "std::vector< int >::iterator":

        return _openstudioutilitiescore.IntVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_IntVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":

        return _openstudioutilitiescore.IntVector_push_back(self, x)



    def front(self) -> "std::vector< int >::value_type const &":

        return _openstudioutilitiescore.IntVector_front(self)



    def back(self) -> "std::vector< int >::value_type const &":

        return _openstudioutilitiescore.IntVector_back(self)



    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":

        return _openstudioutilitiescore.IntVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.IntVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.IntVector_insert(self, *args)



    def reserve(self, n: 'std::vector< int >::size_type') -> "void":

        return _openstudioutilitiescore.IntVector_reserve(self, n)



    def capacity(self) -> "std::vector< int >::size_type":

        return _openstudioutilitiescore.IntVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_IntVector

    __del__ = lambda self: None

IntVector_swigregister = _openstudioutilitiescore.IntVector_swigregister

IntVector_swigregister(IntVector)



class LongVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.LongVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.LongVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.LongVector___bool__(self)



    def __len__(self) -> "std::vector< long >::size_type":

        return _openstudioutilitiescore.LongVector___len__(self)



    def pop(self) -> "std::vector< long >::value_type":

        return _openstudioutilitiescore.LongVector_pop(self)



    def __getslice__(self, i: 'std::vector< long >::difference_type', j: 'std::vector< long >::difference_type') -> "std::vector< long,std::allocator< long > > *":

        return _openstudioutilitiescore.LongVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.LongVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< long >::difference_type', j: 'std::vector< long >::difference_type') -> "void":

        return _openstudioutilitiescore.LongVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.LongVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< long >::value_type const &":

        return _openstudioutilitiescore.LongVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.LongVector___setitem__(self, *args)



    def append(self, x: 'std::vector< long >::value_type const &') -> "void":

        return _openstudioutilitiescore.LongVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.LongVector_empty(self)



    def size(self) -> "std::vector< long >::size_type":

        return _openstudioutilitiescore.LongVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.LongVector_clear(self)



    def swap(self, v: 'LongVector') -> "void":

        return _openstudioutilitiescore.LongVector_swap(self, v)



    def get_allocator(self) -> "std::vector< long >::allocator_type":

        return _openstudioutilitiescore.LongVector_get_allocator(self)



    def begin(self) -> "std::vector< long >::iterator":

        return _openstudioutilitiescore.LongVector_begin(self)



    def end(self) -> "std::vector< long >::iterator":

        return _openstudioutilitiescore.LongVector_end(self)



    def rbegin(self) -> "std::vector< long >::reverse_iterator":

        return _openstudioutilitiescore.LongVector_rbegin(self)



    def rend(self) -> "std::vector< long >::reverse_iterator":

        return _openstudioutilitiescore.LongVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.LongVector_pop_back(self)



    def erase(self, *args) -> "std::vector< long >::iterator":

        return _openstudioutilitiescore.LongVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_LongVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'std::vector< long >::value_type const &') -> "void":

        return _openstudioutilitiescore.LongVector_push_back(self, x)



    def front(self) -> "std::vector< long >::value_type const &":

        return _openstudioutilitiescore.LongVector_front(self)



    def back(self) -> "std::vector< long >::value_type const &":

        return _openstudioutilitiescore.LongVector_back(self)



    def assign(self, n: 'std::vector< long >::size_type', x: 'std::vector< long >::value_type const &') -> "void":

        return _openstudioutilitiescore.LongVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.LongVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.LongVector_insert(self, *args)



    def reserve(self, n: 'std::vector< long >::size_type') -> "void":

        return _openstudioutilitiescore.LongVector_reserve(self, n)



    def capacity(self) -> "std::vector< long >::size_type":

        return _openstudioutilitiescore.LongVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_LongVector

    __del__ = lambda self: None

LongVector_swigregister = _openstudioutilitiescore.LongVector_swigregister

LongVector_swigregister(LongVector)



class DoubleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.DoubleVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.DoubleVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.DoubleVector___bool__(self)



    def __len__(self) -> "std::vector< double >::size_type":

        return _openstudioutilitiescore.DoubleVector___len__(self)



    def pop(self) -> "std::vector< double >::value_type":

        return _openstudioutilitiescore.DoubleVector_pop(self)



    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":

        return _openstudioutilitiescore.DoubleVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.DoubleVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":

        return _openstudioutilitiescore.DoubleVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.DoubleVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":

        return _openstudioutilitiescore.DoubleVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.DoubleVector___setitem__(self, *args)



    def append(self, x: 'std::vector< double >::value_type const &') -> "void":

        return _openstudioutilitiescore.DoubleVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.DoubleVector_empty(self)



    def size(self) -> "std::vector< double >::size_type":

        return _openstudioutilitiescore.DoubleVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.DoubleVector_clear(self)



    def swap(self, v: 'DoubleVector') -> "void":

        return _openstudioutilitiescore.DoubleVector_swap(self, v)



    def get_allocator(self) -> "std::vector< double >::allocator_type":

        return _openstudioutilitiescore.DoubleVector_get_allocator(self)



    def begin(self) -> "std::vector< double >::iterator":

        return _openstudioutilitiescore.DoubleVector_begin(self)



    def end(self) -> "std::vector< double >::iterator":

        return _openstudioutilitiescore.DoubleVector_end(self)



    def rbegin(self) -> "std::vector< double >::reverse_iterator":

        return _openstudioutilitiescore.DoubleVector_rbegin(self)



    def rend(self) -> "std::vector< double >::reverse_iterator":

        return _openstudioutilitiescore.DoubleVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.DoubleVector_pop_back(self)



    def erase(self, *args) -> "std::vector< double >::iterator":

        return _openstudioutilitiescore.DoubleVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_DoubleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":

        return _openstudioutilitiescore.DoubleVector_push_back(self, x)



    def front(self) -> "std::vector< double >::value_type const &":

        return _openstudioutilitiescore.DoubleVector_front(self)



    def back(self) -> "std::vector< double >::value_type const &":

        return _openstudioutilitiescore.DoubleVector_back(self)



    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":

        return _openstudioutilitiescore.DoubleVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.DoubleVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.DoubleVector_insert(self, *args)



    def reserve(self, n: 'std::vector< double >::size_type') -> "void":

        return _openstudioutilitiescore.DoubleVector_reserve(self, n)



    def capacity(self) -> "std::vector< double >::size_type":

        return _openstudioutilitiescore.DoubleVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_DoubleVector

    __del__ = lambda self: None

DoubleVector_swigregister = _openstudioutilitiescore.DoubleVector_swigregister

DoubleVector_swigregister(DoubleVector)



class StringVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.StringVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.StringVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.StringVector___bool__(self)



    def __len__(self) -> "std::vector< std::string >::size_type":

        return _openstudioutilitiescore.StringVector___len__(self)



    def pop(self) -> "std::vector< std::string >::value_type":

        return _openstudioutilitiescore.StringVector_pop(self)



    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":

        return _openstudioutilitiescore.StringVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.StringVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":

        return _openstudioutilitiescore.StringVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.StringVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":

        return _openstudioutilitiescore.StringVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.StringVector___setitem__(self, *args)



    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":

        return _openstudioutilitiescore.StringVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.StringVector_empty(self)



    def size(self) -> "std::vector< std::string >::size_type":

        return _openstudioutilitiescore.StringVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.StringVector_clear(self)



    def swap(self, v: 'StringVector') -> "void":

        return _openstudioutilitiescore.StringVector_swap(self, v)



    def get_allocator(self) -> "std::vector< std::string >::allocator_type":

        return _openstudioutilitiescore.StringVector_get_allocator(self)



    def begin(self) -> "std::vector< std::string >::iterator":

        return _openstudioutilitiescore.StringVector_begin(self)



    def end(self) -> "std::vector< std::string >::iterator":

        return _openstudioutilitiescore.StringVector_end(self)



    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":

        return _openstudioutilitiescore.StringVector_rbegin(self)



    def rend(self) -> "std::vector< std::string >::reverse_iterator":

        return _openstudioutilitiescore.StringVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.StringVector_pop_back(self)



    def erase(self, *args) -> "std::vector< std::string >::iterator":

        return _openstudioutilitiescore.StringVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_StringVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":

        return _openstudioutilitiescore.StringVector_push_back(self, x)



    def front(self) -> "std::vector< std::string >::value_type const &":

        return _openstudioutilitiescore.StringVector_front(self)



    def back(self) -> "std::vector< std::string >::value_type const &":

        return _openstudioutilitiescore.StringVector_back(self)



    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":

        return _openstudioutilitiescore.StringVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.StringVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.StringVector_insert(self, *args)



    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":

        return _openstudioutilitiescore.StringVector_reserve(self, n)



    def capacity(self) -> "std::vector< std::string >::size_type":

        return _openstudioutilitiescore.StringVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_StringVector

    __del__ = lambda self: None

StringVector_swigregister = _openstudioutilitiescore.StringVector_swigregister

StringVector_swigregister(StringVector)



class StringVectorVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVectorVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, StringVectorVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.StringVectorVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.StringVectorVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.StringVectorVector___bool__(self)



    def __len__(self) -> "std::vector< std::vector< std::string > >::size_type":

        return _openstudioutilitiescore.StringVectorVector___len__(self)



    def pop(self) -> "std::vector< std::vector< std::string > >::value_type":

        return _openstudioutilitiescore.StringVectorVector_pop(self)



    def __getslice__(self, i: 'std::vector< std::vector< std::string > >::difference_type', j: 'std::vector< std::vector< std::string > >::difference_type') -> "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *":

        return _openstudioutilitiescore.StringVectorVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.StringVectorVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< std::vector< std::string > >::difference_type', j: 'std::vector< std::vector< std::string > >::difference_type') -> "void":

        return _openstudioutilitiescore.StringVectorVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.StringVectorVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< std::vector< std::string > >::value_type const &":

        return _openstudioutilitiescore.StringVectorVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.StringVectorVector___setitem__(self, *args)



    def append(self, x: 'StringVector') -> "void":

        return _openstudioutilitiescore.StringVectorVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.StringVectorVector_empty(self)



    def size(self) -> "std::vector< std::vector< std::string > >::size_type":

        return _openstudioutilitiescore.StringVectorVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.StringVectorVector_clear(self)



    def swap(self, v: 'StringVectorVector') -> "void":

        return _openstudioutilitiescore.StringVectorVector_swap(self, v)



    def get_allocator(self) -> "std::vector< std::vector< std::string > >::allocator_type":

        return _openstudioutilitiescore.StringVectorVector_get_allocator(self)



    def begin(self) -> "std::vector< std::vector< std::string > >::iterator":

        return _openstudioutilitiescore.StringVectorVector_begin(self)



    def end(self) -> "std::vector< std::vector< std::string > >::iterator":

        return _openstudioutilitiescore.StringVectorVector_end(self)



    def rbegin(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":

        return _openstudioutilitiescore.StringVectorVector_rbegin(self)



    def rend(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":

        return _openstudioutilitiescore.StringVectorVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.StringVectorVector_pop_back(self)



    def erase(self, *args) -> "std::vector< std::vector< std::string > >::iterator":

        return _openstudioutilitiescore.StringVectorVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_StringVectorVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'StringVector') -> "void":

        return _openstudioutilitiescore.StringVectorVector_push_back(self, x)



    def front(self) -> "std::vector< std::vector< std::string > >::value_type const &":

        return _openstudioutilitiescore.StringVectorVector_front(self)



    def back(self) -> "std::vector< std::vector< std::string > >::value_type const &":

        return _openstudioutilitiescore.StringVectorVector_back(self)



    def assign(self, n: 'std::vector< std::vector< std::string > >::size_type', x: 'StringVector') -> "void":

        return _openstudioutilitiescore.StringVectorVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.StringVectorVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.StringVectorVector_insert(self, *args)



    def reserve(self, n: 'std::vector< std::vector< std::string > >::size_type') -> "void":

        return _openstudioutilitiescore.StringVectorVector_reserve(self, n)



    def capacity(self) -> "std::vector< std::vector< std::string > >::size_type":

        return _openstudioutilitiescore.StringVectorVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_StringVectorVector

    __del__ = lambda self: None

StringVectorVector_swigregister = _openstudioutilitiescore.StringVectorVector_swigregister

StringVectorVector_swigregister(StringVectorVector)



class IntVectorVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVectorVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IntVectorVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.IntVectorVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.IntVectorVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.IntVectorVector___bool__(self)



    def __len__(self) -> "std::vector< std::vector< int > >::size_type":

        return _openstudioutilitiescore.IntVectorVector___len__(self)



    def pop(self) -> "std::vector< std::vector< int > >::value_type":

        return _openstudioutilitiescore.IntVectorVector_pop(self)



    def __getslice__(self, i: 'std::vector< std::vector< int > >::difference_type', j: 'std::vector< std::vector< int > >::difference_type') -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":

        return _openstudioutilitiescore.IntVectorVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.IntVectorVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< std::vector< int > >::difference_type', j: 'std::vector< std::vector< int > >::difference_type') -> "void":

        return _openstudioutilitiescore.IntVectorVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.IntVectorVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":

        return _openstudioutilitiescore.IntVectorVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.IntVectorVector___setitem__(self, *args)



    def append(self, x: 'IntVector') -> "void":

        return _openstudioutilitiescore.IntVectorVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.IntVectorVector_empty(self)



    def size(self) -> "std::vector< std::vector< int > >::size_type":

        return _openstudioutilitiescore.IntVectorVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.IntVectorVector_clear(self)



    def swap(self, v: 'IntVectorVector') -> "void":

        return _openstudioutilitiescore.IntVectorVector_swap(self, v)



    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":

        return _openstudioutilitiescore.IntVectorVector_get_allocator(self)



    def begin(self) -> "std::vector< std::vector< int > >::iterator":

        return _openstudioutilitiescore.IntVectorVector_begin(self)



    def end(self) -> "std::vector< std::vector< int > >::iterator":

        return _openstudioutilitiescore.IntVectorVector_end(self)



    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":

        return _openstudioutilitiescore.IntVectorVector_rbegin(self)



    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":

        return _openstudioutilitiescore.IntVectorVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.IntVectorVector_pop_back(self)



    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":

        return _openstudioutilitiescore.IntVectorVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_IntVectorVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'IntVector') -> "void":

        return _openstudioutilitiescore.IntVectorVector_push_back(self, x)



    def front(self) -> "std::vector< std::vector< int > >::value_type const &":

        return _openstudioutilitiescore.IntVectorVector_front(self)



    def back(self) -> "std::vector< std::vector< int > >::value_type const &":

        return _openstudioutilitiescore.IntVectorVector_back(self)



    def assign(self, n: 'std::vector< std::vector< int > >::size_type', x: 'IntVector') -> "void":

        return _openstudioutilitiescore.IntVectorVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.IntVectorVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.IntVectorVector_insert(self, *args)



    def reserve(self, n: 'std::vector< std::vector< int > >::size_type') -> "void":

        return _openstudioutilitiescore.IntVectorVector_reserve(self, n)



    def capacity(self) -> "std::vector< std::vector< int > >::size_type":

        return _openstudioutilitiescore.IntVectorVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_IntVectorVector

    __del__ = lambda self: None

IntVectorVector_swigregister = _openstudioutilitiescore.IntVectorVector_swigregister

IntVectorVector_swigregister(IntVectorVector)



class UnsignedSet(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedSet, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedSet, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.UnsignedSet_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.UnsignedSet___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.UnsignedSet___bool__(self)



    def __len__(self) -> "std::set< unsigned int >::size_type":

        return _openstudioutilitiescore.UnsignedSet___len__(self)



    def append(self, x: 'std::set< unsigned int >::value_type') -> "void":

        return _openstudioutilitiescore.UnsignedSet_append(self, x)



    def __contains__(self, x: 'std::set< unsigned int >::value_type') -> "bool":

        return _openstudioutilitiescore.UnsignedSet___contains__(self, x)



    def __getitem__(self, i: 'std::set< unsigned int >::difference_type') -> "std::set< unsigned int >::value_type":

        return _openstudioutilitiescore.UnsignedSet___getitem__(self, i)



    def add(self, x: 'std::set< unsigned int >::value_type') -> "void":

        return _openstudioutilitiescore.UnsignedSet_add(self, x)



    def discard(self, x: 'std::set< unsigned int >::value_type') -> "void":

        return _openstudioutilitiescore.UnsignedSet_discard(self, x)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_UnsignedSet(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def empty(self) -> "bool":

        return _openstudioutilitiescore.UnsignedSet_empty(self)



    def size(self) -> "std::set< unsigned int >::size_type":

        return _openstudioutilitiescore.UnsignedSet_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.UnsignedSet_clear(self)



    def swap(self, v: 'UnsignedSet') -> "void":

        return _openstudioutilitiescore.UnsignedSet_swap(self, v)



    def count(self, x: 'std::set< unsigned int >::key_type const &') -> "std::set< unsigned int >::size_type":

        return _openstudioutilitiescore.UnsignedSet_count(self, x)



    def begin(self) -> "std::set< unsigned int >::iterator":

        return _openstudioutilitiescore.UnsignedSet_begin(self)



    def end(self) -> "std::set< unsigned int >::iterator":

        return _openstudioutilitiescore.UnsignedSet_end(self)



    def rbegin(self) -> "std::set< unsigned int >::reverse_iterator":

        return _openstudioutilitiescore.UnsignedSet_rbegin(self)



    def rend(self) -> "std::set< unsigned int >::reverse_iterator":

        return _openstudioutilitiescore.UnsignedSet_rend(self)



    def erase(self, *args) -> "void":

        return _openstudioutilitiescore.UnsignedSet_erase(self, *args)



    def find(self, x: 'std::set< unsigned int >::key_type const &') -> "std::set< unsigned int >::iterator":

        return _openstudioutilitiescore.UnsignedSet_find(self, x)



    def lower_bound(self, x: 'std::set< unsigned int >::key_type const &') -> "std::set< unsigned int >::iterator":

        return _openstudioutilitiescore.UnsignedSet_lower_bound(self, x)



    def upper_bound(self, x: 'std::set< unsigned int >::key_type const &') -> "std::set< unsigned int >::iterator":

        return _openstudioutilitiescore.UnsignedSet_upper_bound(self, x)



    def equal_range(self, x: 'std::set< unsigned int >::key_type const &') -> "std::pair< std::set< unsigned int >::iterator,std::set< unsigned int >::iterator >":

        return _openstudioutilitiescore.UnsignedSet_equal_range(self, x)



    def insert(self, __x: 'std::set< unsigned int >::value_type const &') -> "std::pair< std::set< unsigned int >::iterator,bool >":

        return _openstudioutilitiescore.UnsignedSet_insert(self, __x)

    __swig_destroy__ = _openstudioutilitiescore.delete_UnsignedSet

    __del__ = lambda self: None

UnsignedSet_swigregister = _openstudioutilitiescore.UnsignedSet_swigregister

UnsignedSet_swigregister(UnsignedSet)



class IntSet(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSet, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IntSet, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.IntSet_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.IntSet___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.IntSet___bool__(self)



    def __len__(self) -> "std::set< int >::size_type":

        return _openstudioutilitiescore.IntSet___len__(self)



    def append(self, x: 'std::set< int >::value_type') -> "void":

        return _openstudioutilitiescore.IntSet_append(self, x)



    def __contains__(self, x: 'std::set< int >::value_type') -> "bool":

        return _openstudioutilitiescore.IntSet___contains__(self, x)



    def __getitem__(self, i: 'std::set< int >::difference_type') -> "std::set< int >::value_type":

        return _openstudioutilitiescore.IntSet___getitem__(self, i)



    def add(self, x: 'std::set< int >::value_type') -> "void":

        return _openstudioutilitiescore.IntSet_add(self, x)



    def discard(self, x: 'std::set< int >::value_type') -> "void":

        return _openstudioutilitiescore.IntSet_discard(self, x)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_IntSet(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def empty(self) -> "bool":

        return _openstudioutilitiescore.IntSet_empty(self)



    def size(self) -> "std::set< int >::size_type":

        return _openstudioutilitiescore.IntSet_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.IntSet_clear(self)



    def swap(self, v: 'IntSet') -> "void":

        return _openstudioutilitiescore.IntSet_swap(self, v)



    def count(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::size_type":

        return _openstudioutilitiescore.IntSet_count(self, x)



    def begin(self) -> "std::set< int >::iterator":

        return _openstudioutilitiescore.IntSet_begin(self)



    def end(self) -> "std::set< int >::iterator":

        return _openstudioutilitiescore.IntSet_end(self)



    def rbegin(self) -> "std::set< int >::reverse_iterator":

        return _openstudioutilitiescore.IntSet_rbegin(self)



    def rend(self) -> "std::set< int >::reverse_iterator":

        return _openstudioutilitiescore.IntSet_rend(self)



    def erase(self, *args) -> "void":

        return _openstudioutilitiescore.IntSet_erase(self, *args)



    def find(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::iterator":

        return _openstudioutilitiescore.IntSet_find(self, x)



    def lower_bound(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::iterator":

        return _openstudioutilitiescore.IntSet_lower_bound(self, x)



    def upper_bound(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::iterator":

        return _openstudioutilitiescore.IntSet_upper_bound(self, x)



    def equal_range(self, x: 'std::set< int >::key_type const &') -> "std::pair< std::set< int >::iterator,std::set< int >::iterator >":

        return _openstudioutilitiescore.IntSet_equal_range(self, x)



    def insert(self, __x: 'std::set< int >::value_type const &') -> "std::pair< std::set< int >::iterator,bool >":

        return _openstudioutilitiescore.IntSet_insert(self, __x)

    __swig_destroy__ = _openstudioutilitiescore.delete_IntSet

    __del__ = lambda self: None

IntSet_swigregister = _openstudioutilitiescore.IntSet_swigregister

IntSet_swigregister(IntSet)



class DoubleSet(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleSet, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, DoubleSet, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.DoubleSet_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.DoubleSet___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.DoubleSet___bool__(self)



    def __len__(self) -> "std::set< double >::size_type":

        return _openstudioutilitiescore.DoubleSet___len__(self)



    def append(self, x: 'std::set< double >::value_type') -> "void":

        return _openstudioutilitiescore.DoubleSet_append(self, x)



    def __contains__(self, x: 'std::set< double >::value_type') -> "bool":

        return _openstudioutilitiescore.DoubleSet___contains__(self, x)



    def __getitem__(self, i: 'std::set< double >::difference_type') -> "std::set< double >::value_type":

        return _openstudioutilitiescore.DoubleSet___getitem__(self, i)



    def add(self, x: 'std::set< double >::value_type') -> "void":

        return _openstudioutilitiescore.DoubleSet_add(self, x)



    def discard(self, x: 'std::set< double >::value_type') -> "void":

        return _openstudioutilitiescore.DoubleSet_discard(self, x)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_DoubleSet(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def empty(self) -> "bool":

        return _openstudioutilitiescore.DoubleSet_empty(self)



    def size(self) -> "std::set< double >::size_type":

        return _openstudioutilitiescore.DoubleSet_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.DoubleSet_clear(self)



    def swap(self, v: 'DoubleSet') -> "void":

        return _openstudioutilitiescore.DoubleSet_swap(self, v)



    def count(self, x: 'std::set< double >::key_type const &') -> "std::set< double >::size_type":

        return _openstudioutilitiescore.DoubleSet_count(self, x)



    def begin(self) -> "std::set< double >::iterator":

        return _openstudioutilitiescore.DoubleSet_begin(self)



    def end(self) -> "std::set< double >::iterator":

        return _openstudioutilitiescore.DoubleSet_end(self)



    def rbegin(self) -> "std::set< double >::reverse_iterator":

        return _openstudioutilitiescore.DoubleSet_rbegin(self)



    def rend(self) -> "std::set< double >::reverse_iterator":

        return _openstudioutilitiescore.DoubleSet_rend(self)



    def erase(self, *args) -> "void":

        return _openstudioutilitiescore.DoubleSet_erase(self, *args)



    def find(self, x: 'std::set< double >::key_type const &') -> "std::set< double >::iterator":

        return _openstudioutilitiescore.DoubleSet_find(self, x)



    def lower_bound(self, x: 'std::set< double >::key_type const &') -> "std::set< double >::iterator":

        return _openstudioutilitiescore.DoubleSet_lower_bound(self, x)



    def upper_bound(self, x: 'std::set< double >::key_type const &') -> "std::set< double >::iterator":

        return _openstudioutilitiescore.DoubleSet_upper_bound(self, x)



    def equal_range(self, x: 'std::set< double >::key_type const &') -> "std::pair< std::set< double >::iterator,std::set< double >::iterator >":

        return _openstudioutilitiescore.DoubleSet_equal_range(self, x)



    def insert(self, __x: 'std::set< double >::value_type const &') -> "std::pair< std::set< double >::iterator,bool >":

        return _openstudioutilitiescore.DoubleSet_insert(self, __x)

    __swig_destroy__ = _openstudioutilitiescore.delete_DoubleSet

    __del__ = lambda self: None

DoubleSet_swigregister = _openstudioutilitiescore.DoubleSet_swigregister

DoubleSet_swigregister(DoubleSet)



class StringSet(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.StringSet_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.StringSet___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.StringSet___bool__(self)



    def __len__(self) -> "std::set< std::string >::size_type":

        return _openstudioutilitiescore.StringSet___len__(self)



    def append(self, x: 'std::set< std::string >::value_type') -> "void":

        return _openstudioutilitiescore.StringSet_append(self, x)



    def __contains__(self, x: 'std::set< std::string >::value_type') -> "bool":

        return _openstudioutilitiescore.StringSet___contains__(self, x)



    def __getitem__(self, i: 'std::set< std::string >::difference_type') -> "std::set< std::string >::value_type":

        return _openstudioutilitiescore.StringSet___getitem__(self, i)



    def add(self, x: 'std::set< std::string >::value_type') -> "void":

        return _openstudioutilitiescore.StringSet_add(self, x)



    def discard(self, x: 'std::set< std::string >::value_type') -> "void":

        return _openstudioutilitiescore.StringSet_discard(self, x)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_StringSet(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def empty(self) -> "bool":

        return _openstudioutilitiescore.StringSet_empty(self)



    def size(self) -> "std::set< std::string >::size_type":

        return _openstudioutilitiescore.StringSet_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.StringSet_clear(self)



    def swap(self, v: 'StringSet') -> "void":

        return _openstudioutilitiescore.StringSet_swap(self, v)



    def count(self, x: 'std::set< std::string >::key_type const &') -> "std::set< std::string >::size_type":

        return _openstudioutilitiescore.StringSet_count(self, x)



    def begin(self) -> "std::set< std::string >::iterator":

        return _openstudioutilitiescore.StringSet_begin(self)



    def end(self) -> "std::set< std::string >::iterator":

        return _openstudioutilitiescore.StringSet_end(self)



    def rbegin(self) -> "std::set< std::string >::reverse_iterator":

        return _openstudioutilitiescore.StringSet_rbegin(self)



    def rend(self) -> "std::set< std::string >::reverse_iterator":

        return _openstudioutilitiescore.StringSet_rend(self)



    def erase(self, *args) -> "void":

        return _openstudioutilitiescore.StringSet_erase(self, *args)



    def find(self, x: 'std::set< std::string >::key_type const &') -> "std::set< std::string >::iterator":

        return _openstudioutilitiescore.StringSet_find(self, x)



    def lower_bound(self, x: 'std::set< std::string >::key_type const &') -> "std::set< std::string >::iterator":

        return _openstudioutilitiescore.StringSet_lower_bound(self, x)



    def upper_bound(self, x: 'std::set< std::string >::key_type const &') -> "std::set< std::string >::iterator":

        return _openstudioutilitiescore.StringSet_upper_bound(self, x)



    def equal_range(self, x: 'std::set< std::string >::key_type const &') -> "std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator >":

        return _openstudioutilitiescore.StringSet_equal_range(self, x)



    def insert(self, __x: 'std::set< std::string >::value_type const &') -> "std::pair< std::set< std::string >::iterator,bool >":

        return _openstudioutilitiescore.StringSet_insert(self, __x)

    __swig_destroy__ = _openstudioutilitiescore.delete_StringSet

    __del__ = lambda self: None

StringSet_swigregister = _openstudioutilitiescore.StringSet_swigregister

StringSet_swigregister(StringSet)



class Any(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Any, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Any, name)

    __repr__ = _swig_repr



    def toString(self) -> "std::string":

        return _openstudioutilitiescore.Any_toString(self)



    def toInt(self) -> "int":

        return _openstudioutilitiescore.Any_toInt(self)



    def toUnsigned(self) -> "unsigned int":

        return _openstudioutilitiescore.Any_toUnsigned(self)



    def toFloat(self) -> "float":

        return _openstudioutilitiescore.Any_toFloat(self)



    def toDouble(self) -> "double":

        return _openstudioutilitiescore.Any_toDouble(self)



    def __str__(self) -> "std::string":

        return _openstudioutilitiescore.Any___str__(self)



    def __int__(self) -> "int":

        return _openstudioutilitiescore.Any___int__(self)



    def __float__(self) -> "float":

        return _openstudioutilitiescore.Any___float__(self)



    def __init__(self):

        this = _openstudioutilitiescore.new_Any()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_Any

    __del__ = lambda self: None

Any_swigregister = _openstudioutilitiescore.Any_swigregister

Any_swigregister(Any)



class OptionalInt(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalInt, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalInt, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalInt(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalInt_reset(self)



    def __ref__(self) -> "int":

        return _openstudioutilitiescore.OptionalInt___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalInt_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalInt_isNull(self)



    def get(self) -> "int":

        return _openstudioutilitiescore.OptionalInt_get(self)



    def set(self, t: 'int const &') -> "void":

        return _openstudioutilitiescore.OptionalInt_set(self, t)



    def __str__(self) -> "std::string":

        return _openstudioutilitiescore.OptionalInt___str__(self)



    def __int__(self) -> "int":

        return _openstudioutilitiescore.OptionalInt___int__(self)



    def __float__(self) -> "float":

        return _openstudioutilitiescore.OptionalInt___float__(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalInt

    __del__ = lambda self: None

OptionalInt_swigregister = _openstudioutilitiescore.OptionalInt_swigregister

OptionalInt_swigregister(OptionalInt)



class OptionalBool(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBool, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBool, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalBool(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalBool_reset(self)



    def __ref__(self) -> "bool":

        return _openstudioutilitiescore.OptionalBool___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalBool_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalBool_isNull(self)



    def get(self) -> "bool":

        return _openstudioutilitiescore.OptionalBool_get(self)



    def set(self, t: 'bool const &') -> "void":

        return _openstudioutilitiescore.OptionalBool_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalBool

    __del__ = lambda self: None

OptionalBool_swigregister = _openstudioutilitiescore.OptionalBool_swigregister

OptionalBool_swigregister(OptionalBool)



class OptionalUnsigned(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalUnsigned, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalUnsigned, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalUnsigned(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalUnsigned_reset(self)



    def __ref__(self) -> "unsigned int":

        return _openstudioutilitiescore.OptionalUnsigned___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalUnsigned_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalUnsigned_isNull(self)



    def get(self) -> "unsigned int":

        return _openstudioutilitiescore.OptionalUnsigned_get(self)



    def set(self, t: 'unsigned int const &') -> "void":

        return _openstudioutilitiescore.OptionalUnsigned_set(self, t)



    def __str__(self) -> "std::string":

        return _openstudioutilitiescore.OptionalUnsigned___str__(self)



    def __int__(self) -> "int":

        return _openstudioutilitiescore.OptionalUnsigned___int__(self)



    def __float__(self) -> "float":

        return _openstudioutilitiescore.OptionalUnsigned___float__(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalUnsigned

    __del__ = lambda self: None

OptionalUnsigned_swigregister = _openstudioutilitiescore.OptionalUnsigned_swigregister

OptionalUnsigned_swigregister(OptionalUnsigned)



class OptionalDouble(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDouble, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDouble, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalDouble(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalDouble_reset(self)



    def __ref__(self) -> "double":

        return _openstudioutilitiescore.OptionalDouble___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalDouble_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalDouble_isNull(self)



    def get(self) -> "double":

        return _openstudioutilitiescore.OptionalDouble_get(self)



    def set(self, t: 'double const &') -> "void":

        return _openstudioutilitiescore.OptionalDouble_set(self, t)



    def __str__(self) -> "std::string":

        return _openstudioutilitiescore.OptionalDouble___str__(self)



    def __int__(self) -> "int":

        return _openstudioutilitiescore.OptionalDouble___int__(self)



    def __float__(self) -> "float":

        return _openstudioutilitiescore.OptionalDouble___float__(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalDouble

    __del__ = lambda self: None

OptionalDouble_swigregister = _openstudioutilitiescore.OptionalDouble_swigregister

OptionalDouble_swigregister(OptionalDouble)



class OptionalString(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalString, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalString, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalString(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalString_reset(self)



    def __ref__(self) -> "std::string":

        return _openstudioutilitiescore.OptionalString___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalString_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalString_isNull(self)



    def get(self) -> "std::string":

        return _openstudioutilitiescore.OptionalString_get(self)



    def set(self, t: 'std::string const &') -> "void":

        return _openstudioutilitiescore.OptionalString_set(self, t)



    def __str__(self) -> "std::string":

        return _openstudioutilitiescore.OptionalString___str__(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalString

    __del__ = lambda self: None

OptionalString_swigregister = _openstudioutilitiescore.OptionalString_swigregister

OptionalString_swigregister(OptionalString)



class OptionalStringVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalStringVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalStringVector, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalStringVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalStringVector_reset(self)



    def __ref__(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiescore.OptionalStringVector___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalStringVector_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalStringVector_isNull(self)



    def get(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiescore.OptionalStringVector_get(self)



    def set(self, t: 'StringVector') -> "void":

        return _openstudioutilitiescore.OptionalStringVector_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalStringVector

    __del__ = lambda self: None

OptionalStringVector_swigregister = _openstudioutilitiescore.OptionalStringVector_swigregister

OptionalStringVector_swigregister(OptionalStringVector)



class OptionalDoubleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDoubleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDoubleVector, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalDoubleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalDoubleVector_reset(self)



    def __ref__(self) -> "std::vector< double,std::allocator< double > >":

        return _openstudioutilitiescore.OptionalDoubleVector___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalDoubleVector_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalDoubleVector_isNull(self)



    def get(self) -> "std::vector< double,std::allocator< double > >":

        return _openstudioutilitiescore.OptionalDoubleVector_get(self)



    def set(self, t: 'DoubleVector') -> "void":

        return _openstudioutilitiescore.OptionalDoubleVector_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalDoubleVector

    __del__ = lambda self: None

OptionalDoubleVector_swigregister = _openstudioutilitiescore.OptionalDoubleVector_swigregister

OptionalDoubleVector_swigregister(OptionalDoubleVector)



class OptionalIntVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalIntVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalIntVector, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalIntVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalIntVector_reset(self)



    def __ref__(self) -> "std::vector< int,std::allocator< int > >":

        return _openstudioutilitiescore.OptionalIntVector___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalIntVector_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalIntVector_isNull(self)



    def get(self) -> "std::vector< int,std::allocator< int > >":

        return _openstudioutilitiescore.OptionalIntVector_get(self)



    def set(self, t: 'IntVector') -> "void":

        return _openstudioutilitiescore.OptionalIntVector_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalIntVector

    __del__ = lambda self: None

OptionalIntVector_swigregister = _openstudioutilitiescore.OptionalIntVector_swigregister

OptionalIntVector_swigregister(OptionalIntVector)



class Regex(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Regex, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Regex, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_Regex(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_Regex

    __del__ = lambda self: None



    def size(self) -> "unsigned int":

        return _openstudioutilitiescore.Regex_size(self)



    def max_size(self) -> "unsigned int":

        return _openstudioutilitiescore.Regex_max_size(self)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.Regex_empty(self)



    def mark_count(self) -> "unsigned int":

        return _openstudioutilitiescore.Regex_mark_count(self)



    def assign(self, *args) -> "boost::regex &":

        return _openstudioutilitiescore.Regex_assign(self, *args)



    def status(self) -> "int":

        return _openstudioutilitiescore.Regex_status(self)



    def str(self) -> "std::string":

        return _openstudioutilitiescore.Regex_str(self)



    def compare(self, arg2: 'Regex') -> "int":

        return _openstudioutilitiescore.Regex_compare(self, arg2)



    def swap(self, arg2: 'Regex') -> "void":

        return _openstudioutilitiescore.Regex_swap(self, arg2)

Regex_swigregister = _openstudioutilitiescore.Regex_swigregister

Regex_swigregister(Regex)



class OptionalRegex(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRegex, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRegex, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalRegex(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalRegex_reset(self)



    def __ref__(self) -> "boost::regex":

        return _openstudioutilitiescore.OptionalRegex___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalRegex_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalRegex_isNull(self)



    def get(self) -> "boost::regex":

        return _openstudioutilitiescore.OptionalRegex_get(self)



    def set(self, t: 'Regex') -> "void":

        return _openstudioutilitiescore.OptionalRegex_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalRegex

    __del__ = lambda self: None

OptionalRegex_swigregister = _openstudioutilitiescore.OptionalRegex_swigregister

OptionalRegex_swigregister(OptionalRegex)





_openstudioutilitiescore.white_swigconstant(_openstudioutilitiescore)

white = _openstudioutilitiescore.white



_openstudioutilitiescore.black_swigconstant(_openstudioutilitiescore)

black = _openstudioutilitiescore.black



_openstudioutilitiescore.red_swigconstant(_openstudioutilitiescore)

red = _openstudioutilitiescore.red



_openstudioutilitiescore.darkRed_swigconstant(_openstudioutilitiescore)

darkRed = _openstudioutilitiescore.darkRed



_openstudioutilitiescore.green_swigconstant(_openstudioutilitiescore)

green = _openstudioutilitiescore.green



_openstudioutilitiescore.darkGreen_swigconstant(_openstudioutilitiescore)

darkGreen = _openstudioutilitiescore.darkGreen



_openstudioutilitiescore.blue_swigconstant(_openstudioutilitiescore)

blue = _openstudioutilitiescore.blue



_openstudioutilitiescore.darkBlue_swigconstant(_openstudioutilitiescore)

darkBlue = _openstudioutilitiescore.darkBlue



_openstudioutilitiescore.cyan_swigconstant(_openstudioutilitiescore)

cyan = _openstudioutilitiescore.cyan



_openstudioutilitiescore.darkCyan_swigconstant(_openstudioutilitiescore)

darkCyan = _openstudioutilitiescore.darkCyan



_openstudioutilitiescore.magenta_swigconstant(_openstudioutilitiescore)

magenta = _openstudioutilitiescore.magenta



_openstudioutilitiescore.darkMagenta_swigconstant(_openstudioutilitiescore)

darkMagenta = _openstudioutilitiescore.darkMagenta



_openstudioutilitiescore.yellow_swigconstant(_openstudioutilitiescore)

yellow = _openstudioutilitiescore.yellow



_openstudioutilitiescore.darkYellow_swigconstant(_openstudioutilitiescore)

darkYellow = _openstudioutilitiescore.darkYellow



_openstudioutilitiescore.gray_swigconstant(_openstudioutilitiescore)

gray = _openstudioutilitiescore.gray



_openstudioutilitiescore.darkGray_swigconstant(_openstudioutilitiescore)

darkGray = _openstudioutilitiescore.darkGray



_openstudioutilitiescore.lightGray_swigconstant(_openstudioutilitiescore)

lightGray = _openstudioutilitiescore.lightGray



_openstudioutilitiescore.transparent_swigconstant(_openstudioutilitiescore)

transparent = _openstudioutilitiescore.transparent



_openstudioutilitiescore.color0_swigconstant(_openstudioutilitiescore)

color0 = _openstudioutilitiescore.color0



_openstudioutilitiescore.color1_swigconstant(_openstudioutilitiescore)

color1 = _openstudioutilitiescore.color1



_openstudioutilitiescore.AutoConnection_swigconstant(_openstudioutilitiescore)

AutoConnection = _openstudioutilitiescore.AutoConnection



_openstudioutilitiescore.DirectConnection_swigconstant(_openstudioutilitiescore)

DirectConnection = _openstudioutilitiescore.DirectConnection



_openstudioutilitiescore.QueuedConnection_swigconstant(_openstudioutilitiescore)

QueuedConnection = _openstudioutilitiescore.QueuedConnection



_openstudioutilitiescore.BlockingQueuedConnection_swigconstant(_openstudioutilitiescore)

BlockingQueuedConnection = _openstudioutilitiescore.BlockingQueuedConnection



_openstudioutilitiescore.UniqueConnection_swigconstant(_openstudioutilitiescore)

UniqueConnection = _openstudioutilitiescore.UniqueConnection

class QObject(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QObject, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QObject, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_QObject

    __del__ = lambda self: None

QObject_swigregister = _openstudioutilitiescore.QObject_swigregister

QObject_swigregister(QObject)



class Color(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)

    __repr__ = _swig_repr

    Invalid = _openstudioutilitiescore.Color_Invalid

    Rgb = _openstudioutilitiescore.Color_Rgb

    Hsv = _openstudioutilitiescore.Color_Hsv

    Cmyk = _openstudioutilitiescore.Color_Cmyk



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_Color(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def isValid(self) -> "bool":

        return _openstudioutilitiescore.Color_isValid(self)



    def name(self) -> "QString":

        return _openstudioutilitiescore.Color_name(self)



    def setNamedColor(self, name: 'QString') -> "void":

        return _openstudioutilitiescore.Color_setNamedColor(self, name)

    __swig_getmethods__["colorNames"] = lambda x: _openstudioutilitiescore.Color_colorNames

    if _newclass:

        colorNames = staticmethod(_openstudioutilitiescore.Color_colorNames)



    def spec(self) -> "QColor::Spec":

        return _openstudioutilitiescore.Color_spec(self)



    def alpha(self) -> "int":

        return _openstudioutilitiescore.Color_alpha(self)



    def setAlpha(self, alpha: 'int') -> "void":

        return _openstudioutilitiescore.Color_setAlpha(self, alpha)



    def alphaF(self) -> "double":

        return _openstudioutilitiescore.Color_alphaF(self)



    def setAlphaF(self, alpha: 'qreal') -> "void":

        return _openstudioutilitiescore.Color_setAlphaF(self, alpha)



    def red(self) -> "int":

        return _openstudioutilitiescore.Color_red(self)



    def green(self) -> "int":

        return _openstudioutilitiescore.Color_green(self)



    def blue(self) -> "int":

        return _openstudioutilitiescore.Color_blue(self)



    def setRed(self, red: 'int') -> "void":

        return _openstudioutilitiescore.Color_setRed(self, red)



    def setGreen(self, green: 'int') -> "void":

        return _openstudioutilitiescore.Color_setGreen(self, green)



    def setBlue(self, blue: 'int') -> "void":

        return _openstudioutilitiescore.Color_setBlue(self, blue)



    def getRgb(self, r: 'int *', g: 'int *', b: 'int *', a: 'int *'=None) -> "void":

        return _openstudioutilitiescore.Color_getRgb(self, r, g, b, a)



    def setRgb(self, r: 'int', g: 'int', b: 'int', a: 'int'=255) -> "void":

        return _openstudioutilitiescore.Color_setRgb(self, r, g, b, a)



    def hue(self) -> "int":

        return _openstudioutilitiescore.Color_hue(self)



    def saturation(self) -> "int":

        return _openstudioutilitiescore.Color_saturation(self)



    def value(self) -> "int":

        return _openstudioutilitiescore.Color_value(self)



    def getHsv(self, h: 'int *', s: 'int *', v: 'int *', a: 'int *'=None) -> "void":

        return _openstudioutilitiescore.Color_getHsv(self, h, s, v, a)



    def setHsv(self, h: 'int', s: 'int', v: 'int', a: 'int'=255) -> "void":

        return _openstudioutilitiescore.Color_setHsv(self, h, s, v, a)



    def cyan(self) -> "int":

        return _openstudioutilitiescore.Color_cyan(self)



    def magenta(self) -> "int":

        return _openstudioutilitiescore.Color_magenta(self)



    def yellow(self) -> "int":

        return _openstudioutilitiescore.Color_yellow(self)



    def black(self) -> "int":

        return _openstudioutilitiescore.Color_black(self)



    def getCmyk(self, c: 'int *', m: 'int *', y: 'int *', k: 'int *', a: 'int *'=None) -> "void":

        return _openstudioutilitiescore.Color_getCmyk(self, c, m, y, k, a)



    def setCmyk(self, c: 'int', m: 'int', y: 'int', k: 'int', a: 'int'=255) -> "void":

        return _openstudioutilitiescore.Color_setCmyk(self, c, m, y, k, a)



    def toRgb(self) -> "QColor":

        return _openstudioutilitiescore.Color_toRgb(self)



    def toHsv(self) -> "QColor":

        return _openstudioutilitiescore.Color_toHsv(self)



    def toCmyk(self) -> "QColor":

        return _openstudioutilitiescore.Color_toCmyk(self)



    def convertTo(self, colorSpec: 'QColor::Spec') -> "QColor":

        return _openstudioutilitiescore.Color_convertTo(self, colorSpec)

    __swig_getmethods__["fromRgb"] = lambda x: _openstudioutilitiescore.Color_fromRgb

    if _newclass:

        fromRgb = staticmethod(_openstudioutilitiescore.Color_fromRgb)

    __swig_getmethods__["fromHsv"] = lambda x: _openstudioutilitiescore.Color_fromHsv

    if _newclass:

        fromHsv = staticmethod(_openstudioutilitiescore.Color_fromHsv)

    __swig_getmethods__["fromCmyk"] = lambda x: _openstudioutilitiescore.Color_fromCmyk

    if _newclass:

        fromCmyk = staticmethod(_openstudioutilitiescore.Color_fromCmyk)



    def light(self, f: 'int'=150) -> "QColor":

        return _openstudioutilitiescore.Color_light(self, f)



    def lighter(self, f: 'int'=150) -> "QColor":

        return _openstudioutilitiescore.Color_lighter(self, f)



    def dark(self, f: 'int'=200) -> "QColor":

        return _openstudioutilitiescore.Color_dark(self, f)



    def darker(self, f: 'int'=200) -> "QColor":

        return _openstudioutilitiescore.Color_darker(self, f)



    def __eq__(self, c: 'Color') -> "bool":

        return _openstudioutilitiescore.Color___eq__(self, c)



    def __ne__(self, c: 'Color') -> "bool":

        return _openstudioutilitiescore.Color___ne__(self, c)

    __swig_destroy__ = _openstudioutilitiescore.delete_Color

    __del__ = lambda self: None

Color_swigregister = _openstudioutilitiescore.Color_swigregister

Color_swigregister(Color)



def Color_colorNames() -> "QStringList":

    return _openstudioutilitiescore.Color_colorNames()

Color_colorNames = _openstudioutilitiescore.Color_colorNames



def Color_fromRgb(r: 'int', g: 'int', b: 'int', a: 'int'=255) -> "QColor":

    return _openstudioutilitiescore.Color_fromRgb(r, g, b, a)

Color_fromRgb = _openstudioutilitiescore.Color_fromRgb



def Color_fromHsv(h: 'int', s: 'int', v: 'int', a: 'int'=255) -> "QColor":

    return _openstudioutilitiescore.Color_fromHsv(h, s, v, a)

Color_fromHsv = _openstudioutilitiescore.Color_fromHsv



def Color_fromCmyk(c: 'int', m: 'int', y: 'int', k: 'int', a: 'int'=255) -> "QColor":

    return _openstudioutilitiescore.Color_fromCmyk(c, m, y, k, a)

Color_fromCmyk = _openstudioutilitiescore.Color_fromCmyk



class QWidget(QObject):

    __swig_setmethods__ = {}

    for _s in [QObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QWidget, name, value)

    __swig_getmethods__ = {}

    for _s in [QObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QWidget, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr



    def show(self) -> "void":

        return _openstudioutilitiescore.QWidget_show(self)



    def hide(self) -> "void":

        return _openstudioutilitiescore.QWidget_hide(self)



    def isWindow(self) -> "bool":

        return _openstudioutilitiescore.QWidget_isWindow(self)



    def windowTitle(self) -> "QString":

        return _openstudioutilitiescore.QWidget_windowTitle(self)



    def setWindowTitle(self, arg2: 'QString') -> "void":

        return _openstudioutilitiescore.QWidget_setWindowTitle(self, arg2)



    def isActiveWindow(self) -> "bool":

        return _openstudioutilitiescore.QWidget_isActiveWindow(self)



    def activateWindow(self) -> "void":

        return _openstudioutilitiescore.QWidget_activateWindow(self)



    def _raise(self) -> "void":

        return _openstudioutilitiescore.QWidget__raise(self)



    def lower(self) -> "void":

        return _openstudioutilitiescore.QWidget_lower(self)



    def isAncestorOf(self, child: 'QWidget') -> "bool":

        return _openstudioutilitiescore.QWidget_isAncestorOf(self, child)



    def isEnabled(self) -> "bool":

        return _openstudioutilitiescore.QWidget_isEnabled(self)



    def isEnabledTo(self, ancestor: 'QWidget') -> "bool":

        return _openstudioutilitiescore.QWidget_isEnabledTo(self, ancestor)



    def setEnabled(self, enabled: 'bool') -> "void":

        return _openstudioutilitiescore.QWidget_setEnabled(self, enabled)



    def isFullScreen(self) -> "bool":

        return _openstudioutilitiescore.QWidget_isFullScreen(self)



    def isHidden(self) -> "bool":

        return _openstudioutilitiescore.QWidget_isHidden(self)



    def isMaximized(self) -> "bool":

        return _openstudioutilitiescore.QWidget_isMaximized(self)



    def isMinimized(self) -> "bool":

        return _openstudioutilitiescore.QWidget_isMinimized(self)



    def isModal(self) -> "bool":

        return _openstudioutilitiescore.QWidget_isModal(self)



    def isVisible(self) -> "bool":

        return _openstudioutilitiescore.QWidget_isVisible(self)



    def isVisibleTo(self, ancestor: 'QWidget') -> "bool":

        return _openstudioutilitiescore.QWidget_isVisibleTo(self, ancestor)



    def setVisible(self, visible: 'bool') -> "void":

        return _openstudioutilitiescore.QWidget_setVisible(self, visible)

    __swig_destroy__ = _openstudioutilitiescore.delete_QWidget

    __del__ = lambda self: None

QWidget_swigregister = _openstudioutilitiescore.QWidget_swigregister

QWidget_swigregister(QWidget)



class QMainWindow(QWidget):

    __swig_setmethods__ = {}

    for _s in [QWidget]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QMainWindow, name, value)

    __swig_getmethods__ = {}

    for _s in [QWidget]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QMainWindow, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_QMainWindow

    __del__ = lambda self: None

QMainWindow_swigregister = _openstudioutilitiescore.QMainWindow_swigregister

QMainWindow_swigregister(QMainWindow)



class QDialog(QWidget):

    __swig_setmethods__ = {}

    for _s in [QWidget]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QDialog, name, value)

    __swig_getmethods__ = {}

    for _s in [QWidget]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QDialog, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_QDialog

    __del__ = lambda self: None

QDialog_swigregister = _openstudioutilitiescore.QDialog_swigregister

QDialog_swigregister(QDialog)



class QComboBox(QWidget):

    __swig_setmethods__ = {}

    for _s in [QWidget]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QComboBox, name, value)

    __swig_getmethods__ = {}

    for _s in [QWidget]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QComboBox, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_QComboBox

    __del__ = lambda self: None

QComboBox_swigregister = _openstudioutilitiescore.QComboBox_swigregister

QComboBox_swigregister(QComboBox)



class QTextStream(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QTextStream, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QTextStream, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QTextStream()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QTextStream

    __del__ = lambda self: None

QTextStream_swigregister = _openstudioutilitiescore.QTextStream_swigregister

QTextStream_swigregister(QTextStream)



class QRgb(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QRgb, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QRgb, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QRgb()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QRgb

    __del__ = lambda self: None

QRgb_swigregister = _openstudioutilitiescore.QRgb_swigregister

QRgb_swigregister(QRgb)



class QString(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QString, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QString, name)

    __repr__ = _swig_repr



    def __str__(self) -> "std::string":

        return _openstudioutilitiescore.QString___str__(self)



    def __init__(self):

        this = _openstudioutilitiescore.new_QString()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QString

    __del__ = lambda self: None

QString_swigregister = _openstudioutilitiescore.QString_swigregister

QString_swigregister(QString)



class QDateTime(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QDateTime, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QDateTime, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QDateTime()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QDateTime

    __del__ = lambda self: None

QDateTime_swigregister = _openstudioutilitiescore.QDateTime_swigregister

QDateTime_swigregister(QDateTime)



class QModelIndex(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QModelIndex, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QModelIndex, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QModelIndex()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QModelIndex

    __del__ = lambda self: None

QModelIndex_swigregister = _openstudioutilitiescore.QModelIndex_swigregister

QModelIndex_swigregister(QModelIndex)



class QModelIndexList(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QModelIndexList, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QModelIndexList, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QModelIndexList()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QModelIndexList

    __del__ = lambda self: None

QModelIndexList_swigregister = _openstudioutilitiescore.QModelIndexList_swigregister

QModelIndexList_swigregister(QModelIndexList)



class QCoreApplication(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QCoreApplication, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QCoreApplication, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr



    def setApplicationName(self, applicationName: 'std::string const &') -> "void":

        return _openstudioutilitiescore.QCoreApplication_setApplicationName(self, applicationName)



    def setOrganizationName(self, organizationName: 'std::string const &') -> "void":

        return _openstudioutilitiescore.QCoreApplication_setOrganizationName(self, organizationName)



    def setOrganizationDomain(self, organizationDomain: 'std::string const &') -> "void":

        return _openstudioutilitiescore.QCoreApplication_setOrganizationDomain(self, organizationDomain)

    __swig_destroy__ = _openstudioutilitiescore.delete_QCoreApplication

    __del__ = lambda self: None

QCoreApplication_swigregister = _openstudioutilitiescore.QCoreApplication_swigregister

QCoreApplication_swigregister(QCoreApplication)



class QApplication(QCoreApplication):

    __swig_setmethods__ = {}

    for _s in [QCoreApplication]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QApplication, name, value)

    __swig_getmethods__ = {}

    for _s in [QCoreApplication]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QApplication, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_QApplication

    __del__ = lambda self: None

QApplication_swigregister = _openstudioutilitiescore.QApplication_swigregister

QApplication_swigregister(QApplication)



class QFont(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QFont, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QFont, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QFont()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QFont

    __del__ = lambda self: None

QFont_swigregister = _openstudioutilitiescore.QFont_swigregister

QFont_swigregister(QFont)



class QAction(QObject):

    __swig_setmethods__ = {}

    for _s in [QObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QAction, name, value)

    __swig_getmethods__ = {}

    for _s in [QObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QAction, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_QAction

    __del__ = lambda self: None

QAction_swigregister = _openstudioutilitiescore.QAction_swigregister

QAction_swigregister(QAction)



class QDomNode(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QDomNode, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QDomNode, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QDomNode()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QDomNode

    __del__ = lambda self: None

QDomNode_swigregister = _openstudioutilitiescore.QDomNode_swigregister

QDomNode_swigregister(QDomNode)



class QDomElement(QDomNode):

    __swig_setmethods__ = {}

    for _s in [QDomNode]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QDomElement, name, value)

    __swig_getmethods__ = {}

    for _s in [QDomNode]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QDomElement, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QDomElement()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QDomElement

    __del__ = lambda self: None

QDomElement_swigregister = _openstudioutilitiescore.QDomElement_swigregister

QDomElement_swigregister(QDomElement)



class QDomDocument(QDomNode):

    __swig_setmethods__ = {}

    for _s in [QDomNode]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QDomDocument, name, value)

    __swig_getmethods__ = {}

    for _s in [QDomNode]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QDomDocument, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QDomDocument()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QDomDocument

    __del__ = lambda self: None

QDomDocument_swigregister = _openstudioutilitiescore.QDomDocument_swigregister

QDomDocument_swigregister(QDomDocument)



class QUrl(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QUrl, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QUrl, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QUrl()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QUrl

    __del__ = lambda self: None

QUrl_swigregister = _openstudioutilitiescore.QUrl_swigregister

QUrl_swigregister(QUrl)



class QNetworkRequest(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QNetworkRequest, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QNetworkRequest, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_QNetworkRequest

    __del__ = lambda self: None

QNetworkRequest_swigregister = _openstudioutilitiescore.QNetworkRequest_swigregister

QNetworkRequest_swigregister(QNetworkRequest)



class QNetworkReply(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QNetworkReply, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QNetworkReply, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_QNetworkReply

    __del__ = lambda self: None

QNetworkReply_swigregister = _openstudioutilitiescore.QNetworkReply_swigregister

QNetworkReply_swigregister(QNetworkReply)



class QNetworkAccessManager(QObject):

    __swig_setmethods__ = {}

    for _s in [QObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QNetworkAccessManager, name, value)

    __swig_getmethods__ = {}

    for _s in [QObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QNetworkAccessManager, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_QNetworkAccessManager

    __del__ = lambda self: None

QNetworkAccessManager_swigregister = _openstudioutilitiescore.QNetworkAccessManager_swigregister

QNetworkAccessManager_swigregister(QNetworkAccessManager)



class QSqlQuery(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QSqlQuery, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QSqlQuery, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QSqlQuery()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QSqlQuery

    __del__ = lambda self: None

QSqlQuery_swigregister = _openstudioutilitiescore.QSqlQuery_swigregister

QSqlQuery_swigregister(QSqlQuery)



class QSqlDatabase(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QSqlDatabase, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QSqlDatabase, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QSqlDatabase()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QSqlDatabase

    __del__ = lambda self: None

QSqlDatabase_swigregister = _openstudioutilitiescore.QSqlDatabase_swigregister

QSqlDatabase_swigregister(QSqlDatabase)



class QStandardItem(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QStandardItem, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QStandardItem, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QStandardItem()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QStandardItem

    __del__ = lambda self: None

QStandardItem_swigregister = _openstudioutilitiescore.QStandardItem_swigregister

QStandardItem_swigregister(QStandardItem)



class QVariantVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QVariantVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QVariantVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.QVariantVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.QVariantVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.QVariantVector___bool__(self)



    def __len__(self) -> "std::vector< QVariant >::size_type":

        return _openstudioutilitiescore.QVariantVector___len__(self)



    def pop(self) -> "std::vector< QVariant >::value_type":

        return _openstudioutilitiescore.QVariantVector_pop(self)



    def __getslice__(self, i: 'std::vector< QVariant >::difference_type', j: 'std::vector< QVariant >::difference_type') -> "std::vector< QVariant,std::allocator< QVariant > > *":

        return _openstudioutilitiescore.QVariantVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< QVariant >::difference_type', j: 'std::vector< QVariant >::difference_type') -> "void":

        return _openstudioutilitiescore.QVariantVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< QVariant >::value_type const &":

        return _openstudioutilitiescore.QVariantVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVector___setitem__(self, *args)



    def append(self, x: 'QVariant') -> "void":

        return _openstudioutilitiescore.QVariantVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.QVariantVector_empty(self)



    def size(self) -> "std::vector< QVariant >::size_type":

        return _openstudioutilitiescore.QVariantVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.QVariantVector_clear(self)



    def swap(self, v: 'QVariantVector') -> "void":

        return _openstudioutilitiescore.QVariantVector_swap(self, v)



    def get_allocator(self) -> "std::vector< QVariant >::allocator_type":

        return _openstudioutilitiescore.QVariantVector_get_allocator(self)



    def begin(self) -> "std::vector< QVariant >::iterator":

        return _openstudioutilitiescore.QVariantVector_begin(self)



    def end(self) -> "std::vector< QVariant >::iterator":

        return _openstudioutilitiescore.QVariantVector_end(self)



    def rbegin(self) -> "std::vector< QVariant >::reverse_iterator":

        return _openstudioutilitiescore.QVariantVector_rbegin(self)



    def rend(self) -> "std::vector< QVariant >::reverse_iterator":

        return _openstudioutilitiescore.QVariantVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.QVariantVector_pop_back(self)



    def erase(self, *args) -> "std::vector< QVariant >::iterator":

        return _openstudioutilitiescore.QVariantVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_QVariantVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'QVariant') -> "void":

        return _openstudioutilitiescore.QVariantVector_push_back(self, x)



    def front(self) -> "std::vector< QVariant >::value_type const &":

        return _openstudioutilitiescore.QVariantVector_front(self)



    def back(self) -> "std::vector< QVariant >::value_type const &":

        return _openstudioutilitiescore.QVariantVector_back(self)



    def assign(self, n: 'std::vector< QVariant >::size_type', x: 'QVariant') -> "void":

        return _openstudioutilitiescore.QVariantVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVector_insert(self, *args)



    def reserve(self, n: 'std::vector< QVariant >::size_type') -> "void":

        return _openstudioutilitiescore.QVariantVector_reserve(self, n)



    def capacity(self) -> "std::vector< QVariant >::size_type":

        return _openstudioutilitiescore.QVariantVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_QVariantVector

    __del__ = lambda self: None

QVariantVector_swigregister = _openstudioutilitiescore.QVariantVector_swigregister

QVariantVector_swigregister(QVariantVector)



class QVariantVectorVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QVariantVectorVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QVariantVectorVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.QVariantVectorVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.QVariantVectorVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.QVariantVectorVector___bool__(self)



    def __len__(self) -> "std::vector< std::vector< QVariant > >::size_type":

        return _openstudioutilitiescore.QVariantVectorVector___len__(self)



    def pop(self) -> "std::vector< std::vector< QVariant > >::value_type":

        return _openstudioutilitiescore.QVariantVectorVector_pop(self)



    def __getslice__(self, i: 'std::vector< std::vector< QVariant > >::difference_type', j: 'std::vector< std::vector< QVariant > >::difference_type') -> "std::vector< std::vector< QVariant,std::allocator< QVariant > >,std::allocator< std::vector< QVariant,std::allocator< QVariant > > > > *":

        return _openstudioutilitiescore.QVariantVectorVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVectorVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< std::vector< QVariant > >::difference_type', j: 'std::vector< std::vector< QVariant > >::difference_type') -> "void":

        return _openstudioutilitiescore.QVariantVectorVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVectorVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< std::vector< QVariant > >::value_type const &":

        return _openstudioutilitiescore.QVariantVectorVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVectorVector___setitem__(self, *args)



    def append(self, x: 'QVariantVector') -> "void":

        return _openstudioutilitiescore.QVariantVectorVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.QVariantVectorVector_empty(self)



    def size(self) -> "std::vector< std::vector< QVariant > >::size_type":

        return _openstudioutilitiescore.QVariantVectorVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.QVariantVectorVector_clear(self)



    def swap(self, v: 'QVariantVectorVector') -> "void":

        return _openstudioutilitiescore.QVariantVectorVector_swap(self, v)



    def get_allocator(self) -> "std::vector< std::vector< QVariant > >::allocator_type":

        return _openstudioutilitiescore.QVariantVectorVector_get_allocator(self)



    def begin(self) -> "std::vector< std::vector< QVariant > >::iterator":

        return _openstudioutilitiescore.QVariantVectorVector_begin(self)



    def end(self) -> "std::vector< std::vector< QVariant > >::iterator":

        return _openstudioutilitiescore.QVariantVectorVector_end(self)



    def rbegin(self) -> "std::vector< std::vector< QVariant > >::reverse_iterator":

        return _openstudioutilitiescore.QVariantVectorVector_rbegin(self)



    def rend(self) -> "std::vector< std::vector< QVariant > >::reverse_iterator":

        return _openstudioutilitiescore.QVariantVectorVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.QVariantVectorVector_pop_back(self)



    def erase(self, *args) -> "std::vector< std::vector< QVariant > >::iterator":

        return _openstudioutilitiescore.QVariantVectorVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_QVariantVectorVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'QVariantVector') -> "void":

        return _openstudioutilitiescore.QVariantVectorVector_push_back(self, x)



    def front(self) -> "std::vector< std::vector< QVariant > >::value_type const &":

        return _openstudioutilitiescore.QVariantVectorVector_front(self)



    def back(self) -> "std::vector< std::vector< QVariant > >::value_type const &":

        return _openstudioutilitiescore.QVariantVectorVector_back(self)



    def assign(self, n: 'std::vector< std::vector< QVariant > >::size_type', x: 'QVariantVector') -> "void":

        return _openstudioutilitiescore.QVariantVectorVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVectorVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.QVariantVectorVector_insert(self, *args)



    def reserve(self, n: 'std::vector< std::vector< QVariant > >::size_type') -> "void":

        return _openstudioutilitiescore.QVariantVectorVector_reserve(self, n)



    def capacity(self) -> "std::vector< std::vector< QVariant > >::size_type":

        return _openstudioutilitiescore.QVariantVectorVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_QVariantVectorVector

    __del__ = lambda self: None

QVariantVectorVector_swigregister = _openstudioutilitiescore.QVariantVectorVector_swigregister

QVariantVectorVector_swigregister(QVariantVectorVector)



class QVariant(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QVariant, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QVariant, name)

    __repr__ = _swig_repr

    Invalid = _openstudioutilitiescore.QVariant_Invalid

    Bool = _openstudioutilitiescore.QVariant_Bool

    Int = _openstudioutilitiescore.QVariant_Int

    UInt = _openstudioutilitiescore.QVariant_UInt

    LongLong = _openstudioutilitiescore.QVariant_LongLong

    ULongLong = _openstudioutilitiescore.QVariant_ULongLong

    Double = _openstudioutilitiescore.QVariant_Double

    String = _openstudioutilitiescore.QVariant_String

    Url = _openstudioutilitiescore.QVariant_Url

    UserType = _openstudioutilitiescore.QVariant_UserType



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_QVariant(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QVariant

    __del__ = lambda self: None



    def canConvert(self, t: 'QVariant::Type') -> "bool":

        return _openstudioutilitiescore.QVariant_canConvert(self, t)



    def clear(self) -> "void":

        return _openstudioutilitiescore.QVariant_clear(self)



    def convert(self, t: 'QVariant::Type') -> "bool":

        return _openstudioutilitiescore.QVariant_convert(self, t)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.QVariant_isNull(self)



    def isValid(self) -> "bool":

        return _openstudioutilitiescore.QVariant_isValid(self)



    def toBool(self) -> "bool":

        return _openstudioutilitiescore.QVariant_toBool(self)



    def toDouble(self) -> "double":

        return _openstudioutilitiescore.QVariant_toDouble(self)



    def toInt(self) -> "int":

        return _openstudioutilitiescore.QVariant_toInt(self)



    def toString(self) -> "QString":

        return _openstudioutilitiescore.QVariant_toString(self)



    def toUInt(self) -> "uint":

        return _openstudioutilitiescore.QVariant_toUInt(self)



    def toUrl(self) -> "QUrl":

        return _openstudioutilitiescore.QVariant_toUrl(self)



    def type(self) -> "QVariant::Type":

        return _openstudioutilitiescore.QVariant_type(self)



    def typeName(self) -> "char const *":

        return _openstudioutilitiescore.QVariant_typeName(self)



    def __ne__(self, v: 'QVariant') -> "bool":

        return _openstudioutilitiescore.QVariant___ne__(self, v)



    def __eq__(self, v: 'QVariant') -> "bool":

        return _openstudioutilitiescore.QVariant___eq__(self, v)

    __swig_getmethods__["nameToType"] = lambda x: _openstudioutilitiescore.QVariant_nameToType

    if _newclass:

        nameToType = staticmethod(_openstudioutilitiescore.QVariant_nameToType)



    def typeToName(self, typ: 'QVariant::Type') -> "char const *":

        return _openstudioutilitiescore.QVariant_typeToName(self, typ)

QVariant_swigregister = _openstudioutilitiescore.QVariant_swigregister

QVariant_swigregister(QVariant)



def QVariant_nameToType(name: 'char const *') -> "QVariant::Type":

    return _openstudioutilitiescore.QVariant_nameToType(name)

QVariant_nameToType = _openstudioutilitiescore.QVariant_nameToType



class QThread(QObject):

    __swig_setmethods__ = {}

    for _s in [QObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QThread, name, value)

    __swig_getmethods__ = {}

    for _s in [QObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QThread, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    IdlePriority = _openstudioutilitiescore.QThread_IdlePriority

    LowestPriority = _openstudioutilitiescore.QThread_LowestPriority

    LowPriority = _openstudioutilitiescore.QThread_LowPriority

    NormalPriority = _openstudioutilitiescore.QThread_NormalPriority

    InheritPriority = _openstudioutilitiescore.QThread_InheritPriority



    def exit(self, returnCode: 'int'=0) -> "void":

        return _openstudioutilitiescore.QThread_exit(self, returnCode)



    def isFinished(self) -> "bool":

        return _openstudioutilitiescore.QThread_isFinished(self)



    def isRunning(self) -> "bool":

        return _openstudioutilitiescore.QThread_isRunning(self)



    def quit(self) -> "void":

        return _openstudioutilitiescore.QThread_quit(self)



    def start(self, *args) -> "void":

        return _openstudioutilitiescore.QThread_start(self, *args)



    def terminate(self) -> "void":

        return _openstudioutilitiescore.QThread_terminate(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_QThread

    __del__ = lambda self: None

QThread_swigregister = _openstudioutilitiescore.QThread_swigregister

QThread_swigregister(QThread)



class QFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QFile, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QFile()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QFile

    __del__ = lambda self: None

QFile_swigregister = _openstudioutilitiescore.QFile_swigregister

QFile_swigregister(QFile)



class OptionalPath(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPath, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPath, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalPath(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalPath_reset(self)



    def __ref__(self) -> "openstudio::path":

        return _openstudioutilitiescore.OptionalPath___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalPath_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalPath_isNull(self)



    def get(self) -> "openstudio::path":

        return _openstudioutilitiescore.OptionalPath_get(self)



    def set(self, t: 'path') -> "void":

        return _openstudioutilitiescore.OptionalPath_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalPath

    __del__ = lambda self: None

OptionalPath_swigregister = _openstudioutilitiescore.OptionalPath_swigregister

OptionalPath_swigregister(OptionalPath)



class PathVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PathVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PathVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.PathVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.PathVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.PathVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::path >::size_type":

        return _openstudioutilitiescore.PathVector___len__(self)



    def pop(self) -> "std::vector< openstudio::path >::value_type":

        return _openstudioutilitiescore.PathVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::path >::difference_type', j: 'std::vector< openstudio::path >::difference_type') -> "std::vector< openstudio::path,std::allocator< openstudio::path > > *":

        return _openstudioutilitiescore.PathVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.PathVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::path >::difference_type', j: 'std::vector< openstudio::path >::difference_type') -> "void":

        return _openstudioutilitiescore.PathVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.PathVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::path >::value_type const &":

        return _openstudioutilitiescore.PathVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.PathVector___setitem__(self, *args)



    def append(self, x: 'path') -> "void":

        return _openstudioutilitiescore.PathVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.PathVector_empty(self)



    def size(self) -> "std::vector< openstudio::path >::size_type":

        return _openstudioutilitiescore.PathVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.PathVector_clear(self)



    def swap(self, v: 'PathVector') -> "void":

        return _openstudioutilitiescore.PathVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::path >::allocator_type":

        return _openstudioutilitiescore.PathVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::path >::iterator":

        return _openstudioutilitiescore.PathVector_begin(self)



    def end(self) -> "std::vector< openstudio::path >::iterator":

        return _openstudioutilitiescore.PathVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::path >::reverse_iterator":

        return _openstudioutilitiescore.PathVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::path >::reverse_iterator":

        return _openstudioutilitiescore.PathVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.PathVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::path >::iterator":

        return _openstudioutilitiescore.PathVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_PathVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'path') -> "void":

        return _openstudioutilitiescore.PathVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::path >::value_type const &":

        return _openstudioutilitiescore.PathVector_front(self)



    def back(self) -> "std::vector< openstudio::path >::value_type const &":

        return _openstudioutilitiescore.PathVector_back(self)



    def assign(self, n: 'std::vector< openstudio::path >::size_type', x: 'path') -> "void":

        return _openstudioutilitiescore.PathVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.PathVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.PathVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::path >::size_type') -> "void":

        return _openstudioutilitiescore.PathVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::path >::size_type":

        return _openstudioutilitiescore.PathVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_PathVector

    __del__ = lambda self: None

PathVector_swigregister = _openstudioutilitiescore.PathVector_swigregister

PathVector_swigregister(PathVector)



class PathPair(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PathPair, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PathPair, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_PathPair(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_setmethods__["first"] = _openstudioutilitiescore.PathPair_first_set

    __swig_getmethods__["first"] = _openstudioutilitiescore.PathPair_first_get

    if _newclass:

        first = _swig_property(_openstudioutilitiescore.PathPair_first_get, _openstudioutilitiescore.PathPair_first_set)

    __swig_setmethods__["second"] = _openstudioutilitiescore.PathPair_second_set

    __swig_getmethods__["second"] = _openstudioutilitiescore.PathPair_second_get

    if _newclass:

        second = _swig_property(_openstudioutilitiescore.PathPair_second_get, _openstudioutilitiescore.PathPair_second_set)

    def __len__(self):

        return 2

    def __repr__(self):

        return str((self.first, self.second))

    def __getitem__(self, index): 

        if not (index % 2):

            return self.first

        else:

            return self.second

    def __setitem__(self, index, val):

        if not (index % 2):

            self.first = val

        else:

            self.second = val

    __swig_destroy__ = _openstudioutilitiescore.delete_PathPair

    __del__ = lambda self: None

PathPair_swigregister = _openstudioutilitiescore.PathPair_swigregister

PathPair_swigregister(PathPair)



class PathPairVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PathPairVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PathPairVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.PathPairVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.PathPairVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.PathPairVector___bool__(self)



    def __len__(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::size_type":

        return _openstudioutilitiescore.PathPairVector___len__(self)



    def pop(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::value_type":

        return _openstudioutilitiescore.PathPairVector_pop(self)



    def __getslice__(self, i: 'std::vector< std::pair< openstudio::path,openstudio::path > >::difference_type', j: 'std::vector< std::pair< openstudio::path,openstudio::path > >::difference_type') -> "std::vector< std::pair< openstudio::path,openstudio::path >,std::allocator< std::pair< openstudio::path,openstudio::path > > > *":

        return _openstudioutilitiescore.PathPairVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.PathPairVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< std::pair< openstudio::path,openstudio::path > >::difference_type', j: 'std::vector< std::pair< openstudio::path,openstudio::path > >::difference_type') -> "void":

        return _openstudioutilitiescore.PathPairVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.PathPairVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::value_type const &":

        return _openstudioutilitiescore.PathPairVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.PathPairVector___setitem__(self, *args)



    def append(self, x: 'PathPair') -> "void":

        return _openstudioutilitiescore.PathPairVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.PathPairVector_empty(self)



    def size(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::size_type":

        return _openstudioutilitiescore.PathPairVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.PathPairVector_clear(self)



    def swap(self, v: 'PathPairVector') -> "void":

        return _openstudioutilitiescore.PathPairVector_swap(self, v)



    def get_allocator(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::allocator_type":

        return _openstudioutilitiescore.PathPairVector_get_allocator(self)



    def begin(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::iterator":

        return _openstudioutilitiescore.PathPairVector_begin(self)



    def end(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::iterator":

        return _openstudioutilitiescore.PathPairVector_end(self)



    def rbegin(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::reverse_iterator":

        return _openstudioutilitiescore.PathPairVector_rbegin(self)



    def rend(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::reverse_iterator":

        return _openstudioutilitiescore.PathPairVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.PathPairVector_pop_back(self)



    def erase(self, *args) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::iterator":

        return _openstudioutilitiescore.PathPairVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_PathPairVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PathPair') -> "void":

        return _openstudioutilitiescore.PathPairVector_push_back(self, x)



    def front(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::value_type const &":

        return _openstudioutilitiescore.PathPairVector_front(self)



    def back(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::value_type const &":

        return _openstudioutilitiescore.PathPairVector_back(self)



    def assign(self, n: 'std::vector< std::pair< openstudio::path,openstudio::path > >::size_type', x: 'PathPair') -> "void":

        return _openstudioutilitiescore.PathPairVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.PathPairVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.PathPairVector_insert(self, *args)



    def reserve(self, n: 'std::vector< std::pair< openstudio::path,openstudio::path > >::size_type') -> "void":

        return _openstudioutilitiescore.PathPairVector_reserve(self, n)



    def capacity(self) -> "std::vector< std::pair< openstudio::path,openstudio::path > >::size_type":

        return _openstudioutilitiescore.PathPairVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_PathPairVector

    __del__ = lambda self: None

PathPairVector_swigregister = _openstudioutilitiescore.PathPairVector_swigregister

PathPairVector_swigregister(PathPairVector)



class path(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, path, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, path, name)

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_path

    __del__ = lambda self: None



    def __idiv__(self, p: 'path') -> "openstudio::path &":

        return _openstudioutilitiescore.path___idiv__(self, p)



    def clear(self) -> "void":

        return _openstudioutilitiescore.path_clear(self)



    def swap(self, rhs: 'path') -> "void":

        return _openstudioutilitiescore.path_swap(self, rhs)



    def remove_filename(self) -> "openstudio::path &":

        return _openstudioutilitiescore.path_remove_filename(self)



    def replace_extension(self, *args) -> "openstudio::path &":

        return _openstudioutilitiescore.path_replace_extension(self, *args)



    def string(self) -> "openstudio::path":

        return _openstudioutilitiescore.path_string(self)



    def root_path(self) -> "openstudio::path":

        return _openstudioutilitiescore.path_root_path(self)



    def relative_path(self) -> "openstudio::path":

        return _openstudioutilitiescore.path_relative_path(self)



    def parent_path(self) -> "openstudio::path":

        return _openstudioutilitiescore.path_parent_path(self)



    def filename(self) -> "openstudio::path":

        return _openstudioutilitiescore.path_filename(self)



    def stem(self) -> "openstudio::path":

        return _openstudioutilitiescore.path_stem(self)



    def extension(self) -> "openstudio::path":

        return _openstudioutilitiescore.path_extension(self)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.path_empty(self)



    def is_complete(self) -> "bool":

        return _openstudioutilitiescore.path_is_complete(self)



    def has_root_path(self) -> "bool":

        return _openstudioutilitiescore.path_has_root_path(self)



    def has_root_name(self) -> "bool":

        return _openstudioutilitiescore.path_has_root_name(self)



    def has_root_directory(self) -> "bool":

        return _openstudioutilitiescore.path_has_root_directory(self)



    def has_relative_path(self) -> "bool":

        return _openstudioutilitiescore.path_has_relative_path(self)



    def has_filename(self) -> "bool":

        return _openstudioutilitiescore.path_has_filename(self)



    def has_parent_path(self) -> "bool":

        return _openstudioutilitiescore.path_has_parent_path(self)



    def __div__(self, other: 'path') -> "openstudio::path":

        return _openstudioutilitiescore.path___div__(self, other)



    def __str__(self) -> "std::string":

        return _openstudioutilitiescore.path___str__(self)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_path(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

path_swigregister = _openstudioutilitiescore.path_swigregister

path_swigregister(path)





def tempDir() -> "openstudio::path":

    return _openstudioutilitiescore.tempDir()

tempDir = _openstudioutilitiescore.tempDir



def toPath(*args) -> "openstudio::path":

    return _openstudioutilitiescore.toPath(*args)

toPath = _openstudioutilitiescore.toPath



def exists(p: 'path') -> "bool":

    return _openstudioutilitiescore.exists(p)

exists = _openstudioutilitiescore.exists



def create_directory(dir: 'path') -> "bool":

    return _openstudioutilitiescore.create_directory(dir)

create_directory = _openstudioutilitiescore.create_directory



def remove(p: 'path') -> "bool":

    return _openstudioutilitiescore.remove(p)

remove = _openstudioutilitiescore.remove



def remove_all(p: 'path') -> "unsigned long":

    return _openstudioutilitiescore.remove_all(p)

remove_all = _openstudioutilitiescore.remove_all



def copy_file(from_path: 'path', to_path: 'path') -> "void":

    return _openstudioutilitiescore.copy_file(from_path, to_path)

copy_file = _openstudioutilitiescore.copy_file



def complete(*args) -> "openstudio::path":

    return _openstudioutilitiescore.complete(*args)

complete = _openstudioutilitiescore.complete



def system_complete(p: 'path') -> "openstudio::path":

    return _openstudioutilitiescore.system_complete(p)

system_complete = _openstudioutilitiescore.system_complete



def modelFileExtension() -> "std::string":

    return _openstudioutilitiescore.modelFileExtension()

modelFileExtension = _openstudioutilitiescore.modelFileExtension



def componentFileExtension() -> "std::string":

    return _openstudioutilitiescore.componentFileExtension()

componentFileExtension = _openstudioutilitiescore.componentFileExtension



def tableFileExtension() -> "std::string":

    return _openstudioutilitiescore.tableFileExtension()

tableFileExtension = _openstudioutilitiescore.tableFileExtension



def documentFileExtension() -> "std::string":

    return _openstudioutilitiescore.documentFileExtension()

documentFileExtension = _openstudioutilitiescore.documentFileExtension



def rulesetFileExtension() -> "std::string":

    return _openstudioutilitiescore.rulesetFileExtension()

rulesetFileExtension = _openstudioutilitiescore.rulesetFileExtension



def completePathToFile(*args) -> "openstudio::path":

    return _openstudioutilitiescore.completePathToFile(*args)

completePathToFile = _openstudioutilitiescore.completePathToFile



def getFileExtension(p: 'path') -> "std::string":

    return _openstudioutilitiescore.getFileExtension(p)

getFileExtension = _openstudioutilitiescore.getFileExtension



def setFileExtension(p: 'path', ext: 'std::string const &', replaceOnMismatch: 'bool'=False, warnOnMismatch: 'bool'=True) -> "openstudio::path":

    return _openstudioutilitiescore.setFileExtension(p, ext, replaceOnMismatch, warnOnMismatch)

setFileExtension = _openstudioutilitiescore.setFileExtension



def makeParentFolder(*args) -> "bool":

    return _openstudioutilitiescore.makeParentFolder(*args)

makeParentFolder = _openstudioutilitiescore.makeParentFolder



def relativePath(p: 'path', base: 'path') -> "openstudio::path":

    return _openstudioutilitiescore.relativePath(p, base)

relativePath = _openstudioutilitiescore.relativePath



def completeAndNormalize(p: 'path') -> "openstudio::path":

    return _openstudioutilitiescore.completeAndNormalize(p)

completeAndNormalize = _openstudioutilitiescore.completeAndNormalize



def relocatePath(originalPath: 'path', originalBase: 'path', newBase: 'path') -> "openstudio::path":

    return _openstudioutilitiescore.relocatePath(originalPath, originalBase, newBase)

relocatePath = _openstudioutilitiescore.relocatePath



def getCompanionFolder(osmPath: 'path') -> "openstudio::path":

    return _openstudioutilitiescore.getCompanionFolder(osmPath)

getCompanionFolder = _openstudioutilitiescore.getCompanionFolder



def getLastLevelDirectoryName(directory: 'path') -> "openstudio::path":

    return _openstudioutilitiescore.getLastLevelDirectoryName(directory)

getLastLevelDirectoryName = _openstudioutilitiescore.getLastLevelDirectoryName



def printPathInformation(os: 'std::ostream &', p: 'path') -> "std::ostream &":

    return _openstudioutilitiescore.printPathInformation(os, p)

printPathInformation = _openstudioutilitiescore.printPathInformation



def removeDirectory(dirName: 'path') -> "bool":

    return _openstudioutilitiescore.removeDirectory(dirName)

removeDirectory = _openstudioutilitiescore.removeDirectory



def copyDirectory(source: 'path', destination: 'path') -> "bool":

    return _openstudioutilitiescore.copyDirectory(source, destination)

copyDirectory = _openstudioutilitiescore.copyDirectory



def isEmptyDirectory(dirName: 'path') -> "bool":

    return _openstudioutilitiescore.isEmptyDirectory(dirName)

isEmptyDirectory = _openstudioutilitiescore.isEmptyDirectory



def windowsDriveLetter(p: 'path') -> "boost::optional< std::string >":

    return _openstudioutilitiescore.windowsDriveLetter(p)

windowsDriveLetter = _openstudioutilitiescore.windowsDriveLetter



def isNetworkPath(p: 'path') -> "bool":

    return _openstudioutilitiescore.isNetworkPath(p)

isNetworkPath = _openstudioutilitiescore.isNetworkPath



def isNetworkPathAvailable(p: 'path') -> "bool":

    return _openstudioutilitiescore.isNetworkPathAvailable(p)

isNetworkPathAvailable = _openstudioutilitiescore.isNetworkPathAvailable



def funcOnlyTakesAConstPathRef(p: 'path') -> "openstudio::path":

    return _openstudioutilitiescore.funcOnlyTakesAConstPathRef(p)

funcOnlyTakesAConstPathRef = _openstudioutilitiescore.funcOnlyTakesAConstPathRef



def funcOnlyTakesAConstPath(p: 'path') -> "openstudio::path":

    return _openstudioutilitiescore.funcOnlyTakesAConstPath(p)

funcOnlyTakesAConstPath = _openstudioutilitiescore.funcOnlyTakesAConstPath



def funcOnlyTakesAPath(p: 'path') -> "openstudio::path":

    return _openstudioutilitiescore.funcOnlyTakesAPath(p)

funcOnlyTakesAPath = _openstudioutilitiescore.funcOnlyTakesAPath



def defaultArgFuncTakesAConstPathRef(p: 'path', copy: 'bool'=True) -> "openstudio::path":

    return _openstudioutilitiescore.defaultArgFuncTakesAConstPathRef(p, copy)

defaultArgFuncTakesAConstPathRef = _openstudioutilitiescore.defaultArgFuncTakesAConstPathRef



def defaultArgFuncTakesAConstPath(p: 'path', copy: 'bool'=True) -> "openstudio::path":

    return _openstudioutilitiescore.defaultArgFuncTakesAConstPath(p, copy)

defaultArgFuncTakesAConstPath = _openstudioutilitiescore.defaultArgFuncTakesAConstPath



def defaultArgFuncTakesAPath(p: 'path', copy: 'bool'=True) -> "openstudio::path":

    return _openstudioutilitiescore.defaultArgFuncTakesAPath(p, copy)

defaultArgFuncTakesAPath = _openstudioutilitiescore.defaultArgFuncTakesAPath



def openStudioVersion() -> "std::string":

    return _openstudioutilitiescore.openStudioVersion()

openStudioVersion = _openstudioutilitiescore.openStudioVersion



def openStudioLongVersion() -> "std::string":

    return _openstudioutilitiescore.openStudioLongVersion()

openStudioLongVersion = _openstudioutilitiescore.openStudioLongVersion



def energyPlusVersionMajor() -> "int":

    return _openstudioutilitiescore.energyPlusVersionMajor()

energyPlusVersionMajor = _openstudioutilitiescore.energyPlusVersionMajor



def energyPlusVersionMinor() -> "int":

    return _openstudioutilitiescore.energyPlusVersionMinor()

energyPlusVersionMinor = _openstudioutilitiescore.energyPlusVersionMinor



def energyPlusVersionPatch() -> "int":

    return _openstudioutilitiescore.energyPlusVersionPatch()

energyPlusVersionPatch = _openstudioutilitiescore.energyPlusVersionPatch



def energyPlusVersion() -> "std::string":

    return _openstudioutilitiescore.energyPlusVersion()

energyPlusVersion = _openstudioutilitiescore.energyPlusVersion



def energyPlusBuildSHA() -> "std::string":

    return _openstudioutilitiescore.energyPlusBuildSHA()

energyPlusBuildSHA = _openstudioutilitiescore.energyPlusBuildSHA



def rubyLibDir() -> "std::string":

    return _openstudioutilitiescore.rubyLibDir()

rubyLibDir = _openstudioutilitiescore.rubyLibDir



def rubyOpenStudioDir() -> "std::string":

    return _openstudioutilitiescore.rubyOpenStudioDir()

rubyOpenStudioDir = _openstudioutilitiescore.rubyOpenStudioDir



def getApplicationPath() -> "openstudio::path":

    return _openstudioutilitiescore.getApplicationPath()

getApplicationPath = _openstudioutilitiescore.getApplicationPath



def getApplicationDirectory() -> "openstudio::path":

    return _openstudioutilitiescore.getApplicationDirectory()

getApplicationDirectory = _openstudioutilitiescore.getApplicationDirectory



def getOpenStudioModule() -> "openstudio::path":

    return _openstudioutilitiescore.getOpenStudioModule()

getOpenStudioModule = _openstudioutilitiescore.getOpenStudioModule



def getOpenStudioModuleDirectory() -> "openstudio::path":

    return _openstudioutilitiescore.getOpenStudioModuleDirectory()

getOpenStudioModuleDirectory = _openstudioutilitiescore.getOpenStudioModuleDirectory



def getOpenStudioCLI() -> "openstudio::path":

    return _openstudioutilitiescore.getOpenStudioCLI()

getOpenStudioCLI = _openstudioutilitiescore.getOpenStudioCLI



def getEnergyPlusDirectory() -> "openstudio::path":

    return _openstudioutilitiescore.getEnergyPlusDirectory()

getEnergyPlusDirectory = _openstudioutilitiescore.getEnergyPlusDirectory



def getEnergyPlusExecutable() -> "openstudio::path":

    return _openstudioutilitiescore.getEnergyPlusExecutable()

getEnergyPlusExecutable = _openstudioutilitiescore.getEnergyPlusExecutable



def getRadianceDirectory() -> "openstudio::path":

    return _openstudioutilitiescore.getRadianceDirectory()

getRadianceDirectory = _openstudioutilitiescore.getRadianceDirectory



def getPerlExecutable() -> "openstudio::path":

    return _openstudioutilitiescore.getPerlExecutable()

getPerlExecutable = _openstudioutilitiescore.getPerlExecutable

class PathWatcher(QObject):

    __swig_setmethods__ = {}

    for _s in [QObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PathWatcher, name, value)

    __swig_getmethods__ = {}

    for _s in [QObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PathWatcher, name)

    __repr__ = _swig_repr



    def __init__(self, p: 'path', msec: 'int'=1000):

        if self.__class__ == PathWatcher:

            _self = None

        else:

            _self = self

        this = _openstudioutilitiescore.new_PathWatcher(_self, p, msec)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_PathWatcher

    __del__ = lambda self: None



    def enabled(self) -> "bool":

        return _openstudioutilitiescore.PathWatcher_enabled(self)



    def enable(self) -> "void":

        return _openstudioutilitiescore.PathWatcher_enable(self)



    def disable(self) -> "bool":

        return _openstudioutilitiescore.PathWatcher_disable(self)



    def path(self) -> "openstudio::path":

        return _openstudioutilitiescore.PathWatcher_path(self)



    def dirty(self) -> "bool":

        return _openstudioutilitiescore.PathWatcher_dirty(self)



    def clearState(self) -> "void":

        return _openstudioutilitiescore.PathWatcher_clearState(self)



    def onPathAdded(self) -> "void":

        return _openstudioutilitiescore.PathWatcher_onPathAdded(self)



    def onPathChanged(self) -> "void":

        return _openstudioutilitiescore.PathWatcher_onPathChanged(self)



    def onPathRemoved(self) -> "void":

        return _openstudioutilitiescore.PathWatcher_onPathRemoved(self)



    def directoryChanged(self, path: 'QString') -> "void":

        return _openstudioutilitiescore.PathWatcher_directoryChanged(self, path)



    def fileChanged(self, path: 'QString') -> "void":

        return _openstudioutilitiescore.PathWatcher_fileChanged(self, path)



    def checkFile(self) -> "void":

        return _openstudioutilitiescore.PathWatcher_checkFile(self)

    def __disown__(self):

        self.this.disown()

        _openstudioutilitiescore.disown_PathWatcher(self)

        return weakref_proxy(self)

PathWatcher_swigregister = _openstudioutilitiescore.PathWatcher_swigregister

PathWatcher_swigregister(PathWatcher)





def toWString(q: 'QString') -> "std::wstring":

    return _openstudioutilitiescore.toWString(q)

toWString = _openstudioutilitiescore.toWString



def toQString(*args) -> "QString":

    return _openstudioutilitiescore.toQString(*args)

toQString = _openstudioutilitiescore.toQString

class DocumentFormat(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, DocumentFormat, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, DocumentFormat, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_DocumentFormat(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiescore.DocumentFormat_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiescore.DocumentFormat_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiescore.DocumentFormat_valueDescription(self)



    def __eq__(self, other: 'DocumentFormat') -> "bool":

        return _openstudioutilitiescore.DocumentFormat___eq__(self, other)



    def __ne__(self, other: 'DocumentFormat') -> "bool":

        return _openstudioutilitiescore.DocumentFormat___ne__(self, other)



    def __gt__(self, other: 'DocumentFormat') -> "bool":

        return _openstudioutilitiescore.DocumentFormat___gt__(self, other)



    def __ge__(self, other: 'DocumentFormat') -> "bool":

        return _openstudioutilitiescore.DocumentFormat___ge__(self, other)



    def __lt__(self, other: 'DocumentFormat') -> "bool":

        return _openstudioutilitiescore.DocumentFormat___lt__(self, other)



    def __le__(self, other: 'DocumentFormat') -> "bool":

        return _openstudioutilitiescore.DocumentFormat___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiescore.DocumentFormat_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiescore.DocumentFormat_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiescore.DocumentFormat_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiescore.DocumentFormat_getValues)

    __swig_destroy__ = _openstudioutilitiescore.delete_DocumentFormat

    __del__ = lambda self: None

DocumentFormat_swigregister = _openstudioutilitiescore.DocumentFormat_swigregister

DocumentFormat_swigregister(DocumentFormat)



def DocumentFormat_enumName() -> "std::string":

    return _openstudioutilitiescore.DocumentFormat_enumName()

DocumentFormat_enumName = _openstudioutilitiescore.DocumentFormat_enumName



def DocumentFormat_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiescore.DocumentFormat_getValues()

DocumentFormat_getValues = _openstudioutilitiescore.DocumentFormat_getValues





def toCamelCase(s: 'std::string const &') -> "std::string":

    return _openstudioutilitiescore.toCamelCase(s)

toCamelCase = _openstudioutilitiescore.toCamelCase



def toUpperCamelCase(s: 'std::string const &') -> "std::string":

    return _openstudioutilitiescore.toUpperCamelCase(s)

toUpperCamelCase = _openstudioutilitiescore.toUpperCamelCase



def toLowerCamelCase(s: 'std::string const &') -> "std::string":

    return _openstudioutilitiescore.toLowerCamelCase(s)

toLowerCamelCase = _openstudioutilitiescore.toLowerCamelCase



def toUnderscoreCase(s: 'std::string const &') -> "std::string":

    return _openstudioutilitiescore.toUnderscoreCase(s)

toUnderscoreCase = _openstudioutilitiescore.toUnderscoreCase



def convertIddName(s: 'std::string const &') -> "std::string":

    return _openstudioutilitiescore.convertIddName(s)

convertIddName = _openstudioutilitiescore.convertIddName



def iddObjectNameToIdfObjectName(s: 'std::string const &') -> "std::string":

    return _openstudioutilitiescore.iddObjectNameToIdfObjectName(s)

iddObjectNameToIdfObjectName = _openstudioutilitiescore.iddObjectNameToIdfObjectName



def toNeatString(value: 'double', numFractionalDigits: 'unsigned int'=0, applyCommas: 'bool'=True) -> "std::string":

    return _openstudioutilitiescore.toNeatString(value, numFractionalDigits, applyCommas)

toNeatString = _openstudioutilitiescore.toNeatString



def toNeatStringBySigFigs(value: 'double', numSigFigs: 'unsigned int'=3, applyCommas: 'bool'=True) -> "std::string":

    return _openstudioutilitiescore.toNeatStringBySigFigs(value, numSigFigs, applyCommas)

toNeatStringBySigFigs = _openstudioutilitiescore.toNeatStringBySigFigs



def numFractionalDigits(*args) -> "std::pair< unsigned int,unsigned int >":

    return _openstudioutilitiescore.numFractionalDigits(*args)

numFractionalDigits = _openstudioutilitiescore.numFractionalDigits



def toNumSigFigs(value: 'double', numSigFigs: 'unsigned int') -> "double":

    return _openstudioutilitiescore.toNumSigFigs(value, numSigFigs)

toNumSigFigs = _openstudioutilitiescore.toNumSigFigs



def superscript() -> "boost::regex":

    return _openstudioutilitiescore.superscript()

superscript = _openstudioutilitiescore.superscript



def subscript() -> "boost::regex":

    return _openstudioutilitiescore.subscript()

subscript = _openstudioutilitiescore.subscript



def formatText(str: 'std::string const &', fmt: 'DocumentFormat') -> "std::string":

    return _openstudioutilitiescore.formatText(str, fmt)

formatText = _openstudioutilitiescore.formatText



def formatUnderscore(str: 'std::string const &') -> "std::string":

    return _openstudioutilitiescore.formatUnderscore(str)

formatUnderscore = _openstudioutilitiescore.formatUnderscore



def formatSuperAndSubscripts(str: 'std::string const &', fmt: 'DocumentFormat') -> "std::string":

    return _openstudioutilitiescore.formatSuperAndSubscripts(str, fmt)

formatSuperAndSubscripts = _openstudioutilitiescore.formatSuperAndSubscripts



def formatUnitString(str: 'std::string const &', fmt: 'DocumentFormat') -> "std::string":

    return _openstudioutilitiescore.formatUnitString(str, fmt)

formatUnitString = _openstudioutilitiescore.formatUnitString



def splitString(string: 'std::string const &', delimiter: 'char') -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudioutilitiescore.splitString(string, delimiter)

splitString = _openstudioutilitiescore.splitString



def splitEMSLineToTokens(*args) -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudioutilitiescore.splitEMSLineToTokens(*args)

splitEMSLineToTokens = _openstudioutilitiescore.splitEMSLineToTokens

class Application(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_getmethods__["instance"] = lambda x: _openstudioutilitiescore.Application_instance

    if _newclass:

        instance = staticmethod(_openstudioutilitiescore.Application_instance)

    __swig_destroy__ = _openstudioutilitiescore.delete_Application

    __del__ = lambda self: None

Application_swigregister = _openstudioutilitiescore.Application_swigregister

Application_swigregister(Application)



def Application_instance() -> "openstudio::ApplicationSingleton &":

    return _openstudioutilitiescore.Application_instance()

Application_instance = _openstudioutilitiescore.Application_instance



class ApplicationSingleton(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationSingleton, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationSingleton, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr



    def application(self, gui: 'bool'=True) -> "QCoreApplication *":

        return _openstudioutilitiescore.ApplicationSingleton_application(self, gui)



    def hasApplication(self) -> "bool":

        return _openstudioutilitiescore.ApplicationSingleton_hasApplication(self)



    def hasGUI(self) -> "bool":

        return _openstudioutilitiescore.ApplicationSingleton_hasGUI(self)



    def setApplication(self, qApplication: 'QCoreApplication') -> "bool":

        return _openstudioutilitiescore.ApplicationSingleton_setApplication(self, qApplication)



    def sketchUpWidget(self) -> "QWidget *":

        return _openstudioutilitiescore.ApplicationSingleton_sketchUpWidget(self)



    def processEvents(self, *args) -> "bool":

        return _openstudioutilitiescore.ApplicationSingleton_processEvents(self, *args)



    def hasSetting(self, key: 'std::string const &') -> "bool":

        return _openstudioutilitiescore.ApplicationSingleton_hasSetting(self, key)



    def removeSetting(self, key: 'std::string const &') -> "void":

        return _openstudioutilitiescore.ApplicationSingleton_removeSetting(self, key)



    def isDefaultInstance(self) -> "bool":

        return _openstudioutilitiescore.ApplicationSingleton_isDefaultInstance(self)



    def getSettingValueAsBool(self, key: 'std::string const &') -> "boost::optional< bool >":

        return _openstudioutilitiescore.ApplicationSingleton_getSettingValueAsBool(self, key)



    def getSettingValueAsInt(self, key: 'std::string const &') -> "boost::optional< int >":

        return _openstudioutilitiescore.ApplicationSingleton_getSettingValueAsInt(self, key)



    def getSettingValueAsDouble(self, key: 'std::string const &') -> "boost::optional< double >":

        return _openstudioutilitiescore.ApplicationSingleton_getSettingValueAsDouble(self, key)



    def getSettingValueAsString(self, key: 'std::string const &') -> "boost::optional< std::string >":

        return _openstudioutilitiescore.ApplicationSingleton_getSettingValueAsString(self, key)



    def setSettingValue(self, *args) -> "void":

        return _openstudioutilitiescore.ApplicationSingleton_setSettingValue(self, *args)

    __swig_destroy__ = _openstudioutilitiescore.delete_ApplicationSingleton

    __del__ = lambda self: None

ApplicationSingleton_swigregister = _openstudioutilitiescore.ApplicationSingleton_swigregister

ApplicationSingleton_swigregister(ApplicationSingleton)



class OptionalLogLevel(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLogLevel, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLogLevel, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalLogLevel(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalLogLevel_reset(self)



    def __ref__(self) -> "LogLevel":

        return _openstudioutilitiescore.OptionalLogLevel___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalLogLevel_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalLogLevel_isNull(self)



    def get(self) -> "LogLevel":

        return _openstudioutilitiescore.OptionalLogLevel_get(self)



    def set(self, t: 'LogLevel const &') -> "void":

        return _openstudioutilitiescore.OptionalLogLevel_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalLogLevel

    __del__ = lambda self: None

OptionalLogLevel_swigregister = _openstudioutilitiescore.OptionalLogLevel_swigregister

OptionalLogLevel_swigregister(OptionalLogLevel)



class LogMessageVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, LogMessageVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, LogMessageVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.LogMessageVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.LogMessageVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.LogMessageVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::LogMessage >::size_type":

        return _openstudioutilitiescore.LogMessageVector___len__(self)



    def pop(self) -> "std::vector< openstudio::LogMessage >::value_type":

        return _openstudioutilitiescore.LogMessageVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::LogMessage >::difference_type', j: 'std::vector< openstudio::LogMessage >::difference_type') -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > > *":

        return _openstudioutilitiescore.LogMessageVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.LogMessageVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::LogMessage >::difference_type', j: 'std::vector< openstudio::LogMessage >::difference_type') -> "void":

        return _openstudioutilitiescore.LogMessageVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.LogMessageVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::LogMessage >::value_type const &":

        return _openstudioutilitiescore.LogMessageVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.LogMessageVector___setitem__(self, *args)



    def append(self, x: 'LogMessage') -> "void":

        return _openstudioutilitiescore.LogMessageVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.LogMessageVector_empty(self)



    def size(self) -> "std::vector< openstudio::LogMessage >::size_type":

        return _openstudioutilitiescore.LogMessageVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.LogMessageVector_clear(self)



    def swap(self, v: 'LogMessageVector') -> "void":

        return _openstudioutilitiescore.LogMessageVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::LogMessage >::allocator_type":

        return _openstudioutilitiescore.LogMessageVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::LogMessage >::iterator":

        return _openstudioutilitiescore.LogMessageVector_begin(self)



    def end(self) -> "std::vector< openstudio::LogMessage >::iterator":

        return _openstudioutilitiescore.LogMessageVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::LogMessage >::reverse_iterator":

        return _openstudioutilitiescore.LogMessageVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::LogMessage >::reverse_iterator":

        return _openstudioutilitiescore.LogMessageVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.LogMessageVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::LogMessage >::iterator":

        return _openstudioutilitiescore.LogMessageVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_LogMessageVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'LogMessage') -> "void":

        return _openstudioutilitiescore.LogMessageVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::LogMessage >::value_type const &":

        return _openstudioutilitiescore.LogMessageVector_front(self)



    def back(self) -> "std::vector< openstudio::LogMessage >::value_type const &":

        return _openstudioutilitiescore.LogMessageVector_back(self)



    def assign(self, n: 'std::vector< openstudio::LogMessage >::size_type', x: 'LogMessage') -> "void":

        return _openstudioutilitiescore.LogMessageVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::LogMessage >::size_type', x: 'LogMessage') -> "void":

        return _openstudioutilitiescore.LogMessageVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.LogMessageVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::LogMessage >::size_type') -> "void":

        return _openstudioutilitiescore.LogMessageVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::LogMessage >::size_type":

        return _openstudioutilitiescore.LogMessageVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_LogMessageVector

    __del__ = lambda self: None

LogMessageVector_swigregister = _openstudioutilitiescore.LogMessageVector_swigregister

LogMessageVector_swigregister(LogMessageVector)



class OptionalLogMessage(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLogMessage, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLogMessage, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalLogMessage(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalLogMessage_reset(self)



    def __ref__(self) -> "openstudio::LogMessage":

        return _openstudioutilitiescore.OptionalLogMessage___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalLogMessage_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalLogMessage_isNull(self)



    def get(self) -> "openstudio::LogMessage":

        return _openstudioutilitiescore.OptionalLogMessage_get(self)



    def set(self, t: 'LogMessage') -> "void":

        return _openstudioutilitiescore.OptionalLogMessage_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalLogMessage

    __del__ = lambda self: None

OptionalLogMessage_swigregister = _openstudioutilitiescore.OptionalLogMessage_swigregister

OptionalLogMessage_swigregister(OptionalLogMessage)



class Logger(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_getmethods__["instance"] = lambda x: _openstudioutilitiescore.Logger_instance

    if _newclass:

        instance = staticmethod(_openstudioutilitiescore.Logger_instance)

    __swig_destroy__ = _openstudioutilitiescore.delete_Logger

    __del__ = lambda self: None

Logger_swigregister = _openstudioutilitiescore.Logger_swigregister

Logger_swigregister(Logger)



def Logger_instance() -> "openstudio::LoggerSingleton &":

    return _openstudioutilitiescore.Logger_instance()

Logger_instance = _openstudioutilitiescore.Logger_instance





_openstudioutilitiescore.Trace_swigconstant(_openstudioutilitiescore)

Trace = _openstudioutilitiescore.Trace



_openstudioutilitiescore.Debug_swigconstant(_openstudioutilitiescore)

Debug = _openstudioutilitiescore.Debug



_openstudioutilitiescore.Info_swigconstant(_openstudioutilitiescore)

Info = _openstudioutilitiescore.Info



_openstudioutilitiescore.Warn_swigconstant(_openstudioutilitiescore)

Warn = _openstudioutilitiescore.Warn



_openstudioutilitiescore.Error_swigconstant(_openstudioutilitiescore)

Error = _openstudioutilitiescore.Error



_openstudioutilitiescore.Fatal_swigconstant(_openstudioutilitiescore)

Fatal = _openstudioutilitiescore.Fatal

class LogMessage(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, LogMessage, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, LogMessage, name)

    __repr__ = _swig_repr



    def __init__(self, logLevel: 'LogLevel', channel: 'std::string const &', message: 'std::string const &'):

        this = _openstudioutilitiescore.new_LogMessage(logLevel, channel, message)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_getmethods__["parseLogText"] = lambda x: _openstudioutilitiescore.LogMessage_parseLogText

    if _newclass:

        parseLogText = staticmethod(_openstudioutilitiescore.LogMessage_parseLogText)



    def logLevel(self) -> "LogLevel":

        return _openstudioutilitiescore.LogMessage_logLevel(self)



    def logChannel(self) -> "openstudio::LogChannel":

        return _openstudioutilitiescore.LogMessage_logChannel(self)



    def logMessage(self) -> "std::string":

        return _openstudioutilitiescore.LogMessage_logMessage(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_LogMessage

    __del__ = lambda self: None

LogMessage_swigregister = _openstudioutilitiescore.LogMessage_swigregister

LogMessage_swigregister(LogMessage)



def LogMessage_parseLogText(logText: 'std::string const &') -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

    return _openstudioutilitiescore.LogMessage_parseLogText(logText)

LogMessage_parseLogText = _openstudioutilitiescore.LogMessage_parseLogText



class LogSink(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, LogSink, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, LogSink, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr



    def isEnabled(self) -> "bool":

        return _openstudioutilitiescore.LogSink_isEnabled(self)



    def enable(self) -> "void":

        return _openstudioutilitiescore.LogSink_enable(self)



    def disable(self) -> "void":

        return _openstudioutilitiescore.LogSink_disable(self)



    def logLevel(self) -> "boost::optional< LogLevel >":

        return _openstudioutilitiescore.LogSink_logLevel(self)



    def setLogLevel(self, logLevel: 'LogLevel') -> "void":

        return _openstudioutilitiescore.LogSink_setLogLevel(self, logLevel)



    def resetLogLevel(self) -> "void":

        return _openstudioutilitiescore.LogSink_resetLogLevel(self)



    def channelRegex(self) -> "boost::optional< boost::regex >":

        return _openstudioutilitiescore.LogSink_channelRegex(self)



    def setChannelRegex(self, *args) -> "void":

        return _openstudioutilitiescore.LogSink_setChannelRegex(self, *args)



    def resetChannelRegex(self) -> "void":

        return _openstudioutilitiescore.LogSink_resetChannelRegex(self)



    def autoFlush(self) -> "bool":

        return _openstudioutilitiescore.LogSink_autoFlush(self)



    def setAutoFlush(self, autoFlush: 'bool') -> "void":

        return _openstudioutilitiescore.LogSink_setAutoFlush(self, autoFlush)



    def threadId(self) -> "QThread *":

        return _openstudioutilitiescore.LogSink_threadId(self)



    def setThreadId(self, threadId: 'QThread') -> "void":

        return _openstudioutilitiescore.LogSink_setThreadId(self, threadId)



    def resetThreadId(self) -> "void":

        return _openstudioutilitiescore.LogSink_resetThreadId(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_LogSink

    __del__ = lambda self: None

LogSink_swigregister = _openstudioutilitiescore.LogSink_swigregister

LogSink_swigregister(LogSink)



class FileLogSink(LogSink):

    __swig_setmethods__ = {}

    for _s in [LogSink]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLogSink, name, value)

    __swig_getmethods__ = {}

    for _s in [LogSink]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, FileLogSink, name)

    __repr__ = _swig_repr



    def __init__(self, path: 'path'):

        this = _openstudioutilitiescore.new_FileLogSink(path)

        try:

            self.this.append(this)

        except:

            self.this = this



    def path(self) -> "openstudio::path":

        return _openstudioutilitiescore.FileLogSink_path(self)



    def logMessages(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudioutilitiescore.FileLogSink_logMessages(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_FileLogSink

    __del__ = lambda self: None

FileLogSink_swigregister = _openstudioutilitiescore.FileLogSink_swigregister

FileLogSink_swigregister(FileLogSink)



class StringStreamLogSink(LogSink):

    __swig_setmethods__ = {}

    for _s in [LogSink]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStreamLogSink, name, value)

    __swig_getmethods__ = {}

    for _s in [LogSink]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, StringStreamLogSink, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_StringStreamLogSink()

        try:

            self.this.append(this)

        except:

            self.this = this



    def string(self) -> "std::string":

        return _openstudioutilitiescore.StringStreamLogSink_string(self)



    def logMessages(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudioutilitiescore.StringStreamLogSink_logMessages(self)



    def resetStringStream(self) -> "void":

        return _openstudioutilitiescore.StringStreamLogSink_resetStringStream(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_StringStreamLogSink

    __del__ = lambda self: None

StringStreamLogSink_swigregister = _openstudioutilitiescore.StringStreamLogSink_swigregister

StringStreamLogSink_swigregister(StringStreamLogSink)





def logFree(level: 'LogLevel', channel: 'std::string const &', message: 'std::string const &') -> "void":

    return _openstudioutilitiescore.logFree(level, channel, message)

logFree = _openstudioutilitiescore.logFree

class LoggerSingleton(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, LoggerSingleton, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, LoggerSingleton, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_LoggerSingleton

    __del__ = lambda self: None



    def standardOutLogger(self) -> "openstudio::LogSink":

        return _openstudioutilitiescore.LoggerSingleton_standardOutLogger(self)



    def standardErrLogger(self) -> "openstudio::LogSink":

        return _openstudioutilitiescore.LoggerSingleton_standardErrLogger(self)

LoggerSingleton_swigregister = _openstudioutilitiescore.LoggerSingleton_swigregister

LoggerSingleton_swigregister(LoggerSingleton)



class UpdateManager(QObject):

    __swig_setmethods__ = {}

    for _s in [QObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdateManager, name, value)

    __swig_getmethods__ = {}

    for _s in [QObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, UpdateManager, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        if self.__class__ == UpdateManager:

            _self = None

        else:

            _self = self

        this = _openstudioutilitiescore.new_UpdateManager(_self, *args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_UpdateManager

    __del__ = lambda self: None



    def appName(self) -> "std::string":

        return _openstudioutilitiescore.UpdateManager_appName(self)



    def finished(self) -> "bool":

        return _openstudioutilitiescore.UpdateManager_finished(self)



    def error(self) -> "bool":

        return _openstudioutilitiescore.UpdateManager_error(self)



    def newMajorRelease(self) -> "bool":

        return _openstudioutilitiescore.UpdateManager_newMajorRelease(self)



    def newMinorRelease(self) -> "bool":

        return _openstudioutilitiescore.UpdateManager_newMinorRelease(self)



    def newPatchRelease(self) -> "bool":

        return _openstudioutilitiescore.UpdateManager_newPatchRelease(self)



    def mostRecentVersion(self) -> "std::string":

        return _openstudioutilitiescore.UpdateManager_mostRecentVersion(self)



    def mostRecentDownloadUrl(self) -> "std::string":

        return _openstudioutilitiescore.UpdateManager_mostRecentDownloadUrl(self)



    def updateMessages(self) -> "std::vector< std::string,std::allocator< std::string > >":

        return _openstudioutilitiescore.UpdateManager_updateMessages(self)



    def replyFinished(self, reply: 'QNetworkReply') -> "void":

        return _openstudioutilitiescore.UpdateManager_replyFinished(self, reply)



    def replyProcessed(self) -> "void":

        return _openstudioutilitiescore.UpdateManager_replyProcessed(self)

    def __disown__(self):

        self.this.disown()

        _openstudioutilitiescore.disown_UpdateManager(self)

        return weakref_proxy(self)

UpdateManager_swigregister = _openstudioutilitiescore.UpdateManager_swigregister

UpdateManager_swigregister(UpdateManager)



class Url(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Url, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Url, name)

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioutilitiescore.delete_Url

    __del__ = lambda self: None



    def __init__(self, s: 'std::string const &'):

        this = _openstudioutilitiescore.new_Url(s)

        try:

            self.this.append(this)

        except:

            self.this = this



    def __str__(self) -> "std::string":

        return _openstudioutilitiescore.Url___str__(self)

Url_swigregister = _openstudioutilitiescore.Url_swigregister

Url_swigregister(Url)



class OptionalUrl(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalUrl, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalUrl, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalUrl(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalUrl_reset(self)



    def __ref__(self) -> "openstudio::Url":

        return _openstudioutilitiescore.OptionalUrl___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalUrl_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalUrl_isNull(self)



    def get(self) -> "openstudio::Url":

        return _openstudioutilitiescore.OptionalUrl_get(self)



    def set(self, t: 'Url') -> "void":

        return _openstudioutilitiescore.OptionalUrl_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalUrl

    __del__ = lambda self: None

OptionalUrl_swigregister = _openstudioutilitiescore.OptionalUrl_swigregister

OptionalUrl_swigregister(OptionalUrl)



class UrlVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, UrlVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, UrlVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.UrlVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.UrlVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.UrlVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::Url >::size_type":

        return _openstudioutilitiescore.UrlVector___len__(self)



    def pop(self) -> "std::vector< openstudio::Url >::value_type":

        return _openstudioutilitiescore.UrlVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::Url >::difference_type', j: 'std::vector< openstudio::Url >::difference_type') -> "std::vector< openstudio::Url,std::allocator< openstudio::Url > > *":

        return _openstudioutilitiescore.UrlVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.UrlVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::Url >::difference_type', j: 'std::vector< openstudio::Url >::difference_type') -> "void":

        return _openstudioutilitiescore.UrlVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.UrlVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::Url >::value_type const &":

        return _openstudioutilitiescore.UrlVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.UrlVector___setitem__(self, *args)



    def append(self, x: 'Url') -> "void":

        return _openstudioutilitiescore.UrlVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.UrlVector_empty(self)



    def size(self) -> "std::vector< openstudio::Url >::size_type":

        return _openstudioutilitiescore.UrlVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.UrlVector_clear(self)



    def swap(self, v: 'UrlVector') -> "void":

        return _openstudioutilitiescore.UrlVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::Url >::allocator_type":

        return _openstudioutilitiescore.UrlVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::Url >::iterator":

        return _openstudioutilitiescore.UrlVector_begin(self)



    def end(self) -> "std::vector< openstudio::Url >::iterator":

        return _openstudioutilitiescore.UrlVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::Url >::reverse_iterator":

        return _openstudioutilitiescore.UrlVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::Url >::reverse_iterator":

        return _openstudioutilitiescore.UrlVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.UrlVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::Url >::iterator":

        return _openstudioutilitiescore.UrlVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_UrlVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Url') -> "void":

        return _openstudioutilitiescore.UrlVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::Url >::value_type const &":

        return _openstudioutilitiescore.UrlVector_front(self)



    def back(self) -> "std::vector< openstudio::Url >::value_type const &":

        return _openstudioutilitiescore.UrlVector_back(self)



    def assign(self, n: 'std::vector< openstudio::Url >::size_type', x: 'Url') -> "void":

        return _openstudioutilitiescore.UrlVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.UrlVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.UrlVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::Url >::size_type') -> "void":

        return _openstudioutilitiescore.UrlVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::Url >::size_type":

        return _openstudioutilitiescore.UrlVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_UrlVector

    __del__ = lambda self: None

UrlVector_swigregister = _openstudioutilitiescore.UrlVector_swigregister

UrlVector_swigregister(UrlVector)





def completeURL(t_source: 'Url', t_searchPaths: 'UrlVector', throwOnFailure: 'bool'=True) -> "openstudio::Url":

    return _openstudioutilitiescore.completeURL(t_source, t_searchPaths, throwOnFailure)

completeURL = _openstudioutilitiescore.completeURL



def toURL(*args) -> "openstudio::Url":

    return _openstudioutilitiescore.toURL(*args)

toURL = _openstudioutilitiescore.toURL



def toString(*args) -> "std::string":

    return _openstudioutilitiescore.toString(*args)

toString = _openstudioutilitiescore.toString



def getOriginalPath(url: 'Url') -> "openstudio::path":

    return _openstudioutilitiescore.getOriginalPath(url)

getOriginalPath = _openstudioutilitiescore.getOriginalPath



def getOptionalOriginalPath(url: 'Url') -> "boost::optional< openstudio::path >":

    return _openstudioutilitiescore.getOptionalOriginalPath(url)

getOptionalOriginalPath = _openstudioutilitiescore.getOptionalOriginalPath

class UUID(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, UUID, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, UUID, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.UUID_isNull(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_UUID

    __del__ = lambda self: None

    __swig_getmethods__["create"] = lambda x: _openstudioutilitiescore.UUID_create

    if _newclass:

        create = staticmethod(_openstudioutilitiescore.UUID_create)



    def __str__(self) -> "std::string":

        return _openstudioutilitiescore.UUID___str__(self)



    def __ne__(self, other: 'UUID') -> "bool":

        return _openstudioutilitiescore.UUID___ne__(self, other)



    def __lt__(self, other: 'UUID') -> "bool":

        return _openstudioutilitiescore.UUID___lt__(self, other)



    def __eq__(self, other: 'UUID') -> "bool":

        return _openstudioutilitiescore.UUID___eq__(self, other)



    def __gt__(self, other: 'UUID') -> "bool":

        return _openstudioutilitiescore.UUID___gt__(self, other)

UUID_swigregister = _openstudioutilitiescore.UUID_swigregister

UUID_swigregister(UUID)



def UUID_create() -> "openstudio::UUID":

    return _openstudioutilitiescore.UUID_create()

UUID_create = _openstudioutilitiescore.UUID_create





def toUUID(str: 'std::string const &') -> "openstudio::UUID":

    return _openstudioutilitiescore.toUUID(str)

toUUID = _openstudioutilitiescore.toUUID



def createUUID() -> "openstudio::UUID":

    return _openstudioutilitiescore.createUUID()

createUUID = _openstudioutilitiescore.createUUID



def removeBraces(uuid: 'UUID') -> "std::string":

    return _openstudioutilitiescore.removeBraces(uuid)

removeBraces = _openstudioutilitiescore.removeBraces

class OptionalUUID(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalUUID, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalUUID, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalUUID(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalUUID_reset(self)



    def __ref__(self) -> "openstudio::UUID":

        return _openstudioutilitiescore.OptionalUUID___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalUUID_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalUUID_isNull(self)



    def get(self) -> "openstudio::UUID":

        return _openstudioutilitiescore.OptionalUUID_get(self)



    def set(self, t: 'UUID') -> "void":

        return _openstudioutilitiescore.OptionalUUID_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalUUID

    __del__ = lambda self: None

OptionalUUID_swigregister = _openstudioutilitiescore.OptionalUUID_swigregister

OptionalUUID_swigregister(OptionalUUID)



class UUIDVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, UUIDVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, UUIDVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.UUIDVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.UUIDVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.UUIDVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::UUID >::size_type":

        return _openstudioutilitiescore.UUIDVector___len__(self)



    def pop(self) -> "std::vector< openstudio::UUID >::value_type":

        return _openstudioutilitiescore.UUIDVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::UUID >::difference_type', j: 'std::vector< openstudio::UUID >::difference_type') -> "std::vector< openstudio::UUID,std::allocator< openstudio::UUID > > *":

        return _openstudioutilitiescore.UUIDVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.UUIDVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::UUID >::difference_type', j: 'std::vector< openstudio::UUID >::difference_type') -> "void":

        return _openstudioutilitiescore.UUIDVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.UUIDVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::UUID >::value_type const &":

        return _openstudioutilitiescore.UUIDVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.UUIDVector___setitem__(self, *args)



    def append(self, x: 'UUID') -> "void":

        return _openstudioutilitiescore.UUIDVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.UUIDVector_empty(self)



    def size(self) -> "std::vector< openstudio::UUID >::size_type":

        return _openstudioutilitiescore.UUIDVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.UUIDVector_clear(self)



    def swap(self, v: 'UUIDVector') -> "void":

        return _openstudioutilitiescore.UUIDVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::UUID >::allocator_type":

        return _openstudioutilitiescore.UUIDVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::UUID >::iterator":

        return _openstudioutilitiescore.UUIDVector_begin(self)



    def end(self) -> "std::vector< openstudio::UUID >::iterator":

        return _openstudioutilitiescore.UUIDVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::UUID >::reverse_iterator":

        return _openstudioutilitiescore.UUIDVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::UUID >::reverse_iterator":

        return _openstudioutilitiescore.UUIDVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.UUIDVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::UUID >::iterator":

        return _openstudioutilitiescore.UUIDVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_UUIDVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'UUID') -> "void":

        return _openstudioutilitiescore.UUIDVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::UUID >::value_type const &":

        return _openstudioutilitiescore.UUIDVector_front(self)



    def back(self) -> "std::vector< openstudio::UUID >::value_type const &":

        return _openstudioutilitiescore.UUIDVector_back(self)



    def assign(self, n: 'std::vector< openstudio::UUID >::size_type', x: 'UUID') -> "void":

        return _openstudioutilitiescore.UUIDVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.UUIDVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.UUIDVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::UUID >::size_type') -> "void":

        return _openstudioutilitiescore.UUIDVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::UUID >::size_type":

        return _openstudioutilitiescore.UUIDVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_UUIDVector

    __del__ = lambda self: None

UUIDVector_swigregister = _openstudioutilitiescore.UUIDVector_swigregister

UUIDVector_swigregister(UUIDVector)



class OptionalUUIDVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalUUIDVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalUUIDVector, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalUUIDVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalUUIDVector_reset(self)



    def __ref__(self) -> "std::vector< openstudio::UUID,std::allocator< openstudio::UUID > >":

        return _openstudioutilitiescore.OptionalUUIDVector___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalUUIDVector_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalUUIDVector_isNull(self)



    def get(self) -> "std::vector< openstudio::UUID,std::allocator< openstudio::UUID > >":

        return _openstudioutilitiescore.OptionalUUIDVector_get(self)



    def set(self, t: 'UUIDVector') -> "void":

        return _openstudioutilitiescore.OptionalUUIDVector_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalUUIDVector

    __del__ = lambda self: None

OptionalUUIDVector_swigregister = _openstudioutilitiescore.OptionalUUIDVector_swigregister

OptionalUUIDVector_swigregister(OptionalUUIDVector)





def checksum(*args) -> "std::string":

    return _openstudioutilitiescore.checksum(*args)

checksum = _openstudioutilitiescore.checksum

class UnzipFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, UnzipFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, UnzipFile, name)

    __repr__ = _swig_repr



    def __init__(self, filename: 'path'):

        this = _openstudioutilitiescore.new_UnzipFile(filename)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_UnzipFile

    __del__ = lambda self: None



    def listFiles(self) -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":

        return _openstudioutilitiescore.UnzipFile_listFiles(self)



    def extractFile(self, filename: 'path', outputPath: 'path') -> "openstudio::path":

        return _openstudioutilitiescore.UnzipFile_extractFile(self, filename, outputPath)



    def extractAllFiles(self, outputPath: 'path') -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":

        return _openstudioutilitiescore.UnzipFile_extractAllFiles(self, outputPath)

UnzipFile_swigregister = _openstudioutilitiescore.UnzipFile_swigregister

UnzipFile_swigregister(UnzipFile)



class ZipFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZipFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ZipFile, name)

    __repr__ = _swig_repr



    def __init__(self, filename: 'path', add: 'bool'):

        this = _openstudioutilitiescore.new_ZipFile(filename, add)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_ZipFile

    __del__ = lambda self: None



    def addFile(self, localPath: 'path', destinationPath: 'path') -> "void":

        return _openstudioutilitiescore.ZipFile_addFile(self, localPath, destinationPath)



    def addDirectory(self, localDir: 'path', destinationDir: 'path') -> "void":

        return _openstudioutilitiescore.ZipFile_addDirectory(self, localDir, destinationDir)

ZipFile_swigregister = _openstudioutilitiescore.ZipFile_swigregister

ZipFile_swigregister(ZipFile)



class QSqlDatabasePtr(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, QSqlDatabasePtr, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, QSqlDatabasePtr, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioutilitiescore.new_QSqlDatabasePtr()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_QSqlDatabasePtr

    __del__ = lambda self: None

QSqlDatabasePtr_swigregister = _openstudioutilitiescore.QSqlDatabasePtr_swigregister

QSqlDatabasePtr_swigregister(QSqlDatabasePtr)



class FileReferenceTypeVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, FileReferenceTypeVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, FileReferenceTypeVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.FileReferenceTypeVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.FileReferenceTypeVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.FileReferenceTypeVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::FileReferenceType >::size_type":

        return _openstudioutilitiescore.FileReferenceTypeVector___len__(self)



    def pop(self) -> "std::vector< openstudio::FileReferenceType >::value_type":

        return _openstudioutilitiescore.FileReferenceTypeVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::FileReferenceType >::difference_type', j: 'std::vector< openstudio::FileReferenceType >::difference_type') -> "std::vector< openstudio::FileReferenceType,std::allocator< openstudio::FileReferenceType > > *":

        return _openstudioutilitiescore.FileReferenceTypeVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::FileReferenceType >::difference_type', j: 'std::vector< openstudio::FileReferenceType >::difference_type') -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::FileReferenceType >::value_type const &":

        return _openstudioutilitiescore.FileReferenceTypeVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector___setitem__(self, *args)



    def append(self, x: 'FileReferenceType') -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.FileReferenceTypeVector_empty(self)



    def size(self) -> "std::vector< openstudio::FileReferenceType >::size_type":

        return _openstudioutilitiescore.FileReferenceTypeVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector_clear(self)



    def swap(self, v: 'FileReferenceTypeVector') -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::FileReferenceType >::allocator_type":

        return _openstudioutilitiescore.FileReferenceTypeVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::FileReferenceType >::iterator":

        return _openstudioutilitiescore.FileReferenceTypeVector_begin(self)



    def end(self) -> "std::vector< openstudio::FileReferenceType >::iterator":

        return _openstudioutilitiescore.FileReferenceTypeVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::FileReferenceType >::reverse_iterator":

        return _openstudioutilitiescore.FileReferenceTypeVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::FileReferenceType >::reverse_iterator":

        return _openstudioutilitiescore.FileReferenceTypeVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::FileReferenceType >::iterator":

        return _openstudioutilitiescore.FileReferenceTypeVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_FileReferenceTypeVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'FileReferenceType') -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::FileReferenceType >::value_type const &":

        return _openstudioutilitiescore.FileReferenceTypeVector_front(self)



    def back(self) -> "std::vector< openstudio::FileReferenceType >::value_type const &":

        return _openstudioutilitiescore.FileReferenceTypeVector_back(self)



    def assign(self, n: 'std::vector< openstudio::FileReferenceType >::size_type', x: 'FileReferenceType') -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::FileReferenceType >::size_type') -> "void":

        return _openstudioutilitiescore.FileReferenceTypeVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::FileReferenceType >::size_type":

        return _openstudioutilitiescore.FileReferenceTypeVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_FileReferenceTypeVector

    __del__ = lambda self: None

FileReferenceTypeVector_swigregister = _openstudioutilitiescore.FileReferenceTypeVector_swigregister

FileReferenceTypeVector_swigregister(FileReferenceTypeVector)



class OptionalFileReferenceType(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalFileReferenceType, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalFileReferenceType, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalFileReferenceType(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalFileReferenceType_reset(self)



    def __ref__(self) -> "openstudio::FileReferenceType":

        return _openstudioutilitiescore.OptionalFileReferenceType___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalFileReferenceType_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalFileReferenceType_isNull(self)



    def get(self) -> "openstudio::FileReferenceType":

        return _openstudioutilitiescore.OptionalFileReferenceType_get(self)



    def set(self, t: 'FileReferenceType') -> "void":

        return _openstudioutilitiescore.OptionalFileReferenceType_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalFileReferenceType

    __del__ = lambda self: None

OptionalFileReferenceType_swigregister = _openstudioutilitiescore.OptionalFileReferenceType_swigregister

OptionalFileReferenceType_swigregister(OptionalFileReferenceType)



class FileReferenceVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, FileReferenceVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, FileReferenceVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioutilitiescore.FileReferenceVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioutilitiescore.FileReferenceVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioutilitiescore.FileReferenceVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::FileReference >::size_type":

        return _openstudioutilitiescore.FileReferenceVector___len__(self)



    def pop(self) -> "std::vector< openstudio::FileReference >::value_type":

        return _openstudioutilitiescore.FileReferenceVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::FileReference >::difference_type', j: 'std::vector< openstudio::FileReference >::difference_type') -> "std::vector< openstudio::FileReference,std::allocator< openstudio::FileReference > > *":

        return _openstudioutilitiescore.FileReferenceVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioutilitiescore.FileReferenceVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::FileReference >::difference_type', j: 'std::vector< openstudio::FileReference >::difference_type') -> "void":

        return _openstudioutilitiescore.FileReferenceVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioutilitiescore.FileReferenceVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::FileReference >::value_type const &":

        return _openstudioutilitiescore.FileReferenceVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioutilitiescore.FileReferenceVector___setitem__(self, *args)



    def append(self, x: 'FileReference') -> "void":

        return _openstudioutilitiescore.FileReferenceVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioutilitiescore.FileReferenceVector_empty(self)



    def size(self) -> "std::vector< openstudio::FileReference >::size_type":

        return _openstudioutilitiescore.FileReferenceVector_size(self)



    def clear(self) -> "void":

        return _openstudioutilitiescore.FileReferenceVector_clear(self)



    def swap(self, v: 'FileReferenceVector') -> "void":

        return _openstudioutilitiescore.FileReferenceVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::FileReference >::allocator_type":

        return _openstudioutilitiescore.FileReferenceVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::FileReference >::iterator":

        return _openstudioutilitiescore.FileReferenceVector_begin(self)



    def end(self) -> "std::vector< openstudio::FileReference >::iterator":

        return _openstudioutilitiescore.FileReferenceVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::FileReference >::reverse_iterator":

        return _openstudioutilitiescore.FileReferenceVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::FileReference >::reverse_iterator":

        return _openstudioutilitiescore.FileReferenceVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioutilitiescore.FileReferenceVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::FileReference >::iterator":

        return _openstudioutilitiescore.FileReferenceVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_FileReferenceVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'FileReference') -> "void":

        return _openstudioutilitiescore.FileReferenceVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::FileReference >::value_type const &":

        return _openstudioutilitiescore.FileReferenceVector_front(self)



    def back(self) -> "std::vector< openstudio::FileReference >::value_type const &":

        return _openstudioutilitiescore.FileReferenceVector_back(self)



    def assign(self, n: 'std::vector< openstudio::FileReference >::size_type', x: 'FileReference') -> "void":

        return _openstudioutilitiescore.FileReferenceVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::FileReference >::size_type', x: 'FileReference') -> "void":

        return _openstudioutilitiescore.FileReferenceVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudioutilitiescore.FileReferenceVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::FileReference >::size_type') -> "void":

        return _openstudioutilitiescore.FileReferenceVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::FileReference >::size_type":

        return _openstudioutilitiescore.FileReferenceVector_capacity(self)

    __swig_destroy__ = _openstudioutilitiescore.delete_FileReferenceVector

    __del__ = lambda self: None

FileReferenceVector_swigregister = _openstudioutilitiescore.FileReferenceVector_swigregister

FileReferenceVector_swigregister(FileReferenceVector)



class OptionalFileReference(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalFileReference, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalFileReference, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalFileReference(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalFileReference_reset(self)



    def __ref__(self) -> "openstudio::FileReference":

        return _openstudioutilitiescore.OptionalFileReference___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalFileReference_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalFileReference_isNull(self)



    def get(self) -> "openstudio::FileReference":

        return _openstudioutilitiescore.OptionalFileReference_get(self)



    def set(self, t: 'FileReference') -> "void":

        return _openstudioutilitiescore.OptionalFileReference_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalFileReference

    __del__ = lambda self: None

OptionalFileReference_swigregister = _openstudioutilitiescore.OptionalFileReference_swigregister

OptionalFileReference_swigregister(OptionalFileReference)



class OptionalQUrl(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalQUrl, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalQUrl, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalQUrl(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalQUrl_reset(self)



    def __ref__(self) -> "QUrl":

        return _openstudioutilitiescore.OptionalQUrl___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalQUrl_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalQUrl_isNull(self)



    def get(self) -> "QUrl":

        return _openstudioutilitiescore.OptionalQUrl_get(self)



    def set(self, t: 'QUrl') -> "void":

        return _openstudioutilitiescore.OptionalQUrl_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalQUrl

    __del__ = lambda self: None

OptionalQUrl_swigregister = _openstudioutilitiescore.OptionalQUrl_swigregister

OptionalQUrl_swigregister(OptionalQUrl)



class OptionalQVariant(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalQVariant, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalQVariant, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalQVariant(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalQVariant_reset(self)



    def __ref__(self) -> "QVariant":

        return _openstudioutilitiescore.OptionalQVariant___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalQVariant_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalQVariant_isNull(self)



    def get(self) -> "QVariant":

        return _openstudioutilitiescore.OptionalQVariant_get(self)



    def set(self, t: 'QVariant') -> "void":

        return _openstudioutilitiescore.OptionalQVariant_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalQVariant

    __del__ = lambda self: None

OptionalQVariant_swigregister = _openstudioutilitiescore.OptionalQVariant_swigregister

OptionalQVariant_swigregister(OptionalQVariant)



class OptionalVersionString(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalVersionString, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalVersionString, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_OptionalVersionString(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioutilitiescore.OptionalVersionString_reset(self)



    def __ref__(self) -> "openstudio::VersionString":

        return _openstudioutilitiescore.OptionalVersionString___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioutilitiescore.OptionalVersionString_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioutilitiescore.OptionalVersionString_isNull(self)



    def get(self) -> "openstudio::VersionString":

        return _openstudioutilitiescore.OptionalVersionString_get(self)



    def set(self, t: 'VersionString') -> "void":

        return _openstudioutilitiescore.OptionalVersionString_set(self, t)

    __swig_destroy__ = _openstudioutilitiescore.delete_OptionalVersionString

    __del__ = lambda self: None

OptionalVersionString_swigregister = _openstudioutilitiescore.OptionalVersionString_swigregister

OptionalVersionString_swigregister(OptionalVersionString)



class FileReferenceType(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, FileReferenceType, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, FileReferenceType, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_FileReferenceType(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def valueName(self) -> "std::string":

        return _openstudioutilitiescore.FileReferenceType_valueName(self)



    def value(self) -> "int":

        return _openstudioutilitiescore.FileReferenceType_value(self)



    def valueDescription(self) -> "std::string":

        return _openstudioutilitiescore.FileReferenceType_valueDescription(self)



    def __eq__(self, other: 'FileReferenceType') -> "bool":

        return _openstudioutilitiescore.FileReferenceType___eq__(self, other)



    def __ne__(self, other: 'FileReferenceType') -> "bool":

        return _openstudioutilitiescore.FileReferenceType___ne__(self, other)



    def __gt__(self, other: 'FileReferenceType') -> "bool":

        return _openstudioutilitiescore.FileReferenceType___gt__(self, other)



    def __ge__(self, other: 'FileReferenceType') -> "bool":

        return _openstudioutilitiescore.FileReferenceType___ge__(self, other)



    def __lt__(self, other: 'FileReferenceType') -> "bool":

        return _openstudioutilitiescore.FileReferenceType___lt__(self, other)



    def __le__(self, other: 'FileReferenceType') -> "bool":

        return _openstudioutilitiescore.FileReferenceType___le__(self, other)

    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiescore.FileReferenceType_enumName

    if _newclass:

        enumName = staticmethod(_openstudioutilitiescore.FileReferenceType_enumName)

    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiescore.FileReferenceType_getValues

    if _newclass:

        getValues = staticmethod(_openstudioutilitiescore.FileReferenceType_getValues)

    __swig_destroy__ = _openstudioutilitiescore.delete_FileReferenceType

    __del__ = lambda self: None

FileReferenceType_swigregister = _openstudioutilitiescore.FileReferenceType_swigregister

FileReferenceType_swigregister(FileReferenceType)



def FileReferenceType_enumName() -> "std::string":

    return _openstudioutilitiescore.FileReferenceType_enumName()

FileReferenceType_enumName = _openstudioutilitiescore.FileReferenceType_enumName



def FileReferenceType_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":

    return _openstudioutilitiescore.FileReferenceType_getValues()

FileReferenceType_getValues = _openstudioutilitiescore.FileReferenceType_getValues



class FileReference(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, FileReference, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, FileReference, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_FileReference(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_FileReference

    __del__ = lambda self: None



    def clone(self) -> "openstudio::FileReference":

        return _openstudioutilitiescore.FileReference_clone(self)



    def uuid(self) -> "openstudio::UUID":

        return _openstudioutilitiescore.FileReference_uuid(self)



    def versionUUID(self) -> "openstudio::UUID":

        return _openstudioutilitiescore.FileReference_versionUUID(self)



    def name(self) -> "std::string":

        return _openstudioutilitiescore.FileReference_name(self)



    def displayName(self) -> "std::string":

        return _openstudioutilitiescore.FileReference_displayName(self)



    def description(self) -> "std::string":

        return _openstudioutilitiescore.FileReference_description(self)



    def path(self) -> "openstudio::path":

        return _openstudioutilitiescore.FileReference_path(self)



    def fileType(self) -> "openstudio::FileReferenceType":

        return _openstudioutilitiescore.FileReference_fileType(self)



    def timestampLast(self) -> "DateTime":

        return _openstudioutilitiescore.FileReference_timestampLast(self)



    def checksumCreate(self) -> "std::string":

        return _openstudioutilitiescore.FileReference_checksumCreate(self)



    def checksumLast(self) -> "std::string":

        return _openstudioutilitiescore.FileReference_checksumLast(self)



    def setName(self, newName: 'std::string const &') -> "void":

        return _openstudioutilitiescore.FileReference_setName(self, newName)



    def setDisplayName(self, newDisplayName: 'std::string const &') -> "void":

        return _openstudioutilitiescore.FileReference_setDisplayName(self, newDisplayName)



    def setDescription(self, newDescription: 'std::string const &') -> "void":

        return _openstudioutilitiescore.FileReference_setDescription(self, newDescription)



    def setPath(self, newPath: 'path') -> "void":

        return _openstudioutilitiescore.FileReference_setPath(self, newPath)



    def makePathAbsolute(self, searchDirectory: 'path') -> "bool":

        return _openstudioutilitiescore.FileReference_makePathAbsolute(self, searchDirectory)



    def makePathRelative(self, *args) -> "bool":

        return _openstudioutilitiescore.FileReference_makePathRelative(self, *args)



    def update(self, searchDirectory: 'path') -> "bool":

        return _openstudioutilitiescore.FileReference_update(self, searchDirectory)

FileReference_swigregister = _openstudioutilitiescore.FileReference_swigregister

FileReference_swigregister(FileReference)



class IcharCompare(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IcharCompare, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IcharCompare, name)

    __repr__ = _swig_repr



    def __call__(self, cA: 'char', cB: 'char') -> "bool":

        return _openstudioutilitiescore.IcharCompare___call__(self, cA, cB)



    def __init__(self):

        this = _openstudioutilitiescore.new_IcharCompare()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_IcharCompare

    __del__ = lambda self: None

IcharCompare_swigregister = _openstudioutilitiescore.IcharCompare_swigregister

IcharCompare_swigregister(IcharCompare)





def istringEqual(x: 'std::string const &', y: 'std::string const &') -> "bool":

    return _openstudioutilitiescore.istringEqual(x, y)

istringEqual = _openstudioutilitiescore.istringEqual

class IstringEqual(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IstringEqual, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IstringEqual, name)

    __repr__ = _swig_repr



    def __call__(self, x: 'std::string const &', y: 'std::string const &') -> "bool":

        return _openstudioutilitiescore.IstringEqual___call__(self, x, y)



    def __init__(self):

        this = _openstudioutilitiescore.new_IstringEqual()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_IstringEqual

    __del__ = lambda self: None

IstringEqual_swigregister = _openstudioutilitiescore.IstringEqual_swigregister

IstringEqual_swigregister(IstringEqual)



class IstringFind(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IstringFind, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IstringFind, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_IstringFind(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def addTarget(self, target: 'std::string const &') -> "void":

        return _openstudioutilitiescore.IstringFind_addTarget(self, target)



    def __call__(self, other: 'std::string const &') -> "bool":

        return _openstudioutilitiescore.IstringFind___call__(self, other)

    __swig_destroy__ = _openstudioutilitiescore.delete_IstringFind

    __del__ = lambda self: None

IstringFind_swigregister = _openstudioutilitiescore.IstringFind_swigregister

IstringFind_swigregister(IstringFind)





def istringLess(x: 'std::string const &', y: 'std::string const &') -> "bool":

    return _openstudioutilitiescore.istringLess(x, y)

istringLess = _openstudioutilitiescore.istringLess

class IstringCompare(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IstringCompare, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IstringCompare, name)

    __repr__ = _swig_repr



    def __call__(self, x: 'std::string const &', y: 'std::string const &') -> "bool":

        return _openstudioutilitiescore.IstringCompare___call__(self, x, y)



    def __init__(self):

        this = _openstudioutilitiescore.new_IstringCompare()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_IstringCompare

    __del__ = lambda self: None

IstringCompare_swigregister = _openstudioutilitiescore.IstringCompare_swigregister

IstringCompare_swigregister(IstringCompare)



class IstringPairCompare(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IstringPairCompare, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IstringPairCompare, name)

    __repr__ = _swig_repr



    def __call__(self, x: 'std::pair< std::string,std::string > const &', y: 'std::pair< std::string,std::string > const &') -> "bool":

        return _openstudioutilitiescore.IstringPairCompare___call__(self, x, y)



    def __init__(self):

        this = _openstudioutilitiescore.new_IstringPairCompare()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_IstringPairCompare

    __del__ = lambda self: None

IstringPairCompare_swigregister = _openstudioutilitiescore.IstringPairCompare_swigregister

IstringPairCompare_swigregister(IstringPairCompare)



class VersionString(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, VersionString, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, VersionString, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioutilitiescore.new_VersionString(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def str(self) -> "std::string":

        return _openstudioutilitiescore.VersionString_str(self)



    def major(self) -> "int":

        return _openstudioutilitiescore.VersionString_major(self)



    def minor(self) -> "int":

        return _openstudioutilitiescore.VersionString_minor(self)



    def patch(self) -> "boost::optional< int >":

        return _openstudioutilitiescore.VersionString_patch(self)



    def build(self) -> "boost::optional< int >":

        return _openstudioutilitiescore.VersionString_build(self)



    def __lt__(self, other: 'VersionString') -> "bool":

        return _openstudioutilitiescore.VersionString___lt__(self, other)



    def __gt__(self, other: 'VersionString') -> "bool":

        return _openstudioutilitiescore.VersionString___gt__(self, other)



    def __eq__(self, other: 'VersionString') -> "bool":

        return _openstudioutilitiescore.VersionString___eq__(self, other)



    def __ne__(self, other: 'VersionString') -> "bool":

        return _openstudioutilitiescore.VersionString___ne__(self, other)



    def __le__(self, other: 'VersionString') -> "bool":

        return _openstudioutilitiescore.VersionString___le__(self, other)



    def __ge__(self, other: 'VersionString') -> "bool":

        return _openstudioutilitiescore.VersionString___ge__(self, other)



    def fidelityEqual(self, other: 'VersionString') -> "bool":

        return _openstudioutilitiescore.VersionString_fidelityEqual(self, other)



    def isNextVersion(self, nextVersionCandidate: 'VersionString') -> "bool":

        return _openstudioutilitiescore.VersionString_isNextVersion(self, nextVersionCandidate)

    __swig_destroy__ = _openstudioutilitiescore.delete_VersionString

    __del__ = lambda self: None

VersionString_swigregister = _openstudioutilitiescore.VersionString_swigregister

VersionString_swigregister(VersionString)





def __lshift__(*args) -> "std::ostream &":

    return _openstudioutilitiescore.__lshift__(*args)

__lshift__ = _openstudioutilitiescore.__lshift__

class WorkspaceObjectNameLess(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceObjectNameLess, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceObjectNameLess, name)

    __repr__ = _swig_repr



    def __call__(self, a: 'openstudio::WorkspaceObject const &', b: 'openstudio::WorkspaceObject const &') -> "bool":

        return _openstudioutilitiescore.WorkspaceObjectNameLess___call__(self, a, b)



    def __init__(self):

        this = _openstudioutilitiescore.new_WorkspaceObjectNameLess()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_WorkspaceObjectNameLess

    __del__ = lambda self: None

WorkspaceObjectNameLess_swigregister = _openstudioutilitiescore.WorkspaceObjectNameLess_swigregister

WorkspaceObjectNameLess_swigregister(WorkspaceObjectNameLess)



class WorkspaceObjectNameGreater(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkspaceObjectNameGreater, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WorkspaceObjectNameGreater, name)

    __repr__ = _swig_repr



    def __call__(self, a: 'openstudio::WorkspaceObject const &', b: 'openstudio::WorkspaceObject const &') -> "bool":

        return _openstudioutilitiescore.WorkspaceObjectNameGreater___call__(self, a, b)



    def __init__(self):

        this = _openstudioutilitiescore.new_WorkspaceObjectNameGreater()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_WorkspaceObjectNameGreater

    __del__ = lambda self: None

WorkspaceObjectNameGreater_swigregister = _openstudioutilitiescore.WorkspaceObjectNameGreater_swigregister

WorkspaceObjectNameGreater_swigregister(WorkspaceObjectNameGreater)



class BCLComponentNameLess(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLComponentNameLess, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLComponentNameLess, name)

    __repr__ = _swig_repr



    def __call__(self, a: 'openstudio::BCLComponent const &', b: 'openstudio::BCLComponent const &') -> "bool":

        return _openstudioutilitiescore.BCLComponentNameLess___call__(self, a, b)



    def __init__(self):

        this = _openstudioutilitiescore.new_BCLComponentNameLess()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_BCLComponentNameLess

    __del__ = lambda self: None

BCLComponentNameLess_swigregister = _openstudioutilitiescore.BCLComponentNameLess_swigregister

BCLComponentNameLess_swigregister(BCLComponentNameLess)



class BCLComponentNameGreater(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLComponentNameGreater, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, BCLComponentNameGreater, name)

    __repr__ = _swig_repr



    def __call__(self, a: 'openstudio::BCLComponent const &', b: 'openstudio::BCLComponent const &') -> "bool":

        return _openstudioutilitiescore.BCLComponentNameGreater___call__(self, a, b)



    def __init__(self):

        this = _openstudioutilitiescore.new_BCLComponentNameGreater()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioutilitiescore.delete_BCLComponentNameGreater

    __del__ = lambda self: None

BCLComponentNameGreater_swigregister = _openstudioutilitiescore.BCLComponentNameGreater_swigregister

BCLComponentNameGreater_swigregister(BCLComponentNameGreater)





def DoublesEqual(*args) -> "bool":

    return _openstudioutilitiescore.DoublesEqual(*args)

DoublesEqual = _openstudioutilitiescore.DoublesEqual



def DoublesLessThanOrEqual(*args) -> "bool":

    return _openstudioutilitiescore.DoublesLessThanOrEqual(*args)

DoublesLessThanOrEqual = _openstudioutilitiescore.DoublesLessThanOrEqual



def DoublesGreaterThanOrEqual(*args) -> "bool":

    return _openstudioutilitiescore.DoublesGreaterThanOrEqual(*args)

DoublesGreaterThanOrEqual = _openstudioutilitiescore.DoublesGreaterThanOrEqual



def DoublesRelativeError(*args) -> "double":

    return _openstudioutilitiescore.DoublesRelativeError(*args)

DoublesRelativeError = _openstudioutilitiescore.DoublesRelativeError

# This file is compatible with both classic and new-style classes.





