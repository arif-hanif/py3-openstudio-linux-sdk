# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudiomodelrefrigeration', [dirname(__file__)])
        except ImportError:
            import _openstudiomodelrefrigeration
            return _openstudiomodelrefrigeration
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudiomodelrefrigeration', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudiomodelrefrigeration = swig_import_helper()
    del swig_import_helper
else:
    import _openstudiomodelrefrigeration
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudiomodelrefrigeration.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudiomodelrefrigeration.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelrefrigeration.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudiomodelrefrigeration.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudiomodelrefrigeration.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudiomodelrefrigeration.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelrefrigeration.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudiomodelrefrigeration.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelrefrigeration.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudiomodelrefrigeration.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudiomodelrefrigeration.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudiomodelrefrigeration.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudiomodelrefrigeration.SHARED_PTR_DISOWN_swigconstant(_openstudiomodelrefrigeration)
SHARED_PTR_DISOWN = _openstudiomodelrefrigeration.SHARED_PTR_DISOWN
import openstudioutilities
import openstudioutilitiescore
import openstudioutilitiestime
import openstudioutilitiesdata
import openstudioutilitiesunits
import openstudioutilitiesplot
import openstudioutilitiesgeometry
import openstudioutilitiessql
import openstudioutilitiesbcl
import openstudioutilitiesidd
import openstudioutilitiesidf
import openstudioutilitiesfiletypes
import openstudiomodelcore
import openstudiomodelsimulation
import openstudiomodelresources
import openstudiomodelgeometry
import openstudiomodelhvac
import openstudiomodelzonehvac
class RefrigerationAirChillerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationAirChillerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationAirChillerVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationAirChiller >::difference_type', j: 'std::vector< openstudio::model::RefrigerationAirChiller >::difference_type') -> "std::vector< openstudio::model::RefrigerationAirChiller,std::allocator< openstudio::model::RefrigerationAirChiller > > *":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationAirChiller >::difference_type', j: 'std::vector< openstudio::model::RefrigerationAirChiller >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationAirChiller >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationAirChiller') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_clear(self)

    def swap(self, v: 'RefrigerationAirChillerVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationAirChiller >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationAirChillerVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationAirChiller') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationAirChiller >::size_type', x: 'RefrigerationAirChiller') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationAirChiller >::size_type', x: 'RefrigerationAirChiller') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationAirChiller >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationAirChiller >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationAirChillerVector
    __del__ = lambda self: None
RefrigerationAirChillerVector_swigregister = _openstudiomodelrefrigeration.RefrigerationAirChillerVector_swigregister
RefrigerationAirChillerVector_swigregister(RefrigerationAirChillerVector)

class OptionalRefrigerationAirChiller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationAirChiller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationAirChiller, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationAirChiller(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationAirChiller":
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationAirChiller":
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_get(self)

    def set(self, t: 'RefrigerationAirChiller') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationAirChiller
    __del__ = lambda self: None
OptionalRefrigerationAirChiller_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_swigregister
OptionalRefrigerationAirChiller_swigregister(OptionalRefrigerationAirChiller)

class RefrigerationCaseVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCaseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCaseVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationCase >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationCase >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationCase >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCase >::difference_type') -> "std::vector< openstudio::model::RefrigerationCase,std::allocator< openstudio::model::RefrigerationCase > > *":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationCase >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCase >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationCase >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationCase') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationCase >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_clear(self)

    def swap(self, v: 'RefrigerationCaseVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationCase >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationCase >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationCase >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationCase >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationCase >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationCase >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationCaseVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationCase') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationCase >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationCase >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationCase >::size_type', x: 'RefrigerationCase') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationCase >::size_type', x: 'RefrigerationCase') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationCase >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationCase >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCaseVector
    __del__ = lambda self: None
RefrigerationCaseVector_swigregister = _openstudiomodelrefrigeration.RefrigerationCaseVector_swigregister
RefrigerationCaseVector_swigregister(RefrigerationCaseVector)

class OptionalRefrigerationCase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationCase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationCase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationCase(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationCase":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationCase":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_get(self)

    def set(self, t: 'RefrigerationCase') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCase
    __del__ = lambda self: None
OptionalRefrigerationCase_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationCase_swigregister
OptionalRefrigerationCase_swigregister(OptionalRefrigerationCase)

class RefrigerationCompressorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCompressorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCompressorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationCompressor >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCompressor >::difference_type') -> "std::vector< openstudio::model::RefrigerationCompressor,std::allocator< openstudio::model::RefrigerationCompressor > > *":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationCompressor >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCompressor >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationCompressor >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationCompressor') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_clear(self)

    def swap(self, v: 'RefrigerationCompressorVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationCompressor >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationCompressorVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationCompressor') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationCompressor >::size_type', x: 'RefrigerationCompressor') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationCompressor >::size_type', x: 'RefrigerationCompressor') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationCompressor >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationCompressor >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCompressorVector
    __del__ = lambda self: None
RefrigerationCompressorVector_swigregister = _openstudiomodelrefrigeration.RefrigerationCompressorVector_swigregister
RefrigerationCompressorVector_swigregister(RefrigerationCompressorVector)

class OptionalRefrigerationCompressor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationCompressor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationCompressor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationCompressor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationCompressor":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationCompressor":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_get(self)

    def set(self, t: 'RefrigerationCompressor') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCompressor
    __del__ = lambda self: None
OptionalRefrigerationCompressor_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_swigregister
OptionalRefrigerationCompressor_swigregister(OptionalRefrigerationCompressor)

class RefrigerationCondenserAirCooledVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCondenserAirCooledVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCondenserAirCooledVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationCondenserAirCooled >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCondenserAirCooled >::difference_type') -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled,std::allocator< openstudio::model::RefrigerationCondenserAirCooled > > *":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationCondenserAirCooled >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCondenserAirCooled >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationCondenserAirCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_clear(self)

    def swap(self, v: 'RefrigerationCondenserAirCooledVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationCondenserAirCooledVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationCondenserAirCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationCondenserAirCooled >::size_type', x: 'RefrigerationCondenserAirCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationCondenserAirCooled >::size_type', x: 'RefrigerationCondenserAirCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationCondenserAirCooled >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserAirCooledVector
    __del__ = lambda self: None
RefrigerationCondenserAirCooledVector_swigregister = _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_swigregister
RefrigerationCondenserAirCooledVector_swigregister(RefrigerationCondenserAirCooledVector)

class OptionalRefrigerationCondenserAirCooled(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationCondenserAirCooled, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationCondenserAirCooled, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationCondenserAirCooled(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationCondenserAirCooled":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationCondenserAirCooled":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_get(self)

    def set(self, t: 'RefrigerationCondenserAirCooled') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCondenserAirCooled
    __del__ = lambda self: None
OptionalRefrigerationCondenserAirCooled_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_swigregister
OptionalRefrigerationCondenserAirCooled_swigregister(OptionalRefrigerationCondenserAirCooled)

class RefrigerationCondenserCascadeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCondenserCascadeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCondenserCascadeVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationCondenserCascade >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCondenserCascade >::difference_type') -> "std::vector< openstudio::model::RefrigerationCondenserCascade,std::allocator< openstudio::model::RefrigerationCondenserCascade > > *":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationCondenserCascade >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCondenserCascade >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationCondenserCascade') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_clear(self)

    def swap(self, v: 'RefrigerationCondenserCascadeVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationCondenserCascadeVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationCondenserCascade') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationCondenserCascade >::size_type', x: 'RefrigerationCondenserCascade') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationCondenserCascade >::size_type', x: 'RefrigerationCondenserCascade') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationCondenserCascade >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserCascadeVector
    __del__ = lambda self: None
RefrigerationCondenserCascadeVector_swigregister = _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_swigregister
RefrigerationCondenserCascadeVector_swigregister(RefrigerationCondenserCascadeVector)

class OptionalRefrigerationCondenserCascade(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationCondenserCascade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationCondenserCascade, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationCondenserCascade(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationCondenserCascade":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationCondenserCascade":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_get(self)

    def set(self, t: 'RefrigerationCondenserCascade') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCondenserCascade
    __del__ = lambda self: None
OptionalRefrigerationCondenserCascade_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_swigregister
OptionalRefrigerationCondenserCascade_swigregister(OptionalRefrigerationCondenserCascade)

class RefrigerationCondenserEvaporativeCooledVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCondenserEvaporativeCooledVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCondenserEvaporativeCooledVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::difference_type') -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled,std::allocator< openstudio::model::RefrigerationCondenserEvaporativeCooled > > *":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationCondenserEvaporativeCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_clear(self)

    def swap(self, v: 'RefrigerationCondenserEvaporativeCooledVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationCondenserEvaporativeCooledVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationCondenserEvaporativeCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::size_type', x: 'RefrigerationCondenserEvaporativeCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::size_type', x: 'RefrigerationCondenserEvaporativeCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserEvaporativeCooledVector
    __del__ = lambda self: None
RefrigerationCondenserEvaporativeCooledVector_swigregister = _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_swigregister
RefrigerationCondenserEvaporativeCooledVector_swigregister(RefrigerationCondenserEvaporativeCooledVector)

class OptionalRefrigerationCondenserEvaporativeCooled(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationCondenserEvaporativeCooled, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationCondenserEvaporativeCooled, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationCondenserEvaporativeCooled(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationCondenserEvaporativeCooled":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationCondenserEvaporativeCooled":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_get(self)

    def set(self, t: 'RefrigerationCondenserEvaporativeCooled') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCondenserEvaporativeCooled
    __del__ = lambda self: None
OptionalRefrigerationCondenserEvaporativeCooled_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_swigregister
OptionalRefrigerationCondenserEvaporativeCooled_swigregister(OptionalRefrigerationCondenserEvaporativeCooled)

class RefrigerationCondenserWaterCooledVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCondenserWaterCooledVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCondenserWaterCooledVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::difference_type') -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled,std::allocator< openstudio::model::RefrigerationCondenserWaterCooled > > *":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::difference_type', j: 'std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationCondenserWaterCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_clear(self)

    def swap(self, v: 'RefrigerationCondenserWaterCooledVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationCondenserWaterCooledVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationCondenserWaterCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::size_type', x: 'RefrigerationCondenserWaterCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::size_type', x: 'RefrigerationCondenserWaterCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserWaterCooledVector
    __del__ = lambda self: None
RefrigerationCondenserWaterCooledVector_swigregister = _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_swigregister
RefrigerationCondenserWaterCooledVector_swigregister(RefrigerationCondenserWaterCooledVector)

class OptionalRefrigerationCondenserWaterCooled(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationCondenserWaterCooled, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationCondenserWaterCooled, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationCondenserWaterCooled(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationCondenserWaterCooled":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationCondenserWaterCooled":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_get(self)

    def set(self, t: 'RefrigerationCondenserWaterCooled') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCondenserWaterCooled
    __del__ = lambda self: None
OptionalRefrigerationCondenserWaterCooled_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_swigregister
OptionalRefrigerationCondenserWaterCooled_swigregister(OptionalRefrigerationCondenserWaterCooled)

class RefrigerationDefrostCycleParametersVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationDefrostCycleParametersVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationDefrostCycleParametersVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::difference_type', j: 'std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::difference_type') -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters,std::allocator< openstudio::model::RefrigerationDefrostCycleParameters > > *":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::difference_type', j: 'std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationDefrostCycleParameters') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_clear(self)

    def swap(self, v: 'RefrigerationDefrostCycleParametersVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationDefrostCycleParametersVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationDefrostCycleParameters') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::size_type', x: 'RefrigerationDefrostCycleParameters') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::size_type', x: 'RefrigerationDefrostCycleParameters') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationDefrostCycleParametersVector
    __del__ = lambda self: None
RefrigerationDefrostCycleParametersVector_swigregister = _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_swigregister
RefrigerationDefrostCycleParametersVector_swigregister(RefrigerationDefrostCycleParametersVector)

class OptionalRefrigerationDefrostCycleParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationDefrostCycleParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationDefrostCycleParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationDefrostCycleParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationDefrostCycleParameters":
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationDefrostCycleParameters":
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_get(self)

    def set(self, t: 'RefrigerationDefrostCycleParameters') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationDefrostCycleParameters
    __del__ = lambda self: None
OptionalRefrigerationDefrostCycleParameters_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_swigregister
OptionalRefrigerationDefrostCycleParameters_swigregister(OptionalRefrigerationDefrostCycleParameters)

class RefrigerationGasCoolerAirCooledVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationGasCoolerAirCooledVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationGasCoolerAirCooledVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::difference_type', j: 'std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::difference_type') -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled,std::allocator< openstudio::model::RefrigerationGasCoolerAirCooled > > *":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::difference_type', j: 'std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationGasCoolerAirCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_clear(self)

    def swap(self, v: 'RefrigerationGasCoolerAirCooledVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationGasCoolerAirCooledVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationGasCoolerAirCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::size_type', x: 'RefrigerationGasCoolerAirCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::size_type', x: 'RefrigerationGasCoolerAirCooled') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationGasCoolerAirCooledVector
    __del__ = lambda self: None
RefrigerationGasCoolerAirCooledVector_swigregister = _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_swigregister
RefrigerationGasCoolerAirCooledVector_swigregister(RefrigerationGasCoolerAirCooledVector)

class OptionalRefrigerationGasCoolerAirCooled(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationGasCoolerAirCooled, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationGasCoolerAirCooled, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationGasCoolerAirCooled(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationGasCoolerAirCooled":
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationGasCoolerAirCooled":
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_get(self)

    def set(self, t: 'RefrigerationGasCoolerAirCooled') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationGasCoolerAirCooled
    __del__ = lambda self: None
OptionalRefrigerationGasCoolerAirCooled_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_swigregister
OptionalRefrigerationGasCoolerAirCooled_swigregister(OptionalRefrigerationGasCoolerAirCooled)

class RefrigerationSubcoolerLiquidSuctionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationSubcoolerLiquidSuctionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationSubcoolerLiquidSuctionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::difference_type', j: 'std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::difference_type') -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction,std::allocator< openstudio::model::RefrigerationSubcoolerLiquidSuction > > *":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::difference_type', j: 'std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationSubcoolerLiquidSuction') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_clear(self)

    def swap(self, v: 'RefrigerationSubcoolerLiquidSuctionVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationSubcoolerLiquidSuctionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationSubcoolerLiquidSuction') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::size_type', x: 'RefrigerationSubcoolerLiquidSuction') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::size_type', x: 'RefrigerationSubcoolerLiquidSuction') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSubcoolerLiquidSuctionVector
    __del__ = lambda self: None
RefrigerationSubcoolerLiquidSuctionVector_swigregister = _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_swigregister
RefrigerationSubcoolerLiquidSuctionVector_swigregister(RefrigerationSubcoolerLiquidSuctionVector)

class OptionalRefrigerationSubcoolerLiquidSuction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationSubcoolerLiquidSuction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationSubcoolerLiquidSuction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationSubcoolerLiquidSuction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationSubcoolerLiquidSuction":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationSubcoolerLiquidSuction":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_get(self)

    def set(self, t: 'RefrigerationSubcoolerLiquidSuction') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationSubcoolerLiquidSuction
    __del__ = lambda self: None
OptionalRefrigerationSubcoolerLiquidSuction_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_swigregister
OptionalRefrigerationSubcoolerLiquidSuction_swigregister(OptionalRefrigerationSubcoolerLiquidSuction)

class RefrigerationSubcoolerMechanicalVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationSubcoolerMechanicalVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationSubcoolerMechanicalVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::difference_type', j: 'std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::difference_type') -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical,std::allocator< openstudio::model::RefrigerationSubcoolerMechanical > > *":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::difference_type', j: 'std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationSubcoolerMechanical') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_clear(self)

    def swap(self, v: 'RefrigerationSubcoolerMechanicalVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationSubcoolerMechanicalVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationSubcoolerMechanical') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::size_type', x: 'RefrigerationSubcoolerMechanical') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::size_type', x: 'RefrigerationSubcoolerMechanical') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSubcoolerMechanicalVector
    __del__ = lambda self: None
RefrigerationSubcoolerMechanicalVector_swigregister = _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_swigregister
RefrigerationSubcoolerMechanicalVector_swigregister(RefrigerationSubcoolerMechanicalVector)

class OptionalRefrigerationSubcoolerMechanical(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationSubcoolerMechanical, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationSubcoolerMechanical, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationSubcoolerMechanical(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationSubcoolerMechanical":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationSubcoolerMechanical":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_get(self)

    def set(self, t: 'RefrigerationSubcoolerMechanical') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationSubcoolerMechanical
    __del__ = lambda self: None
OptionalRefrigerationSubcoolerMechanical_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_swigregister
OptionalRefrigerationSubcoolerMechanical_swigregister(OptionalRefrigerationSubcoolerMechanical)

class RefrigerationSecondarySystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationSecondarySystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationSecondarySystemVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationSecondarySystem >::difference_type', j: 'std::vector< openstudio::model::RefrigerationSecondarySystem >::difference_type') -> "std::vector< openstudio::model::RefrigerationSecondarySystem,std::allocator< openstudio::model::RefrigerationSecondarySystem > > *":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationSecondarySystem >::difference_type', j: 'std::vector< openstudio::model::RefrigerationSecondarySystem >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationSecondarySystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_clear(self)

    def swap(self, v: 'RefrigerationSecondarySystemVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationSecondarySystemVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationSecondarySystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationSecondarySystem >::size_type', x: 'RefrigerationSecondarySystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationSecondarySystem >::size_type', x: 'RefrigerationSecondarySystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationSecondarySystem >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSecondarySystemVector
    __del__ = lambda self: None
RefrigerationSecondarySystemVector_swigregister = _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_swigregister
RefrigerationSecondarySystemVector_swigregister(RefrigerationSecondarySystemVector)

class OptionalRefrigerationSecondarySystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationSecondarySystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationSecondarySystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationSecondarySystem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationSecondarySystem":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationSecondarySystem":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_get(self)

    def set(self, t: 'RefrigerationSecondarySystem') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationSecondarySystem
    __del__ = lambda self: None
OptionalRefrigerationSecondarySystem_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_swigregister
OptionalRefrigerationSecondarySystem_swigregister(OptionalRefrigerationSecondarySystem)

class RefrigerationSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationSystemVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationSystem >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationSystem >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationSystem >::difference_type', j: 'std::vector< openstudio::model::RefrigerationSystem >::difference_type') -> "std::vector< openstudio::model::RefrigerationSystem,std::allocator< openstudio::model::RefrigerationSystem > > *":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationSystem >::difference_type', j: 'std::vector< openstudio::model::RefrigerationSystem >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationSystem >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationSystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationSystem >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_clear(self)

    def swap(self, v: 'RefrigerationSystemVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationSystem >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationSystem >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationSystem >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationSystem >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationSystem >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationSystem >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationSystemVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationSystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationSystem >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationSystem >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationSystem >::size_type', x: 'RefrigerationSystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationSystem >::size_type', x: 'RefrigerationSystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationSystem >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationSystem >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSystemVector
    __del__ = lambda self: None
RefrigerationSystemVector_swigregister = _openstudiomodelrefrigeration.RefrigerationSystemVector_swigregister
RefrigerationSystemVector_swigregister(RefrigerationSystemVector)

class OptionalRefrigerationSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationSystem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationSystem":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationSystem":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_get(self)

    def set(self, t: 'RefrigerationSystem') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationSystem
    __del__ = lambda self: None
OptionalRefrigerationSystem_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationSystem_swigregister
OptionalRefrigerationSystem_swigregister(OptionalRefrigerationSystem)

class RefrigerationTranscriticalSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationTranscriticalSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationTranscriticalSystemVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationTranscriticalSystem >::difference_type', j: 'std::vector< openstudio::model::RefrigerationTranscriticalSystem >::difference_type') -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem,std::allocator< openstudio::model::RefrigerationTranscriticalSystem > > *":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationTranscriticalSystem >::difference_type', j: 'std::vector< openstudio::model::RefrigerationTranscriticalSystem >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationTranscriticalSystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_clear(self)

    def swap(self, v: 'RefrigerationTranscriticalSystemVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationTranscriticalSystemVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationTranscriticalSystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationTranscriticalSystem >::size_type', x: 'RefrigerationTranscriticalSystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationTranscriticalSystem >::size_type', x: 'RefrigerationTranscriticalSystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationTranscriticalSystem >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationTranscriticalSystemVector
    __del__ = lambda self: None
RefrigerationTranscriticalSystemVector_swigregister = _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_swigregister
RefrigerationTranscriticalSystemVector_swigregister(RefrigerationTranscriticalSystemVector)

class OptionalRefrigerationTranscriticalSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationTranscriticalSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationTranscriticalSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationTranscriticalSystem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationTranscriticalSystem":
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationTranscriticalSystem":
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_get(self)

    def set(self, t: 'RefrigerationTranscriticalSystem') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationTranscriticalSystem
    __del__ = lambda self: None
OptionalRefrigerationTranscriticalSystem_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_swigregister
OptionalRefrigerationTranscriticalSystem_swigregister(OptionalRefrigerationTranscriticalSystem)

class RefrigerationWalkInVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationWalkInVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationWalkInVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationWalkIn >::difference_type', j: 'std::vector< openstudio::model::RefrigerationWalkIn >::difference_type') -> "std::vector< openstudio::model::RefrigerationWalkIn,std::allocator< openstudio::model::RefrigerationWalkIn > > *":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationWalkIn >::difference_type', j: 'std::vector< openstudio::model::RefrigerationWalkIn >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationWalkIn >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationWalkIn') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_clear(self)

    def swap(self, v: 'RefrigerationWalkInVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationWalkIn >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationWalkInVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationWalkIn') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationWalkIn >::size_type', x: 'RefrigerationWalkIn') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationWalkIn >::size_type', x: 'RefrigerationWalkIn') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationWalkIn >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationWalkIn >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationWalkInVector
    __del__ = lambda self: None
RefrigerationWalkInVector_swigregister = _openstudiomodelrefrigeration.RefrigerationWalkInVector_swigregister
RefrigerationWalkInVector_swigregister(RefrigerationWalkInVector)

class OptionalRefrigerationWalkIn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationWalkIn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationWalkIn, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationWalkIn(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationWalkIn":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationWalkIn":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_get(self)

    def set(self, t: 'RefrigerationWalkIn') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationWalkIn
    __del__ = lambda self: None
OptionalRefrigerationWalkIn_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_swigregister
OptionalRefrigerationWalkIn_swigregister(OptionalRefrigerationWalkIn)

class RefrigerationWalkInZoneBoundaryVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationWalkInZoneBoundaryVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationWalkInZoneBoundaryVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___len__(self)

    def pop(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::value_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::difference_type', j: 'std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::difference_type') -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary,std::allocator< openstudio::model::RefrigerationWalkInZoneBoundary > > *":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::difference_type', j: 'std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::difference_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___setitem__(self, *args)

    def append(self, x: 'RefrigerationWalkInZoneBoundary') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_empty(self)

    def size(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_size(self)

    def clear(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_clear(self)

    def swap(self, v: 'RefrigerationWalkInZoneBoundaryVector') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::allocator_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_begin(self)

    def end(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::reverse_iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::iterator":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_RefrigerationWalkInZoneBoundaryVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'RefrigerationWalkInZoneBoundary') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_front(self)

    def back(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::value_type const &":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_back(self)

    def assign(self, n: 'std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::size_type', x: 'RefrigerationWalkInZoneBoundary') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::size_type', x: 'RefrigerationWalkInZoneBoundary') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::size_type') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary >::size_type":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationWalkInZoneBoundaryVector
    __del__ = lambda self: None
RefrigerationWalkInZoneBoundaryVector_swigregister = _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_swigregister
RefrigerationWalkInZoneBoundaryVector_swigregister(RefrigerationWalkInZoneBoundaryVector)

class OptionalRefrigerationWalkInZoneBoundary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRefrigerationWalkInZoneBoundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRefrigerationWalkInZoneBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudiomodelrefrigeration.new_OptionalRefrigerationWalkInZoneBoundary(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_reset(self)

    def __ref__(self) -> "openstudio::model::RefrigerationWalkInZoneBoundary":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_isNull(self)

    def get(self) -> "openstudio::model::RefrigerationWalkInZoneBoundary":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_get(self)

    def set(self, t: 'RefrigerationWalkInZoneBoundary') -> "void":
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_set(self, t)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationWalkInZoneBoundary
    __del__ = lambda self: None
OptionalRefrigerationWalkInZoneBoundary_swigregister = _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_swigregister
OptionalRefrigerationWalkInZoneBoundary_swigregister(OptionalRefrigerationWalkInZoneBoundary)

class RefrigerationAirChiller(openstudiomodelhvac.ZoneHVACComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationAirChiller, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.ZoneHVACComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationAirChiller, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', defrostSchedule: 'Schedule'):
        this = _openstudiomodelrefrigeration.new_RefrigerationAirChiller(model, defrostSchedule)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationAirChiller
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationAirChiller_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationAirChiller_iddObjectType)
    __swig_getmethods__["capacityRatingTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationAirChiller_capacityRatingTypeValues
    if _newclass:
        capacityRatingTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationAirChiller_capacityRatingTypeValues)
    __swig_getmethods__["fanSpeedControlTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationAirChiller_fanSpeedControlTypeValues
    if _newclass:
        fanSpeedControlTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationAirChiller_fanSpeedControlTypeValues)
    __swig_getmethods__["defrostTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostTypeValues
    if _newclass:
        defrostTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationAirChiller_defrostTypeValues)
    __swig_getmethods__["defrostControlTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostControlTypeValues
    if _newclass:
        defrostControlTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationAirChiller_defrostControlTypeValues)
    __swig_getmethods__["verticalLocationValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationAirChiller_verticalLocationValues
    if _newclass:
        verticalLocationValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationAirChiller_verticalLocationValues)

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_availabilitySchedule(self)

    def capacityRatingType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_capacityRatingType(self)

    def ratedUnitLoadFactor(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedUnitLoadFactor(self)

    def ratedCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedCapacity(self)

    def ratedRelativeHumidity(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedRelativeHumidity(self)

    def isRatedRelativeHumidityDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isRatedRelativeHumidityDefaulted(self)

    def ratedCoolingSourceTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedCoolingSourceTemperature(self)

    def ratedTemperatureDifferenceDT1(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedTemperatureDifferenceDT1(self)

    def maximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_maximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self)

    def coilMaterialCorrectionFactor(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_coilMaterialCorrectionFactor(self)

    def isCoilMaterialCorrectionFactorDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isCoilMaterialCorrectionFactorDefaulted(self)

    def refrigerantCorrectionFactor(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_refrigerantCorrectionFactor(self)

    def isRefrigerantCorrectionFactorDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isRefrigerantCorrectionFactorDefaulted(self)

    def sHR60CorrectionFactor(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_sHR60CorrectionFactor(self)

    def isSHR60CorrectionFactorDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isSHR60CorrectionFactorDefaulted(self)

    def ratedTotalHeatingPower(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedTotalHeatingPower(self)

    def heatingPowerSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_heatingPowerSchedule(self)

    def fanSpeedControlType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_fanSpeedControlType(self)

    def isFanSpeedControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isFanSpeedControlTypeDefaulted(self)

    def ratedFanPower(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedFanPower(self)

    def isRatedFanPowerDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isRatedFanPowerDefaulted(self)

    def ratedAirFlow(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedAirFlow(self)

    def minimumFanAirFlowRatio(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_minimumFanAirFlowRatio(self)

    def isMinimumFanAirFlowRatioDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isMinimumFanAirFlowRatioDefaulted(self)

    def defrostType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostType(self)

    def isDefrostTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isDefrostTypeDefaulted(self)

    def defrostControlType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostControlType(self)

    def isDefrostControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isDefrostControlTypeDefaulted(self)

    def defrostSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostSchedule(self)

    def defrostDripDownSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostDripDownSchedule(self)

    def defrostPower(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostPower(self)

    def temperatureTerminationDefrostFractiontoIce(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_temperatureTerminationDefrostFractiontoIce(self)

    def verticalLocation(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_verticalLocation(self)

    def isVerticalLocationDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isVerticalLocationDefaulted(self)

    def averageRefrigerantChargeInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_averageRefrigerantChargeInventory(self)

    def isAverageRefrigerantChargeInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isAverageRefrigerantChargeInventoryDefaulted(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetAvailabilitySchedule(self)

    def setCapacityRatingType(self, capacityRatingType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setCapacityRatingType(self, capacityRatingType)

    def setRatedUnitLoadFactor(self, ratedUnitLoadFactor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedUnitLoadFactor(self, ratedUnitLoadFactor)

    def resetRatedUnitLoadFactor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRatedUnitLoadFactor(self)

    def setRatedCapacity(self, ratedCapacity: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedCapacity(self, ratedCapacity)

    def resetRatedCapacity(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRatedCapacity(self)

    def setRatedRelativeHumidity(self, ratedRelativeHumidity: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedRelativeHumidity(self, ratedRelativeHumidity)

    def resetRatedRelativeHumidity(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRatedRelativeHumidity(self)

    def setRatedCoolingSourceTemperature(self, ratedCoolingSourceTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedCoolingSourceTemperature(self, ratedCoolingSourceTemperature)

    def setRatedTemperatureDifferenceDT1(self, ratedTemperatureDifferenceDT1: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedTemperatureDifferenceDT1(self, ratedTemperatureDifferenceDT1)

    def setMaximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self, maximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setMaximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self, maximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature)

    def resetMaximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetMaximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self)

    def setCoilMaterialCorrectionFactor(self, coilMaterialCorrectionFactor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setCoilMaterialCorrectionFactor(self, coilMaterialCorrectionFactor)

    def resetCoilMaterialCorrectionFactor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetCoilMaterialCorrectionFactor(self)

    def setRefrigerantCorrectionFactor(self, refrigerantCorrectionFactor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRefrigerantCorrectionFactor(self, refrigerantCorrectionFactor)

    def resetRefrigerantCorrectionFactor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRefrigerantCorrectionFactor(self)

    def setSHR60CorrectionFactor(self, sHR60CorrectionFactor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setSHR60CorrectionFactor(self, sHR60CorrectionFactor)

    def resetSHR60CorrectionFactor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetSHR60CorrectionFactor(self)

    def setRatedTotalHeatingPower(self, ratedTotalHeatingPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedTotalHeatingPower(self, ratedTotalHeatingPower)

    def setHeatingPowerSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setHeatingPowerSchedule(self, schedule)

    def resetHeatingPowerSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetHeatingPowerSchedule(self)

    def setFanSpeedControlType(self, fanSpeedControlType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setFanSpeedControlType(self, fanSpeedControlType)

    def resetFanSpeedControlType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetFanSpeedControlType(self)

    def setRatedFanPower(self, ratedFanPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedFanPower(self, ratedFanPower)

    def resetRatedFanPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRatedFanPower(self)

    def setRatedAirFlow(self, ratedAirFlow: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedAirFlow(self, ratedAirFlow)

    def setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio)

    def resetMinimumFanAirFlowRatio(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetMinimumFanAirFlowRatio(self)

    def setDefrostType(self, defrostType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostType(self, defrostType)

    def resetDefrostType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetDefrostType(self)

    def setDefrostControlType(self, defrostControlType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostControlType(self, defrostControlType)

    def resetDefrostControlType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetDefrostControlType(self)

    def setDefrostSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostSchedule(self, schedule)

    def setDefrostDripDownSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostDripDownSchedule(self, schedule)

    def resetDefrostDripDownSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetDefrostDripDownSchedule(self)

    def setDefrostPower(self, defrostPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostPower(self, defrostPower)

    def resetDefrostPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetDefrostPower(self)

    def setTemperatureTerminationDefrostFractiontoIce(self, temperatureTerminationDefrostFractiontoIce: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setTemperatureTerminationDefrostFractiontoIce(self, temperatureTerminationDefrostFractiontoIce)

    def resetTemperatureTerminationDefrostFractiontoIce(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetTemperatureTerminationDefrostFractiontoIce(self)

    def setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory)

    def resetAverageRefrigerantChargeInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetAverageRefrigerantChargeInventory(self)
RefrigerationAirChiller_swigregister = _openstudiomodelrefrigeration.RefrigerationAirChiller_swigregister
RefrigerationAirChiller_swigregister(RefrigerationAirChiller)

def RefrigerationAirChiller_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationAirChiller_iddObjectType()
RefrigerationAirChiller_iddObjectType = _openstudiomodelrefrigeration.RefrigerationAirChiller_iddObjectType

def RefrigerationAirChiller_capacityRatingTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationAirChiller_capacityRatingTypeValues()
RefrigerationAirChiller_capacityRatingTypeValues = _openstudiomodelrefrigeration.RefrigerationAirChiller_capacityRatingTypeValues

def RefrigerationAirChiller_fanSpeedControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationAirChiller_fanSpeedControlTypeValues()
RefrigerationAirChiller_fanSpeedControlTypeValues = _openstudiomodelrefrigeration.RefrigerationAirChiller_fanSpeedControlTypeValues

def RefrigerationAirChiller_defrostTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostTypeValues()
RefrigerationAirChiller_defrostTypeValues = _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostTypeValues

def RefrigerationAirChiller_defrostControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostControlTypeValues()
RefrigerationAirChiller_defrostControlTypeValues = _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostControlTypeValues

def RefrigerationAirChiller_verticalLocationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationAirChiller_verticalLocationValues()
RefrigerationAirChiller_verticalLocationValues = _openstudiomodelrefrigeration.RefrigerationAirChiller_verticalLocationValues


def toRefrigerationAirChiller(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationAirChiller >":
    return _openstudiomodelrefrigeration.toRefrigerationAirChiller(idfObject)
toRefrigerationAirChiller = _openstudiomodelrefrigeration.toRefrigerationAirChiller

def getRefrigerationAirChiller(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationAirChiller >":
    return _openstudiomodelrefrigeration.getRefrigerationAirChiller(t_model, t_handle)
getRefrigerationAirChiller = _openstudiomodelrefrigeration.getRefrigerationAirChiller

def getRefrigerationAirChillers(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationAirChiller,std::allocator< openstudio::model::RefrigerationAirChiller > >":
    return _openstudiomodelrefrigeration.getRefrigerationAirChillers(t_model)
getRefrigerationAirChillers = _openstudiomodelrefrigeration.getRefrigerationAirChillers

def getRefrigerationAirChillerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationAirChiller >":
    return _openstudiomodelrefrigeration.getRefrigerationAirChillerByName(t_model, t_name)
getRefrigerationAirChillerByName = _openstudiomodelrefrigeration.getRefrigerationAirChillerByName

def getRefrigerationAirChillersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationAirChiller,std::allocator< openstudio::model::RefrigerationAirChiller > >":
    return _openstudiomodelrefrigeration.getRefrigerationAirChillersByName(t_model, t_name, t_exactMatch)
getRefrigerationAirChillersByName = _openstudiomodelrefrigeration.getRefrigerationAirChillersByName
class RefrigerationCase(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCase, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCase, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', caseDefrostSchedule: 'Schedule'):
        this = _openstudiomodelrefrigeration.new_RefrigerationCase(model, caseDefrostSchedule)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCase
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCase_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationCase_iddObjectType)
    __swig_getmethods__["latentCaseCreditCurveTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCase_latentCaseCreditCurveTypeValues
    if _newclass:
        latentCaseCreditCurveTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCase_latentCaseCreditCurveTypeValues)
    __swig_getmethods__["antiSweatHeaterControlTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCase_antiSweatHeaterControlTypeValues
    if _newclass:
        antiSweatHeaterControlTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCase_antiSweatHeaterControlTypeValues)
    __swig_getmethods__["caseDefrostTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostTypeValues
    if _newclass:
        caseDefrostTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCase_caseDefrostTypeValues)
    __swig_getmethods__["defrostEnergyCorrectionCurveTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCase_defrostEnergyCorrectionCurveTypeValues
    if _newclass:
        defrostEnergyCorrectionCurveTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCase_defrostEnergyCorrectionCurveTypeValues)
    __swig_getmethods__["unitTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCase_unitTypeValues
    if _newclass:
        unitTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCase_unitTypeValues)

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationCase_availabilitySchedule(self)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelrefrigeration.RefrigerationCase_thermalZone(self)

    def ratedAmbientTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedAmbientTemperature(self)

    def isRatedAmbientTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedAmbientTemperatureDefaulted(self)

    def ratedAmbientRelativeHumidity(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedAmbientRelativeHumidity(self)

    def isRatedAmbientRelativeHumidityDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedAmbientRelativeHumidityDefaulted(self)

    def ratedTotalCoolingCapacityperUnitLength(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedTotalCoolingCapacityperUnitLength(self)

    def isRatedTotalCoolingCapacityperUnitLengthDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedTotalCoolingCapacityperUnitLengthDefaulted(self)

    def ratedLatentHeatRatio(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedLatentHeatRatio(self)

    def isRatedLatentHeatRatioDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedLatentHeatRatioDefaulted(self)

    def ratedRuntimeFraction(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedRuntimeFraction(self)

    def isRatedRuntimeFractionDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedRuntimeFractionDefaulted(self)

    def caseLength(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseLength(self)

    def isCaseLengthDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseLengthDefaulted(self)

    def caseOperatingTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseOperatingTemperature(self)

    def isCaseOperatingTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseOperatingTemperatureDefaulted(self)

    def latentCaseCreditCurveType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCase_latentCaseCreditCurveType(self)

    def isLatentCaseCreditCurveTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isLatentCaseCreditCurveTypeDefaulted(self)

    def latentCaseCreditCurve(self) -> "openstudio::model::CurveCubic":
        return _openstudiomodelrefrigeration.RefrigerationCase_latentCaseCreditCurve(self)

    def standardCaseFanPowerperUnitLength(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_standardCaseFanPowerperUnitLength(self)

    def isStandardCaseFanPowerperUnitLengthDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isStandardCaseFanPowerperUnitLengthDefaulted(self)

    def operatingCaseFanPowerperUnitLength(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_operatingCaseFanPowerperUnitLength(self)

    def isOperatingCaseFanPowerperUnitLengthDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isOperatingCaseFanPowerperUnitLengthDefaulted(self)

    def standardCaseLightingPowerperUnitLength(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_standardCaseLightingPowerperUnitLength(self)

    def isStandardCaseLightingPowerperUnitLengthDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isStandardCaseLightingPowerperUnitLengthDefaulted(self)

    def installedCaseLightingPowerperUnitLength(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_installedCaseLightingPowerperUnitLength(self)

    def caseLightingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseLightingSchedule(self)

    def fractionofLightingEnergytoCase(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_fractionofLightingEnergytoCase(self)

    def isFractionofLightingEnergytoCaseDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isFractionofLightingEnergytoCaseDefaulted(self)

    def caseAntiSweatHeaterPowerperUnitLength(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseAntiSweatHeaterPowerperUnitLength(self)

    def isCaseAntiSweatHeaterPowerperUnitLengthDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseAntiSweatHeaterPowerperUnitLengthDefaulted(self)

    def minimumAntiSweatHeaterPowerperUnitLength(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_minimumAntiSweatHeaterPowerperUnitLength(self)

    def isMinimumAntiSweatHeaterPowerperUnitLengthDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isMinimumAntiSweatHeaterPowerperUnitLengthDefaulted(self)

    def antiSweatHeaterControlType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCase_antiSweatHeaterControlType(self)

    def isAntiSweatHeaterControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isAntiSweatHeaterControlTypeDefaulted(self)

    def humidityatZeroAntiSweatHeaterEnergy(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_humidityatZeroAntiSweatHeaterEnergy(self)

    def isHumidityatZeroAntiSweatHeaterEnergyDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isHumidityatZeroAntiSweatHeaterEnergyDefaulted(self)

    def caseHeight(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseHeight(self)

    def isCaseHeightDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseHeightDefaulted(self)

    def fractionofAntiSweatHeaterEnergytoCase(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_fractionofAntiSweatHeaterEnergytoCase(self)

    def isFractionofAntiSweatHeaterEnergytoCaseDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isFractionofAntiSweatHeaterEnergytoCaseDefaulted(self)

    def caseDefrostPowerperUnitLength(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostPowerperUnitLength(self)

    def isCaseDefrostPowerperUnitLengthDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseDefrostPowerperUnitLengthDefaulted(self)

    def caseDefrostType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostType(self)

    def isCaseDefrostTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseDefrostTypeDefaulted(self)

    def caseDefrostSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostSchedule(self)

    def caseDefrostDripDownSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostDripDownSchedule(self)

    def defrostEnergyCorrectionCurveType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrostEnergyCorrectionCurveType(self)

    def isDefrostEnergyCorrectionCurveTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isDefrostEnergyCorrectionCurveTypeDefaulted(self)

    def defrostEnergyCorrectionCurve(self) -> "boost::optional< openstudio::model::CurveCubic >":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrostEnergyCorrectionCurve(self)

    def underCaseHVACReturnAirFraction(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_underCaseHVACReturnAirFraction(self)

    def isUnderCaseHVACReturnAirFractionDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isUnderCaseHVACReturnAirFractionDefaulted(self)

    def refrigeratedCaseRestockingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationCase_refrigeratedCaseRestockingSchedule(self)

    def caseCreditFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseCreditFractionSchedule(self)

    def designEvaporatorTemperatureorBrineInletTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_designEvaporatorTemperatureorBrineInletTemperature(self)

    def averageRefrigerantChargeInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCase_averageRefrigerantChargeInventory(self)

    def isAverageRefrigerantChargeInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isAverageRefrigerantChargeInventoryDefaulted(self)

    def numberOfDoors(self) -> "boost::optional< int >":
        return _openstudiomodelrefrigeration.RefrigerationCase_numberOfDoors(self)

    def ratedTotalCoolingCapacityperDoor(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedTotalCoolingCapacityperDoor(self)

    def standardCaseFanPowerperDoor(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_standardCaseFanPowerperDoor(self)

    def operatingCaseFanPowerperDoor(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_operatingCaseFanPowerperDoor(self)

    def standardCaseLightingPowerperDoor(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_standardCaseLightingPowerperDoor(self)

    def installedCaseLightingPowerperDoor(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_installedCaseLightingPowerperDoor(self)

    def caseAntiSweatHeaterPowerperDoor(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseAntiSweatHeaterPowerperDoor(self)

    def minimumAntiSweatHeaterPowerperDoor(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_minimumAntiSweatHeaterPowerperDoor(self)

    def caseDefrostPowerperDoor(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostPowerperDoor(self)

    def unitType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCase_unitType(self)

    def isUnitTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_isUnitTypeDefaulted(self)

    def durationofDefrostCycle(self) -> "boost::optional< int >":
        return _openstudiomodelrefrigeration.RefrigerationCase_durationofDefrostCycle(self)

    def dripDownTime(self) -> "boost::optional< int >":
        return _openstudiomodelrefrigeration.RefrigerationCase_dripDownTime(self)

    def defrost1StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost1StartTime(self)

    def defrost2StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost2StartTime(self)

    def defrost3StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost3StartTime(self)

    def defrost4StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost4StartTime(self)

    def defrost5StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost5StartTime(self)

    def defrost6StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost6StartTime(self)

    def defrost7StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost7StartTime(self)

    def defrost8StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost8StartTime(self)

    def system(self) -> "boost::optional< RefrigerationSystem >":
        return _openstudiomodelrefrigeration.RefrigerationCase_system(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetAvailabilitySchedule(self)

    def setThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setThermalZone(self, thermalZone)

    def resetThermalZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetThermalZone(self)

    def setRatedAmbientTemperature(self, ratedAmbientTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedAmbientTemperature(self, ratedAmbientTemperature)

    def resetRatedAmbientTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedAmbientTemperature(self)

    def setRatedAmbientRelativeHumidity(self, ratedAmbientRelativeHumidity: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedAmbientRelativeHumidity(self, ratedAmbientRelativeHumidity)

    def resetRatedAmbientRelativeHumidity(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedAmbientRelativeHumidity(self)

    def setRatedTotalCoolingCapacityperUnitLength(self, ratedTotalCoolingCapacityperUnitLength: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedTotalCoolingCapacityperUnitLength(self, ratedTotalCoolingCapacityperUnitLength)

    def resetRatedTotalCoolingCapacityperUnitLength(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedTotalCoolingCapacityperUnitLength(self)

    def setRatedLatentHeatRatio(self, ratedLatentHeatRatio: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedLatentHeatRatio(self, ratedLatentHeatRatio)

    def resetRatedLatentHeatRatio(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedLatentHeatRatio(self)

    def setRatedRuntimeFraction(self, ratedRuntimeFraction: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedRuntimeFraction(self, ratedRuntimeFraction)

    def resetRatedRuntimeFraction(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedRuntimeFraction(self)

    def setCaseLength(self, caseLength: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseLength(self, caseLength)

    def resetCaseLength(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseLength(self)

    def setCaseOperatingTemperature(self, caseOperatingTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseOperatingTemperature(self, caseOperatingTemperature)

    def resetCaseOperatingTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseOperatingTemperature(self)

    def setLatentCaseCreditCurveType(self, latentCaseCreditCurveType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setLatentCaseCreditCurveType(self, latentCaseCreditCurveType)

    def resetLatentCaseCreditCurveType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetLatentCaseCreditCurveType(self)

    def setLatentCaseCreditCurve(self, curveCubic: 'CurveCubic') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setLatentCaseCreditCurve(self, curveCubic)

    def setStandardCaseFanPowerperUnitLength(self, standardCaseFanPowerperUnitLength: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setStandardCaseFanPowerperUnitLength(self, standardCaseFanPowerperUnitLength)

    def resetStandardCaseFanPowerperUnitLength(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetStandardCaseFanPowerperUnitLength(self)

    def setOperatingCaseFanPowerperUnitLength(self, operatingCaseFanPowerperUnitLength: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setOperatingCaseFanPowerperUnitLength(self, operatingCaseFanPowerperUnitLength)

    def resetOperatingCaseFanPowerperUnitLength(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetOperatingCaseFanPowerperUnitLength(self)

    def setStandardCaseLightingPowerperUnitLength(self, standardCaseLightingPowerperUnitLength: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setStandardCaseLightingPowerperUnitLength(self, standardCaseLightingPowerperUnitLength)

    def resetStandardCaseLightingPowerperUnitLength(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetStandardCaseLightingPowerperUnitLength(self)

    def setInstalledCaseLightingPowerperUnitLength(self, installedCaseLightingPowerperUnitLength: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setInstalledCaseLightingPowerperUnitLength(self, installedCaseLightingPowerperUnitLength)

    def resetInstalledCaseLightingPowerperUnitLength(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetInstalledCaseLightingPowerperUnitLength(self)

    def setCaseLightingSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseLightingSchedule(self, schedule)

    def resetCaseLightingSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseLightingSchedule(self)

    def setFractionofLightingEnergytoCase(self, fractionofLightingEnergytoCase: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setFractionofLightingEnergytoCase(self, fractionofLightingEnergytoCase)

    def resetFractionofLightingEnergytoCase(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetFractionofLightingEnergytoCase(self)

    def setCaseAntiSweatHeaterPowerperUnitLength(self, caseAntiSweatHeaterPowerperUnitLength: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseAntiSweatHeaterPowerperUnitLength(self, caseAntiSweatHeaterPowerperUnitLength)

    def resetCaseAntiSweatHeaterPowerperUnitLength(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseAntiSweatHeaterPowerperUnitLength(self)

    def setMinimumAntiSweatHeaterPowerperUnitLength(self, minimumAntiSweatHeaterPowerperUnitLength: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setMinimumAntiSweatHeaterPowerperUnitLength(self, minimumAntiSweatHeaterPowerperUnitLength)

    def resetMinimumAntiSweatHeaterPowerperUnitLength(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetMinimumAntiSweatHeaterPowerperUnitLength(self)

    def setAntiSweatHeaterControlType(self, antiSweatHeaterControlType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setAntiSweatHeaterControlType(self, antiSweatHeaterControlType)

    def resetAntiSweatHeaterControlType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetAntiSweatHeaterControlType(self)

    def setHumidityatZeroAntiSweatHeaterEnergy(self, humidityatZeroAntiSweatHeaterEnergy: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setHumidityatZeroAntiSweatHeaterEnergy(self, humidityatZeroAntiSweatHeaterEnergy)

    def resetHumidityatZeroAntiSweatHeaterEnergy(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetHumidityatZeroAntiSweatHeaterEnergy(self)

    def setCaseHeight(self, caseHeight: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseHeight(self, caseHeight)

    def resetCaseHeight(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseHeight(self)

    def setFractionofAntiSweatHeaterEnergytoCase(self, fractionofAntiSweatHeaterEnergytoCase: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setFractionofAntiSweatHeaterEnergytoCase(self, fractionofAntiSweatHeaterEnergytoCase)

    def resetFractionofAntiSweatHeaterEnergytoCase(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetFractionofAntiSweatHeaterEnergytoCase(self)

    def setCaseDefrostPowerperUnitLength(self, caseDefrostPowerperUnitLength: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostPowerperUnitLength(self, caseDefrostPowerperUnitLength)

    def resetCaseDefrostPowerperUnitLength(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostPowerperUnitLength(self)

    def setCaseDefrostType(self, caseDefrostType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostType(self, caseDefrostType)

    def resetCaseDefrostType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostType(self)

    def setCaseDefrostSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostSchedule(self, schedule)

    def resetCaseDefrostSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostSchedule(self)

    def setCaseDefrostDripDownSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostDripDownSchedule(self, schedule)

    def resetCaseDefrostDripDownSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostDripDownSchedule(self)

    def setDefrostEnergyCorrectionCurveType(self, defrostEnergyCorrectionCurveType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrostEnergyCorrectionCurveType(self, defrostEnergyCorrectionCurveType)

    def resetDefrostEnergyCorrectionCurveType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrostEnergyCorrectionCurveType(self)

    def setDefrostEnergyCorrectionCurve(self, curveCubic: 'CurveCubic') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrostEnergyCorrectionCurve(self, curveCubic)

    def resetDefrostEnergyCorrectionCurve(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrostEnergyCorrectionCurve(self)

    def setUnderCaseHVACReturnAirFraction(self, underCaseHVACReturnAirFraction: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setUnderCaseHVACReturnAirFraction(self, underCaseHVACReturnAirFraction)

    def resetUnderCaseHVACReturnAirFraction(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetUnderCaseHVACReturnAirFraction(self)

    def setRefrigeratedCaseRestockingSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setRefrigeratedCaseRestockingSchedule(self, schedule)

    def resetRefrigeratedCaseRestockingSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRefrigeratedCaseRestockingSchedule(self)

    def setCaseCreditFractionSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseCreditFractionSchedule(self, schedule)

    def resetCaseCreditFractionSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseCreditFractionSchedule(self)

    def setDesignEvaporatorTemperatureorBrineInletTemperature(self, designEvaporatorTemperatureorBrineInletTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDesignEvaporatorTemperatureorBrineInletTemperature(self, designEvaporatorTemperatureorBrineInletTemperature)

    def resetDesignEvaporatorTemperatureorBrineInletTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDesignEvaporatorTemperatureorBrineInletTemperature(self)

    def setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory)

    def resetAverageRefrigerantChargeInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetAverageRefrigerantChargeInventory(self)

    def setNumberOfDoors(self, numberOfDoors: 'int') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setNumberOfDoors(self, numberOfDoors)

    def resetNumberOfDoors(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetNumberOfDoors(self)

    def setRatedTotalCoolingCapacityperDoor(self, ratedTotalCoolingCapacityperDoor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedTotalCoolingCapacityperDoor(self, ratedTotalCoolingCapacityperDoor)

    def resetRatedTotalCoolingCapacityperDoor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedTotalCoolingCapacityperDoor(self)

    def setStandardCaseFanPowerperDoor(self, standardCaseFanPowerperDoor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setStandardCaseFanPowerperDoor(self, standardCaseFanPowerperDoor)

    def resetStandardCaseFanPowerperDoor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetStandardCaseFanPowerperDoor(self)

    def setOperatingCaseFanPowerperDoor(self, operatingCaseFanPowerperDoor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setOperatingCaseFanPowerperDoor(self, operatingCaseFanPowerperDoor)

    def resetOperatingCaseFanPowerperDoor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetOperatingCaseFanPowerperDoor(self)

    def setStandardCaseLightingPowerperDoor(self, standardCaseLightingPowerperDoor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setStandardCaseLightingPowerperDoor(self, standardCaseLightingPowerperDoor)

    def resetStandardCaseLightingPowerperDoor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetStandardCaseLightingPowerperDoor(self)

    def setInstalledCaseLightingPowerperDoor(self, installedCaseLightingPowerperDoor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setInstalledCaseLightingPowerperDoor(self, installedCaseLightingPowerperDoor)

    def resetInstalledCaseLightingPowerperDoor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetInstalledCaseLightingPowerperDoor(self)

    def setCaseAntiSweatHeaterPowerperDoor(self, caseAntiSweatHeaterPowerperDoor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseAntiSweatHeaterPowerperDoor(self, caseAntiSweatHeaterPowerperDoor)

    def resetCaseAntiSweatHeaterPowerperDoor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseAntiSweatHeaterPowerperDoor(self)

    def setMinimumAntiSweatHeaterPowerperDoor(self, minimumAntiSweatHeaterPowerperDoor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setMinimumAntiSweatHeaterPowerperDoor(self, minimumAntiSweatHeaterPowerperDoor)

    def resetMinimumAntiSweatHeaterPowerperDoor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetMinimumAntiSweatHeaterPowerperDoor(self)

    def setCaseDefrostPowerperDoor(self, caseDefrostPowerperDoor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostPowerperDoor(self, caseDefrostPowerperDoor)

    def resetCaseDefrostPowerperDoor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostPowerperDoor(self)

    def setUnitType(self, unitType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setUnitType(self, unitType)

    def resetUnitType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetUnitType(self)

    def setDurationofDefrostCycle(self, durationofDefrostCycle: 'int') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDurationofDefrostCycle(self, durationofDefrostCycle)

    def resetDurationofDefrostCycle(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDurationofDefrostCycle(self)

    def setDripDownTime(self, dripDownTime: 'int') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDripDownTime(self, dripDownTime)

    def resetDripDownTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDripDownTime(self)

    def setDefrost1StartTime(self, defrost1StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost1StartTime(self, defrost1StartTime)

    def resetDefrost1StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost1StartTime(self)

    def setDefrost2StartTime(self, defrost2StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost2StartTime(self, defrost2StartTime)

    def resetDefrost2StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost2StartTime(self)

    def setDefrost3StartTime(self, defrost3StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost3StartTime(self, defrost3StartTime)

    def resetDefrost3StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost3StartTime(self)

    def setDefrost4StartTime(self, defrost4StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost4StartTime(self, defrost4StartTime)

    def resetDefrost4StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost4StartTime(self)

    def setDefrost5StartTime(self, defrost5StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost5StartTime(self, defrost5StartTime)

    def resetDefrost5StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost5StartTime(self)

    def setDefrost6StartTime(self, defrost6StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost6StartTime(self, defrost6StartTime)

    def resetDefrost6StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost6StartTime(self)

    def setDefrost7StartTime(self, defrost7StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost7StartTime(self, defrost7StartTime)

    def resetDefrost7StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost7StartTime(self)

    def setDefrost8StartTime(self, defrost8StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost8StartTime(self, defrost8StartTime)

    def resetDefrost8StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost8StartTime(self)

    def addToSystem(self, system: 'RefrigerationSystem &') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCase_addToSystem(self, system)

    def removeFromSystem(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCase_removeFromSystem(self)
RefrigerationCase_swigregister = _openstudiomodelrefrigeration.RefrigerationCase_swigregister
RefrigerationCase_swigregister(RefrigerationCase)

def RefrigerationCase_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationCase_iddObjectType()
RefrigerationCase_iddObjectType = _openstudiomodelrefrigeration.RefrigerationCase_iddObjectType

def RefrigerationCase_latentCaseCreditCurveTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCase_latentCaseCreditCurveTypeValues()
RefrigerationCase_latentCaseCreditCurveTypeValues = _openstudiomodelrefrigeration.RefrigerationCase_latentCaseCreditCurveTypeValues

def RefrigerationCase_antiSweatHeaterControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCase_antiSweatHeaterControlTypeValues()
RefrigerationCase_antiSweatHeaterControlTypeValues = _openstudiomodelrefrigeration.RefrigerationCase_antiSweatHeaterControlTypeValues

def RefrigerationCase_caseDefrostTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostTypeValues()
RefrigerationCase_caseDefrostTypeValues = _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostTypeValues

def RefrigerationCase_defrostEnergyCorrectionCurveTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCase_defrostEnergyCorrectionCurveTypeValues()
RefrigerationCase_defrostEnergyCorrectionCurveTypeValues = _openstudiomodelrefrigeration.RefrigerationCase_defrostEnergyCorrectionCurveTypeValues

def RefrigerationCase_unitTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCase_unitTypeValues()
RefrigerationCase_unitTypeValues = _openstudiomodelrefrigeration.RefrigerationCase_unitTypeValues


def toRefrigerationCase(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationCase >":
    return _openstudiomodelrefrigeration.toRefrigerationCase(idfObject)
toRefrigerationCase = _openstudiomodelrefrigeration.toRefrigerationCase

def getRefrigerationCase(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationCase >":
    return _openstudiomodelrefrigeration.getRefrigerationCase(t_model, t_handle)
getRefrigerationCase = _openstudiomodelrefrigeration.getRefrigerationCase

def getRefrigerationCases(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationCase,std::allocator< openstudio::model::RefrigerationCase > >":
    return _openstudiomodelrefrigeration.getRefrigerationCases(t_model)
getRefrigerationCases = _openstudiomodelrefrigeration.getRefrigerationCases

def getRefrigerationCaseByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationCase >":
    return _openstudiomodelrefrigeration.getRefrigerationCaseByName(t_model, t_name)
getRefrigerationCaseByName = _openstudiomodelrefrigeration.getRefrigerationCaseByName

def getRefrigerationCasesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationCase,std::allocator< openstudio::model::RefrigerationCase > >":
    return _openstudiomodelrefrigeration.getRefrigerationCasesByName(t_model, t_name, t_exactMatch)
getRefrigerationCasesByName = _openstudiomodelrefrigeration.getRefrigerationCasesByName
class RefrigerationCompressor(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCompressor, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCompressor, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationCompressor(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCompressor
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCompressor_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationCompressor_iddObjectType)
    __swig_getmethods__["modeofOperationValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCompressor_modeofOperationValues
    if _newclass:
        modeofOperationValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCompressor_modeofOperationValues)

    def refrigerationCompressorPowerCurve(self) -> "openstudio::model::CurveBicubic":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_refrigerationCompressorPowerCurve(self)

    def refrigerationCompressorCapacityCurve(self) -> "openstudio::model::CurveBicubic":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_refrigerationCompressorCapacityCurve(self)

    def ratedSuperheat(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_ratedSuperheat(self)

    def ratedReturnGasTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_ratedReturnGasTemperature(self)

    def ratedLiquidTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_ratedLiquidTemperature(self)

    def ratedSubcooling(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_ratedSubcooling(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_isEndUseSubcategoryDefaulted(self)

    def modeofOperation(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_modeofOperation(self)

    def transcriticalCompressorPowerCurve(self) -> "boost::optional< openstudio::model::CurveBicubic >":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_transcriticalCompressorPowerCurve(self)

    def transcriticalCompressorCapacityCurve(self) -> "boost::optional< openstudio::model::CurveBicubic >":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_transcriticalCompressorCapacityCurve(self)

    def setRefrigerationCompressorPowerCurve(self, curveBicubic: 'CurveBicubic') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRefrigerationCompressorPowerCurve(self, curveBicubic)

    def setRefrigerationCompressorCapacityCurve(self, curveBicubic: 'CurveBicubic') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRefrigerationCompressorCapacityCurve(self, curveBicubic)

    def setRatedSuperheat(self, ratedSuperheat: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRatedSuperheat(self, ratedSuperheat)

    def resetRatedSuperheat(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetRatedSuperheat(self)

    def setRatedReturnGasTemperature(self, ratedReturnGasTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRatedReturnGasTemperature(self, ratedReturnGasTemperature)

    def resetRatedReturnGasTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetRatedReturnGasTemperature(self)

    def setRatedLiquidTemperature(self, ratedLiquidTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRatedLiquidTemperature(self, ratedLiquidTemperature)

    def resetRatedLiquidTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetRatedLiquidTemperature(self)

    def setRatedSubcooling(self, ratedSubcooling: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRatedSubcooling(self, ratedSubcooling)

    def resetRatedSubcooling(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetRatedSubcooling(self)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetEndUseSubcategory(self)

    def setTranscriticalCompressorPowerCurve(self, curveBicubic: 'CurveBicubic') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setTranscriticalCompressorPowerCurve(self, curveBicubic)

    def resetTranscriticalCompressorPowerCurve(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetTranscriticalCompressorPowerCurve(self)

    def setTranscriticalCompressorCapacityCurve(self, curveBicubic: 'CurveBicubic') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setTranscriticalCompressorCapacityCurve(self, curveBicubic)

    def resetTranscriticalCompressorCapacityCurve(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetTranscriticalCompressorCapacityCurve(self)
RefrigerationCompressor_swigregister = _openstudiomodelrefrigeration.RefrigerationCompressor_swigregister
RefrigerationCompressor_swigregister(RefrigerationCompressor)

def RefrigerationCompressor_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationCompressor_iddObjectType()
RefrigerationCompressor_iddObjectType = _openstudiomodelrefrigeration.RefrigerationCompressor_iddObjectType

def RefrigerationCompressor_modeofOperationValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCompressor_modeofOperationValues()
RefrigerationCompressor_modeofOperationValues = _openstudiomodelrefrigeration.RefrigerationCompressor_modeofOperationValues


def toRefrigerationCompressor(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationCompressor >":
    return _openstudiomodelrefrigeration.toRefrigerationCompressor(idfObject)
toRefrigerationCompressor = _openstudiomodelrefrigeration.toRefrigerationCompressor

def getRefrigerationCompressor(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationCompressor >":
    return _openstudiomodelrefrigeration.getRefrigerationCompressor(t_model, t_handle)
getRefrigerationCompressor = _openstudiomodelrefrigeration.getRefrigerationCompressor

def getRefrigerationCompressors(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationCompressor,std::allocator< openstudio::model::RefrigerationCompressor > >":
    return _openstudiomodelrefrigeration.getRefrigerationCompressors(t_model)
getRefrigerationCompressors = _openstudiomodelrefrigeration.getRefrigerationCompressors

def getRefrigerationCompressorByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationCompressor >":
    return _openstudiomodelrefrigeration.getRefrigerationCompressorByName(t_model, t_name)
getRefrigerationCompressorByName = _openstudiomodelrefrigeration.getRefrigerationCompressorByName

def getRefrigerationCompressorsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationCompressor,std::allocator< openstudio::model::RefrigerationCompressor > >":
    return _openstudiomodelrefrigeration.getRefrigerationCompressorsByName(t_model, t_name, t_exactMatch)
getRefrigerationCompressorsByName = _openstudiomodelrefrigeration.getRefrigerationCompressorsByName
class RefrigerationCondenserAirCooled(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCondenserAirCooled, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCondenserAirCooled, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationCondenserAirCooled(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserAirCooled
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_iddObjectType)
    __swig_getmethods__["condenserFanSpeedControlTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condenserFanSpeedControlTypeValues
    if _newclass:
        condenserFanSpeedControlTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condenserFanSpeedControlTypeValues)

    def ratedEffectiveTotalHeatRejectionRateCurve(self) -> "boost::optional< openstudio::model::CurveLinear >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_ratedEffectiveTotalHeatRejectionRateCurve(self)

    def ratedSubcoolingTemperatureDifference(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_ratedSubcoolingTemperatureDifference(self)

    def isRatedSubcoolingTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isRatedSubcoolingTemperatureDifferenceDefaulted(self)

    def condenserFanSpeedControlType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condenserFanSpeedControlType(self)

    def isCondenserFanSpeedControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isCondenserFanSpeedControlTypeDefaulted(self)

    def ratedFanPower(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_ratedFanPower(self)

    def isRatedFanPowerDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isRatedFanPowerDefaulted(self)

    def minimumFanAirFlowRatio(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_minimumFanAirFlowRatio(self)

    def isMinimumFanAirFlowRatioDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isMinimumFanAirFlowRatioDefaulted(self)

    def airInletZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_airInletZone(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isEndUseSubcategoryDefaulted(self)

    def condenserRefrigerantOperatingChargeInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condenserRefrigerantOperatingChargeInventory(self)

    def isCondenserRefrigerantOperatingChargeInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isCondenserRefrigerantOperatingChargeInventoryDefaulted(self)

    def condensateReceiverRefrigerantInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condensateReceiverRefrigerantInventory(self)

    def isCondensateReceiverRefrigerantInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isCondensateReceiverRefrigerantInventoryDefaulted(self)

    def condensatePipingRefrigerantInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condensatePipingRefrigerantInventory(self)

    def isCondensatePipingRefrigerantInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isCondensatePipingRefrigerantInventoryDefaulted(self)

    def setRatedEffectiveTotalHeatRejectionRateCurve(self, curveLinear: 'CurveLinear') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setRatedEffectiveTotalHeatRejectionRateCurve(self, curveLinear)

    def resetRatedEffectiveTotalHeatRejectionRateCurve(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetRatedEffectiveTotalHeatRejectionRateCurve(self)

    def setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference)

    def resetRatedSubcoolingTemperatureDifference(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetRatedSubcoolingTemperatureDifference(self)

    def setCondenserFanSpeedControlType(self, condenserFanSpeedControlType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setCondenserFanSpeedControlType(self, condenserFanSpeedControlType)

    def resetCondenserFanSpeedControlType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetCondenserFanSpeedControlType(self)

    def setRatedFanPower(self, ratedFanPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setRatedFanPower(self, ratedFanPower)

    def resetRatedFanPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetRatedFanPower(self)

    def setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio)

    def resetMinimumFanAirFlowRatio(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetMinimumFanAirFlowRatio(self)

    def setAirInletZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setAirInletZone(self, thermalZone)

    def resetAirInletZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetAirInletZone(self)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetEndUseSubcategory(self)

    def setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory)

    def resetCondenserRefrigerantOperatingChargeInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetCondenserRefrigerantOperatingChargeInventory(self)

    def setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory)

    def resetCondensateReceiverRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetCondensateReceiverRefrigerantInventory(self)

    def setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory)

    def resetCondensatePipingRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetCondensatePipingRefrigerantInventory(self)
RefrigerationCondenserAirCooled_swigregister = _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_swigregister
RefrigerationCondenserAirCooled_swigregister(RefrigerationCondenserAirCooled)

def RefrigerationCondenserAirCooled_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_iddObjectType()
RefrigerationCondenserAirCooled_iddObjectType = _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_iddObjectType

def RefrigerationCondenserAirCooled_condenserFanSpeedControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condenserFanSpeedControlTypeValues()
RefrigerationCondenserAirCooled_condenserFanSpeedControlTypeValues = _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condenserFanSpeedControlTypeValues


def toRefrigerationCondenserAirCooled(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationCondenserAirCooled >":
    return _openstudiomodelrefrigeration.toRefrigerationCondenserAirCooled(idfObject)
toRefrigerationCondenserAirCooled = _openstudiomodelrefrigeration.toRefrigerationCondenserAirCooled

def getRefrigerationCondenserAirCooled(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationCondenserAirCooled >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooled(t_model, t_handle)
getRefrigerationCondenserAirCooled = _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooled

def getRefrigerationCondenserAirCooleds(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled,std::allocator< openstudio::model::RefrigerationCondenserAirCooled > >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooleds(t_model)
getRefrigerationCondenserAirCooleds = _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooleds

def getRefrigerationCondenserAirCooledByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationCondenserAirCooled >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooledByName(t_model, t_name)
getRefrigerationCondenserAirCooledByName = _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooledByName

def getRefrigerationCondenserAirCooledsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationCondenserAirCooled,std::allocator< openstudio::model::RefrigerationCondenserAirCooled > >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooledsByName(t_model, t_name, t_exactMatch)
getRefrigerationCondenserAirCooledsByName = _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooledsByName
class RefrigerationCondenserCascade(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCondenserCascade, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCondenserCascade, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationCondenserCascade(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserCascade
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCondenserCascade_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationCondenserCascade_iddObjectType)
    __swig_getmethods__["condensingTemperatureControlTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensingTemperatureControlTypeValues
    if _newclass:
        condensingTemperatureControlTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensingTemperatureControlTypeValues)

    def ratedCondensingTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_ratedCondensingTemperature(self)

    def ratedApproachTemperatureDifference(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_ratedApproachTemperatureDifference(self)

    def isRatedApproachTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_isRatedApproachTemperatureDifferenceDefaulted(self)

    def ratedEffectiveTotalHeatRejectionRate(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_ratedEffectiveTotalHeatRejectionRate(self)

    def condensingTemperatureControlType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensingTemperatureControlType(self)

    def isCondensingTemperatureControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_isCondensingTemperatureControlTypeDefaulted(self)

    def condenserRefrigerantOperatingChargeInventory(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condenserRefrigerantOperatingChargeInventory(self)

    def condensateReceiverRefrigerantInventory(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensateReceiverRefrigerantInventory(self)

    def condensatePipingRefrigerantInventory(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensatePipingRefrigerantInventory(self)

    def setRatedCondensingTemperature(self, ratedCondensingTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setRatedCondensingTemperature(self, ratedCondensingTemperature)

    def setRatedApproachTemperatureDifference(self, ratedApproachTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setRatedApproachTemperatureDifference(self, ratedApproachTemperatureDifference)

    def resetRatedApproachTemperatureDifference(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetRatedApproachTemperatureDifference(self)

    def setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate)

    def setCondensingTemperatureControlType(self, condensingTemperatureControlType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setCondensingTemperatureControlType(self, condensingTemperatureControlType)

    def resetCondensingTemperatureControlType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetCondensingTemperatureControlType(self)

    def setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory)

    def resetCondenserRefrigerantOperatingChargeInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetCondenserRefrigerantOperatingChargeInventory(self)

    def setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory)

    def resetCondensateReceiverRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetCondensateReceiverRefrigerantInventory(self)

    def setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory)

    def resetCondensatePipingRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetCondensatePipingRefrigerantInventory(self)
RefrigerationCondenserCascade_swigregister = _openstudiomodelrefrigeration.RefrigerationCondenserCascade_swigregister
RefrigerationCondenserCascade_swigregister(RefrigerationCondenserCascade)

def RefrigerationCondenserCascade_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_iddObjectType()
RefrigerationCondenserCascade_iddObjectType = _openstudiomodelrefrigeration.RefrigerationCondenserCascade_iddObjectType

def RefrigerationCondenserCascade_condensingTemperatureControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensingTemperatureControlTypeValues()
RefrigerationCondenserCascade_condensingTemperatureControlTypeValues = _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensingTemperatureControlTypeValues


def toRefrigerationCondenserCascade(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationCondenserCascade >":
    return _openstudiomodelrefrigeration.toRefrigerationCondenserCascade(idfObject)
toRefrigerationCondenserCascade = _openstudiomodelrefrigeration.toRefrigerationCondenserCascade

def getRefrigerationCondenserCascade(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationCondenserCascade >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserCascade(t_model, t_handle)
getRefrigerationCondenserCascade = _openstudiomodelrefrigeration.getRefrigerationCondenserCascade

def getRefrigerationCondenserCascades(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationCondenserCascade,std::allocator< openstudio::model::RefrigerationCondenserCascade > >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserCascades(t_model)
getRefrigerationCondenserCascades = _openstudiomodelrefrigeration.getRefrigerationCondenserCascades

def getRefrigerationCondenserCascadeByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationCondenserCascade >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserCascadeByName(t_model, t_name)
getRefrigerationCondenserCascadeByName = _openstudiomodelrefrigeration.getRefrigerationCondenserCascadeByName

def getRefrigerationCondenserCascadesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationCondenserCascade,std::allocator< openstudio::model::RefrigerationCondenserCascade > >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserCascadesByName(t_model, t_name, t_exactMatch)
getRefrigerationCondenserCascadesByName = _openstudiomodelrefrigeration.getRefrigerationCondenserCascadesByName
class RefrigerationCondenserEvaporativeCooled(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCondenserEvaporativeCooled, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCondenserEvaporativeCooled, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationCondenserEvaporativeCooled(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserEvaporativeCooled
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_iddObjectType)
    __swig_getmethods__["fanSpeedControlTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_fanSpeedControlTypeValues
    if _newclass:
        fanSpeedControlTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_fanSpeedControlTypeValues)

    def ratedEffectiveTotalHeatRejectionRate(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedEffectiveTotalHeatRejectionRate(self)

    def ratedSubcoolingTemperatureDifference(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedSubcoolingTemperatureDifference(self)

    def isRatedSubcoolingTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedSubcoolingTemperatureDifferenceDefaulted(self)

    def fanSpeedControlType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_fanSpeedControlType(self)

    def isFanSpeedControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isFanSpeedControlTypeDefaulted(self)

    def ratedFanPower(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedFanPower(self)

    def minimumFanAirFlowRatio(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_minimumFanAirFlowRatio(self)

    def isMinimumFanAirFlowRatioDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isMinimumFanAirFlowRatioDefaulted(self)

    def approachTemperatureConstantTerm(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_approachTemperatureConstantTerm(self)

    def isApproachTemperatureConstantTermDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isApproachTemperatureConstantTermDefaulted(self)

    def approachTemperatureCoefficient2(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_approachTemperatureCoefficient2(self)

    def isApproachTemperatureCoefficient2Defaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isApproachTemperatureCoefficient2Defaulted(self)

    def approachTemperatureCoefficient3(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_approachTemperatureCoefficient3(self)

    def isApproachTemperatureCoefficient3Defaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isApproachTemperatureCoefficient3Defaulted(self)

    def approachTemperatureCoefficient4(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_approachTemperatureCoefficient4(self)

    def isApproachTemperatureCoefficient4Defaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isApproachTemperatureCoefficient4Defaulted(self)

    def minimumCapacityFactor(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_minimumCapacityFactor(self)

    def isMinimumCapacityFactorDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isMinimumCapacityFactorDefaulted(self)

    def maximumCapacityFactor(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_maximumCapacityFactor(self)

    def isMaximumCapacityFactorDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isMaximumCapacityFactorDefaulted(self)

    def ratedAirFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedAirFlowRate(self)

    def isRatedAirFlowRateDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedAirFlowRateDefaulted(self)

    def isRatedAirFlowRateAutocalculated(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedAirFlowRateAutocalculated(self)

    def basinHeaterCapacity(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_basinHeaterCapacity(self)

    def isBasinHeaterCapacityDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isBasinHeaterCapacityDefaulted(self)

    def basinHeaterSetpointTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_basinHeaterSetpointTemperature(self)

    def isBasinHeaterSetpointTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isBasinHeaterSetpointTemperatureDefaulted(self)

    def ratedWaterPumpPower(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedWaterPumpPower(self)

    def isRatedWaterPumpPowerDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedWaterPumpPowerDefaulted(self)

    def isRatedWaterPumpPowerAutocalculated(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedWaterPumpPowerAutocalculated(self)

    def evaporativeCondenserAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_evaporativeCondenserAvailabilitySchedule(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isEndUseSubcategoryDefaulted(self)

    def condenserRefrigerantOperatingChargeInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_condenserRefrigerantOperatingChargeInventory(self)

    def isCondenserRefrigerantOperatingChargeInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isCondenserRefrigerantOperatingChargeInventoryDefaulted(self)

    def condensateReceiverRefrigerantInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_condensateReceiverRefrigerantInventory(self)

    def isCondensateReceiverRefrigerantInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isCondensateReceiverRefrigerantInventoryDefaulted(self)

    def condensatePipingRefrigerantInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_condensatePipingRefrigerantInventory(self)

    def isCondensatePipingRefrigerantInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isCondensatePipingRefrigerantInventoryDefaulted(self)

    def setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate)

    def setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference)

    def resetRatedSubcoolingTemperatureDifference(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetRatedSubcoolingTemperatureDifference(self)

    def setFanSpeedControlType(self, fanSpeedControlType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setFanSpeedControlType(self, fanSpeedControlType)

    def resetFanSpeedControlType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetFanSpeedControlType(self)

    def setRatedFanPower(self, ratedFanPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedFanPower(self, ratedFanPower)

    def setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio)

    def resetMinimumFanAirFlowRatio(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetMinimumFanAirFlowRatio(self)

    def setApproachTemperatureConstantTerm(self, approachTemperatureConstantTerm: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setApproachTemperatureConstantTerm(self, approachTemperatureConstantTerm)

    def resetApproachTemperatureConstantTerm(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetApproachTemperatureConstantTerm(self)

    def setApproachTemperatureCoefficient2(self, approachTemperatureCoefficient2: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setApproachTemperatureCoefficient2(self, approachTemperatureCoefficient2)

    def resetApproachTemperatureCoefficient2(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetApproachTemperatureCoefficient2(self)

    def setApproachTemperatureCoefficient3(self, approachTemperatureCoefficient3: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setApproachTemperatureCoefficient3(self, approachTemperatureCoefficient3)

    def resetApproachTemperatureCoefficient3(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetApproachTemperatureCoefficient3(self)

    def setApproachTemperatureCoefficient4(self, approachTemperatureCoefficient4: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setApproachTemperatureCoefficient4(self, approachTemperatureCoefficient4)

    def resetApproachTemperatureCoefficient4(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetApproachTemperatureCoefficient4(self)

    def setMinimumCapacityFactor(self, minimumCapacityFactor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setMinimumCapacityFactor(self, minimumCapacityFactor)

    def resetMinimumCapacityFactor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetMinimumCapacityFactor(self)

    def setMaximumCapacityFactor(self, maximumCapacityFactor: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setMaximumCapacityFactor(self, maximumCapacityFactor)

    def resetMaximumCapacityFactor(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetMaximumCapacityFactor(self)

    def setRatedAirFlowRate(self, ratedAirFlowRate: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedAirFlowRate(self, ratedAirFlowRate)

    def resetRatedAirFlowRate(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetRatedAirFlowRate(self)

    def autocalculateRatedAirFlowRate(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_autocalculateRatedAirFlowRate(self)

    def setBasinHeaterCapacity(self, basinHeaterCapacity: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def resetBasinHeaterCapacity(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetBasinHeaterCapacity(self)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def resetBasinHeaterSetpointTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetBasinHeaterSetpointTemperature(self)

    def setRatedWaterPumpPower(self, ratedWaterPumpPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedWaterPumpPower(self, ratedWaterPumpPower)

    def resetRatedWaterPumpPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetRatedWaterPumpPower(self)

    def autocalculateRatedWaterPumpPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_autocalculateRatedWaterPumpPower(self)

    def setEvaporativeCondenserAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setEvaporativeCondenserAvailabilitySchedule(self, schedule)

    def resetEvaporativeCondenserAvailabilitySchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetEvaporativeCondenserAvailabilitySchedule(self)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetEndUseSubcategory(self)

    def setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory)

    def resetCondenserRefrigerantOperatingChargeInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetCondenserRefrigerantOperatingChargeInventory(self)

    def setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory)

    def resetCondensateReceiverRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetCondensateReceiverRefrigerantInventory(self)

    def setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory)

    def resetCondensatePipingRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetCondensatePipingRefrigerantInventory(self)
RefrigerationCondenserEvaporativeCooled_swigregister = _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_swigregister
RefrigerationCondenserEvaporativeCooled_swigregister(RefrigerationCondenserEvaporativeCooled)

def RefrigerationCondenserEvaporativeCooled_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_iddObjectType()
RefrigerationCondenserEvaporativeCooled_iddObjectType = _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_iddObjectType

def RefrigerationCondenserEvaporativeCooled_fanSpeedControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_fanSpeedControlTypeValues()
RefrigerationCondenserEvaporativeCooled_fanSpeedControlTypeValues = _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_fanSpeedControlTypeValues


def toRefrigerationCondenserEvaporativeCooled(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationCondenserEvaporativeCooled >":
    return _openstudiomodelrefrigeration.toRefrigerationCondenserEvaporativeCooled(idfObject)
toRefrigerationCondenserEvaporativeCooled = _openstudiomodelrefrigeration.toRefrigerationCondenserEvaporativeCooled

def getRefrigerationCondenserEvaporativeCooled(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationCondenserEvaporativeCooled >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooled(t_model, t_handle)
getRefrigerationCondenserEvaporativeCooled = _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooled

def getRefrigerationCondenserEvaporativeCooleds(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled,std::allocator< openstudio::model::RefrigerationCondenserEvaporativeCooled > >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooleds(t_model)
getRefrigerationCondenserEvaporativeCooleds = _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooleds

def getRefrigerationCondenserEvaporativeCooledByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationCondenserEvaporativeCooled >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooledByName(t_model, t_name)
getRefrigerationCondenserEvaporativeCooledByName = _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooledByName

def getRefrigerationCondenserEvaporativeCooledsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationCondenserEvaporativeCooled,std::allocator< openstudio::model::RefrigerationCondenserEvaporativeCooled > >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooledsByName(t_model, t_name, t_exactMatch)
getRefrigerationCondenserEvaporativeCooledsByName = _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooledsByName
class RefrigerationCondenserWaterCooled(openstudiomodelhvac.StraightComponent):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelhvac.StraightComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationCondenserWaterCooled, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelhvac.StraightComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationCondenserWaterCooled, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationCondenserWaterCooled(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserWaterCooled
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_iddObjectType)
    __swig_getmethods__["waterCooledLoopFlowTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterCooledLoopFlowTypeValues
    if _newclass:
        waterCooledLoopFlowTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterCooledLoopFlowTypeValues)

    def ratedEffectiveTotalHeatRejectionRate(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_ratedEffectiveTotalHeatRejectionRate(self)

    def ratedCondensingTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_ratedCondensingTemperature(self)

    def ratedSubcoolingTemperatureDifference(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_ratedSubcoolingTemperatureDifference(self)

    def isRatedSubcoolingTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isRatedSubcoolingTemperatureDifferenceDefaulted(self)

    def ratedWaterInletTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_ratedWaterInletTemperature(self)

    def waterCooledLoopFlowType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterCooledLoopFlowType(self)

    def isWaterCooledLoopFlowTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isWaterCooledLoopFlowTypeDefaulted(self)

    def waterOutletTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterOutletTemperatureSchedule(self)

    def waterDesignFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterDesignFlowRate(self)

    def waterMaximumFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterMaximumFlowRate(self)

    def waterMaximumWaterOutletTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterMaximumWaterOutletTemperature(self)

    def isWaterMaximumWaterOutletTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isWaterMaximumWaterOutletTemperatureDefaulted(self)

    def waterMinimumWaterInletTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterMinimumWaterInletTemperature(self)

    def isWaterMinimumWaterInletTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isWaterMinimumWaterInletTemperatureDefaulted(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isEndUseSubcategoryDefaulted(self)

    def condenserRefrigerantOperatingChargeInventory(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_condenserRefrigerantOperatingChargeInventory(self)

    def condensateReceiverRefrigerantInventory(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_condensateReceiverRefrigerantInventory(self)

    def condensatePipingRefrigerantInventory(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_condensatePipingRefrigerantInventory(self)

    def setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate)

    def resetRatedEffectiveTotalHeatRejectionRate(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetRatedEffectiveTotalHeatRejectionRate(self)

    def setRatedCondensingTemperature(self, ratedCondensingTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setRatedCondensingTemperature(self, ratedCondensingTemperature)

    def setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference)

    def resetRatedSubcoolingTemperatureDifference(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetRatedSubcoolingTemperatureDifference(self)

    def setRatedWaterInletTemperature(self, ratedWaterInletTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setRatedWaterInletTemperature(self, ratedWaterInletTemperature)

    def setWaterCooledLoopFlowType(self, waterCooledLoopFlowType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterCooledLoopFlowType(self, waterCooledLoopFlowType)

    def resetWaterCooledLoopFlowType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterCooledLoopFlowType(self)

    def setWaterOutletTemperatureSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterOutletTemperatureSchedule(self, schedule)

    def resetWaterOutletTemperatureSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterOutletTemperatureSchedule(self)

    def setWaterDesignFlowRate(self, waterDesignFlowRate: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterDesignFlowRate(self, waterDesignFlowRate)

    def resetWaterDesignFlowRate(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterDesignFlowRate(self)

    def setWaterMaximumFlowRate(self, waterMaximumFlowRate: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterMaximumFlowRate(self, waterMaximumFlowRate)

    def resetWaterMaximumFlowRate(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterMaximumFlowRate(self)

    def setWaterMaximumWaterOutletTemperature(self, waterMaximumWaterOutletTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterMaximumWaterOutletTemperature(self, waterMaximumWaterOutletTemperature)

    def resetWaterMaximumWaterOutletTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterMaximumWaterOutletTemperature(self)

    def setWaterMinimumWaterInletTemperature(self, waterMinimumWaterInletTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterMinimumWaterInletTemperature(self, waterMinimumWaterInletTemperature)

    def resetWaterMinimumWaterInletTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterMinimumWaterInletTemperature(self)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetEndUseSubcategory(self)

    def setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory)

    def resetCondenserRefrigerantOperatingChargeInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetCondenserRefrigerantOperatingChargeInventory(self)

    def setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory)

    def resetCondensateReceiverRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetCondensateReceiverRefrigerantInventory(self)

    def setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory)

    def resetCondensatePipingRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetCondensatePipingRefrigerantInventory(self)
RefrigerationCondenserWaterCooled_swigregister = _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_swigregister
RefrigerationCondenserWaterCooled_swigregister(RefrigerationCondenserWaterCooled)

def RefrigerationCondenserWaterCooled_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_iddObjectType()
RefrigerationCondenserWaterCooled_iddObjectType = _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_iddObjectType

def RefrigerationCondenserWaterCooled_waterCooledLoopFlowTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterCooledLoopFlowTypeValues()
RefrigerationCondenserWaterCooled_waterCooledLoopFlowTypeValues = _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterCooledLoopFlowTypeValues


def toRefrigerationCondenserWaterCooled(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationCondenserWaterCooled >":
    return _openstudiomodelrefrigeration.toRefrigerationCondenserWaterCooled(idfObject)
toRefrigerationCondenserWaterCooled = _openstudiomodelrefrigeration.toRefrigerationCondenserWaterCooled

def getRefrigerationCondenserWaterCooled(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationCondenserWaterCooled >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooled(t_model, t_handle)
getRefrigerationCondenserWaterCooled = _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooled

def getRefrigerationCondenserWaterCooleds(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled,std::allocator< openstudio::model::RefrigerationCondenserWaterCooled > >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooleds(t_model)
getRefrigerationCondenserWaterCooleds = _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooleds

def getRefrigerationCondenserWaterCooledByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationCondenserWaterCooled >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooledByName(t_model, t_name)
getRefrigerationCondenserWaterCooledByName = _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooledByName

def getRefrigerationCondenserWaterCooledsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationCondenserWaterCooled,std::allocator< openstudio::model::RefrigerationCondenserWaterCooled > >":
    return _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooledsByName(t_model, t_name, t_exactMatch)
getRefrigerationCondenserWaterCooledsByName = _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooledsByName
class RefrigerationDefrostCycleParameters(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationDefrostCycleParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationDefrostCycleParameters, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationDefrostCycleParameters(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationDefrostCycleParameters
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationDefrostCycleParameters_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationDefrostCycleParameters_iddObjectType)
RefrigerationDefrostCycleParameters_swigregister = _openstudiomodelrefrigeration.RefrigerationDefrostCycleParameters_swigregister
RefrigerationDefrostCycleParameters_swigregister(RefrigerationDefrostCycleParameters)

def RefrigerationDefrostCycleParameters_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParameters_iddObjectType()
RefrigerationDefrostCycleParameters_iddObjectType = _openstudiomodelrefrigeration.RefrigerationDefrostCycleParameters_iddObjectType


def toRefrigerationDefrostCycleParameters(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationDefrostCycleParameters >":
    return _openstudiomodelrefrigeration.toRefrigerationDefrostCycleParameters(idfObject)
toRefrigerationDefrostCycleParameters = _openstudiomodelrefrigeration.toRefrigerationDefrostCycleParameters

def getRefrigerationDefrostCycleParameters(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationDefrostCycleParameters >":
    return _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParameters(t_model, t_handle)
getRefrigerationDefrostCycleParameters = _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParameters

def getRefrigerationDefrostCycleParameterss(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters,std::allocator< openstudio::model::RefrigerationDefrostCycleParameters > >":
    return _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParameterss(t_model)
getRefrigerationDefrostCycleParameterss = _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParameterss

def getRefrigerationDefrostCycleParametersByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationDefrostCycleParameters >":
    return _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParametersByName(t_model, t_name)
getRefrigerationDefrostCycleParametersByName = _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParametersByName

def getRefrigerationDefrostCycleParameterssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationDefrostCycleParameters,std::allocator< openstudio::model::RefrigerationDefrostCycleParameters > >":
    return _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParameterssByName(t_model, t_name, t_exactMatch)
getRefrigerationDefrostCycleParameterssByName = _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParameterssByName
class RefrigerationGasCoolerAirCooled(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationGasCoolerAirCooled, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationGasCoolerAirCooled, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationGasCoolerAirCooled(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationGasCoolerAirCooled
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_iddObjectType)
    __swig_getmethods__["gasCoolerFanSpeedControlTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerFanSpeedControlTypeValues
    if _newclass:
        gasCoolerFanSpeedControlTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerFanSpeedControlTypeValues)

    def ratedTotalHeatRejectionRateCurve(self) -> "boost::optional< openstudio::model::CurveLinear >":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_ratedTotalHeatRejectionRateCurve(self)

    def gasCoolerFanSpeedControlType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerFanSpeedControlType(self)

    def isGasCoolerFanSpeedControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isGasCoolerFanSpeedControlTypeDefaulted(self)

    def ratedFanPower(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_ratedFanPower(self)

    def isRatedFanPowerDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isRatedFanPowerDefaulted(self)

    def minimumFanAirFlowRatio(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_minimumFanAirFlowRatio(self)

    def isMinimumFanAirFlowRatioDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isMinimumFanAirFlowRatioDefaulted(self)

    def transitionTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_transitionTemperature(self)

    def isTransitionTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isTransitionTemperatureDefaulted(self)

    def transcriticalApproachTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_transcriticalApproachTemperature(self)

    def isTranscriticalApproachTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isTranscriticalApproachTemperatureDefaulted(self)

    def subcriticalTemperatureDifference(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_subcriticalTemperatureDifference(self)

    def isSubcriticalTemperatureDifferenceDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isSubcriticalTemperatureDifferenceDefaulted(self)

    def minimumCondensingTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_minimumCondensingTemperature(self)

    def isMinimumCondensingTemperatureDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isMinimumCondensingTemperatureDefaulted(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isEndUseSubcategoryDefaulted(self)

    def gasCoolerRefrigerantOperatingChargeInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerRefrigerantOperatingChargeInventory(self)

    def isGasCoolerRefrigerantOperatingChargeInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isGasCoolerRefrigerantOperatingChargeInventoryDefaulted(self)

    def gasCoolerReceiverRefrigerantInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerReceiverRefrigerantInventory(self)

    def isGasCoolerReceiverRefrigerantInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isGasCoolerReceiverRefrigerantInventoryDefaulted(self)

    def gasCoolerOutletPipingRefrigerantInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerOutletPipingRefrigerantInventory(self)

    def isGasCoolerOutletPipingRefrigerantInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isGasCoolerOutletPipingRefrigerantInventoryDefaulted(self)

    def setRatedTotalHeatRejectionRateCurve(self, curveLinear: 'CurveLinear') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setRatedTotalHeatRejectionRateCurve(self, curveLinear)

    def resetRatedTotalHeatRejectionRateCurve(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetRatedTotalHeatRejectionRateCurve(self)

    def setGasCoolerFanSpeedControlType(self, gasCoolerFanSpeedControlType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setGasCoolerFanSpeedControlType(self, gasCoolerFanSpeedControlType)

    def resetGasCoolerFanSpeedControlType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetGasCoolerFanSpeedControlType(self)

    def setRatedFanPower(self, ratedFanPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setRatedFanPower(self, ratedFanPower)

    def resetRatedFanPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetRatedFanPower(self)

    def setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio)

    def resetMinimumFanAirFlowRatio(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetMinimumFanAirFlowRatio(self)

    def setTransitionTemperature(self, transitionTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setTransitionTemperature(self, transitionTemperature)

    def resetTransitionTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetTransitionTemperature(self)

    def setTranscriticalApproachTemperature(self, transcriticalApproachTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setTranscriticalApproachTemperature(self, transcriticalApproachTemperature)

    def resetTranscriticalApproachTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetTranscriticalApproachTemperature(self)

    def setSubcriticalTemperatureDifference(self, subcriticalTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setSubcriticalTemperatureDifference(self, subcriticalTemperatureDifference)

    def resetSubcriticalTemperatureDifference(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetSubcriticalTemperatureDifference(self)

    def setMinimumCondensingTemperature(self, minimumCondensingTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setMinimumCondensingTemperature(self, minimumCondensingTemperature)

    def resetMinimumCondensingTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetMinimumCondensingTemperature(self)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetEndUseSubcategory(self)

    def setGasCoolerRefrigerantOperatingChargeInventory(self, gasCoolerRefrigerantOperatingChargeInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setGasCoolerRefrigerantOperatingChargeInventory(self, gasCoolerRefrigerantOperatingChargeInventory)

    def resetGasCoolerRefrigerantOperatingChargeInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetGasCoolerRefrigerantOperatingChargeInventory(self)

    def setGasCoolerReceiverRefrigerantInventory(self, gasCoolerReceiverRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setGasCoolerReceiverRefrigerantInventory(self, gasCoolerReceiverRefrigerantInventory)

    def resetGasCoolerReceiverRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetGasCoolerReceiverRefrigerantInventory(self)

    def setGasCoolerOutletPipingRefrigerantInventory(self, gasCoolerOutletPipingRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setGasCoolerOutletPipingRefrigerantInventory(self, gasCoolerOutletPipingRefrigerantInventory)

    def resetGasCoolerOutletPipingRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetGasCoolerOutletPipingRefrigerantInventory(self)
RefrigerationGasCoolerAirCooled_swigregister = _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_swigregister
RefrigerationGasCoolerAirCooled_swigregister(RefrigerationGasCoolerAirCooled)

def RefrigerationGasCoolerAirCooled_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_iddObjectType()
RefrigerationGasCoolerAirCooled_iddObjectType = _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_iddObjectType

def RefrigerationGasCoolerAirCooled_gasCoolerFanSpeedControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerFanSpeedControlTypeValues()
RefrigerationGasCoolerAirCooled_gasCoolerFanSpeedControlTypeValues = _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerFanSpeedControlTypeValues


def toRefrigerationGasCoolerAirCooled(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationGasCoolerAirCooled >":
    return _openstudiomodelrefrigeration.toRefrigerationGasCoolerAirCooled(idfObject)
toRefrigerationGasCoolerAirCooled = _openstudiomodelrefrigeration.toRefrigerationGasCoolerAirCooled

def getRefrigerationGasCoolerAirCooled(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationGasCoolerAirCooled >":
    return _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooled(t_model, t_handle)
getRefrigerationGasCoolerAirCooled = _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooled

def getRefrigerationGasCoolerAirCooleds(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled,std::allocator< openstudio::model::RefrigerationGasCoolerAirCooled > >":
    return _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooleds(t_model)
getRefrigerationGasCoolerAirCooleds = _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooleds

def getRefrigerationGasCoolerAirCooledByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationGasCoolerAirCooled >":
    return _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooledByName(t_model, t_name)
getRefrigerationGasCoolerAirCooledByName = _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooledByName

def getRefrigerationGasCoolerAirCooledsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationGasCoolerAirCooled,std::allocator< openstudio::model::RefrigerationGasCoolerAirCooled > >":
    return _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooledsByName(t_model, t_name, t_exactMatch)
getRefrigerationGasCoolerAirCooledsByName = _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooledsByName
class RefrigerationSubcoolerLiquidSuction(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationSubcoolerLiquidSuction, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationSubcoolerLiquidSuction, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationSubcoolerLiquidSuction(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSubcoolerLiquidSuction
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_iddObjectType)

    def liquidSuctionDesignSubcoolingTemperatureDifference(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_liquidSuctionDesignSubcoolingTemperatureDifference(self)

    def designLiquidInletTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_designLiquidInletTemperature(self)

    def designVaporInletTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_designVaporInletTemperature(self)

    def setLiquidSuctionDesignSubcoolingTemperatureDifference(self, liquidSuctionDesignSubcoolingTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_setLiquidSuctionDesignSubcoolingTemperatureDifference(self, liquidSuctionDesignSubcoolingTemperatureDifference)

    def resetLiquidSuctionDesignSubcoolingTemperatureDifference(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_resetLiquidSuctionDesignSubcoolingTemperatureDifference(self)

    def setDesignLiquidInletTemperature(self, designLiquidInletTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_setDesignLiquidInletTemperature(self, designLiquidInletTemperature)

    def resetDesignLiquidInletTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_resetDesignLiquidInletTemperature(self)

    def setDesignVaporInletTemperature(self, designVaporInletTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_setDesignVaporInletTemperature(self, designVaporInletTemperature)

    def resetDesignVaporInletTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_resetDesignVaporInletTemperature(self)
RefrigerationSubcoolerLiquidSuction_swigregister = _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_swigregister
RefrigerationSubcoolerLiquidSuction_swigregister(RefrigerationSubcoolerLiquidSuction)

def RefrigerationSubcoolerLiquidSuction_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_iddObjectType()
RefrigerationSubcoolerLiquidSuction_iddObjectType = _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_iddObjectType


def toRefrigerationSubcoolerLiquidSuction(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationSubcoolerLiquidSuction >":
    return _openstudiomodelrefrigeration.toRefrigerationSubcoolerLiquidSuction(idfObject)
toRefrigerationSubcoolerLiquidSuction = _openstudiomodelrefrigeration.toRefrigerationSubcoolerLiquidSuction

def getRefrigerationSubcoolerLiquidSuction(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationSubcoolerLiquidSuction >":
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuction(t_model, t_handle)
getRefrigerationSubcoolerLiquidSuction = _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuction

def getRefrigerationSubcoolerLiquidSuctions(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction,std::allocator< openstudio::model::RefrigerationSubcoolerLiquidSuction > >":
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuctions(t_model)
getRefrigerationSubcoolerLiquidSuctions = _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuctions

def getRefrigerationSubcoolerLiquidSuctionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationSubcoolerLiquidSuction >":
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuctionByName(t_model, t_name)
getRefrigerationSubcoolerLiquidSuctionByName = _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuctionByName

def getRefrigerationSubcoolerLiquidSuctionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationSubcoolerLiquidSuction,std::allocator< openstudio::model::RefrigerationSubcoolerLiquidSuction > >":
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuctionsByName(t_model, t_name, t_exactMatch)
getRefrigerationSubcoolerLiquidSuctionsByName = _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuctionsByName
class RefrigerationSubcoolerMechanical(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationSubcoolerMechanical, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationSubcoolerMechanical, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationSubcoolerMechanical(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSubcoolerMechanical
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_iddObjectType)

    def capacityProvidingSystem(self) -> "boost::optional< openstudio::model::RefrigerationSystem >":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_capacityProvidingSystem(self)

    def outletControlTemperature(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_outletControlTemperature(self)

    def setCapacityProvidingSystem(self, refrigerationSystem: 'RefrigerationSystem') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_setCapacityProvidingSystem(self, refrigerationSystem)

    def resetCapacityProvidingSystem(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_resetCapacityProvidingSystem(self)

    def setOutletControlTemperature(self, outletControlTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_setOutletControlTemperature(self, outletControlTemperature)

    def resetOutletControlTemperature(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_resetOutletControlTemperature(self)
RefrigerationSubcoolerMechanical_swigregister = _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_swigregister
RefrigerationSubcoolerMechanical_swigregister(RefrigerationSubcoolerMechanical)

def RefrigerationSubcoolerMechanical_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_iddObjectType()
RefrigerationSubcoolerMechanical_iddObjectType = _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_iddObjectType


def toRefrigerationSubcoolerMechanical(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationSubcoolerMechanical >":
    return _openstudiomodelrefrigeration.toRefrigerationSubcoolerMechanical(idfObject)
toRefrigerationSubcoolerMechanical = _openstudiomodelrefrigeration.toRefrigerationSubcoolerMechanical

def getRefrigerationSubcoolerMechanical(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationSubcoolerMechanical >":
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanical(t_model, t_handle)
getRefrigerationSubcoolerMechanical = _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanical

def getRefrigerationSubcoolerMechanicals(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical,std::allocator< openstudio::model::RefrigerationSubcoolerMechanical > >":
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanicals(t_model)
getRefrigerationSubcoolerMechanicals = _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanicals

def getRefrigerationSubcoolerMechanicalByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationSubcoolerMechanical >":
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanicalByName(t_model, t_name)
getRefrigerationSubcoolerMechanicalByName = _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanicalByName

def getRefrigerationSubcoolerMechanicalsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationSubcoolerMechanical,std::allocator< openstudio::model::RefrigerationSubcoolerMechanical > >":
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanicalsByName(t_model, t_name, t_exactMatch)
getRefrigerationSubcoolerMechanicalsByName = _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanicalsByName
class RefrigerationSecondarySystem(openstudiomodelcore.ParentObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationSecondarySystem, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ParentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationSecondarySystem, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationSecondarySystem(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSecondarySystem
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationSecondarySystem_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationSecondarySystem_iddObjectType)
    __swig_getmethods__["circulatingFluidNameValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationSecondarySystem_circulatingFluidNameValues
    if _newclass:
        circulatingFluidNameValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationSecondarySystem_circulatingFluidNameValues)
    __swig_getmethods__["pumpDriveTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationSecondarySystem_pumpDriveTypeValues
    if _newclass:
        pumpDriveTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationSecondarySystem_pumpDriveTypeValues)

    def addCase(self, refrigerationCase: 'RefrigerationCase') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_addCase(self, refrigerationCase)

    def removeCase(self, refrigerationCase: 'RefrigerationCase') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeCase(self, refrigerationCase)

    def removeAllCases(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeAllCases(self)

    def cases(self) -> "std::vector< openstudio::model::RefrigerationCase,std::allocator< openstudio::model::RefrigerationCase > >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_cases(self)

    def addWalkin(self, refrigerationWalkin: 'RefrigerationWalkIn') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_addWalkin(self, refrigerationWalkin)

    def removeWalkin(self, refrigerationWalkin: 'RefrigerationWalkIn') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeWalkin(self, refrigerationWalkin)

    def removeAllWalkins(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeAllWalkins(self)

    def walkins(self) -> "std::vector< openstudio::model::RefrigerationWalkIn,std::allocator< openstudio::model::RefrigerationWalkIn > >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_walkins(self)

    def addAirChiller(self, airChiller: 'RefrigerationAirChiller') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_addAirChiller(self, airChiller)

    def removeAirChiller(self, airChiller: 'RefrigerationAirChiller') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeAirChiller(self, airChiller)

    def removeAllAirChillers(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeAllAirChillers(self)

    def airChillers(self) -> "std::vector< openstudio::model::RefrigerationAirChiller,std::allocator< openstudio::model::RefrigerationAirChiller > >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_airChillers(self)

    def circulatingFluidName(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_circulatingFluidName(self)

    def glycolConcentration(self) -> "boost::optional< int >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_glycolConcentration(self)

    def evaporatorCapacity(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorCapacity(self)

    def evaporatorFlowRateforSecondaryFluid(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorFlowRateforSecondaryFluid(self)

    def evaporatorEvaporatingTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorEvaporatingTemperature(self)

    def evaporatorApproachTemperatureDifference(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorApproachTemperatureDifference(self)

    def evaporatorRangeTemperatureDifference(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorRangeTemperatureDifference(self)

    def numberofPumpsinLoop(self) -> "int":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_numberofPumpsinLoop(self)

    def isNumberofPumpsinLoopDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isNumberofPumpsinLoopDefaulted(self)

    def totalPumpFlowRate(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_totalPumpFlowRate(self)

    def totalPumpPower(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_totalPumpPower(self)

    def totalPumpHead(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_totalPumpHead(self)

    def phaseChangeCirculatingRate(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_phaseChangeCirculatingRate(self)

    def isPhaseChangeCirculatingRateDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isPhaseChangeCirculatingRateDefaulted(self)

    def pumpDriveType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_pumpDriveType(self)

    def isPumpDriveTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isPumpDriveTypeDefaulted(self)

    def variableSpeedPumpCubicCurve(self) -> "boost::optional< openstudio::model::CurveCubic >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_variableSpeedPumpCubicCurve(self)

    def pumpMotorHeattoFluid(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_pumpMotorHeattoFluid(self)

    def isPumpMotorHeattoFluidDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isPumpMotorHeattoFluidDefaulted(self)

    def sumUADistributionPiping(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_sumUADistributionPiping(self)

    def isSumUADistributionPipingDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isSumUADistributionPipingDefaulted(self)

    def distributionPipingZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_distributionPipingZone(self)

    def sumUAReceiverSeparatorShell(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_sumUAReceiverSeparatorShell(self)

    def isSumUAReceiverSeparatorShellDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isSumUAReceiverSeparatorShellDefaulted(self)

    def receiverSeparatorZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_receiverSeparatorZone(self)

    def evaporatorRefrigerantInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorRefrigerantInventory(self)

    def isEvaporatorRefrigerantInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isEvaporatorRefrigerantInventoryDefaulted(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isEndUseSubcategoryDefaulted(self)

    def resetRefrigeratedCaseAndWalkInList(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetRefrigeratedCaseAndWalkInList(self)

    def setCirculatingFluidName(self, circulatingFluidName: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setCirculatingFluidName(self, circulatingFluidName)

    def setGlycolConcentration(self, glycolConcentration: 'int') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setGlycolConcentration(self, glycolConcentration)

    def resetGlycolConcentration(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetGlycolConcentration(self)

    def setEvaporatorCapacity(self, evaporatorCapacity: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorCapacity(self, evaporatorCapacity)

    def resetEvaporatorCapacity(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEvaporatorCapacity(self)

    def setEvaporatorFlowRateforSecondaryFluid(self, evaporatorFlowRateforSecondaryFluid: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorFlowRateforSecondaryFluid(self, evaporatorFlowRateforSecondaryFluid)

    def resetEvaporatorFlowRateforSecondaryFluid(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEvaporatorFlowRateforSecondaryFluid(self)

    def setEvaporatorEvaporatingTemperature(self, evaporatorEvaporatingTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorEvaporatingTemperature(self, evaporatorEvaporatingTemperature)

    def setEvaporatorApproachTemperatureDifference(self, evaporatorApproachTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorApproachTemperatureDifference(self, evaporatorApproachTemperatureDifference)

    def setEvaporatorRangeTemperatureDifference(self, evaporatorRangeTemperatureDifference: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorRangeTemperatureDifference(self, evaporatorRangeTemperatureDifference)

    def resetEvaporatorRangeTemperatureDifference(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEvaporatorRangeTemperatureDifference(self)

    def setNumberofPumpsinLoop(self, numberofPumpsinLoop: 'int') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setNumberofPumpsinLoop(self, numberofPumpsinLoop)

    def resetNumberofPumpsinLoop(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetNumberofPumpsinLoop(self)

    def setTotalPumpFlowRate(self, totalPumpFlowRate: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setTotalPumpFlowRate(self, totalPumpFlowRate)

    def resetTotalPumpFlowRate(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetTotalPumpFlowRate(self)

    def setTotalPumpPower(self, totalPumpPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setTotalPumpPower(self, totalPumpPower)

    def resetTotalPumpPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetTotalPumpPower(self)

    def setTotalPumpHead(self, totalPumpHead: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setTotalPumpHead(self, totalPumpHead)

    def resetTotalPumpHead(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetTotalPumpHead(self)

    def setPhaseChangeCirculatingRate(self, phaseChangeCirculatingRate: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setPhaseChangeCirculatingRate(self, phaseChangeCirculatingRate)

    def resetPhaseChangeCirculatingRate(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetPhaseChangeCirculatingRate(self)

    def setPumpDriveType(self, pumpDriveType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setPumpDriveType(self, pumpDriveType)

    def resetPumpDriveType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetPumpDriveType(self)

    def setVariableSpeedPumpCubicCurve(self, curveCubic: 'CurveCubic') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setVariableSpeedPumpCubicCurve(self, curveCubic)

    def resetVariableSpeedPumpCubicCurve(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetVariableSpeedPumpCubicCurve(self)

    def setPumpMotorHeattoFluid(self, pumpMotorHeattoFluid: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setPumpMotorHeattoFluid(self, pumpMotorHeattoFluid)

    def resetPumpMotorHeattoFluid(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetPumpMotorHeattoFluid(self)

    def setSumUADistributionPiping(self, sumUADistributionPiping: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setSumUADistributionPiping(self, sumUADistributionPiping)

    def resetSumUADistributionPiping(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetSumUADistributionPiping(self)

    def setDistributionPipingZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setDistributionPipingZone(self, thermalZone)

    def resetDistributionPipingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetDistributionPipingZone(self)

    def setSumUAReceiverSeparatorShell(self, sumUAReceiverSeparatorShell: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setSumUAReceiverSeparatorShell(self, sumUAReceiverSeparatorShell)

    def resetSumUAReceiverSeparatorShell(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetSumUAReceiverSeparatorShell(self)

    def setReceiverSeparatorZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setReceiverSeparatorZone(self, thermalZone)

    def resetReceiverSeparatorZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetReceiverSeparatorZone(self)

    def setEvaporatorRefrigerantInventory(self, evaporatorRefrigerantInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorRefrigerantInventory(self, evaporatorRefrigerantInventory)

    def resetEvaporatorRefrigerantInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEvaporatorRefrigerantInventory(self)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEndUseSubcategory(self)
RefrigerationSecondarySystem_swigregister = _openstudiomodelrefrigeration.RefrigerationSecondarySystem_swigregister
RefrigerationSecondarySystem_swigregister(RefrigerationSecondarySystem)

def RefrigerationSecondarySystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_iddObjectType()
RefrigerationSecondarySystem_iddObjectType = _openstudiomodelrefrigeration.RefrigerationSecondarySystem_iddObjectType

def RefrigerationSecondarySystem_circulatingFluidNameValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_circulatingFluidNameValues()
RefrigerationSecondarySystem_circulatingFluidNameValues = _openstudiomodelrefrigeration.RefrigerationSecondarySystem_circulatingFluidNameValues

def RefrigerationSecondarySystem_pumpDriveTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_pumpDriveTypeValues()
RefrigerationSecondarySystem_pumpDriveTypeValues = _openstudiomodelrefrigeration.RefrigerationSecondarySystem_pumpDriveTypeValues


def toRefrigerationSecondarySystem(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationSecondarySystem >":
    return _openstudiomodelrefrigeration.toRefrigerationSecondarySystem(idfObject)
toRefrigerationSecondarySystem = _openstudiomodelrefrigeration.toRefrigerationSecondarySystem

def getRefrigerationSecondarySystem(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationSecondarySystem >":
    return _openstudiomodelrefrigeration.getRefrigerationSecondarySystem(t_model, t_handle)
getRefrigerationSecondarySystem = _openstudiomodelrefrigeration.getRefrigerationSecondarySystem

def getRefrigerationSecondarySystems(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationSecondarySystem,std::allocator< openstudio::model::RefrigerationSecondarySystem > >":
    return _openstudiomodelrefrigeration.getRefrigerationSecondarySystems(t_model)
getRefrigerationSecondarySystems = _openstudiomodelrefrigeration.getRefrigerationSecondarySystems

def getRefrigerationSecondarySystemByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationSecondarySystem >":
    return _openstudiomodelrefrigeration.getRefrigerationSecondarySystemByName(t_model, t_name)
getRefrigerationSecondarySystemByName = _openstudiomodelrefrigeration.getRefrigerationSecondarySystemByName

def getRefrigerationSecondarySystemsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationSecondarySystem,std::allocator< openstudio::model::RefrigerationSecondarySystem > >":
    return _openstudiomodelrefrigeration.getRefrigerationSecondarySystemsByName(t_model, t_name, t_exactMatch)
getRefrigerationSecondarySystemsByName = _openstudiomodelrefrigeration.getRefrigerationSecondarySystemsByName
class RefrigerationSystem(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationSystem, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationSystem(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSystem
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationSystem_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationSystem_iddObjectType)
    __swig_getmethods__["refrigerationSystemWorkingFluidTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationSystem_refrigerationSystemWorkingFluidTypeValues
    if _newclass:
        refrigerationSystemWorkingFluidTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationSystem_refrigerationSystemWorkingFluidTypeValues)
    __swig_getmethods__["suctionTemperatureControlTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationSystem_suctionTemperatureControlTypeValues
    if _newclass:
        suctionTemperatureControlTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationSystem_suctionTemperatureControlTypeValues)
    __swig_getmethods__["intercoolerTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationSystem_intercoolerTypeValues
    if _newclass:
        intercoolerTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationSystem_intercoolerTypeValues)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_remove(self)

    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":
        return _openstudiomodelrefrigeration.RefrigerationSystem_clone(self, model)

    def addCase(self, refrigerationCase: 'RefrigerationCase') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_addCase(self, refrigerationCase)

    def removeCase(self, refrigerationCase: 'RefrigerationCase') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeCase(self, refrigerationCase)

    def removeAllCases(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllCases(self)

    def cases(self) -> "std::vector< openstudio::model::RefrigerationCase,std::allocator< openstudio::model::RefrigerationCase > >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_cases(self)

    def addWalkin(self, refrigerationWalkin: 'RefrigerationWalkIn') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_addWalkin(self, refrigerationWalkin)

    def removeWalkin(self, refrigerationWalkin: 'RefrigerationWalkIn') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeWalkin(self, refrigerationWalkin)

    def removeAllWalkins(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllWalkins(self)

    def walkins(self) -> "std::vector< openstudio::model::RefrigerationWalkIn,std::allocator< openstudio::model::RefrigerationWalkIn > >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_walkins(self)

    def addCompressor(self, compressor: 'RefrigerationCompressor') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_addCompressor(self, compressor)

    def removeCompressor(self, compressor: 'RefrigerationCompressor') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeCompressor(self, compressor)

    def removeAllCompressors(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllCompressors(self)

    def compressors(self) -> "std::vector< openstudio::model::RefrigerationCompressor,std::allocator< openstudio::model::RefrigerationCompressor > >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_compressors(self)

    def addHighStageCompressor(self, highStageCompressor: 'RefrigerationCompressor') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_addHighStageCompressor(self, highStageCompressor)

    def removeHighStageCompressor(self, highStageCompressor: 'RefrigerationCompressor') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeHighStageCompressor(self, highStageCompressor)

    def removeAllHighStageCompressors(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllHighStageCompressors(self)

    def highStageCompressors(self) -> "std::vector< openstudio::model::RefrigerationCompressor,std::allocator< openstudio::model::RefrigerationCompressor > >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_highStageCompressors(self)

    def addSecondarySystemLoad(self, refrigerationSecondarySystem: 'RefrigerationSecondarySystem') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_addSecondarySystemLoad(self, refrigerationSecondarySystem)

    def removeSecondarySystemLoad(self, refrigerationSecondarySystem: 'RefrigerationSecondarySystem') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeSecondarySystemLoad(self, refrigerationSecondarySystem)

    def removeAllSecondarySystemLoads(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllSecondarySystemLoads(self)

    def secondarySystemLoads(self) -> "std::vector< openstudio::model::RefrigerationSecondarySystem,std::allocator< openstudio::model::RefrigerationSecondarySystem > >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_secondarySystemLoads(self)

    def addCascadeCondenserLoad(self, refrigerationCondenserCascade: 'RefrigerationCondenserCascade') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_addCascadeCondenserLoad(self, refrigerationCondenserCascade)

    def removeCascadeCondenserLoad(self, refrigerationCondenserCascade: 'RefrigerationCondenserCascade') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeCascadeCondenserLoad(self, refrigerationCondenserCascade)

    def removeAllCascadeCondenserLoads(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllCascadeCondenserLoads(self)

    def cascadeCondenserLoads(self) -> "std::vector< openstudio::model::RefrigerationCondenserCascade,std::allocator< openstudio::model::RefrigerationCondenserCascade > >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_cascadeCondenserLoads(self)

    def addAirChiller(self, airChiller: 'RefrigerationAirChiller') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_addAirChiller(self, airChiller)

    def removeAirChiller(self, airChiller: 'RefrigerationAirChiller') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAirChiller(self, airChiller)

    def removeAllAirChillers(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllAirChillers(self)

    def airChillers(self) -> "std::vector< openstudio::model::RefrigerationAirChiller,std::allocator< openstudio::model::RefrigerationAirChiller > >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_airChillers(self)

    def refrigerationCondenser(self) -> "boost::optional< openstudio::model::ModelObject >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_refrigerationCondenser(self)

    def minimumCondensingTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSystem_minimumCondensingTemperature(self)

    def refrigerationSystemWorkingFluidType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationSystem_refrigerationSystemWorkingFluidType(self)

    def suctionTemperatureControlType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationSystem_suctionTemperatureControlType(self)

    def isSuctionTemperatureControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_isSuctionTemperatureControlTypeDefaulted(self)

    def mechanicalSubcooler(self) -> "boost::optional< openstudio::model::RefrigerationSubcoolerMechanical >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_mechanicalSubcooler(self)

    def liquidSuctionHeatExchangerSubcooler(self) -> "boost::optional< openstudio::model::RefrigerationSubcoolerLiquidSuction >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_liquidSuctionHeatExchangerSubcooler(self)

    def sumUASuctionPiping(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSystem_sumUASuctionPiping(self)

    def isSumUASuctionPipingDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_isSumUASuctionPipingDefaulted(self)

    def suctionPipingZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelrefrigeration.RefrigerationSystem_suctionPipingZone(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationSystem_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_isEndUseSubcategoryDefaulted(self)

    def numberofCompressorStages(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationSystem_numberofCompressorStages(self)

    def intercoolerType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationSystem_intercoolerType(self)

    def isIntercoolerTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_isIntercoolerTypeDefaulted(self)

    def shellandCoilIntercoolerEffectiveness(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationSystem_shellandCoilIntercoolerEffectiveness(self)

    def isShellandCoilIntercoolerEffectivenessDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_isShellandCoilIntercoolerEffectivenessDefaulted(self)

    def setRefrigerationCondenser(self, refrigerationCondenser: 'ModelObject') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setRefrigerationCondenser(self, refrigerationCondenser)

    def setMinimumCondensingTemperature(self, minimumCondensingTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setMinimumCondensingTemperature(self, minimumCondensingTemperature)

    def setRefrigerationSystemWorkingFluidType(self, refrigerationSystemWorkingFluidType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setRefrigerationSystemWorkingFluidType(self, refrigerationSystemWorkingFluidType)

    def setSuctionTemperatureControlType(self, suctionTemperatureControlType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setSuctionTemperatureControlType(self, suctionTemperatureControlType)

    def resetSuctionTemperatureControlType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetSuctionTemperatureControlType(self)

    def setMechanicalSubcooler(self, refrigerationSubcoolerMechanical: 'RefrigerationSubcoolerMechanical') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setMechanicalSubcooler(self, refrigerationSubcoolerMechanical)

    def resetMechanicalSubcooler(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetMechanicalSubcooler(self)

    def setLiquidSuctionHeatExchangerSubcooler(self, refrigerationSubcoolerLiquidSuction: 'RefrigerationSubcoolerLiquidSuction') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setLiquidSuctionHeatExchangerSubcooler(self, refrigerationSubcoolerLiquidSuction)

    def resetLiquidSuctionHeatExchangerSubcooler(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetLiquidSuctionHeatExchangerSubcooler(self)

    def setSumUASuctionPiping(self, sumUASuctionPiping: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setSumUASuctionPiping(self, sumUASuctionPiping)

    def resetSumUASuctionPiping(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetSumUASuctionPiping(self)

    def setSuctionPipingZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setSuctionPipingZone(self, thermalZone)

    def resetSuctionPipingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetSuctionPipingZone(self)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetEndUseSubcategory(self)

    def setIntercoolerType(self, intercoolerType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setIntercoolerType(self, intercoolerType)

    def resetIntercoolerType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetIntercoolerType(self)

    def setShellandCoilIntercoolerEffectiveness(self, shellandCoilIntercoolerEffectiveness: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationSystem_setShellandCoilIntercoolerEffectiveness(self, shellandCoilIntercoolerEffectiveness)

    def resetShellandCoilIntercoolerEffectiveness(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetShellandCoilIntercoolerEffectiveness(self)
RefrigerationSystem_swigregister = _openstudiomodelrefrigeration.RefrigerationSystem_swigregister
RefrigerationSystem_swigregister(RefrigerationSystem)

def RefrigerationSystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationSystem_iddObjectType()
RefrigerationSystem_iddObjectType = _openstudiomodelrefrigeration.RefrigerationSystem_iddObjectType

def RefrigerationSystem_refrigerationSystemWorkingFluidTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationSystem_refrigerationSystemWorkingFluidTypeValues()
RefrigerationSystem_refrigerationSystemWorkingFluidTypeValues = _openstudiomodelrefrigeration.RefrigerationSystem_refrigerationSystemWorkingFluidTypeValues

def RefrigerationSystem_suctionTemperatureControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationSystem_suctionTemperatureControlTypeValues()
RefrigerationSystem_suctionTemperatureControlTypeValues = _openstudiomodelrefrigeration.RefrigerationSystem_suctionTemperatureControlTypeValues

def RefrigerationSystem_intercoolerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationSystem_intercoolerTypeValues()
RefrigerationSystem_intercoolerTypeValues = _openstudiomodelrefrigeration.RefrigerationSystem_intercoolerTypeValues


def toRefrigerationSystem(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationSystem >":
    return _openstudiomodelrefrigeration.toRefrigerationSystem(idfObject)
toRefrigerationSystem = _openstudiomodelrefrigeration.toRefrigerationSystem

def getRefrigerationSystem(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationSystem >":
    return _openstudiomodelrefrigeration.getRefrigerationSystem(t_model, t_handle)
getRefrigerationSystem = _openstudiomodelrefrigeration.getRefrigerationSystem

def getRefrigerationSystems(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationSystem,std::allocator< openstudio::model::RefrigerationSystem > >":
    return _openstudiomodelrefrigeration.getRefrigerationSystems(t_model)
getRefrigerationSystems = _openstudiomodelrefrigeration.getRefrigerationSystems

def getRefrigerationSystemByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationSystem >":
    return _openstudiomodelrefrigeration.getRefrigerationSystemByName(t_model, t_name)
getRefrigerationSystemByName = _openstudiomodelrefrigeration.getRefrigerationSystemByName

def getRefrigerationSystemsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationSystem,std::allocator< openstudio::model::RefrigerationSystem > >":
    return _openstudiomodelrefrigeration.getRefrigerationSystemsByName(t_model, t_name, t_exactMatch)
getRefrigerationSystemsByName = _openstudiomodelrefrigeration.getRefrigerationSystemsByName
class RefrigerationTranscriticalSystem(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationTranscriticalSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationTranscriticalSystem, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationTranscriticalSystem(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationTranscriticalSystem
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_iddObjectType)
    __swig_getmethods__["refrigerationSystemWorkingFluidTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_refrigerationSystemWorkingFluidTypeValues
    if _newclass:
        refrigerationSystemWorkingFluidTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_refrigerationSystemWorkingFluidTypeValues)

    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_remove(self)

    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_clone(self, model)

    def addMediumTemperatureCase(self, refrigerationCase: 'RefrigerationCase') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addMediumTemperatureCase(self, refrigerationCase)

    def removeMediumTemperatureCase(self, refrigerationCase: 'RefrigerationCase') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeMediumTemperatureCase(self, refrigerationCase)

    def removeAllMediumTemperatureCases(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllMediumTemperatureCases(self)

    def mediumTemperatureCases(self) -> "std::vector< openstudio::model::RefrigerationCase,std::allocator< openstudio::model::RefrigerationCase > >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_mediumTemperatureCases(self)

    def addLowTemperatureCase(self, refrigerationCase: 'RefrigerationCase') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addLowTemperatureCase(self, refrigerationCase)

    def removeLowTemperatureCase(self, refrigerationCase: 'RefrigerationCase') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeLowTemperatureCase(self, refrigerationCase)

    def removeAllLowTemperatureCases(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllLowTemperatureCases(self)

    def lowTemperatureCases(self) -> "std::vector< openstudio::model::RefrigerationCase,std::allocator< openstudio::model::RefrigerationCase > >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_lowTemperatureCases(self)

    def addMediumTemperatureWalkin(self, refrigerationWalkin: 'RefrigerationWalkIn') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addMediumTemperatureWalkin(self, refrigerationWalkin)

    def removeMediumTemperatureWalkin(self, refrigerationWalkin: 'RefrigerationWalkIn') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeMediumTemperatureWalkin(self, refrigerationWalkin)

    def removeAllMediumTemperatureWalkins(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllMediumTemperatureWalkins(self)

    def mediumTemperatureWalkins(self) -> "std::vector< openstudio::model::RefrigerationWalkIn,std::allocator< openstudio::model::RefrigerationWalkIn > >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_mediumTemperatureWalkins(self)

    def addLowTemperatureWalkin(self, refrigerationWalkin: 'RefrigerationWalkIn') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addLowTemperatureWalkin(self, refrigerationWalkin)

    def removeLowTemperatureWalkin(self, refrigerationWalkin: 'RefrigerationWalkIn') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeLowTemperatureWalkin(self, refrigerationWalkin)

    def removeAllLowTemperatureWalkins(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllLowTemperatureWalkins(self)

    def lowTemperatureWalkins(self) -> "std::vector< openstudio::model::RefrigerationWalkIn,std::allocator< openstudio::model::RefrigerationWalkIn > >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_lowTemperatureWalkins(self)

    def addHighPressureCompressor(self, compressor: 'RefrigerationCompressor') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addHighPressureCompressor(self, compressor)

    def removeHighPressureCompressor(self, compressor: 'RefrigerationCompressor') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeHighPressureCompressor(self, compressor)

    def removeAllHighPressureCompressors(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllHighPressureCompressors(self)

    def highPressureCompressors(self) -> "std::vector< openstudio::model::RefrigerationCompressor,std::allocator< openstudio::model::RefrigerationCompressor > >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_highPressureCompressors(self)

    def addLowPressureCompressor(self, compressor: 'RefrigerationCompressor') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addLowPressureCompressor(self, compressor)

    def removeLowPressureCompressor(self, compressor: 'RefrigerationCompressor') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeLowPressureCompressor(self, compressor)

    def removeAllLowPressureCompressors(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllLowPressureCompressors(self)

    def lowPressureCompressors(self) -> "std::vector< openstudio::model::RefrigerationCompressor,std::allocator< openstudio::model::RefrigerationCompressor > >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_lowPressureCompressors(self)

    def refrigerationGasCooler(self) -> "boost::optional< openstudio::model::RefrigerationGasCoolerAirCooled >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_refrigerationGasCooler(self)

    def receiverPressure(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_receiverPressure(self)

    def isReceiverPressureDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isReceiverPressureDefaulted(self)

    def subcoolerEffectiveness(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_subcoolerEffectiveness(self)

    def isSubcoolerEffectivenessDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isSubcoolerEffectivenessDefaulted(self)

    def refrigerationSystemWorkingFluidType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_refrigerationSystemWorkingFluidType(self)

    def sumUASuctionPipingforMediumTemperatureLoads(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_sumUASuctionPipingforMediumTemperatureLoads(self)

    def isSumUASuctionPipingforMediumTemperatureLoadsDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isSumUASuctionPipingforMediumTemperatureLoadsDefaulted(self)

    def mediumTemperatureSuctionPipingZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_mediumTemperatureSuctionPipingZone(self)

    def sumUASuctionPipingforLowTemperatureLoads(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_sumUASuctionPipingforLowTemperatureLoads(self)

    def isSumUASuctionPipingforLowTemperatureLoadsDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isSumUASuctionPipingforLowTemperatureLoadsDefaulted(self)

    def lowTemperatureSuctionPipingZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_lowTemperatureSuctionPipingZone(self)

    def endUseSubcategory(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isEndUseSubcategoryDefaulted(self)

    def setRefrigerationGasCooler(self, refrigerationGasCoolerAirCooled: 'RefrigerationGasCoolerAirCooled') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setRefrigerationGasCooler(self, refrigerationGasCoolerAirCooled)

    def setReceiverPressure(self, receiverPressure: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setReceiverPressure(self, receiverPressure)

    def resetReceiverPressure(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetReceiverPressure(self)

    def setSubcoolerEffectiveness(self, subcoolerEffectiveness: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setSubcoolerEffectiveness(self, subcoolerEffectiveness)

    def resetSubcoolerEffectiveness(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetSubcoolerEffectiveness(self)

    def setRefrigerationSystemWorkingFluidType(self, refrigerationSystemWorkingFluidType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setRefrigerationSystemWorkingFluidType(self, refrigerationSystemWorkingFluidType)

    def setSumUASuctionPipingforMediumTemperatureLoads(self, sumUASuctionPipingforMediumTemperatureLoads: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setSumUASuctionPipingforMediumTemperatureLoads(self, sumUASuctionPipingforMediumTemperatureLoads)

    def resetSumUASuctionPipingforMediumTemperatureLoads(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetSumUASuctionPipingforMediumTemperatureLoads(self)

    def setMediumTemperatureSuctionPipingZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setMediumTemperatureSuctionPipingZone(self, thermalZone)

    def resetMediumTemperatureSuctionPipingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetMediumTemperatureSuctionPipingZone(self)

    def setSumUASuctionPipingforLowTemperatureLoads(self, sumUASuctionPipingforLowTemperatureLoads: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setSumUASuctionPipingforLowTemperatureLoads(self, sumUASuctionPipingforLowTemperatureLoads)

    def resetSumUASuctionPipingforLowTemperatureLoads(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetSumUASuctionPipingforLowTemperatureLoads(self)

    def setLowTemperatureSuctionPipingZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setLowTemperatureSuctionPipingZone(self, thermalZone)

    def resetLowTemperatureSuctionPipingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetLowTemperatureSuctionPipingZone(self)

    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetEndUseSubcategory(self)
RefrigerationTranscriticalSystem_swigregister = _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_swigregister
RefrigerationTranscriticalSystem_swigregister(RefrigerationTranscriticalSystem)

def RefrigerationTranscriticalSystem_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_iddObjectType()
RefrigerationTranscriticalSystem_iddObjectType = _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_iddObjectType

def RefrigerationTranscriticalSystem_refrigerationSystemWorkingFluidTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_refrigerationSystemWorkingFluidTypeValues()
RefrigerationTranscriticalSystem_refrigerationSystemWorkingFluidTypeValues = _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_refrigerationSystemWorkingFluidTypeValues


def toRefrigerationTranscriticalSystem(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationTranscriticalSystem >":
    return _openstudiomodelrefrigeration.toRefrigerationTranscriticalSystem(idfObject)
toRefrigerationTranscriticalSystem = _openstudiomodelrefrigeration.toRefrigerationTranscriticalSystem

def getRefrigerationTranscriticalSystem(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationTranscriticalSystem >":
    return _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystem(t_model, t_handle)
getRefrigerationTranscriticalSystem = _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystem

def getRefrigerationTranscriticalSystems(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem,std::allocator< openstudio::model::RefrigerationTranscriticalSystem > >":
    return _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystems(t_model)
getRefrigerationTranscriticalSystems = _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystems

def getRefrigerationTranscriticalSystemByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationTranscriticalSystem >":
    return _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystemByName(t_model, t_name)
getRefrigerationTranscriticalSystemByName = _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystemByName

def getRefrigerationTranscriticalSystemsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationTranscriticalSystem,std::allocator< openstudio::model::RefrigerationTranscriticalSystem > >":
    return _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystemsByName(t_model, t_name, t_exactMatch)
getRefrigerationTranscriticalSystemsByName = _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystemsByName
class RefrigerationWalkIn(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationWalkIn, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationWalkIn, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model', walkinDefrostSchedule: 'Schedule'):
        this = _openstudiomodelrefrigeration.new_RefrigerationWalkIn(model, walkinDefrostSchedule)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationWalkIn
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationWalkIn_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationWalkIn_iddObjectType)
    __swig_getmethods__["defrostTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostTypeValues
    if _newclass:
        defrostTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationWalkIn_defrostTypeValues)
    __swig_getmethods__["defrostControlTypeValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostControlTypeValues
    if _newclass:
        defrostControlTypeValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationWalkIn_defrostControlTypeValues)

    def addZoneBoundary(self, refrigerationWalkInZoneBoundary: 'RefrigerationWalkInZoneBoundary') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_addZoneBoundary(self, refrigerationWalkInZoneBoundary)

    def removeZoneBoundary(self, index: 'unsigned int') -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_removeZoneBoundary(self, index)

    def removeAllZoneBoundaries(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_removeAllZoneBoundaries(self)

    def zoneBoundaries(self) -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary,std::allocator< openstudio::model::RefrigerationWalkInZoneBoundary > >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaries(self)

    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_availabilitySchedule(self)

    def ratedCoilCoolingCapacity(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedCoilCoolingCapacity(self)

    def operatingTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_operatingTemperature(self)

    def ratedCoolingSourceTemperature(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedCoolingSourceTemperature(self)

    def ratedTotalHeatingPower(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedTotalHeatingPower(self)

    def heatingPowerSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_heatingPowerSchedule(self)

    def ratedCoolingCoilFanPower(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedCoolingCoilFanPower(self)

    def isRatedCoolingCoilFanPowerDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isRatedCoolingCoilFanPowerDefaulted(self)

    def ratedCirculationFanPower(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedCirculationFanPower(self)

    def isRatedCirculationFanPowerDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isRatedCirculationFanPowerDefaulted(self)

    def ratedTotalLightingPower(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedTotalLightingPower(self)

    def lightingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_lightingSchedule(self)

    def defrostType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostType(self)

    def isDefrostTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isDefrostTypeDefaulted(self)

    def defrostControlType(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostControlType(self)

    def isDefrostControlTypeDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isDefrostControlTypeDefaulted(self)

    def defrostSchedule(self) -> "openstudio::model::Schedule":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostSchedule(self)

    def defrostDripDownSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostDripDownSchedule(self)

    def defrostPower(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostPower(self)

    def temperatureTerminationDefrostFractiontoIce(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_temperatureTerminationDefrostFractiontoIce(self)

    def restockingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_restockingSchedule(self)

    def averageRefrigerantChargeInventory(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_averageRefrigerantChargeInventory(self)

    def isAverageRefrigerantChargeInventoryDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isAverageRefrigerantChargeInventoryDefaulted(self)

    def insulatedFloorSurfaceArea(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_insulatedFloorSurfaceArea(self)

    def insulatedFloorUValue(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_insulatedFloorUValue(self)

    def isInsulatedFloorUValueDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isInsulatedFloorUValueDefaulted(self)

    def durationofDefrostCycle(self) -> "boost::optional< int >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_durationofDefrostCycle(self)

    def dripDownTime(self) -> "boost::optional< int >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_dripDownTime(self)

    def defrost1StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost1StartTime(self)

    def defrost2StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost2StartTime(self)

    def defrost3StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost3StartTime(self)

    def defrost4StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost4StartTime(self)

    def defrost5StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost5StartTime(self)

    def defrost6StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost6StartTime(self)

    def defrost7StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost7StartTime(self)

    def defrost8StartTime(self) -> "boost::optional< openstudio::Time >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost8StartTime(self)

    def system(self) -> "boost::optional< openstudio::model::RefrigerationSystem >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_system(self)

    def zoneBoundaryThermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryThermalZone(self)

    def zoneBoundaryTotalInsulatedSurfaceAreaFacingZone(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryTotalInsulatedSurfaceAreaFacingZone(self)

    def zoneBoundaryAreaofGlassReachInDoorsFacingZone(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryAreaofGlassReachInDoorsFacingZone(self)

    def zoneBoundaryHeightofGlassReachInDoorsFacingZone(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryHeightofGlassReachInDoorsFacingZone(self)

    def zoneBoundaryAreaofStockingDoorsFacingZone(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryAreaofStockingDoorsFacingZone(self)

    def zoneBoundaryHeightofStockingDoorsFacingZone(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryHeightofStockingDoorsFacingZone(self)

    def zoneBoundaryInsulatedSurfaceUValueFacingZone(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryInsulatedSurfaceUValueFacingZone(self)

    def zoneBoundaryGlassReachInDoorUValueFacingZone(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryGlassReachInDoorUValueFacingZone(self)

    def zoneBoundaryStockingDoorUValueFacingZone(self) -> "boost::optional< double >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryStockingDoorUValueFacingZone(self)

    def zoneBoundaryStockingDoorOpeningScheduleFacingZone(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryStockingDoorOpeningScheduleFacingZone(self)

    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetAvailabilitySchedule(self)

    def setRatedCoilCoolingCapacity(self, ratedCoilCoolingCapacity: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedCoilCoolingCapacity(self, ratedCoilCoolingCapacity)

    def setOperatingTemperature(self, operatingTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setOperatingTemperature(self, operatingTemperature)

    def setRatedCoolingSourceTemperature(self, ratedCoolingSourceTemperature: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedCoolingSourceTemperature(self, ratedCoolingSourceTemperature)

    def setRatedTotalHeatingPower(self, ratedTotalHeatingPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedTotalHeatingPower(self, ratedTotalHeatingPower)

    def setHeatingPowerSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setHeatingPowerSchedule(self, schedule)

    def resetHeatingPowerSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetHeatingPowerSchedule(self)

    def setRatedCoolingCoilFanPower(self, ratedCoolingCoilFanPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedCoolingCoilFanPower(self, ratedCoolingCoilFanPower)

    def resetRatedCoolingCoilFanPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetRatedCoolingCoilFanPower(self)

    def setRatedCirculationFanPower(self, ratedCirculationFanPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedCirculationFanPower(self, ratedCirculationFanPower)

    def resetRatedCirculationFanPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetRatedCirculationFanPower(self)

    def setRatedTotalLightingPower(self, ratedTotalLightingPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedTotalLightingPower(self, ratedTotalLightingPower)

    def setLightingSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setLightingSchedule(self, schedule)

    def resetLightingSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetLightingSchedule(self)

    def setDefrostType(self, defrostType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostType(self, defrostType)

    def resetDefrostType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrostType(self)

    def setDefrostControlType(self, defrostControlType: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostControlType(self, defrostControlType)

    def resetDefrostControlType(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrostControlType(self)

    def setDefrostSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostSchedule(self, schedule)

    def setDefrostDripDownSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostDripDownSchedule(self, schedule)

    def resetDefrostDripDownSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrostDripDownSchedule(self)

    def setDefrostPower(self, defrostPower: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostPower(self, defrostPower)

    def resetDefrostPower(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrostPower(self)

    def setTemperatureTerminationDefrostFractiontoIce(self, temperatureTerminationDefrostFractiontoIce: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setTemperatureTerminationDefrostFractiontoIce(self, temperatureTerminationDefrostFractiontoIce)

    def resetTemperatureTerminationDefrostFractiontoIce(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetTemperatureTerminationDefrostFractiontoIce(self)

    def setRestockingSchedule(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRestockingSchedule(self, schedule)

    def resetRestockingSchedule(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetRestockingSchedule(self)

    def setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory)

    def resetAverageRefrigerantChargeInventory(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetAverageRefrigerantChargeInventory(self)

    def setInsulatedFloorSurfaceArea(self, insulatedFloorSurfaceArea: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setInsulatedFloorSurfaceArea(self, insulatedFloorSurfaceArea)

    def setInsulatedFloorUValue(self, insulatedFloorUValue: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setInsulatedFloorUValue(self, insulatedFloorUValue)

    def resetInsulatedFloorUValue(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetInsulatedFloorUValue(self)

    def setDurationofDefrostCycle(self, durationofDefrostCycle: 'int') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDurationofDefrostCycle(self, durationofDefrostCycle)

    def resetDurationofDefrostCycle(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDurationofDefrostCycle(self)

    def setDripDownTime(self, dripDownTime: 'int') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDripDownTime(self, dripDownTime)

    def resetDripDownTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDripDownTime(self)

    def setDefrost1StartTime(self, defrost1StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost1StartTime(self, defrost1StartTime)

    def resetDefrost1StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost1StartTime(self)

    def setDefrost2StartTime(self, defrost2StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost2StartTime(self, defrost2StartTime)

    def resetDefrost2StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost2StartTime(self)

    def setDefrost3StartTime(self, defrost3StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost3StartTime(self, defrost3StartTime)

    def resetDefrost3StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost3StartTime(self)

    def setDefrost4StartTime(self, defrost4StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost4StartTime(self, defrost4StartTime)

    def resetDefrost4StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost4StartTime(self)

    def setDefrost5StartTime(self, defrost5StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost5StartTime(self, defrost5StartTime)

    def resetDefrost5StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost5StartTime(self)

    def setDefrost6StartTime(self, defrost6StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost6StartTime(self, defrost6StartTime)

    def resetDefrost6StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost6StartTime(self)

    def setDefrost7StartTime(self, defrost7StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost7StartTime(self, defrost7StartTime)

    def resetDefrost7StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost7StartTime(self)

    def setDefrost8StartTime(self, defrost8StartTime: 'Time') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost8StartTime(self, defrost8StartTime)

    def resetDefrost8StartTime(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost8StartTime(self)

    def addToSystem(self, system: 'RefrigerationSystem') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_addToSystem(self, system)

    def removeFromSystem(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_removeFromSystem(self)

    def setZoneBoundaryThermalZone(self, zoneBoundaryThermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryThermalZone(self, zoneBoundaryThermalZone)

    def resetZoneBoundaryThermalZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetZoneBoundaryThermalZone(self)

    def setZoneBoundaryTotalInsulatedSurfaceAreaFacingZone(self, zoneBoundaryTotalInsulatedSurfaceAreaFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryTotalInsulatedSurfaceAreaFacingZone(self, zoneBoundaryTotalInsulatedSurfaceAreaFacingZone)

    def setZoneBoundaryAreaofGlassReachInDoorsFacingZone(self, zoneBoundaryAreaofGlassReachInDoorsFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryAreaofGlassReachInDoorsFacingZone(self, zoneBoundaryAreaofGlassReachInDoorsFacingZone)

    def setZoneBoundaryHeightofGlassReachInDoorsFacingZone(self, zoneBoundaryHeightofGlassReachInDoorsFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryHeightofGlassReachInDoorsFacingZone(self, zoneBoundaryHeightofGlassReachInDoorsFacingZone)

    def setZoneBoundaryAreaofStockingDoorsFacingZone(self, zoneBoundaryAreaofStockingDoorsFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryAreaofStockingDoorsFacingZone(self, zoneBoundaryAreaofStockingDoorsFacingZone)

    def setZoneBoundaryHeightofStockingDoorsFacingZone(self, zoneBoundaryHeightofStockingDoorsFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryHeightofStockingDoorsFacingZone(self, zoneBoundaryHeightofStockingDoorsFacingZone)

    def setZoneBoundaryInsulatedSurfaceUValueFacingZone(self, zoneBoundaryInsulatedSurfaceUValueFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryInsulatedSurfaceUValueFacingZone(self, zoneBoundaryInsulatedSurfaceUValueFacingZone)

    def setZoneBoundaryGlassReachInDoorUValueFacingZone(self, zoneBoundaryGlassReachInDoorUValueFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryGlassReachInDoorUValueFacingZone(self, zoneBoundaryGlassReachInDoorUValueFacingZone)

    def setZoneBoundaryStockingDoorUValueFacingZone(self, zoneBoundaryStockingDoorUValueFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryStockingDoorUValueFacingZone(self, zoneBoundaryStockingDoorUValueFacingZone)

    def setZoneBoundaryStockingDoorOpeningScheduleFacingZone(self, zoneBoundaryStockingDoorOpeningScheduleFacingZone: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryStockingDoorOpeningScheduleFacingZone(self, zoneBoundaryStockingDoorOpeningScheduleFacingZone)

    def resetZoneBoundaryStockingDoorOpeningScheduleFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetZoneBoundaryStockingDoorOpeningScheduleFacingZone(self)
RefrigerationWalkIn_swigregister = _openstudiomodelrefrigeration.RefrigerationWalkIn_swigregister
RefrigerationWalkIn_swigregister(RefrigerationWalkIn)

def RefrigerationWalkIn_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationWalkIn_iddObjectType()
RefrigerationWalkIn_iddObjectType = _openstudiomodelrefrigeration.RefrigerationWalkIn_iddObjectType

def RefrigerationWalkIn_defrostTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostTypeValues()
RefrigerationWalkIn_defrostTypeValues = _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostTypeValues

def RefrigerationWalkIn_defrostControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostControlTypeValues()
RefrigerationWalkIn_defrostControlTypeValues = _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostControlTypeValues


def toRefrigerationWalkIn(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationWalkIn >":
    return _openstudiomodelrefrigeration.toRefrigerationWalkIn(idfObject)
toRefrigerationWalkIn = _openstudiomodelrefrigeration.toRefrigerationWalkIn

def getRefrigerationWalkIn(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationWalkIn >":
    return _openstudiomodelrefrigeration.getRefrigerationWalkIn(t_model, t_handle)
getRefrigerationWalkIn = _openstudiomodelrefrigeration.getRefrigerationWalkIn

def getRefrigerationWalkIns(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationWalkIn,std::allocator< openstudio::model::RefrigerationWalkIn > >":
    return _openstudiomodelrefrigeration.getRefrigerationWalkIns(t_model)
getRefrigerationWalkIns = _openstudiomodelrefrigeration.getRefrigerationWalkIns

def getRefrigerationWalkInByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationWalkIn >":
    return _openstudiomodelrefrigeration.getRefrigerationWalkInByName(t_model, t_name)
getRefrigerationWalkInByName = _openstudiomodelrefrigeration.getRefrigerationWalkInByName

def getRefrigerationWalkInsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationWalkIn,std::allocator< openstudio::model::RefrigerationWalkIn > >":
    return _openstudiomodelrefrigeration.getRefrigerationWalkInsByName(t_model, t_name, t_exactMatch)
getRefrigerationWalkInsByName = _openstudiomodelrefrigeration.getRefrigerationWalkInsByName
class RefrigerationWalkInZoneBoundary(openstudiomodelcore.ModelObject):
    __swig_setmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefrigerationWalkInZoneBoundary, name, value)
    __swig_getmethods__ = {}
    for _s in [openstudiomodelcore.ModelObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefrigerationWalkInZoneBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, model: 'Model'):
        this = _openstudiomodelrefrigeration.new_RefrigerationWalkInZoneBoundary(model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationWalkInZoneBoundary
    __del__ = lambda self: None
    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_iddObjectType
    if _newclass:
        iddObjectType = staticmethod(_openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_iddObjectType)
    __swig_getmethods__["stockingDoorOpeningProtectionTypeFacingZoneValues"] = lambda x: _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorOpeningProtectionTypeFacingZoneValues
    if _newclass:
        stockingDoorOpeningProtectionTypeFacingZoneValues = staticmethod(_openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorOpeningProtectionTypeFacingZoneValues)

    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_thermalZone(self)

    def totalInsulatedSurfaceAreaFacingZone(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_totalInsulatedSurfaceAreaFacingZone(self)

    def insulatedSurfaceUValueFacingZone(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_insulatedSurfaceUValueFacingZone(self)

    def isInsulatedSurfaceUValueFacingZoneDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isInsulatedSurfaceUValueFacingZoneDefaulted(self)

    def areaofGlassReachInDoorsFacingZone(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_areaofGlassReachInDoorsFacingZone(self)

    def isAreaofGlassReachInDoorsFacingZoneDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isAreaofGlassReachInDoorsFacingZoneDefaulted(self)

    def heightofGlassReachInDoorsFacingZone(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_heightofGlassReachInDoorsFacingZone(self)

    def isHeightofGlassReachInDoorsFacingZoneDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isHeightofGlassReachInDoorsFacingZoneDefaulted(self)

    def glassReachInDoorUValueFacingZone(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_glassReachInDoorUValueFacingZone(self)

    def isGlassReachInDoorUValueFacingZoneDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isGlassReachInDoorUValueFacingZoneDefaulted(self)

    def glassReachInDoorOpeningScheduleFacingZone(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_glassReachInDoorOpeningScheduleFacingZone(self)

    def areaofStockingDoorsFacingZone(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_areaofStockingDoorsFacingZone(self)

    def isAreaofStockingDoorsFacingZoneDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isAreaofStockingDoorsFacingZoneDefaulted(self)

    def heightofStockingDoorsFacingZone(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_heightofStockingDoorsFacingZone(self)

    def isHeightofStockingDoorsFacingZoneDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isHeightofStockingDoorsFacingZoneDefaulted(self)

    def stockingDoorUValueFacingZone(self) -> "double":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorUValueFacingZone(self)

    def isStockingDoorUValueFacingZoneDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isStockingDoorUValueFacingZoneDefaulted(self)

    def stockingDoorOpeningScheduleFacingZone(self) -> "boost::optional< openstudio::model::Schedule >":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorOpeningScheduleFacingZone(self)

    def stockingDoorOpeningProtectionTypeFacingZone(self) -> "std::string":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorOpeningProtectionTypeFacingZone(self)

    def isStockingDoorOpeningProtectionTypeFacingZoneDefaulted(self) -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isStockingDoorOpeningProtectionTypeFacingZoneDefaulted(self)

    def setThermalZone(self, thermalZone: 'ThermalZone') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setThermalZone(self, thermalZone)

    def resetThermalZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetThermalZone(self)

    def setTotalInsulatedSurfaceAreaFacingZone(self, totalInsulatedSurfaceAreaFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setTotalInsulatedSurfaceAreaFacingZone(self, totalInsulatedSurfaceAreaFacingZone)

    def setInsulatedSurfaceUValueFacingZone(self, insulatedSurfaceUValueFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setInsulatedSurfaceUValueFacingZone(self, insulatedSurfaceUValueFacingZone)

    def resetInsulatedSurfaceUValueFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetInsulatedSurfaceUValueFacingZone(self)

    def setAreaofGlassReachInDoorsFacingZone(self, areaofGlassReachInDoorsFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setAreaofGlassReachInDoorsFacingZone(self, areaofGlassReachInDoorsFacingZone)

    def resetAreaofGlassReachInDoorsFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetAreaofGlassReachInDoorsFacingZone(self)

    def setHeightofGlassReachInDoorsFacingZone(self, heightofGlassReachInDoorsFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setHeightofGlassReachInDoorsFacingZone(self, heightofGlassReachInDoorsFacingZone)

    def resetHeightofGlassReachInDoorsFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetHeightofGlassReachInDoorsFacingZone(self)

    def setGlassReachInDoorUValueFacingZone(self, glassReachInDoorUValueFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setGlassReachInDoorUValueFacingZone(self, glassReachInDoorUValueFacingZone)

    def resetGlassReachInDoorUValueFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetGlassReachInDoorUValueFacingZone(self)

    def setGlassReachInDoorOpeningScheduleFacingZone(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setGlassReachInDoorOpeningScheduleFacingZone(self, schedule)

    def resetGlassReachInDoorOpeningScheduleFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetGlassReachInDoorOpeningScheduleFacingZone(self)

    def setAreaofStockingDoorsFacingZone(self, areaofStockingDoorsFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setAreaofStockingDoorsFacingZone(self, areaofStockingDoorsFacingZone)

    def resetAreaofStockingDoorsFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetAreaofStockingDoorsFacingZone(self)

    def setHeightofStockingDoorsFacingZone(self, heightofStockingDoorsFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setHeightofStockingDoorsFacingZone(self, heightofStockingDoorsFacingZone)

    def resetHeightofStockingDoorsFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetHeightofStockingDoorsFacingZone(self)

    def setStockingDoorUValueFacingZone(self, stockingDoorUValueFacingZone: 'double') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setStockingDoorUValueFacingZone(self, stockingDoorUValueFacingZone)

    def resetStockingDoorUValueFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetStockingDoorUValueFacingZone(self)

    def setStockingDoorOpeningScheduleFacingZone(self, schedule: 'Schedule') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setStockingDoorOpeningScheduleFacingZone(self, schedule)

    def resetStockingDoorOpeningScheduleFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetStockingDoorOpeningScheduleFacingZone(self)

    def setStockingDoorOpeningProtectionTypeFacingZone(self, stockingDoorOpeningProtectionTypeFacingZone: 'std::string') -> "bool":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setStockingDoorOpeningProtectionTypeFacingZone(self, stockingDoorOpeningProtectionTypeFacingZone)

    def resetStockingDoorOpeningProtectionTypeFacingZone(self) -> "void":
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetStockingDoorOpeningProtectionTypeFacingZone(self)
RefrigerationWalkInZoneBoundary_swigregister = _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_swigregister
RefrigerationWalkInZoneBoundary_swigregister(RefrigerationWalkInZoneBoundary)

def RefrigerationWalkInZoneBoundary_iddObjectType() -> "openstudio::IddObjectType":
    return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_iddObjectType()
RefrigerationWalkInZoneBoundary_iddObjectType = _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_iddObjectType

def RefrigerationWalkInZoneBoundary_stockingDoorOpeningProtectionTypeFacingZoneValues() -> "std::vector< std::string,std::allocator< std::string > >":
    return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorOpeningProtectionTypeFacingZoneValues()
RefrigerationWalkInZoneBoundary_stockingDoorOpeningProtectionTypeFacingZoneValues = _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorOpeningProtectionTypeFacingZoneValues


def toRefrigerationWalkInZoneBoundary(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::RefrigerationWalkInZoneBoundary >":
    return _openstudiomodelrefrigeration.toRefrigerationWalkInZoneBoundary(idfObject)
toRefrigerationWalkInZoneBoundary = _openstudiomodelrefrigeration.toRefrigerationWalkInZoneBoundary

def getRefrigerationWalkInZoneBoundary(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::RefrigerationWalkInZoneBoundary >":
    return _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundary(t_model, t_handle)
getRefrigerationWalkInZoneBoundary = _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundary

def getRefrigerationWalkInZoneBoundarys(t_model: 'Model') -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary,std::allocator< openstudio::model::RefrigerationWalkInZoneBoundary > >":
    return _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundarys(t_model)
getRefrigerationWalkInZoneBoundarys = _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundarys

def getRefrigerationWalkInZoneBoundaryByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::RefrigerationWalkInZoneBoundary >":
    return _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundaryByName(t_model, t_name)
getRefrigerationWalkInZoneBoundaryByName = _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundaryByName

def getRefrigerationWalkInZoneBoundarysByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::RefrigerationWalkInZoneBoundary,std::allocator< openstudio::model::RefrigerationWalkInZoneBoundary > >":
    return _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundarysByName(t_model, t_name, t_exactMatch)
getRefrigerationWalkInZoneBoundarysByName = _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundarysByName
# This file is compatible with both classic and new-style classes.


