# This file was automatically generated by SWIG (http://www.swig.org).

# Version 3.0.7

#

# Do not make changes to this file unless you know what you are doing--modify

# the SWIG interface file instead.











from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():

        from os.path import dirname

        import imp

        fp = None

        try:

            fp, pathname, description = imp.find_module('_openstudiomodelhvac', [dirname(__file__)])

        except ImportError:

            import _openstudiomodelhvac

            return _openstudiomodelhvac

        if fp is not None:

            try:

                _mod = imp.load_module('_openstudiomodelhvac', fp, pathname, description)

            finally:

                fp.close()

            return _mod

    _openstudiomodelhvac = swig_import_helper()

    del swig_import_helper

else:

    import _openstudiomodelhvac

del version_info

try:

    _swig_property = property

except NameError:

    pass  # Python < 2.2 doesn't have 'property'.





def _swig_setattr_nondynamic(self, class_type, name, value, static=1):

    if (name == "thisown"):

        return self.this.own(value)

    if (name == "this"):

        if type(value).__name__ == 'SwigPyObject':

            self.__dict__[name] = value

            return

    method = class_type.__swig_setmethods__.get(name, None)

    if method:

        return method(self, value)

    if (not static):

        if _newclass:

            object.__setattr__(self, name, value)

        else:

            self.__dict__[name] = value

    else:

        raise AttributeError("You cannot add attributes to %s" % self)





def _swig_setattr(self, class_type, name, value):

    return _swig_setattr_nondynamic(self, class_type, name, value, 0)





def _swig_getattr_nondynamic(self, class_type, name, static=1):

    if (name == "thisown"):

        return self.this.own()

    method = class_type.__swig_getmethods__.get(name, None)

    if method:

        return method(self)

    if (not static):

        return object.__getattr__(self, name)

    else:

        raise AttributeError(name)



def _swig_getattr(self, class_type, name):

    return _swig_getattr_nondynamic(self, class_type, name, 0)





def _swig_repr(self):

    try:

        strthis = "proxy of " + self.this.__repr__()

    except:

        strthis = ""

    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)



try:

    _object = object

    _newclass = 1

except AttributeError:

    class _object:

        pass

    _newclass = 0





try:

    import weakref

    weakref_proxy = weakref.proxy

except:

    weakref_proxy = lambda x: x





class SwigPyIterator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_SwigPyIterator

    __del__ = lambda self: None



    def value(self) -> "PyObject *":

        return _openstudiomodelhvac.SwigPyIterator_value(self)



    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SwigPyIterator_incr(self, n)



    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SwigPyIterator_decr(self, n)



    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":

        return _openstudiomodelhvac.SwigPyIterator_distance(self, x)



    def equal(self, x: 'SwigPyIterator') -> "bool":

        return _openstudiomodelhvac.SwigPyIterator_equal(self, x)



    def copy(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SwigPyIterator_copy(self)



    def next(self) -> "PyObject *":

        return _openstudiomodelhvac.SwigPyIterator_next(self)



    def __next__(self) -> "PyObject *":

        return _openstudiomodelhvac.SwigPyIterator___next__(self)



    def previous(self) -> "PyObject *":

        return _openstudiomodelhvac.SwigPyIterator_previous(self)



    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SwigPyIterator_advance(self, n)



    def __eq__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudiomodelhvac.SwigPyIterator___eq__(self, x)



    def __ne__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudiomodelhvac.SwigPyIterator___ne__(self, x)



    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudiomodelhvac.SwigPyIterator___iadd__(self, n)



    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudiomodelhvac.SwigPyIterator___isub__(self, n)



    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SwigPyIterator___add__(self, n)



    def __sub__(self, *args) -> "ptrdiff_t":

        return _openstudiomodelhvac.SwigPyIterator___sub__(self, *args)

    def __iter__(self):

        return self

SwigPyIterator_swigregister = _openstudiomodelhvac.SwigPyIterator_swigregister

SwigPyIterator_swigregister(SwigPyIterator)





_openstudiomodelhvac.SHARED_PTR_DISOWN_swigconstant(_openstudiomodelhvac)

SHARED_PTR_DISOWN = _openstudiomodelhvac.SHARED_PTR_DISOWN

from .import openstudioutilities

from .import openstudioutilitiescore

from .import openstudioutilitiestime

from .import openstudioutilitiesdata

from .import openstudioutilitiesunits

from .import openstudioutilitiesplot

from .import openstudioutilitiesgeometry

from .import openstudioutilitiessql

from .import openstudioutilitiesbcl

from .import openstudioutilitiesidd

from .import openstudioutilitiesidf

from .import openstudioutilitiesfiletypes

from .import openstudiomodelcore

from .import openstudiomodelsimulation

from .import openstudiomodelresources

from .import openstudiomodelgeometry

class SupplyAirflowRatioFieldVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SupplyAirflowRatioFieldVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SupplyAirflowRatioFieldVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::size_type":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::value_type":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SupplyAirflowRatioField >::difference_type', j: 'std::vector< openstudio::model::SupplyAirflowRatioField >::difference_type') -> "std::vector< openstudio::model::SupplyAirflowRatioField,std::allocator< openstudio::model::SupplyAirflowRatioField > > *":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SupplyAirflowRatioField >::difference_type', j: 'std::vector< openstudio::model::SupplyAirflowRatioField >::difference_type') -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::value_type const &":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector___setitem__(self, *args)



    def append(self, x: 'SupplyAirflowRatioField') -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::size_type":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_clear(self)



    def swap(self, v: 'SupplyAirflowRatioFieldVector') -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::allocator_type":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::iterator":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::iterator":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::reverse_iterator":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::reverse_iterator":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::iterator":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SupplyAirflowRatioFieldVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SupplyAirflowRatioField') -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::value_type const &":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::value_type const &":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SupplyAirflowRatioField >::size_type', x: 'SupplyAirflowRatioField') -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SupplyAirflowRatioField >::size_type', x: 'SupplyAirflowRatioField') -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SupplyAirflowRatioField >::size_type') -> "void":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField >::size_type":

        return _openstudiomodelhvac.SupplyAirflowRatioFieldVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SupplyAirflowRatioFieldVector

    __del__ = lambda self: None

SupplyAirflowRatioFieldVector_swigregister = _openstudiomodelhvac.SupplyAirflowRatioFieldVector_swigregister

SupplyAirflowRatioFieldVector_swigregister(SupplyAirflowRatioFieldVector)



class PortListVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PortListVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PortListVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.PortListVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.PortListVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.PortListVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::PortList >::size_type":

        return _openstudiomodelhvac.PortListVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::PortList >::value_type":

        return _openstudiomodelhvac.PortListVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::PortList >::difference_type', j: 'std::vector< openstudio::model::PortList >::difference_type') -> "std::vector< openstudio::model::PortList,std::allocator< openstudio::model::PortList > > *":

        return _openstudiomodelhvac.PortListVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.PortListVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::PortList >::difference_type', j: 'std::vector< openstudio::model::PortList >::difference_type') -> "void":

        return _openstudiomodelhvac.PortListVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PortListVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::PortList >::value_type const &":

        return _openstudiomodelhvac.PortListVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PortListVector___setitem__(self, *args)



    def append(self, x: 'PortList') -> "void":

        return _openstudiomodelhvac.PortListVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.PortListVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::PortList >::size_type":

        return _openstudiomodelhvac.PortListVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.PortListVector_clear(self)



    def swap(self, v: 'PortListVector') -> "void":

        return _openstudiomodelhvac.PortListVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::PortList >::allocator_type":

        return _openstudiomodelhvac.PortListVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::PortList >::iterator":

        return _openstudiomodelhvac.PortListVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::PortList >::iterator":

        return _openstudiomodelhvac.PortListVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::PortList >::reverse_iterator":

        return _openstudiomodelhvac.PortListVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::PortList >::reverse_iterator":

        return _openstudiomodelhvac.PortListVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.PortListVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::PortList >::iterator":

        return _openstudiomodelhvac.PortListVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_PortListVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PortList') -> "void":

        return _openstudiomodelhvac.PortListVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::PortList >::value_type const &":

        return _openstudiomodelhvac.PortListVector_front(self)



    def back(self) -> "std::vector< openstudio::model::PortList >::value_type const &":

        return _openstudiomodelhvac.PortListVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::PortList >::size_type', x: 'PortList') -> "void":

        return _openstudiomodelhvac.PortListVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::PortList >::size_type', x: 'PortList') -> "void":

        return _openstudiomodelhvac.PortListVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.PortListVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::PortList >::size_type') -> "void":

        return _openstudiomodelhvac.PortListVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::PortList >::size_type":

        return _openstudiomodelhvac.PortListVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_PortListVector

    __del__ = lambda self: None

PortListVector_swigregister = _openstudiomodelhvac.PortListVector_swigregister

PortListVector_swigregister(PortListVector)



class OptionalPortList(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPortList, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPortList, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalPortList(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalPortList_reset(self)



    def __ref__(self) -> "openstudio::model::PortList":

        return _openstudiomodelhvac.OptionalPortList___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalPortList_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalPortList_isNull(self)



    def get(self) -> "openstudio::model::PortList":

        return _openstudiomodelhvac.OptionalPortList_get(self)



    def set(self, t: 'PortList') -> "void":

        return _openstudiomodelhvac.OptionalPortList_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPortList

    __del__ = lambda self: None

OptionalPortList_swigregister = _openstudiomodelhvac.OptionalPortList_swigregister

OptionalPortList_swigregister(OptionalPortList)



class LoopVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, LoopVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, LoopVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.LoopVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.LoopVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.LoopVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::Loop >::size_type":

        return _openstudiomodelhvac.LoopVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::Loop >::value_type":

        return _openstudiomodelhvac.LoopVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::Loop >::difference_type', j: 'std::vector< openstudio::model::Loop >::difference_type') -> "std::vector< openstudio::model::Loop,std::allocator< openstudio::model::Loop > > *":

        return _openstudiomodelhvac.LoopVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.LoopVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::Loop >::difference_type', j: 'std::vector< openstudio::model::Loop >::difference_type') -> "void":

        return _openstudiomodelhvac.LoopVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.LoopVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::Loop >::value_type const &":

        return _openstudiomodelhvac.LoopVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.LoopVector___setitem__(self, *args)



    def append(self, x: 'Loop') -> "void":

        return _openstudiomodelhvac.LoopVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.LoopVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::Loop >::size_type":

        return _openstudiomodelhvac.LoopVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.LoopVector_clear(self)



    def swap(self, v: 'LoopVector') -> "void":

        return _openstudiomodelhvac.LoopVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::Loop >::allocator_type":

        return _openstudiomodelhvac.LoopVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::Loop >::iterator":

        return _openstudiomodelhvac.LoopVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::Loop >::iterator":

        return _openstudiomodelhvac.LoopVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::Loop >::reverse_iterator":

        return _openstudiomodelhvac.LoopVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::Loop >::reverse_iterator":

        return _openstudiomodelhvac.LoopVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.LoopVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::Loop >::iterator":

        return _openstudiomodelhvac.LoopVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_LoopVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Loop') -> "void":

        return _openstudiomodelhvac.LoopVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::Loop >::value_type const &":

        return _openstudiomodelhvac.LoopVector_front(self)



    def back(self) -> "std::vector< openstudio::model::Loop >::value_type const &":

        return _openstudiomodelhvac.LoopVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::Loop >::size_type', x: 'Loop') -> "void":

        return _openstudiomodelhvac.LoopVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::Loop >::size_type', x: 'Loop') -> "void":

        return _openstudiomodelhvac.LoopVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.LoopVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::Loop >::size_type') -> "void":

        return _openstudiomodelhvac.LoopVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::Loop >::size_type":

        return _openstudiomodelhvac.LoopVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_LoopVector

    __del__ = lambda self: None

LoopVector_swigregister = _openstudiomodelhvac.LoopVector_swigregister

LoopVector_swigregister(LoopVector)



class OptionalLoop(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalLoop, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalLoop, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalLoop(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalLoop_reset(self)



    def __ref__(self) -> "openstudio::model::Loop":

        return _openstudiomodelhvac.OptionalLoop___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalLoop_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalLoop_isNull(self)



    def get(self) -> "openstudio::model::Loop":

        return _openstudiomodelhvac.OptionalLoop_get(self)



    def set(self, t: 'Loop') -> "void":

        return _openstudiomodelhvac.OptionalLoop_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalLoop

    __del__ = lambda self: None

OptionalLoop_swigregister = _openstudiomodelhvac.OptionalLoop_swigregister

OptionalLoop_swigregister(OptionalLoop)



class HVACComponentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, HVACComponentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, HVACComponentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.HVACComponentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.HVACComponentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.HVACComponentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::HVACComponent >::size_type":

        return _openstudiomodelhvac.HVACComponentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::HVACComponent >::value_type":

        return _openstudiomodelhvac.HVACComponentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::HVACComponent >::difference_type', j: 'std::vector< openstudio::model::HVACComponent >::difference_type') -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > > *":

        return _openstudiomodelhvac.HVACComponentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.HVACComponentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::HVACComponent >::difference_type', j: 'std::vector< openstudio::model::HVACComponent >::difference_type') -> "void":

        return _openstudiomodelhvac.HVACComponentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HVACComponentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::HVACComponent >::value_type const &":

        return _openstudiomodelhvac.HVACComponentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HVACComponentVector___setitem__(self, *args)



    def append(self, x: 'HVACComponent') -> "void":

        return _openstudiomodelhvac.HVACComponentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.HVACComponentVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::HVACComponent >::size_type":

        return _openstudiomodelhvac.HVACComponentVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.HVACComponentVector_clear(self)



    def swap(self, v: 'HVACComponentVector') -> "void":

        return _openstudiomodelhvac.HVACComponentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::HVACComponent >::allocator_type":

        return _openstudiomodelhvac.HVACComponentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::HVACComponent >::iterator":

        return _openstudiomodelhvac.HVACComponentVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::HVACComponent >::iterator":

        return _openstudiomodelhvac.HVACComponentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::HVACComponent >::reverse_iterator":

        return _openstudiomodelhvac.HVACComponentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::HVACComponent >::reverse_iterator":

        return _openstudiomodelhvac.HVACComponentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.HVACComponentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::HVACComponent >::iterator":

        return _openstudiomodelhvac.HVACComponentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_HVACComponentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'HVACComponent') -> "void":

        return _openstudiomodelhvac.HVACComponentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::HVACComponent >::value_type const &":

        return _openstudiomodelhvac.HVACComponentVector_front(self)



    def back(self) -> "std::vector< openstudio::model::HVACComponent >::value_type const &":

        return _openstudiomodelhvac.HVACComponentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::HVACComponent >::size_type', x: 'HVACComponent') -> "void":

        return _openstudiomodelhvac.HVACComponentVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::HVACComponent >::size_type', x: 'HVACComponent') -> "void":

        return _openstudiomodelhvac.HVACComponentVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.HVACComponentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::HVACComponent >::size_type') -> "void":

        return _openstudiomodelhvac.HVACComponentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::HVACComponent >::size_type":

        return _openstudiomodelhvac.HVACComponentVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_HVACComponentVector

    __del__ = lambda self: None

HVACComponentVector_swigregister = _openstudiomodelhvac.HVACComponentVector_swigregister

HVACComponentVector_swigregister(HVACComponentVector)



class OptionalHVACComponent(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalHVACComponent, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalHVACComponent, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalHVACComponent(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalHVACComponent_reset(self)



    def __ref__(self) -> "openstudio::model::HVACComponent":

        return _openstudiomodelhvac.OptionalHVACComponent___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalHVACComponent_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalHVACComponent_isNull(self)



    def get(self) -> "openstudio::model::HVACComponent":

        return _openstudiomodelhvac.OptionalHVACComponent_get(self)



    def set(self, t: 'HVACComponent') -> "void":

        return _openstudiomodelhvac.OptionalHVACComponent_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHVACComponent

    __del__ = lambda self: None

OptionalHVACComponent_swigregister = _openstudiomodelhvac.OptionalHVACComponent_swigregister

OptionalHVACComponent_swigregister(OptionalHVACComponent)



class ZoneHVACComponentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACComponentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACComponentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ZoneHVACComponentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ZoneHVACComponentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ZoneHVACComponentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::size_type":

        return _openstudiomodelhvac.ZoneHVACComponentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::value_type":

        return _openstudiomodelhvac.ZoneHVACComponentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACComponent >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACComponent >::difference_type') -> "std::vector< openstudio::model::ZoneHVACComponent,std::allocator< openstudio::model::ZoneHVACComponent > > *":

        return _openstudiomodelhvac.ZoneHVACComponentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACComponent >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACComponent >::difference_type') -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACComponent >::value_type const &":

        return _openstudiomodelhvac.ZoneHVACComponentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector___setitem__(self, *args)



    def append(self, x: 'ZoneHVACComponent') -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ZoneHVACComponentVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::size_type":

        return _openstudiomodelhvac.ZoneHVACComponentVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector_clear(self)



    def swap(self, v: 'ZoneHVACComponentVector') -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::allocator_type":

        return _openstudiomodelhvac.ZoneHVACComponentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::iterator":

        return _openstudiomodelhvac.ZoneHVACComponentVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::iterator":

        return _openstudiomodelhvac.ZoneHVACComponentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::reverse_iterator":

        return _openstudiomodelhvac.ZoneHVACComponentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::reverse_iterator":

        return _openstudiomodelhvac.ZoneHVACComponentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACComponent >::iterator":

        return _openstudiomodelhvac.ZoneHVACComponentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ZoneHVACComponentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ZoneHVACComponent') -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::value_type const &":

        return _openstudiomodelhvac.ZoneHVACComponentVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::value_type const &":

        return _openstudiomodelhvac.ZoneHVACComponentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACComponent >::size_type', x: 'ZoneHVACComponent') -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACComponent >::size_type', x: 'ZoneHVACComponent') -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACComponent >::size_type') -> "void":

        return _openstudiomodelhvac.ZoneHVACComponentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACComponent >::size_type":

        return _openstudiomodelhvac.ZoneHVACComponentVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneHVACComponentVector

    __del__ = lambda self: None

ZoneHVACComponentVector_swigregister = _openstudiomodelhvac.ZoneHVACComponentVector_swigregister

ZoneHVACComponentVector_swigregister(ZoneHVACComponentVector)



class OptionalZoneHVACComponent(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACComponent, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACComponent, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalZoneHVACComponent(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalZoneHVACComponent_reset(self)



    def __ref__(self) -> "openstudio::model::ZoneHVACComponent":

        return _openstudiomodelhvac.OptionalZoneHVACComponent___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneHVACComponent_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneHVACComponent_isNull(self)



    def get(self) -> "openstudio::model::ZoneHVACComponent":

        return _openstudiomodelhvac.OptionalZoneHVACComponent_get(self)



    def set(self, t: 'ZoneHVACComponent') -> "void":

        return _openstudiomodelhvac.OptionalZoneHVACComponent_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneHVACComponent

    __del__ = lambda self: None

OptionalZoneHVACComponent_swigregister = _openstudiomodelhvac.OptionalZoneHVACComponent_swigregister

OptionalZoneHVACComponent_swigregister(OptionalZoneHVACComponent)



class ZoneHVACEquipmentListVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACEquipmentListVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACEquipmentListVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::value_type":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneHVACEquipmentList >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACEquipmentList >::difference_type') -> "std::vector< openstudio::model::ZoneHVACEquipmentList,std::allocator< openstudio::model::ZoneHVACEquipmentList > > *":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneHVACEquipmentList >::difference_type', j: 'std::vector< openstudio::model::ZoneHVACEquipmentList >::difference_type') -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::value_type const &":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector___setitem__(self, *args)



    def append(self, x: 'ZoneHVACEquipmentList') -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_clear(self)



    def swap(self, v: 'ZoneHVACEquipmentListVector') -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::allocator_type":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::iterator":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::iterator":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::reverse_iterator":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::reverse_iterator":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::iterator":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ZoneHVACEquipmentListVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ZoneHVACEquipmentList') -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::value_type const &":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::value_type const &":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type', x: 'ZoneHVACEquipmentList') -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type', x: 'ZoneHVACEquipmentList') -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type') -> "void":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ZoneHVACEquipmentList >::size_type":

        return _openstudiomodelhvac.ZoneHVACEquipmentListVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneHVACEquipmentListVector

    __del__ = lambda self: None

ZoneHVACEquipmentListVector_swigregister = _openstudiomodelhvac.ZoneHVACEquipmentListVector_swigregister

ZoneHVACEquipmentListVector_swigregister(ZoneHVACEquipmentListVector)



class OptionalZoneHVACEquipmentList(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneHVACEquipmentList, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneHVACEquipmentList, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalZoneHVACEquipmentList(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_reset(self)



    def __ref__(self) -> "openstudio::model::ZoneHVACEquipmentList":

        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_isNull(self)



    def get(self) -> "openstudio::model::ZoneHVACEquipmentList":

        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_get(self)



    def set(self, t: 'ZoneHVACEquipmentList') -> "void":

        return _openstudiomodelhvac.OptionalZoneHVACEquipmentList_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneHVACEquipmentList

    __del__ = lambda self: None

OptionalZoneHVACEquipmentList_swigregister = _openstudiomodelhvac.OptionalZoneHVACEquipmentList_swigregister

OptionalZoneHVACEquipmentList_swigregister(OptionalZoneHVACEquipmentList)



class ThermostatVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermostatVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ThermostatVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ThermostatVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ThermostatVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ThermostatVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::Thermostat >::size_type":

        return _openstudiomodelhvac.ThermostatVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::Thermostat >::value_type":

        return _openstudiomodelhvac.ThermostatVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::Thermostat >::difference_type', j: 'std::vector< openstudio::model::Thermostat >::difference_type') -> "std::vector< openstudio::model::Thermostat,std::allocator< openstudio::model::Thermostat > > *":

        return _openstudiomodelhvac.ThermostatVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermostatVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::Thermostat >::difference_type', j: 'std::vector< openstudio::model::Thermostat >::difference_type') -> "void":

        return _openstudiomodelhvac.ThermostatVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermostatVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::Thermostat >::value_type const &":

        return _openstudiomodelhvac.ThermostatVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermostatVector___setitem__(self, *args)



    def append(self, x: 'Thermostat') -> "void":

        return _openstudiomodelhvac.ThermostatVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ThermostatVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::Thermostat >::size_type":

        return _openstudiomodelhvac.ThermostatVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ThermostatVector_clear(self)



    def swap(self, v: 'ThermostatVector') -> "void":

        return _openstudiomodelhvac.ThermostatVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::Thermostat >::allocator_type":

        return _openstudiomodelhvac.ThermostatVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::Thermostat >::iterator":

        return _openstudiomodelhvac.ThermostatVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::Thermostat >::iterator":

        return _openstudiomodelhvac.ThermostatVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::Thermostat >::reverse_iterator":

        return _openstudiomodelhvac.ThermostatVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::Thermostat >::reverse_iterator":

        return _openstudiomodelhvac.ThermostatVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ThermostatVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::Thermostat >::iterator":

        return _openstudiomodelhvac.ThermostatVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ThermostatVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Thermostat') -> "void":

        return _openstudiomodelhvac.ThermostatVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::Thermostat >::value_type const &":

        return _openstudiomodelhvac.ThermostatVector_front(self)



    def back(self) -> "std::vector< openstudio::model::Thermostat >::value_type const &":

        return _openstudiomodelhvac.ThermostatVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::Thermostat >::size_type', x: 'Thermostat') -> "void":

        return _openstudiomodelhvac.ThermostatVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::Thermostat >::size_type', x: 'Thermostat') -> "void":

        return _openstudiomodelhvac.ThermostatVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ThermostatVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::Thermostat >::size_type') -> "void":

        return _openstudiomodelhvac.ThermostatVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::Thermostat >::size_type":

        return _openstudiomodelhvac.ThermostatVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ThermostatVector

    __del__ = lambda self: None

ThermostatVector_swigregister = _openstudiomodelhvac.ThermostatVector_swigregister

ThermostatVector_swigregister(ThermostatVector)



class OptionalThermostat(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalThermostat, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalThermostat, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalThermostat(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalThermostat_reset(self)



    def __ref__(self) -> "openstudio::model::Thermostat":

        return _openstudiomodelhvac.OptionalThermostat___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalThermostat_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalThermostat_isNull(self)



    def get(self) -> "openstudio::model::Thermostat":

        return _openstudiomodelhvac.OptionalThermostat_get(self)



    def set(self, t: 'Thermostat') -> "void":

        return _openstudiomodelhvac.OptionalThermostat_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalThermostat

    __del__ = lambda self: None

OptionalThermostat_swigregister = _openstudiomodelhvac.OptionalThermostat_swigregister

OptionalThermostat_swigregister(OptionalThermostat)



class SetpointManagerVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManager >::size_type":

        return _openstudiomodelhvac.SetpointManagerVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManager >::value_type":

        return _openstudiomodelhvac.SetpointManagerVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManager >::difference_type', j: 'std::vector< openstudio::model::SetpointManager >::difference_type') -> "std::vector< openstudio::model::SetpointManager,std::allocator< openstudio::model::SetpointManager > > *":

        return _openstudiomodelhvac.SetpointManagerVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManager >::difference_type', j: 'std::vector< openstudio::model::SetpointManager >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManager >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerVector___setitem__(self, *args)



    def append(self, x: 'SetpointManager') -> "void":

        return _openstudiomodelhvac.SetpointManagerVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManager >::size_type":

        return _openstudiomodelhvac.SetpointManagerVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerVector_clear(self)



    def swap(self, v: 'SetpointManagerVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManager >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManager >::iterator":

        return _openstudiomodelhvac.SetpointManagerVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManager >::iterator":

        return _openstudiomodelhvac.SetpointManagerVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManager >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManager >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManager >::iterator":

        return _openstudiomodelhvac.SetpointManagerVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManager') -> "void":

        return _openstudiomodelhvac.SetpointManagerVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManager >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManager >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManager >::size_type', x: 'SetpointManager') -> "void":

        return _openstudiomodelhvac.SetpointManagerVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManager >::size_type', x: 'SetpointManager') -> "void":

        return _openstudiomodelhvac.SetpointManagerVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManager >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManager >::size_type":

        return _openstudiomodelhvac.SetpointManagerVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerVector

    __del__ = lambda self: None

SetpointManagerVector_swigregister = _openstudiomodelhvac.SetpointManagerVector_swigregister

SetpointManagerVector_swigregister(SetpointManagerVector)



class OptionalSetpointManager(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManager, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManager, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManager(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManager_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManager":

        return _openstudiomodelhvac.OptionalSetpointManager___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManager_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManager_isNull(self)



    def get(self) -> "openstudio::model::SetpointManager":

        return _openstudiomodelhvac.OptionalSetpointManager_get(self)



    def set(self, t: 'SetpointManager') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManager_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManager

    __del__ = lambda self: None

OptionalSetpointManager_swigregister = _openstudiomodelhvac.OptionalSetpointManager_swigregister

OptionalSetpointManager_swigregister(OptionalSetpointManager)



class StraightComponentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, StraightComponentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, StraightComponentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.StraightComponentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.StraightComponentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.StraightComponentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::StraightComponent >::size_type":

        return _openstudiomodelhvac.StraightComponentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::StraightComponent >::value_type":

        return _openstudiomodelhvac.StraightComponentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::StraightComponent >::difference_type', j: 'std::vector< openstudio::model::StraightComponent >::difference_type') -> "std::vector< openstudio::model::StraightComponent,std::allocator< openstudio::model::StraightComponent > > *":

        return _openstudiomodelhvac.StraightComponentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.StraightComponentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::StraightComponent >::difference_type', j: 'std::vector< openstudio::model::StraightComponent >::difference_type') -> "void":

        return _openstudiomodelhvac.StraightComponentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.StraightComponentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::StraightComponent >::value_type const &":

        return _openstudiomodelhvac.StraightComponentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.StraightComponentVector___setitem__(self, *args)



    def append(self, x: 'StraightComponent') -> "void":

        return _openstudiomodelhvac.StraightComponentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.StraightComponentVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::StraightComponent >::size_type":

        return _openstudiomodelhvac.StraightComponentVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.StraightComponentVector_clear(self)



    def swap(self, v: 'StraightComponentVector') -> "void":

        return _openstudiomodelhvac.StraightComponentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::StraightComponent >::allocator_type":

        return _openstudiomodelhvac.StraightComponentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::StraightComponent >::iterator":

        return _openstudiomodelhvac.StraightComponentVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::StraightComponent >::iterator":

        return _openstudiomodelhvac.StraightComponentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::StraightComponent >::reverse_iterator":

        return _openstudiomodelhvac.StraightComponentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::StraightComponent >::reverse_iterator":

        return _openstudiomodelhvac.StraightComponentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.StraightComponentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::StraightComponent >::iterator":

        return _openstudiomodelhvac.StraightComponentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_StraightComponentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'StraightComponent') -> "void":

        return _openstudiomodelhvac.StraightComponentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::StraightComponent >::value_type const &":

        return _openstudiomodelhvac.StraightComponentVector_front(self)



    def back(self) -> "std::vector< openstudio::model::StraightComponent >::value_type const &":

        return _openstudiomodelhvac.StraightComponentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::StraightComponent >::size_type', x: 'StraightComponent') -> "void":

        return _openstudiomodelhvac.StraightComponentVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::StraightComponent >::size_type', x: 'StraightComponent') -> "void":

        return _openstudiomodelhvac.StraightComponentVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.StraightComponentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::StraightComponent >::size_type') -> "void":

        return _openstudiomodelhvac.StraightComponentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::StraightComponent >::size_type":

        return _openstudiomodelhvac.StraightComponentVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_StraightComponentVector

    __del__ = lambda self: None

StraightComponentVector_swigregister = _openstudiomodelhvac.StraightComponentVector_swigregister

StraightComponentVector_swigregister(StraightComponentVector)



class OptionalStraightComponent(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalStraightComponent, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalStraightComponent, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalStraightComponent(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalStraightComponent_reset(self)



    def __ref__(self) -> "openstudio::model::StraightComponent":

        return _openstudiomodelhvac.OptionalStraightComponent___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalStraightComponent_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalStraightComponent_isNull(self)



    def get(self) -> "openstudio::model::StraightComponent":

        return _openstudiomodelhvac.OptionalStraightComponent_get(self)



    def set(self, t: 'StraightComponent') -> "void":

        return _openstudiomodelhvac.OptionalStraightComponent_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalStraightComponent

    __del__ = lambda self: None

OptionalStraightComponent_swigregister = _openstudiomodelhvac.OptionalStraightComponent_swigregister

OptionalStraightComponent_swigregister(OptionalStraightComponent)



class WaterToAirComponentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterToAirComponentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WaterToAirComponentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.WaterToAirComponentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.WaterToAirComponentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.WaterToAirComponentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::WaterToAirComponent >::size_type":

        return _openstudiomodelhvac.WaterToAirComponentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::WaterToAirComponent >::value_type":

        return _openstudiomodelhvac.WaterToAirComponentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::WaterToAirComponent >::difference_type', j: 'std::vector< openstudio::model::WaterToAirComponent >::difference_type') -> "std::vector< openstudio::model::WaterToAirComponent,std::allocator< openstudio::model::WaterToAirComponent > > *":

        return _openstudiomodelhvac.WaterToAirComponentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::WaterToAirComponent >::difference_type', j: 'std::vector< openstudio::model::WaterToAirComponent >::difference_type') -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterToAirComponent >::value_type const &":

        return _openstudiomodelhvac.WaterToAirComponentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector___setitem__(self, *args)



    def append(self, x: 'WaterToAirComponent') -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.WaterToAirComponentVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::WaterToAirComponent >::size_type":

        return _openstudiomodelhvac.WaterToAirComponentVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector_clear(self)



    def swap(self, v: 'WaterToAirComponentVector') -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::WaterToAirComponent >::allocator_type":

        return _openstudiomodelhvac.WaterToAirComponentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::WaterToAirComponent >::iterator":

        return _openstudiomodelhvac.WaterToAirComponentVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::WaterToAirComponent >::iterator":

        return _openstudiomodelhvac.WaterToAirComponentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::WaterToAirComponent >::reverse_iterator":

        return _openstudiomodelhvac.WaterToAirComponentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::WaterToAirComponent >::reverse_iterator":

        return _openstudiomodelhvac.WaterToAirComponentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::WaterToAirComponent >::iterator":

        return _openstudiomodelhvac.WaterToAirComponentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_WaterToAirComponentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WaterToAirComponent') -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::WaterToAirComponent >::value_type const &":

        return _openstudiomodelhvac.WaterToAirComponentVector_front(self)



    def back(self) -> "std::vector< openstudio::model::WaterToAirComponent >::value_type const &":

        return _openstudiomodelhvac.WaterToAirComponentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::WaterToAirComponent >::size_type', x: 'WaterToAirComponent') -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::WaterToAirComponent >::size_type', x: 'WaterToAirComponent') -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::WaterToAirComponent >::size_type') -> "void":

        return _openstudiomodelhvac.WaterToAirComponentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::WaterToAirComponent >::size_type":

        return _openstudiomodelhvac.WaterToAirComponentVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterToAirComponentVector

    __del__ = lambda self: None

WaterToAirComponentVector_swigregister = _openstudiomodelhvac.WaterToAirComponentVector_swigregister

WaterToAirComponentVector_swigregister(WaterToAirComponentVector)



class OptionalWaterToAirComponent(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWaterToAirComponent, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWaterToAirComponent, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalWaterToAirComponent(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalWaterToAirComponent_reset(self)



    def __ref__(self) -> "openstudio::model::WaterToAirComponent":

        return _openstudiomodelhvac.OptionalWaterToAirComponent___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterToAirComponent_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterToAirComponent_isNull(self)



    def get(self) -> "openstudio::model::WaterToAirComponent":

        return _openstudiomodelhvac.OptionalWaterToAirComponent_get(self)



    def set(self, t: 'WaterToAirComponent') -> "void":

        return _openstudiomodelhvac.OptionalWaterToAirComponent_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterToAirComponent

    __del__ = lambda self: None

OptionalWaterToAirComponent_swigregister = _openstudiomodelhvac.OptionalWaterToAirComponent_swigregister

OptionalWaterToAirComponent_swigregister(OptionalWaterToAirComponent)



class WaterToWaterComponentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterToWaterComponentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WaterToWaterComponentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.WaterToWaterComponentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.WaterToWaterComponentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.WaterToWaterComponentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::size_type":

        return _openstudiomodelhvac.WaterToWaterComponentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::value_type":

        return _openstudiomodelhvac.WaterToWaterComponentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::WaterToWaterComponent >::difference_type', j: 'std::vector< openstudio::model::WaterToWaterComponent >::difference_type') -> "std::vector< openstudio::model::WaterToWaterComponent,std::allocator< openstudio::model::WaterToWaterComponent > > *":

        return _openstudiomodelhvac.WaterToWaterComponentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::WaterToWaterComponent >::difference_type', j: 'std::vector< openstudio::model::WaterToWaterComponent >::difference_type') -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterToWaterComponent >::value_type const &":

        return _openstudiomodelhvac.WaterToWaterComponentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector___setitem__(self, *args)



    def append(self, x: 'WaterToWaterComponent') -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.WaterToWaterComponentVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::size_type":

        return _openstudiomodelhvac.WaterToWaterComponentVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector_clear(self)



    def swap(self, v: 'WaterToWaterComponentVector') -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::allocator_type":

        return _openstudiomodelhvac.WaterToWaterComponentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::iterator":

        return _openstudiomodelhvac.WaterToWaterComponentVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::iterator":

        return _openstudiomodelhvac.WaterToWaterComponentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::reverse_iterator":

        return _openstudiomodelhvac.WaterToWaterComponentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::reverse_iterator":

        return _openstudiomodelhvac.WaterToWaterComponentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::WaterToWaterComponent >::iterator":

        return _openstudiomodelhvac.WaterToWaterComponentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_WaterToWaterComponentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WaterToWaterComponent') -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::value_type const &":

        return _openstudiomodelhvac.WaterToWaterComponentVector_front(self)



    def back(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::value_type const &":

        return _openstudiomodelhvac.WaterToWaterComponentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::WaterToWaterComponent >::size_type', x: 'WaterToWaterComponent') -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::WaterToWaterComponent >::size_type', x: 'WaterToWaterComponent') -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::WaterToWaterComponent >::size_type') -> "void":

        return _openstudiomodelhvac.WaterToWaterComponentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::WaterToWaterComponent >::size_type":

        return _openstudiomodelhvac.WaterToWaterComponentVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterToWaterComponentVector

    __del__ = lambda self: None

WaterToWaterComponentVector_swigregister = _openstudiomodelhvac.WaterToWaterComponentVector_swigregister

WaterToWaterComponentVector_swigregister(WaterToWaterComponentVector)



class OptionalWaterToWaterComponent(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWaterToWaterComponent, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWaterToWaterComponent, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalWaterToWaterComponent(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalWaterToWaterComponent_reset(self)



    def __ref__(self) -> "openstudio::model::WaterToWaterComponent":

        return _openstudiomodelhvac.OptionalWaterToWaterComponent___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterToWaterComponent_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterToWaterComponent_isNull(self)



    def get(self) -> "openstudio::model::WaterToWaterComponent":

        return _openstudiomodelhvac.OptionalWaterToWaterComponent_get(self)



    def set(self, t: 'WaterToWaterComponent') -> "void":

        return _openstudiomodelhvac.OptionalWaterToWaterComponent_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterToWaterComponent

    __del__ = lambda self: None

OptionalWaterToWaterComponent_swigregister = _openstudiomodelhvac.OptionalWaterToWaterComponent_swigregister

OptionalWaterToWaterComponent_swigregister(OptionalWaterToWaterComponent)



class AirToAirComponentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirToAirComponentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirToAirComponentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirToAirComponentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirToAirComponentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirToAirComponentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirToAirComponent >::size_type":

        return _openstudiomodelhvac.AirToAirComponentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirToAirComponent >::value_type":

        return _openstudiomodelhvac.AirToAirComponentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirToAirComponent >::difference_type', j: 'std::vector< openstudio::model::AirToAirComponent >::difference_type') -> "std::vector< openstudio::model::AirToAirComponent,std::allocator< openstudio::model::AirToAirComponent > > *":

        return _openstudiomodelhvac.AirToAirComponentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirToAirComponent >::difference_type', j: 'std::vector< openstudio::model::AirToAirComponent >::difference_type') -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirToAirComponent >::value_type const &":

        return _openstudiomodelhvac.AirToAirComponentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector___setitem__(self, *args)



    def append(self, x: 'AirToAirComponent') -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirToAirComponentVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirToAirComponent >::size_type":

        return _openstudiomodelhvac.AirToAirComponentVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector_clear(self)



    def swap(self, v: 'AirToAirComponentVector') -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirToAirComponent >::allocator_type":

        return _openstudiomodelhvac.AirToAirComponentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirToAirComponent >::iterator":

        return _openstudiomodelhvac.AirToAirComponentVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirToAirComponent >::iterator":

        return _openstudiomodelhvac.AirToAirComponentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirToAirComponent >::reverse_iterator":

        return _openstudiomodelhvac.AirToAirComponentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirToAirComponent >::reverse_iterator":

        return _openstudiomodelhvac.AirToAirComponentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirToAirComponent >::iterator":

        return _openstudiomodelhvac.AirToAirComponentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirToAirComponentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirToAirComponent') -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirToAirComponent >::value_type const &":

        return _openstudiomodelhvac.AirToAirComponentVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirToAirComponent >::value_type const &":

        return _openstudiomodelhvac.AirToAirComponentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirToAirComponent >::size_type', x: 'AirToAirComponent') -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirToAirComponent >::size_type', x: 'AirToAirComponent') -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirToAirComponent >::size_type') -> "void":

        return _openstudiomodelhvac.AirToAirComponentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirToAirComponent >::size_type":

        return _openstudiomodelhvac.AirToAirComponentVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirToAirComponentVector

    __del__ = lambda self: None

AirToAirComponentVector_swigregister = _openstudiomodelhvac.AirToAirComponentVector_swigregister

AirToAirComponentVector_swigregister(AirToAirComponentVector)



class OptionalAirToAirComponent(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirToAirComponent, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirToAirComponent, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirToAirComponent(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirToAirComponent_reset(self)



    def __ref__(self) -> "openstudio::model::AirToAirComponent":

        return _openstudiomodelhvac.OptionalAirToAirComponent___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirToAirComponent_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirToAirComponent_isNull(self)



    def get(self) -> "openstudio::model::AirToAirComponent":

        return _openstudiomodelhvac.OptionalAirToAirComponent_get(self)



    def set(self, t: 'AirToAirComponent') -> "void":

        return _openstudiomodelhvac.OptionalAirToAirComponent_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirToAirComponent

    __del__ = lambda self: None

OptionalAirToAirComponent_swigregister = _openstudiomodelhvac.OptionalAirToAirComponent_swigregister

OptionalAirToAirComponent_swigregister(OptionalAirToAirComponent)



class NodeVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, NodeVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.NodeVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.NodeVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.NodeVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::Node >::size_type":

        return _openstudiomodelhvac.NodeVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::Node >::value_type":

        return _openstudiomodelhvac.NodeVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::Node >::difference_type', j: 'std::vector< openstudio::model::Node >::difference_type') -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > > *":

        return _openstudiomodelhvac.NodeVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.NodeVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::Node >::difference_type', j: 'std::vector< openstudio::model::Node >::difference_type') -> "void":

        return _openstudiomodelhvac.NodeVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.NodeVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::Node >::value_type const &":

        return _openstudiomodelhvac.NodeVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.NodeVector___setitem__(self, *args)



    def append(self, x: 'Node') -> "void":

        return _openstudiomodelhvac.NodeVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.NodeVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::Node >::size_type":

        return _openstudiomodelhvac.NodeVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.NodeVector_clear(self)



    def swap(self, v: 'NodeVector') -> "void":

        return _openstudiomodelhvac.NodeVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::Node >::allocator_type":

        return _openstudiomodelhvac.NodeVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::Node >::iterator":

        return _openstudiomodelhvac.NodeVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::Node >::iterator":

        return _openstudiomodelhvac.NodeVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::Node >::reverse_iterator":

        return _openstudiomodelhvac.NodeVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::Node >::reverse_iterator":

        return _openstudiomodelhvac.NodeVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.NodeVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::Node >::iterator":

        return _openstudiomodelhvac.NodeVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_NodeVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Node') -> "void":

        return _openstudiomodelhvac.NodeVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::Node >::value_type const &":

        return _openstudiomodelhvac.NodeVector_front(self)



    def back(self) -> "std::vector< openstudio::model::Node >::value_type const &":

        return _openstudiomodelhvac.NodeVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::Node >::size_type', x: 'Node') -> "void":

        return _openstudiomodelhvac.NodeVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::Node >::size_type', x: 'Node') -> "void":

        return _openstudiomodelhvac.NodeVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.NodeVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::Node >::size_type') -> "void":

        return _openstudiomodelhvac.NodeVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::Node >::size_type":

        return _openstudiomodelhvac.NodeVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_NodeVector

    __del__ = lambda self: None

NodeVector_swigregister = _openstudiomodelhvac.NodeVector_swigregister

NodeVector_swigregister(NodeVector)



class OptionalNode(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalNode, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalNode, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalNode(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalNode_reset(self)



    def __ref__(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.OptionalNode___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalNode_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalNode_isNull(self)



    def get(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.OptionalNode_get(self)



    def set(self, t: 'Node') -> "void":

        return _openstudiomodelhvac.OptionalNode_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalNode

    __del__ = lambda self: None

OptionalNode_swigregister = _openstudiomodelhvac.OptionalNode_swigregister

OptionalNode_swigregister(OptionalNode)



class SizingZoneVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SizingZoneVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SizingZoneVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SizingZoneVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SizingZoneVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SizingZoneVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SizingZone >::size_type":

        return _openstudiomodelhvac.SizingZoneVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SizingZone >::value_type":

        return _openstudiomodelhvac.SizingZoneVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SizingZone >::difference_type', j: 'std::vector< openstudio::model::SizingZone >::difference_type') -> "std::vector< openstudio::model::SizingZone,std::allocator< openstudio::model::SizingZone > > *":

        return _openstudiomodelhvac.SizingZoneVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SizingZoneVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SizingZone >::difference_type', j: 'std::vector< openstudio::model::SizingZone >::difference_type') -> "void":

        return _openstudiomodelhvac.SizingZoneVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SizingZoneVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SizingZone >::value_type const &":

        return _openstudiomodelhvac.SizingZoneVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SizingZoneVector___setitem__(self, *args)



    def append(self, x: 'SizingZone') -> "void":

        return _openstudiomodelhvac.SizingZoneVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SizingZoneVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SizingZone >::size_type":

        return _openstudiomodelhvac.SizingZoneVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SizingZoneVector_clear(self)



    def swap(self, v: 'SizingZoneVector') -> "void":

        return _openstudiomodelhvac.SizingZoneVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SizingZone >::allocator_type":

        return _openstudiomodelhvac.SizingZoneVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SizingZone >::iterator":

        return _openstudiomodelhvac.SizingZoneVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SizingZone >::iterator":

        return _openstudiomodelhvac.SizingZoneVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SizingZone >::reverse_iterator":

        return _openstudiomodelhvac.SizingZoneVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SizingZone >::reverse_iterator":

        return _openstudiomodelhvac.SizingZoneVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SizingZoneVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SizingZone >::iterator":

        return _openstudiomodelhvac.SizingZoneVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SizingZoneVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SizingZone') -> "void":

        return _openstudiomodelhvac.SizingZoneVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SizingZone >::value_type const &":

        return _openstudiomodelhvac.SizingZoneVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SizingZone >::value_type const &":

        return _openstudiomodelhvac.SizingZoneVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SizingZone >::size_type', x: 'SizingZone') -> "void":

        return _openstudiomodelhvac.SizingZoneVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SizingZone >::size_type', x: 'SizingZone') -> "void":

        return _openstudiomodelhvac.SizingZoneVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SizingZoneVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SizingZone >::size_type') -> "void":

        return _openstudiomodelhvac.SizingZoneVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SizingZone >::size_type":

        return _openstudiomodelhvac.SizingZoneVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SizingZoneVector

    __del__ = lambda self: None

SizingZoneVector_swigregister = _openstudiomodelhvac.SizingZoneVector_swigregister

SizingZoneVector_swigregister(SizingZoneVector)



class OptionalSizingZone(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSizingZone, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSizingZone, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSizingZone(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSizingZone_reset(self)



    def __ref__(self) -> "openstudio::model::SizingZone":

        return _openstudiomodelhvac.OptionalSizingZone___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSizingZone_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSizingZone_isNull(self)



    def get(self) -> "openstudio::model::SizingZone":

        return _openstudiomodelhvac.OptionalSizingZone_get(self)



    def set(self, t: 'SizingZone') -> "void":

        return _openstudiomodelhvac.OptionalSizingZone_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSizingZone

    __del__ = lambda self: None

OptionalSizingZone_swigregister = _openstudiomodelhvac.OptionalSizingZone_swigregister

OptionalSizingZone_swigregister(OptionalSizingZone)



class SizingSystemVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SizingSystemVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SizingSystemVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SizingSystemVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SizingSystemVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SizingSystemVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SizingSystem >::size_type":

        return _openstudiomodelhvac.SizingSystemVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SizingSystem >::value_type":

        return _openstudiomodelhvac.SizingSystemVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SizingSystem >::difference_type', j: 'std::vector< openstudio::model::SizingSystem >::difference_type') -> "std::vector< openstudio::model::SizingSystem,std::allocator< openstudio::model::SizingSystem > > *":

        return _openstudiomodelhvac.SizingSystemVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SizingSystemVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SizingSystem >::difference_type', j: 'std::vector< openstudio::model::SizingSystem >::difference_type') -> "void":

        return _openstudiomodelhvac.SizingSystemVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SizingSystemVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SizingSystem >::value_type const &":

        return _openstudiomodelhvac.SizingSystemVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SizingSystemVector___setitem__(self, *args)



    def append(self, x: 'SizingSystem') -> "void":

        return _openstudiomodelhvac.SizingSystemVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SizingSystemVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SizingSystem >::size_type":

        return _openstudiomodelhvac.SizingSystemVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SizingSystemVector_clear(self)



    def swap(self, v: 'SizingSystemVector') -> "void":

        return _openstudiomodelhvac.SizingSystemVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SizingSystem >::allocator_type":

        return _openstudiomodelhvac.SizingSystemVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SizingSystem >::iterator":

        return _openstudiomodelhvac.SizingSystemVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SizingSystem >::iterator":

        return _openstudiomodelhvac.SizingSystemVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SizingSystem >::reverse_iterator":

        return _openstudiomodelhvac.SizingSystemVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SizingSystem >::reverse_iterator":

        return _openstudiomodelhvac.SizingSystemVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SizingSystemVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SizingSystem >::iterator":

        return _openstudiomodelhvac.SizingSystemVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SizingSystemVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SizingSystem') -> "void":

        return _openstudiomodelhvac.SizingSystemVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SizingSystem >::value_type const &":

        return _openstudiomodelhvac.SizingSystemVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SizingSystem >::value_type const &":

        return _openstudiomodelhvac.SizingSystemVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SizingSystem >::size_type', x: 'SizingSystem') -> "void":

        return _openstudiomodelhvac.SizingSystemVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SizingSystem >::size_type', x: 'SizingSystem') -> "void":

        return _openstudiomodelhvac.SizingSystemVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SizingSystemVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SizingSystem >::size_type') -> "void":

        return _openstudiomodelhvac.SizingSystemVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SizingSystem >::size_type":

        return _openstudiomodelhvac.SizingSystemVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SizingSystemVector

    __del__ = lambda self: None

SizingSystemVector_swigregister = _openstudiomodelhvac.SizingSystemVector_swigregister

SizingSystemVector_swigregister(SizingSystemVector)



class OptionalSizingSystem(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSizingSystem, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSizingSystem, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSizingSystem(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSizingSystem_reset(self)



    def __ref__(self) -> "openstudio::model::SizingSystem":

        return _openstudiomodelhvac.OptionalSizingSystem___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSizingSystem_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSizingSystem_isNull(self)



    def get(self) -> "openstudio::model::SizingSystem":

        return _openstudiomodelhvac.OptionalSizingSystem_get(self)



    def set(self, t: 'SizingSystem') -> "void":

        return _openstudiomodelhvac.OptionalSizingSystem_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSizingSystem

    __del__ = lambda self: None

OptionalSizingSystem_swigregister = _openstudiomodelhvac.OptionalSizingSystem_swigregister

OptionalSizingSystem_swigregister(OptionalSizingSystem)



class ThermalZoneVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermalZoneVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ThermalZoneVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ThermalZoneVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ThermalZoneVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ThermalZoneVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ThermalZone >::size_type":

        return _openstudiomodelhvac.ThermalZoneVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ThermalZone >::value_type":

        return _openstudiomodelhvac.ThermalZoneVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ThermalZone >::difference_type', j: 'std::vector< openstudio::model::ThermalZone >::difference_type') -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > > *":

        return _openstudiomodelhvac.ThermalZoneVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalZoneVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ThermalZone >::difference_type', j: 'std::vector< openstudio::model::ThermalZone >::difference_type') -> "void":

        return _openstudiomodelhvac.ThermalZoneVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalZoneVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ThermalZone >::value_type const &":

        return _openstudiomodelhvac.ThermalZoneVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalZoneVector___setitem__(self, *args)



    def append(self, x: 'ThermalZone') -> "void":

        return _openstudiomodelhvac.ThermalZoneVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ThermalZoneVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ThermalZone >::size_type":

        return _openstudiomodelhvac.ThermalZoneVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ThermalZoneVector_clear(self)



    def swap(self, v: 'ThermalZoneVector') -> "void":

        return _openstudiomodelhvac.ThermalZoneVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ThermalZone >::allocator_type":

        return _openstudiomodelhvac.ThermalZoneVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ThermalZone >::iterator":

        return _openstudiomodelhvac.ThermalZoneVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ThermalZone >::iterator":

        return _openstudiomodelhvac.ThermalZoneVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ThermalZone >::reverse_iterator":

        return _openstudiomodelhvac.ThermalZoneVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ThermalZone >::reverse_iterator":

        return _openstudiomodelhvac.ThermalZoneVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ThermalZoneVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ThermalZone >::iterator":

        return _openstudiomodelhvac.ThermalZoneVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ThermalZoneVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ThermalZone') -> "void":

        return _openstudiomodelhvac.ThermalZoneVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ThermalZone >::value_type const &":

        return _openstudiomodelhvac.ThermalZoneVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ThermalZone >::value_type const &":

        return _openstudiomodelhvac.ThermalZoneVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ThermalZone >::size_type', x: 'ThermalZone') -> "void":

        return _openstudiomodelhvac.ThermalZoneVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ThermalZone >::size_type', x: 'ThermalZone') -> "void":

        return _openstudiomodelhvac.ThermalZoneVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalZoneVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ThermalZone >::size_type') -> "void":

        return _openstudiomodelhvac.ThermalZoneVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ThermalZone >::size_type":

        return _openstudiomodelhvac.ThermalZoneVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ThermalZoneVector

    __del__ = lambda self: None

ThermalZoneVector_swigregister = _openstudiomodelhvac.ThermalZoneVector_swigregister

ThermalZoneVector_swigregister(ThermalZoneVector)



class OptionalThermalZone(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalThermalZone, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalThermalZone, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalThermalZone(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalThermalZone_reset(self)



    def __ref__(self) -> "openstudio::model::ThermalZone":

        return _openstudiomodelhvac.OptionalThermalZone___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalThermalZone_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalThermalZone_isNull(self)



    def get(self) -> "openstudio::model::ThermalZone":

        return _openstudiomodelhvac.OptionalThermalZone_get(self)



    def set(self, t: 'ThermalZone') -> "void":

        return _openstudiomodelhvac.OptionalThermalZone_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalThermalZone

    __del__ = lambda self: None

OptionalThermalZone_swigregister = _openstudiomodelhvac.OptionalThermalZone_swigregister

OptionalThermalZone_swigregister(OptionalThermalZone)



class ThermostatSetpointDualSetpointVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermostatSetpointDualSetpointVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ThermostatSetpointDualSetpointVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::value_type":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::difference_type', j: 'std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::difference_type') -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint,std::allocator< openstudio::model::ThermostatSetpointDualSetpoint > > *":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::difference_type', j: 'std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::difference_type') -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::value_type const &":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector___setitem__(self, *args)



    def append(self, x: 'ThermostatSetpointDualSetpoint') -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_clear(self)



    def swap(self, v: 'ThermostatSetpointDualSetpointVector') -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::allocator_type":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::iterator":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::iterator":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::reverse_iterator":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::reverse_iterator":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::iterator":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ThermostatSetpointDualSetpointVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ThermostatSetpointDualSetpoint') -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::value_type const &":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::value_type const &":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type', x: 'ThermostatSetpointDualSetpoint') -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type', x: 'ThermostatSetpointDualSetpoint') -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type') -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint >::size_type":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ThermostatSetpointDualSetpointVector

    __del__ = lambda self: None

ThermostatSetpointDualSetpointVector_swigregister = _openstudiomodelhvac.ThermostatSetpointDualSetpointVector_swigregister

ThermostatSetpointDualSetpointVector_swigregister(ThermostatSetpointDualSetpointVector)



class OptionalThermostatSetpointDualSetpoint(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalThermostatSetpointDualSetpoint, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalThermostatSetpointDualSetpoint, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalThermostatSetpointDualSetpoint(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_reset(self)



    def __ref__(self) -> "openstudio::model::ThermostatSetpointDualSetpoint":

        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_isNull(self)



    def get(self) -> "openstudio::model::ThermostatSetpointDualSetpoint":

        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_get(self)



    def set(self, t: 'ThermostatSetpointDualSetpoint') -> "void":

        return _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalThermostatSetpointDualSetpoint

    __del__ = lambda self: None

OptionalThermostatSetpointDualSetpoint_swigregister = _openstudiomodelhvac.OptionalThermostatSetpointDualSetpoint_swigregister

OptionalThermostatSetpointDualSetpoint_swigregister(OptionalThermostatSetpointDualSetpoint)



class ZoneControlContaminantControllerVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneControlContaminantControllerVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneControlContaminantControllerVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::size_type":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::value_type":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneControlContaminantController >::difference_type', j: 'std::vector< openstudio::model::ZoneControlContaminantController >::difference_type') -> "std::vector< openstudio::model::ZoneControlContaminantController,std::allocator< openstudio::model::ZoneControlContaminantController > > *":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneControlContaminantController >::difference_type', j: 'std::vector< openstudio::model::ZoneControlContaminantController >::difference_type') -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneControlContaminantController >::value_type const &":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector___setitem__(self, *args)



    def append(self, x: 'ZoneControlContaminantController') -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::size_type":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_clear(self)



    def swap(self, v: 'ZoneControlContaminantControllerVector') -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::allocator_type":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::iterator":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::iterator":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::reverse_iterator":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::reverse_iterator":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ZoneControlContaminantController >::iterator":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ZoneControlContaminantControllerVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ZoneControlContaminantController') -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::value_type const &":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::value_type const &":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ZoneControlContaminantController >::size_type', x: 'ZoneControlContaminantController') -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ZoneControlContaminantController >::size_type', x: 'ZoneControlContaminantController') -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ZoneControlContaminantController >::size_type') -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ZoneControlContaminantController >::size_type":

        return _openstudiomodelhvac.ZoneControlContaminantControllerVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlContaminantControllerVector

    __del__ = lambda self: None

ZoneControlContaminantControllerVector_swigregister = _openstudiomodelhvac.ZoneControlContaminantControllerVector_swigregister

ZoneControlContaminantControllerVector_swigregister(ZoneControlContaminantControllerVector)



class OptionalZoneControlContaminantController(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneControlContaminantController, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneControlContaminantController, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalZoneControlContaminantController(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalZoneControlContaminantController_reset(self)



    def __ref__(self) -> "openstudio::model::ZoneControlContaminantController":

        return _openstudiomodelhvac.OptionalZoneControlContaminantController___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneControlContaminantController_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneControlContaminantController_isNull(self)



    def get(self) -> "openstudio::model::ZoneControlContaminantController":

        return _openstudiomodelhvac.OptionalZoneControlContaminantController_get(self)



    def set(self, t: 'ZoneControlContaminantController') -> "void":

        return _openstudiomodelhvac.OptionalZoneControlContaminantController_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneControlContaminantController

    __del__ = lambda self: None

OptionalZoneControlContaminantController_swigregister = _openstudiomodelhvac.OptionalZoneControlContaminantController_swigregister

OptionalZoneControlContaminantController_swigregister(OptionalZoneControlContaminantController)



class ZoneControlHumidistatVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneControlHumidistatVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneControlHumidistatVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ZoneControlHumidistatVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ZoneControlHumidistatVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::size_type":

        return _openstudiomodelhvac.ZoneControlHumidistatVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::value_type":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneControlHumidistat >::difference_type', j: 'std::vector< openstudio::model::ZoneControlHumidistat >::difference_type') -> "std::vector< openstudio::model::ZoneControlHumidistat,std::allocator< openstudio::model::ZoneControlHumidistat > > *":

        return _openstudiomodelhvac.ZoneControlHumidistatVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneControlHumidistat >::difference_type', j: 'std::vector< openstudio::model::ZoneControlHumidistat >::difference_type') -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneControlHumidistat >::value_type const &":

        return _openstudiomodelhvac.ZoneControlHumidistatVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector___setitem__(self, *args)



    def append(self, x: 'ZoneControlHumidistat') -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::size_type":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_clear(self)



    def swap(self, v: 'ZoneControlHumidistatVector') -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::allocator_type":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::iterator":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::iterator":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::reverse_iterator":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::reverse_iterator":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ZoneControlHumidistat >::iterator":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ZoneControlHumidistatVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ZoneControlHumidistat') -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::value_type const &":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::value_type const &":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ZoneControlHumidistat >::size_type', x: 'ZoneControlHumidistat') -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ZoneControlHumidistat >::size_type', x: 'ZoneControlHumidistat') -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ZoneControlHumidistat >::size_type') -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ZoneControlHumidistat >::size_type":

        return _openstudiomodelhvac.ZoneControlHumidistatVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlHumidistatVector

    __del__ = lambda self: None

ZoneControlHumidistatVector_swigregister = _openstudiomodelhvac.ZoneControlHumidistatVector_swigregister

ZoneControlHumidistatVector_swigregister(ZoneControlHumidistatVector)



class OptionalZoneControlHumidistat(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneControlHumidistat, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneControlHumidistat, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalZoneControlHumidistat(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalZoneControlHumidistat_reset(self)



    def __ref__(self) -> "openstudio::model::ZoneControlHumidistat":

        return _openstudiomodelhvac.OptionalZoneControlHumidistat___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneControlHumidistat_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneControlHumidistat_isNull(self)



    def get(self) -> "openstudio::model::ZoneControlHumidistat":

        return _openstudiomodelhvac.OptionalZoneControlHumidistat_get(self)



    def set(self, t: 'ZoneControlHumidistat') -> "void":

        return _openstudiomodelhvac.OptionalZoneControlHumidistat_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneControlHumidistat

    __del__ = lambda self: None

OptionalZoneControlHumidistat_swigregister = _openstudiomodelhvac.OptionalZoneControlHumidistat_swigregister

OptionalZoneControlHumidistat_swigregister(OptionalZoneControlHumidistat)



class ZoneControlThermostatStagedDualSetpointVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneControlThermostatStagedDualSetpointVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneControlThermostatStagedDualSetpointVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::value_type":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::difference_type', j: 'std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::difference_type') -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint,std::allocator< openstudio::model::ZoneControlThermostatStagedDualSetpoint > > *":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::difference_type', j: 'std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::difference_type') -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::value_type const &":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector___setitem__(self, *args)



    def append(self, x: 'ZoneControlThermostatStagedDualSetpoint') -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_clear(self)



    def swap(self, v: 'ZoneControlThermostatStagedDualSetpointVector') -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::allocator_type":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::iterator":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::iterator":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::reverse_iterator":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::reverse_iterator":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::iterator":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ZoneControlThermostatStagedDualSetpointVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ZoneControlThermostatStagedDualSetpoint') -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::value_type const &":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::value_type const &":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type', x: 'ZoneControlThermostatStagedDualSetpoint') -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type', x: 'ZoneControlThermostatStagedDualSetpoint') -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type') -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint >::size_type":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlThermostatStagedDualSetpointVector

    __del__ = lambda self: None

ZoneControlThermostatStagedDualSetpointVector_swigregister = _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpointVector_swigregister

ZoneControlThermostatStagedDualSetpointVector_swigregister(ZoneControlThermostatStagedDualSetpointVector)



class OptionalZoneControlThermostatStagedDualSetpoint(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneControlThermostatStagedDualSetpoint, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneControlThermostatStagedDualSetpoint, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalZoneControlThermostatStagedDualSetpoint(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_reset(self)



    def __ref__(self) -> "openstudio::model::ZoneControlThermostatStagedDualSetpoint":

        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_isNull(self)



    def get(self) -> "openstudio::model::ZoneControlThermostatStagedDualSetpoint":

        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_get(self)



    def set(self, t: 'ZoneControlThermostatStagedDualSetpoint') -> "void":

        return _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneControlThermostatStagedDualSetpoint

    __del__ = lambda self: None

OptionalZoneControlThermostatStagedDualSetpoint_swigregister = _openstudiomodelhvac.OptionalZoneControlThermostatStagedDualSetpoint_swigregister

OptionalZoneControlThermostatStagedDualSetpoint_swigregister(OptionalZoneControlThermostatStagedDualSetpoint)



class AirLoopHVACVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirLoopHVACVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVAC >::size_type":

        return _openstudiomodelhvac.AirLoopHVACVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirLoopHVAC >::value_type":

        return _openstudiomodelhvac.AirLoopHVACVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirLoopHVAC >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVAC >::difference_type') -> "std::vector< openstudio::model::AirLoopHVAC,std::allocator< openstudio::model::AirLoopHVAC > > *":

        return _openstudiomodelhvac.AirLoopHVACVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirLoopHVAC >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVAC >::difference_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVAC >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector___setitem__(self, *args)



    def append(self, x: 'AirLoopHVAC') -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirLoopHVAC >::size_type":

        return _openstudiomodelhvac.AirLoopHVACVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector_clear(self)



    def swap(self, v: 'AirLoopHVACVector') -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVAC >::allocator_type":

        return _openstudiomodelhvac.AirLoopHVACVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirLoopHVAC >::iterator":

        return _openstudiomodelhvac.AirLoopHVACVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirLoopHVAC >::iterator":

        return _openstudiomodelhvac.AirLoopHVACVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVAC >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirLoopHVAC >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVAC >::iterator":

        return _openstudiomodelhvac.AirLoopHVACVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirLoopHVACVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirLoopHVAC') -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirLoopHVAC >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirLoopHVAC >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirLoopHVAC >::size_type', x: 'AirLoopHVAC') -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirLoopHVAC >::size_type', x: 'AirLoopHVAC') -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirLoopHVAC >::size_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVAC >::size_type":

        return _openstudiomodelhvac.AirLoopHVACVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACVector

    __del__ = lambda self: None

AirLoopHVACVector_swigregister = _openstudiomodelhvac.AirLoopHVACVector_swigregister

AirLoopHVACVector_swigregister(AirLoopHVACVector)



class OptionalAirLoopHVAC(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirLoopHVAC, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirLoopHVAC, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirLoopHVAC(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVAC_reset(self)



    def __ref__(self) -> "openstudio::model::AirLoopHVAC":

        return _openstudiomodelhvac.OptionalAirLoopHVAC___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVAC_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVAC_isNull(self)



    def get(self) -> "openstudio::model::AirLoopHVAC":

        return _openstudiomodelhvac.OptionalAirLoopHVAC_get(self)



    def set(self, t: 'AirLoopHVAC') -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVAC_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVAC

    __del__ = lambda self: None

OptionalAirLoopHVAC_swigregister = _openstudiomodelhvac.OptionalAirLoopHVAC_swigregister

OptionalAirLoopHVAC_swigregister(OptionalAirLoopHVAC)



class SizingPlantVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SizingPlantVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SizingPlantVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SizingPlantVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SizingPlantVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SizingPlantVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SizingPlant >::size_type":

        return _openstudiomodelhvac.SizingPlantVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SizingPlant >::value_type":

        return _openstudiomodelhvac.SizingPlantVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SizingPlant >::difference_type', j: 'std::vector< openstudio::model::SizingPlant >::difference_type') -> "std::vector< openstudio::model::SizingPlant,std::allocator< openstudio::model::SizingPlant > > *":

        return _openstudiomodelhvac.SizingPlantVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SizingPlantVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SizingPlant >::difference_type', j: 'std::vector< openstudio::model::SizingPlant >::difference_type') -> "void":

        return _openstudiomodelhvac.SizingPlantVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SizingPlantVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SizingPlant >::value_type const &":

        return _openstudiomodelhvac.SizingPlantVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SizingPlantVector___setitem__(self, *args)



    def append(self, x: 'SizingPlant') -> "void":

        return _openstudiomodelhvac.SizingPlantVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SizingPlantVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SizingPlant >::size_type":

        return _openstudiomodelhvac.SizingPlantVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SizingPlantVector_clear(self)



    def swap(self, v: 'SizingPlantVector') -> "void":

        return _openstudiomodelhvac.SizingPlantVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SizingPlant >::allocator_type":

        return _openstudiomodelhvac.SizingPlantVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SizingPlant >::iterator":

        return _openstudiomodelhvac.SizingPlantVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SizingPlant >::iterator":

        return _openstudiomodelhvac.SizingPlantVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SizingPlant >::reverse_iterator":

        return _openstudiomodelhvac.SizingPlantVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SizingPlant >::reverse_iterator":

        return _openstudiomodelhvac.SizingPlantVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SizingPlantVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SizingPlant >::iterator":

        return _openstudiomodelhvac.SizingPlantVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SizingPlantVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SizingPlant') -> "void":

        return _openstudiomodelhvac.SizingPlantVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SizingPlant >::value_type const &":

        return _openstudiomodelhvac.SizingPlantVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SizingPlant >::value_type const &":

        return _openstudiomodelhvac.SizingPlantVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SizingPlant >::size_type', x: 'SizingPlant') -> "void":

        return _openstudiomodelhvac.SizingPlantVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SizingPlant >::size_type', x: 'SizingPlant') -> "void":

        return _openstudiomodelhvac.SizingPlantVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SizingPlantVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SizingPlant >::size_type') -> "void":

        return _openstudiomodelhvac.SizingPlantVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SizingPlant >::size_type":

        return _openstudiomodelhvac.SizingPlantVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SizingPlantVector

    __del__ = lambda self: None

SizingPlantVector_swigregister = _openstudiomodelhvac.SizingPlantVector_swigregister

SizingPlantVector_swigregister(SizingPlantVector)



class OptionalSizingPlant(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSizingPlant, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSizingPlant, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSizingPlant(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSizingPlant_reset(self)



    def __ref__(self) -> "openstudio::model::SizingPlant":

        return _openstudiomodelhvac.OptionalSizingPlant___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSizingPlant_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSizingPlant_isNull(self)



    def get(self) -> "openstudio::model::SizingPlant":

        return _openstudiomodelhvac.OptionalSizingPlant_get(self)



    def set(self, t: 'SizingPlant') -> "void":

        return _openstudiomodelhvac.OptionalSizingPlant_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSizingPlant

    __del__ = lambda self: None

OptionalSizingPlant_swigregister = _openstudiomodelhvac.OptionalSizingPlant_swigregister

OptionalSizingPlant_swigregister(OptionalSizingPlant)



class PlantLoopVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantLoopVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PlantLoopVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.PlantLoopVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.PlantLoopVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.PlantLoopVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::PlantLoop >::size_type":

        return _openstudiomodelhvac.PlantLoopVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::PlantLoop >::value_type":

        return _openstudiomodelhvac.PlantLoopVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::PlantLoop >::difference_type', j: 'std::vector< openstudio::model::PlantLoop >::difference_type') -> "std::vector< openstudio::model::PlantLoop,std::allocator< openstudio::model::PlantLoop > > *":

        return _openstudiomodelhvac.PlantLoopVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantLoopVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::PlantLoop >::difference_type', j: 'std::vector< openstudio::model::PlantLoop >::difference_type') -> "void":

        return _openstudiomodelhvac.PlantLoopVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantLoopVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantLoop >::value_type const &":

        return _openstudiomodelhvac.PlantLoopVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantLoopVector___setitem__(self, *args)



    def append(self, x: 'PlantLoop') -> "void":

        return _openstudiomodelhvac.PlantLoopVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.PlantLoopVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::PlantLoop >::size_type":

        return _openstudiomodelhvac.PlantLoopVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.PlantLoopVector_clear(self)



    def swap(self, v: 'PlantLoopVector') -> "void":

        return _openstudiomodelhvac.PlantLoopVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::PlantLoop >::allocator_type":

        return _openstudiomodelhvac.PlantLoopVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::PlantLoop >::iterator":

        return _openstudiomodelhvac.PlantLoopVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::PlantLoop >::iterator":

        return _openstudiomodelhvac.PlantLoopVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::PlantLoop >::reverse_iterator":

        return _openstudiomodelhvac.PlantLoopVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::PlantLoop >::reverse_iterator":

        return _openstudiomodelhvac.PlantLoopVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.PlantLoopVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::PlantLoop >::iterator":

        return _openstudiomodelhvac.PlantLoopVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_PlantLoopVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PlantLoop') -> "void":

        return _openstudiomodelhvac.PlantLoopVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::PlantLoop >::value_type const &":

        return _openstudiomodelhvac.PlantLoopVector_front(self)



    def back(self) -> "std::vector< openstudio::model::PlantLoop >::value_type const &":

        return _openstudiomodelhvac.PlantLoopVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::PlantLoop >::size_type', x: 'PlantLoop') -> "void":

        return _openstudiomodelhvac.PlantLoopVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::PlantLoop >::size_type', x: 'PlantLoop') -> "void":

        return _openstudiomodelhvac.PlantLoopVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.PlantLoopVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::PlantLoop >::size_type') -> "void":

        return _openstudiomodelhvac.PlantLoopVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::PlantLoop >::size_type":

        return _openstudiomodelhvac.PlantLoopVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_PlantLoopVector

    __del__ = lambda self: None

PlantLoopVector_swigregister = _openstudiomodelhvac.PlantLoopVector_swigregister

PlantLoopVector_swigregister(PlantLoopVector)



class OptionalPlantLoop(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantLoop, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantLoop, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalPlantLoop(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalPlantLoop_reset(self)



    def __ref__(self) -> "openstudio::model::PlantLoop":

        return _openstudiomodelhvac.OptionalPlantLoop___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalPlantLoop_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalPlantLoop_isNull(self)



    def get(self) -> "openstudio::model::PlantLoop":

        return _openstudiomodelhvac.OptionalPlantLoop_get(self)



    def set(self, t: 'PlantLoop') -> "void":

        return _openstudiomodelhvac.OptionalPlantLoop_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPlantLoop

    __del__ = lambda self: None

OptionalPlantLoop_swigregister = _openstudiomodelhvac.OptionalPlantLoop_swigregister

OptionalPlantLoop_swigregister(OptionalPlantLoop)



class PlantEquipmentOperationSchemeVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationSchemeVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationSchemeVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::value_type":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationScheme >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationScheme >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationScheme,std::allocator< openstudio::model::PlantEquipmentOperationScheme > > *":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationScheme >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationScheme >::difference_type') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::value_type const &":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector___setitem__(self, *args)



    def append(self, x: 'PlantEquipmentOperationScheme') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_clear(self)



    def swap(self, v: 'PlantEquipmentOperationSchemeVector') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::allocator_type":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::reverse_iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::reverse_iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_PlantEquipmentOperationSchemeVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PlantEquipmentOperationScheme') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::value_type const &":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_front(self)



    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::value_type const &":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type', x: 'PlantEquipmentOperationScheme') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type', x: 'PlantEquipmentOperationScheme') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationScheme >::size_type":

        return _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_PlantEquipmentOperationSchemeVector

    __del__ = lambda self: None

PlantEquipmentOperationSchemeVector_swigregister = _openstudiomodelhvac.PlantEquipmentOperationSchemeVector_swigregister

PlantEquipmentOperationSchemeVector_swigregister(PlantEquipmentOperationSchemeVector)



class OptionalPlantEquipmentOperationScheme(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationScheme, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationScheme, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalPlantEquipmentOperationScheme(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_reset(self)



    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationScheme":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_isNull(self)



    def get(self) -> "openstudio::model::PlantEquipmentOperationScheme":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_get(self)



    def set(self, t: 'PlantEquipmentOperationScheme') -> "void":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPlantEquipmentOperationScheme

    __del__ = lambda self: None

OptionalPlantEquipmentOperationScheme_swigregister = _openstudiomodelhvac.OptionalPlantEquipmentOperationScheme_swigregister

OptionalPlantEquipmentOperationScheme_swigregister(OptionalPlantEquipmentOperationScheme)



class PlantEquipmentOperationRangeBasedSchemeVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationRangeBasedSchemeVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationRangeBasedSchemeVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::value_type":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::difference_type') -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme,std::allocator< openstudio::model::PlantEquipmentOperationRangeBasedScheme > > *":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::difference_type', j: 'std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::difference_type') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::value_type const &":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector___setitem__(self, *args)



    def append(self, x: 'PlantEquipmentOperationRangeBasedScheme') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_clear(self)



    def swap(self, v: 'PlantEquipmentOperationRangeBasedSchemeVector') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::allocator_type":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::reverse_iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::reverse_iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::iterator":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_PlantEquipmentOperationRangeBasedSchemeVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PlantEquipmentOperationRangeBasedScheme') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::value_type const &":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_front(self)



    def back(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::value_type const &":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type', x: 'PlantEquipmentOperationRangeBasedScheme') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type', x: 'PlantEquipmentOperationRangeBasedScheme') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type') -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme >::size_type":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_PlantEquipmentOperationRangeBasedSchemeVector

    __del__ = lambda self: None

PlantEquipmentOperationRangeBasedSchemeVector_swigregister = _openstudiomodelhvac.PlantEquipmentOperationRangeBasedSchemeVector_swigregister

PlantEquipmentOperationRangeBasedSchemeVector_swigregister(PlantEquipmentOperationRangeBasedSchemeVector)



class OptionalPlantEquipmentOperationRangeBasedScheme(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantEquipmentOperationRangeBasedScheme, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantEquipmentOperationRangeBasedScheme, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalPlantEquipmentOperationRangeBasedScheme(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_reset(self)



    def __ref__(self) -> "openstudio::model::PlantEquipmentOperationRangeBasedScheme":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_isNull(self)



    def get(self) -> "openstudio::model::PlantEquipmentOperationRangeBasedScheme":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_get(self)



    def set(self, t: 'PlantEquipmentOperationRangeBasedScheme') -> "void":

        return _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPlantEquipmentOperationRangeBasedScheme

    __del__ = lambda self: None

OptionalPlantEquipmentOperationRangeBasedScheme_swigregister = _openstudiomodelhvac.OptionalPlantEquipmentOperationRangeBasedScheme_swigregister

OptionalPlantEquipmentOperationRangeBasedScheme_swigregister(OptionalPlantEquipmentOperationRangeBasedScheme)



class PlantComponentUserDefinedVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantComponentUserDefinedVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PlantComponentUserDefinedVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::size_type":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::value_type":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::PlantComponentUserDefined >::difference_type', j: 'std::vector< openstudio::model::PlantComponentUserDefined >::difference_type') -> "std::vector< openstudio::model::PlantComponentUserDefined,std::allocator< openstudio::model::PlantComponentUserDefined > > *":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::PlantComponentUserDefined >::difference_type', j: 'std::vector< openstudio::model::PlantComponentUserDefined >::difference_type') -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::PlantComponentUserDefined >::value_type const &":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector___setitem__(self, *args)



    def append(self, x: 'PlantComponentUserDefined') -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::size_type":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_clear(self)



    def swap(self, v: 'PlantComponentUserDefinedVector') -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::allocator_type":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::iterator":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::iterator":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::reverse_iterator":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::reverse_iterator":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::PlantComponentUserDefined >::iterator":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_PlantComponentUserDefinedVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PlantComponentUserDefined') -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::value_type const &":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_front(self)



    def back(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::value_type const &":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::PlantComponentUserDefined >::size_type', x: 'PlantComponentUserDefined') -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::PlantComponentUserDefined >::size_type', x: 'PlantComponentUserDefined') -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::PlantComponentUserDefined >::size_type') -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::PlantComponentUserDefined >::size_type":

        return _openstudiomodelhvac.PlantComponentUserDefinedVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_PlantComponentUserDefinedVector

    __del__ = lambda self: None

PlantComponentUserDefinedVector_swigregister = _openstudiomodelhvac.PlantComponentUserDefinedVector_swigregister

PlantComponentUserDefinedVector_swigregister(PlantComponentUserDefinedVector)



class OptionalPlantComponentUserDefined(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalPlantComponentUserDefined, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalPlantComponentUserDefined, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalPlantComponentUserDefined(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_reset(self)



    def __ref__(self) -> "openstudio::model::PlantComponentUserDefined":

        return _openstudiomodelhvac.OptionalPlantComponentUserDefined___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_isNull(self)



    def get(self) -> "openstudio::model::PlantComponentUserDefined":

        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_get(self)



    def set(self, t: 'PlantComponentUserDefined') -> "void":

        return _openstudiomodelhvac.OptionalPlantComponentUserDefined_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalPlantComponentUserDefined

    __del__ = lambda self: None

OptionalPlantComponentUserDefined_swigregister = _openstudiomodelhvac.OptionalPlantComponentUserDefined_swigregister

OptionalPlantComponentUserDefined_swigregister(OptionalPlantComponentUserDefined)



class AirLoopHVACOutdoorAirSystemVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACOutdoorAirSystemVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACOutdoorAirSystemVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::value_type":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::difference_type') -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem,std::allocator< openstudio::model::AirLoopHVACOutdoorAirSystem > > *":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::difference_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector___setitem__(self, *args)



    def append(self, x: 'AirLoopHVACOutdoorAirSystem') -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_clear(self)



    def swap(self, v: 'AirLoopHVACOutdoorAirSystemVector') -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::allocator_type":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::iterator":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::iterator":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::iterator":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirLoopHVACOutdoorAirSystemVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirLoopHVACOutdoorAirSystem') -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type', x: 'AirLoopHVACOutdoorAirSystem') -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type', x: 'AirLoopHVACOutdoorAirSystem') -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem >::size_type":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACOutdoorAirSystemVector

    __del__ = lambda self: None

AirLoopHVACOutdoorAirSystemVector_swigregister = _openstudiomodelhvac.AirLoopHVACOutdoorAirSystemVector_swigregister

AirLoopHVACOutdoorAirSystemVector_swigregister(AirLoopHVACOutdoorAirSystemVector)



class OptionalAirLoopHVACOutdoorAirSystem(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirLoopHVACOutdoorAirSystem, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirLoopHVACOutdoorAirSystem, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirLoopHVACOutdoorAirSystem(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_reset(self)



    def __ref__(self) -> "openstudio::model::AirLoopHVACOutdoorAirSystem":

        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_isNull(self)



    def get(self) -> "openstudio::model::AirLoopHVACOutdoorAirSystem":

        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_get(self)



    def set(self, t: 'AirLoopHVACOutdoorAirSystem') -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACOutdoorAirSystem

    __del__ = lambda self: None

OptionalAirLoopHVACOutdoorAirSystem_swigregister = _openstudiomodelhvac.OptionalAirLoopHVACOutdoorAirSystem_swigregister

OptionalAirLoopHVACOutdoorAirSystem_swigregister(OptionalAirLoopHVACOutdoorAirSystem)



class ControllerMechanicalVentilationVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerMechanicalVentilationVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ControllerMechanicalVentilationVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::value_type":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ControllerMechanicalVentilation >::difference_type', j: 'std::vector< openstudio::model::ControllerMechanicalVentilation >::difference_type') -> "std::vector< openstudio::model::ControllerMechanicalVentilation,std::allocator< openstudio::model::ControllerMechanicalVentilation > > *":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ControllerMechanicalVentilation >::difference_type', j: 'std::vector< openstudio::model::ControllerMechanicalVentilation >::difference_type') -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::value_type const &":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector___setitem__(self, *args)



    def append(self, x: 'ControllerMechanicalVentilation') -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_clear(self)



    def swap(self, v: 'ControllerMechanicalVentilationVector') -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::allocator_type":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::iterator":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::iterator":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::reverse_iterator":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::reverse_iterator":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::iterator":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ControllerMechanicalVentilationVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ControllerMechanicalVentilation') -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::value_type const &":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::value_type const &":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type', x: 'ControllerMechanicalVentilation') -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type', x: 'ControllerMechanicalVentilation') -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type') -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ControllerMechanicalVentilation >::size_type":

        return _openstudiomodelhvac.ControllerMechanicalVentilationVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerMechanicalVentilationVector

    __del__ = lambda self: None

ControllerMechanicalVentilationVector_swigregister = _openstudiomodelhvac.ControllerMechanicalVentilationVector_swigregister

ControllerMechanicalVentilationVector_swigregister(ControllerMechanicalVentilationVector)



class OptionalControllerMechanicalVentilation(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalControllerMechanicalVentilation, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalControllerMechanicalVentilation, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalControllerMechanicalVentilation(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_reset(self)



    def __ref__(self) -> "openstudio::model::ControllerMechanicalVentilation":

        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_isNull(self)



    def get(self) -> "openstudio::model::ControllerMechanicalVentilation":

        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_get(self)



    def set(self, t: 'ControllerMechanicalVentilation') -> "void":

        return _openstudiomodelhvac.OptionalControllerMechanicalVentilation_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalControllerMechanicalVentilation

    __del__ = lambda self: None

OptionalControllerMechanicalVentilation_swigregister = _openstudiomodelhvac.OptionalControllerMechanicalVentilation_swigregister

OptionalControllerMechanicalVentilation_swigregister(OptionalControllerMechanicalVentilation)



class ControllerOutdoorAirVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerOutdoorAirVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ControllerOutdoorAirVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAirVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAirVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::size_type":

        return _openstudiomodelhvac.ControllerOutdoorAirVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::value_type":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ControllerOutdoorAir >::difference_type', j: 'std::vector< openstudio::model::ControllerOutdoorAir >::difference_type') -> "std::vector< openstudio::model::ControllerOutdoorAir,std::allocator< openstudio::model::ControllerOutdoorAir > > *":

        return _openstudiomodelhvac.ControllerOutdoorAirVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ControllerOutdoorAir >::difference_type', j: 'std::vector< openstudio::model::ControllerOutdoorAir >::difference_type') -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ControllerOutdoorAir >::value_type const &":

        return _openstudiomodelhvac.ControllerOutdoorAirVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector___setitem__(self, *args)



    def append(self, x: 'ControllerOutdoorAir') -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::size_type":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_clear(self)



    def swap(self, v: 'ControllerOutdoorAirVector') -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::allocator_type":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::iterator":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::iterator":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::reverse_iterator":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::reverse_iterator":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ControllerOutdoorAir >::iterator":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ControllerOutdoorAirVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ControllerOutdoorAir') -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::value_type const &":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::value_type const &":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ControllerOutdoorAir >::size_type', x: 'ControllerOutdoorAir') -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ControllerOutdoorAir >::size_type', x: 'ControllerOutdoorAir') -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ControllerOutdoorAir >::size_type') -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ControllerOutdoorAir >::size_type":

        return _openstudiomodelhvac.ControllerOutdoorAirVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerOutdoorAirVector

    __del__ = lambda self: None

ControllerOutdoorAirVector_swigregister = _openstudiomodelhvac.ControllerOutdoorAirVector_swigregister

ControllerOutdoorAirVector_swigregister(ControllerOutdoorAirVector)



class OptionalControllerOutdoorAir(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalControllerOutdoorAir, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalControllerOutdoorAir, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalControllerOutdoorAir(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalControllerOutdoorAir_reset(self)



    def __ref__(self) -> "openstudio::model::ControllerOutdoorAir":

        return _openstudiomodelhvac.OptionalControllerOutdoorAir___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalControllerOutdoorAir_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalControllerOutdoorAir_isNull(self)



    def get(self) -> "openstudio::model::ControllerOutdoorAir":

        return _openstudiomodelhvac.OptionalControllerOutdoorAir_get(self)



    def set(self, t: 'ControllerOutdoorAir') -> "void":

        return _openstudiomodelhvac.OptionalControllerOutdoorAir_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalControllerOutdoorAir

    __del__ = lambda self: None

OptionalControllerOutdoorAir_swigregister = _openstudiomodelhvac.OptionalControllerOutdoorAir_swigregister

OptionalControllerOutdoorAir_swigregister(OptionalControllerOutdoorAir)



class ControllerWaterCoilVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerWaterCoilVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ControllerWaterCoilVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ControllerWaterCoilVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoilVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoilVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::size_type":

        return _openstudiomodelhvac.ControllerWaterCoilVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::value_type":

        return _openstudiomodelhvac.ControllerWaterCoilVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ControllerWaterCoil >::difference_type', j: 'std::vector< openstudio::model::ControllerWaterCoil >::difference_type') -> "std::vector< openstudio::model::ControllerWaterCoil,std::allocator< openstudio::model::ControllerWaterCoil > > *":

        return _openstudiomodelhvac.ControllerWaterCoilVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ControllerWaterCoil >::difference_type', j: 'std::vector< openstudio::model::ControllerWaterCoil >::difference_type') -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ControllerWaterCoil >::value_type const &":

        return _openstudiomodelhvac.ControllerWaterCoilVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector___setitem__(self, *args)



    def append(self, x: 'ControllerWaterCoil') -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoilVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::size_type":

        return _openstudiomodelhvac.ControllerWaterCoilVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector_clear(self)



    def swap(self, v: 'ControllerWaterCoilVector') -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::allocator_type":

        return _openstudiomodelhvac.ControllerWaterCoilVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::iterator":

        return _openstudiomodelhvac.ControllerWaterCoilVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::iterator":

        return _openstudiomodelhvac.ControllerWaterCoilVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::reverse_iterator":

        return _openstudiomodelhvac.ControllerWaterCoilVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::reverse_iterator":

        return _openstudiomodelhvac.ControllerWaterCoilVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ControllerWaterCoil >::iterator":

        return _openstudiomodelhvac.ControllerWaterCoilVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ControllerWaterCoilVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ControllerWaterCoil') -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::value_type const &":

        return _openstudiomodelhvac.ControllerWaterCoilVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::value_type const &":

        return _openstudiomodelhvac.ControllerWaterCoilVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ControllerWaterCoil >::size_type', x: 'ControllerWaterCoil') -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ControllerWaterCoil >::size_type', x: 'ControllerWaterCoil') -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ControllerWaterCoil >::size_type') -> "void":

        return _openstudiomodelhvac.ControllerWaterCoilVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ControllerWaterCoil >::size_type":

        return _openstudiomodelhvac.ControllerWaterCoilVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerWaterCoilVector

    __del__ = lambda self: None

ControllerWaterCoilVector_swigregister = _openstudiomodelhvac.ControllerWaterCoilVector_swigregister

ControllerWaterCoilVector_swigregister(ControllerWaterCoilVector)



class OptionalControllerWaterCoil(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalControllerWaterCoil, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalControllerWaterCoil, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalControllerWaterCoil(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalControllerWaterCoil_reset(self)



    def __ref__(self) -> "openstudio::model::ControllerWaterCoil":

        return _openstudiomodelhvac.OptionalControllerWaterCoil___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalControllerWaterCoil_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalControllerWaterCoil_isNull(self)



    def get(self) -> "openstudio::model::ControllerWaterCoil":

        return _openstudiomodelhvac.OptionalControllerWaterCoil_get(self)



    def set(self, t: 'ControllerWaterCoil') -> "void":

        return _openstudiomodelhvac.OptionalControllerWaterCoil_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalControllerWaterCoil

    __del__ = lambda self: None

OptionalControllerWaterCoil_swigregister = _openstudiomodelhvac.OptionalControllerWaterCoil_swigregister

OptionalControllerWaterCoil_swigregister(OptionalControllerWaterCoil)



class MixerVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, MixerVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, MixerVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.MixerVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.MixerVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.MixerVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::Mixer >::size_type":

        return _openstudiomodelhvac.MixerVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::Mixer >::value_type":

        return _openstudiomodelhvac.MixerVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::Mixer >::difference_type', j: 'std::vector< openstudio::model::Mixer >::difference_type') -> "std::vector< openstudio::model::Mixer,std::allocator< openstudio::model::Mixer > > *":

        return _openstudiomodelhvac.MixerVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.MixerVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::Mixer >::difference_type', j: 'std::vector< openstudio::model::Mixer >::difference_type') -> "void":

        return _openstudiomodelhvac.MixerVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.MixerVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::Mixer >::value_type const &":

        return _openstudiomodelhvac.MixerVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.MixerVector___setitem__(self, *args)



    def append(self, x: 'Mixer') -> "void":

        return _openstudiomodelhvac.MixerVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.MixerVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::Mixer >::size_type":

        return _openstudiomodelhvac.MixerVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.MixerVector_clear(self)



    def swap(self, v: 'MixerVector') -> "void":

        return _openstudiomodelhvac.MixerVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::Mixer >::allocator_type":

        return _openstudiomodelhvac.MixerVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::Mixer >::iterator":

        return _openstudiomodelhvac.MixerVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::Mixer >::iterator":

        return _openstudiomodelhvac.MixerVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::Mixer >::reverse_iterator":

        return _openstudiomodelhvac.MixerVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::Mixer >::reverse_iterator":

        return _openstudiomodelhvac.MixerVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.MixerVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::Mixer >::iterator":

        return _openstudiomodelhvac.MixerVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_MixerVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Mixer') -> "void":

        return _openstudiomodelhvac.MixerVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::Mixer >::value_type const &":

        return _openstudiomodelhvac.MixerVector_front(self)



    def back(self) -> "std::vector< openstudio::model::Mixer >::value_type const &":

        return _openstudiomodelhvac.MixerVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::Mixer >::size_type', x: 'Mixer') -> "void":

        return _openstudiomodelhvac.MixerVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::Mixer >::size_type', x: 'Mixer') -> "void":

        return _openstudiomodelhvac.MixerVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.MixerVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::Mixer >::size_type') -> "void":

        return _openstudiomodelhvac.MixerVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::Mixer >::size_type":

        return _openstudiomodelhvac.MixerVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_MixerVector

    __del__ = lambda self: None

MixerVector_swigregister = _openstudiomodelhvac.MixerVector_swigregister

MixerVector_swigregister(MixerVector)



class OptionalMixer(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMixer, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMixer, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalMixer(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalMixer_reset(self)



    def __ref__(self) -> "openstudio::model::Mixer":

        return _openstudiomodelhvac.OptionalMixer___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalMixer_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalMixer_isNull(self)



    def get(self) -> "openstudio::model::Mixer":

        return _openstudiomodelhvac.OptionalMixer_get(self)



    def set(self, t: 'Mixer') -> "void":

        return _openstudiomodelhvac.OptionalMixer_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalMixer

    __del__ = lambda self: None

OptionalMixer_swigregister = _openstudiomodelhvac.OptionalMixer_swigregister

OptionalMixer_swigregister(OptionalMixer)



class AirLoopHVACReturnPlenumVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACReturnPlenumVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACReturnPlenumVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::value_type":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACReturnPlenum >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACReturnPlenum >::difference_type') -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum,std::allocator< openstudio::model::AirLoopHVACReturnPlenum > > *":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACReturnPlenum >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACReturnPlenum >::difference_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector___setitem__(self, *args)



    def append(self, x: 'AirLoopHVACReturnPlenum') -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_clear(self)



    def swap(self, v: 'AirLoopHVACReturnPlenumVector') -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::allocator_type":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::iterator":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::iterator":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::iterator":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirLoopHVACReturnPlenumVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirLoopHVACReturnPlenum') -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type', x: 'AirLoopHVACReturnPlenum') -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type', x: 'AirLoopHVACReturnPlenum') -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum >::size_type":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACReturnPlenumVector

    __del__ = lambda self: None

AirLoopHVACReturnPlenumVector_swigregister = _openstudiomodelhvac.AirLoopHVACReturnPlenumVector_swigregister

AirLoopHVACReturnPlenumVector_swigregister(AirLoopHVACReturnPlenumVector)



class OptionalAirLoopHVACReturnPlenum(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirLoopHVACReturnPlenum, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirLoopHVACReturnPlenum, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirLoopHVACReturnPlenum(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_reset(self)



    def __ref__(self) -> "openstudio::model::AirLoopHVACReturnPlenum":

        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_isNull(self)



    def get(self) -> "openstudio::model::AirLoopHVACReturnPlenum":

        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_get(self)



    def set(self, t: 'AirLoopHVACReturnPlenum') -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACReturnPlenum

    __del__ = lambda self: None

OptionalAirLoopHVACReturnPlenum_swigregister = _openstudiomodelhvac.OptionalAirLoopHVACReturnPlenum_swigregister

OptionalAirLoopHVACReturnPlenum_swigregister(OptionalAirLoopHVACReturnPlenum)



class AirLoopHVACZoneMixerVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACZoneMixerVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACZoneMixerVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::value_type":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACZoneMixer >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACZoneMixer >::difference_type') -> "std::vector< openstudio::model::AirLoopHVACZoneMixer,std::allocator< openstudio::model::AirLoopHVACZoneMixer > > *":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACZoneMixer >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACZoneMixer >::difference_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector___setitem__(self, *args)



    def append(self, x: 'AirLoopHVACZoneMixer') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_clear(self)



    def swap(self, v: 'AirLoopHVACZoneMixerVector') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::allocator_type":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirLoopHVACZoneMixerVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirLoopHVACZoneMixer') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type', x: 'AirLoopHVACZoneMixer') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type', x: 'AirLoopHVACZoneMixer') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACZoneMixer >::size_type":

        return _openstudiomodelhvac.AirLoopHVACZoneMixerVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACZoneMixerVector

    __del__ = lambda self: None

AirLoopHVACZoneMixerVector_swigregister = _openstudiomodelhvac.AirLoopHVACZoneMixerVector_swigregister

AirLoopHVACZoneMixerVector_swigregister(AirLoopHVACZoneMixerVector)



class OptionalAirLoopHVACZoneMixer(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirLoopHVACZoneMixer, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirLoopHVACZoneMixer, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirLoopHVACZoneMixer(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_reset(self)



    def __ref__(self) -> "openstudio::model::AirLoopHVACZoneMixer":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_isNull(self)



    def get(self) -> "openstudio::model::AirLoopHVACZoneMixer":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_get(self)



    def set(self, t: 'AirLoopHVACZoneMixer') -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACZoneMixer

    __del__ = lambda self: None

OptionalAirLoopHVACZoneMixer_swigregister = _openstudiomodelhvac.OptionalAirLoopHVACZoneMixer_swigregister

OptionalAirLoopHVACZoneMixer_swigregister(OptionalAirLoopHVACZoneMixer)



class ConnectorMixerVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectorMixerVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ConnectorMixerVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ConnectorMixerVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ConnectorMixerVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ConnectorMixerVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ConnectorMixer >::size_type":

        return _openstudiomodelhvac.ConnectorMixerVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ConnectorMixer >::value_type":

        return _openstudiomodelhvac.ConnectorMixerVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ConnectorMixer >::difference_type', j: 'std::vector< openstudio::model::ConnectorMixer >::difference_type') -> "std::vector< openstudio::model::ConnectorMixer,std::allocator< openstudio::model::ConnectorMixer > > *":

        return _openstudiomodelhvac.ConnectorMixerVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ConnectorMixer >::difference_type', j: 'std::vector< openstudio::model::ConnectorMixer >::difference_type') -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ConnectorMixer >::value_type const &":

        return _openstudiomodelhvac.ConnectorMixerVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector___setitem__(self, *args)



    def append(self, x: 'ConnectorMixer') -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ConnectorMixerVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ConnectorMixer >::size_type":

        return _openstudiomodelhvac.ConnectorMixerVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector_clear(self)



    def swap(self, v: 'ConnectorMixerVector') -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ConnectorMixer >::allocator_type":

        return _openstudiomodelhvac.ConnectorMixerVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ConnectorMixer >::iterator":

        return _openstudiomodelhvac.ConnectorMixerVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ConnectorMixer >::iterator":

        return _openstudiomodelhvac.ConnectorMixerVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ConnectorMixer >::reverse_iterator":

        return _openstudiomodelhvac.ConnectorMixerVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ConnectorMixer >::reverse_iterator":

        return _openstudiomodelhvac.ConnectorMixerVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ConnectorMixer >::iterator":

        return _openstudiomodelhvac.ConnectorMixerVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ConnectorMixerVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ConnectorMixer') -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ConnectorMixer >::value_type const &":

        return _openstudiomodelhvac.ConnectorMixerVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ConnectorMixer >::value_type const &":

        return _openstudiomodelhvac.ConnectorMixerVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ConnectorMixer >::size_type', x: 'ConnectorMixer') -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ConnectorMixer >::size_type', x: 'ConnectorMixer') -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ConnectorMixer >::size_type') -> "void":

        return _openstudiomodelhvac.ConnectorMixerVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ConnectorMixer >::size_type":

        return _openstudiomodelhvac.ConnectorMixerVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ConnectorMixerVector

    __del__ = lambda self: None

ConnectorMixerVector_swigregister = _openstudiomodelhvac.ConnectorMixerVector_swigregister

ConnectorMixerVector_swigregister(ConnectorMixerVector)



class OptionalConnectorMixer(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalConnectorMixer, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalConnectorMixer, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalConnectorMixer(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalConnectorMixer_reset(self)



    def __ref__(self) -> "openstudio::model::ConnectorMixer":

        return _openstudiomodelhvac.OptionalConnectorMixer___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalConnectorMixer_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalConnectorMixer_isNull(self)



    def get(self) -> "openstudio::model::ConnectorMixer":

        return _openstudiomodelhvac.OptionalConnectorMixer_get(self)



    def set(self, t: 'ConnectorMixer') -> "void":

        return _openstudiomodelhvac.OptionalConnectorMixer_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalConnectorMixer

    __del__ = lambda self: None

OptionalConnectorMixer_swigregister = _openstudiomodelhvac.OptionalConnectorMixer_swigregister

OptionalConnectorMixer_swigregister(OptionalConnectorMixer)



class AvailabilityManagerAssignmentListVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AvailabilityManagerAssignmentListVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AvailabilityManagerAssignmentListVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::value_type":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AvailabilityManagerAssignmentList >::difference_type', j: 'std::vector< openstudio::model::AvailabilityManagerAssignmentList >::difference_type') -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList,std::allocator< openstudio::model::AvailabilityManagerAssignmentList > > *":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AvailabilityManagerAssignmentList >::difference_type', j: 'std::vector< openstudio::model::AvailabilityManagerAssignmentList >::difference_type') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::value_type const &":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector___setitem__(self, *args)



    def append(self, x: 'AvailabilityManagerAssignmentList') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_clear(self)



    def swap(self, v: 'AvailabilityManagerAssignmentListVector') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::allocator_type":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::iterator":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::iterator":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::reverse_iterator":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::reverse_iterator":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::iterator":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AvailabilityManagerAssignmentListVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AvailabilityManagerAssignmentList') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::value_type const &":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::value_type const &":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type', x: 'AvailabilityManagerAssignmentList') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type', x: 'AvailabilityManagerAssignmentList') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList >::size_type":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AvailabilityManagerAssignmentListVector

    __del__ = lambda self: None

AvailabilityManagerAssignmentListVector_swigregister = _openstudiomodelhvac.AvailabilityManagerAssignmentListVector_swigregister

AvailabilityManagerAssignmentListVector_swigregister(AvailabilityManagerAssignmentListVector)



class OptionalAvailabilityManagerAssignmentList(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAvailabilityManagerAssignmentList, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAvailabilityManagerAssignmentList, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAvailabilityManagerAssignmentList(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_reset(self)



    def __ref__(self) -> "openstudio::model::AvailabilityManagerAssignmentList":

        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_isNull(self)



    def get(self) -> "openstudio::model::AvailabilityManagerAssignmentList":

        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_get(self)



    def set(self, t: 'AvailabilityManagerAssignmentList') -> "void":

        return _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAvailabilityManagerAssignmentList

    __del__ = lambda self: None

OptionalAvailabilityManagerAssignmentList_swigregister = _openstudiomodelhvac.OptionalAvailabilityManagerAssignmentList_swigregister

OptionalAvailabilityManagerAssignmentList_swigregister(OptionalAvailabilityManagerAssignmentList)



class AvailabilityManagerVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AvailabilityManagerVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AvailabilityManagerVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AvailabilityManagerVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AvailabilityManager >::size_type":

        return _openstudiomodelhvac.AvailabilityManagerVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AvailabilityManager >::value_type":

        return _openstudiomodelhvac.AvailabilityManagerVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AvailabilityManager >::difference_type', j: 'std::vector< openstudio::model::AvailabilityManager >::difference_type') -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > > *":

        return _openstudiomodelhvac.AvailabilityManagerVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AvailabilityManager >::difference_type', j: 'std::vector< openstudio::model::AvailabilityManager >::difference_type') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AvailabilityManager >::value_type const &":

        return _openstudiomodelhvac.AvailabilityManagerVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector___setitem__(self, *args)



    def append(self, x: 'AvailabilityManager') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AvailabilityManager >::size_type":

        return _openstudiomodelhvac.AvailabilityManagerVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector_clear(self)



    def swap(self, v: 'AvailabilityManagerVector') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AvailabilityManager >::allocator_type":

        return _openstudiomodelhvac.AvailabilityManagerVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AvailabilityManager >::iterator":

        return _openstudiomodelhvac.AvailabilityManagerVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AvailabilityManager >::iterator":

        return _openstudiomodelhvac.AvailabilityManagerVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AvailabilityManager >::reverse_iterator":

        return _openstudiomodelhvac.AvailabilityManagerVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AvailabilityManager >::reverse_iterator":

        return _openstudiomodelhvac.AvailabilityManagerVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AvailabilityManager >::iterator":

        return _openstudiomodelhvac.AvailabilityManagerVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AvailabilityManagerVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AvailabilityManager') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AvailabilityManager >::value_type const &":

        return _openstudiomodelhvac.AvailabilityManagerVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AvailabilityManager >::value_type const &":

        return _openstudiomodelhvac.AvailabilityManagerVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AvailabilityManager >::size_type', x: 'AvailabilityManager') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AvailabilityManager >::size_type', x: 'AvailabilityManager') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AvailabilityManager >::size_type') -> "void":

        return _openstudiomodelhvac.AvailabilityManagerVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AvailabilityManager >::size_type":

        return _openstudiomodelhvac.AvailabilityManagerVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AvailabilityManagerVector

    __del__ = lambda self: None

AvailabilityManagerVector_swigregister = _openstudiomodelhvac.AvailabilityManagerVector_swigregister

AvailabilityManagerVector_swigregister(AvailabilityManagerVector)



class OptionalAvailabilityManager(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAvailabilityManager, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAvailabilityManager, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAvailabilityManager(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAvailabilityManager_reset(self)



    def __ref__(self) -> "openstudio::model::AvailabilityManager":

        return _openstudiomodelhvac.OptionalAvailabilityManager___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAvailabilityManager_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAvailabilityManager_isNull(self)



    def get(self) -> "openstudio::model::AvailabilityManager":

        return _openstudiomodelhvac.OptionalAvailabilityManager_get(self)



    def set(self, t: 'AvailabilityManager') -> "void":

        return _openstudiomodelhvac.OptionalAvailabilityManager_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAvailabilityManager

    __del__ = lambda self: None

OptionalAvailabilityManager_swigregister = _openstudiomodelhvac.OptionalAvailabilityManager_swigregister

OptionalAvailabilityManager_swigregister(OptionalAvailabilityManager)



class SplitterVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitterVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SplitterVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SplitterVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SplitterVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SplitterVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::Splitter >::size_type":

        return _openstudiomodelhvac.SplitterVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::Splitter >::value_type":

        return _openstudiomodelhvac.SplitterVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::Splitter >::difference_type', j: 'std::vector< openstudio::model::Splitter >::difference_type') -> "std::vector< openstudio::model::Splitter,std::allocator< openstudio::model::Splitter > > *":

        return _openstudiomodelhvac.SplitterVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SplitterVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::Splitter >::difference_type', j: 'std::vector< openstudio::model::Splitter >::difference_type') -> "void":

        return _openstudiomodelhvac.SplitterVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SplitterVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::Splitter >::value_type const &":

        return _openstudiomodelhvac.SplitterVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SplitterVector___setitem__(self, *args)



    def append(self, x: 'Splitter') -> "void":

        return _openstudiomodelhvac.SplitterVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SplitterVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::Splitter >::size_type":

        return _openstudiomodelhvac.SplitterVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SplitterVector_clear(self)



    def swap(self, v: 'SplitterVector') -> "void":

        return _openstudiomodelhvac.SplitterVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::Splitter >::allocator_type":

        return _openstudiomodelhvac.SplitterVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::Splitter >::iterator":

        return _openstudiomodelhvac.SplitterVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::Splitter >::iterator":

        return _openstudiomodelhvac.SplitterVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::Splitter >::reverse_iterator":

        return _openstudiomodelhvac.SplitterVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::Splitter >::reverse_iterator":

        return _openstudiomodelhvac.SplitterVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SplitterVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::Splitter >::iterator":

        return _openstudiomodelhvac.SplitterVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SplitterVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Splitter') -> "void":

        return _openstudiomodelhvac.SplitterVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::Splitter >::value_type const &":

        return _openstudiomodelhvac.SplitterVector_front(self)



    def back(self) -> "std::vector< openstudio::model::Splitter >::value_type const &":

        return _openstudiomodelhvac.SplitterVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::Splitter >::size_type', x: 'Splitter') -> "void":

        return _openstudiomodelhvac.SplitterVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::Splitter >::size_type', x: 'Splitter') -> "void":

        return _openstudiomodelhvac.SplitterVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SplitterVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::Splitter >::size_type') -> "void":

        return _openstudiomodelhvac.SplitterVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::Splitter >::size_type":

        return _openstudiomodelhvac.SplitterVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SplitterVector

    __del__ = lambda self: None

SplitterVector_swigregister = _openstudiomodelhvac.SplitterVector_swigregister

SplitterVector_swigregister(SplitterVector)



class OptionalSplitter(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSplitter, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSplitter, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSplitter(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSplitter_reset(self)



    def __ref__(self) -> "openstudio::model::Splitter":

        return _openstudiomodelhvac.OptionalSplitter___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSplitter_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSplitter_isNull(self)



    def get(self) -> "openstudio::model::Splitter":

        return _openstudiomodelhvac.OptionalSplitter_get(self)



    def set(self, t: 'Splitter') -> "void":

        return _openstudiomodelhvac.OptionalSplitter_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSplitter

    __del__ = lambda self: None

OptionalSplitter_swigregister = _openstudiomodelhvac.OptionalSplitter_swigregister

OptionalSplitter_swigregister(OptionalSplitter)



class AirLoopHVACSupplyPlenumVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACSupplyPlenumVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACSupplyPlenumVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::value_type":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::difference_type') -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum,std::allocator< openstudio::model::AirLoopHVACSupplyPlenum > > *":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::difference_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector___setitem__(self, *args)



    def append(self, x: 'AirLoopHVACSupplyPlenum') -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_clear(self)



    def swap(self, v: 'AirLoopHVACSupplyPlenumVector') -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::allocator_type":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::iterator":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::iterator":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::iterator":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirLoopHVACSupplyPlenumVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirLoopHVACSupplyPlenum') -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type', x: 'AirLoopHVACSupplyPlenum') -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type', x: 'AirLoopHVACSupplyPlenum') -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum >::size_type":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACSupplyPlenumVector

    __del__ = lambda self: None

AirLoopHVACSupplyPlenumVector_swigregister = _openstudiomodelhvac.AirLoopHVACSupplyPlenumVector_swigregister

AirLoopHVACSupplyPlenumVector_swigregister(AirLoopHVACSupplyPlenumVector)



class OptionalAirLoopHVACSupplyPlenum(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirLoopHVACSupplyPlenum, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirLoopHVACSupplyPlenum, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirLoopHVACSupplyPlenum(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_reset(self)



    def __ref__(self) -> "openstudio::model::AirLoopHVACSupplyPlenum":

        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_isNull(self)



    def get(self) -> "openstudio::model::AirLoopHVACSupplyPlenum":

        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_get(self)



    def set(self, t: 'AirLoopHVACSupplyPlenum') -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACSupplyPlenum

    __del__ = lambda self: None

OptionalAirLoopHVACSupplyPlenum_swigregister = _openstudiomodelhvac.OptionalAirLoopHVACSupplyPlenum_swigregister

OptionalAirLoopHVACSupplyPlenum_swigregister(OptionalAirLoopHVACSupplyPlenum)



class AirLoopHVACZoneSplitterVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACZoneSplitterVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACZoneSplitterVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::value_type":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACZoneSplitter >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACZoneSplitter >::difference_type') -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter,std::allocator< openstudio::model::AirLoopHVACZoneSplitter > > *":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirLoopHVACZoneSplitter >::difference_type', j: 'std::vector< openstudio::model::AirLoopHVACZoneSplitter >::difference_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector___setitem__(self, *args)



    def append(self, x: 'AirLoopHVACZoneSplitter') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_clear(self)



    def swap(self, v: 'AirLoopHVACZoneSplitterVector') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::allocator_type":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::reverse_iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::iterator":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirLoopHVACZoneSplitterVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirLoopHVACZoneSplitter') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::value_type const &":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type', x: 'AirLoopHVACZoneSplitter') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type', x: 'AirLoopHVACZoneSplitter') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type') -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter >::size_type":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACZoneSplitterVector

    __del__ = lambda self: None

AirLoopHVACZoneSplitterVector_swigregister = _openstudiomodelhvac.AirLoopHVACZoneSplitterVector_swigregister

AirLoopHVACZoneSplitterVector_swigregister(AirLoopHVACZoneSplitterVector)



class OptionalAirLoopHVACZoneSplitter(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirLoopHVACZoneSplitter, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirLoopHVACZoneSplitter, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirLoopHVACZoneSplitter(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_reset(self)



    def __ref__(self) -> "openstudio::model::AirLoopHVACZoneSplitter":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_isNull(self)



    def get(self) -> "openstudio::model::AirLoopHVACZoneSplitter":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_get(self)



    def set(self, t: 'AirLoopHVACZoneSplitter') -> "void":

        return _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirLoopHVACZoneSplitter

    __del__ = lambda self: None

OptionalAirLoopHVACZoneSplitter_swigregister = _openstudiomodelhvac.OptionalAirLoopHVACZoneSplitter_swigregister

OptionalAirLoopHVACZoneSplitter_swigregister(OptionalAirLoopHVACZoneSplitter)



class ConnectorSplitterVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectorSplitterVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ConnectorSplitterVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ConnectorSplitterVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ConnectorSplitterVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ConnectorSplitterVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ConnectorSplitter >::size_type":

        return _openstudiomodelhvac.ConnectorSplitterVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ConnectorSplitter >::value_type":

        return _openstudiomodelhvac.ConnectorSplitterVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ConnectorSplitter >::difference_type', j: 'std::vector< openstudio::model::ConnectorSplitter >::difference_type') -> "std::vector< openstudio::model::ConnectorSplitter,std::allocator< openstudio::model::ConnectorSplitter > > *":

        return _openstudiomodelhvac.ConnectorSplitterVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ConnectorSplitter >::difference_type', j: 'std::vector< openstudio::model::ConnectorSplitter >::difference_type') -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ConnectorSplitter >::value_type const &":

        return _openstudiomodelhvac.ConnectorSplitterVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector___setitem__(self, *args)



    def append(self, x: 'ConnectorSplitter') -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ConnectorSplitterVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ConnectorSplitter >::size_type":

        return _openstudiomodelhvac.ConnectorSplitterVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector_clear(self)



    def swap(self, v: 'ConnectorSplitterVector') -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ConnectorSplitter >::allocator_type":

        return _openstudiomodelhvac.ConnectorSplitterVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ConnectorSplitter >::iterator":

        return _openstudiomodelhvac.ConnectorSplitterVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ConnectorSplitter >::iterator":

        return _openstudiomodelhvac.ConnectorSplitterVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ConnectorSplitter >::reverse_iterator":

        return _openstudiomodelhvac.ConnectorSplitterVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ConnectorSplitter >::reverse_iterator":

        return _openstudiomodelhvac.ConnectorSplitterVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ConnectorSplitter >::iterator":

        return _openstudiomodelhvac.ConnectorSplitterVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ConnectorSplitterVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ConnectorSplitter') -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ConnectorSplitter >::value_type const &":

        return _openstudiomodelhvac.ConnectorSplitterVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ConnectorSplitter >::value_type const &":

        return _openstudiomodelhvac.ConnectorSplitterVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ConnectorSplitter >::size_type', x: 'ConnectorSplitter') -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ConnectorSplitter >::size_type', x: 'ConnectorSplitter') -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ConnectorSplitter >::size_type') -> "void":

        return _openstudiomodelhvac.ConnectorSplitterVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ConnectorSplitter >::size_type":

        return _openstudiomodelhvac.ConnectorSplitterVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ConnectorSplitterVector

    __del__ = lambda self: None

ConnectorSplitterVector_swigregister = _openstudiomodelhvac.ConnectorSplitterVector_swigregister

ConnectorSplitterVector_swigregister(ConnectorSplitterVector)



class OptionalConnectorSplitter(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalConnectorSplitter, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalConnectorSplitter, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalConnectorSplitter(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalConnectorSplitter_reset(self)



    def __ref__(self) -> "openstudio::model::ConnectorSplitter":

        return _openstudiomodelhvac.OptionalConnectorSplitter___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalConnectorSplitter_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalConnectorSplitter_isNull(self)



    def get(self) -> "openstudio::model::ConnectorSplitter":

        return _openstudiomodelhvac.OptionalConnectorSplitter_get(self)



    def set(self, t: 'ConnectorSplitter') -> "void":

        return _openstudiomodelhvac.OptionalConnectorSplitter_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalConnectorSplitter

    __del__ = lambda self: None

OptionalConnectorSplitter_swigregister = _openstudiomodelhvac.OptionalConnectorSplitter_swigregister

OptionalConnectorSplitter_swigregister(OptionalConnectorSplitter)



class AirTerminalDualDuctConstantVolumeVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirTerminalDualDuctConstantVolumeVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirTerminalDualDuctConstantVolumeVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::value_type":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::difference_type', j: 'std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::difference_type') -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume,std::allocator< openstudio::model::AirTerminalDualDuctConstantVolume > > *":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::difference_type', j: 'std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::difference_type') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::value_type const &":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector___setitem__(self, *args)



    def append(self, x: 'AirTerminalDualDuctConstantVolume') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_clear(self)



    def swap(self, v: 'AirTerminalDualDuctConstantVolumeVector') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::allocator_type":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::reverse_iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::reverse_iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirTerminalDualDuctConstantVolumeVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirTerminalDualDuctConstantVolume') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::value_type const &":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::value_type const &":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type', x: 'AirTerminalDualDuctConstantVolume') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type', x: 'AirTerminalDualDuctConstantVolume') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume >::size_type":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctConstantVolumeVector

    __del__ = lambda self: None

AirTerminalDualDuctConstantVolumeVector_swigregister = _openstudiomodelhvac.AirTerminalDualDuctConstantVolumeVector_swigregister

AirTerminalDualDuctConstantVolumeVector_swigregister(AirTerminalDualDuctConstantVolumeVector)



class OptionalAirTerminalDualDuctConstantVolume(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirTerminalDualDuctConstantVolume, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirTerminalDualDuctConstantVolume, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirTerminalDualDuctConstantVolume(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_reset(self)



    def __ref__(self) -> "openstudio::model::AirTerminalDualDuctConstantVolume":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_isNull(self)



    def get(self) -> "openstudio::model::AirTerminalDualDuctConstantVolume":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_get(self)



    def set(self, t: 'AirTerminalDualDuctConstantVolume') -> "void":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirTerminalDualDuctConstantVolume

    __del__ = lambda self: None

OptionalAirTerminalDualDuctConstantVolume_swigregister = _openstudiomodelhvac.OptionalAirTerminalDualDuctConstantVolume_swigregister

OptionalAirTerminalDualDuctConstantVolume_swigregister(OptionalAirTerminalDualDuctConstantVolume)



class AirTerminalDualDuctVAVVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirTerminalDualDuctVAVVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirTerminalDualDuctVAVVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::value_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirTerminalDualDuctVAV >::difference_type', j: 'std::vector< openstudio::model::AirTerminalDualDuctVAV >::difference_type') -> "std::vector< openstudio::model::AirTerminalDualDuctVAV,std::allocator< openstudio::model::AirTerminalDualDuctVAV > > *":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirTerminalDualDuctVAV >::difference_type', j: 'std::vector< openstudio::model::AirTerminalDualDuctVAV >::difference_type') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::value_type const &":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector___setitem__(self, *args)



    def append(self, x: 'AirTerminalDualDuctVAV') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_clear(self)



    def swap(self, v: 'AirTerminalDualDuctVAVVector') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::allocator_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::reverse_iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::reverse_iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirTerminalDualDuctVAVVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirTerminalDualDuctVAV') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::value_type const &":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::value_type const &":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type', x: 'AirTerminalDualDuctVAV') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type', x: 'AirTerminalDualDuctVAV') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAV >::size_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctVAVVector

    __del__ = lambda self: None

AirTerminalDualDuctVAVVector_swigregister = _openstudiomodelhvac.AirTerminalDualDuctVAVVector_swigregister

AirTerminalDualDuctVAVVector_swigregister(AirTerminalDualDuctVAVVector)



class OptionalAirTerminalDualDuctVAV(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirTerminalDualDuctVAV, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirTerminalDualDuctVAV, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirTerminalDualDuctVAV(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_reset(self)



    def __ref__(self) -> "openstudio::model::AirTerminalDualDuctVAV":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_isNull(self)



    def get(self) -> "openstudio::model::AirTerminalDualDuctVAV":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_get(self)



    def set(self, t: 'AirTerminalDualDuctVAV') -> "void":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirTerminalDualDuctVAV

    __del__ = lambda self: None

OptionalAirTerminalDualDuctVAV_swigregister = _openstudiomodelhvac.OptionalAirTerminalDualDuctVAV_swigregister

OptionalAirTerminalDualDuctVAV_swigregister(OptionalAirTerminalDualDuctVAV)



class AirTerminalDualDuctVAVOutdoorAirVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirTerminalDualDuctVAVOutdoorAirVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirTerminalDualDuctVAVOutdoorAirVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::value_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::difference_type', j: 'std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::difference_type') -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir,std::allocator< openstudio::model::AirTerminalDualDuctVAVOutdoorAir > > *":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::difference_type', j: 'std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::difference_type') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::value_type const &":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector___setitem__(self, *args)



    def append(self, x: 'AirTerminalDualDuctVAVOutdoorAir') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_clear(self)



    def swap(self, v: 'AirTerminalDualDuctVAVOutdoorAirVector') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::allocator_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::reverse_iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::reverse_iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::iterator":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AirTerminalDualDuctVAVOutdoorAirVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirTerminalDualDuctVAVOutdoorAir') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::value_type const &":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_front(self)



    def back(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::value_type const &":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type', x: 'AirTerminalDualDuctVAVOutdoorAir') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type', x: 'AirTerminalDualDuctVAVOutdoorAir') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type') -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >::size_type":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctVAVOutdoorAirVector

    __del__ = lambda self: None

AirTerminalDualDuctVAVOutdoorAirVector_swigregister = _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAirVector_swigregister

AirTerminalDualDuctVAVOutdoorAirVector_swigregister(AirTerminalDualDuctVAVOutdoorAirVector)



class OptionalAirTerminalDualDuctVAVOutdoorAir(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirTerminalDualDuctVAVOutdoorAir, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirTerminalDualDuctVAVOutdoorAir, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalAirTerminalDualDuctVAVOutdoorAir(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_reset(self)



    def __ref__(self) -> "openstudio::model::AirTerminalDualDuctVAVOutdoorAir":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_isNull(self)



    def get(self) -> "openstudio::model::AirTerminalDualDuctVAVOutdoorAir":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_get(self)



    def set(self, t: 'AirTerminalDualDuctVAVOutdoorAir') -> "void":

        return _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalAirTerminalDualDuctVAVOutdoorAir

    __del__ = lambda self: None

OptionalAirTerminalDualDuctVAVOutdoorAir_swigregister = _openstudiomodelhvac.OptionalAirTerminalDualDuctVAVOutdoorAir_swigregister

OptionalAirTerminalDualDuctVAVOutdoorAir_swigregister(OptionalAirTerminalDualDuctVAVOutdoorAir)



class CentralHeatPumpSystemVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CentralHeatPumpSystemVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CentralHeatPumpSystemVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::size_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::value_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CentralHeatPumpSystem >::difference_type', j: 'std::vector< openstudio::model::CentralHeatPumpSystem >::difference_type') -> "std::vector< openstudio::model::CentralHeatPumpSystem,std::allocator< openstudio::model::CentralHeatPumpSystem > > *":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CentralHeatPumpSystem >::difference_type', j: 'std::vector< openstudio::model::CentralHeatPumpSystem >::difference_type') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::value_type const &":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector___setitem__(self, *args)



    def append(self, x: 'CentralHeatPumpSystem') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::size_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_clear(self)



    def swap(self, v: 'CentralHeatPumpSystemVector') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::allocator_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::reverse_iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::reverse_iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CentralHeatPumpSystemVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CentralHeatPumpSystem') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::value_type const &":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::value_type const &":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CentralHeatPumpSystem >::size_type', x: 'CentralHeatPumpSystem') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CentralHeatPumpSystem >::size_type', x: 'CentralHeatPumpSystem') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CentralHeatPumpSystem >::size_type') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem >::size_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CentralHeatPumpSystemVector

    __del__ = lambda self: None

CentralHeatPumpSystemVector_swigregister = _openstudiomodelhvac.CentralHeatPumpSystemVector_swigregister

CentralHeatPumpSystemVector_swigregister(CentralHeatPumpSystemVector)



class OptionalCentralHeatPumpSystem(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCentralHeatPumpSystem, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCentralHeatPumpSystem, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCentralHeatPumpSystem(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_reset(self)



    def __ref__(self) -> "openstudio::model::CentralHeatPumpSystem":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_isNull(self)



    def get(self) -> "openstudio::model::CentralHeatPumpSystem":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_get(self)



    def set(self, t: 'CentralHeatPumpSystem') -> "void":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystem_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCentralHeatPumpSystem

    __del__ = lambda self: None

OptionalCentralHeatPumpSystem_swigregister = _openstudiomodelhvac.OptionalCentralHeatPumpSystem_swigregister

OptionalCentralHeatPumpSystem_swigregister(OptionalCentralHeatPumpSystem)



class CentralHeatPumpSystemModuleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CentralHeatPumpSystemModuleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CentralHeatPumpSystemModuleVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::value_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CentralHeatPumpSystemModule >::difference_type', j: 'std::vector< openstudio::model::CentralHeatPumpSystemModule >::difference_type') -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > > *":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CentralHeatPumpSystemModule >::difference_type', j: 'std::vector< openstudio::model::CentralHeatPumpSystemModule >::difference_type') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::value_type const &":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector___setitem__(self, *args)



    def append(self, x: 'CentralHeatPumpSystemModule') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_clear(self)



    def swap(self, v: 'CentralHeatPumpSystemModuleVector') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::allocator_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::reverse_iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::reverse_iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::iterator":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CentralHeatPumpSystemModuleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CentralHeatPumpSystemModule') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::value_type const &":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::value_type const &":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type', x: 'CentralHeatPumpSystemModule') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type', x: 'CentralHeatPumpSystemModule') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule >::size_type":

        return _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CentralHeatPumpSystemModuleVector

    __del__ = lambda self: None

CentralHeatPumpSystemModuleVector_swigregister = _openstudiomodelhvac.CentralHeatPumpSystemModuleVector_swigregister

CentralHeatPumpSystemModuleVector_swigregister(CentralHeatPumpSystemModuleVector)



class OptionalCentralHeatPumpSystemModule(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCentralHeatPumpSystemModule, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCentralHeatPumpSystemModule, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCentralHeatPumpSystemModule(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_reset(self)



    def __ref__(self) -> "openstudio::model::CentralHeatPumpSystemModule":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_isNull(self)



    def get(self) -> "openstudio::model::CentralHeatPumpSystemModule":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_get(self)



    def set(self, t: 'CentralHeatPumpSystemModule') -> "void":

        return _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCentralHeatPumpSystemModule

    __del__ = lambda self: None

OptionalCentralHeatPumpSystemModule_swigregister = _openstudiomodelhvac.OptionalCentralHeatPumpSystemModule_swigregister

OptionalCentralHeatPumpSystemModule_swigregister(OptionalCentralHeatPumpSystemModule)



class ChillerHeaterPerformanceElectricEIRVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ChillerHeaterPerformanceElectricEIRVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ChillerHeaterPerformanceElectricEIRVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::value_type":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::difference_type', j: 'std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::difference_type') -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR,std::allocator< openstudio::model::ChillerHeaterPerformanceElectricEIR > > *":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::difference_type', j: 'std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::difference_type') -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::value_type const &":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector___setitem__(self, *args)



    def append(self, x: 'ChillerHeaterPerformanceElectricEIR') -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_clear(self)



    def swap(self, v: 'ChillerHeaterPerformanceElectricEIRVector') -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::allocator_type":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::iterator":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::iterator":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::reverse_iterator":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::reverse_iterator":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::iterator":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ChillerHeaterPerformanceElectricEIRVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ChillerHeaterPerformanceElectricEIR') -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::value_type const &":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::value_type const &":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type', x: 'ChillerHeaterPerformanceElectricEIR') -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type', x: 'ChillerHeaterPerformanceElectricEIR') -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type') -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR >::size_type":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerHeaterPerformanceElectricEIRVector

    __del__ = lambda self: None

ChillerHeaterPerformanceElectricEIRVector_swigregister = _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIRVector_swigregister

ChillerHeaterPerformanceElectricEIRVector_swigregister(ChillerHeaterPerformanceElectricEIRVector)



class OptionalChillerHeaterPerformanceElectricEIR(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalChillerHeaterPerformanceElectricEIR, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalChillerHeaterPerformanceElectricEIR, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalChillerHeaterPerformanceElectricEIR(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_reset(self)



    def __ref__(self) -> "openstudio::model::ChillerHeaterPerformanceElectricEIR":

        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_isNull(self)



    def get(self) -> "openstudio::model::ChillerHeaterPerformanceElectricEIR":

        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_get(self)



    def set(self, t: 'ChillerHeaterPerformanceElectricEIR') -> "void":

        return _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalChillerHeaterPerformanceElectricEIR

    __del__ = lambda self: None

OptionalChillerHeaterPerformanceElectricEIR_swigregister = _openstudiomodelhvac.OptionalChillerHeaterPerformanceElectricEIR_swigregister

OptionalChillerHeaterPerformanceElectricEIR_swigregister(OptionalChillerHeaterPerformanceElectricEIR)



class ChillerElectricEIRVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ChillerElectricEIRVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ChillerElectricEIRVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ChillerElectricEIRVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIRVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIRVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::size_type":

        return _openstudiomodelhvac.ChillerElectricEIRVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::value_type":

        return _openstudiomodelhvac.ChillerElectricEIRVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ChillerElectricEIR >::difference_type', j: 'std::vector< openstudio::model::ChillerElectricEIR >::difference_type') -> "std::vector< openstudio::model::ChillerElectricEIR,std::allocator< openstudio::model::ChillerElectricEIR > > *":

        return _openstudiomodelhvac.ChillerElectricEIRVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ChillerElectricEIR >::difference_type', j: 'std::vector< openstudio::model::ChillerElectricEIR >::difference_type') -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ChillerElectricEIR >::value_type const &":

        return _openstudiomodelhvac.ChillerElectricEIRVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector___setitem__(self, *args)



    def append(self, x: 'ChillerElectricEIR') -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIRVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::size_type":

        return _openstudiomodelhvac.ChillerElectricEIRVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector_clear(self)



    def swap(self, v: 'ChillerElectricEIRVector') -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::allocator_type":

        return _openstudiomodelhvac.ChillerElectricEIRVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::iterator":

        return _openstudiomodelhvac.ChillerElectricEIRVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::iterator":

        return _openstudiomodelhvac.ChillerElectricEIRVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::reverse_iterator":

        return _openstudiomodelhvac.ChillerElectricEIRVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::reverse_iterator":

        return _openstudiomodelhvac.ChillerElectricEIRVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ChillerElectricEIR >::iterator":

        return _openstudiomodelhvac.ChillerElectricEIRVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ChillerElectricEIRVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ChillerElectricEIR') -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::value_type const &":

        return _openstudiomodelhvac.ChillerElectricEIRVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::value_type const &":

        return _openstudiomodelhvac.ChillerElectricEIRVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ChillerElectricEIR >::size_type', x: 'ChillerElectricEIR') -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ChillerElectricEIR >::size_type', x: 'ChillerElectricEIR') -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ChillerElectricEIR >::size_type') -> "void":

        return _openstudiomodelhvac.ChillerElectricEIRVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ChillerElectricEIR >::size_type":

        return _openstudiomodelhvac.ChillerElectricEIRVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerElectricEIRVector

    __del__ = lambda self: None

ChillerElectricEIRVector_swigregister = _openstudiomodelhvac.ChillerElectricEIRVector_swigregister

ChillerElectricEIRVector_swigregister(ChillerElectricEIRVector)



class OptionalChillerElectricEIR(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalChillerElectricEIR, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalChillerElectricEIR, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalChillerElectricEIR(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalChillerElectricEIR_reset(self)



    def __ref__(self) -> "openstudio::model::ChillerElectricEIR":

        return _openstudiomodelhvac.OptionalChillerElectricEIR___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalChillerElectricEIR_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalChillerElectricEIR_isNull(self)



    def get(self) -> "openstudio::model::ChillerElectricEIR":

        return _openstudiomodelhvac.OptionalChillerElectricEIR_get(self)



    def set(self, t: 'ChillerElectricEIR') -> "void":

        return _openstudiomodelhvac.OptionalChillerElectricEIR_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalChillerElectricEIR

    __del__ = lambda self: None

OptionalChillerElectricEIR_swigregister = _openstudiomodelhvac.OptionalChillerElectricEIR_swigregister

OptionalChillerElectricEIR_swigregister(OptionalChillerElectricEIR)



class CoilCoolingDXMultiSpeedStageDataVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingDXMultiSpeedStageDataVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingDXMultiSpeedStageDataVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::value_type":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::difference_type') -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilCoolingDXMultiSpeedStageData > > *":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector___setitem__(self, *args)



    def append(self, x: 'CoilCoolingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_clear(self)



    def swap(self, v: 'CoilCoolingDXMultiSpeedStageDataVector') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::allocator_type":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::iterator":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::iterator":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::iterator":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingDXMultiSpeedStageDataVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilCoolingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type', x: 'CoilCoolingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type', x: 'CoilCoolingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData >::size_type":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXMultiSpeedStageDataVector

    __del__ = lambda self: None

CoilCoolingDXMultiSpeedStageDataVector_swigregister = _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageDataVector_swigregister

CoilCoolingDXMultiSpeedStageDataVector_swigregister(CoilCoolingDXMultiSpeedStageDataVector)



class OptionalCoilCoolingDXMultiSpeedStageData(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilCoolingDXMultiSpeedStageData, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilCoolingDXMultiSpeedStageData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilCoolingDXMultiSpeedStageData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_reset(self)



    def __ref__(self) -> "openstudio::model::CoilCoolingDXMultiSpeedStageData":

        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_isNull(self)



    def get(self) -> "openstudio::model::CoilCoolingDXMultiSpeedStageData":

        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_get(self)



    def set(self, t: 'CoilCoolingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingDXMultiSpeedStageData

    __del__ = lambda self: None

OptionalCoilCoolingDXMultiSpeedStageData_swigregister = _openstudiomodelhvac.OptionalCoilCoolingDXMultiSpeedStageData_swigregister

OptionalCoilCoolingDXMultiSpeedStageData_swigregister(OptionalCoilCoolingDXMultiSpeedStageData)



class CoilCoolingDXVariableRefrigerantFlowVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingDXVariableRefrigerantFlowVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingDXVariableRefrigerantFlowVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::value_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::difference_type') -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilCoolingDXVariableRefrigerantFlow > > *":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector___setitem__(self, *args)



    def append(self, x: 'CoilCoolingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_clear(self)



    def swap(self, v: 'CoilCoolingDXVariableRefrigerantFlowVector') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::allocator_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingDXVariableRefrigerantFlowVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilCoolingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type', x: 'CoilCoolingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type', x: 'CoilCoolingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >::size_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXVariableRefrigerantFlowVector

    __del__ = lambda self: None

CoilCoolingDXVariableRefrigerantFlowVector_swigregister = _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlowVector_swigregister

CoilCoolingDXVariableRefrigerantFlowVector_swigregister(CoilCoolingDXVariableRefrigerantFlowVector)



class OptionalCoilCoolingDXVariableRefrigerantFlow(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilCoolingDXVariableRefrigerantFlow, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilCoolingDXVariableRefrigerantFlow, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilCoolingDXVariableRefrigerantFlow(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_reset(self)



    def __ref__(self) -> "openstudio::model::CoilCoolingDXVariableRefrigerantFlow":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_isNull(self)



    def get(self) -> "openstudio::model::CoilCoolingDXVariableRefrigerantFlow":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_get(self)



    def set(self, t: 'CoilCoolingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingDXVariableRefrigerantFlow

    __del__ = lambda self: None

OptionalCoilCoolingDXVariableRefrigerantFlow_swigregister = _openstudiomodelhvac.OptionalCoilCoolingDXVariableRefrigerantFlow_swigregister

OptionalCoilCoolingDXVariableRefrigerantFlow_swigregister(OptionalCoilCoolingDXVariableRefrigerantFlow)



class CoilCoolingDXVariableSpeedSpeedDataVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingDXVariableSpeedSpeedDataVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingDXVariableSpeedSpeedDataVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::value_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::difference_type') -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilCoolingDXVariableSpeedSpeedData > > *":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector___setitem__(self, *args)



    def append(self, x: 'CoilCoolingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_clear(self)



    def swap(self, v: 'CoilCoolingDXVariableSpeedSpeedDataVector') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::allocator_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::iterator":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingDXVariableSpeedSpeedDataVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilCoolingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type', x: 'CoilCoolingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type', x: 'CoilCoolingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >::size_type":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXVariableSpeedSpeedDataVector

    __del__ = lambda self: None

CoilCoolingDXVariableSpeedSpeedDataVector_swigregister = _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedDataVector_swigregister

CoilCoolingDXVariableSpeedSpeedDataVector_swigregister(CoilCoolingDXVariableSpeedSpeedDataVector)



class OptionalCoilCoolingDXVariableSpeedSpeedData(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilCoolingDXVariableSpeedSpeedData, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilCoolingDXVariableSpeedSpeedData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilCoolingDXVariableSpeedSpeedData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_reset(self)



    def __ref__(self) -> "openstudio::model::CoilCoolingDXVariableSpeedSpeedData":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_isNull(self)



    def get(self) -> "openstudio::model::CoilCoolingDXVariableSpeedSpeedData":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_get(self)



    def set(self, t: 'CoilCoolingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingDXVariableSpeedSpeedData

    __del__ = lambda self: None

OptionalCoilCoolingDXVariableSpeedSpeedData_swigregister = _openstudiomodelhvac.OptionalCoilCoolingDXVariableSpeedSpeedData_swigregister

OptionalCoilCoolingDXVariableSpeedSpeedData_swigregister(OptionalCoilCoolingDXVariableSpeedSpeedData)



class CoilCoolingWaterVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingWaterVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingWaterVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilCoolingWaterVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingWater >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilCoolingWater >::value_type":

        return _openstudiomodelhvac.CoilCoolingWaterVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilCoolingWater >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingWater >::difference_type') -> "std::vector< openstudio::model::CoilCoolingWater,std::allocator< openstudio::model::CoilCoolingWater > > *":

        return _openstudiomodelhvac.CoilCoolingWaterVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilCoolingWater >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingWater >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingWater >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector___setitem__(self, *args)



    def append(self, x: 'CoilCoolingWater') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilCoolingWater >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector_clear(self)



    def swap(self, v: 'CoilCoolingWaterVector') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingWater >::allocator_type":

        return _openstudiomodelhvac.CoilCoolingWaterVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilCoolingWater >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilCoolingWater >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingWater >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingWaterVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilCoolingWater >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingWaterVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingWater >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingWaterVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilCoolingWater') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilCoolingWater >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilCoolingWater >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilCoolingWater >::size_type', x: 'CoilCoolingWater') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilCoolingWater >::size_type', x: 'CoilCoolingWater') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilCoolingWater >::size_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingWater >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterVector

    __del__ = lambda self: None

CoilCoolingWaterVector_swigregister = _openstudiomodelhvac.CoilCoolingWaterVector_swigregister

CoilCoolingWaterVector_swigregister(CoilCoolingWaterVector)



class OptionalCoilCoolingWater(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilCoolingWater, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilCoolingWater, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilCoolingWater(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingWater_reset(self)



    def __ref__(self) -> "openstudio::model::CoilCoolingWater":

        return _openstudiomodelhvac.OptionalCoilCoolingWater___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingWater_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingWater_isNull(self)



    def get(self) -> "openstudio::model::CoilCoolingWater":

        return _openstudiomodelhvac.OptionalCoilCoolingWater_get(self)



    def set(self, t: 'CoilCoolingWater') -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingWater_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingWater

    __del__ = lambda self: None

OptionalCoilCoolingWater_swigregister = _openstudiomodelhvac.OptionalCoilCoolingWater_swigregister

OptionalCoilCoolingWater_swigregister(OptionalCoilCoolingWater)



class CoilCoolingWaterToAirHeatPumpEquationFitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingWaterToAirHeatPumpEquationFitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingWaterToAirHeatPumpEquationFitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::value_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::difference_type') -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit > > *":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector___setitem__(self, *args)



    def append(self, x: 'CoilCoolingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_clear(self)



    def swap(self, v: 'CoilCoolingWaterToAirHeatPumpEquationFitVector') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::allocator_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpEquationFitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilCoolingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type', x: 'CoilCoolingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type', x: 'CoilCoolingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpEquationFitVector

    __del__ = lambda self: None

CoilCoolingWaterToAirHeatPumpEquationFitVector_swigregister = _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFitVector_swigregister

CoilCoolingWaterToAirHeatPumpEquationFitVector_swigregister(CoilCoolingWaterToAirHeatPumpEquationFitVector)



class OptionalCoilCoolingWaterToAirHeatPumpEquationFit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilCoolingWaterToAirHeatPumpEquationFit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilCoolingWaterToAirHeatPumpEquationFit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilCoolingWaterToAirHeatPumpEquationFit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_reset(self)



    def __ref__(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_isNull(self)



    def get(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_get(self)



    def set(self, t: 'CoilCoolingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingWaterToAirHeatPumpEquationFit

    __del__ = lambda self: None

OptionalCoilCoolingWaterToAirHeatPumpEquationFit_swigregister = _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpEquationFit_swigregister

OptionalCoilCoolingWaterToAirHeatPumpEquationFit_swigregister(OptionalCoilCoolingWaterToAirHeatPumpEquationFit)



class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type') -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit > > *":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector___setitem__(self, *args)



    def append(self, x: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_clear(self)



    def swap(self, v: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::allocator_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type', x: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type', x: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector

    __del__ = lambda self: None

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_swigregister = _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_swigregister

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector_swigregister(CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitVector)



class OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_reset(self)



    def __ref__(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_isNull(self)



    def get(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_get(self)



    def set(self, t: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit

    __del__ = lambda self: None

OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister = _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister

OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister(OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit)



class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type') -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > > *":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type', j: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___setitem__(self, *args)



    def append(self, x: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_clear(self)



    def swap(self, v: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::allocator_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::reverse_iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type', x: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type', x: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector

    __del__ = lambda self: None

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swigregister = _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swigregister

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swigregister(CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector)



class OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_reset(self)



    def __ref__(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_isNull(self)



    def get(self) -> "openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_get(self)



    def set(self, t: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

    __del__ = lambda self: None

OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister = _openstudiomodelhvac.OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister

OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister(OptionalCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData)



class CoilHeatingDXMultiSpeedStageDataVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingDXMultiSpeedStageDataVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingDXMultiSpeedStageDataVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::value_type":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::difference_type') -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilHeatingDXMultiSpeedStageData > > *":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector___setitem__(self, *args)



    def append(self, x: 'CoilHeatingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_clear(self)



    def swap(self, v: 'CoilHeatingDXMultiSpeedStageDataVector') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::allocator_type":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::iterator":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::iterator":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::iterator":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingDXMultiSpeedStageDataVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilHeatingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type', x: 'CoilHeatingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type', x: 'CoilHeatingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData >::size_type":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXMultiSpeedStageDataVector

    __del__ = lambda self: None

CoilHeatingDXMultiSpeedStageDataVector_swigregister = _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageDataVector_swigregister

CoilHeatingDXMultiSpeedStageDataVector_swigregister(CoilHeatingDXMultiSpeedStageDataVector)



class OptionalCoilHeatingDXMultiSpeedStageData(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilHeatingDXMultiSpeedStageData, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilHeatingDXMultiSpeedStageData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilHeatingDXMultiSpeedStageData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_reset(self)



    def __ref__(self) -> "openstudio::model::CoilHeatingDXMultiSpeedStageData":

        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_isNull(self)



    def get(self) -> "openstudio::model::CoilHeatingDXMultiSpeedStageData":

        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_get(self)



    def set(self, t: 'CoilHeatingDXMultiSpeedStageData') -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingDXMultiSpeedStageData

    __del__ = lambda self: None

OptionalCoilHeatingDXMultiSpeedStageData_swigregister = _openstudiomodelhvac.OptionalCoilHeatingDXMultiSpeedStageData_swigregister

OptionalCoilHeatingDXMultiSpeedStageData_swigregister(OptionalCoilHeatingDXMultiSpeedStageData)



class CoilHeatingDXVariableRefrigerantFlowVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingDXVariableRefrigerantFlowVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingDXVariableRefrigerantFlowVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::value_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::difference_type') -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilHeatingDXVariableRefrigerantFlow > > *":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector___setitem__(self, *args)



    def append(self, x: 'CoilHeatingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_clear(self)



    def swap(self, v: 'CoilHeatingDXVariableRefrigerantFlowVector') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::allocator_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingDXVariableRefrigerantFlowVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilHeatingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type', x: 'CoilHeatingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type', x: 'CoilHeatingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >::size_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXVariableRefrigerantFlowVector

    __del__ = lambda self: None

CoilHeatingDXVariableRefrigerantFlowVector_swigregister = _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlowVector_swigregister

CoilHeatingDXVariableRefrigerantFlowVector_swigregister(CoilHeatingDXVariableRefrigerantFlowVector)



class OptionalCoilHeatingDXVariableRefrigerantFlow(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilHeatingDXVariableRefrigerantFlow, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilHeatingDXVariableRefrigerantFlow, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilHeatingDXVariableRefrigerantFlow(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_reset(self)



    def __ref__(self) -> "openstudio::model::CoilHeatingDXVariableRefrigerantFlow":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_isNull(self)



    def get(self) -> "openstudio::model::CoilHeatingDXVariableRefrigerantFlow":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_get(self)



    def set(self, t: 'CoilHeatingDXVariableRefrigerantFlow') -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingDXVariableRefrigerantFlow

    __del__ = lambda self: None

OptionalCoilHeatingDXVariableRefrigerantFlow_swigregister = _openstudiomodelhvac.OptionalCoilHeatingDXVariableRefrigerantFlow_swigregister

OptionalCoilHeatingDXVariableRefrigerantFlow_swigregister(OptionalCoilHeatingDXVariableRefrigerantFlow)



class CoilHeatingGasMultiStageStageDataVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingGasMultiStageStageDataVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingGasMultiStageStageDataVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::value_type":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::difference_type') -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData,std::allocator< openstudio::model::CoilHeatingGasMultiStageStageData > > *":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector___setitem__(self, *args)



    def append(self, x: 'CoilHeatingGasMultiStageStageData') -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_clear(self)



    def swap(self, v: 'CoilHeatingGasMultiStageStageDataVector') -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::allocator_type":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::iterator":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::iterator":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::iterator":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingGasMultiStageStageDataVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilHeatingGasMultiStageStageData') -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type', x: 'CoilHeatingGasMultiStageStageData') -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type', x: 'CoilHeatingGasMultiStageStageData') -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData >::size_type":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingGasMultiStageStageDataVector

    __del__ = lambda self: None

CoilHeatingGasMultiStageStageDataVector_swigregister = _openstudiomodelhvac.CoilHeatingGasMultiStageStageDataVector_swigregister

CoilHeatingGasMultiStageStageDataVector_swigregister(CoilHeatingGasMultiStageStageDataVector)



class OptionalCoilHeatingGasMultiStageStageData(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilHeatingGasMultiStageStageData, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilHeatingGasMultiStageStageData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilHeatingGasMultiStageStageData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_reset(self)



    def __ref__(self) -> "openstudio::model::CoilHeatingGasMultiStageStageData":

        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_isNull(self)



    def get(self) -> "openstudio::model::CoilHeatingGasMultiStageStageData":

        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_get(self)



    def set(self, t: 'CoilHeatingGasMultiStageStageData') -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingGasMultiStageStageData

    __del__ = lambda self: None

OptionalCoilHeatingGasMultiStageStageData_swigregister = _openstudiomodelhvac.OptionalCoilHeatingGasMultiStageStageData_swigregister

OptionalCoilHeatingGasMultiStageStageData_swigregister(OptionalCoilHeatingGasMultiStageStageData)



class CoilHeatingDXVariableSpeedSpeedDataVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingDXVariableSpeedSpeedDataVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingDXVariableSpeedSpeedDataVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::value_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::difference_type') -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilHeatingDXVariableSpeedSpeedData > > *":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector___setitem__(self, *args)



    def append(self, x: 'CoilHeatingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_clear(self)



    def swap(self, v: 'CoilHeatingDXVariableSpeedSpeedDataVector') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::allocator_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::iterator":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingDXVariableSpeedSpeedDataVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilHeatingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type', x: 'CoilHeatingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type', x: 'CoilHeatingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >::size_type":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXVariableSpeedSpeedDataVector

    __del__ = lambda self: None

CoilHeatingDXVariableSpeedSpeedDataVector_swigregister = _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedDataVector_swigregister

CoilHeatingDXVariableSpeedSpeedDataVector_swigregister(CoilHeatingDXVariableSpeedSpeedDataVector)



class OptionalCoilHeatingDXVariableSpeedSpeedData(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilHeatingDXVariableSpeedSpeedData, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilHeatingDXVariableSpeedSpeedData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilHeatingDXVariableSpeedSpeedData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_reset(self)



    def __ref__(self) -> "openstudio::model::CoilHeatingDXVariableSpeedSpeedData":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_isNull(self)



    def get(self) -> "openstudio::model::CoilHeatingDXVariableSpeedSpeedData":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_get(self)



    def set(self, t: 'CoilHeatingDXVariableSpeedSpeedData') -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingDXVariableSpeedSpeedData

    __del__ = lambda self: None

OptionalCoilHeatingDXVariableSpeedSpeedData_swigregister = _openstudiomodelhvac.OptionalCoilHeatingDXVariableSpeedSpeedData_swigregister

OptionalCoilHeatingDXVariableSpeedSpeedData_swigregister(OptionalCoilHeatingDXVariableSpeedSpeedData)



class CoilHeatingWaterVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingWaterVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingWaterVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilHeatingWaterVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWater >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWater >::value_type":

        return _openstudiomodelhvac.CoilHeatingWaterVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilHeatingWater >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingWater >::difference_type') -> "std::vector< openstudio::model::CoilHeatingWater,std::allocator< openstudio::model::CoilHeatingWater > > *":

        return _openstudiomodelhvac.CoilHeatingWaterVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilHeatingWater >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingWater >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWater >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector___setitem__(self, *args)



    def append(self, x: 'CoilHeatingWater') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilHeatingWater >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector_clear(self)



    def swap(self, v: 'CoilHeatingWaterVector') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWater >::allocator_type":

        return _openstudiomodelhvac.CoilHeatingWaterVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWater >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilHeatingWater >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWater >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingWaterVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWater >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingWaterVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWater >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingWaterVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilHeatingWater') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilHeatingWater >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilHeatingWater >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilHeatingWater >::size_type', x: 'CoilHeatingWater') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilHeatingWater >::size_type', x: 'CoilHeatingWater') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilHeatingWater >::size_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWater >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterVector

    __del__ = lambda self: None

CoilHeatingWaterVector_swigregister = _openstudiomodelhvac.CoilHeatingWaterVector_swigregister

CoilHeatingWaterVector_swigregister(CoilHeatingWaterVector)



class OptionalCoilHeatingWater(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilHeatingWater, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilHeatingWater, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilHeatingWater(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingWater_reset(self)



    def __ref__(self) -> "openstudio::model::CoilHeatingWater":

        return _openstudiomodelhvac.OptionalCoilHeatingWater___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingWater_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingWater_isNull(self)



    def get(self) -> "openstudio::model::CoilHeatingWater":

        return _openstudiomodelhvac.OptionalCoilHeatingWater_get(self)



    def set(self, t: 'CoilHeatingWater') -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingWater_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingWater

    __del__ = lambda self: None

OptionalCoilHeatingWater_swigregister = _openstudiomodelhvac.OptionalCoilHeatingWater_swigregister

OptionalCoilHeatingWater_swigregister(OptionalCoilHeatingWater)



class CoilHeatingWaterToAirHeatPumpEquationFitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingWaterToAirHeatPumpEquationFitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingWaterToAirHeatPumpEquationFitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::value_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::difference_type') -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit > > *":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector___setitem__(self, *args)



    def append(self, x: 'CoilHeatingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_clear(self)



    def swap(self, v: 'CoilHeatingWaterToAirHeatPumpEquationFitVector') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::allocator_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpEquationFitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilHeatingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type', x: 'CoilHeatingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type', x: 'CoilHeatingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpEquationFitVector

    __del__ = lambda self: None

CoilHeatingWaterToAirHeatPumpEquationFitVector_swigregister = _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFitVector_swigregister

CoilHeatingWaterToAirHeatPumpEquationFitVector_swigregister(CoilHeatingWaterToAirHeatPumpEquationFitVector)



class OptionalCoilHeatingWaterToAirHeatPumpEquationFit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilHeatingWaterToAirHeatPumpEquationFit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilHeatingWaterToAirHeatPumpEquationFit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilHeatingWaterToAirHeatPumpEquationFit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_reset(self)



    def __ref__(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_isNull(self)



    def get(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_get(self)



    def set(self, t: 'CoilHeatingWaterToAirHeatPumpEquationFit') -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingWaterToAirHeatPumpEquationFit

    __del__ = lambda self: None

OptionalCoilHeatingWaterToAirHeatPumpEquationFit_swigregister = _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpEquationFit_swigregister

OptionalCoilHeatingWaterToAirHeatPumpEquationFit_swigregister(OptionalCoilHeatingWaterToAirHeatPumpEquationFit)



class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type') -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit > > *":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector___setitem__(self, *args)



    def append(self, x: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_clear(self)



    def swap(self, v: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::allocator_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type', x: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type', x: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector

    __del__ = lambda self: None

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_swigregister = _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_swigregister

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector_swigregister(CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitVector)



class OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_reset(self)



    def __ref__(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_isNull(self)



    def get(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_get(self)



    def set(self, t: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit') -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit

    __del__ = lambda self: None

OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister = _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister

OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister(OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit)



class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type') -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > > *":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type', j: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector___setitem__(self, *args)



    def append(self, x: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_clear(self)



    def swap(self, v: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::allocator_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::reverse_iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::iterator":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::value_type const &":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type', x: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type', x: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >::size_type":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector

    __del__ = lambda self: None

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swigregister = _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swigregister

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector_swigregister(CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataVector)



class OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_reset(self)



    def __ref__(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_isNull(self)



    def get(self) -> "openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_get(self)



    def set(self, t: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

    __del__ = lambda self: None

OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister = _openstudiomodelhvac.OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister

OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister(OptionalCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData)



class CoilPerformanceDXCoolingVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilPerformanceDXCoolingVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilPerformanceDXCoolingVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::value_type":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilPerformanceDXCooling >::difference_type', j: 'std::vector< openstudio::model::CoilPerformanceDXCooling >::difference_type') -> "std::vector< openstudio::model::CoilPerformanceDXCooling,std::allocator< openstudio::model::CoilPerformanceDXCooling > > *":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilPerformanceDXCooling >::difference_type', j: 'std::vector< openstudio::model::CoilPerformanceDXCooling >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::value_type const &":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector___setitem__(self, *args)



    def append(self, x: 'CoilPerformanceDXCooling') -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_clear(self)



    def swap(self, v: 'CoilPerformanceDXCoolingVector') -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::allocator_type":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::iterator":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::iterator":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::reverse_iterator":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::reverse_iterator":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::iterator":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilPerformanceDXCoolingVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilPerformanceDXCooling') -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::value_type const &":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::value_type const &":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type', x: 'CoilPerformanceDXCooling') -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type', x: 'CoilPerformanceDXCooling') -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type') -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilPerformanceDXCooling >::size_type":

        return _openstudiomodelhvac.CoilPerformanceDXCoolingVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilPerformanceDXCoolingVector

    __del__ = lambda self: None

CoilPerformanceDXCoolingVector_swigregister = _openstudiomodelhvac.CoilPerformanceDXCoolingVector_swigregister

CoilPerformanceDXCoolingVector_swigregister(CoilPerformanceDXCoolingVector)



class OptionalCoilPerformanceDXCooling(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilPerformanceDXCooling, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilPerformanceDXCooling, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilPerformanceDXCooling(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_reset(self)



    def __ref__(self) -> "openstudio::model::CoilPerformanceDXCooling":

        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_isNull(self)



    def get(self) -> "openstudio::model::CoilPerformanceDXCooling":

        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_get(self)



    def set(self, t: 'CoilPerformanceDXCooling') -> "void":

        return _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilPerformanceDXCooling

    __del__ = lambda self: None

OptionalCoilPerformanceDXCooling_swigregister = _openstudiomodelhvac.OptionalCoilPerformanceDXCooling_swigregister

OptionalCoilPerformanceDXCooling_swigregister(OptionalCoilPerformanceDXCooling)



class CoilWaterHeatingAirToWaterHeatPumpVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilWaterHeatingAirToWaterHeatPumpVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilWaterHeatingAirToWaterHeatPumpVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::value_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::difference_type', j: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::difference_type') -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPump > > *":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::difference_type', j: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::value_type const &":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector___setitem__(self, *args)



    def append(self, x: 'CoilWaterHeatingAirToWaterHeatPump') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_clear(self)



    def swap(self, v: 'CoilWaterHeatingAirToWaterHeatPumpVector') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::allocator_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::reverse_iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::reverse_iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilWaterHeatingAirToWaterHeatPumpVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilWaterHeatingAirToWaterHeatPump') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::value_type const &":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::value_type const &":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type', x: 'CoilWaterHeatingAirToWaterHeatPump') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type', x: 'CoilWaterHeatingAirToWaterHeatPump') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >::size_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilWaterHeatingAirToWaterHeatPumpVector

    __del__ = lambda self: None

CoilWaterHeatingAirToWaterHeatPumpVector_swigregister = _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpVector_swigregister

CoilWaterHeatingAirToWaterHeatPumpVector_swigregister(CoilWaterHeatingAirToWaterHeatPumpVector)



class OptionalCoilWaterHeatingAirToWaterHeatPump(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilWaterHeatingAirToWaterHeatPump, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilWaterHeatingAirToWaterHeatPump, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilWaterHeatingAirToWaterHeatPump(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_reset(self)



    def __ref__(self) -> "openstudio::model::CoilWaterHeatingAirToWaterHeatPump":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_isNull(self)



    def get(self) -> "openstudio::model::CoilWaterHeatingAirToWaterHeatPump":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_get(self)



    def set(self, t: 'CoilWaterHeatingAirToWaterHeatPump') -> "void":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilWaterHeatingAirToWaterHeatPump

    __del__ = lambda self: None

OptionalCoilWaterHeatingAirToWaterHeatPump_swigregister = _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPump_swigregister

OptionalCoilWaterHeatingAirToWaterHeatPump_swigregister(OptionalCoilWaterHeatingAirToWaterHeatPump)



class CoilWaterHeatingAirToWaterHeatPumpWrappedVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilWaterHeatingAirToWaterHeatPumpWrappedVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoilWaterHeatingAirToWaterHeatPumpWrappedVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::value_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::difference_type', j: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::difference_type') -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped > > *":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::difference_type', j: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::difference_type') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::value_type const &":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector___setitem__(self, *args)



    def append(self, x: 'CoilWaterHeatingAirToWaterHeatPumpWrapped') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_clear(self)



    def swap(self, v: 'CoilWaterHeatingAirToWaterHeatPumpWrappedVector') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::allocator_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::reverse_iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::reverse_iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::iterator":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilWaterHeatingAirToWaterHeatPumpWrappedVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoilWaterHeatingAirToWaterHeatPumpWrapped') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::value_type const &":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::value_type const &":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type', x: 'CoilWaterHeatingAirToWaterHeatPumpWrapped') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type', x: 'CoilWaterHeatingAirToWaterHeatPumpWrapped') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type') -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >::size_type":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilWaterHeatingAirToWaterHeatPumpWrappedVector

    __del__ = lambda self: None

CoilWaterHeatingAirToWaterHeatPumpWrappedVector_swigregister = _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrappedVector_swigregister

CoilWaterHeatingAirToWaterHeatPumpWrappedVector_swigregister(CoilWaterHeatingAirToWaterHeatPumpWrappedVector)



class OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_reset(self)



    def __ref__(self) -> "openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_isNull(self)



    def get(self) -> "openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_get(self)



    def set(self, t: 'CoilWaterHeatingAirToWaterHeatPumpWrapped') -> "void":

        return _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped

    __del__ = lambda self: None

OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_swigregister = _openstudiomodelhvac.OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_swigregister

OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped_swigregister(OptionalCoilWaterHeatingAirToWaterHeatPumpWrapped)



class CoolingTowerPerformanceCoolToolsVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoolingTowerPerformanceCoolToolsVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoolingTowerPerformanceCoolToolsVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::value_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::difference_type', j: 'std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::difference_type') -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools,std::allocator< openstudio::model::CoolingTowerPerformanceCoolTools > > *":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::difference_type', j: 'std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::difference_type') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::value_type const &":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector___setitem__(self, *args)



    def append(self, x: 'CoolingTowerPerformanceCoolTools') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_clear(self)



    def swap(self, v: 'CoolingTowerPerformanceCoolToolsVector') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::allocator_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::reverse_iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::reverse_iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoolingTowerPerformanceCoolToolsVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoolingTowerPerformanceCoolTools') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::value_type const &":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::value_type const &":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type', x: 'CoolingTowerPerformanceCoolTools') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type', x: 'CoolingTowerPerformanceCoolTools') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools >::size_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoolingTowerPerformanceCoolToolsVector

    __del__ = lambda self: None

CoolingTowerPerformanceCoolToolsVector_swigregister = _openstudiomodelhvac.CoolingTowerPerformanceCoolToolsVector_swigregister

CoolingTowerPerformanceCoolToolsVector_swigregister(CoolingTowerPerformanceCoolToolsVector)



class OptionalCoolingTowerPerformanceCoolTools(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoolingTowerPerformanceCoolTools, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoolingTowerPerformanceCoolTools, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoolingTowerPerformanceCoolTools(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_reset(self)



    def __ref__(self) -> "openstudio::model::CoolingTowerPerformanceCoolTools":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_isNull(self)



    def get(self) -> "openstudio::model::CoolingTowerPerformanceCoolTools":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_get(self)



    def set(self, t: 'CoolingTowerPerformanceCoolTools') -> "void":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoolingTowerPerformanceCoolTools

    __del__ = lambda self: None

OptionalCoolingTowerPerformanceCoolTools_swigregister = _openstudiomodelhvac.OptionalCoolingTowerPerformanceCoolTools_swigregister

OptionalCoolingTowerPerformanceCoolTools_swigregister(OptionalCoolingTowerPerformanceCoolTools)



class CoolingTowerPerformanceYorkCalcVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoolingTowerPerformanceYorkCalcVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CoolingTowerPerformanceYorkCalcVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::value_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::difference_type', j: 'std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::difference_type') -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc,std::allocator< openstudio::model::CoolingTowerPerformanceYorkCalc > > *":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::difference_type', j: 'std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::difference_type') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::value_type const &":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector___setitem__(self, *args)



    def append(self, x: 'CoolingTowerPerformanceYorkCalc') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_clear(self)



    def swap(self, v: 'CoolingTowerPerformanceYorkCalcVector') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::allocator_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::reverse_iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::reverse_iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::iterator":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoolingTowerPerformanceYorkCalcVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CoolingTowerPerformanceYorkCalc') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::value_type const &":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_front(self)



    def back(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::value_type const &":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type', x: 'CoolingTowerPerformanceYorkCalc') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type', x: 'CoolingTowerPerformanceYorkCalc') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type') -> "void":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc >::size_type":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_CoolingTowerPerformanceYorkCalcVector

    __del__ = lambda self: None

CoolingTowerPerformanceYorkCalcVector_swigregister = _openstudiomodelhvac.CoolingTowerPerformanceYorkCalcVector_swigregister

CoolingTowerPerformanceYorkCalcVector_swigregister(CoolingTowerPerformanceYorkCalcVector)



class OptionalCoolingTowerPerformanceYorkCalc(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCoolingTowerPerformanceYorkCalc, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCoolingTowerPerformanceYorkCalc, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalCoolingTowerPerformanceYorkCalc(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_reset(self)



    def __ref__(self) -> "openstudio::model::CoolingTowerPerformanceYorkCalc":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_isNull(self)



    def get(self) -> "openstudio::model::CoolingTowerPerformanceYorkCalc":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_get(self)



    def set(self, t: 'CoolingTowerPerformanceYorkCalc') -> "void":

        return _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalCoolingTowerPerformanceYorkCalc

    __del__ = lambda self: None

OptionalCoolingTowerPerformanceYorkCalc_swigregister = _openstudiomodelhvac.OptionalCoolingTowerPerformanceYorkCalc_swigregister

OptionalCoolingTowerPerformanceYorkCalc_swigregister(OptionalCoolingTowerPerformanceYorkCalc)



class UnitarySystemPerformanceMultispeedVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitarySystemPerformanceMultispeedVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, UnitarySystemPerformanceMultispeedVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::value_type":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::difference_type', j: 'std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::difference_type') -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed,std::allocator< openstudio::model::UnitarySystemPerformanceMultispeed > > *":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::difference_type', j: 'std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::difference_type') -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::value_type const &":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector___setitem__(self, *args)



    def append(self, x: 'UnitarySystemPerformanceMultispeed') -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_clear(self)



    def swap(self, v: 'UnitarySystemPerformanceMultispeedVector') -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::allocator_type":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::iterator":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::iterator":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::reverse_iterator":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::reverse_iterator":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::iterator":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_UnitarySystemPerformanceMultispeedVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'UnitarySystemPerformanceMultispeed') -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::value_type const &":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_front(self)



    def back(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::value_type const &":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type', x: 'UnitarySystemPerformanceMultispeed') -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type', x: 'UnitarySystemPerformanceMultispeed') -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type') -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed >::size_type":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_UnitarySystemPerformanceMultispeedVector

    __del__ = lambda self: None

UnitarySystemPerformanceMultispeedVector_swigregister = _openstudiomodelhvac.UnitarySystemPerformanceMultispeedVector_swigregister

UnitarySystemPerformanceMultispeedVector_swigregister(UnitarySystemPerformanceMultispeedVector)



class OptionalUnitarySystemPerformanceMultispeed(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalUnitarySystemPerformanceMultispeed, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalUnitarySystemPerformanceMultispeed, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalUnitarySystemPerformanceMultispeed(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_reset(self)



    def __ref__(self) -> "openstudio::model::UnitarySystemPerformanceMultispeed":

        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_isNull(self)



    def get(self) -> "openstudio::model::UnitarySystemPerformanceMultispeed":

        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_get(self)



    def set(self, t: 'UnitarySystemPerformanceMultispeed') -> "void":

        return _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalUnitarySystemPerformanceMultispeed

    __del__ = lambda self: None

OptionalUnitarySystemPerformanceMultispeed_swigregister = _openstudiomodelhvac.OptionalUnitarySystemPerformanceMultispeed_swigregister

OptionalUnitarySystemPerformanceMultispeed_swigregister(OptionalUnitarySystemPerformanceMultispeed)



class ZoneMixingVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneMixingVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneMixingVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ZoneMixingVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ZoneMixingVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ZoneMixingVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ZoneMixing >::size_type":

        return _openstudiomodelhvac.ZoneMixingVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ZoneMixing >::value_type":

        return _openstudiomodelhvac.ZoneMixingVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneMixing >::difference_type', j: 'std::vector< openstudio::model::ZoneMixing >::difference_type') -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > > *":

        return _openstudiomodelhvac.ZoneMixingVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneMixingVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneMixing >::difference_type', j: 'std::vector< openstudio::model::ZoneMixing >::difference_type') -> "void":

        return _openstudiomodelhvac.ZoneMixingVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneMixingVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneMixing >::value_type const &":

        return _openstudiomodelhvac.ZoneMixingVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneMixingVector___setitem__(self, *args)



    def append(self, x: 'ZoneMixing') -> "void":

        return _openstudiomodelhvac.ZoneMixingVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ZoneMixingVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ZoneMixing >::size_type":

        return _openstudiomodelhvac.ZoneMixingVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ZoneMixingVector_clear(self)



    def swap(self, v: 'ZoneMixingVector') -> "void":

        return _openstudiomodelhvac.ZoneMixingVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ZoneMixing >::allocator_type":

        return _openstudiomodelhvac.ZoneMixingVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ZoneMixing >::iterator":

        return _openstudiomodelhvac.ZoneMixingVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ZoneMixing >::iterator":

        return _openstudiomodelhvac.ZoneMixingVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ZoneMixing >::reverse_iterator":

        return _openstudiomodelhvac.ZoneMixingVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ZoneMixing >::reverse_iterator":

        return _openstudiomodelhvac.ZoneMixingVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ZoneMixingVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ZoneMixing >::iterator":

        return _openstudiomodelhvac.ZoneMixingVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ZoneMixingVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ZoneMixing') -> "void":

        return _openstudiomodelhvac.ZoneMixingVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ZoneMixing >::value_type const &":

        return _openstudiomodelhvac.ZoneMixingVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ZoneMixing >::value_type const &":

        return _openstudiomodelhvac.ZoneMixingVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ZoneMixing >::size_type', x: 'ZoneMixing') -> "void":

        return _openstudiomodelhvac.ZoneMixingVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ZoneMixing >::size_type', x: 'ZoneMixing') -> "void":

        return _openstudiomodelhvac.ZoneMixingVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneMixingVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ZoneMixing >::size_type') -> "void":

        return _openstudiomodelhvac.ZoneMixingVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ZoneMixing >::size_type":

        return _openstudiomodelhvac.ZoneMixingVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneMixingVector

    __del__ = lambda self: None

ZoneMixingVector_swigregister = _openstudiomodelhvac.ZoneMixingVector_swigregister

ZoneMixingVector_swigregister(ZoneMixingVector)



class OptionalZoneMixing(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneMixing, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneMixing, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalZoneMixing(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalZoneMixing_reset(self)



    def __ref__(self) -> "openstudio::model::ZoneMixing":

        return _openstudiomodelhvac.OptionalZoneMixing___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneMixing_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneMixing_isNull(self)



    def get(self) -> "openstudio::model::ZoneMixing":

        return _openstudiomodelhvac.OptionalZoneMixing_get(self)



    def set(self, t: 'ZoneMixing') -> "void":

        return _openstudiomodelhvac.OptionalZoneMixing_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneMixing

    __del__ = lambda self: None

OptionalZoneMixing_swigregister = _openstudiomodelhvac.OptionalZoneMixing_swigregister

OptionalZoneMixing_swigregister(OptionalZoneMixing)



class ZoneVentilationDesignFlowRateVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneVentilationDesignFlowRateVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneVentilationDesignFlowRateVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::value_type":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::difference_type', j: 'std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::difference_type') -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate,std::allocator< openstudio::model::ZoneVentilationDesignFlowRate > > *":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::difference_type', j: 'std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::difference_type') -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::value_type const &":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector___setitem__(self, *args)



    def append(self, x: 'ZoneVentilationDesignFlowRate') -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_clear(self)



    def swap(self, v: 'ZoneVentilationDesignFlowRateVector') -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::allocator_type":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::iterator":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::iterator":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::reverse_iterator":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::reverse_iterator":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::iterator":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ZoneVentilationDesignFlowRateVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ZoneVentilationDesignFlowRate') -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::value_type const &":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::value_type const &":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type', x: 'ZoneVentilationDesignFlowRate') -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type', x: 'ZoneVentilationDesignFlowRate') -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type') -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate >::size_type":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneVentilationDesignFlowRateVector

    __del__ = lambda self: None

ZoneVentilationDesignFlowRateVector_swigregister = _openstudiomodelhvac.ZoneVentilationDesignFlowRateVector_swigregister

ZoneVentilationDesignFlowRateVector_swigregister(ZoneVentilationDesignFlowRateVector)



class OptionalZoneVentilationDesignFlowRate(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalZoneVentilationDesignFlowRate, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalZoneVentilationDesignFlowRate, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalZoneVentilationDesignFlowRate(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_reset(self)



    def __ref__(self) -> "openstudio::model::ZoneVentilationDesignFlowRate":

        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_isNull(self)



    def get(self) -> "openstudio::model::ZoneVentilationDesignFlowRate":

        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_get(self)



    def set(self, t: 'ZoneVentilationDesignFlowRate') -> "void":

        return _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalZoneVentilationDesignFlowRate

    __del__ = lambda self: None

OptionalZoneVentilationDesignFlowRate_swigregister = _openstudiomodelhvac.OptionalZoneVentilationDesignFlowRate_swigregister

OptionalZoneVentilationDesignFlowRate_swigregister(OptionalZoneVentilationDesignFlowRate)



class WaterHeaterMixedVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterHeaterMixedVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WaterHeaterMixedVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.WaterHeaterMixedVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixedVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixedVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::size_type":

        return _openstudiomodelhvac.WaterHeaterMixedVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::value_type":

        return _openstudiomodelhvac.WaterHeaterMixedVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::WaterHeaterMixed >::difference_type', j: 'std::vector< openstudio::model::WaterHeaterMixed >::difference_type') -> "std::vector< openstudio::model::WaterHeaterMixed,std::allocator< openstudio::model::WaterHeaterMixed > > *":

        return _openstudiomodelhvac.WaterHeaterMixedVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::WaterHeaterMixed >::difference_type', j: 'std::vector< openstudio::model::WaterHeaterMixed >::difference_type') -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterHeaterMixed >::value_type const &":

        return _openstudiomodelhvac.WaterHeaterMixedVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector___setitem__(self, *args)



    def append(self, x: 'WaterHeaterMixed') -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixedVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::size_type":

        return _openstudiomodelhvac.WaterHeaterMixedVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector_clear(self)



    def swap(self, v: 'WaterHeaterMixedVector') -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::allocator_type":

        return _openstudiomodelhvac.WaterHeaterMixedVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::iterator":

        return _openstudiomodelhvac.WaterHeaterMixedVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::iterator":

        return _openstudiomodelhvac.WaterHeaterMixedVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::reverse_iterator":

        return _openstudiomodelhvac.WaterHeaterMixedVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::reverse_iterator":

        return _openstudiomodelhvac.WaterHeaterMixedVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::WaterHeaterMixed >::iterator":

        return _openstudiomodelhvac.WaterHeaterMixedVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_WaterHeaterMixedVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WaterHeaterMixed') -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::value_type const &":

        return _openstudiomodelhvac.WaterHeaterMixedVector_front(self)



    def back(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::value_type const &":

        return _openstudiomodelhvac.WaterHeaterMixedVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::WaterHeaterMixed >::size_type', x: 'WaterHeaterMixed') -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::WaterHeaterMixed >::size_type', x: 'WaterHeaterMixed') -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::WaterHeaterMixed >::size_type') -> "void":

        return _openstudiomodelhvac.WaterHeaterMixedVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::WaterHeaterMixed >::size_type":

        return _openstudiomodelhvac.WaterHeaterMixedVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterHeaterMixedVector

    __del__ = lambda self: None

WaterHeaterMixedVector_swigregister = _openstudiomodelhvac.WaterHeaterMixedVector_swigregister

WaterHeaterMixedVector_swigregister(WaterHeaterMixedVector)



class OptionalWaterHeaterMixed(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWaterHeaterMixed, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWaterHeaterMixed, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalWaterHeaterMixed(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalWaterHeaterMixed_reset(self)



    def __ref__(self) -> "openstudio::model::WaterHeaterMixed":

        return _openstudiomodelhvac.OptionalWaterHeaterMixed___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterHeaterMixed_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterHeaterMixed_isNull(self)



    def get(self) -> "openstudio::model::WaterHeaterMixed":

        return _openstudiomodelhvac.OptionalWaterHeaterMixed_get(self)



    def set(self, t: 'WaterHeaterMixed') -> "void":

        return _openstudiomodelhvac.OptionalWaterHeaterMixed_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterHeaterMixed

    __del__ = lambda self: None

OptionalWaterHeaterMixed_swigregister = _openstudiomodelhvac.OptionalWaterHeaterMixed_swigregister

OptionalWaterHeaterMixed_swigregister(OptionalWaterHeaterMixed)



class WaterHeaterStratifiedVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterHeaterStratifiedVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WaterHeaterStratifiedVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::size_type":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::value_type":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::WaterHeaterStratified >::difference_type', j: 'std::vector< openstudio::model::WaterHeaterStratified >::difference_type') -> "std::vector< openstudio::model::WaterHeaterStratified,std::allocator< openstudio::model::WaterHeaterStratified > > *":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::WaterHeaterStratified >::difference_type', j: 'std::vector< openstudio::model::WaterHeaterStratified >::difference_type') -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterHeaterStratified >::value_type const &":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector___setitem__(self, *args)



    def append(self, x: 'WaterHeaterStratified') -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::size_type":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_clear(self)



    def swap(self, v: 'WaterHeaterStratifiedVector') -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::allocator_type":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::iterator":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::iterator":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::reverse_iterator":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::reverse_iterator":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::WaterHeaterStratified >::iterator":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_WaterHeaterStratifiedVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WaterHeaterStratified') -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::value_type const &":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_front(self)



    def back(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::value_type const &":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::WaterHeaterStratified >::size_type', x: 'WaterHeaterStratified') -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::WaterHeaterStratified >::size_type', x: 'WaterHeaterStratified') -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::WaterHeaterStratified >::size_type') -> "void":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::WaterHeaterStratified >::size_type":

        return _openstudiomodelhvac.WaterHeaterStratifiedVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterHeaterStratifiedVector

    __del__ = lambda self: None

WaterHeaterStratifiedVector_swigregister = _openstudiomodelhvac.WaterHeaterStratifiedVector_swigregister

WaterHeaterStratifiedVector_swigregister(WaterHeaterStratifiedVector)



class OptionalWaterHeaterStratified(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWaterHeaterStratified, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWaterHeaterStratified, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalWaterHeaterStratified(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalWaterHeaterStratified_reset(self)



    def __ref__(self) -> "openstudio::model::WaterHeaterStratified":

        return _openstudiomodelhvac.OptionalWaterHeaterStratified___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterHeaterStratified_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterHeaterStratified_isNull(self)



    def get(self) -> "openstudio::model::WaterHeaterStratified":

        return _openstudiomodelhvac.OptionalWaterHeaterStratified_get(self)



    def set(self, t: 'WaterHeaterStratified') -> "void":

        return _openstudiomodelhvac.OptionalWaterHeaterStratified_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterHeaterStratified

    __del__ = lambda self: None

OptionalWaterHeaterStratified_swigregister = _openstudiomodelhvac.OptionalWaterHeaterStratified_swigregister

OptionalWaterHeaterStratified_swigregister(OptionalWaterHeaterStratified)



class WaterUseEquipmentDefinitionVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterUseEquipmentDefinitionVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WaterUseEquipmentDefinitionVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::value_type":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::WaterUseEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::WaterUseEquipmentDefinition >::difference_type') -> "std::vector< openstudio::model::WaterUseEquipmentDefinition,std::allocator< openstudio::model::WaterUseEquipmentDefinition > > *":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::WaterUseEquipmentDefinition >::difference_type', j: 'std::vector< openstudio::model::WaterUseEquipmentDefinition >::difference_type') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::value_type const &":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector___setitem__(self, *args)



    def append(self, x: 'WaterUseEquipmentDefinition') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_clear(self)



    def swap(self, v: 'WaterUseEquipmentDefinitionVector') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::allocator_type":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::iterator":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::iterator":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::reverse_iterator":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::reverse_iterator":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::iterator":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_WaterUseEquipmentDefinitionVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WaterUseEquipmentDefinition') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::value_type const &":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_front(self)



    def back(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::value_type const &":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type', x: 'WaterUseEquipmentDefinition') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type', x: 'WaterUseEquipmentDefinition') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::WaterUseEquipmentDefinition >::size_type":

        return _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterUseEquipmentDefinitionVector

    __del__ = lambda self: None

WaterUseEquipmentDefinitionVector_swigregister = _openstudiomodelhvac.WaterUseEquipmentDefinitionVector_swigregister

WaterUseEquipmentDefinitionVector_swigregister(WaterUseEquipmentDefinitionVector)



class OptionalWaterUseEquipmentDefinition(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWaterUseEquipmentDefinition, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWaterUseEquipmentDefinition, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalWaterUseEquipmentDefinition(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_reset(self)



    def __ref__(self) -> "openstudio::model::WaterUseEquipmentDefinition":

        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_isNull(self)



    def get(self) -> "openstudio::model::WaterUseEquipmentDefinition":

        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_get(self)



    def set(self, t: 'WaterUseEquipmentDefinition') -> "void":

        return _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterUseEquipmentDefinition

    __del__ = lambda self: None

OptionalWaterUseEquipmentDefinition_swigregister = _openstudiomodelhvac.OptionalWaterUseEquipmentDefinition_swigregister

OptionalWaterUseEquipmentDefinition_swigregister(OptionalWaterUseEquipmentDefinition)



class WaterUseEquipmentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterUseEquipmentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WaterUseEquipmentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.WaterUseEquipmentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::WaterUseEquipment >::size_type":

        return _openstudiomodelhvac.WaterUseEquipmentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::WaterUseEquipment >::value_type":

        return _openstudiomodelhvac.WaterUseEquipmentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::WaterUseEquipment >::difference_type', j: 'std::vector< openstudio::model::WaterUseEquipment >::difference_type') -> "std::vector< openstudio::model::WaterUseEquipment,std::allocator< openstudio::model::WaterUseEquipment > > *":

        return _openstudiomodelhvac.WaterUseEquipmentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::WaterUseEquipment >::difference_type', j: 'std::vector< openstudio::model::WaterUseEquipment >::difference_type') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::WaterUseEquipment >::value_type const &":

        return _openstudiomodelhvac.WaterUseEquipmentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector___setitem__(self, *args)



    def append(self, x: 'WaterUseEquipment') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::WaterUseEquipment >::size_type":

        return _openstudiomodelhvac.WaterUseEquipmentVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector_clear(self)



    def swap(self, v: 'WaterUseEquipmentVector') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::WaterUseEquipment >::allocator_type":

        return _openstudiomodelhvac.WaterUseEquipmentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::WaterUseEquipment >::iterator":

        return _openstudiomodelhvac.WaterUseEquipmentVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::WaterUseEquipment >::iterator":

        return _openstudiomodelhvac.WaterUseEquipmentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::WaterUseEquipment >::reverse_iterator":

        return _openstudiomodelhvac.WaterUseEquipmentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::WaterUseEquipment >::reverse_iterator":

        return _openstudiomodelhvac.WaterUseEquipmentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::WaterUseEquipment >::iterator":

        return _openstudiomodelhvac.WaterUseEquipmentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_WaterUseEquipmentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WaterUseEquipment') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::WaterUseEquipment >::value_type const &":

        return _openstudiomodelhvac.WaterUseEquipmentVector_front(self)



    def back(self) -> "std::vector< openstudio::model::WaterUseEquipment >::value_type const &":

        return _openstudiomodelhvac.WaterUseEquipmentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::WaterUseEquipment >::size_type', x: 'WaterUseEquipment') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::WaterUseEquipment >::size_type', x: 'WaterUseEquipment') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::WaterUseEquipment >::size_type') -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::WaterUseEquipment >::size_type":

        return _openstudiomodelhvac.WaterUseEquipmentVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterUseEquipmentVector

    __del__ = lambda self: None

WaterUseEquipmentVector_swigregister = _openstudiomodelhvac.WaterUseEquipmentVector_swigregister

WaterUseEquipmentVector_swigregister(WaterUseEquipmentVector)



class OptionalWaterUseEquipment(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWaterUseEquipment, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWaterUseEquipment, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalWaterUseEquipment(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalWaterUseEquipment_reset(self)



    def __ref__(self) -> "openstudio::model::WaterUseEquipment":

        return _openstudiomodelhvac.OptionalWaterUseEquipment___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterUseEquipment_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalWaterUseEquipment_isNull(self)



    def get(self) -> "openstudio::model::WaterUseEquipment":

        return _openstudiomodelhvac.OptionalWaterUseEquipment_get(self)



    def set(self, t: 'WaterUseEquipment') -> "void":

        return _openstudiomodelhvac.OptionalWaterUseEquipment_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalWaterUseEquipment

    __del__ = lambda self: None

OptionalWaterUseEquipment_swigregister = _openstudiomodelhvac.OptionalWaterUseEquipment_swigregister

OptionalWaterUseEquipment_swigregister(OptionalWaterUseEquipment)



class HeatExchangerAirToAirSensibleAndLatentVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatExchangerAirToAirSensibleAndLatentVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, HeatExchangerAirToAirSensibleAndLatentVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::value_type":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::difference_type', j: 'std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::difference_type') -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent,std::allocator< openstudio::model::HeatExchangerAirToAirSensibleAndLatent > > *":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::difference_type', j: 'std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::difference_type') -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::value_type const &":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector___setitem__(self, *args)



    def append(self, x: 'HeatExchangerAirToAirSensibleAndLatent') -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_clear(self)



    def swap(self, v: 'HeatExchangerAirToAirSensibleAndLatentVector') -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::allocator_type":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::iterator":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::iterator":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::reverse_iterator":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::reverse_iterator":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::iterator":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_HeatExchangerAirToAirSensibleAndLatentVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'HeatExchangerAirToAirSensibleAndLatent') -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::value_type const &":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_front(self)



    def back(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::value_type const &":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type', x: 'HeatExchangerAirToAirSensibleAndLatent') -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type', x: 'HeatExchangerAirToAirSensibleAndLatent') -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type') -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >::size_type":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_HeatExchangerAirToAirSensibleAndLatentVector

    __del__ = lambda self: None

HeatExchangerAirToAirSensibleAndLatentVector_swigregister = _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatentVector_swigregister

HeatExchangerAirToAirSensibleAndLatentVector_swigregister(HeatExchangerAirToAirSensibleAndLatentVector)



class OptionalHeatExchangerAirToAirSensibleAndLatent(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalHeatExchangerAirToAirSensibleAndLatent, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalHeatExchangerAirToAirSensibleAndLatent, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalHeatExchangerAirToAirSensibleAndLatent(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_reset(self)



    def __ref__(self) -> "openstudio::model::HeatExchangerAirToAirSensibleAndLatent":

        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_isNull(self)



    def get(self) -> "openstudio::model::HeatExchangerAirToAirSensibleAndLatent":

        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_get(self)



    def set(self, t: 'HeatExchangerAirToAirSensibleAndLatent') -> "void":

        return _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHeatExchangerAirToAirSensibleAndLatent

    __del__ = lambda self: None

OptionalHeatExchangerAirToAirSensibleAndLatent_swigregister = _openstudiomodelhvac.OptionalHeatExchangerAirToAirSensibleAndLatent_swigregister

OptionalHeatExchangerAirToAirSensibleAndLatent_swigregister(OptionalHeatExchangerAirToAirSensibleAndLatent)



class HeatExchangerFluidToFluidVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatExchangerFluidToFluidVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, HeatExchangerFluidToFluidVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::value_type":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::HeatExchangerFluidToFluid >::difference_type', j: 'std::vector< openstudio::model::HeatExchangerFluidToFluid >::difference_type') -> "std::vector< openstudio::model::HeatExchangerFluidToFluid,std::allocator< openstudio::model::HeatExchangerFluidToFluid > > *":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::HeatExchangerFluidToFluid >::difference_type', j: 'std::vector< openstudio::model::HeatExchangerFluidToFluid >::difference_type') -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::value_type const &":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector___setitem__(self, *args)



    def append(self, x: 'HeatExchangerFluidToFluid') -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_clear(self)



    def swap(self, v: 'HeatExchangerFluidToFluidVector') -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::allocator_type":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::iterator":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::iterator":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::reverse_iterator":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::reverse_iterator":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::iterator":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_HeatExchangerFluidToFluidVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'HeatExchangerFluidToFluid') -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::value_type const &":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_front(self)



    def back(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::value_type const &":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type', x: 'HeatExchangerFluidToFluid') -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type', x: 'HeatExchangerFluidToFluid') -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type') -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::HeatExchangerFluidToFluid >::size_type":

        return _openstudiomodelhvac.HeatExchangerFluidToFluidVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_HeatExchangerFluidToFluidVector

    __del__ = lambda self: None

HeatExchangerFluidToFluidVector_swigregister = _openstudiomodelhvac.HeatExchangerFluidToFluidVector_swigregister

HeatExchangerFluidToFluidVector_swigregister(HeatExchangerFluidToFluidVector)



class OptionalHeatExchangerFluidToFluid(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalHeatExchangerFluidToFluid, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalHeatExchangerFluidToFluid, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalHeatExchangerFluidToFluid(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_reset(self)



    def __ref__(self) -> "openstudio::model::HeatExchangerFluidToFluid":

        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_isNull(self)



    def get(self) -> "openstudio::model::HeatExchangerFluidToFluid":

        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_get(self)



    def set(self, t: 'HeatExchangerFluidToFluid') -> "void":

        return _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHeatExchangerFluidToFluid

    __del__ = lambda self: None

OptionalHeatExchangerFluidToFluid_swigregister = _openstudiomodelhvac.OptionalHeatExchangerFluidToFluid_swigregister

OptionalHeatExchangerFluidToFluid_swigregister(OptionalHeatExchangerFluidToFluid)



class HeatPumpWaterToWaterEquationFitCoolingVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatPumpWaterToWaterEquationFitCoolingVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, HeatPumpWaterToWaterEquationFitCoolingVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::value_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::difference_type', j: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::difference_type') -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitCooling > > *":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::difference_type', j: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::difference_type') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::value_type const &":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector___setitem__(self, *args)



    def append(self, x: 'HeatPumpWaterToWaterEquationFitCooling') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_clear(self)



    def swap(self, v: 'HeatPumpWaterToWaterEquationFitCoolingVector') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::allocator_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::reverse_iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::reverse_iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_HeatPumpWaterToWaterEquationFitCoolingVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'HeatPumpWaterToWaterEquationFitCooling') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::value_type const &":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_front(self)



    def back(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::value_type const &":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type', x: 'HeatPumpWaterToWaterEquationFitCooling') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type', x: 'HeatPumpWaterToWaterEquationFitCooling') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >::size_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_HeatPumpWaterToWaterEquationFitCoolingVector

    __del__ = lambda self: None

HeatPumpWaterToWaterEquationFitCoolingVector_swigregister = _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCoolingVector_swigregister

HeatPumpWaterToWaterEquationFitCoolingVector_swigregister(HeatPumpWaterToWaterEquationFitCoolingVector)



class OptionalHeatPumpWaterToWaterEquationFitCooling(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalHeatPumpWaterToWaterEquationFitCooling, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalHeatPumpWaterToWaterEquationFitCooling, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalHeatPumpWaterToWaterEquationFitCooling(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_reset(self)



    def __ref__(self) -> "openstudio::model::HeatPumpWaterToWaterEquationFitCooling":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_isNull(self)



    def get(self) -> "openstudio::model::HeatPumpWaterToWaterEquationFitCooling":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_get(self)



    def set(self, t: 'HeatPumpWaterToWaterEquationFitCooling') -> "void":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHeatPumpWaterToWaterEquationFitCooling

    __del__ = lambda self: None

OptionalHeatPumpWaterToWaterEquationFitCooling_swigregister = _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitCooling_swigregister

OptionalHeatPumpWaterToWaterEquationFitCooling_swigregister(OptionalHeatPumpWaterToWaterEquationFitCooling)



class HeatPumpWaterToWaterEquationFitHeatingVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatPumpWaterToWaterEquationFitHeatingVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, HeatPumpWaterToWaterEquationFitHeatingVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::value_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::difference_type', j: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::difference_type') -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitHeating > > *":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::difference_type', j: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::difference_type') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::value_type const &":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector___setitem__(self, *args)



    def append(self, x: 'HeatPumpWaterToWaterEquationFitHeating') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_clear(self)



    def swap(self, v: 'HeatPumpWaterToWaterEquationFitHeatingVector') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::allocator_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::reverse_iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::reverse_iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::iterator":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_HeatPumpWaterToWaterEquationFitHeatingVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'HeatPumpWaterToWaterEquationFitHeating') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::value_type const &":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_front(self)



    def back(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::value_type const &":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type', x: 'HeatPumpWaterToWaterEquationFitHeating') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type', x: 'HeatPumpWaterToWaterEquationFitHeating') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type') -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >::size_type":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_HeatPumpWaterToWaterEquationFitHeatingVector

    __del__ = lambda self: None

HeatPumpWaterToWaterEquationFitHeatingVector_swigregister = _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeatingVector_swigregister

HeatPumpWaterToWaterEquationFitHeatingVector_swigregister(HeatPumpWaterToWaterEquationFitHeatingVector)



class OptionalHeatPumpWaterToWaterEquationFitHeating(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalHeatPumpWaterToWaterEquationFitHeating, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalHeatPumpWaterToWaterEquationFitHeating, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalHeatPumpWaterToWaterEquationFitHeating(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_reset(self)



    def __ref__(self) -> "openstudio::model::HeatPumpWaterToWaterEquationFitHeating":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_isNull(self)



    def get(self) -> "openstudio::model::HeatPumpWaterToWaterEquationFitHeating":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_get(self)



    def set(self, t: 'HeatPumpWaterToWaterEquationFitHeating') -> "void":

        return _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalHeatPumpWaterToWaterEquationFitHeating

    __del__ = lambda self: None

OptionalHeatPumpWaterToWaterEquationFitHeating_swigregister = _openstudiomodelhvac.OptionalHeatPumpWaterToWaterEquationFitHeating_swigregister

OptionalHeatPumpWaterToWaterEquationFitHeating_swigregister(OptionalHeatPumpWaterToWaterEquationFitHeating)



class ThermalStorageChilledWaterStratifiedVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermalStorageChilledWaterStratifiedVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ThermalStorageChilledWaterStratifiedVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::value_type":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::difference_type', j: 'std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::difference_type') -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified,std::allocator< openstudio::model::ThermalStorageChilledWaterStratified > > *":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::difference_type', j: 'std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::difference_type') -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::value_type const &":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector___setitem__(self, *args)



    def append(self, x: 'ThermalStorageChilledWaterStratified') -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_clear(self)



    def swap(self, v: 'ThermalStorageChilledWaterStratifiedVector') -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::allocator_type":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::iterator":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::iterator":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::reverse_iterator":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::reverse_iterator":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::iterator":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ThermalStorageChilledWaterStratifiedVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ThermalStorageChilledWaterStratified') -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::value_type const &":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::value_type const &":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type', x: 'ThermalStorageChilledWaterStratified') -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type', x: 'ThermalStorageChilledWaterStratified') -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type') -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified >::size_type":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ThermalStorageChilledWaterStratifiedVector

    __del__ = lambda self: None

ThermalStorageChilledWaterStratifiedVector_swigregister = _openstudiomodelhvac.ThermalStorageChilledWaterStratifiedVector_swigregister

ThermalStorageChilledWaterStratifiedVector_swigregister(ThermalStorageChilledWaterStratifiedVector)



class OptionalThermalStorageChilledWaterStratified(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalThermalStorageChilledWaterStratified, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalThermalStorageChilledWaterStratified, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalThermalStorageChilledWaterStratified(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_reset(self)



    def __ref__(self) -> "openstudio::model::ThermalStorageChilledWaterStratified":

        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_isNull(self)



    def get(self) -> "openstudio::model::ThermalStorageChilledWaterStratified":

        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_get(self)



    def set(self, t: 'ThermalStorageChilledWaterStratified') -> "void":

        return _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalThermalStorageChilledWaterStratified

    __del__ = lambda self: None

OptionalThermalStorageChilledWaterStratified_swigregister = _openstudiomodelhvac.OptionalThermalStorageChilledWaterStratified_swigregister

OptionalThermalStorageChilledWaterStratified_swigregister(OptionalThermalStorageChilledWaterStratified)



class ChillerAbsorptionIndirectVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ChillerAbsorptionIndirectVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ChillerAbsorptionIndirectVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::value_type":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ChillerAbsorptionIndirect >::difference_type', j: 'std::vector< openstudio::model::ChillerAbsorptionIndirect >::difference_type') -> "std::vector< openstudio::model::ChillerAbsorptionIndirect,std::allocator< openstudio::model::ChillerAbsorptionIndirect > > *":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ChillerAbsorptionIndirect >::difference_type', j: 'std::vector< openstudio::model::ChillerAbsorptionIndirect >::difference_type') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::value_type const &":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector___setitem__(self, *args)



    def append(self, x: 'ChillerAbsorptionIndirect') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_clear(self)



    def swap(self, v: 'ChillerAbsorptionIndirectVector') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::allocator_type":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::iterator":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::iterator":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::reverse_iterator":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::reverse_iterator":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::iterator":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ChillerAbsorptionIndirectVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ChillerAbsorptionIndirect') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::value_type const &":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::value_type const &":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type', x: 'ChillerAbsorptionIndirect') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type', x: 'ChillerAbsorptionIndirect') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ChillerAbsorptionIndirect >::size_type":

        return _openstudiomodelhvac.ChillerAbsorptionIndirectVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerAbsorptionIndirectVector

    __del__ = lambda self: None

ChillerAbsorptionIndirectVector_swigregister = _openstudiomodelhvac.ChillerAbsorptionIndirectVector_swigregister

ChillerAbsorptionIndirectVector_swigregister(ChillerAbsorptionIndirectVector)



class OptionalChillerAbsorptionIndirect(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalChillerAbsorptionIndirect, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalChillerAbsorptionIndirect, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalChillerAbsorptionIndirect(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_reset(self)



    def __ref__(self) -> "openstudio::model::ChillerAbsorptionIndirect":

        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_isNull(self)



    def get(self) -> "openstudio::model::ChillerAbsorptionIndirect":

        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_get(self)



    def set(self, t: 'ChillerAbsorptionIndirect') -> "void":

        return _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalChillerAbsorptionIndirect

    __del__ = lambda self: None

OptionalChillerAbsorptionIndirect_swigregister = _openstudiomodelhvac.OptionalChillerAbsorptionIndirect_swigregister

OptionalChillerAbsorptionIndirect_swigregister(OptionalChillerAbsorptionIndirect)



class ChillerAbsorptionVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ChillerAbsorptionVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ChillerAbsorptionVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.ChillerAbsorptionVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::ChillerAbsorption >::size_type":

        return _openstudiomodelhvac.ChillerAbsorptionVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::ChillerAbsorption >::value_type":

        return _openstudiomodelhvac.ChillerAbsorptionVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::ChillerAbsorption >::difference_type', j: 'std::vector< openstudio::model::ChillerAbsorption >::difference_type') -> "std::vector< openstudio::model::ChillerAbsorption,std::allocator< openstudio::model::ChillerAbsorption > > *":

        return _openstudiomodelhvac.ChillerAbsorptionVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::ChillerAbsorption >::difference_type', j: 'std::vector< openstudio::model::ChillerAbsorption >::difference_type') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::ChillerAbsorption >::value_type const &":

        return _openstudiomodelhvac.ChillerAbsorptionVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector___setitem__(self, *args)



    def append(self, x: 'ChillerAbsorption') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::ChillerAbsorption >::size_type":

        return _openstudiomodelhvac.ChillerAbsorptionVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector_clear(self)



    def swap(self, v: 'ChillerAbsorptionVector') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::ChillerAbsorption >::allocator_type":

        return _openstudiomodelhvac.ChillerAbsorptionVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::ChillerAbsorption >::iterator":

        return _openstudiomodelhvac.ChillerAbsorptionVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::ChillerAbsorption >::iterator":

        return _openstudiomodelhvac.ChillerAbsorptionVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::ChillerAbsorption >::reverse_iterator":

        return _openstudiomodelhvac.ChillerAbsorptionVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::ChillerAbsorption >::reverse_iterator":

        return _openstudiomodelhvac.ChillerAbsorptionVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::ChillerAbsorption >::iterator":

        return _openstudiomodelhvac.ChillerAbsorptionVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ChillerAbsorptionVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'ChillerAbsorption') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::ChillerAbsorption >::value_type const &":

        return _openstudiomodelhvac.ChillerAbsorptionVector_front(self)



    def back(self) -> "std::vector< openstudio::model::ChillerAbsorption >::value_type const &":

        return _openstudiomodelhvac.ChillerAbsorptionVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::ChillerAbsorption >::size_type', x: 'ChillerAbsorption') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::ChillerAbsorption >::size_type', x: 'ChillerAbsorption') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::ChillerAbsorption >::size_type') -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::ChillerAbsorption >::size_type":

        return _openstudiomodelhvac.ChillerAbsorptionVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerAbsorptionVector

    __del__ = lambda self: None

ChillerAbsorptionVector_swigregister = _openstudiomodelhvac.ChillerAbsorptionVector_swigregister

ChillerAbsorptionVector_swigregister(ChillerAbsorptionVector)



class OptionalChillerAbsorption(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalChillerAbsorption, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalChillerAbsorption, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalChillerAbsorption(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalChillerAbsorption_reset(self)



    def __ref__(self) -> "openstudio::model::ChillerAbsorption":

        return _openstudiomodelhvac.OptionalChillerAbsorption___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalChillerAbsorption_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalChillerAbsorption_isNull(self)



    def get(self) -> "openstudio::model::ChillerAbsorption":

        return _openstudiomodelhvac.OptionalChillerAbsorption_get(self)



    def set(self, t: 'ChillerAbsorption') -> "void":

        return _openstudiomodelhvac.OptionalChillerAbsorption_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalChillerAbsorption

    __del__ = lambda self: None

OptionalChillerAbsorption_swigregister = _openstudiomodelhvac.OptionalChillerAbsorption_swigregister

OptionalChillerAbsorption_swigregister(OptionalChillerAbsorption)



class SolarCollectorPerformanceFlatPlateVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SolarCollectorPerformanceFlatPlateVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SolarCollectorPerformanceFlatPlateVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::value_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::difference_type', j: 'std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::difference_type') -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate,std::allocator< openstudio::model::SolarCollectorPerformanceFlatPlate > > *":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::difference_type', j: 'std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::difference_type') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::value_type const &":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector___setitem__(self, *args)



    def append(self, x: 'SolarCollectorPerformanceFlatPlate') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_clear(self)



    def swap(self, v: 'SolarCollectorPerformanceFlatPlateVector') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::allocator_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::reverse_iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::reverse_iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SolarCollectorPerformanceFlatPlateVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SolarCollectorPerformanceFlatPlate') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::value_type const &":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::value_type const &":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type', x: 'SolarCollectorPerformanceFlatPlate') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type', x: 'SolarCollectorPerformanceFlatPlate') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate >::size_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformanceFlatPlateVector

    __del__ = lambda self: None

SolarCollectorPerformanceFlatPlateVector_swigregister = _openstudiomodelhvac.SolarCollectorPerformanceFlatPlateVector_swigregister

SolarCollectorPerformanceFlatPlateVector_swigregister(SolarCollectorPerformanceFlatPlateVector)



class OptionalSolarCollectorPerformanceFlatPlate(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSolarCollectorPerformanceFlatPlate, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSolarCollectorPerformanceFlatPlate, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSolarCollectorPerformanceFlatPlate(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_reset(self)



    def __ref__(self) -> "openstudio::model::SolarCollectorPerformanceFlatPlate":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_isNull(self)



    def get(self) -> "openstudio::model::SolarCollectorPerformanceFlatPlate":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_get(self)



    def set(self, t: 'SolarCollectorPerformanceFlatPlate') -> "void":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSolarCollectorPerformanceFlatPlate

    __del__ = lambda self: None

OptionalSolarCollectorPerformanceFlatPlate_swigregister = _openstudiomodelhvac.OptionalSolarCollectorPerformanceFlatPlate_swigregister

OptionalSolarCollectorPerformanceFlatPlate_swigregister(OptionalSolarCollectorPerformanceFlatPlate)



class SolarCollectorPerformanceIntegralCollectorStorageVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SolarCollectorPerformanceIntegralCollectorStorageVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SolarCollectorPerformanceIntegralCollectorStorageVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::value_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::difference_type', j: 'std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::difference_type') -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage,std::allocator< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage > > *":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::difference_type', j: 'std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::difference_type') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::value_type const &":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector___setitem__(self, *args)



    def append(self, x: 'SolarCollectorPerformanceIntegralCollectorStorage') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_clear(self)



    def swap(self, v: 'SolarCollectorPerformanceIntegralCollectorStorageVector') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::allocator_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::reverse_iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::reverse_iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::iterator":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SolarCollectorPerformanceIntegralCollectorStorageVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SolarCollectorPerformanceIntegralCollectorStorage') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::value_type const &":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::value_type const &":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type', x: 'SolarCollectorPerformanceIntegralCollectorStorage') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type', x: 'SolarCollectorPerformanceIntegralCollectorStorage') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >::size_type":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformanceIntegralCollectorStorageVector

    __del__ = lambda self: None

SolarCollectorPerformanceIntegralCollectorStorageVector_swigregister = _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorageVector_swigregister

SolarCollectorPerformanceIntegralCollectorStorageVector_swigregister(SolarCollectorPerformanceIntegralCollectorStorageVector)



class OptionalSolarCollectorPerformanceIntegralCollectorStorage(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSolarCollectorPerformanceIntegralCollectorStorage, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSolarCollectorPerformanceIntegralCollectorStorage, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSolarCollectorPerformanceIntegralCollectorStorage(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_reset(self)



    def __ref__(self) -> "openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_isNull(self)



    def get(self) -> "openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_get(self)



    def set(self, t: 'SolarCollectorPerformanceIntegralCollectorStorage') -> "void":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSolarCollectorPerformanceIntegralCollectorStorage

    __del__ = lambda self: None

OptionalSolarCollectorPerformanceIntegralCollectorStorage_swigregister = _openstudiomodelhvac.OptionalSolarCollectorPerformanceIntegralCollectorStorage_swigregister

OptionalSolarCollectorPerformanceIntegralCollectorStorage_swigregister(OptionalSolarCollectorPerformanceIntegralCollectorStorage)



class SolarCollectorPerformancePhotovoltaicThermalSimpleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SolarCollectorPerformancePhotovoltaicThermalSimpleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SolarCollectorPerformancePhotovoltaicThermalSimpleVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::value_type":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::difference_type', j: 'std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::difference_type') -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple,std::allocator< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple > > *":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::difference_type', j: 'std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::difference_type') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::value_type const &":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector___setitem__(self, *args)



    def append(self, x: 'SolarCollectorPerformancePhotovoltaicThermalSimple') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_clear(self)



    def swap(self, v: 'SolarCollectorPerformancePhotovoltaicThermalSimpleVector') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::allocator_type":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::iterator":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::iterator":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::reverse_iterator":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::reverse_iterator":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::iterator":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SolarCollectorPerformancePhotovoltaicThermalSimpleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SolarCollectorPerformancePhotovoltaicThermalSimple') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::value_type const &":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::value_type const &":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type', x: 'SolarCollectorPerformancePhotovoltaicThermalSimple') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type', x: 'SolarCollectorPerformancePhotovoltaicThermalSimple') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type') -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >::size_type":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformancePhotovoltaicThermalSimpleVector

    __del__ = lambda self: None

SolarCollectorPerformancePhotovoltaicThermalSimpleVector_swigregister = _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimpleVector_swigregister

SolarCollectorPerformancePhotovoltaicThermalSimpleVector_swigregister(SolarCollectorPerformancePhotovoltaicThermalSimpleVector)



class OptionalSolarCollectorPerformancePhotovoltaicThermalSimple(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSolarCollectorPerformancePhotovoltaicThermalSimple, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSolarCollectorPerformancePhotovoltaicThermalSimple, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSolarCollectorPerformancePhotovoltaicThermalSimple(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_reset(self)



    def __ref__(self) -> "openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_isNull(self)



    def get(self) -> "openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_get(self)



    def set(self, t: 'SolarCollectorPerformancePhotovoltaicThermalSimple') -> "void":

        return _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSolarCollectorPerformancePhotovoltaicThermalSimple

    __del__ = lambda self: None

OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_swigregister = _openstudiomodelhvac.OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_swigregister

OptionalSolarCollectorPerformancePhotovoltaicThermalSimple_swigregister(OptionalSolarCollectorPerformancePhotovoltaicThermalSimple)



class SetpointManagerFollowOutdoorAirTemperatureVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerFollowOutdoorAirTemperatureVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerFollowOutdoorAirTemperatureVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::value_type":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::difference_type') -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature,std::allocator< openstudio::model::SetpointManagerFollowOutdoorAirTemperature > > *":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerFollowOutdoorAirTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_clear(self)



    def swap(self, v: 'SetpointManagerFollowOutdoorAirTemperatureVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::iterator":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::iterator":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::iterator":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerFollowOutdoorAirTemperatureVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerFollowOutdoorAirTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type', x: 'SetpointManagerFollowOutdoorAirTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type', x: 'SetpointManagerFollowOutdoorAirTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >::size_type":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowOutdoorAirTemperatureVector

    __del__ = lambda self: None

SetpointManagerFollowOutdoorAirTemperatureVector_swigregister = _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperatureVector_swigregister

SetpointManagerFollowOutdoorAirTemperatureVector_swigregister(SetpointManagerFollowOutdoorAirTemperatureVector)



class OptionalSetpointManagerFollowOutdoorAirTemperature(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerFollowOutdoorAirTemperature, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerFollowOutdoorAirTemperature, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerFollowOutdoorAirTemperature(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerFollowOutdoorAirTemperature":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerFollowOutdoorAirTemperature":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_get(self)



    def set(self, t: 'SetpointManagerFollowOutdoorAirTemperature') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerFollowOutdoorAirTemperature

    __del__ = lambda self: None

OptionalSetpointManagerFollowOutdoorAirTemperature_swigregister = _openstudiomodelhvac.OptionalSetpointManagerFollowOutdoorAirTemperature_swigregister

OptionalSetpointManagerFollowOutdoorAirTemperature_swigregister(OptionalSetpointManagerFollowOutdoorAirTemperature)



class SetpointManagerFollowSystemNodeTemperatureVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerFollowSystemNodeTemperatureVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerFollowSystemNodeTemperatureVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::value_type":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::difference_type') -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature,std::allocator< openstudio::model::SetpointManagerFollowSystemNodeTemperature > > *":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerFollowSystemNodeTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_clear(self)



    def swap(self, v: 'SetpointManagerFollowSystemNodeTemperatureVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::iterator":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::iterator":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::iterator":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerFollowSystemNodeTemperatureVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerFollowSystemNodeTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type', x: 'SetpointManagerFollowSystemNodeTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type', x: 'SetpointManagerFollowSystemNodeTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature >::size_type":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowSystemNodeTemperatureVector

    __del__ = lambda self: None

SetpointManagerFollowSystemNodeTemperatureVector_swigregister = _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperatureVector_swigregister

SetpointManagerFollowSystemNodeTemperatureVector_swigregister(SetpointManagerFollowSystemNodeTemperatureVector)



class OptionalSetpointManagerFollowSystemNodeTemperature(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerFollowSystemNodeTemperature, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerFollowSystemNodeTemperature, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerFollowSystemNodeTemperature(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerFollowSystemNodeTemperature":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerFollowSystemNodeTemperature":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_get(self)



    def set(self, t: 'SetpointManagerFollowSystemNodeTemperature') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerFollowSystemNodeTemperature

    __del__ = lambda self: None

OptionalSetpointManagerFollowSystemNodeTemperature_swigregister = _openstudiomodelhvac.OptionalSetpointManagerFollowSystemNodeTemperature_swigregister

OptionalSetpointManagerFollowSystemNodeTemperature_swigregister(OptionalSetpointManagerFollowSystemNodeTemperature)



class SetpointManagerMixedAirVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMixedAirVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMixedAirVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::size_type":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::value_type":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMixedAir >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMixedAir >::difference_type') -> "std::vector< openstudio::model::SetpointManagerMixedAir,std::allocator< openstudio::model::SetpointManagerMixedAir > > *":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMixedAir >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMixedAir >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerMixedAir') -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::size_type":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_clear(self)



    def swap(self, v: 'SetpointManagerMixedAirVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::iterator":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::iterator":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::iterator":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerMixedAirVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerMixedAir') -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerMixedAir >::size_type', x: 'SetpointManagerMixedAir') -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerMixedAir >::size_type', x: 'SetpointManagerMixedAir') -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerMixedAir >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMixedAir >::size_type":

        return _openstudiomodelhvac.SetpointManagerMixedAirVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMixedAirVector

    __del__ = lambda self: None

SetpointManagerMixedAirVector_swigregister = _openstudiomodelhvac.SetpointManagerMixedAirVector_swigregister

SetpointManagerMixedAirVector_swigregister(SetpointManagerMixedAirVector)



class OptionalSetpointManagerMixedAir(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerMixedAir, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerMixedAir, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerMixedAir(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerMixedAir":

        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerMixedAir":

        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_get(self)



    def set(self, t: 'SetpointManagerMixedAir') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMixedAir_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMixedAir

    __del__ = lambda self: None

OptionalSetpointManagerMixedAir_swigregister = _openstudiomodelhvac.OptionalSetpointManagerMixedAir_swigregister

OptionalSetpointManagerMixedAir_swigregister(OptionalSetpointManagerMixedAir)



class SetpointManagerMultiZoneCoolingAverageVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneCoolingAverageVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneCoolingAverageVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::value_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::difference_type') -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneCoolingAverage > > *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerMultiZoneCoolingAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_clear(self)



    def swap(self, v: 'SetpointManagerMultiZoneCoolingAverageVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneCoolingAverageVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerMultiZoneCoolingAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type', x: 'SetpointManagerMultiZoneCoolingAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type', x: 'SetpointManagerMultiZoneCoolingAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneCoolingAverageVector

    __del__ = lambda self: None

SetpointManagerMultiZoneCoolingAverageVector_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverageVector_swigregister

SetpointManagerMultiZoneCoolingAverageVector_swigregister(SetpointManagerMultiZoneCoolingAverageVector)



class OptionalSetpointManagerMultiZoneCoolingAverage(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerMultiZoneCoolingAverage, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerMultiZoneCoolingAverage, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneCoolingAverage(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneCoolingAverage":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerMultiZoneCoolingAverage":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_get(self)



    def set(self, t: 'SetpointManagerMultiZoneCoolingAverage') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneCoolingAverage

    __del__ = lambda self: None

OptionalSetpointManagerMultiZoneCoolingAverage_swigregister = _openstudiomodelhvac.OptionalSetpointManagerMultiZoneCoolingAverage_swigregister

OptionalSetpointManagerMultiZoneCoolingAverage_swigregister(OptionalSetpointManagerMultiZoneCoolingAverage)



class SetpointManagerMultiZoneHeatingAverageVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneHeatingAverageVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneHeatingAverageVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::value_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::difference_type') -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneHeatingAverage > > *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerMultiZoneHeatingAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_clear(self)



    def swap(self, v: 'SetpointManagerMultiZoneHeatingAverageVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneHeatingAverageVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerMultiZoneHeatingAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type', x: 'SetpointManagerMultiZoneHeatingAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type', x: 'SetpointManagerMultiZoneHeatingAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHeatingAverageVector

    __del__ = lambda self: None

SetpointManagerMultiZoneHeatingAverageVector_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverageVector_swigregister

SetpointManagerMultiZoneHeatingAverageVector_swigregister(SetpointManagerMultiZoneHeatingAverageVector)



class OptionalSetpointManagerMultiZoneHeatingAverage(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerMultiZoneHeatingAverage, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerMultiZoneHeatingAverage, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneHeatingAverage(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneHeatingAverage":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerMultiZoneHeatingAverage":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_get(self)



    def set(self, t: 'SetpointManagerMultiZoneHeatingAverage') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneHeatingAverage

    __del__ = lambda self: None

OptionalSetpointManagerMultiZoneHeatingAverage_swigregister = _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHeatingAverage_swigregister

OptionalSetpointManagerMultiZoneHeatingAverage_swigregister(OptionalSetpointManagerMultiZoneHeatingAverage)



class SetpointManagerMultiZoneHumidityMaximumVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneHumidityMaximumVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneHumidityMaximumVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::value_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::difference_type') -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMaximum > > *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerMultiZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_clear(self)



    def swap(self, v: 'SetpointManagerMultiZoneHumidityMaximumVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneHumidityMaximumVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerMultiZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type', x: 'SetpointManagerMultiZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type', x: 'SetpointManagerMultiZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHumidityMaximumVector

    __del__ = lambda self: None

SetpointManagerMultiZoneHumidityMaximumVector_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximumVector_swigregister

SetpointManagerMultiZoneHumidityMaximumVector_swigregister(SetpointManagerMultiZoneHumidityMaximumVector)



class OptionalSetpointManagerMultiZoneHumidityMaximum(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerMultiZoneHumidityMaximum, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerMultiZoneHumidityMaximum, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneHumidityMaximum(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneHumidityMaximum":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerMultiZoneHumidityMaximum":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_get(self)



    def set(self, t: 'SetpointManagerMultiZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneHumidityMaximum

    __del__ = lambda self: None

OptionalSetpointManagerMultiZoneHumidityMaximum_swigregister = _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMaximum_swigregister

OptionalSetpointManagerMultiZoneHumidityMaximum_swigregister(OptionalSetpointManagerMultiZoneHumidityMaximum)



class SetpointManagerMultiZoneHumidityMinimumVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneHumidityMinimumVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneHumidityMinimumVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::value_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::difference_type') -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMinimum > > *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerMultiZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_clear(self)



    def swap(self, v: 'SetpointManagerMultiZoneHumidityMinimumVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneHumidityMinimumVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerMultiZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type', x: 'SetpointManagerMultiZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type', x: 'SetpointManagerMultiZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHumidityMinimumVector

    __del__ = lambda self: None

SetpointManagerMultiZoneHumidityMinimumVector_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimumVector_swigregister

SetpointManagerMultiZoneHumidityMinimumVector_swigregister(SetpointManagerMultiZoneHumidityMinimumVector)



class OptionalSetpointManagerMultiZoneHumidityMinimum(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerMultiZoneHumidityMinimum, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerMultiZoneHumidityMinimum, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneHumidityMinimum(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneHumidityMinimum":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerMultiZoneHumidityMinimum":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_get(self)



    def set(self, t: 'SetpointManagerMultiZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneHumidityMinimum

    __del__ = lambda self: None

OptionalSetpointManagerMultiZoneHumidityMinimum_swigregister = _openstudiomodelhvac.OptionalSetpointManagerMultiZoneHumidityMinimum_swigregister

OptionalSetpointManagerMultiZoneHumidityMinimum_swigregister(OptionalSetpointManagerMultiZoneHumidityMinimum)



class SetpointManagerMultiZoneMaximumHumidityAverageVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneMaximumHumidityAverageVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneMaximumHumidityAverageVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::value_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::difference_type') -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage > > *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerMultiZoneMaximumHumidityAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_clear(self)



    def swap(self, v: 'SetpointManagerMultiZoneMaximumHumidityAverageVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneMaximumHumidityAverageVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerMultiZoneMaximumHumidityAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type', x: 'SetpointManagerMultiZoneMaximumHumidityAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type', x: 'SetpointManagerMultiZoneMaximumHumidityAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneMaximumHumidityAverageVector

    __del__ = lambda self: None

SetpointManagerMultiZoneMaximumHumidityAverageVector_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverageVector_swigregister

SetpointManagerMultiZoneMaximumHumidityAverageVector_swigregister(SetpointManagerMultiZoneMaximumHumidityAverageVector)



class OptionalSetpointManagerMultiZoneMaximumHumidityAverage(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerMultiZoneMaximumHumidityAverage, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerMultiZoneMaximumHumidityAverage, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneMaximumHumidityAverage(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_get(self)



    def set(self, t: 'SetpointManagerMultiZoneMaximumHumidityAverage') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneMaximumHumidityAverage

    __del__ = lambda self: None

OptionalSetpointManagerMultiZoneMaximumHumidityAverage_swigregister = _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMaximumHumidityAverage_swigregister

OptionalSetpointManagerMultiZoneMaximumHumidityAverage_swigregister(OptionalSetpointManagerMultiZoneMaximumHumidityAverage)



class SetpointManagerMultiZoneMinimumHumidityAverageVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneMinimumHumidityAverageVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneMinimumHumidityAverageVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::value_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::difference_type') -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage > > *":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerMultiZoneMinimumHumidityAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_clear(self)



    def swap(self, v: 'SetpointManagerMultiZoneMinimumHumidityAverageVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::iterator":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneMinimumHumidityAverageVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerMultiZoneMinimumHumidityAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type', x: 'SetpointManagerMultiZoneMinimumHumidityAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type', x: 'SetpointManagerMultiZoneMinimumHumidityAverage') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >::size_type":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneMinimumHumidityAverageVector

    __del__ = lambda self: None

SetpointManagerMultiZoneMinimumHumidityAverageVector_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverageVector_swigregister

SetpointManagerMultiZoneMinimumHumidityAverageVector_swigregister(SetpointManagerMultiZoneMinimumHumidityAverageVector)



class OptionalSetpointManagerMultiZoneMinimumHumidityAverage(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerMultiZoneMinimumHumidityAverage, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerMultiZoneMinimumHumidityAverage, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerMultiZoneMinimumHumidityAverage(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_get(self)



    def set(self, t: 'SetpointManagerMultiZoneMinimumHumidityAverage') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerMultiZoneMinimumHumidityAverage

    __del__ = lambda self: None

OptionalSetpointManagerMultiZoneMinimumHumidityAverage_swigregister = _openstudiomodelhvac.OptionalSetpointManagerMultiZoneMinimumHumidityAverage_swigregister

OptionalSetpointManagerMultiZoneMinimumHumidityAverage_swigregister(OptionalSetpointManagerMultiZoneMinimumHumidityAverage)



class SetpointManagerOutdoorAirPretreatVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerOutdoorAirPretreatVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerOutdoorAirPretreatVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::value_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::difference_type') -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat,std::allocator< openstudio::model::SetpointManagerOutdoorAirPretreat > > *":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerOutdoorAirPretreat') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_clear(self)



    def swap(self, v: 'SetpointManagerOutdoorAirPretreatVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerOutdoorAirPretreatVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerOutdoorAirPretreat') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type', x: 'SetpointManagerOutdoorAirPretreat') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type', x: 'SetpointManagerOutdoorAirPretreat') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat >::size_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerOutdoorAirPretreatVector

    __del__ = lambda self: None

SetpointManagerOutdoorAirPretreatVector_swigregister = _openstudiomodelhvac.SetpointManagerOutdoorAirPretreatVector_swigregister

SetpointManagerOutdoorAirPretreatVector_swigregister(SetpointManagerOutdoorAirPretreatVector)



class OptionalSetpointManagerOutdoorAirPretreat(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerOutdoorAirPretreat, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerOutdoorAirPretreat, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerOutdoorAirPretreat(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerOutdoorAirPretreat":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerOutdoorAirPretreat":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_get(self)



    def set(self, t: 'SetpointManagerOutdoorAirPretreat') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerOutdoorAirPretreat

    __del__ = lambda self: None

OptionalSetpointManagerOutdoorAirPretreat_swigregister = _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirPretreat_swigregister

OptionalSetpointManagerOutdoorAirPretreat_swigregister(OptionalSetpointManagerOutdoorAirPretreat)



class SetpointManagerOutdoorAirResetVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerOutdoorAirResetVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerOutdoorAirResetVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::value_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::difference_type') -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset,std::allocator< openstudio::model::SetpointManagerOutdoorAirReset > > *":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerOutdoorAirReset') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_clear(self)



    def swap(self, v: 'SetpointManagerOutdoorAirResetVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::iterator":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerOutdoorAirResetVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerOutdoorAirReset') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type', x: 'SetpointManagerOutdoorAirReset') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type', x: 'SetpointManagerOutdoorAirReset') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset >::size_type":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerOutdoorAirResetVector

    __del__ = lambda self: None

SetpointManagerOutdoorAirResetVector_swigregister = _openstudiomodelhvac.SetpointManagerOutdoorAirResetVector_swigregister

SetpointManagerOutdoorAirResetVector_swigregister(SetpointManagerOutdoorAirResetVector)



class OptionalSetpointManagerOutdoorAirReset(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerOutdoorAirReset, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerOutdoorAirReset, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerOutdoorAirReset(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerOutdoorAirReset":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerOutdoorAirReset":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_get(self)



    def set(self, t: 'SetpointManagerOutdoorAirReset') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerOutdoorAirReset

    __del__ = lambda self: None

OptionalSetpointManagerOutdoorAirReset_swigregister = _openstudiomodelhvac.OptionalSetpointManagerOutdoorAirReset_swigregister

OptionalSetpointManagerOutdoorAirReset_swigregister(OptionalSetpointManagerOutdoorAirReset)



class SetpointManagerScheduledVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerScheduledVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerScheduledVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduledVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduledVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::size_type":

        return _openstudiomodelhvac.SetpointManagerScheduledVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::value_type":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerScheduled >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerScheduled >::difference_type') -> "std::vector< openstudio::model::SetpointManagerScheduled,std::allocator< openstudio::model::SetpointManagerScheduled > > *":

        return _openstudiomodelhvac.SetpointManagerScheduledVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerScheduled >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerScheduled >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerScheduled >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerScheduledVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerScheduled') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::size_type":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_clear(self)



    def swap(self, v: 'SetpointManagerScheduledVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerScheduled >::iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerScheduledVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerScheduled') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerScheduled >::size_type', x: 'SetpointManagerScheduled') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerScheduled >::size_type', x: 'SetpointManagerScheduled') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerScheduled >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerScheduled >::size_type":

        return _openstudiomodelhvac.SetpointManagerScheduledVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerScheduledVector

    __del__ = lambda self: None

SetpointManagerScheduledVector_swigregister = _openstudiomodelhvac.SetpointManagerScheduledVector_swigregister

SetpointManagerScheduledVector_swigregister(SetpointManagerScheduledVector)



class OptionalSetpointManagerScheduled(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerScheduled, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerScheduled, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerScheduled(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerScheduled":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduled___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerScheduled":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_get(self)



    def set(self, t: 'SetpointManagerScheduled') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduled_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerScheduled

    __del__ = lambda self: None

OptionalSetpointManagerScheduled_swigregister = _openstudiomodelhvac.OptionalSetpointManagerScheduled_swigregister

OptionalSetpointManagerScheduled_swigregister(OptionalSetpointManagerScheduled)



class SetpointManagerScheduledDualSetpointVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerScheduledDualSetpointVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerScheduledDualSetpointVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::value_type":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::difference_type') -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint,std::allocator< openstudio::model::SetpointManagerScheduledDualSetpoint > > *":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerScheduledDualSetpoint') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_clear(self)



    def swap(self, v: 'SetpointManagerScheduledDualSetpointVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::iterator":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerScheduledDualSetpointVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerScheduledDualSetpoint') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type', x: 'SetpointManagerScheduledDualSetpoint') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type', x: 'SetpointManagerScheduledDualSetpoint') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint >::size_type":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerScheduledDualSetpointVector

    __del__ = lambda self: None

SetpointManagerScheduledDualSetpointVector_swigregister = _openstudiomodelhvac.SetpointManagerScheduledDualSetpointVector_swigregister

SetpointManagerScheduledDualSetpointVector_swigregister(SetpointManagerScheduledDualSetpointVector)



class OptionalSetpointManagerScheduledDualSetpoint(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerScheduledDualSetpoint, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerScheduledDualSetpoint, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerScheduledDualSetpoint(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerScheduledDualSetpoint":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerScheduledDualSetpoint":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_get(self)



    def set(self, t: 'SetpointManagerScheduledDualSetpoint') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerScheduledDualSetpoint

    __del__ = lambda self: None

OptionalSetpointManagerScheduledDualSetpoint_swigregister = _openstudiomodelhvac.OptionalSetpointManagerScheduledDualSetpoint_swigregister

OptionalSetpointManagerScheduledDualSetpoint_swigregister(OptionalSetpointManagerScheduledDualSetpoint)



class SetpointManagerSingleZoneHumidityMaximumVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneHumidityMaximumVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneHumidityMaximumVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::value_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::difference_type') -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMaximum > > *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerSingleZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_clear(self)



    def swap(self, v: 'SetpointManagerSingleZoneHumidityMaximumVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneHumidityMaximumVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerSingleZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type', x: 'SetpointManagerSingleZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type', x: 'SetpointManagerSingleZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHumidityMaximumVector

    __del__ = lambda self: None

SetpointManagerSingleZoneHumidityMaximumVector_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximumVector_swigregister

SetpointManagerSingleZoneHumidityMaximumVector_swigregister(SetpointManagerSingleZoneHumidityMaximumVector)



class OptionalSetpointManagerSingleZoneHumidityMaximum(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerSingleZoneHumidityMaximum, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerSingleZoneHumidityMaximum, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneHumidityMaximum(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneHumidityMaximum":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerSingleZoneHumidityMaximum":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_get(self)



    def set(self, t: 'SetpointManagerSingleZoneHumidityMaximum') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneHumidityMaximum

    __del__ = lambda self: None

OptionalSetpointManagerSingleZoneHumidityMaximum_swigregister = _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMaximum_swigregister

OptionalSetpointManagerSingleZoneHumidityMaximum_swigregister(OptionalSetpointManagerSingleZoneHumidityMaximum)



class SetpointManagerSingleZoneHumidityMinimumVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneHumidityMinimumVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneHumidityMinimumVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::value_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::difference_type') -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMinimum > > *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerSingleZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_clear(self)



    def swap(self, v: 'SetpointManagerSingleZoneHumidityMinimumVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneHumidityMinimumVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerSingleZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type', x: 'SetpointManagerSingleZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type', x: 'SetpointManagerSingleZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHumidityMinimumVector

    __del__ = lambda self: None

SetpointManagerSingleZoneHumidityMinimumVector_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimumVector_swigregister

SetpointManagerSingleZoneHumidityMinimumVector_swigregister(SetpointManagerSingleZoneHumidityMinimumVector)



class OptionalSetpointManagerSingleZoneHumidityMinimum(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerSingleZoneHumidityMinimum, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerSingleZoneHumidityMinimum, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneHumidityMinimum(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneHumidityMinimum":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerSingleZoneHumidityMinimum":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_get(self)



    def set(self, t: 'SetpointManagerSingleZoneHumidityMinimum') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneHumidityMinimum

    __del__ = lambda self: None

OptionalSetpointManagerSingleZoneHumidityMinimum_swigregister = _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHumidityMinimum_swigregister

OptionalSetpointManagerSingleZoneHumidityMinimum_swigregister(OptionalSetpointManagerSingleZoneHumidityMinimum)



class SetpointManagerSingleZoneOneStageCoolingVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneOneStageCoolingVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneOneStageCoolingVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::value_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::difference_type') -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageCooling > > *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerSingleZoneOneStageCooling') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_clear(self)



    def swap(self, v: 'SetpointManagerSingleZoneOneStageCoolingVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneOneStageCoolingVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerSingleZoneOneStageCooling') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type', x: 'SetpointManagerSingleZoneOneStageCooling') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type', x: 'SetpointManagerSingleZoneOneStageCooling') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneOneStageCoolingVector

    __del__ = lambda self: None

SetpointManagerSingleZoneOneStageCoolingVector_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCoolingVector_swigregister

SetpointManagerSingleZoneOneStageCoolingVector_swigregister(SetpointManagerSingleZoneOneStageCoolingVector)



class OptionalSetpointManagerSingleZoneOneStageCooling(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerSingleZoneOneStageCooling, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerSingleZoneOneStageCooling, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneOneStageCooling(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneOneStageCooling":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerSingleZoneOneStageCooling":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_get(self)



    def set(self, t: 'SetpointManagerSingleZoneOneStageCooling') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneOneStageCooling

    __del__ = lambda self: None

OptionalSetpointManagerSingleZoneOneStageCooling_swigregister = _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageCooling_swigregister

OptionalSetpointManagerSingleZoneOneStageCooling_swigregister(OptionalSetpointManagerSingleZoneOneStageCooling)



class SetpointManagerSingleZoneOneStageHeatingVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneOneStageHeatingVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneOneStageHeatingVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::value_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::difference_type') -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageHeating > > *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerSingleZoneOneStageHeating') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_clear(self)



    def swap(self, v: 'SetpointManagerSingleZoneOneStageHeatingVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneOneStageHeatingVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerSingleZoneOneStageHeating') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type', x: 'SetpointManagerSingleZoneOneStageHeating') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type', x: 'SetpointManagerSingleZoneOneStageHeating') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneOneStageHeatingVector

    __del__ = lambda self: None

SetpointManagerSingleZoneOneStageHeatingVector_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeatingVector_swigregister

SetpointManagerSingleZoneOneStageHeatingVector_swigregister(SetpointManagerSingleZoneOneStageHeatingVector)



class OptionalSetpointManagerSingleZoneOneStageHeating(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerSingleZoneOneStageHeating, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerSingleZoneOneStageHeating, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneOneStageHeating(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneOneStageHeating":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerSingleZoneOneStageHeating":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_get(self)



    def set(self, t: 'SetpointManagerSingleZoneOneStageHeating') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneOneStageHeating

    __del__ = lambda self: None

OptionalSetpointManagerSingleZoneOneStageHeating_swigregister = _openstudiomodelhvac.OptionalSetpointManagerSingleZoneOneStageHeating_swigregister

OptionalSetpointManagerSingleZoneOneStageHeating_swigregister(OptionalSetpointManagerSingleZoneOneStageHeating)



class SetpointManagerSingleZoneCoolingVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneCoolingVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneCoolingVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::value_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::difference_type') -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneCooling > > *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerSingleZoneCooling') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_clear(self)



    def swap(self, v: 'SetpointManagerSingleZoneCoolingVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneCoolingVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerSingleZoneCooling') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type', x: 'SetpointManagerSingleZoneCooling') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type', x: 'SetpointManagerSingleZoneCooling') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneCoolingVector

    __del__ = lambda self: None

SetpointManagerSingleZoneCoolingVector_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneCoolingVector_swigregister

SetpointManagerSingleZoneCoolingVector_swigregister(SetpointManagerSingleZoneCoolingVector)



class OptionalSetpointManagerSingleZoneCooling(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerSingleZoneCooling, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerSingleZoneCooling, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneCooling(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneCooling":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerSingleZoneCooling":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_get(self)



    def set(self, t: 'SetpointManagerSingleZoneCooling') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneCooling

    __del__ = lambda self: None

OptionalSetpointManagerSingleZoneCooling_swigregister = _openstudiomodelhvac.OptionalSetpointManagerSingleZoneCooling_swigregister

OptionalSetpointManagerSingleZoneCooling_swigregister(OptionalSetpointManagerSingleZoneCooling)



class SetpointManagerSingleZoneHeatingVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneHeatingVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneHeatingVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::value_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::difference_type') -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneHeating > > *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerSingleZoneHeating') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_clear(self)



    def swap(self, v: 'SetpointManagerSingleZoneHeatingVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneHeatingVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerSingleZoneHeating') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type', x: 'SetpointManagerSingleZoneHeating') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type', x: 'SetpointManagerSingleZoneHeating') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHeatingVector

    __del__ = lambda self: None

SetpointManagerSingleZoneHeatingVector_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneHeatingVector_swigregister

SetpointManagerSingleZoneHeatingVector_swigregister(SetpointManagerSingleZoneHeatingVector)



class OptionalSetpointManagerSingleZoneHeating(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerSingleZoneHeating, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerSingleZoneHeating, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneHeating(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneHeating":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerSingleZoneHeating":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_get(self)



    def set(self, t: 'SetpointManagerSingleZoneHeating') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneHeating

    __del__ = lambda self: None

OptionalSetpointManagerSingleZoneHeating_swigregister = _openstudiomodelhvac.OptionalSetpointManagerSingleZoneHeating_swigregister

OptionalSetpointManagerSingleZoneHeating_swigregister(OptionalSetpointManagerSingleZoneHeating)



class SetpointManagerSingleZoneReheatVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneReheatVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneReheatVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::value_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::difference_type') -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat,std::allocator< openstudio::model::SetpointManagerSingleZoneReheat > > *":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerSingleZoneReheat') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_clear(self)



    def swap(self, v: 'SetpointManagerSingleZoneReheatVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::iterator":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneReheatVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerSingleZoneReheat') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type', x: 'SetpointManagerSingleZoneReheat') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type', x: 'SetpointManagerSingleZoneReheat') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat >::size_type":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneReheatVector

    __del__ = lambda self: None

SetpointManagerSingleZoneReheatVector_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneReheatVector_swigregister

SetpointManagerSingleZoneReheatVector_swigregister(SetpointManagerSingleZoneReheatVector)



class OptionalSetpointManagerSingleZoneReheat(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerSingleZoneReheat, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerSingleZoneReheat, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerSingleZoneReheat(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerSingleZoneReheat":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerSingleZoneReheat":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_get(self)



    def set(self, t: 'SetpointManagerSingleZoneReheat') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerSingleZoneReheat

    __del__ = lambda self: None

OptionalSetpointManagerSingleZoneReheat_swigregister = _openstudiomodelhvac.OptionalSetpointManagerSingleZoneReheat_swigregister

OptionalSetpointManagerSingleZoneReheat_swigregister(OptionalSetpointManagerSingleZoneReheat)



class SetpointManagerWarmestVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerWarmestVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerWarmestVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::size_type":

        return _openstudiomodelhvac.SetpointManagerWarmestVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::value_type":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerWarmest >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerWarmest >::difference_type') -> "std::vector< openstudio::model::SetpointManagerWarmest,std::allocator< openstudio::model::SetpointManagerWarmest > > *":

        return _openstudiomodelhvac.SetpointManagerWarmestVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerWarmest >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerWarmest >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerWarmest >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerWarmestVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerWarmest') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::size_type":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_clear(self)



    def swap(self, v: 'SetpointManagerWarmestVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerWarmest >::iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerWarmestVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerWarmest') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerWarmest >::size_type', x: 'SetpointManagerWarmest') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerWarmest >::size_type', x: 'SetpointManagerWarmest') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerWarmest >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerWarmest >::size_type":

        return _openstudiomodelhvac.SetpointManagerWarmestVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerWarmestVector

    __del__ = lambda self: None

SetpointManagerWarmestVector_swigregister = _openstudiomodelhvac.SetpointManagerWarmestVector_swigregister

SetpointManagerWarmestVector_swigregister(SetpointManagerWarmestVector)



class OptionalSetpointManagerWarmest(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerWarmest, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerWarmest, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerWarmest(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerWarmest":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmest___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerWarmest":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_get(self)



    def set(self, t: 'SetpointManagerWarmest') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmest_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerWarmest

    __del__ = lambda self: None

OptionalSetpointManagerWarmest_swigregister = _openstudiomodelhvac.OptionalSetpointManagerWarmest_swigregister

OptionalSetpointManagerWarmest_swigregister(OptionalSetpointManagerWarmest)



class SetpointManagerWarmestTemperatureFlowVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerWarmestTemperatureFlowVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerWarmestTemperatureFlowVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::value_type":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::difference_type') -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow,std::allocator< openstudio::model::SetpointManagerWarmestTemperatureFlow > > *":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerWarmestTemperatureFlow') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_clear(self)



    def swap(self, v: 'SetpointManagerWarmestTemperatureFlowVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::iterator":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerWarmestTemperatureFlowVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerWarmestTemperatureFlow') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type', x: 'SetpointManagerWarmestTemperatureFlow') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type', x: 'SetpointManagerWarmestTemperatureFlow') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow >::size_type":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerWarmestTemperatureFlowVector

    __del__ = lambda self: None

SetpointManagerWarmestTemperatureFlowVector_swigregister = _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlowVector_swigregister

SetpointManagerWarmestTemperatureFlowVector_swigregister(SetpointManagerWarmestTemperatureFlowVector)



class OptionalSetpointManagerWarmestTemperatureFlow(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerWarmestTemperatureFlow, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerWarmestTemperatureFlow, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerWarmestTemperatureFlow(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerWarmestTemperatureFlow":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerWarmestTemperatureFlow":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_get(self)



    def set(self, t: 'SetpointManagerWarmestTemperatureFlow') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerWarmestTemperatureFlow

    __del__ = lambda self: None

OptionalSetpointManagerWarmestTemperatureFlow_swigregister = _openstudiomodelhvac.OptionalSetpointManagerWarmestTemperatureFlow_swigregister

OptionalSetpointManagerWarmestTemperatureFlow_swigregister(OptionalSetpointManagerWarmestTemperatureFlow)



class SetpointManagerColdestVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerColdestVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerColdestVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerColdestVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerColdestVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerColdestVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::size_type":

        return _openstudiomodelhvac.SetpointManagerColdestVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::value_type":

        return _openstudiomodelhvac.SetpointManagerColdestVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerColdest >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerColdest >::difference_type') -> "std::vector< openstudio::model::SetpointManagerColdest,std::allocator< openstudio::model::SetpointManagerColdest > > *":

        return _openstudiomodelhvac.SetpointManagerColdestVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerColdest >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerColdest >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerColdest >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerColdestVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerColdest') -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerColdestVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::size_type":

        return _openstudiomodelhvac.SetpointManagerColdestVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector_clear(self)



    def swap(self, v: 'SetpointManagerColdestVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerColdestVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::iterator":

        return _openstudiomodelhvac.SetpointManagerColdestVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::iterator":

        return _openstudiomodelhvac.SetpointManagerColdestVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerColdestVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerColdestVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerColdest >::iterator":

        return _openstudiomodelhvac.SetpointManagerColdestVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerColdestVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerColdest') -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerColdestVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerColdestVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerColdest >::size_type', x: 'SetpointManagerColdest') -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerColdest >::size_type', x: 'SetpointManagerColdest') -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerColdest >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerColdestVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerColdest >::size_type":

        return _openstudiomodelhvac.SetpointManagerColdestVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerColdestVector

    __del__ = lambda self: None

SetpointManagerColdestVector_swigregister = _openstudiomodelhvac.SetpointManagerColdestVector_swigregister

SetpointManagerColdestVector_swigregister(SetpointManagerColdestVector)



class OptionalSetpointManagerColdest(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerColdest, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerColdest, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerColdest(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerColdest_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerColdest":

        return _openstudiomodelhvac.OptionalSetpointManagerColdest___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerColdest_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerColdest_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerColdest":

        return _openstudiomodelhvac.OptionalSetpointManagerColdest_get(self)



    def set(self, t: 'SetpointManagerColdest') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerColdest_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerColdest

    __del__ = lambda self: None

OptionalSetpointManagerColdest_swigregister = _openstudiomodelhvac.OptionalSetpointManagerColdest_swigregister

OptionalSetpointManagerColdest_swigregister(OptionalSetpointManagerColdest)



class SetpointManagerFollowGroundTemperatureVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerFollowGroundTemperatureVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerFollowGroundTemperatureVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___len__(self)



    def pop(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::value_type":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::difference_type') -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature,std::allocator< openstudio::model::SetpointManagerFollowGroundTemperature > > *":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::difference_type', j: 'std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::difference_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector___setitem__(self, *args)



    def append(self, x: 'SetpointManagerFollowGroundTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_empty(self)



    def size(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_size(self)



    def clear(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_clear(self)



    def swap(self, v: 'SetpointManagerFollowGroundTemperatureVector') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::allocator_type":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::iterator":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_begin(self)



    def end(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::iterator":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::reverse_iterator":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::iterator":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerFollowGroundTemperatureVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SetpointManagerFollowGroundTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_front(self)



    def back(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::value_type const &":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_back(self)



    def assign(self, n: 'std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type', x: 'SetpointManagerFollowGroundTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_assign(self, n, x)



    def resize(self, new_size: 'std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type', x: 'SetpointManagerFollowGroundTemperature') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_resize(self, new_size, x)



    def insert(self, *args) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type') -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature >::size_type":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_capacity(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowGroundTemperatureVector

    __del__ = lambda self: None

SetpointManagerFollowGroundTemperatureVector_swigregister = _openstudiomodelhvac.SetpointManagerFollowGroundTemperatureVector_swigregister

SetpointManagerFollowGroundTemperatureVector_swigregister(SetpointManagerFollowGroundTemperatureVector)



class OptionalSetpointManagerFollowGroundTemperature(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalSetpointManagerFollowGroundTemperature, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalSetpointManagerFollowGroundTemperature, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_OptionalSetpointManagerFollowGroundTemperature(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_reset(self)



    def __ref__(self) -> "openstudio::model::SetpointManagerFollowGroundTemperature":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_isNull(self)



    def get(self) -> "openstudio::model::SetpointManagerFollowGroundTemperature":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_get(self)



    def set(self, t: 'SetpointManagerFollowGroundTemperature') -> "void":

        return _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_set(self, t)

    __swig_destroy__ = _openstudiomodelhvac.delete_OptionalSetpointManagerFollowGroundTemperature

    __del__ = lambda self: None

OptionalSetpointManagerFollowGroundTemperature_swigregister = _openstudiomodelhvac.OptionalSetpointManagerFollowGroundTemperature_swigregister

OptionalSetpointManagerFollowGroundTemperature_swigregister(OptionalSetpointManagerFollowGroundTemperature)



class PortList(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PortList, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PortList, name)

    __repr__ = _swig_repr



    def __init__(self, comp: 'HVACComponent'):

        this = _openstudiomodelhvac.new_PortList(comp)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_PortList

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.PortList_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.PortList_iddObjectType)



    def port(self, portIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.PortList_port(self, portIndex)



    def portIndex(self, port: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.PortList_portIndex(self, port)



    def nextPort(self) -> "unsigned int":

        return _openstudiomodelhvac.PortList_nextPort(self)



    def modelObject(self, portIndex: 'unsigned int') -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.PortList_modelObject(self, portIndex)



    def lastModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.PortList_lastModelObject(self)



    def modelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.PortList_modelObjects(self)



    def portIndexForModelObject(self, modelObject: 'ModelObject') -> "unsigned int":

        return _openstudiomodelhvac.PortList_portIndexForModelObject(self, modelObject)



    def nextPortIndex(self) -> "unsigned int":

        return _openstudiomodelhvac.PortList_nextPortIndex(self)



    def thermalZone(self) -> "openstudio::model::ThermalZone":

        return _openstudiomodelhvac.PortList_thermalZone(self)



    def airLoopHVACPort(self) -> "unsigned int":

        return _openstudiomodelhvac.PortList_airLoopHVACPort(self)



    def airLoopHVACPorts(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudiomodelhvac.PortList_airLoopHVACPorts(self)



    def airLoopHVACPortIndex(self) -> "unsigned int":

        return _openstudiomodelhvac.PortList_airLoopHVACPortIndex(self)



    def airLoopHVACPortIndexes(self) -> "std::vector< unsigned int,std::allocator< unsigned int > >":

        return _openstudiomodelhvac.PortList_airLoopHVACPortIndexes(self)



    def airLoopHVACModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.PortList_airLoopHVACModelObject(self)



    def airLoopHVACModelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.PortList_airLoopHVACModelObjects(self)

PortList_swigregister = _openstudiomodelhvac.PortList_swigregister

PortList_swigregister(PortList)



def PortList_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.PortList_iddObjectType()

PortList_iddObjectType = _openstudiomodelhvac.PortList_iddObjectType





def toPortList(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PortList >":

    return _openstudiomodelhvac.toPortList(idfObject)

toPortList = _openstudiomodelhvac.toPortList



def getPortList(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PortList >":

    return _openstudiomodelhvac.getPortList(t_model, t_handle)

getPortList = _openstudiomodelhvac.getPortList



def getPortLists(t_model: 'Model') -> "std::vector< openstudio::model::PortList,std::allocator< openstudio::model::PortList > >":

    return _openstudiomodelhvac.getPortLists(t_model)

getPortLists = _openstudiomodelhvac.getPortLists



def getPortListByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PortList >":

    return _openstudiomodelhvac.getPortListByName(t_model, t_name)

getPortListByName = _openstudiomodelhvac.getPortListByName



def getPortListsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PortList,std::allocator< openstudio::model::PortList > >":

    return _openstudiomodelhvac.getPortListsByName(t_model, t_name, t_exactMatch)

getPortListsByName = _openstudiomodelhvac.getPortListsByName

class Loop(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, Loop, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, Loop, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_Loop

    __del__ = lambda self: None



    def supplyInletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.Loop_supplyInletNode(self)



    def supplyOutletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.Loop_supplyOutletNode(self)



    def supplyOutletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":

        return _openstudiomodelhvac.Loop_supplyOutletNodes(self)



    def demandInletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.Loop_demandInletNode(self)



    def demandOutletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.Loop_demandOutletNode(self)



    def demandInletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":

        return _openstudiomodelhvac.Loop_demandInletNodes(self)



    def supplyComponents(self, *args) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.Loop_supplyComponents(self, *args)



    def demandComponents(self, *args) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.Loop_demandComponents(self, *args)



    def components(self, *args) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.Loop_components(self, *args)



    def component(self, handle: 'UUID') -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.Loop_component(self, handle)



    def demandComponent(self, handle: 'UUID') -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.Loop_demandComponent(self, handle)



    def supplyComponent(self, handle: 'UUID') -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.Loop_supplyComponent(self, handle)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.Loop_remove(self)



    def demandSplitter(self) -> "openstudio::model::Splitter":

        return _openstudiomodelhvac.Loop_demandSplitter(self)



    def demandMixer(self) -> "openstudio::model::Mixer":

        return _openstudiomodelhvac.Loop_demandMixer(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.Loop_clone(self, model)



    def children(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.Loop_children(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.Loop_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.Loop_applySizingValues(self)

Loop_swigregister = _openstudiomodelhvac.Loop_swigregister

Loop_swigregister(Loop)





def toLoop(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Loop >":

    return _openstudiomodelhvac.toLoop(idfObject)

toLoop = _openstudiomodelhvac.toLoop



def getLoop(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Loop >":

    return _openstudiomodelhvac.getLoop(t_model, t_handle)

getLoop = _openstudiomodelhvac.getLoop



def getLoops(t_model: 'Model') -> "std::vector< openstudio::model::Loop,std::allocator< openstudio::model::Loop > >":

    return _openstudiomodelhvac.getLoops(t_model)

getLoops = _openstudiomodelhvac.getLoops



def getLoopByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Loop >":

    return _openstudiomodelhvac.getLoopByName(t_model, t_name)

getLoopByName = _openstudiomodelhvac.getLoopByName



def getLoopsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Loop,std::allocator< openstudio::model::Loop > >":

    return _openstudiomodelhvac.getLoopsByName(t_model, t_name, t_exactMatch)

getLoopsByName = _openstudiomodelhvac.getLoopsByName

class HVACComponent(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, HVACComponent, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, HVACComponent, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_HVACComponent

    __del__ = lambda self: None



    def loop(self) -> "boost::optional< openstudio::model::Loop >":

        return _openstudiomodelhvac.HVACComponent_loop(self)



    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":

        return _openstudiomodelhvac.HVACComponent_airLoopHVAC(self)



    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.HVACComponent_plantLoop(self)



    def airLoopHVACOutdoorAirSystem(self) -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":

        return _openstudiomodelhvac.HVACComponent_airLoopHVACOutdoorAirSystem(self)



    def containingHVACComponent(self) -> "boost::optional< openstudio::model::HVACComponent >":

        return _openstudiomodelhvac.HVACComponent_containingHVACComponent(self)



    def containingZoneHVACComponent(self) -> "boost::optional< openstudio::model::ZoneHVACComponent >":

        return _openstudiomodelhvac.HVACComponent_containingZoneHVACComponent(self)



    def containingStraightComponent(self) -> "boost::optional< openstudio::model::StraightComponent >":

        return _openstudiomodelhvac.HVACComponent_containingStraightComponent(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.HVACComponent_addToNode(self, node)



    def addToSplitter(self, splitter: 'Splitter') -> "bool":

        return _openstudiomodelhvac.HVACComponent_addToSplitter(self, splitter)



    def disconnect(self) -> "void":

        return _openstudiomodelhvac.HVACComponent_disconnect(self)



    def isRemovable(self) -> "bool":

        return _openstudiomodelhvac.HVACComponent_isRemovable(self)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.HVACComponent_remove(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.HVACComponent_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.HVACComponent_applySizingValues(self)

HVACComponent_swigregister = _openstudiomodelhvac.HVACComponent_swigregister

HVACComponent_swigregister(HVACComponent)





def toHVACComponent(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::HVACComponent >":

    return _openstudiomodelhvac.toHVACComponent(idfObject)

toHVACComponent = _openstudiomodelhvac.toHVACComponent



def getHVACComponent(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::HVACComponent >":

    return _openstudiomodelhvac.getHVACComponent(t_model, t_handle)

getHVACComponent = _openstudiomodelhvac.getHVACComponent



def getHVACComponents(t_model: 'Model') -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":

    return _openstudiomodelhvac.getHVACComponents(t_model)

getHVACComponents = _openstudiomodelhvac.getHVACComponents



def getHVACComponentByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::HVACComponent >":

    return _openstudiomodelhvac.getHVACComponentByName(t_model, t_name)

getHVACComponentByName = _openstudiomodelhvac.getHVACComponentByName



def getHVACComponentsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":

    return _openstudiomodelhvac.getHVACComponentsByName(t_model, t_name, t_exactMatch)

getHVACComponentsByName = _openstudiomodelhvac.getHVACComponentsByName

class ZoneHVACComponent(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACComponent, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACComponent, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneHVACComponent

    __del__ = lambda self: None



    def inletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.ZoneHVACComponent_inletPort(self)



    def inletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.ZoneHVACComponent_inletNode(self)



    def outletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.ZoneHVACComponent_outletPort(self)



    def outletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.ZoneHVACComponent_outletNode(self)



    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.ZoneHVACComponent_thermalZone(self)



    def addToThermalZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.ZoneHVACComponent_addToThermalZone(self, thermalZone)



    def removeFromThermalZone(self) -> "void":

        return _openstudiomodelhvac.ZoneHVACComponent_removeFromThermalZone(self)



    def setReturnPlenum(self, plenumZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.ZoneHVACComponent_setReturnPlenum(self, plenumZone)



    def removeReturnPlenum(self) -> "void":

        return _openstudiomodelhvac.ZoneHVACComponent_removeReturnPlenum(self)



    def returnPlenum(self) -> "boost::optional< openstudio::model::AirLoopHVACReturnPlenum >":

        return _openstudiomodelhvac.ZoneHVACComponent_returnPlenum(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.ZoneHVACComponent_addToNode(self, node)



    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":

        return _openstudiomodelhvac.ZoneHVACComponent_airLoopHVAC(self)



    def removeFromAirLoopHVAC(self) -> "bool":

        return _openstudiomodelhvac.ZoneHVACComponent_removeFromAirLoopHVAC(self)



    def airInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.ZoneHVACComponent_airInletModelObject(self)



    def airOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.ZoneHVACComponent_airOutletModelObject(self)

ZoneHVACComponent_swigregister = _openstudiomodelhvac.ZoneHVACComponent_swigregister

ZoneHVACComponent_swigregister(ZoneHVACComponent)





def toZoneHVACComponent(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACComponent >":

    return _openstudiomodelhvac.toZoneHVACComponent(idfObject)

toZoneHVACComponent = _openstudiomodelhvac.toZoneHVACComponent



def getZoneHVACComponent(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACComponent >":

    return _openstudiomodelhvac.getZoneHVACComponent(t_model, t_handle)

getZoneHVACComponent = _openstudiomodelhvac.getZoneHVACComponent



def getZoneHVACComponents(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACComponent,std::allocator< openstudio::model::ZoneHVACComponent > >":

    return _openstudiomodelhvac.getZoneHVACComponents(t_model)

getZoneHVACComponents = _openstudiomodelhvac.getZoneHVACComponents



def getZoneHVACComponentByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACComponent >":

    return _openstudiomodelhvac.getZoneHVACComponentByName(t_model, t_name)

getZoneHVACComponentByName = _openstudiomodelhvac.getZoneHVACComponentByName



def getZoneHVACComponentsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACComponent,std::allocator< openstudio::model::ZoneHVACComponent > >":

    return _openstudiomodelhvac.getZoneHVACComponentsByName(t_model, t_name, t_exactMatch)

getZoneHVACComponentsByName = _openstudiomodelhvac.getZoneHVACComponentsByName

class ZoneHVACEquipmentList(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneHVACEquipmentList, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneHVACEquipmentList, name)

    __repr__ = _swig_repr



    def __init__(self, thermalZone: 'ThermalZone'):

        this = _openstudiomodelhvac.new_ZoneHVACEquipmentList(thermalZone)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneHVACEquipmentList

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ZoneHVACEquipmentList_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ZoneHVACEquipmentList_iddObjectType)



    def loadDistributionScheme(self) -> "std::string":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_loadDistributionScheme(self)



    def setLoadDistributionScheme(self, scheme: 'std::string') -> "bool":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_setLoadDistributionScheme(self, scheme)



    def addEquipment(self, equipment: 'ModelObject') -> "bool":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_addEquipment(self, equipment)



    def removeEquipment(self, equipment: 'ModelObject') -> "bool":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_removeEquipment(self, equipment)



    def setCoolingPriority(self, equipment: 'ModelObject', priority: 'unsigned int') -> "bool":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_setCoolingPriority(self, equipment, priority)



    def setHeatingPriority(self, euqipment: 'ModelObject', priority: 'unsigned int') -> "bool":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_setHeatingPriority(self, euqipment, priority)



    def equipment(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_equipment(self)



    def equipmentInHeatingOrder(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_equipmentInHeatingOrder(self)



    def equipmentInCoolingOrder(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_equipmentInCoolingOrder(self)



    def thermalZone(self) -> "openstudio::model::ThermalZone":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_thermalZone(self)



    def heatingPriority(self, equipment: 'ModelObject') -> "unsigned int":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_heatingPriority(self, equipment)



    def coolingPriority(self, equipment: 'ModelObject') -> "unsigned int":

        return _openstudiomodelhvac.ZoneHVACEquipmentList_coolingPriority(self, equipment)

ZoneHVACEquipmentList_swigregister = _openstudiomodelhvac.ZoneHVACEquipmentList_swigregister

ZoneHVACEquipmentList_swigregister(ZoneHVACEquipmentList)



def ZoneHVACEquipmentList_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ZoneHVACEquipmentList_iddObjectType()

ZoneHVACEquipmentList_iddObjectType = _openstudiomodelhvac.ZoneHVACEquipmentList_iddObjectType





def toZoneHVACEquipmentList(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneHVACEquipmentList >":

    return _openstudiomodelhvac.toZoneHVACEquipmentList(idfObject)

toZoneHVACEquipmentList = _openstudiomodelhvac.toZoneHVACEquipmentList



def getZoneHVACEquipmentList(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneHVACEquipmentList >":

    return _openstudiomodelhvac.getZoneHVACEquipmentList(t_model, t_handle)

getZoneHVACEquipmentList = _openstudiomodelhvac.getZoneHVACEquipmentList



def getZoneHVACEquipmentLists(t_model: 'Model') -> "std::vector< openstudio::model::ZoneHVACEquipmentList,std::allocator< openstudio::model::ZoneHVACEquipmentList > >":

    return _openstudiomodelhvac.getZoneHVACEquipmentLists(t_model)

getZoneHVACEquipmentLists = _openstudiomodelhvac.getZoneHVACEquipmentLists



def getZoneHVACEquipmentListByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneHVACEquipmentList >":

    return _openstudiomodelhvac.getZoneHVACEquipmentListByName(t_model, t_name)

getZoneHVACEquipmentListByName = _openstudiomodelhvac.getZoneHVACEquipmentListByName



def getZoneHVACEquipmentListsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneHVACEquipmentList,std::allocator< openstudio::model::ZoneHVACEquipmentList > >":

    return _openstudiomodelhvac.getZoneHVACEquipmentListsByName(t_model, t_name, t_exactMatch)

getZoneHVACEquipmentListsByName = _openstudiomodelhvac.getZoneHVACEquipmentListsByName

class Thermostat(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, Thermostat, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, Thermostat, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_Thermostat

    __del__ = lambda self: None



    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.Thermostat_thermalZone(self)

Thermostat_swigregister = _openstudiomodelhvac.Thermostat_swigregister

Thermostat_swigregister(Thermostat)





def toThermostat(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Thermostat >":

    return _openstudiomodelhvac.toThermostat(idfObject)

toThermostat = _openstudiomodelhvac.toThermostat



def getThermostat(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Thermostat >":

    return _openstudiomodelhvac.getThermostat(t_model, t_handle)

getThermostat = _openstudiomodelhvac.getThermostat



def getThermostats(t_model: 'Model') -> "std::vector< openstudio::model::Thermostat,std::allocator< openstudio::model::Thermostat > >":

    return _openstudiomodelhvac.getThermostats(t_model)

getThermostats = _openstudiomodelhvac.getThermostats



def getThermostatByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Thermostat >":

    return _openstudiomodelhvac.getThermostatByName(t_model, t_name)

getThermostatByName = _openstudiomodelhvac.getThermostatByName



def getThermostatsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Thermostat,std::allocator< openstudio::model::Thermostat > >":

    return _openstudiomodelhvac.getThermostatsByName(t_model, t_name, t_exactMatch)

getThermostatsByName = _openstudiomodelhvac.getThermostatsByName

class SetpointManager(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManager, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManager, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManager

    __del__ = lambda self: None



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManager_setpointNode(self)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManager_controlVariable(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManager_setControlVariable(self, controlVariable)

SetpointManager_swigregister = _openstudiomodelhvac.SetpointManager_swigregister

SetpointManager_swigregister(SetpointManager)





def toSetpointManager(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManager >":

    return _openstudiomodelhvac.toSetpointManager(idfObject)

toSetpointManager = _openstudiomodelhvac.toSetpointManager



def getSetpointManager(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManager >":

    return _openstudiomodelhvac.getSetpointManager(t_model, t_handle)

getSetpointManager = _openstudiomodelhvac.getSetpointManager



def getSetpointManagers(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManager,std::allocator< openstudio::model::SetpointManager > >":

    return _openstudiomodelhvac.getSetpointManagers(t_model)

getSetpointManagers = _openstudiomodelhvac.getSetpointManagers



def getSetpointManagerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManager >":

    return _openstudiomodelhvac.getSetpointManagerByName(t_model, t_name)

getSetpointManagerByName = _openstudiomodelhvac.getSetpointManagerByName



def getSetpointManagersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManager,std::allocator< openstudio::model::SetpointManager > >":

    return _openstudiomodelhvac.getSetpointManagersByName(t_model, t_name, t_exactMatch)

getSetpointManagersByName = _openstudiomodelhvac.getSetpointManagersByName

class StraightComponent(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, StraightComponent, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, StraightComponent, name)

    __repr__ = _swig_repr



    def __init__(self, type: 'IddObjectType', model: 'Model'):

        this = _openstudiomodelhvac.new_StraightComponent(type, model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_StraightComponent

    __del__ = lambda self: None



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.StraightComponent_remove(self)



    def removeFromLoop(self) -> "bool":

        return _openstudiomodelhvac.StraightComponent_removeFromLoop(self)



    def inletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.StraightComponent_inletPort(self)



    def outletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.StraightComponent_outletPort(self)



    def inletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.StraightComponent_inletModelObject(self)



    def outletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.StraightComponent_outletModelObject(self)



    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":

        return _openstudiomodelhvac.StraightComponent_airLoopHVAC(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.StraightComponent_addToNode(self, node)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.StraightComponent_clone(self, model)



    def disconnect(self) -> "void":

        return _openstudiomodelhvac.StraightComponent_disconnect(self)

StraightComponent_swigregister = _openstudiomodelhvac.StraightComponent_swigregister

StraightComponent_swigregister(StraightComponent)





def toStraightComponent(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::StraightComponent >":

    return _openstudiomodelhvac.toStraightComponent(idfObject)

toStraightComponent = _openstudiomodelhvac.toStraightComponent



def getStraightComponent(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::StraightComponent >":

    return _openstudiomodelhvac.getStraightComponent(t_model, t_handle)

getStraightComponent = _openstudiomodelhvac.getStraightComponent



def getStraightComponents(t_model: 'Model') -> "std::vector< openstudio::model::StraightComponent,std::allocator< openstudio::model::StraightComponent > >":

    return _openstudiomodelhvac.getStraightComponents(t_model)

getStraightComponents = _openstudiomodelhvac.getStraightComponents



def getStraightComponentByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::StraightComponent >":

    return _openstudiomodelhvac.getStraightComponentByName(t_model, t_name)

getStraightComponentByName = _openstudiomodelhvac.getStraightComponentByName



def getStraightComponentsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::StraightComponent,std::allocator< openstudio::model::StraightComponent > >":

    return _openstudiomodelhvac.getStraightComponentsByName(t_model, t_name, t_exactMatch)

getStraightComponentsByName = _openstudiomodelhvac.getStraightComponentsByName

class WaterToAirComponent(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterToAirComponent, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WaterToAirComponent, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterToAirComponent

    __del__ = lambda self: None



    def airInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.WaterToAirComponent_airInletPort(self)



    def airOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.WaterToAirComponent_airOutletPort(self)



    def airInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToAirComponent_airInletModelObject(self)



    def airOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToAirComponent_airOutletModelObject(self)



    def waterInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.WaterToAirComponent_waterInletPort(self)



    def waterOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.WaterToAirComponent_waterOutletPort(self)



    def waterInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToAirComponent_waterInletModelObject(self)



    def waterOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToAirComponent_waterOutletModelObject(self)



    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":

        return _openstudiomodelhvac.WaterToAirComponent_airLoopHVAC(self)



    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.WaterToAirComponent_plantLoop(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.WaterToAirComponent_addToNode(self, node)



    def addToSplitter(self, splitter: 'Splitter') -> "bool":

        return _openstudiomodelhvac.WaterToAirComponent_addToSplitter(self, splitter)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.WaterToAirComponent_remove(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.WaterToAirComponent_clone(self, model)



    def disconnectWaterSide(self) -> "void":

        return _openstudiomodelhvac.WaterToAirComponent_disconnectWaterSide(self)



    def disconnectAirSide(self) -> "void":

        return _openstudiomodelhvac.WaterToAirComponent_disconnectAirSide(self)



    def removeFromAirLoopHVAC(self) -> "bool":

        return _openstudiomodelhvac.WaterToAirComponent_removeFromAirLoopHVAC(self)



    def removeFromPlantLoop(self) -> "bool":

        return _openstudiomodelhvac.WaterToAirComponent_removeFromPlantLoop(self)

WaterToAirComponent_swigregister = _openstudiomodelhvac.WaterToAirComponent_swigregister

WaterToAirComponent_swigregister(WaterToAirComponent)





def toWaterToAirComponent(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WaterToAirComponent >":

    return _openstudiomodelhvac.toWaterToAirComponent(idfObject)

toWaterToAirComponent = _openstudiomodelhvac.toWaterToAirComponent



def getWaterToAirComponent(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WaterToAirComponent >":

    return _openstudiomodelhvac.getWaterToAirComponent(t_model, t_handle)

getWaterToAirComponent = _openstudiomodelhvac.getWaterToAirComponent



def getWaterToAirComponents(t_model: 'Model') -> "std::vector< openstudio::model::WaterToAirComponent,std::allocator< openstudio::model::WaterToAirComponent > >":

    return _openstudiomodelhvac.getWaterToAirComponents(t_model)

getWaterToAirComponents = _openstudiomodelhvac.getWaterToAirComponents



def getWaterToAirComponentByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WaterToAirComponent >":

    return _openstudiomodelhvac.getWaterToAirComponentByName(t_model, t_name)

getWaterToAirComponentByName = _openstudiomodelhvac.getWaterToAirComponentByName



def getWaterToAirComponentsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WaterToAirComponent,std::allocator< openstudio::model::WaterToAirComponent > >":

    return _openstudiomodelhvac.getWaterToAirComponentsByName(t_model, t_name, t_exactMatch)

getWaterToAirComponentsByName = _openstudiomodelhvac.getWaterToAirComponentsByName

class WaterToWaterComponent(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterToWaterComponent, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WaterToWaterComponent, name)

    __repr__ = _swig_repr



    def __init__(self, type: 'IddObjectType', model: 'Model'):

        this = _openstudiomodelhvac.new_WaterToWaterComponent(type, model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterToWaterComponent

    __del__ = lambda self: None



    def supplyInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.WaterToWaterComponent_supplyInletPort(self)



    def supplyOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.WaterToWaterComponent_supplyOutletPort(self)



    def demandInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.WaterToWaterComponent_demandInletPort(self)



    def demandOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.WaterToWaterComponent_demandOutletPort(self)



    def supplyInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToWaterComponent_supplyInletModelObject(self)



    def supplyOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToWaterComponent_supplyOutletModelObject(self)



    def demandInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToWaterComponent_demandInletModelObject(self)



    def demandOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToWaterComponent_demandOutletModelObject(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.WaterToWaterComponent_addToNode(self, node)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.WaterToWaterComponent_remove(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.WaterToWaterComponent_clone(self, model)



    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.WaterToWaterComponent_plantLoop(self)



    def secondaryPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.WaterToWaterComponent_secondaryPlantLoop(self)



    def removeFromPlantLoop(self) -> "bool":

        return _openstudiomodelhvac.WaterToWaterComponent_removeFromPlantLoop(self)



    def removeFromSecondaryPlantLoop(self) -> "bool":

        return _openstudiomodelhvac.WaterToWaterComponent_removeFromSecondaryPlantLoop(self)



    def tertiaryPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.WaterToWaterComponent_tertiaryPlantLoop(self)



    def removeFromTertiaryPlantLoop(self) -> "bool":

        return _openstudiomodelhvac.WaterToWaterComponent_removeFromTertiaryPlantLoop(self)



    def addToTertiaryNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.WaterToWaterComponent_addToTertiaryNode(self, node)



    def tertiaryInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToWaterComponent_tertiaryInletModelObject(self)



    def tertiaryOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.WaterToWaterComponent_tertiaryOutletModelObject(self)



    def disconnect(self) -> "void":

        return _openstudiomodelhvac.WaterToWaterComponent_disconnect(self)

WaterToWaterComponent_swigregister = _openstudiomodelhvac.WaterToWaterComponent_swigregister

WaterToWaterComponent_swigregister(WaterToWaterComponent)





def toWaterToWaterComponent(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WaterToWaterComponent >":

    return _openstudiomodelhvac.toWaterToWaterComponent(idfObject)

toWaterToWaterComponent = _openstudiomodelhvac.toWaterToWaterComponent



def getWaterToWaterComponent(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WaterToWaterComponent >":

    return _openstudiomodelhvac.getWaterToWaterComponent(t_model, t_handle)

getWaterToWaterComponent = _openstudiomodelhvac.getWaterToWaterComponent



def getWaterToWaterComponents(t_model: 'Model') -> "std::vector< openstudio::model::WaterToWaterComponent,std::allocator< openstudio::model::WaterToWaterComponent > >":

    return _openstudiomodelhvac.getWaterToWaterComponents(t_model)

getWaterToWaterComponents = _openstudiomodelhvac.getWaterToWaterComponents



def getWaterToWaterComponentByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WaterToWaterComponent >":

    return _openstudiomodelhvac.getWaterToWaterComponentByName(t_model, t_name)

getWaterToWaterComponentByName = _openstudiomodelhvac.getWaterToWaterComponentByName



def getWaterToWaterComponentsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WaterToWaterComponent,std::allocator< openstudio::model::WaterToWaterComponent > >":

    return _openstudiomodelhvac.getWaterToWaterComponentsByName(t_model, t_name, t_exactMatch)

getWaterToWaterComponentsByName = _openstudiomodelhvac.getWaterToWaterComponentsByName

class AirToAirComponent(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirToAirComponent, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirToAirComponent, name)

    __repr__ = _swig_repr



    def __init__(self, type: 'IddObjectType', model: 'Model'):

        this = _openstudiomodelhvac.new_AirToAirComponent(type, model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirToAirComponent

    __del__ = lambda self: None



    def primaryAirInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirToAirComponent_primaryAirInletPort(self)



    def primaryAirOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirToAirComponent_primaryAirOutletPort(self)



    def primaryAirInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirToAirComponent_primaryAirInletModelObject(self)



    def primaryAirOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirToAirComponent_primaryAirOutletModelObject(self)



    def secondaryAirInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirToAirComponent_secondaryAirInletPort(self)



    def secondaryAirOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirToAirComponent_secondaryAirOutletPort(self)



    def secondaryAirInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirToAirComponent_secondaryAirInletModelObject(self)



    def secondaryAirOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirToAirComponent_secondaryAirOutletModelObject(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.AirToAirComponent_addToNode(self, node)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.AirToAirComponent_remove(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.AirToAirComponent_clone(self, model)

AirToAirComponent_swigregister = _openstudiomodelhvac.AirToAirComponent_swigregister

AirToAirComponent_swigregister(AirToAirComponent)





def toAirToAirComponent(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirToAirComponent >":

    return _openstudiomodelhvac.toAirToAirComponent(idfObject)

toAirToAirComponent = _openstudiomodelhvac.toAirToAirComponent



def getAirToAirComponent(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirToAirComponent >":

    return _openstudiomodelhvac.getAirToAirComponent(t_model, t_handle)

getAirToAirComponent = _openstudiomodelhvac.getAirToAirComponent



def getAirToAirComponents(t_model: 'Model') -> "std::vector< openstudio::model::AirToAirComponent,std::allocator< openstudio::model::AirToAirComponent > >":

    return _openstudiomodelhvac.getAirToAirComponents(t_model)

getAirToAirComponents = _openstudiomodelhvac.getAirToAirComponents



def getAirToAirComponentByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirToAirComponent >":

    return _openstudiomodelhvac.getAirToAirComponentByName(t_model, t_name)

getAirToAirComponentByName = _openstudiomodelhvac.getAirToAirComponentByName



def getAirToAirComponentsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirToAirComponent,std::allocator< openstudio::model::AirToAirComponent > >":

    return _openstudiomodelhvac.getAirToAirComponentsByName(t_model, t_name, t_exactMatch)

getAirToAirComponentsByName = _openstudiomodelhvac.getAirToAirComponentsByName

class Node(StraightComponent):

    __swig_setmethods__ = {}

    for _s in [StraightComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)

    __swig_getmethods__ = {}

    for _s in [StraightComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_Node(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_Node

    __del__ = lambda self: None



    def setpointManagers(self) -> "std::vector< openstudio::model::SetpointManager,std::allocator< openstudio::model::SetpointManager > >":

        return _openstudiomodelhvac.Node_setpointManagers(self)



    def removeSetpointManagerSingleZoneReheat(self) -> "void":

        return _openstudiomodelhvac.Node_removeSetpointManagerSingleZoneReheat(self)



    def getSetpointManagerSingleZoneReheat(self) -> "boost::optional< openstudio::model::SetpointManagerSingleZoneReheat >":

        return _openstudiomodelhvac.Node_getSetpointManagerSingleZoneReheat(self)



    def removeSetpointManagerMixedAir(self) -> "void":

        return _openstudiomodelhvac.Node_removeSetpointManagerMixedAir(self)



    def getSetpointManagerMixedAir(self) -> "boost::optional< openstudio::model::SetpointManagerMixedAir >":

        return _openstudiomodelhvac.Node_getSetpointManagerMixedAir(self)



    def setpointManagerScheduled(self) -> "boost::optional< openstudio::model::SetpointManagerScheduled >":

        return _openstudiomodelhvac.Node_setpointManagerScheduled(self)



    def removeSetpointManagerScheduled(self) -> "void":

        return _openstudiomodelhvac.Node_removeSetpointManagerScheduled(self)



    def setpointManagerFollowOutdoorAirTemperature(self) -> "boost::optional< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >":

        return _openstudiomodelhvac.Node_setpointManagerFollowOutdoorAirTemperature(self)



    def removeSetpointManagerFollowOutdoorAirTemperature(self) -> "void":

        return _openstudiomodelhvac.Node_removeSetpointManagerFollowOutdoorAirTemperature(self)



    def addSetpointManager(self, *args) -> "void":

        return _openstudiomodelhvac.Node_addSetpointManager(self, *args)



    def removeSetpointManagerOutdoorAirReset(self) -> "void":

        return _openstudiomodelhvac.Node_removeSetpointManagerOutdoorAirReset(self)



    def setpointManagerOutdoorAirReset(self) -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirReset >":

        return _openstudiomodelhvac.Node_setpointManagerOutdoorAirReset(self)



    def removeSetpointManagerWarmest(self) -> "void":

        return _openstudiomodelhvac.Node_removeSetpointManagerWarmest(self)



    def setpointManagerWarmest(self) -> "boost::optional< openstudio::model::SetpointManagerWarmest >":

        return _openstudiomodelhvac.Node_setpointManagerWarmest(self)



    def addSetpointManagerWarmest(self, setPointManager: 'SetpointManagerWarmest') -> "void":

        return _openstudiomodelhvac.Node_addSetpointManagerWarmest(self, setPointManager)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.Node_addToNode(self, node)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.Node_clone(self, model)



    def isRemovable(self) -> "bool":

        return _openstudiomodelhvac.Node_isRemovable(self)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.Node_remove(self)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.Node_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.Node_iddObjectType)



    def getAirflowNetworkDistributionNode(self) -> "openstudio::model::AirflowNetworkDistributionNode":

        return _openstudiomodelhvac.Node_getAirflowNetworkDistributionNode(self)



    def airflowNetworkDistributionNode(self) -> "boost::optional< openstudio::model::AirflowNetworkDistributionNode >":

        return _openstudiomodelhvac.Node_airflowNetworkDistributionNode(self)

Node_swigregister = _openstudiomodelhvac.Node_swigregister

Node_swigregister(Node)



def Node_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.Node_iddObjectType()

Node_iddObjectType = _openstudiomodelhvac.Node_iddObjectType





def toNode(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Node >":

    return _openstudiomodelhvac.toNode(idfObject)

toNode = _openstudiomodelhvac.toNode



def getNode(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Node >":

    return _openstudiomodelhvac.getNode(t_model, t_handle)

getNode = _openstudiomodelhvac.getNode



def getNodes(t_model: 'Model') -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":

    return _openstudiomodelhvac.getNodes(t_model)

getNodes = _openstudiomodelhvac.getNodes



def getNodeByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Node >":

    return _openstudiomodelhvac.getNodeByName(t_model, t_name)

getNodeByName = _openstudiomodelhvac.getNodeByName



def getNodesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":

    return _openstudiomodelhvac.getNodesByName(t_model, t_name, t_exactMatch)

getNodesByName = _openstudiomodelhvac.getNodesByName

class SizingZone(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SizingZone, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SizingZone, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model', thermalZone: 'ThermalZone'):

        this = _openstudiomodelhvac.new_SizingZone(model, thermalZone)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SizingZone

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SizingZone_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SizingZone_iddObjectType)

    __swig_getmethods__["coolingDesignAirFlowMethodValues"] = lambda x: _openstudiomodelhvac.SizingZone_coolingDesignAirFlowMethodValues

    if _newclass:

        coolingDesignAirFlowMethodValues = staticmethod(_openstudiomodelhvac.SizingZone_coolingDesignAirFlowMethodValues)

    __swig_getmethods__["heatingDesignAirFlowMethodValues"] = lambda x: _openstudiomodelhvac.SizingZone_heatingDesignAirFlowMethodValues

    if _newclass:

        heatingDesignAirFlowMethodValues = staticmethod(_openstudiomodelhvac.SizingZone_heatingDesignAirFlowMethodValues)

    __swig_getmethods__["zoneCoolingDesignSupplyAirTemperatureInputMethodValues"] = lambda x: _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethodValues

    if _newclass:

        zoneCoolingDesignSupplyAirTemperatureInputMethodValues = staticmethod(_openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethodValues)

    __swig_getmethods__["zoneHeatingDesignSupplyAirTemperatureInputMethodValues"] = lambda x: _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethodValues

    if _newclass:

        zoneHeatingDesignSupplyAirTemperatureInputMethodValues = staticmethod(_openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethodValues)



    def thermalZone(self) -> "openstudio::model::ThermalZone":

        return _openstudiomodelhvac.SizingZone_thermalZone(self)



    def zoneCoolingDesignSupplyAirTemperatureInputMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethod(self)



    def zoneCoolingDesignSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperature(self)



    def getZoneCoolingDesignSupplyAirTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getZoneCoolingDesignSupplyAirTemperature(self, returnIP)



    def zoneCoolingDesignSupplyAirTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureDifference(self)



    def zoneHeatingDesignSupplyAirTemperatureInputMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethod(self)



    def zoneHeatingDesignSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperature(self)



    def getZoneHeatingDesignSupplyAirTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getZoneHeatingDesignSupplyAirTemperature(self, returnIP)



    def zoneHeatingDesignSupplyAirTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureDifference(self)



    def zoneCoolingDesignSupplyAirHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirHumidityRatio(self)



    def getZoneCoolingDesignSupplyAirHumidityRatio(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getZoneCoolingDesignSupplyAirHumidityRatio(self, returnIP)



    def zoneHeatingDesignSupplyAirHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirHumidityRatio(self)



    def getZoneHeatingDesignSupplyAirHumidityRatio(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getZoneHeatingDesignSupplyAirHumidityRatio(self, returnIP)



    def zoneHeatingSizingFactor(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingZone_zoneHeatingSizingFactor(self)



    def getZoneHeatingSizingFactor(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.SizingZone_getZoneHeatingSizingFactor(self, returnIP)



    def zoneCoolingSizingFactor(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingZone_zoneCoolingSizingFactor(self)



    def getZoneCoolingSizingFactor(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.SizingZone_getZoneCoolingSizingFactor(self, returnIP)



    def coolingDesignAirFlowMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingZone_coolingDesignAirFlowMethod(self)



    def isCoolingDesignAirFlowMethodDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isCoolingDesignAirFlowMethodDefaulted(self)



    def coolingDesignAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.SizingZone_coolingDesignAirFlowRate(self)



    def getCoolingDesignAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getCoolingDesignAirFlowRate(self, returnIP)



    def isCoolingDesignAirFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isCoolingDesignAirFlowRateDefaulted(self)



    def coolingMinimumAirFlowperZoneFloorArea(self) -> "double":

        return _openstudiomodelhvac.SizingZone_coolingMinimumAirFlowperZoneFloorArea(self)



    def getCoolingMinimumAirFlowperZoneFloorArea(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getCoolingMinimumAirFlowperZoneFloorArea(self, returnIP)



    def isCoolingMinimumAirFlowperZoneFloorAreaDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isCoolingMinimumAirFlowperZoneFloorAreaDefaulted(self)



    def coolingMinimumAirFlow(self) -> "double":

        return _openstudiomodelhvac.SizingZone_coolingMinimumAirFlow(self)



    def getCoolingMinimumAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getCoolingMinimumAirFlow(self, returnIP)



    def isCoolingMinimumAirFlowDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isCoolingMinimumAirFlowDefaulted(self)



    def coolingMinimumAirFlowFraction(self) -> "double":

        return _openstudiomodelhvac.SizingZone_coolingMinimumAirFlowFraction(self)



    def getCoolingMinimumAirFlowFraction(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getCoolingMinimumAirFlowFraction(self, returnIP)



    def isCoolingMinimumAirFlowFractionDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isCoolingMinimumAirFlowFractionDefaulted(self)



    def heatingDesignAirFlowMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingZone_heatingDesignAirFlowMethod(self)



    def isHeatingDesignAirFlowMethodDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isHeatingDesignAirFlowMethodDefaulted(self)



    def heatingDesignAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.SizingZone_heatingDesignAirFlowRate(self)



    def getHeatingDesignAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getHeatingDesignAirFlowRate(self, returnIP)



    def isHeatingDesignAirFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isHeatingDesignAirFlowRateDefaulted(self)



    def heatingMaximumAirFlowperZoneFloorArea(self) -> "double":

        return _openstudiomodelhvac.SizingZone_heatingMaximumAirFlowperZoneFloorArea(self)



    def getHeatingMaximumAirFlowperZoneFloorArea(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getHeatingMaximumAirFlowperZoneFloorArea(self, returnIP)



    def isHeatingMaximumAirFlowperZoneFloorAreaDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isHeatingMaximumAirFlowperZoneFloorAreaDefaulted(self)



    def heatingMaximumAirFlow(self) -> "double":

        return _openstudiomodelhvac.SizingZone_heatingMaximumAirFlow(self)



    def getHeatingMaximumAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getHeatingMaximumAirFlow(self, returnIP)



    def isHeatingMaximumAirFlowDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isHeatingMaximumAirFlowDefaulted(self)



    def heatingMaximumAirFlowFraction(self) -> "double":

        return _openstudiomodelhvac.SizingZone_heatingMaximumAirFlowFraction(self)



    def getHeatingMaximumAirFlowFraction(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getHeatingMaximumAirFlowFraction(self, returnIP)



    def isHeatingMaximumAirFlowFractionDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isHeatingMaximumAirFlowFractionDefaulted(self)



    def designZoneAirDistributionEffectivenessinCoolingMode(self) -> "double":

        return _openstudiomodelhvac.SizingZone_designZoneAirDistributionEffectivenessinCoolingMode(self)



    def getDesignZoneAirDistributionEffectivenessinCoolingMode(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getDesignZoneAirDistributionEffectivenessinCoolingMode(self, returnIP)



    def isDesignZoneAirDistributionEffectivenessinCoolingModeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isDesignZoneAirDistributionEffectivenessinCoolingModeDefaulted(self)



    def designZoneAirDistributionEffectivenessinHeatingMode(self) -> "double":

        return _openstudiomodelhvac.SizingZone_designZoneAirDistributionEffectivenessinHeatingMode(self)



    def getDesignZoneAirDistributionEffectivenessinHeatingMode(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingZone_getDesignZoneAirDistributionEffectivenessinHeatingMode(self, returnIP)



    def isDesignZoneAirDistributionEffectivenessinHeatingModeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isDesignZoneAirDistributionEffectivenessinHeatingModeDefaulted(self)



    def accountforDedicatedOutdoorAirSystem(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_accountforDedicatedOutdoorAirSystem(self)



    def dedicatedOutdoorAirSystemControlStrategy(self) -> "std::string":

        return _openstudiomodelhvac.SizingZone_dedicatedOutdoorAirSystemControlStrategy(self)



    def dedicatedOutdoorAirLowSetpointTemperatureforDesign(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingZone_dedicatedOutdoorAirLowSetpointTemperatureforDesign(self)



    def isDedicatedOutdoorAirLowSetpointTemperatureforDesignAutosized(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isDedicatedOutdoorAirLowSetpointTemperatureforDesignAutosized(self)



    def dedicatedOutdoorAirHighSetpointTemperatureforDesign(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingZone_dedicatedOutdoorAirHighSetpointTemperatureforDesign(self)



    def isDedicatedOutdoorAirHighSetpointTemperatureforDesignAutosized(self) -> "bool":

        return _openstudiomodelhvac.SizingZone_isDedicatedOutdoorAirHighSetpointTemperatureforDesignAutosized(self)



    def setZoneCoolingDesignSupplyAirTemperatureInputMethod(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneCoolingDesignSupplyAirTemperatureInputMethod(self, value)



    def setZoneCoolingDesignSupplyAirTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneCoolingDesignSupplyAirTemperature(self, *args)



    def setZoneCoolingDesignSupplyAirTemperatureDifference(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneCoolingDesignSupplyAirTemperatureDifference(self, value)



    def setZoneHeatingDesignSupplyAirTemperatureInputMethod(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneHeatingDesignSupplyAirTemperatureInputMethod(self, value)



    def setZoneHeatingDesignSupplyAirTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneHeatingDesignSupplyAirTemperature(self, *args)



    def setZoneHeatingDesignSupplyAirTemperatureDifference(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneHeatingDesignSupplyAirTemperatureDifference(self, value)



    def setZoneCoolingDesignSupplyAirHumidityRatio(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneCoolingDesignSupplyAirHumidityRatio(self, *args)



    def setZoneHeatingDesignSupplyAirHumidityRatio(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneHeatingDesignSupplyAirHumidityRatio(self, *args)



    def setZoneHeatingSizingFactor(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneHeatingSizingFactor(self, *args)



    def resetZoneHeatingSizingFactor(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetZoneHeatingSizingFactor(self)



    def setZoneCoolingSizingFactor(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setZoneCoolingSizingFactor(self, *args)



    def resetZoneCoolingSizingFactor(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetZoneCoolingSizingFactor(self)



    def setCoolingDesignAirFlowMethod(self, coolingDesignAirFlowMethod: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SizingZone_setCoolingDesignAirFlowMethod(self, coolingDesignAirFlowMethod)



    def resetCoolingDesignAirFlowMethod(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetCoolingDesignAirFlowMethod(self)



    def setCoolingDesignAirFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setCoolingDesignAirFlowRate(self, *args)



    def resetCoolingDesignAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetCoolingDesignAirFlowRate(self)



    def setCoolingMinimumAirFlowperZoneFloorArea(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setCoolingMinimumAirFlowperZoneFloorArea(self, *args)



    def resetCoolingMinimumAirFlowperZoneFloorArea(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetCoolingMinimumAirFlowperZoneFloorArea(self)



    def setCoolingMinimumAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setCoolingMinimumAirFlow(self, *args)



    def resetCoolingMinimumAirFlow(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetCoolingMinimumAirFlow(self)



    def setCoolingMinimumAirFlowFraction(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setCoolingMinimumAirFlowFraction(self, *args)



    def resetCoolingMinimumAirFlowFraction(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetCoolingMinimumAirFlowFraction(self)



    def setHeatingDesignAirFlowMethod(self, heatingDesignAirFlowMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingZone_setHeatingDesignAirFlowMethod(self, heatingDesignAirFlowMethod)



    def resetHeatingDesignAirFlowMethod(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetHeatingDesignAirFlowMethod(self)



    def setHeatingDesignAirFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setHeatingDesignAirFlowRate(self, *args)



    def resetHeatingDesignAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetHeatingDesignAirFlowRate(self)



    def setHeatingMaximumAirFlowperZoneFloorArea(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setHeatingMaximumAirFlowperZoneFloorArea(self, *args)



    def resetHeatingMaximumAirFlowperZoneFloorArea(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetHeatingMaximumAirFlowperZoneFloorArea(self)



    def setHeatingMaximumAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setHeatingMaximumAirFlow(self, *args)



    def resetHeatingMaximumAirFlow(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetHeatingMaximumAirFlow(self)



    def setHeatingMaximumAirFlowFraction(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setHeatingMaximumAirFlowFraction(self, *args)



    def resetHeatingMaximumAirFlowFraction(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetHeatingMaximumAirFlowFraction(self)



    def setDesignZoneAirDistributionEffectivenessinCoolingMode(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setDesignZoneAirDistributionEffectivenessinCoolingMode(self, *args)



    def resetDesignZoneAirDistributionEffectivenessinCoolingMode(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetDesignZoneAirDistributionEffectivenessinCoolingMode(self)



    def setDesignZoneAirDistributionEffectivenessinHeatingMode(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingZone_setDesignZoneAirDistributionEffectivenessinHeatingMode(self, *args)



    def resetDesignZoneAirDistributionEffectivenessinHeatingMode(self) -> "void":

        return _openstudiomodelhvac.SizingZone_resetDesignZoneAirDistributionEffectivenessinHeatingMode(self)



    def setAccountforDedicatedOutdoorAirSystem(self, accountforDedicatedOutdoorAirSystem: 'bool') -> "bool":

        return _openstudiomodelhvac.SizingZone_setAccountforDedicatedOutdoorAirSystem(self, accountforDedicatedOutdoorAirSystem)



    def setDedicatedOutdoorAirSystemControlStrategy(self, dedicatedOutdoorAirSystemControlStrategy: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingZone_setDedicatedOutdoorAirSystemControlStrategy(self, dedicatedOutdoorAirSystemControlStrategy)



    def setDedicatedOutdoorAirLowSetpointTemperatureforDesign(self, dedicatedOutdoorAirLowSetpointTemperatureforDesign: 'double') -> "bool":

        return _openstudiomodelhvac.SizingZone_setDedicatedOutdoorAirLowSetpointTemperatureforDesign(self, dedicatedOutdoorAirLowSetpointTemperatureforDesign)



    def autosizeDedicatedOutdoorAirLowSetpointTemperatureforDesign(self) -> "void":

        return _openstudiomodelhvac.SizingZone_autosizeDedicatedOutdoorAirLowSetpointTemperatureforDesign(self)



    def setDedicatedOutdoorAirHighSetpointTemperatureforDesign(self, dedicatedOutdoorAirHighSetpointTemperatureforDesign: 'double') -> "bool":

        return _openstudiomodelhvac.SizingZone_setDedicatedOutdoorAirHighSetpointTemperatureforDesign(self, dedicatedOutdoorAirHighSetpointTemperatureforDesign)



    def autosizeDedicatedOutdoorAirHighSetpointTemperatureforDesign(self) -> "void":

        return _openstudiomodelhvac.SizingZone_autosizeDedicatedOutdoorAirHighSetpointTemperatureforDesign(self)



    def autosizedDedicatedOutdoorAirLowSetpointTemperatureforDesign(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingZone_autosizedDedicatedOutdoorAirLowSetpointTemperatureforDesign(self)



    def autosizedDedicatedOutdoorAirHighSetpointTemperatureforDesign(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingZone_autosizedDedicatedOutdoorAirHighSetpointTemperatureforDesign(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.SizingZone_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.SizingZone_applySizingValues(self)

SizingZone_swigregister = _openstudiomodelhvac.SizingZone_swigregister

SizingZone_swigregister(SizingZone)



def SizingZone_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SizingZone_iddObjectType()

SizingZone_iddObjectType = _openstudiomodelhvac.SizingZone_iddObjectType



def SizingZone_coolingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingZone_coolingDesignAirFlowMethodValues()

SizingZone_coolingDesignAirFlowMethodValues = _openstudiomodelhvac.SizingZone_coolingDesignAirFlowMethodValues



def SizingZone_heatingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingZone_heatingDesignAirFlowMethodValues()

SizingZone_heatingDesignAirFlowMethodValues = _openstudiomodelhvac.SizingZone_heatingDesignAirFlowMethodValues



def SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethodValues()

SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethodValues = _openstudiomodelhvac.SizingZone_zoneCoolingDesignSupplyAirTemperatureInputMethodValues



def SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethodValues()

SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethodValues = _openstudiomodelhvac.SizingZone_zoneHeatingDesignSupplyAirTemperatureInputMethodValues





def toSizingZone(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SizingZone >":

    return _openstudiomodelhvac.toSizingZone(idfObject)

toSizingZone = _openstudiomodelhvac.toSizingZone



def getSizingZone(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SizingZone >":

    return _openstudiomodelhvac.getSizingZone(t_model, t_handle)

getSizingZone = _openstudiomodelhvac.getSizingZone



def getSizingZones(t_model: 'Model') -> "std::vector< openstudio::model::SizingZone,std::allocator< openstudio::model::SizingZone > >":

    return _openstudiomodelhvac.getSizingZones(t_model)

getSizingZones = _openstudiomodelhvac.getSizingZones



def getSizingZoneByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SizingZone >":

    return _openstudiomodelhvac.getSizingZoneByName(t_model, t_name)

getSizingZoneByName = _openstudiomodelhvac.getSizingZoneByName



def getSizingZonesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SizingZone,std::allocator< openstudio::model::SizingZone > >":

    return _openstudiomodelhvac.getSizingZonesByName(t_model, t_name, t_exactMatch)

getSizingZonesByName = _openstudiomodelhvac.getSizingZonesByName

class SizingSystem(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SizingSystem, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SizingSystem, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model', airLoopHVAC: 'AirLoopHVAC'):

        this = _openstudiomodelhvac.new_SizingSystem(model, airLoopHVAC)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SizingSystem

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SizingSystem_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SizingSystem_iddObjectType)

    __swig_getmethods__["validTypeofLoadtoSizeOnValues"] = lambda x: _openstudiomodelhvac.SizingSystem_validTypeofLoadtoSizeOnValues

    if _newclass:

        validTypeofLoadtoSizeOnValues = staticmethod(_openstudiomodelhvac.SizingSystem_validTypeofLoadtoSizeOnValues)

    __swig_getmethods__["validSizingOptionValues"] = lambda x: _openstudiomodelhvac.SizingSystem_validSizingOptionValues

    if _newclass:

        validSizingOptionValues = staticmethod(_openstudiomodelhvac.SizingSystem_validSizingOptionValues)

    __swig_getmethods__["validCoolingDesignAirFlowMethodValues"] = lambda x: _openstudiomodelhvac.SizingSystem_validCoolingDesignAirFlowMethodValues

    if _newclass:

        validCoolingDesignAirFlowMethodValues = staticmethod(_openstudiomodelhvac.SizingSystem_validCoolingDesignAirFlowMethodValues)

    __swig_getmethods__["validHeatingDesignAirFlowMethodValues"] = lambda x: _openstudiomodelhvac.SizingSystem_validHeatingDesignAirFlowMethodValues

    if _newclass:

        validHeatingDesignAirFlowMethodValues = staticmethod(_openstudiomodelhvac.SizingSystem_validHeatingDesignAirFlowMethodValues)

    __swig_getmethods__["validSystemOutdoorAirMethodValues"] = lambda x: _openstudiomodelhvac.SizingSystem_validSystemOutdoorAirMethodValues

    if _newclass:

        validSystemOutdoorAirMethodValues = staticmethod(_openstudiomodelhvac.SizingSystem_validSystemOutdoorAirMethodValues)



    def typeofLoadtoSizeOn(self) -> "std::string":

        return _openstudiomodelhvac.SizingSystem_typeofLoadtoSizeOn(self)



    def isTypeofLoadtoSizeOnDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isTypeofLoadtoSizeOnDefaulted(self)



    def designOutdoorAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingSystem_designOutdoorAirFlowRate(self)



    def isDesignOutdoorAirFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isDesignOutdoorAirFlowRateDefaulted(self)



    def isDesignOutdoorAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isDesignOutdoorAirFlowRateAutosized(self)



    def preheatDesignTemperature(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_preheatDesignTemperature(self)



    def preheatDesignHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_preheatDesignHumidityRatio(self)



    def precoolDesignTemperature(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_precoolDesignTemperature(self)



    def precoolDesignHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_precoolDesignHumidityRatio(self)



    def centralCoolingDesignSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_centralCoolingDesignSupplyAirTemperature(self)



    def centralHeatingDesignSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_centralHeatingDesignSupplyAirTemperature(self)



    def sizingOption(self) -> "std::string":

        return _openstudiomodelhvac.SizingSystem_sizingOption(self)



    def isSizingOptionDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isSizingOptionDefaulted(self)



    def allOutdoorAirinCooling(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_allOutdoorAirinCooling(self)



    def isAllOutdoorAirinCoolingDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isAllOutdoorAirinCoolingDefaulted(self)



    def allOutdoorAirinHeating(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_allOutdoorAirinHeating(self)



    def isAllOutdoorAirinHeatingDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isAllOutdoorAirinHeatingDefaulted(self)



    def centralCoolingDesignSupplyAirHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_centralCoolingDesignSupplyAirHumidityRatio(self)



    def isCentralCoolingDesignSupplyAirHumidityRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isCentralCoolingDesignSupplyAirHumidityRatioDefaulted(self)



    def centralHeatingDesignSupplyAirHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_centralHeatingDesignSupplyAirHumidityRatio(self)



    def isCentralHeatingDesignSupplyAirHumidityRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isCentralHeatingDesignSupplyAirHumidityRatioDefaulted(self)



    def coolingDesignAirFlowMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingSystem_coolingDesignAirFlowMethod(self)



    def isCoolingDesignAirFlowMethodDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isCoolingDesignAirFlowMethodDefaulted(self)



    def coolingDesignAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_coolingDesignAirFlowRate(self)



    def isCoolingDesignAirFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isCoolingDesignAirFlowRateDefaulted(self)



    def heatingDesignAirFlowMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingSystem_heatingDesignAirFlowMethod(self)



    def isHeatingDesignAirFlowMethodDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isHeatingDesignAirFlowMethodDefaulted(self)



    def heatingDesignAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_heatingDesignAirFlowRate(self)



    def isHeatingDesignAirFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isHeatingDesignAirFlowRateDefaulted(self)



    def systemOutdoorAirMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingSystem_systemOutdoorAirMethod(self)



    def isSystemOutdoorAirMethodDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isSystemOutdoorAirMethodDefaulted(self)



    def zoneMaximumOutdoorAirFraction(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_zoneMaximumOutdoorAirFraction(self)



    def coolingSupplyAirFlowRatePerFloorArea(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_coolingSupplyAirFlowRatePerFloorArea(self)



    def coolingFractionofAutosizedCoolingSupplyAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_coolingFractionofAutosizedCoolingSupplyAirFlowRate(self)



    def coolingSupplyAirFlowRatePerUnitCoolingCapacity(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_coolingSupplyAirFlowRatePerUnitCoolingCapacity(self)



    def heatingSupplyAirFlowRatePerFloorArea(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_heatingSupplyAirFlowRatePerFloorArea(self)



    def heatingFractionofAutosizedHeatingSupplyAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_heatingFractionofAutosizedHeatingSupplyAirFlowRate(self)



    def heatingFractionofAutosizedCoolingSupplyAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_heatingFractionofAutosizedCoolingSupplyAirFlowRate(self)



    def heatingSupplyAirFlowRatePerUnitHeatingCapacity(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_heatingSupplyAirFlowRatePerUnitHeatingCapacity(self)



    def coolingDesignCapacityMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingSystem_coolingDesignCapacityMethod(self)



    def coolingDesignCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingSystem_coolingDesignCapacity(self)



    def isCoolingDesignCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isCoolingDesignCapacityAutosized(self)



    def coolingDesignCapacityPerFloorArea(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_coolingDesignCapacityPerFloorArea(self)



    def fractionofAutosizedCoolingDesignCapacity(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_fractionofAutosizedCoolingDesignCapacity(self)



    def heatingDesignCapacityMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingSystem_heatingDesignCapacityMethod(self)



    def heatingDesignCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingSystem_heatingDesignCapacity(self)



    def isHeatingDesignCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isHeatingDesignCapacityAutosized(self)



    def heatingDesignCapacityPerFloorArea(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_heatingDesignCapacityPerFloorArea(self)



    def fractionofAutosizedHeatingDesignCapacity(self) -> "double":

        return _openstudiomodelhvac.SizingSystem_fractionofAutosizedHeatingDesignCapacity(self)



    def centralCoolingCapacityControlMethod(self) -> "std::string":

        return _openstudiomodelhvac.SizingSystem_centralCoolingCapacityControlMethod(self)



    def setTypeofLoadtoSizeOn(self, typeofLoadtoSizeOn: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setTypeofLoadtoSizeOn(self, typeofLoadtoSizeOn)



    def resetTypeofLoadtoSizeOn(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetTypeofLoadtoSizeOn(self)



    def setDesignOutdoorAirFlowRate(self, designOutdoorAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setDesignOutdoorAirFlowRate(self, designOutdoorAirFlowRate)



    def resetDesignOutdoorAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetDesignOutdoorAirFlowRate(self)



    def autosizeDesignOutdoorAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_autosizeDesignOutdoorAirFlowRate(self)



    def setPreheatDesignTemperature(self, preheatDesignTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setPreheatDesignTemperature(self, preheatDesignTemperature)



    def setPreheatDesignHumidityRatio(self, preheatDesignHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setPreheatDesignHumidityRatio(self, preheatDesignHumidityRatio)



    def setPrecoolDesignTemperature(self, precoolDesignTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setPrecoolDesignTemperature(self, precoolDesignTemperature)



    def setPrecoolDesignHumidityRatio(self, precoolDesignHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setPrecoolDesignHumidityRatio(self, precoolDesignHumidityRatio)



    def setCentralCoolingDesignSupplyAirTemperature(self, centralCoolingDesignSupplyAirTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCentralCoolingDesignSupplyAirTemperature(self, centralCoolingDesignSupplyAirTemperature)



    def setCentralHeatingDesignSupplyAirTemperature(self, centralHeatingDesignSupplyAirTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCentralHeatingDesignSupplyAirTemperature(self, centralHeatingDesignSupplyAirTemperature)



    def setSizingOption(self, sizingOption: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setSizingOption(self, sizingOption)



    def resetSizingOption(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetSizingOption(self)



    def setAllOutdoorAirinCooling(self, allOutdoorAirinCooling: 'bool') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setAllOutdoorAirinCooling(self, allOutdoorAirinCooling)



    def resetAllOutdoorAirinCooling(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetAllOutdoorAirinCooling(self)



    def setAllOutdoorAirinHeating(self, allOutdoorAirinHeating: 'bool') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setAllOutdoorAirinHeating(self, allOutdoorAirinHeating)



    def resetAllOutdoorAirinHeating(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetAllOutdoorAirinHeating(self)



    def setCentralCoolingDesignSupplyAirHumidityRatio(self, centralCoolingDesignSupplyAirHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCentralCoolingDesignSupplyAirHumidityRatio(self, centralCoolingDesignSupplyAirHumidityRatio)



    def resetCentralCoolingDesignSupplyAirHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetCentralCoolingDesignSupplyAirHumidityRatio(self)



    def setCentralHeatingDesignSupplyAirHumidityRatio(self, centralHeatingDesignSupplyAirHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCentralHeatingDesignSupplyAirHumidityRatio(self, centralHeatingDesignSupplyAirHumidityRatio)



    def resetCentralHeatingDesignSupplyAirHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetCentralHeatingDesignSupplyAirHumidityRatio(self)



    def setCoolingDesignAirFlowMethod(self, coolingDesignAirFlowMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCoolingDesignAirFlowMethod(self, coolingDesignAirFlowMethod)



    def resetCoolingDesignAirFlowMethod(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetCoolingDesignAirFlowMethod(self)



    def setCoolingDesignAirFlowRate(self, coolingDesignAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCoolingDesignAirFlowRate(self, coolingDesignAirFlowRate)



    def resetCoolingDesignAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetCoolingDesignAirFlowRate(self)



    def setHeatingDesignAirFlowMethod(self, heatingDesignAirFlowMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setHeatingDesignAirFlowMethod(self, heatingDesignAirFlowMethod)



    def resetHeatingDesignAirFlowMethod(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetHeatingDesignAirFlowMethod(self)



    def setHeatingDesignAirFlowRate(self, heatingDesignAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setHeatingDesignAirFlowRate(self, heatingDesignAirFlowRate)



    def resetHeatingDesignAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetHeatingDesignAirFlowRate(self)



    def setSystemOutdoorAirMethod(self, systemOutdoorAirMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setSystemOutdoorAirMethod(self, systemOutdoorAirMethod)



    def resetSystemOutdoorAirMethod(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_resetSystemOutdoorAirMethod(self)



    def setZoneMaximumOutdoorAirFraction(self, zoneMaximumOutdoorAirFraction: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setZoneMaximumOutdoorAirFraction(self, zoneMaximumOutdoorAirFraction)



    def setCoolingSupplyAirFlowRatePerFloorArea(self, coolingSupplyAirFlowRatePerFloorArea: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCoolingSupplyAirFlowRatePerFloorArea(self, coolingSupplyAirFlowRatePerFloorArea)



    def setCoolingFractionofAutosizedCoolingSupplyAirFlowRate(self, coolingFractionofAutosizedCoolingSupplyAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCoolingFractionofAutosizedCoolingSupplyAirFlowRate(self, coolingFractionofAutosizedCoolingSupplyAirFlowRate)



    def setCoolingSupplyAirFlowRatePerUnitCoolingCapacity(self, coolingSupplyAirFlowRatePerUnitCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCoolingSupplyAirFlowRatePerUnitCoolingCapacity(self, coolingSupplyAirFlowRatePerUnitCoolingCapacity)



    def setHeatingSupplyAirFlowRatePerFloorArea(self, heatingSupplyAirFlowRatePerFloorArea: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setHeatingSupplyAirFlowRatePerFloorArea(self, heatingSupplyAirFlowRatePerFloorArea)



    def setHeatingFractionofAutosizedHeatingSupplyAirFlowRate(self, heatingFractionofAutosizedHeatingSupplyAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setHeatingFractionofAutosizedHeatingSupplyAirFlowRate(self, heatingFractionofAutosizedHeatingSupplyAirFlowRate)



    def setHeatingFractionofAutosizedCoolingSupplyAirFlowRate(self, heatingFractionofAutosizedCoolingSupplyAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setHeatingFractionofAutosizedCoolingSupplyAirFlowRate(self, heatingFractionofAutosizedCoolingSupplyAirFlowRate)



    def setHeatingSupplyAirFlowRatePerUnitHeatingCapacity(self, heatingSupplyAirFlowRatePerUnitHeatingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setHeatingSupplyAirFlowRatePerUnitHeatingCapacity(self, heatingSupplyAirFlowRatePerUnitHeatingCapacity)



    def setCoolingDesignCapacityMethod(self, coolingDesignCapacityMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCoolingDesignCapacityMethod(self, coolingDesignCapacityMethod)



    def setCoolingDesignCapacity(self, coolingDesignCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCoolingDesignCapacity(self, coolingDesignCapacity)



    def autosizeCoolingDesignCapacity(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_autosizeCoolingDesignCapacity(self)



    def setCoolingDesignCapacityPerFloorArea(self, coolingDesignCapacityPerFloorArea: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCoolingDesignCapacityPerFloorArea(self, coolingDesignCapacityPerFloorArea)



    def setFractionofAutosizedCoolingDesignCapacity(self, fractionofAutosizedCoolingDesignCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setFractionofAutosizedCoolingDesignCapacity(self, fractionofAutosizedCoolingDesignCapacity)



    def setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod)



    def setHeatingDesignCapacity(self, heatingDesignCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setHeatingDesignCapacity(self, heatingDesignCapacity)



    def autosizeHeatingDesignCapacity(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_autosizeHeatingDesignCapacity(self)



    def setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea)



    def setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity)



    def setCentralCoolingCapacityControlMethod(self, centralCoolingCapacityControlMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCentralCoolingCapacityControlMethod(self, centralCoolingCapacityControlMethod)



    def airLoopHVAC(self) -> "openstudio::model::AirLoopHVAC":

        return _openstudiomodelhvac.SizingSystem_airLoopHVAC(self)



    def centralHeatingMaximumSystemAirFlowRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingSystem_centralHeatingMaximumSystemAirFlowRatio(self)



    def isCentralHeatingMaximumSystemAirFlowRatioAutosized(self) -> "bool":

        return _openstudiomodelhvac.SizingSystem_isCentralHeatingMaximumSystemAirFlowRatioAutosized(self)



    def setCentralHeatingMaximumSystemAirFlowRatio(self, centralHeatingMaximumSystemAirFlowRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setCentralHeatingMaximumSystemAirFlowRatio(self, centralHeatingMaximumSystemAirFlowRatio)



    def autosizeCentralHeatingMaximumSystemAirFlowRatio(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_autosizeCentralHeatingMaximumSystemAirFlowRatio(self)



    def minimumSystemAirFlowRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingSystem_minimumSystemAirFlowRatio(self)



    def setMinimumSystemAirFlowRatio(self, centralHeatingMaximumSystemAirFlowRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SizingSystem_setMinimumSystemAirFlowRatio(self, centralHeatingMaximumSystemAirFlowRatio)



    def autosizedDesignOutdoorAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingSystem_autosizedDesignOutdoorAirFlowRate(self)



    def autosizedCentralHeatingMaximumSystemAirFlowRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingSystem_autosizedCentralHeatingMaximumSystemAirFlowRatio(self)



    def autosizedCoolingDesignCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingSystem_autosizedCoolingDesignCapacity(self)



    def autosizedHeatingDesignCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SizingSystem_autosizedHeatingDesignCapacity(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.SizingSystem_applySizingValues(self)

SizingSystem_swigregister = _openstudiomodelhvac.SizingSystem_swigregister

SizingSystem_swigregister(SizingSystem)



def SizingSystem_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SizingSystem_iddObjectType()

SizingSystem_iddObjectType = _openstudiomodelhvac.SizingSystem_iddObjectType



def SizingSystem_validTypeofLoadtoSizeOnValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingSystem_validTypeofLoadtoSizeOnValues()

SizingSystem_validTypeofLoadtoSizeOnValues = _openstudiomodelhvac.SizingSystem_validTypeofLoadtoSizeOnValues



def SizingSystem_validSizingOptionValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingSystem_validSizingOptionValues()

SizingSystem_validSizingOptionValues = _openstudiomodelhvac.SizingSystem_validSizingOptionValues



def SizingSystem_validCoolingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingSystem_validCoolingDesignAirFlowMethodValues()

SizingSystem_validCoolingDesignAirFlowMethodValues = _openstudiomodelhvac.SizingSystem_validCoolingDesignAirFlowMethodValues



def SizingSystem_validHeatingDesignAirFlowMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingSystem_validHeatingDesignAirFlowMethodValues()

SizingSystem_validHeatingDesignAirFlowMethodValues = _openstudiomodelhvac.SizingSystem_validHeatingDesignAirFlowMethodValues



def SizingSystem_validSystemOutdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingSystem_validSystemOutdoorAirMethodValues()

SizingSystem_validSystemOutdoorAirMethodValues = _openstudiomodelhvac.SizingSystem_validSystemOutdoorAirMethodValues





def toSizingSystem(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SizingSystem >":

    return _openstudiomodelhvac.toSizingSystem(idfObject)

toSizingSystem = _openstudiomodelhvac.toSizingSystem



def getSizingSystem(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SizingSystem >":

    return _openstudiomodelhvac.getSizingSystem(t_model, t_handle)

getSizingSystem = _openstudiomodelhvac.getSizingSystem



def getSizingSystems(t_model: 'Model') -> "std::vector< openstudio::model::SizingSystem,std::allocator< openstudio::model::SizingSystem > >":

    return _openstudiomodelhvac.getSizingSystems(t_model)

getSizingSystems = _openstudiomodelhvac.getSizingSystems



def getSizingSystemByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SizingSystem >":

    return _openstudiomodelhvac.getSizingSystemByName(t_model, t_name)

getSizingSystemByName = _openstudiomodelhvac.getSizingSystemByName



def getSizingSystemsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SizingSystem,std::allocator< openstudio::model::SizingSystem > >":

    return _openstudiomodelhvac.getSizingSystemsByName(t_model, t_name, t_exactMatch)

getSizingSystemsByName = _openstudiomodelhvac.getSizingSystemsByName

class ThermalZone(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermalZone, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ThermalZone, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ThermalZone(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ThermalZone

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ThermalZone_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ThermalZone_iddObjectType)

    __swig_getmethods__["validZoneInsideConvectionAlgorithmValues"] = lambda x: _openstudiomodelhvac.ThermalZone_validZoneInsideConvectionAlgorithmValues

    if _newclass:

        validZoneInsideConvectionAlgorithmValues = staticmethod(_openstudiomodelhvac.ThermalZone_validZoneInsideConvectionAlgorithmValues)

    __swig_getmethods__["validZoneOutsideConvectionAlgorithmValues"] = lambda x: _openstudiomodelhvac.ThermalZone_validZoneOutsideConvectionAlgorithmValues

    if _newclass:

        validZoneOutsideConvectionAlgorithmValues = staticmethod(_openstudiomodelhvac.ThermalZone_validZoneOutsideConvectionAlgorithmValues)



    def multiplier(self) -> "int":

        return _openstudiomodelhvac.ThermalZone_multiplier(self)



    def isMultiplierDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_isMultiplierDefaulted(self)



    def ceilingHeight(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalZone_ceilingHeight(self)



    def getCeilingHeight(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.ThermalZone_getCeilingHeight(self, returnIP)



    def isCeilingHeightDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_isCeilingHeightDefaulted(self)



    def isCeilingHeightAutocalculated(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_isCeilingHeightAutocalculated(self)



    def volume(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalZone_volume(self)



    def getVolume(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.ThermalZone_getVolume(self, returnIP)



    def isVolumeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_isVolumeDefaulted(self)



    def isVolumeAutocalculated(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_isVolumeAutocalculated(self)



    def zoneInsideConvectionAlgorithm(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ThermalZone_zoneInsideConvectionAlgorithm(self)



    def zoneOutsideConvectionAlgorithm(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ThermalZone_zoneOutsideConvectionAlgorithm(self)



    def zoneConditioningEquipmentListName(self) -> "std::string":

        return _openstudiomodelhvac.ThermalZone_zoneConditioningEquipmentListName(self)



    def thermostat(self) -> "boost::optional< openstudio::model::Thermostat >":

        return _openstudiomodelhvac.ThermalZone_thermostat(self)



    def thermostatSetpointDualSetpoint(self) -> "boost::optional< openstudio::model::ThermostatSetpointDualSetpoint >":

        return _openstudiomodelhvac.ThermalZone_thermostatSetpointDualSetpoint(self)



    def zoneControlHumidistat(self) -> "boost::optional< openstudio::model::ZoneControlHumidistat >":

        return _openstudiomodelhvac.ThermalZone_zoneControlHumidistat(self)



    def zoneControlContaminantController(self) -> "boost::optional< openstudio::model::ZoneControlContaminantController >":

        return _openstudiomodelhvac.ThermalZone_zoneControlContaminantController(self)



    def fractionofZoneControlledbyPrimaryDaylightingControl(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_fractionofZoneControlledbyPrimaryDaylightingControl(self)



    def getFractionofZoneControlledbyPrimaryDaylightingControl(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.ThermalZone_getFractionofZoneControlledbyPrimaryDaylightingControl(self, returnIP)



    def isFractionofZoneControlledbyPrimaryDaylightingControlDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_isFractionofZoneControlledbyPrimaryDaylightingControlDefaulted(self)



    def fractionofZoneControlledbySecondaryDaylightingControl(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_fractionofZoneControlledbySecondaryDaylightingControl(self)



    def getFractionofZoneControlledbySecondaryDaylightingControl(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.ThermalZone_getFractionofZoneControlledbySecondaryDaylightingControl(self, returnIP)



    def isFractionofZoneControlledbySecondaryDaylightingControlDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_isFractionofZoneControlledbySecondaryDaylightingControlDefaulted(self)



    def sizingZone(self) -> "openstudio::model::SizingZone":

        return _openstudiomodelhvac.ThermalZone_sizingZone(self)



    def setMultiplier(self, multiplier: 'int') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setMultiplier(self, multiplier)



    def resetMultiplier(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetMultiplier(self)



    def setCeilingHeight(self, *args) -> "bool":

        return _openstudiomodelhvac.ThermalZone_setCeilingHeight(self, *args)



    def resetCeilingHeight(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetCeilingHeight(self)



    def autocalculateCeilingHeight(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_autocalculateCeilingHeight(self)



    def setVolume(self, *args) -> "bool":

        return _openstudiomodelhvac.ThermalZone_setVolume(self, *args)



    def resetVolume(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetVolume(self)



    def autocalculateVolume(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_autocalculateVolume(self)



    def setZoneInsideConvectionAlgorithm(self, *args) -> "bool":

        return _openstudiomodelhvac.ThermalZone_setZoneInsideConvectionAlgorithm(self, *args)



    def resetZoneInsideConvectionAlgorithm(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetZoneInsideConvectionAlgorithm(self)



    def setZoneOutsideConvectionAlgorithm(self, *args) -> "bool":

        return _openstudiomodelhvac.ThermalZone_setZoneOutsideConvectionAlgorithm(self, *args)



    def resetZoneOutsideConvectionAlgorithm(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetZoneOutsideConvectionAlgorithm(self)



    def setZoneConditioningEquipmentListName(self, zoneConditioningEquipmentListName: 'std::string') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setZoneConditioningEquipmentListName(self, zoneConditioningEquipmentListName)



    def setThermostatSetpointDualSetpoint(self, thermostat: 'ThermostatSetpointDualSetpoint') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setThermostatSetpointDualSetpoint(self, thermostat)



    def resetThermostatSetpointDualSetpoint(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetThermostatSetpointDualSetpoint(self)



    def setThermostat(self, thermostat: 'Thermostat') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setThermostat(self, thermostat)



    def resetThermostat(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetThermostat(self)



    def setZoneControlHumidistat(self, humidistat: 'ZoneControlHumidistat') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setZoneControlHumidistat(self, humidistat)



    def resetZoneControlHumidistat(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetZoneControlHumidistat(self)



    def setZoneControlContaminantController(self, contaminantController: 'ZoneControlContaminantController') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setZoneControlContaminantController(self, contaminantController)



    def resetZoneControlContaminantController(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetZoneControlContaminantController(self)



    def setFractionofZoneControlledbyPrimaryDaylightingControl(self, *args) -> "bool":

        return _openstudiomodelhvac.ThermalZone_setFractionofZoneControlledbyPrimaryDaylightingControl(self, *args)



    def resetFractionofZoneControlledbyPrimaryDaylightingControl(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetFractionofZoneControlledbyPrimaryDaylightingControl(self)



    def setFractionofZoneControlledbySecondaryDaylightingControl(self, *args) -> "bool":

        return _openstudiomodelhvac.ThermalZone_setFractionofZoneControlledbySecondaryDaylightingControl(self, *args)



    def resetFractionofZoneControlledbySecondaryDaylightingControl(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetFractionofZoneControlledbySecondaryDaylightingControl(self)



    def returnAirPort(self) -> "unsigned int":

        return _openstudiomodelhvac.ThermalZone_returnAirPort(self)



    def zoneAirPort(self) -> "unsigned int":

        return _openstudiomodelhvac.ThermalZone_zoneAirPort(self)



    def returnAirModelObject(self) -> "openstudio::model::OptionalModelObject":

        return _openstudiomodelhvac.ThermalZone_returnAirModelObject(self)



    def returnAirModelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.ThermalZone_returnAirModelObjects(self)



    def zoneAirNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.ThermalZone_zoneAirNode(self)



    def primaryDaylightingControl(self) -> "boost::optional< openstudio::model::DaylightingControl >":

        return _openstudiomodelhvac.ThermalZone_primaryDaylightingControl(self)



    def setPrimaryDaylightingControl(self, daylightingControl: 'DaylightingControl') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setPrimaryDaylightingControl(self, daylightingControl)



    def resetPrimaryDaylightingControl(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetPrimaryDaylightingControl(self)



    def secondaryDaylightingControl(self) -> "boost::optional< openstudio::model::DaylightingControl >":

        return _openstudiomodelhvac.ThermalZone_secondaryDaylightingControl(self)



    def setSecondaryDaylightingControl(self, daylightingControl: 'DaylightingControl') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setSecondaryDaylightingControl(self, daylightingControl)



    def resetSecondaryDaylightingControl(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetSecondaryDaylightingControl(self)



    def illuminanceMap(self) -> "boost::optional< openstudio::model::IlluminanceMap >":

        return _openstudiomodelhvac.ThermalZone_illuminanceMap(self)



    def setIlluminanceMap(self, illuminanceMap: 'IlluminanceMap') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setIlluminanceMap(self, illuminanceMap)



    def resetIlluminanceMap(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetIlluminanceMap(self)



    def checkDaylightingControlsAndIlluminanceMaps(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_checkDaylightingControlsAndIlluminanceMaps(self)



    def renderingColor(self) -> "boost::optional< openstudio::model::RenderingColor >":

        return _openstudiomodelhvac.ThermalZone_renderingColor(self)



    def setRenderingColor(self, renderingColor: 'RenderingColor') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setRenderingColor(self, renderingColor)



    def resetRenderingColor(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_resetRenderingColor(self)



    def equipment(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.ThermalZone_equipment(self)



    def airLoopHVACTerminal(self) -> "boost::optional< openstudio::model::HVACComponent >":

        return _openstudiomodelhvac.ThermalZone_airLoopHVACTerminal(self)



    def airLoopHVACTerminals(self) -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":

        return _openstudiomodelhvac.ThermalZone_airLoopHVACTerminals(self)



    def spaces(self) -> "std::vector< openstudio::model::Space,std::allocator< openstudio::model::Space > >":

        return _openstudiomodelhvac.ThermalZone_spaces(self)



    def floorArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_floorArea(self)



    def exteriorSurfaceArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_exteriorSurfaceArea(self)



    def exteriorWallArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_exteriorWallArea(self)



    def airVolume(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_airVolume(self)



    def numberOfPeople(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_numberOfPeople(self)



    def peoplePerFloorArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_peoplePerFloorArea(self)



    def floorAreaPerPerson(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_floorAreaPerPerson(self)



    def lightingPower(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_lightingPower(self)



    def lightingPowerPerFloorArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_lightingPowerPerFloorArea(self)



    def lightingPowerPerPerson(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_lightingPowerPerPerson(self)



    def electricEquipmentPower(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_electricEquipmentPower(self)



    def electricEquipmentPowerPerFloorArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_electricEquipmentPowerPerFloorArea(self)



    def electricEquipmentPowerPerPerson(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_electricEquipmentPowerPerPerson(self)



    def gasEquipmentPower(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_gasEquipmentPower(self)



    def gasEquipmentPowerPerFloorArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_gasEquipmentPowerPerFloorArea(self)



    def gasEquipmentPowerPerPerson(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_gasEquipmentPowerPerPerson(self)



    def infiltrationDesignFlowRate(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_infiltrationDesignFlowRate(self)



    def infiltrationDesignFlowPerSpaceFloorArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_infiltrationDesignFlowPerSpaceFloorArea(self)



    def infiltrationDesignFlowPerExteriorSurfaceArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_infiltrationDesignFlowPerExteriorSurfaceArea(self)



    def infiltrationDesignFlowPerExteriorWallArea(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_infiltrationDesignFlowPerExteriorWallArea(self)



    def infiltrationDesignAirChangesPerHour(self) -> "double":

        return _openstudiomodelhvac.ThermalZone_infiltrationDesignAirChangesPerHour(self)



    def isConditioned(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ThermalZone_isConditioned(self)



    def combineSpaces(self) -> "boost::optional< openstudio::model::Space >":

        return _openstudiomodelhvac.ThermalZone_combineSpaces(self)



    def disconnect(self) -> "void":

        return _openstudiomodelhvac.ThermalZone_disconnect(self)



    def isRemovable(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_isRemovable(self)



    def useIdealAirLoads(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_useIdealAirLoads(self)



    def setUseIdealAirLoads(self, useIdealAirLoads: 'bool') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setUseIdealAirLoads(self, useIdealAirLoads)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.ThermalZone_addToNode(self, node)



    def multiAddToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.ThermalZone_multiAddToNode(self, node)



    def returnPortList(self) -> "openstudio::model::PortList":

        return _openstudiomodelhvac.ThermalZone_returnPortList(self)



    def inletPortList(self) -> "openstudio::model::PortList":

        return _openstudiomodelhvac.ThermalZone_inletPortList(self)



    def exhaustPortList(self) -> "openstudio::model::PortList":

        return _openstudiomodelhvac.ThermalZone_exhaustPortList(self)



    def addEquipment(self, equipment: 'ModelObject') -> "bool":

        return _openstudiomodelhvac.ThermalZone_addEquipment(self, equipment)



    def removeEquipment(self, equipment: 'ModelObject') -> "bool":

        return _openstudiomodelhvac.ThermalZone_removeEquipment(self, equipment)



    def loadDistributionScheme(self) -> "std::string":

        return _openstudiomodelhvac.ThermalZone_loadDistributionScheme(self)



    def setLoadDistributionScheme(self, scheme: 'std::string') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setLoadDistributionScheme(self, scheme)



    def setCoolingPriority(self, equipment: 'ModelObject', priority: 'unsigned int') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setCoolingPriority(self, equipment, priority)



    def setHeatingPriority(self, equipment: 'ModelObject', priority: 'unsigned int') -> "bool":

        return _openstudiomodelhvac.ThermalZone_setHeatingPriority(self, equipment, priority)



    def equipmentInHeatingOrder(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.ThermalZone_equipmentInHeatingOrder(self)



    def equipmentInCoolingOrder(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.ThermalZone_equipmentInCoolingOrder(self)



    def isPlenum(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_isPlenum(self)



    def canBePlenum(self) -> "bool":

        return _openstudiomodelhvac.ThermalZone_canBePlenum(self)



    def setSupplyPlenum(self, *args) -> "bool":

        return _openstudiomodelhvac.ThermalZone_setSupplyPlenum(self, *args)



    def removeSupplyPlenum(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalZone_removeSupplyPlenum(self, *args)



    def setReturnPlenum(self, *args) -> "bool":

        return _openstudiomodelhvac.ThermalZone_setReturnPlenum(self, *args)



    def removeReturnPlenum(self, *args) -> "void":

        return _openstudiomodelhvac.ThermalZone_removeReturnPlenum(self, *args)



    def zoneMixing(self) -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":

        return _openstudiomodelhvac.ThermalZone_zoneMixing(self)



    def supplyZoneMixing(self) -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":

        return _openstudiomodelhvac.ThermalZone_supplyZoneMixing(self)



    def exhaustZoneMixing(self) -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":

        return _openstudiomodelhvac.ThermalZone_exhaustZoneMixing(self)



    def getAirflowNetworkZone(self) -> "openstudio::model::AirflowNetworkZone":

        return _openstudiomodelhvac.ThermalZone_getAirflowNetworkZone(self)



    def airflowNetworkZone(self) -> "boost::optional< openstudio::model::AirflowNetworkZone >":

        return _openstudiomodelhvac.ThermalZone_airflowNetworkZone(self)



    def airLoopHVACs(self) -> "std::vector< openstudio::model::AirLoopHVAC,std::allocator< openstudio::model::AirLoopHVAC > >":

        return _openstudiomodelhvac.ThermalZone_airLoopHVACs(self)

ThermalZone_swigregister = _openstudiomodelhvac.ThermalZone_swigregister

ThermalZone_swigregister(ThermalZone)



def ThermalZone_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ThermalZone_iddObjectType()

ThermalZone_iddObjectType = _openstudiomodelhvac.ThermalZone_iddObjectType



def ThermalZone_validZoneInsideConvectionAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ThermalZone_validZoneInsideConvectionAlgorithmValues()

ThermalZone_validZoneInsideConvectionAlgorithmValues = _openstudiomodelhvac.ThermalZone_validZoneInsideConvectionAlgorithmValues



def ThermalZone_validZoneOutsideConvectionAlgorithmValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ThermalZone_validZoneOutsideConvectionAlgorithmValues()

ThermalZone_validZoneOutsideConvectionAlgorithmValues = _openstudiomodelhvac.ThermalZone_validZoneOutsideConvectionAlgorithmValues





def toThermalZone(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ThermalZone >":

    return _openstudiomodelhvac.toThermalZone(idfObject)

toThermalZone = _openstudiomodelhvac.toThermalZone



def getThermalZone(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ThermalZone >":

    return _openstudiomodelhvac.getThermalZone(t_model, t_handle)

getThermalZone = _openstudiomodelhvac.getThermalZone



def getThermalZones(t_model: 'Model') -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > >":

    return _openstudiomodelhvac.getThermalZones(t_model)

getThermalZones = _openstudiomodelhvac.getThermalZones



def getThermalZoneByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ThermalZone >":

    return _openstudiomodelhvac.getThermalZoneByName(t_model, t_name)

getThermalZoneByName = _openstudiomodelhvac.getThermalZoneByName



def getThermalZonesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > >":

    return _openstudiomodelhvac.getThermalZonesByName(t_model, t_name, t_exactMatch)

getThermalZonesByName = _openstudiomodelhvac.getThermalZonesByName

class ThermostatSetpointDualSetpoint(Thermostat):

    __swig_setmethods__ = {}

    for _s in [Thermostat]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermostatSetpointDualSetpoint, name, value)

    __swig_getmethods__ = {}

    for _s in [Thermostat]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ThermostatSetpointDualSetpoint, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ThermostatSetpointDualSetpoint(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ThermostatSetpointDualSetpoint

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ThermostatSetpointDualSetpoint_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ThermostatSetpointDualSetpoint_iddObjectType)



    def heatingSetpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_heatingSetpointTemperatureSchedule(self)



    def coolingSetpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_coolingSetpointTemperatureSchedule(self)



    def getHeatingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_getHeatingSchedule(self)



    def getCoolingSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_getCoolingSchedule(self)



    def setHeatingSetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_setHeatingSetpointTemperatureSchedule(self, schedule)



    def resetHeatingSetpointTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_resetHeatingSetpointTemperatureSchedule(self)



    def setCoolingSetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_setCoolingSetpointTemperatureSchedule(self, schedule)



    def resetCoolingSetpointTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_resetCoolingSetpointTemperatureSchedule(self)



    def setHeatingSchedule(self, s: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_setHeatingSchedule(self, s)



    def resetHeatingSchedule(self) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_resetHeatingSchedule(self)



    def setCoolingSchedule(self, s: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_setCoolingSchedule(self, s)



    def resetCoolingSchedule(self) -> "void":

        return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_resetCoolingSchedule(self)

ThermostatSetpointDualSetpoint_swigregister = _openstudiomodelhvac.ThermostatSetpointDualSetpoint_swigregister

ThermostatSetpointDualSetpoint_swigregister(ThermostatSetpointDualSetpoint)



def ThermostatSetpointDualSetpoint_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ThermostatSetpointDualSetpoint_iddObjectType()

ThermostatSetpointDualSetpoint_iddObjectType = _openstudiomodelhvac.ThermostatSetpointDualSetpoint_iddObjectType





def toThermostatSetpointDualSetpoint(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ThermostatSetpointDualSetpoint >":

    return _openstudiomodelhvac.toThermostatSetpointDualSetpoint(idfObject)

toThermostatSetpointDualSetpoint = _openstudiomodelhvac.toThermostatSetpointDualSetpoint



def getThermostatSetpointDualSetpoint(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ThermostatSetpointDualSetpoint >":

    return _openstudiomodelhvac.getThermostatSetpointDualSetpoint(t_model, t_handle)

getThermostatSetpointDualSetpoint = _openstudiomodelhvac.getThermostatSetpointDualSetpoint



def getThermostatSetpointDualSetpoints(t_model: 'Model') -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint,std::allocator< openstudio::model::ThermostatSetpointDualSetpoint > >":

    return _openstudiomodelhvac.getThermostatSetpointDualSetpoints(t_model)

getThermostatSetpointDualSetpoints = _openstudiomodelhvac.getThermostatSetpointDualSetpoints



def getThermostatSetpointDualSetpointByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ThermostatSetpointDualSetpoint >":

    return _openstudiomodelhvac.getThermostatSetpointDualSetpointByName(t_model, t_name)

getThermostatSetpointDualSetpointByName = _openstudiomodelhvac.getThermostatSetpointDualSetpointByName



def getThermostatSetpointDualSetpointsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ThermostatSetpointDualSetpoint,std::allocator< openstudio::model::ThermostatSetpointDualSetpoint > >":

    return _openstudiomodelhvac.getThermostatSetpointDualSetpointsByName(t_model, t_name, t_exactMatch)

getThermostatSetpointDualSetpointsByName = _openstudiomodelhvac.getThermostatSetpointDualSetpointsByName

class ZoneControlContaminantController(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneControlContaminantController, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneControlContaminantController, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ZoneControlContaminantController(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlContaminantController

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ZoneControlContaminantController_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ZoneControlContaminantController_iddObjectType)



    def controlledZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.ZoneControlContaminantController_controlledZone(self)



    def carbonDioxideControlAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneControlContaminantController_carbonDioxideControlAvailabilitySchedule(self)



    def carbonDioxideSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneControlContaminantController_carbonDioxideSetpointSchedule(self)



    def minimumCarbonDioxideConcentrationSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneControlContaminantController_minimumCarbonDioxideConcentrationSchedule(self)



    def genericContaminantControlAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneControlContaminantController_genericContaminantControlAvailabilitySchedule(self)



    def genericContaminantSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneControlContaminantController_genericContaminantSetpointSchedule(self)



    def setCarbonDioxideControlAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneControlContaminantController_setCarbonDioxideControlAvailabilitySchedule(self, schedule)



    def resetCarbonDioxideControlAvailabilitySchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantController_resetCarbonDioxideControlAvailabilitySchedule(self)



    def setCarbonDioxideSetpointSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneControlContaminantController_setCarbonDioxideSetpointSchedule(self, schedule)



    def resetCarbonDioxideSetpointSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantController_resetCarbonDioxideSetpointSchedule(self)



    def setMinimumCarbonDioxideConcentrationSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneControlContaminantController_setMinimumCarbonDioxideConcentrationSchedule(self, schedule)



    def resetMinimumCarbonDioxideConcentrationSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantController_resetMinimumCarbonDioxideConcentrationSchedule(self)



    def setGenericContaminantControlAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneControlContaminantController_setGenericContaminantControlAvailabilitySchedule(self, schedule)



    def resetGenericContaminantControlAvailabilitySchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantController_resetGenericContaminantControlAvailabilitySchedule(self)



    def setGenericContaminantSetpointSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneControlContaminantController_setGenericContaminantSetpointSchedule(self, schedule)



    def resetGenericContaminantSetpointSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneControlContaminantController_resetGenericContaminantSetpointSchedule(self)

ZoneControlContaminantController_swigregister = _openstudiomodelhvac.ZoneControlContaminantController_swigregister

ZoneControlContaminantController_swigregister(ZoneControlContaminantController)



def ZoneControlContaminantController_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ZoneControlContaminantController_iddObjectType()

ZoneControlContaminantController_iddObjectType = _openstudiomodelhvac.ZoneControlContaminantController_iddObjectType





def toZoneControlContaminantController(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneControlContaminantController >":

    return _openstudiomodelhvac.toZoneControlContaminantController(idfObject)

toZoneControlContaminantController = _openstudiomodelhvac.toZoneControlContaminantController



def getZoneControlContaminantController(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneControlContaminantController >":

    return _openstudiomodelhvac.getZoneControlContaminantController(t_model, t_handle)

getZoneControlContaminantController = _openstudiomodelhvac.getZoneControlContaminantController



def getZoneControlContaminantControllers(t_model: 'Model') -> "std::vector< openstudio::model::ZoneControlContaminantController,std::allocator< openstudio::model::ZoneControlContaminantController > >":

    return _openstudiomodelhvac.getZoneControlContaminantControllers(t_model)

getZoneControlContaminantControllers = _openstudiomodelhvac.getZoneControlContaminantControllers



def getZoneControlContaminantControllerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneControlContaminantController >":

    return _openstudiomodelhvac.getZoneControlContaminantControllerByName(t_model, t_name)

getZoneControlContaminantControllerByName = _openstudiomodelhvac.getZoneControlContaminantControllerByName



def getZoneControlContaminantControllersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneControlContaminantController,std::allocator< openstudio::model::ZoneControlContaminantController > >":

    return _openstudiomodelhvac.getZoneControlContaminantControllersByName(t_model, t_name, t_exactMatch)

getZoneControlContaminantControllersByName = _openstudiomodelhvac.getZoneControlContaminantControllersByName

class ZoneControlHumidistat(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneControlHumidistat, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneControlHumidistat, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ZoneControlHumidistat(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlHumidistat

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ZoneControlHumidistat_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ZoneControlHumidistat_iddObjectType)



    def controlledZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.ZoneControlHumidistat_controlledZone(self)



    def humidifyingRelativeHumiditySetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneControlHumidistat_humidifyingRelativeHumiditySetpointSchedule(self)



    def dehumidifyingRelativeHumiditySetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneControlHumidistat_dehumidifyingRelativeHumiditySetpointSchedule(self)



    def setHumidifyingRelativeHumiditySetpointSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneControlHumidistat_setHumidifyingRelativeHumiditySetpointSchedule(self, schedule)



    def setDehumidifyingRelativeHumiditySetpointSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneControlHumidistat_setDehumidifyingRelativeHumiditySetpointSchedule(self, schedule)



    def resetHumidifyingRelativeHumiditySetpointSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistat_resetHumidifyingRelativeHumiditySetpointSchedule(self)



    def resetDehumidifyingRelativeHumiditySetpointSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneControlHumidistat_resetDehumidifyingRelativeHumiditySetpointSchedule(self)

ZoneControlHumidistat_swigregister = _openstudiomodelhvac.ZoneControlHumidistat_swigregister

ZoneControlHumidistat_swigregister(ZoneControlHumidistat)



def ZoneControlHumidistat_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ZoneControlHumidistat_iddObjectType()

ZoneControlHumidistat_iddObjectType = _openstudiomodelhvac.ZoneControlHumidistat_iddObjectType





def toZoneControlHumidistat(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneControlHumidistat >":

    return _openstudiomodelhvac.toZoneControlHumidistat(idfObject)

toZoneControlHumidistat = _openstudiomodelhvac.toZoneControlHumidistat



def getZoneControlHumidistat(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneControlHumidistat >":

    return _openstudiomodelhvac.getZoneControlHumidistat(t_model, t_handle)

getZoneControlHumidistat = _openstudiomodelhvac.getZoneControlHumidistat



def getZoneControlHumidistats(t_model: 'Model') -> "std::vector< openstudio::model::ZoneControlHumidistat,std::allocator< openstudio::model::ZoneControlHumidistat > >":

    return _openstudiomodelhvac.getZoneControlHumidistats(t_model)

getZoneControlHumidistats = _openstudiomodelhvac.getZoneControlHumidistats



def getZoneControlHumidistatByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneControlHumidistat >":

    return _openstudiomodelhvac.getZoneControlHumidistatByName(t_model, t_name)

getZoneControlHumidistatByName = _openstudiomodelhvac.getZoneControlHumidistatByName



def getZoneControlHumidistatsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneControlHumidistat,std::allocator< openstudio::model::ZoneControlHumidistat > >":

    return _openstudiomodelhvac.getZoneControlHumidistatsByName(t_model, t_name, t_exactMatch)

getZoneControlHumidistatsByName = _openstudiomodelhvac.getZoneControlHumidistatsByName

class ZoneControlThermostatStagedDualSetpoint(Thermostat):

    __swig_setmethods__ = {}

    for _s in [Thermostat]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneControlThermostatStagedDualSetpoint, name, value)

    __swig_getmethods__ = {}

    for _s in [Thermostat]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneControlThermostatStagedDualSetpoint, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ZoneControlThermostatStagedDualSetpoint(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneControlThermostatStagedDualSetpoint

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_iddObjectType)



    def numberofHeatingStages(self) -> "int":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_numberofHeatingStages(self)



    def heatingTemperatureSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_heatingTemperatureSetpointSchedule(self)



    def heatingThrottlingTemperatureRange(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_heatingThrottlingTemperatureRange(self)



    def stage1HeatingTemperatureOffset(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage1HeatingTemperatureOffset(self)



    def stage2HeatingTemperatureOffset(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage2HeatingTemperatureOffset(self)



    def stage3HeatingTemperatureOffset(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage3HeatingTemperatureOffset(self)



    def stage4HeatingTemperatureOffset(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage4HeatingTemperatureOffset(self)



    def numberofCoolingStages(self) -> "int":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_numberofCoolingStages(self)



    def coolingTemperatureSetpointBaseSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_coolingTemperatureSetpointBaseSchedule(self)



    def coolingThrottlingTemperatureRange(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_coolingThrottlingTemperatureRange(self)



    def stage1CoolingTemperatureOffset(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage1CoolingTemperatureOffset(self)



    def stage2CoolingTemperatureOffset(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage2CoolingTemperatureOffset(self)



    def stage3CoolingTemperatureOffset(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage3CoolingTemperatureOffset(self)



    def stage4CoolingTemperatureOffset(self) -> "double":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_stage4CoolingTemperatureOffset(self)



    def setNumberofHeatingStages(self, numberofHeatingStages: 'int') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setNumberofHeatingStages(self, numberofHeatingStages)



    def setHeatingTemperatureSetpointSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setHeatingTemperatureSetpointSchedule(self, schedule)



    def resetHeatingTemperatureSetpointSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_resetHeatingTemperatureSetpointSchedule(self)



    def setHeatingThrottlingTemperatureRange(self, heatingThrottlingTemperatureRange: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setHeatingThrottlingTemperatureRange(self, heatingThrottlingTemperatureRange)



    def setStage1HeatingTemperatureOffset(self, stage1HeatingTemperatureOffset: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage1HeatingTemperatureOffset(self, stage1HeatingTemperatureOffset)



    def setStage2HeatingTemperatureOffset(self, stage2HeatingTemperatureOffset: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage2HeatingTemperatureOffset(self, stage2HeatingTemperatureOffset)



    def setStage3HeatingTemperatureOffset(self, stage3HeatingTemperatureOffset: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage3HeatingTemperatureOffset(self, stage3HeatingTemperatureOffset)



    def setStage4HeatingTemperatureOffset(self, stage4HeatingTemperatureOffset: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage4HeatingTemperatureOffset(self, stage4HeatingTemperatureOffset)



    def setNumberofCoolingStages(self, numberofCoolingStages: 'int') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setNumberofCoolingStages(self, numberofCoolingStages)



    def setCoolingTemperatureSetpointBaseSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setCoolingTemperatureSetpointBaseSchedule(self, schedule)



    def resetCoolingTemperatureSetpointBaseSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_resetCoolingTemperatureSetpointBaseSchedule(self)



    def setCoolingThrottlingTemperatureRange(self, coolingThrottlingTemperatureRange: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setCoolingThrottlingTemperatureRange(self, coolingThrottlingTemperatureRange)



    def setStage1CoolingTemperatureOffset(self, stage1CoolingTemperatureOffset: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage1CoolingTemperatureOffset(self, stage1CoolingTemperatureOffset)



    def setStage2CoolingTemperatureOffset(self, stage2CoolingTemperatureOffset: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage2CoolingTemperatureOffset(self, stage2CoolingTemperatureOffset)



    def setStage3CoolingTemperatureOffset(self, stage3CoolingTemperatureOffset: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage3CoolingTemperatureOffset(self, stage3CoolingTemperatureOffset)



    def setStage4CoolingTemperatureOffset(self, stage4CoolingTemperatureOffset: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_setStage4CoolingTemperatureOffset(self, stage4CoolingTemperatureOffset)

ZoneControlThermostatStagedDualSetpoint_swigregister = _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_swigregister

ZoneControlThermostatStagedDualSetpoint_swigregister(ZoneControlThermostatStagedDualSetpoint)



def ZoneControlThermostatStagedDualSetpoint_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_iddObjectType()

ZoneControlThermostatStagedDualSetpoint_iddObjectType = _openstudiomodelhvac.ZoneControlThermostatStagedDualSetpoint_iddObjectType





def toZoneControlThermostatStagedDualSetpoint(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneControlThermostatStagedDualSetpoint >":

    return _openstudiomodelhvac.toZoneControlThermostatStagedDualSetpoint(idfObject)

toZoneControlThermostatStagedDualSetpoint = _openstudiomodelhvac.toZoneControlThermostatStagedDualSetpoint



def getZoneControlThermostatStagedDualSetpoint(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneControlThermostatStagedDualSetpoint >":

    return _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpoint(t_model, t_handle)

getZoneControlThermostatStagedDualSetpoint = _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpoint



def getZoneControlThermostatStagedDualSetpoints(t_model: 'Model') -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint,std::allocator< openstudio::model::ZoneControlThermostatStagedDualSetpoint > >":

    return _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpoints(t_model)

getZoneControlThermostatStagedDualSetpoints = _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpoints



def getZoneControlThermostatStagedDualSetpointByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneControlThermostatStagedDualSetpoint >":

    return _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpointByName(t_model, t_name)

getZoneControlThermostatStagedDualSetpointByName = _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpointByName



def getZoneControlThermostatStagedDualSetpointsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneControlThermostatStagedDualSetpoint,std::allocator< openstudio::model::ZoneControlThermostatStagedDualSetpoint > >":

    return _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpointsByName(t_model, t_name, t_exactMatch)

getZoneControlThermostatStagedDualSetpointsByName = _openstudiomodelhvac.getZoneControlThermostatStagedDualSetpointsByName

class AirLoopHVAC(Loop):

    __swig_setmethods__ = {}

    for _s in [Loop]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVAC, name, value)

    __swig_getmethods__ = {}

    for _s in [Loop]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVAC, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model', dualDuct: 'bool'=False):

        this = _openstudiomodelhvac.new_AirLoopHVAC(model, dualDuct)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVAC

    __del__ = lambda self: None



    def designSupplyAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.AirLoopHVAC_designSupplyAirFlowRate(self)



    def getDesignSupplyAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.AirLoopHVAC_getDesignSupplyAirFlowRate(self, returnIP)



    def isDesignSupplyAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_isDesignSupplyAirFlowRateAutosized(self)



    def setDesignSupplyAirFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_setDesignSupplyAirFlowRate(self, *args)



    def resetDesignSupplyAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVAC_resetDesignSupplyAirFlowRate(self)



    def autosizeDesignSupplyAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVAC_autosizeDesignSupplyAirFlowRate(self)



    def supplyInletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.AirLoopHVAC_supplyInletNode(self)



    def supplyOutletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":

        return _openstudiomodelhvac.AirLoopHVAC_supplyOutletNodes(self)



    def supplyOutletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.AirLoopHVAC_supplyOutletNode(self)



    def demandInletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":

        return _openstudiomodelhvac.AirLoopHVAC_demandInletNodes(self)



    def demandInletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.AirLoopHVAC_demandInletNode(self)



    def demandOutletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.AirLoopHVAC_demandOutletNode(self)



    def outdoorAirNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirLoopHVAC_outdoorAirNode(self)



    def reliefAirNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirLoopHVAC_reliefAirNode(self)



    def mixedAirNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirLoopHVAC_mixedAirNode(self)



    def returnAirNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirLoopHVAC_returnAirNode(self)



    def isDualDuct(self) -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_isDualDuct(self)



    def supplySplitter(self) -> "boost::optional< openstudio::model::Splitter >":

        return _openstudiomodelhvac.AirLoopHVAC_supplySplitter(self)



    def removeSupplySplitter(self, *args) -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_removeSupplySplitter(self, *args)



    def supplySplitterInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirLoopHVAC_supplySplitterInletNode(self)



    def supplySplitterOutletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":

        return _openstudiomodelhvac.AirLoopHVAC_supplySplitterOutletNodes(self)



    def zoneSplitter(self) -> "openstudio::model::AirLoopHVACZoneSplitter":

        return _openstudiomodelhvac.AirLoopHVAC_zoneSplitter(self)



    def zoneSplitters(self) -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter,std::allocator< openstudio::model::AirLoopHVACZoneSplitter > >":

        return _openstudiomodelhvac.AirLoopHVAC_zoneSplitters(self)



    def zoneMixer(self) -> "openstudio::model::AirLoopHVACZoneMixer":

        return _openstudiomodelhvac.AirLoopHVAC_zoneMixer(self)



    def oaComponents(self, *args) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.AirLoopHVAC_oaComponents(self, *args)



    def airLoopHVACOutdoorAirSystem(self) -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":

        return _openstudiomodelhvac.AirLoopHVAC_airLoopHVACOutdoorAirSystem(self)



    def supplyFan(self) -> "boost::optional< openstudio::model::HVACComponent >":

        return _openstudiomodelhvac.AirLoopHVAC_supplyFan(self)



    def returnFan(self) -> "boost::optional< openstudio::model::HVACComponent >":

        return _openstudiomodelhvac.AirLoopHVAC_returnFan(self)



    def reliefFan(self) -> "boost::optional< openstudio::model::HVACComponent >":

        return _openstudiomodelhvac.AirLoopHVAC_reliefFan(self)



    def addBranchForZone(self, *args) -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_addBranchForZone(self, *args)



    def multiAddBranchForZone(self, *args) -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_multiAddBranchForZone(self, *args)



    def addBranchForHVACComponent(self, hvacComponent: 'HVACComponent') -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_addBranchForHVACComponent(self, hvacComponent)



    def removeBranchForZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_removeBranchForZone(self, thermalZone)



    def sizingSystem(self) -> "openstudio::model::SizingSystem":

        return _openstudiomodelhvac.AirLoopHVAC_sizingSystem(self)



    def thermalZones(self) -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > >":

        return _openstudiomodelhvac.AirLoopHVAC_thermalZones(self)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.AirLoopHVAC_availabilitySchedule(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_setAvailabilitySchedule(self, schedule)



    def setNightCycleControlType(self, controlType: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_setNightCycleControlType(self, controlType)



    def nightCycleControlType(self) -> "std::string":

        return _openstudiomodelhvac.AirLoopHVAC_nightCycleControlType(self)



    def availabilityManagers(self) -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":

        return _openstudiomodelhvac.AirLoopHVAC_availabilityManagers(self)



    def addAvailabilityManager(self, *args) -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_addAvailabilityManager(self, *args)



    def setAvailabilityManagers(self, avms: 'AvailabilityManagerVector') -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_setAvailabilityManagers(self, avms)



    def resetAvailabilityManagers(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVAC_resetAvailabilityManagers(self)



    def removeAvailabilityManager(self, *args) -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_removeAvailabilityManager(self, *args)



    def setAvailabilityManagerPriority(self, availabilityManager: 'AvailabilityManager', priority: 'unsigned int') -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_setAvailabilityManagerPriority(self, availabilityManager, priority)



    def availabilityManagerPriority(self, availabilityManager: 'AvailabilityManager') -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVAC_availabilityManagerPriority(self, availabilityManager)



    def availabilityManager(self) -> "boost::optional< openstudio::model::AvailabilityManager >":

        return _openstudiomodelhvac.AirLoopHVAC_availabilityManager(self)



    def setAvailabilityManager(self, availabilityManager: 'AvailabilityManager') -> "bool":

        return _openstudiomodelhvac.AirLoopHVAC_setAvailabilityManager(self, availabilityManager)



    def resetAvailabilityManager(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVAC_resetAvailabilityManager(self)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.AirLoopHVAC_remove(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.AirLoopHVAC_clone(self, model)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AirLoopHVAC_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AirLoopHVAC_iddObjectType)



    def autosizedDesignSupplyAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.AirLoopHVAC_autosizedDesignSupplyAirFlowRate(self)

AirLoopHVAC_swigregister = _openstudiomodelhvac.AirLoopHVAC_swigregister

AirLoopHVAC_swigregister(AirLoopHVAC)



def AirLoopHVAC_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AirLoopHVAC_iddObjectType()

AirLoopHVAC_iddObjectType = _openstudiomodelhvac.AirLoopHVAC_iddObjectType





def toAirLoopHVAC(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirLoopHVAC >":

    return _openstudiomodelhvac.toAirLoopHVAC(idfObject)

toAirLoopHVAC = _openstudiomodelhvac.toAirLoopHVAC



def getAirLoopHVAC(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirLoopHVAC >":

    return _openstudiomodelhvac.getAirLoopHVAC(t_model, t_handle)

getAirLoopHVAC = _openstudiomodelhvac.getAirLoopHVAC



def getAirLoopHVACs(t_model: 'Model') -> "std::vector< openstudio::model::AirLoopHVAC,std::allocator< openstudio::model::AirLoopHVAC > >":

    return _openstudiomodelhvac.getAirLoopHVACs(t_model)

getAirLoopHVACs = _openstudiomodelhvac.getAirLoopHVACs



def getAirLoopHVACByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirLoopHVAC >":

    return _openstudiomodelhvac.getAirLoopHVACByName(t_model, t_name)

getAirLoopHVACByName = _openstudiomodelhvac.getAirLoopHVACByName



def getAirLoopHVACsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirLoopHVAC,std::allocator< openstudio::model::AirLoopHVAC > >":

    return _openstudiomodelhvac.getAirLoopHVACsByName(t_model, t_name, t_exactMatch)

getAirLoopHVACsByName = _openstudiomodelhvac.getAirLoopHVACsByName

class SizingPlant(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SizingPlant, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SizingPlant, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model', plantLoop: 'PlantLoop'):

        this = _openstudiomodelhvac.new_SizingPlant(model, plantLoop)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SizingPlant

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SizingPlant_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SizingPlant_iddObjectType)

    __swig_getmethods__["loopTypeValues"] = lambda x: _openstudiomodelhvac.SizingPlant_loopTypeValues

    if _newclass:

        loopTypeValues = staticmethod(_openstudiomodelhvac.SizingPlant_loopTypeValues)

    __swig_getmethods__["sizingOptionValues"] = lambda x: _openstudiomodelhvac.SizingPlant_sizingOptionValues

    if _newclass:

        sizingOptionValues = staticmethod(_openstudiomodelhvac.SizingPlant_sizingOptionValues)

    __swig_getmethods__["coincidentSizingFactorModeValues"] = lambda x: _openstudiomodelhvac.SizingPlant_coincidentSizingFactorModeValues

    if _newclass:

        coincidentSizingFactorModeValues = staticmethod(_openstudiomodelhvac.SizingPlant_coincidentSizingFactorModeValues)



    def plantLoop(self) -> "openstudio::model::PlantLoop":

        return _openstudiomodelhvac.SizingPlant_plantLoop(self)



    def setPlantLoop(self, plantLoop: 'PlantLoop') -> "bool":

        return _openstudiomodelhvac.SizingPlant_setPlantLoop(self, plantLoop)



    def loopType(self) -> "std::string":

        return _openstudiomodelhvac.SizingPlant_loopType(self)



    def setLoopType(self, loopType: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingPlant_setLoopType(self, loopType)



    def designLoopExitTemperature(self) -> "double":

        return _openstudiomodelhvac.SizingPlant_designLoopExitTemperature(self)



    def getDesignLoopExitTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingPlant_getDesignLoopExitTemperature(self, returnIP)



    def setDesignLoopExitTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingPlant_setDesignLoopExitTemperature(self, *args)



    def loopDesignTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.SizingPlant_loopDesignTemperatureDifference(self)



    def getLoopDesignTemperatureDifference(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SizingPlant_getLoopDesignTemperatureDifference(self, returnIP)



    def setLoopDesignTemperatureDifference(self, *args) -> "bool":

        return _openstudiomodelhvac.SizingPlant_setLoopDesignTemperatureDifference(self, *args)



    def sizingOption(self) -> "std::string":

        return _openstudiomodelhvac.SizingPlant_sizingOption(self)



    def setSizingOption(self, sizingOption: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingPlant_setSizingOption(self, sizingOption)



    def zoneTimestepsinAveragingWindow(self) -> "int":

        return _openstudiomodelhvac.SizingPlant_zoneTimestepsinAveragingWindow(self)



    def setZoneTimestepsinAveragingWindow(self, zoneTimestepsinAveragingWindow: 'int') -> "bool":

        return _openstudiomodelhvac.SizingPlant_setZoneTimestepsinAveragingWindow(self, zoneTimestepsinAveragingWindow)



    def coincidentSizingFactorMode(self) -> "std::string":

        return _openstudiomodelhvac.SizingPlant_coincidentSizingFactorMode(self)



    def setCoincidentSizingFactorMode(self, coincidentSizingFactorMode: 'std::string') -> "bool":

        return _openstudiomodelhvac.SizingPlant_setCoincidentSizingFactorMode(self, coincidentSizingFactorMode)

SizingPlant_swigregister = _openstudiomodelhvac.SizingPlant_swigregister

SizingPlant_swigregister(SizingPlant)



def SizingPlant_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SizingPlant_iddObjectType()

SizingPlant_iddObjectType = _openstudiomodelhvac.SizingPlant_iddObjectType



def SizingPlant_loopTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingPlant_loopTypeValues()

SizingPlant_loopTypeValues = _openstudiomodelhvac.SizingPlant_loopTypeValues



def SizingPlant_sizingOptionValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingPlant_sizingOptionValues()

SizingPlant_sizingOptionValues = _openstudiomodelhvac.SizingPlant_sizingOptionValues



def SizingPlant_coincidentSizingFactorModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SizingPlant_coincidentSizingFactorModeValues()

SizingPlant_coincidentSizingFactorModeValues = _openstudiomodelhvac.SizingPlant_coincidentSizingFactorModeValues





def toSizingPlant(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SizingPlant >":

    return _openstudiomodelhvac.toSizingPlant(idfObject)

toSizingPlant = _openstudiomodelhvac.toSizingPlant



def getSizingPlant(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SizingPlant >":

    return _openstudiomodelhvac.getSizingPlant(t_model, t_handle)

getSizingPlant = _openstudiomodelhvac.getSizingPlant



def getSizingPlants(t_model: 'Model') -> "std::vector< openstudio::model::SizingPlant,std::allocator< openstudio::model::SizingPlant > >":

    return _openstudiomodelhvac.getSizingPlants(t_model)

getSizingPlants = _openstudiomodelhvac.getSizingPlants



def getSizingPlantByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SizingPlant >":

    return _openstudiomodelhvac.getSizingPlantByName(t_model, t_name)

getSizingPlantByName = _openstudiomodelhvac.getSizingPlantByName



def getSizingPlantsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SizingPlant,std::allocator< openstudio::model::SizingPlant > >":

    return _openstudiomodelhvac.getSizingPlantsByName(t_model, t_name, t_exactMatch)

getSizingPlantsByName = _openstudiomodelhvac.getSizingPlantsByName

class PlantLoop(Loop):

    __swig_setmethods__ = {}

    for _s in [Loop]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantLoop, name, value)

    __swig_getmethods__ = {}

    for _s in [Loop]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlantLoop, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_PlantLoop(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_PlantLoop

    __del__ = lambda self: None

    __swig_getmethods__["loadDistributionSchemeValues"] = lambda x: _openstudiomodelhvac.PlantLoop_loadDistributionSchemeValues

    if _newclass:

        loadDistributionSchemeValues = staticmethod(_openstudiomodelhvac.PlantLoop_loadDistributionSchemeValues)

    __swig_getmethods__["fluidTypeValues"] = lambda x: _openstudiomodelhvac.PlantLoop_fluidTypeValues

    if _newclass:

        fluidTypeValues = staticmethod(_openstudiomodelhvac.PlantLoop_fluidTypeValues)



    def loadDistributionScheme(self) -> "std::string":

        return _openstudiomodelhvac.PlantLoop_loadDistributionScheme(self)



    def setLoadDistributionScheme(self, scheme: 'std::string') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setLoadDistributionScheme(self, scheme)



    def fluidType(self) -> "std::string":

        return _openstudiomodelhvac.PlantLoop_fluidType(self)



    def setFluidType(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setFluidType(self, value)



    def setGlycolConcentration(self, glycolConcentration: 'int') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setGlycolConcentration(self, glycolConcentration)



    def glycolConcentration(self) -> "int":

        return _openstudiomodelhvac.PlantLoop_glycolConcentration(self)



    def loopTemperatureSetpointNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.PlantLoop_loopTemperatureSetpointNode(self)



    def setLoopTemperatureSetpointNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setLoopTemperatureSetpointNode(self, node)



    def maximumLoopTemperature(self) -> "double":

        return _openstudiomodelhvac.PlantLoop_maximumLoopTemperature(self)



    def setMaximumLoopTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setMaximumLoopTemperature(self, value)



    def minimumLoopTemperature(self) -> "double":

        return _openstudiomodelhvac.PlantLoop_minimumLoopTemperature(self)



    def setMinimumLoopTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setMinimumLoopTemperature(self, value)



    def maximumLoopFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.PlantLoop_maximumLoopFlowRate(self)



    def setMaximumLoopFlowRate(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setMaximumLoopFlowRate(self, value)



    def isMaximumLoopFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.PlantLoop_isMaximumLoopFlowRateAutosized(self)



    def autosizeMaximumLoopFlowRate(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_autosizeMaximumLoopFlowRate(self)



    def minimumLoopFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.PlantLoop_minimumLoopFlowRate(self)



    def setMinimumLoopFlowRate(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setMinimumLoopFlowRate(self, value)



    def isMinimumLoopFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.PlantLoop_isMinimumLoopFlowRateAutosized(self)



    def autosizeMinimumLoopFlowRate(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_autosizeMinimumLoopFlowRate(self)



    def plantLoopVolume(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.PlantLoop_plantLoopVolume(self)



    def setPlantLoopVolume(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setPlantLoopVolume(self, value)



    def isPlantLoopVolumeAutocalculated(self) -> "bool":

        return _openstudiomodelhvac.PlantLoop_isPlantLoopVolumeAutocalculated(self)



    def autocalculatePlantLoopVolume(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_autocalculatePlantLoopVolume(self)



    def commonPipeSimulation(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.PlantLoop_commonPipeSimulation(self)



    def setCommonPipeSimulation(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setCommonPipeSimulation(self, value)



    def resetCommonPipeSimulation(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetCommonPipeSimulation(self)



    def plantEquipmentOperationHeatingLoad(self) -> "boost::optional< openstudio::model::PlantEquipmentOperationHeatingLoad >":

        return _openstudiomodelhvac.PlantLoop_plantEquipmentOperationHeatingLoad(self)



    def setPlantEquipmentOperationHeatingLoad(self, plantOperation: 'openstudio::model::PlantEquipmentOperationHeatingLoad const &') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setPlantEquipmentOperationHeatingLoad(self, plantOperation)



    def resetPlantEquipmentOperationHeatingLoad(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetPlantEquipmentOperationHeatingLoad(self)



    def setPlantEquipmentOperationHeatingLoadSchedule(self, arg2: 'Schedule') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setPlantEquipmentOperationHeatingLoadSchedule(self, arg2)



    def resetPlantEquipmentOperationHeatingLoadSchedule(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetPlantEquipmentOperationHeatingLoadSchedule(self)



    def plantEquipmentOperationHeatingLoadSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.PlantLoop_plantEquipmentOperationHeatingLoadSchedule(self)



    def plantEquipmentOperationCoolingLoad(self) -> "boost::optional< openstudio::model::PlantEquipmentOperationCoolingLoad >":

        return _openstudiomodelhvac.PlantLoop_plantEquipmentOperationCoolingLoad(self)



    def setPlantEquipmentOperationCoolingLoad(self, plantOperation: 'openstudio::model::PlantEquipmentOperationCoolingLoad const &') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setPlantEquipmentOperationCoolingLoad(self, plantOperation)



    def resetPlantEquipmentOperationCoolingLoad(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetPlantEquipmentOperationCoolingLoad(self)



    def setPlantEquipmentOperationCoolingLoadSchedule(self, arg2: 'Schedule') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setPlantEquipmentOperationCoolingLoadSchedule(self, arg2)



    def plantEquipmentOperationCoolingLoadSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.PlantLoop_plantEquipmentOperationCoolingLoadSchedule(self)



    def resetPlantEquipmentOperationCoolingLoadSchedule(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetPlantEquipmentOperationCoolingLoadSchedule(self)



    def primaryPlantEquipmentOperationScheme(self) -> "boost::optional< openstudio::model::PlantEquipmentOperationScheme >":

        return _openstudiomodelhvac.PlantLoop_primaryPlantEquipmentOperationScheme(self)



    def setPrimaryPlantEquipmentOperationScheme(self, plantOperation: 'PlantEquipmentOperationScheme') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setPrimaryPlantEquipmentOperationScheme(self, plantOperation)



    def resetPrimaryPlantEquipmentOperationScheme(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetPrimaryPlantEquipmentOperationScheme(self)



    def setPrimaryPlantEquipmentOperationSchemeSchedule(self, arg2: 'Schedule') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setPrimaryPlantEquipmentOperationSchemeSchedule(self, arg2)



    def resetPrimaryPlantEquipmentOperationSchemeSchedule(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetPrimaryPlantEquipmentOperationSchemeSchedule(self)



    def primaryPlantEquipmentOperationSchemeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.PlantLoop_primaryPlantEquipmentOperationSchemeSchedule(self)



    def setComponentSetpointOperationSchemeSchedule(self, arg2: 'Schedule') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setComponentSetpointOperationSchemeSchedule(self, arg2)



    def resetComponentSetpointOperationSchemeSchedule(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetComponentSetpointOperationSchemeSchedule(self)



    def componentSetpointOperationSchemeSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.PlantLoop_componentSetpointOperationSchemeSchedule(self)



    def supplyInletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.PlantLoop_supplyInletNode(self)



    def supplyOutletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.PlantLoop_supplyOutletNode(self)



    def supplyOutletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":

        return _openstudiomodelhvac.PlantLoop_supplyOutletNodes(self)



    def demandInletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.PlantLoop_demandInletNode(self)



    def demandInletNodes(self) -> "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > >":

        return _openstudiomodelhvac.PlantLoop_demandInletNodes(self)



    def demandOutletNode(self) -> "openstudio::model::Node":

        return _openstudiomodelhvac.PlantLoop_demandOutletNode(self)



    def supplyMixer(self) -> "openstudio::model::Mixer":

        return _openstudiomodelhvac.PlantLoop_supplyMixer(self)



    def supplySplitter(self) -> "openstudio::model::Splitter":

        return _openstudiomodelhvac.PlantLoop_supplySplitter(self)



    def demandMixer(self) -> "openstudio::model::Mixer":

        return _openstudiomodelhvac.PlantLoop_demandMixer(self)



    def demandSplitter(self) -> "openstudio::model::Splitter":

        return _openstudiomodelhvac.PlantLoop_demandSplitter(self)



    def addSupplyBranchForComponent(self, hvacComponent: 'HVACComponent') -> "bool":

        return _openstudiomodelhvac.PlantLoop_addSupplyBranchForComponent(self, hvacComponent)



    def removeSupplyBranchWithComponent(self, hvacComponent: 'HVACComponent') -> "bool":

        return _openstudiomodelhvac.PlantLoop_removeSupplyBranchWithComponent(self, hvacComponent)



    def addDemandBranchForComponent(self, hvacComponent: 'HVACComponent', tertiary: 'bool'=False) -> "bool":

        return _openstudiomodelhvac.PlantLoop_addDemandBranchForComponent(self, hvacComponent, tertiary)



    def removeDemandBranchWithComponent(self, hvacComponent: 'HVACComponent') -> "bool":

        return _openstudiomodelhvac.PlantLoop_removeDemandBranchWithComponent(self, hvacComponent)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.PlantLoop_remove(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.PlantLoop_clone(self, model)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.PlantLoop_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.PlantLoop_iddObjectType)



    def sizingPlant(self) -> "openstudio::model::SizingPlant":

        return _openstudiomodelhvac.PlantLoop_sizingPlant(self)



    def autosizedMaximumLoopFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.PlantLoop_autosizedMaximumLoopFlowRate(self)



    def autosizedPlantLoopVolume(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.PlantLoop_autosizedPlantLoopVolume(self)



    def availabilityManagers(self) -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":

        return _openstudiomodelhvac.PlantLoop_availabilityManagers(self)



    def addAvailabilityManager(self, *args) -> "bool":

        return _openstudiomodelhvac.PlantLoop_addAvailabilityManager(self, *args)



    def setAvailabilityManagers(self, avms: 'AvailabilityManagerVector') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setAvailabilityManagers(self, avms)



    def resetAvailabilityManagers(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetAvailabilityManagers(self)



    def removeAvailabilityManager(self, *args) -> "bool":

        return _openstudiomodelhvac.PlantLoop_removeAvailabilityManager(self, *args)



    def setAvailabilityManagerPriority(self, availabilityManager: 'AvailabilityManager', priority: 'unsigned int') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setAvailabilityManagerPriority(self, availabilityManager, priority)



    def availabilityManagerPriority(self, availabilityManager: 'AvailabilityManager') -> "unsigned int":

        return _openstudiomodelhvac.PlantLoop_availabilityManagerPriority(self, availabilityManager)



    def availabilityManager(self) -> "boost::optional< openstudio::model::AvailabilityManager >":

        return _openstudiomodelhvac.PlantLoop_availabilityManager(self)



    def setAvailabilityManager(self, availabilityManager: 'AvailabilityManager') -> "bool":

        return _openstudiomodelhvac.PlantLoop_setAvailabilityManager(self, availabilityManager)



    def resetAvailabilityManager(self) -> "void":

        return _openstudiomodelhvac.PlantLoop_resetAvailabilityManager(self)

PlantLoop_swigregister = _openstudiomodelhvac.PlantLoop_swigregister

PlantLoop_swigregister(PlantLoop)



def PlantLoop_loadDistributionSchemeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.PlantLoop_loadDistributionSchemeValues()

PlantLoop_loadDistributionSchemeValues = _openstudiomodelhvac.PlantLoop_loadDistributionSchemeValues



def PlantLoop_fluidTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.PlantLoop_fluidTypeValues()

PlantLoop_fluidTypeValues = _openstudiomodelhvac.PlantLoop_fluidTypeValues



def PlantLoop_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.PlantLoop_iddObjectType()

PlantLoop_iddObjectType = _openstudiomodelhvac.PlantLoop_iddObjectType





def toPlantLoop(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantLoop >":

    return _openstudiomodelhvac.toPlantLoop(idfObject)

toPlantLoop = _openstudiomodelhvac.toPlantLoop



def getPlantLoop(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantLoop >":

    return _openstudiomodelhvac.getPlantLoop(t_model, t_handle)

getPlantLoop = _openstudiomodelhvac.getPlantLoop



def getPlantLoops(t_model: 'Model') -> "std::vector< openstudio::model::PlantLoop,std::allocator< openstudio::model::PlantLoop > >":

    return _openstudiomodelhvac.getPlantLoops(t_model)

getPlantLoops = _openstudiomodelhvac.getPlantLoops



def getPlantLoopByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantLoop >":

    return _openstudiomodelhvac.getPlantLoopByName(t_model, t_name)

getPlantLoopByName = _openstudiomodelhvac.getPlantLoopByName



def getPlantLoopsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantLoop,std::allocator< openstudio::model::PlantLoop > >":

    return _openstudiomodelhvac.getPlantLoopsByName(t_model, t_name, t_exactMatch)

getPlantLoopsByName = _openstudiomodelhvac.getPlantLoopsByName

class PlantEquipmentOperationScheme(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationScheme, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationScheme, name)

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_PlantEquipmentOperationScheme

    __del__ = lambda self: None



    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.PlantEquipmentOperationScheme_plantLoop(self)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_PlantEquipmentOperationScheme(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

PlantEquipmentOperationScheme_swigregister = _openstudiomodelhvac.PlantEquipmentOperationScheme_swigregister

PlantEquipmentOperationScheme_swigregister(PlantEquipmentOperationScheme)





def toPlantEquipmentOperationScheme(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationScheme >":

    return _openstudiomodelhvac.toPlantEquipmentOperationScheme(idfObject)

toPlantEquipmentOperationScheme = _openstudiomodelhvac.toPlantEquipmentOperationScheme



def getPlantEquipmentOperationScheme(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationScheme >":

    return _openstudiomodelhvac.getPlantEquipmentOperationScheme(t_model, t_handle)

getPlantEquipmentOperationScheme = _openstudiomodelhvac.getPlantEquipmentOperationScheme



def getPlantEquipmentOperationSchemes(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationScheme,std::allocator< openstudio::model::PlantEquipmentOperationScheme > >":

    return _openstudiomodelhvac.getPlantEquipmentOperationSchemes(t_model)

getPlantEquipmentOperationSchemes = _openstudiomodelhvac.getPlantEquipmentOperationSchemes



def getPlantEquipmentOperationSchemeByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationScheme >":

    return _openstudiomodelhvac.getPlantEquipmentOperationSchemeByName(t_model, t_name)

getPlantEquipmentOperationSchemeByName = _openstudiomodelhvac.getPlantEquipmentOperationSchemeByName



def getPlantEquipmentOperationSchemesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationScheme,std::allocator< openstudio::model::PlantEquipmentOperationScheme > >":

    return _openstudiomodelhvac.getPlantEquipmentOperationSchemesByName(t_model, t_name, t_exactMatch)

getPlantEquipmentOperationSchemesByName = _openstudiomodelhvac.getPlantEquipmentOperationSchemesByName

class PlantEquipmentOperationRangeBasedScheme(PlantEquipmentOperationScheme):

    __swig_setmethods__ = {}

    for _s in [PlantEquipmentOperationScheme]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantEquipmentOperationRangeBasedScheme, name, value)

    __swig_getmethods__ = {}

    for _s in [PlantEquipmentOperationScheme]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlantEquipmentOperationRangeBasedScheme, name)

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_PlantEquipmentOperationRangeBasedScheme

    __del__ = lambda self: None



    def maximumUpperLimit(self) -> "double":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_maximumUpperLimit(self)



    def minimumLowerLimit(self) -> "double":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_minimumLowerLimit(self)



    def addLoadRange(self, upperLimit: 'double', equipment: 'HVACComponentVector') -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_addLoadRange(self, upperLimit, equipment)



    def removeLoadRange(self, upperLimit: 'double') -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_removeLoadRange(self, upperLimit)



    def loadRangeUpperLimits(self) -> "std::vector< double,std::allocator< double > >":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_loadRangeUpperLimits(self)



    def equipment(self, upperLimit: 'double') -> "std::vector< openstudio::model::HVACComponent,std::allocator< openstudio::model::HVACComponent > >":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_equipment(self, upperLimit)



    def addEquipment(self, *args) -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_addEquipment(self, *args)



    def replaceEquipment(self, *args) -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_replaceEquipment(self, *args)



    def removeEquipment(self, *args) -> "bool":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_removeEquipment(self, *args)



    def clearLoadRanges(self) -> "void":

        return _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_clearLoadRanges(self)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_PlantEquipmentOperationRangeBasedScheme(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

PlantEquipmentOperationRangeBasedScheme_swigregister = _openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme_swigregister

PlantEquipmentOperationRangeBasedScheme_swigregister(PlantEquipmentOperationRangeBasedScheme)





def toPlantEquipmentOperationRangeBasedScheme(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantEquipmentOperationRangeBasedScheme >":

    return _openstudiomodelhvac.toPlantEquipmentOperationRangeBasedScheme(idfObject)

toPlantEquipmentOperationRangeBasedScheme = _openstudiomodelhvac.toPlantEquipmentOperationRangeBasedScheme



def getPlantEquipmentOperationRangeBasedScheme(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantEquipmentOperationRangeBasedScheme >":

    return _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedScheme(t_model, t_handle)

getPlantEquipmentOperationRangeBasedScheme = _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedScheme



def getPlantEquipmentOperationRangeBasedSchemes(t_model: 'Model') -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme,std::allocator< openstudio::model::PlantEquipmentOperationRangeBasedScheme > >":

    return _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedSchemes(t_model)

getPlantEquipmentOperationRangeBasedSchemes = _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedSchemes



def getPlantEquipmentOperationRangeBasedSchemeByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantEquipmentOperationRangeBasedScheme >":

    return _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedSchemeByName(t_model, t_name)

getPlantEquipmentOperationRangeBasedSchemeByName = _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedSchemeByName



def getPlantEquipmentOperationRangeBasedSchemesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantEquipmentOperationRangeBasedScheme,std::allocator< openstudio::model::PlantEquipmentOperationRangeBasedScheme > >":

    return _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedSchemesByName(t_model, t_name, t_exactMatch)

getPlantEquipmentOperationRangeBasedSchemesByName = _openstudiomodelhvac.getPlantEquipmentOperationRangeBasedSchemesByName

class PlantComponentUserDefined(StraightComponent):

    __swig_setmethods__ = {}

    for _s in [StraightComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlantComponentUserDefined, name, value)

    __swig_getmethods__ = {}

    for _s in [StraightComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlantComponentUserDefined, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_PlantComponentUserDefined(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_PlantComponentUserDefined

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.PlantComponentUserDefined_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.PlantComponentUserDefined_iddObjectType)

    __swig_getmethods__["plantLoadingModeValues"] = lambda x: _openstudiomodelhvac.PlantComponentUserDefined_plantLoadingModeValues

    if _newclass:

        plantLoadingModeValues = staticmethod(_openstudiomodelhvac.PlantComponentUserDefined_plantLoadingModeValues)

    __swig_getmethods__["plantLoopFlowRequestModeValues"] = lambda x: _openstudiomodelhvac.PlantComponentUserDefined_plantLoopFlowRequestModeValues

    if _newclass:

        plantLoopFlowRequestModeValues = staticmethod(_openstudiomodelhvac.PlantComponentUserDefined_plantLoopFlowRequestModeValues)



    def plantLoadingMode(self) -> "std::string":

        return _openstudiomodelhvac.PlantComponentUserDefined_plantLoadingMode(self)



    def plantLoopFlowRequestMode(self) -> "std::string":

        return _openstudiomodelhvac.PlantComponentUserDefined_plantLoopFlowRequestMode(self)



    def mainModelProgramCallingManager(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":

        return _openstudiomodelhvac.PlantComponentUserDefined_mainModelProgramCallingManager(self)



    def plantInitializationProgramCallingManager(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":

        return _openstudiomodelhvac.PlantComponentUserDefined_plantInitializationProgramCallingManager(self)



    def plantSimulationProgramCallingManager(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgramCallingManager >":

        return _openstudiomodelhvac.PlantComponentUserDefined_plantSimulationProgramCallingManager(self)



    def mainModelProgram(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":

        return _openstudiomodelhvac.PlantComponentUserDefined_mainModelProgram(self)



    def plantInitializationProgram(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":

        return _openstudiomodelhvac.PlantComponentUserDefined_plantInitializationProgram(self)



    def plantSimulationProgram(self) -> "boost::optional< openstudio::model::EnergyManagementSystemProgram >":

        return _openstudiomodelhvac.PlantComponentUserDefined_plantSimulationProgram(self)



    def ambientZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.PlantComponentUserDefined_ambientZone(self)



    def designVolumeFlowRateActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":

        return _openstudiomodelhvac.PlantComponentUserDefined_designVolumeFlowRateActuator(self)



    def minimumMassFlowRateActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":

        return _openstudiomodelhvac.PlantComponentUserDefined_minimumMassFlowRateActuator(self)



    def maximumMassFlowRateActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":

        return _openstudiomodelhvac.PlantComponentUserDefined_maximumMassFlowRateActuator(self)



    def minimumLoadingCapacityActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":

        return _openstudiomodelhvac.PlantComponentUserDefined_minimumLoadingCapacityActuator(self)



    def maximumLoadingCapacityActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":

        return _openstudiomodelhvac.PlantComponentUserDefined_maximumLoadingCapacityActuator(self)



    def optimalLoadingCapacityActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":

        return _openstudiomodelhvac.PlantComponentUserDefined_optimalLoadingCapacityActuator(self)



    def outletTemperatureActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":

        return _openstudiomodelhvac.PlantComponentUserDefined_outletTemperatureActuator(self)



    def massFlowRateActuator(self) -> "boost::optional< openstudio::model::EnergyManagementSystemActuator >":

        return _openstudiomodelhvac.PlantComponentUserDefined_massFlowRateActuator(self)



    def setPlantLoadingMode(self, plantLoadingMode: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantLoadingMode(self, plantLoadingMode)



    def setPlantLoopFlowRequestMode(self, plantLoopFlowRequestMode: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantLoopFlowRequestMode(self, plantLoopFlowRequestMode)



    def setMainModelProgramCallingManager(self, energyManagementSystemProgramCallingManager: 'EnergyManagementSystemProgramCallingManager') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setMainModelProgramCallingManager(self, energyManagementSystemProgramCallingManager)



    def resetMainModelProgramCallingManager(self) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefined_resetMainModelProgramCallingManager(self)



    def setPlantInitializationProgramCallingManager(self, energyManagementSystemProgramCallingManager: 'EnergyManagementSystemProgramCallingManager') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantInitializationProgramCallingManager(self, energyManagementSystemProgramCallingManager)



    def resetPlantInitializationProgramCallingManager(self) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefined_resetPlantInitializationProgramCallingManager(self)



    def setPlantSimulationProgramCallingManager(self, energyManagementSystemProgramCallingManager: 'EnergyManagementSystemProgramCallingManager') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantSimulationProgramCallingManager(self, energyManagementSystemProgramCallingManager)



    def resetPlantSimulationProgramCallingManager(self) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefined_resetPlantSimulationProgramCallingManager(self)



    def setMainModelProgram(self, energyManagementSystemProgram: 'EnergyManagementSystemProgram') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setMainModelProgram(self, energyManagementSystemProgram)



    def resetMainModelProgram(self) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefined_resetMainModelProgram(self)



    def setPlantInitializationProgram(self, energyManagementSystemProgram: 'EnergyManagementSystemProgram') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantInitializationProgram(self, energyManagementSystemProgram)



    def resetPlantInitializationProgram(self) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefined_resetPlantInitializationProgram(self)



    def setPlantSimulationProgram(self, energyManagementSystemProgram: 'EnergyManagementSystemProgram') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setPlantSimulationProgram(self, energyManagementSystemProgram)



    def resetPlantSimulationProgram(self) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefined_resetPlantSimulationProgram(self)



    def setAmbientZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setAmbientZone(self, thermalZone)



    def resetAmbientZone(self) -> "void":

        return _openstudiomodelhvac.PlantComponentUserDefined_resetAmbientZone(self)



    def setDesignVolumeFlowRateActuator(self, energyManagementSystemActuator: 'EnergyManagementSystemActuator') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setDesignVolumeFlowRateActuator(self, energyManagementSystemActuator)



    def setMinimumMassFlowRateActuator(self, energyManagementSystemActuator: 'EnergyManagementSystemActuator') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setMinimumMassFlowRateActuator(self, energyManagementSystemActuator)



    def setMaximumMassFlowRateActuator(self, energyManagementSystemActuator: 'EnergyManagementSystemActuator') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setMaximumMassFlowRateActuator(self, energyManagementSystemActuator)



    def setMinimumLoadingCapacityActuator(self, energyManagementSystemActuator: 'EnergyManagementSystemActuator') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setMinimumLoadingCapacityActuator(self, energyManagementSystemActuator)



    def setMaximumLoadingCapacityActuator(self, energyManagementSystemActuator: 'EnergyManagementSystemActuator') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setMaximumLoadingCapacityActuator(self, energyManagementSystemActuator)



    def setOptimalLoadingCapacityActuator(self, energyManagementSystemActuator: 'EnergyManagementSystemActuator') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setOptimalLoadingCapacityActuator(self, energyManagementSystemActuator)



    def setOutletTemperatureActuator(self, energyManagementSystemActuator: 'EnergyManagementSystemActuator') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setOutletTemperatureActuator(self, energyManagementSystemActuator)



    def setMassFlowRateActuator(self, energyManagementSystemActuator: 'EnergyManagementSystemActuator') -> "bool":

        return _openstudiomodelhvac.PlantComponentUserDefined_setMassFlowRateActuator(self, energyManagementSystemActuator)



    def createInitProgram(self, dvfrActuator: 'EnergyManagementSystemActuator', mmfrActuator: 'EnergyManagementSystemActuator', mxfrActuator: 'EnergyManagementSystemActuator', mlcActuator: 'EnergyManagementSystemActuator', mxlcActuator: 'EnergyManagementSystemActuator', olcActuator: 'EnergyManagementSystemActuator', model: 'Model') -> "openstudio::model::EnergyManagementSystemProgram":

        return _openstudiomodelhvac.PlantComponentUserDefined_createInitProgram(self, dvfrActuator, mmfrActuator, mxfrActuator, mlcActuator, mxlcActuator, olcActuator, model)



    def createSimProgram(self, otActuator: 'EnergyManagementSystemActuator', mfrActuator: 'EnergyManagementSystemActuator', model: 'Model') -> "openstudio::model::EnergyManagementSystemProgram":

        return _openstudiomodelhvac.PlantComponentUserDefined_createSimProgram(self, otActuator, mfrActuator, model)

PlantComponentUserDefined_swigregister = _openstudiomodelhvac.PlantComponentUserDefined_swigregister

PlantComponentUserDefined_swigregister(PlantComponentUserDefined)



def PlantComponentUserDefined_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.PlantComponentUserDefined_iddObjectType()

PlantComponentUserDefined_iddObjectType = _openstudiomodelhvac.PlantComponentUserDefined_iddObjectType



def PlantComponentUserDefined_plantLoadingModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.PlantComponentUserDefined_plantLoadingModeValues()

PlantComponentUserDefined_plantLoadingModeValues = _openstudiomodelhvac.PlantComponentUserDefined_plantLoadingModeValues



def PlantComponentUserDefined_plantLoopFlowRequestModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.PlantComponentUserDefined_plantLoopFlowRequestModeValues()

PlantComponentUserDefined_plantLoopFlowRequestModeValues = _openstudiomodelhvac.PlantComponentUserDefined_plantLoopFlowRequestModeValues





def toPlantComponentUserDefined(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::PlantComponentUserDefined >":

    return _openstudiomodelhvac.toPlantComponentUserDefined(idfObject)

toPlantComponentUserDefined = _openstudiomodelhvac.toPlantComponentUserDefined



def getPlantComponentUserDefined(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::PlantComponentUserDefined >":

    return _openstudiomodelhvac.getPlantComponentUserDefined(t_model, t_handle)

getPlantComponentUserDefined = _openstudiomodelhvac.getPlantComponentUserDefined



def getPlantComponentUserDefineds(t_model: 'Model') -> "std::vector< openstudio::model::PlantComponentUserDefined,std::allocator< openstudio::model::PlantComponentUserDefined > >":

    return _openstudiomodelhvac.getPlantComponentUserDefineds(t_model)

getPlantComponentUserDefineds = _openstudiomodelhvac.getPlantComponentUserDefineds



def getPlantComponentUserDefinedByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::PlantComponentUserDefined >":

    return _openstudiomodelhvac.getPlantComponentUserDefinedByName(t_model, t_name)

getPlantComponentUserDefinedByName = _openstudiomodelhvac.getPlantComponentUserDefinedByName



def getPlantComponentUserDefinedsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::PlantComponentUserDefined,std::allocator< openstudio::model::PlantComponentUserDefined > >":

    return _openstudiomodelhvac.getPlantComponentUserDefinedsByName(t_model, t_name, t_exactMatch)

getPlantComponentUserDefinedsByName = _openstudiomodelhvac.getPlantComponentUserDefinedsByName

class AirLoopHVACOutdoorAirSystem(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACOutdoorAirSystem, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACOutdoorAirSystem, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model', controller: 'ControllerOutdoorAir'):

        this = _openstudiomodelhvac.new_AirLoopHVACOutdoorAirSystem(model, controller)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACOutdoorAirSystem

    __del__ = lambda self: None



    def returnAirPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_returnAirPort(self)



    def outdoorAirPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_outdoorAirPort(self)



    def reliefAirPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_reliefAirPort(self)



    def mixedAirPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_mixedAirPort(self)



    def returnAirModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_returnAirModelObject(self)



    def outdoorAirModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_outdoorAirModelObject(self)



    def reliefAirModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_reliefAirModelObject(self)



    def mixedAirModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_mixedAirModelObject(self)



    def outboardOANode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_outboardOANode(self)



    def outboardReliefNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_outboardReliefNode(self)



    def oaComponents(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_oaComponents(self)



    def reliefComponents(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_reliefComponents(self)



    def components(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_components(self)



    def component(self, handle: 'UUID') -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_component(self, handle)



    def oaComponent(self, handle: 'UUID') -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_oaComponent(self, handle)



    def reliefComponent(self, handle: 'UUID') -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_reliefComponent(self, handle)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_addToNode(self, node)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_remove(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_clone(self, model)



    def getControllerOutdoorAir(self) -> "openstudio::model::ControllerOutdoorAir":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_getControllerOutdoorAir(self)



    def setControllerOutdoorAir(self, controllerOutdoorAir: 'ControllerOutdoorAir') -> "bool":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_setControllerOutdoorAir(self, controllerOutdoorAir)



    def airLoop(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_airLoop(self)



    def getAirflowNetworkDistributionNode(self) -> "openstudio::model::AirflowNetworkDistributionNode":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_getAirflowNetworkDistributionNode(self)



    def airflowNetworkDistributionNode(self) -> "boost::optional< openstudio::model::AirflowNetworkDistributionNode >":

        return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_airflowNetworkDistributionNode(self)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_iddObjectType)

AirLoopHVACOutdoorAirSystem_swigregister = _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_swigregister

AirLoopHVACOutdoorAirSystem_swigregister(AirLoopHVACOutdoorAirSystem)



def AirLoopHVACOutdoorAirSystem_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_iddObjectType()

AirLoopHVACOutdoorAirSystem_iddObjectType = _openstudiomodelhvac.AirLoopHVACOutdoorAirSystem_iddObjectType





def toAirLoopHVACOutdoorAirSystem(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":

    return _openstudiomodelhvac.toAirLoopHVACOutdoorAirSystem(idfObject)

toAirLoopHVACOutdoorAirSystem = _openstudiomodelhvac.toAirLoopHVACOutdoorAirSystem



def getAirLoopHVACOutdoorAirSystem(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":

    return _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystem(t_model, t_handle)

getAirLoopHVACOutdoorAirSystem = _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystem



def getAirLoopHVACOutdoorAirSystems(t_model: 'Model') -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem,std::allocator< openstudio::model::AirLoopHVACOutdoorAirSystem > >":

    return _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystems(t_model)

getAirLoopHVACOutdoorAirSystems = _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystems



def getAirLoopHVACOutdoorAirSystemByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":

    return _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystemByName(t_model, t_name)

getAirLoopHVACOutdoorAirSystemByName = _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystemByName



def getAirLoopHVACOutdoorAirSystemsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem,std::allocator< openstudio::model::AirLoopHVACOutdoorAirSystem > >":

    return _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystemsByName(t_model, t_name, t_exactMatch)

getAirLoopHVACOutdoorAirSystemsByName = _openstudiomodelhvac.getAirLoopHVACOutdoorAirSystemsByName

class ControllerMechanicalVentilation(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerMechanicalVentilation, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ControllerMechanicalVentilation, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ControllerMechanicalVentilation(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerMechanicalVentilation

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ControllerMechanicalVentilation_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ControllerMechanicalVentilation_iddObjectType)

    __swig_getmethods__["systemOutdoorAirMethodValues"] = lambda x: _openstudiomodelhvac.ControllerMechanicalVentilation_systemOutdoorAirMethodValues

    if _newclass:

        systemOutdoorAirMethodValues = staticmethod(_openstudiomodelhvac.ControllerMechanicalVentilation_systemOutdoorAirMethodValues)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_availabilitySchedule(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_setAvailabilitySchedule(self, schedule)



    def demandControlledVentilation(self) -> "bool":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_demandControlledVentilation(self)



    def isDemandControlledVentilationDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_isDemandControlledVentilationDefaulted(self)



    def setDemandControlledVentilation(self, demandControlledVentilation: 'bool') -> "bool":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_setDemandControlledVentilation(self, demandControlledVentilation)



    def setDemandControlledVentilationNoFail(self, demandControlledVentilation: 'bool') -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_setDemandControlledVentilationNoFail(self, demandControlledVentilation)



    def resetDemandControlledVentilation(self) -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_resetDemandControlledVentilation(self)



    def systemOutdoorAirMethod(self) -> "std::string":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_systemOutdoorAirMethod(self)



    def isSystemOutdoorAirMethodDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_isSystemOutdoorAirMethodDefaulted(self)



    def setSystemOutdoorAirMethod(self, systemOutdoorAirMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_setSystemOutdoorAirMethod(self, systemOutdoorAirMethod)



    def resetSystemOutdoorAirMethod(self) -> "void":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_resetSystemOutdoorAirMethod(self)



    def controllerOutdoorAir(self) -> "openstudio::model::ControllerOutdoorAir":

        return _openstudiomodelhvac.ControllerMechanicalVentilation_controllerOutdoorAir(self)

ControllerMechanicalVentilation_swigregister = _openstudiomodelhvac.ControllerMechanicalVentilation_swigregister

ControllerMechanicalVentilation_swigregister(ControllerMechanicalVentilation)



def ControllerMechanicalVentilation_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ControllerMechanicalVentilation_iddObjectType()

ControllerMechanicalVentilation_iddObjectType = _openstudiomodelhvac.ControllerMechanicalVentilation_iddObjectType



def ControllerMechanicalVentilation_systemOutdoorAirMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ControllerMechanicalVentilation_systemOutdoorAirMethodValues()

ControllerMechanicalVentilation_systemOutdoorAirMethodValues = _openstudiomodelhvac.ControllerMechanicalVentilation_systemOutdoorAirMethodValues





def toControllerMechanicalVentilation(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ControllerMechanicalVentilation >":

    return _openstudiomodelhvac.toControllerMechanicalVentilation(idfObject)

toControllerMechanicalVentilation = _openstudiomodelhvac.toControllerMechanicalVentilation



def getControllerMechanicalVentilation(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ControllerMechanicalVentilation >":

    return _openstudiomodelhvac.getControllerMechanicalVentilation(t_model, t_handle)

getControllerMechanicalVentilation = _openstudiomodelhvac.getControllerMechanicalVentilation



def getControllerMechanicalVentilations(t_model: 'Model') -> "std::vector< openstudio::model::ControllerMechanicalVentilation,std::allocator< openstudio::model::ControllerMechanicalVentilation > >":

    return _openstudiomodelhvac.getControllerMechanicalVentilations(t_model)

getControllerMechanicalVentilations = _openstudiomodelhvac.getControllerMechanicalVentilations



def getControllerMechanicalVentilationByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ControllerMechanicalVentilation >":

    return _openstudiomodelhvac.getControllerMechanicalVentilationByName(t_model, t_name)

getControllerMechanicalVentilationByName = _openstudiomodelhvac.getControllerMechanicalVentilationByName



def getControllerMechanicalVentilationsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ControllerMechanicalVentilation,std::allocator< openstudio::model::ControllerMechanicalVentilation > >":

    return _openstudiomodelhvac.getControllerMechanicalVentilationsByName(t_model, t_name, t_exactMatch)

getControllerMechanicalVentilationsByName = _openstudiomodelhvac.getControllerMechanicalVentilationsByName

class ControllerOutdoorAir(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerOutdoorAir, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ControllerOutdoorAir, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ControllerOutdoorAir(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerOutdoorAir

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ControllerOutdoorAir_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ControllerOutdoorAir_iddObjectType)



    def minimumOutdoorAirSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ControllerOutdoorAir_minimumOutdoorAirSchedule(self)



    def setMinimumOutdoorAirSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setMinimumOutdoorAirSchedule(self, schedule)



    def resetMinimumOutdoorAirSchedule(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_resetMinimumOutdoorAirSchedule(self)



    def minimumFractionofOutdoorAirSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ControllerOutdoorAir_minimumFractionofOutdoorAirSchedule(self)



    def setMinimumFractionofOutdoorAirSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setMinimumFractionofOutdoorAirSchedule(self, schedule)



    def resetMinimumFractionofOutdoorAirSchedule(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_resetMinimumFractionofOutdoorAirSchedule(self)



    def maximumFractionofOutdoorAirSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ControllerOutdoorAir_maximumFractionofOutdoorAirSchedule(self)



    def setMaximumFractionofOutdoorAirSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setMaximumFractionofOutdoorAirSchedule(self, schedule)



    def resetMaximumFractionofOutdoorAirSchedule(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_resetMaximumFractionofOutdoorAirSchedule(self)



    def timeofDayEconomizerControlSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ControllerOutdoorAir_timeofDayEconomizerControlSchedule(self)



    def setTimeofDayEconomizerControlSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setTimeofDayEconomizerControlSchedule(self, schedule)



    def resetTimeofDayEconomizerControlSchedule(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_resetTimeofDayEconomizerControlSchedule(self)



    def minimumOutdoorAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerOutdoorAir_minimumOutdoorAirFlowRate(self)



    def getMinimumOutdoorAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.ControllerOutdoorAir_getMinimumOutdoorAirFlowRate(self, returnIP)



    def isMinimumOutdoorAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_isMinimumOutdoorAirFlowRateAutosized(self)



    def setMinimumOutdoorAirFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setMinimumOutdoorAirFlowRate(self, *args)



    def autosizeMinimumOutdoorAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_autosizeMinimumOutdoorAirFlowRate(self)



    def maximumOutdoorAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerOutdoorAir_maximumOutdoorAirFlowRate(self)



    def getMaximumOutdoorAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.ControllerOutdoorAir_getMaximumOutdoorAirFlowRate(self, returnIP)



    def isMaximumOutdoorAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_isMaximumOutdoorAirFlowRateAutosized(self)



    def setMaximumOutdoorAirFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setMaximumOutdoorAirFlowRate(self, *args)



    def autosizeMaximumOutdoorAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_autosizeMaximumOutdoorAirFlowRate(self)



    def controllerMechanicalVentilation(self) -> "openstudio::model::ControllerMechanicalVentilation":

        return _openstudiomodelhvac.ControllerOutdoorAir_controllerMechanicalVentilation(self)



    def setControllerMechanicalVentilation(self, controllerMechanicalVentilation: 'ControllerMechanicalVentilation') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setControllerMechanicalVentilation(self, controllerMechanicalVentilation)



    def getEconomizerControlType(self) -> "std::string":

        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerControlType(self)



    def setEconomizerControlType(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerControlType(self, value)



    def getEconomizerControlActionType(self) -> "std::string":

        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerControlActionType(self)



    def setEconomizerControlActionType(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerControlActionType(self, value)



    def getEconomizerMaximumLimitDryBulbTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerMaximumLimitDryBulbTemperature(self)



    def setEconomizerMaximumLimitDryBulbTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerMaximumLimitDryBulbTemperature(self, value)



    def resetEconomizerMaximumLimitDryBulbTemperature(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_resetEconomizerMaximumLimitDryBulbTemperature(self)



    def getEconomizerMaximumLimitEnthalpy(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerMaximumLimitEnthalpy(self)



    def setEconomizerMaximumLimitEnthalpy(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerMaximumLimitEnthalpy(self, value)



    def resetEconomizerMaximumLimitEnthalpy(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_resetEconomizerMaximumLimitEnthalpy(self)



    def getEconomizerMaximumLimitDewpointTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerMaximumLimitDewpointTemperature(self)



    def setEconomizerMaximumLimitDewpointTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerMaximumLimitDewpointTemperature(self, value)



    def resetEconomizerMaximumLimitDewpointTemperature(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_resetEconomizerMaximumLimitDewpointTemperature(self)



    def getEconomizerMinimumLimitDryBulbTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerOutdoorAir_getEconomizerMinimumLimitDryBulbTemperature(self)



    def setEconomizerMinimumLimitDryBulbTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setEconomizerMinimumLimitDryBulbTemperature(self, value)



    def resetEconomizerMinimumLimitDryBulbTemperature(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_resetEconomizerMinimumLimitDryBulbTemperature(self)



    def getLockoutType(self) -> "std::string":

        return _openstudiomodelhvac.ControllerOutdoorAir_getLockoutType(self)



    def setLockoutType(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setLockoutType(self, value)



    def getMinimumLimitType(self) -> "std::string":

        return _openstudiomodelhvac.ControllerOutdoorAir_getMinimumLimitType(self)



    def setMinimumLimitType(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setMinimumLimitType(self, value)



    def getHighHumidityControl(self) -> "boost::optional< bool >":

        return _openstudiomodelhvac.ControllerOutdoorAir_getHighHumidityControl(self)



    def setHighHumidityControl(self, val: 'bool') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setHighHumidityControl(self, val)



    def getHighHumidityOutdoorAirFlowRatio(self) -> "openstudio::OptionalDouble":

        return _openstudiomodelhvac.ControllerOutdoorAir_getHighHumidityOutdoorAirFlowRatio(self)



    def setHighHumidityOutdoorAirFlowRatio(self, v: 'double') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setHighHumidityOutdoorAirFlowRatio(self, v)



    def getControlHighIndoorHumidityBasedOnOutdoorHumidityRatio(self) -> "boost::optional< bool >":

        return _openstudiomodelhvac.ControllerOutdoorAir_getControlHighIndoorHumidityBasedOnOutdoorHumidityRatio(self)



    def setControlHighIndoorHumidityBasedOnOutdoorHumidityRatio(self, v: 'bool') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setControlHighIndoorHumidityBasedOnOutdoorHumidityRatio(self, v)



    def getHeatRecoveryBypassControlType(self) -> "openstudio::OptionalString":

        return _openstudiomodelhvac.ControllerOutdoorAir_getHeatRecoveryBypassControlType(self)



    def setHeatRecoveryBypassControlType(self, v: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ControllerOutdoorAir_setHeatRecoveryBypassControlType(self, v)



    def airLoopHVACOutdoorAirSystem(self) -> "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem >":

        return _openstudiomodelhvac.ControllerOutdoorAir_airLoopHVACOutdoorAirSystem(self)



    def getAirflowNetworkOutdoorAirflow(self, crack: 'openstudio::model::AirflowNetworkCrack const &') -> "openstudio::model::AirflowNetworkOutdoorAirflow":

        return _openstudiomodelhvac.ControllerOutdoorAir_getAirflowNetworkOutdoorAirflow(self, crack)



    def airflowNetworkOutdoorAirflow(self) -> "boost::optional< openstudio::model::AirflowNetworkOutdoorAirflow >":

        return _openstudiomodelhvac.ControllerOutdoorAir_airflowNetworkOutdoorAirflow(self)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.ControllerOutdoorAir_remove(self)



    def autosizedMinimumOutdoorAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerOutdoorAir_autosizedMinimumOutdoorAirFlowRate(self)



    def autosizedMaximumOutdoorAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerOutdoorAir_autosizedMaximumOutdoorAirFlowRate(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.ControllerOutdoorAir_applySizingValues(self)

ControllerOutdoorAir_swigregister = _openstudiomodelhvac.ControllerOutdoorAir_swigregister

ControllerOutdoorAir_swigregister(ControllerOutdoorAir)



def ControllerOutdoorAir_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ControllerOutdoorAir_iddObjectType()

ControllerOutdoorAir_iddObjectType = _openstudiomodelhvac.ControllerOutdoorAir_iddObjectType





def toControllerOutdoorAir(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ControllerOutdoorAir >":

    return _openstudiomodelhvac.toControllerOutdoorAir(idfObject)

toControllerOutdoorAir = _openstudiomodelhvac.toControllerOutdoorAir



def getControllerOutdoorAir(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ControllerOutdoorAir >":

    return _openstudiomodelhvac.getControllerOutdoorAir(t_model, t_handle)

getControllerOutdoorAir = _openstudiomodelhvac.getControllerOutdoorAir



def getControllerOutdoorAirs(t_model: 'Model') -> "std::vector< openstudio::model::ControllerOutdoorAir,std::allocator< openstudio::model::ControllerOutdoorAir > >":

    return _openstudiomodelhvac.getControllerOutdoorAirs(t_model)

getControllerOutdoorAirs = _openstudiomodelhvac.getControllerOutdoorAirs



def getControllerOutdoorAirByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ControllerOutdoorAir >":

    return _openstudiomodelhvac.getControllerOutdoorAirByName(t_model, t_name)

getControllerOutdoorAirByName = _openstudiomodelhvac.getControllerOutdoorAirByName



def getControllerOutdoorAirsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ControllerOutdoorAir,std::allocator< openstudio::model::ControllerOutdoorAir > >":

    return _openstudiomodelhvac.getControllerOutdoorAirsByName(t_model, t_name, t_exactMatch)

getControllerOutdoorAirsByName = _openstudiomodelhvac.getControllerOutdoorAirsByName

class ControllerWaterCoil(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerWaterCoil, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ControllerWaterCoil, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ControllerWaterCoil(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ControllerWaterCoil

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ControllerWaterCoil_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ControllerWaterCoil_iddObjectType)

    __swig_getmethods__["validControlVariableValues"] = lambda x: _openstudiomodelhvac.ControllerWaterCoil_validControlVariableValues

    if _newclass:

        validControlVariableValues = staticmethod(_openstudiomodelhvac.ControllerWaterCoil_validControlVariableValues)

    __swig_getmethods__["validActionValues"] = lambda x: _openstudiomodelhvac.ControllerWaterCoil_validActionValues

    if _newclass:

        validActionValues = staticmethod(_openstudiomodelhvac.ControllerWaterCoil_validActionValues)

    __swig_getmethods__["validActuatorVariableValues"] = lambda x: _openstudiomodelhvac.ControllerWaterCoil_validActuatorVariableValues

    if _newclass:

        validActuatorVariableValues = staticmethod(_openstudiomodelhvac.ControllerWaterCoil_validActuatorVariableValues)



    def controlVariable(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ControllerWaterCoil_controlVariable(self)



    def action(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ControllerWaterCoil_action(self)



    def actuatorVariable(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ControllerWaterCoil_actuatorVariable(self)



    def sensorNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.ControllerWaterCoil_sensorNode(self)



    def actuatorNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.ControllerWaterCoil_actuatorNode(self)



    def controllerConvergenceTolerance(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerWaterCoil_controllerConvergenceTolerance(self)



    def isControllerConvergenceToleranceDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_isControllerConvergenceToleranceDefaulted(self)



    def isControllerConvergenceToleranceAutosized(self) -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_isControllerConvergenceToleranceAutosized(self)



    def maximumActuatedFlow(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerWaterCoil_maximumActuatedFlow(self)



    def isMaximumActuatedFlowAutosized(self) -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_isMaximumActuatedFlowAutosized(self)



    def minimumActuatedFlow(self) -> "double":

        return _openstudiomodelhvac.ControllerWaterCoil_minimumActuatedFlow(self)



    def isMinimumActuatedFlowDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_isMinimumActuatedFlowDefaulted(self)



    def setControlVariable(self, controlVariable: 'std::string') -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_setControlVariable(self, controlVariable)



    def resetControlVariable(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoil_resetControlVariable(self)



    def setAction(self, action: 'std::string') -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_setAction(self, action)



    def resetAction(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoil_resetAction(self)



    def setActuatorVariable(self, actuatorVariable: 'std::string') -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_setActuatorVariable(self, actuatorVariable)



    def resetActuatorVariable(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoil_resetActuatorVariable(self)



    def setSensorNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_setSensorNode(self, node)



    def setActuatorNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_setActuatorNode(self, node)



    def setControllerConvergenceTolerance(self, controllerConvergenceTolerance: 'double') -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_setControllerConvergenceTolerance(self, controllerConvergenceTolerance)



    def resetControllerConvergenceTolerance(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoil_resetControllerConvergenceTolerance(self)



    def autosizeControllerConvergenceTolerance(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoil_autosizeControllerConvergenceTolerance(self)



    def setMaximumActuatedFlow(self, maximumActuatedFlow: 'double') -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_setMaximumActuatedFlow(self, maximumActuatedFlow)



    def resetMaximumActuatedFlow(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoil_resetMaximumActuatedFlow(self)



    def autosizeMaximumActuatedFlow(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoil_autosizeMaximumActuatedFlow(self)



    def setMinimumActuatedFlow(self, minimumActuatedFlow: 'double') -> "bool":

        return _openstudiomodelhvac.ControllerWaterCoil_setMinimumActuatedFlow(self, minimumActuatedFlow)



    def resetMinimumActuatedFlow(self) -> "void":

        return _openstudiomodelhvac.ControllerWaterCoil_resetMinimumActuatedFlow(self)



    def autosizedControllerConvergenceTolerance(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerWaterCoil_autosizedControllerConvergenceTolerance(self)



    def autosizedMaximumActuatedFlow(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ControllerWaterCoil_autosizedMaximumActuatedFlow(self)

ControllerWaterCoil_swigregister = _openstudiomodelhvac.ControllerWaterCoil_swigregister

ControllerWaterCoil_swigregister(ControllerWaterCoil)



def ControllerWaterCoil_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ControllerWaterCoil_iddObjectType()

ControllerWaterCoil_iddObjectType = _openstudiomodelhvac.ControllerWaterCoil_iddObjectType



def ControllerWaterCoil_validControlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ControllerWaterCoil_validControlVariableValues()

ControllerWaterCoil_validControlVariableValues = _openstudiomodelhvac.ControllerWaterCoil_validControlVariableValues



def ControllerWaterCoil_validActionValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ControllerWaterCoil_validActionValues()

ControllerWaterCoil_validActionValues = _openstudiomodelhvac.ControllerWaterCoil_validActionValues



def ControllerWaterCoil_validActuatorVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ControllerWaterCoil_validActuatorVariableValues()

ControllerWaterCoil_validActuatorVariableValues = _openstudiomodelhvac.ControllerWaterCoil_validActuatorVariableValues





def toControllerWaterCoil(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ControllerWaterCoil >":

    return _openstudiomodelhvac.toControllerWaterCoil(idfObject)

toControllerWaterCoil = _openstudiomodelhvac.toControllerWaterCoil



def getControllerWaterCoil(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ControllerWaterCoil >":

    return _openstudiomodelhvac.getControllerWaterCoil(t_model, t_handle)

getControllerWaterCoil = _openstudiomodelhvac.getControllerWaterCoil



def getControllerWaterCoils(t_model: 'Model') -> "std::vector< openstudio::model::ControllerWaterCoil,std::allocator< openstudio::model::ControllerWaterCoil > >":

    return _openstudiomodelhvac.getControllerWaterCoils(t_model)

getControllerWaterCoils = _openstudiomodelhvac.getControllerWaterCoils



def getControllerWaterCoilByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ControllerWaterCoil >":

    return _openstudiomodelhvac.getControllerWaterCoilByName(t_model, t_name)

getControllerWaterCoilByName = _openstudiomodelhvac.getControllerWaterCoilByName



def getControllerWaterCoilsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ControllerWaterCoil,std::allocator< openstudio::model::ControllerWaterCoil > >":

    return _openstudiomodelhvac.getControllerWaterCoilsByName(t_model, t_name, t_exactMatch)

getControllerWaterCoilsByName = _openstudiomodelhvac.getControllerWaterCoilsByName

class Mixer(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, Mixer, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, Mixer, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_Mixer

    __del__ = lambda self: None



    def outletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.Mixer_outletPort(self)



    def inletPort(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.Mixer_inletPort(self, branchIndex)



    def nextInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.Mixer_nextInletPort(self)



    def outletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.Mixer_outletModelObject(self)



    def inletModelObject(self, branchIndex: 'unsigned int') -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.Mixer_inletModelObject(self, branchIndex)



    def lastInletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.Mixer_lastInletModelObject(self)



    def inletModelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.Mixer_inletModelObjects(self)



    def newInletPortAfterBranch(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.Mixer_newInletPortAfterBranch(self, branchIndex)



    def branchIndexForInletModelObject(self, modelObject: 'ModelObject') -> "unsigned int":

        return _openstudiomodelhvac.Mixer_branchIndexForInletModelObject(self, modelObject)



    def nextBranchIndex(self) -> "unsigned int":

        return _openstudiomodelhvac.Mixer_nextBranchIndex(self)



    def removePortForBranch(self, branchIndex: 'unsigned int') -> "void":

        return _openstudiomodelhvac.Mixer_removePortForBranch(self, branchIndex)



    def isRemovable(self) -> "bool":

        return _openstudiomodelhvac.Mixer_isRemovable(self)

Mixer_swigregister = _openstudiomodelhvac.Mixer_swigregister

Mixer_swigregister(Mixer)





def toMixer(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Mixer >":

    return _openstudiomodelhvac.toMixer(idfObject)

toMixer = _openstudiomodelhvac.toMixer



def getMixer(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Mixer >":

    return _openstudiomodelhvac.getMixer(t_model, t_handle)

getMixer = _openstudiomodelhvac.getMixer



def getMixers(t_model: 'Model') -> "std::vector< openstudio::model::Mixer,std::allocator< openstudio::model::Mixer > >":

    return _openstudiomodelhvac.getMixers(t_model)

getMixers = _openstudiomodelhvac.getMixers



def getMixerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Mixer >":

    return _openstudiomodelhvac.getMixerByName(t_model, t_name)

getMixerByName = _openstudiomodelhvac.getMixerByName



def getMixersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Mixer,std::allocator< openstudio::model::Mixer > >":

    return _openstudiomodelhvac.getMixersByName(t_model, t_name, t_exactMatch)

getMixersByName = _openstudiomodelhvac.getMixersByName

class AirLoopHVACReturnPlenum(Mixer):

    __swig_setmethods__ = {}

    for _s in [Mixer]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACReturnPlenum, name, value)

    __swig_getmethods__ = {}

    for _s in [Mixer]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACReturnPlenum, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_AirLoopHVACReturnPlenum(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACReturnPlenum

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AirLoopHVACReturnPlenum_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AirLoopHVACReturnPlenum_iddObjectType)



    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_thermalZone(self)



    def setThermalZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_setThermalZone(self, thermalZone)



    def resetThermalZone(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_resetThermalZone(self)



    def outletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_outletPort(self)



    def inletPort(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_inletPort(self, branchIndex)



    def nextInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_nextInletPort(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_addToNode(self, node)



    def addBranchForZone(self, *args) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACReturnPlenum_addBranchForZone(self, *args)

AirLoopHVACReturnPlenum_swigregister = _openstudiomodelhvac.AirLoopHVACReturnPlenum_swigregister

AirLoopHVACReturnPlenum_swigregister(AirLoopHVACReturnPlenum)



def AirLoopHVACReturnPlenum_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AirLoopHVACReturnPlenum_iddObjectType()

AirLoopHVACReturnPlenum_iddObjectType = _openstudiomodelhvac.AirLoopHVACReturnPlenum_iddObjectType





def toAirLoopHVACReturnPlenum(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirLoopHVACReturnPlenum >":

    return _openstudiomodelhvac.toAirLoopHVACReturnPlenum(idfObject)

toAirLoopHVACReturnPlenum = _openstudiomodelhvac.toAirLoopHVACReturnPlenum



def getAirLoopHVACReturnPlenum(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirLoopHVACReturnPlenum >":

    return _openstudiomodelhvac.getAirLoopHVACReturnPlenum(t_model, t_handle)

getAirLoopHVACReturnPlenum = _openstudiomodelhvac.getAirLoopHVACReturnPlenum



def getAirLoopHVACReturnPlenums(t_model: 'Model') -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum,std::allocator< openstudio::model::AirLoopHVACReturnPlenum > >":

    return _openstudiomodelhvac.getAirLoopHVACReturnPlenums(t_model)

getAirLoopHVACReturnPlenums = _openstudiomodelhvac.getAirLoopHVACReturnPlenums



def getAirLoopHVACReturnPlenumByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirLoopHVACReturnPlenum >":

    return _openstudiomodelhvac.getAirLoopHVACReturnPlenumByName(t_model, t_name)

getAirLoopHVACReturnPlenumByName = _openstudiomodelhvac.getAirLoopHVACReturnPlenumByName



def getAirLoopHVACReturnPlenumsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirLoopHVACReturnPlenum,std::allocator< openstudio::model::AirLoopHVACReturnPlenum > >":

    return _openstudiomodelhvac.getAirLoopHVACReturnPlenumsByName(t_model, t_name, t_exactMatch)

getAirLoopHVACReturnPlenumsByName = _openstudiomodelhvac.getAirLoopHVACReturnPlenumsByName

class AirLoopHVACZoneMixer(Mixer):

    __swig_setmethods__ = {}

    for _s in [Mixer]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACZoneMixer, name, value)

    __swig_getmethods__ = {}

    for _s in [Mixer]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACZoneMixer, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_AirLoopHVACZoneMixer(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACZoneMixer

    __del__ = lambda self: None



    def outletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACZoneMixer_outletPort(self)



    def inletPort(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACZoneMixer_inletPort(self, branchIndex)



    def nextInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACZoneMixer_nextInletPort(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.AirLoopHVACZoneMixer_addToNode(self, node)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.AirLoopHVACZoneMixer_remove(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.AirLoopHVACZoneMixer_clone(self, model)



    def disconnect(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneMixer_disconnect(self)



    def getAirflowNetworkDistributionNode(self) -> "openstudio::model::AirflowNetworkDistributionNode":

        return _openstudiomodelhvac.AirLoopHVACZoneMixer_getAirflowNetworkDistributionNode(self)



    def airflowNetworkDistributionNode(self) -> "boost::optional< openstudio::model::AirflowNetworkDistributionNode >":

        return _openstudiomodelhvac.AirLoopHVACZoneMixer_airflowNetworkDistributionNode(self)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AirLoopHVACZoneMixer_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AirLoopHVACZoneMixer_iddObjectType)

AirLoopHVACZoneMixer_swigregister = _openstudiomodelhvac.AirLoopHVACZoneMixer_swigregister

AirLoopHVACZoneMixer_swigregister(AirLoopHVACZoneMixer)



def AirLoopHVACZoneMixer_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AirLoopHVACZoneMixer_iddObjectType()

AirLoopHVACZoneMixer_iddObjectType = _openstudiomodelhvac.AirLoopHVACZoneMixer_iddObjectType





def toAirLoopHVACZoneMixer(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirLoopHVACZoneMixer >":

    return _openstudiomodelhvac.toAirLoopHVACZoneMixer(idfObject)

toAirLoopHVACZoneMixer = _openstudiomodelhvac.toAirLoopHVACZoneMixer



def getAirLoopHVACZoneMixer(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirLoopHVACZoneMixer >":

    return _openstudiomodelhvac.getAirLoopHVACZoneMixer(t_model, t_handle)

getAirLoopHVACZoneMixer = _openstudiomodelhvac.getAirLoopHVACZoneMixer



def getAirLoopHVACZoneMixers(t_model: 'Model') -> "std::vector< openstudio::model::AirLoopHVACZoneMixer,std::allocator< openstudio::model::AirLoopHVACZoneMixer > >":

    return _openstudiomodelhvac.getAirLoopHVACZoneMixers(t_model)

getAirLoopHVACZoneMixers = _openstudiomodelhvac.getAirLoopHVACZoneMixers



def getAirLoopHVACZoneMixerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirLoopHVACZoneMixer >":

    return _openstudiomodelhvac.getAirLoopHVACZoneMixerByName(t_model, t_name)

getAirLoopHVACZoneMixerByName = _openstudiomodelhvac.getAirLoopHVACZoneMixerByName



def getAirLoopHVACZoneMixersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirLoopHVACZoneMixer,std::allocator< openstudio::model::AirLoopHVACZoneMixer > >":

    return _openstudiomodelhvac.getAirLoopHVACZoneMixersByName(t_model, t_name, t_exactMatch)

getAirLoopHVACZoneMixersByName = _openstudiomodelhvac.getAirLoopHVACZoneMixersByName

class ConnectorMixer(Mixer):

    __swig_setmethods__ = {}

    for _s in [Mixer]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectorMixer, name, value)

    __swig_getmethods__ = {}

    for _s in [Mixer]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ConnectorMixer, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ConnectorMixer(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ConnectorMixer

    __del__ = lambda self: None



    def outletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.ConnectorMixer_outletPort(self)



    def inletPort(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.ConnectorMixer_inletPort(self, branchIndex)



    def nextInletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.ConnectorMixer_nextInletPort(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.ConnectorMixer_addToNode(self, node)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.ConnectorMixer_remove(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.ConnectorMixer_clone(self, model)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ConnectorMixer_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ConnectorMixer_iddObjectType)

ConnectorMixer_swigregister = _openstudiomodelhvac.ConnectorMixer_swigregister

ConnectorMixer_swigregister(ConnectorMixer)



def ConnectorMixer_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ConnectorMixer_iddObjectType()

ConnectorMixer_iddObjectType = _openstudiomodelhvac.ConnectorMixer_iddObjectType





def toConnectorMixer(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ConnectorMixer >":

    return _openstudiomodelhvac.toConnectorMixer(idfObject)

toConnectorMixer = _openstudiomodelhvac.toConnectorMixer



def getConnectorMixer(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ConnectorMixer >":

    return _openstudiomodelhvac.getConnectorMixer(t_model, t_handle)

getConnectorMixer = _openstudiomodelhvac.getConnectorMixer



def getConnectorMixers(t_model: 'Model') -> "std::vector< openstudio::model::ConnectorMixer,std::allocator< openstudio::model::ConnectorMixer > >":

    return _openstudiomodelhvac.getConnectorMixers(t_model)

getConnectorMixers = _openstudiomodelhvac.getConnectorMixers



def getConnectorMixerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ConnectorMixer >":

    return _openstudiomodelhvac.getConnectorMixerByName(t_model, t_name)

getConnectorMixerByName = _openstudiomodelhvac.getConnectorMixerByName



def getConnectorMixersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ConnectorMixer,std::allocator< openstudio::model::ConnectorMixer > >":

    return _openstudiomodelhvac.getConnectorMixersByName(t_model, t_name, t_exactMatch)

getConnectorMixersByName = _openstudiomodelhvac.getConnectorMixersByName

class AvailabilityManagerAssignmentList(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AvailabilityManagerAssignmentList, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AvailabilityManagerAssignmentList, name)

    __repr__ = _swig_repr



    def __init__(self, loop: 'Loop'):

        this = _openstudiomodelhvac.new_AvailabilityManagerAssignmentList(loop)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AvailabilityManagerAssignmentList

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AvailabilityManagerAssignmentList_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AvailabilityManagerAssignmentList_iddObjectType)



    def availabilityManagerPriority(self, avm: 'AvailabilityManager') -> "unsigned int":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_availabilityManagerPriority(self, avm)



    def availabilityManagers(self) -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_availabilityManagers(self)



    def loop(self) -> "boost::optional< openstudio::model::Loop >":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_loop(self)



    def airLoopHVAC(self) -> "boost::optional< openstudio::model::AirLoopHVAC >":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_airLoopHVAC(self)



    def plantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_plantLoop(self)



    def containingZoneHVACComponent(self) -> "boost::optional< openstudio::model::ZoneHVACComponent >":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_containingZoneHVACComponent(self)



    def addAvailabilityManager(self, *args) -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_addAvailabilityManager(self, *args)



    def setAvailabilityManagers(self, avms: 'AvailabilityManagerVector') -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_setAvailabilityManagers(self, avms)



    def resetAvailabilityManagers(self) -> "void":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_resetAvailabilityManagers(self)



    def removeAvailabilityManager(self, *args) -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_removeAvailabilityManager(self, *args)



    def setAvailabilityManagerPriority(self, avm: 'AvailabilityManager', priority: 'unsigned int') -> "bool":

        return _openstudiomodelhvac.AvailabilityManagerAssignmentList_setAvailabilityManagerPriority(self, avm, priority)

AvailabilityManagerAssignmentList_swigregister = _openstudiomodelhvac.AvailabilityManagerAssignmentList_swigregister

AvailabilityManagerAssignmentList_swigregister(AvailabilityManagerAssignmentList)



def AvailabilityManagerAssignmentList_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AvailabilityManagerAssignmentList_iddObjectType()

AvailabilityManagerAssignmentList_iddObjectType = _openstudiomodelhvac.AvailabilityManagerAssignmentList_iddObjectType





def toAvailabilityManagerAssignmentList(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AvailabilityManagerAssignmentList >":

    return _openstudiomodelhvac.toAvailabilityManagerAssignmentList(idfObject)

toAvailabilityManagerAssignmentList = _openstudiomodelhvac.toAvailabilityManagerAssignmentList



def getAvailabilityManagerAssignmentList(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AvailabilityManagerAssignmentList >":

    return _openstudiomodelhvac.getAvailabilityManagerAssignmentList(t_model, t_handle)

getAvailabilityManagerAssignmentList = _openstudiomodelhvac.getAvailabilityManagerAssignmentList



def getAvailabilityManagerAssignmentLists(t_model: 'Model') -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList,std::allocator< openstudio::model::AvailabilityManagerAssignmentList > >":

    return _openstudiomodelhvac.getAvailabilityManagerAssignmentLists(t_model)

getAvailabilityManagerAssignmentLists = _openstudiomodelhvac.getAvailabilityManagerAssignmentLists



def getAvailabilityManagerAssignmentListByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AvailabilityManagerAssignmentList >":

    return _openstudiomodelhvac.getAvailabilityManagerAssignmentListByName(t_model, t_name)

getAvailabilityManagerAssignmentListByName = _openstudiomodelhvac.getAvailabilityManagerAssignmentListByName



def getAvailabilityManagerAssignmentListsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AvailabilityManagerAssignmentList,std::allocator< openstudio::model::AvailabilityManagerAssignmentList > >":

    return _openstudiomodelhvac.getAvailabilityManagerAssignmentListsByName(t_model, t_name, t_exactMatch)

getAvailabilityManagerAssignmentListsByName = _openstudiomodelhvac.getAvailabilityManagerAssignmentListsByName

class AvailabilityManager(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AvailabilityManager, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AvailabilityManager, name)

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_AvailabilityManager

    __del__ = lambda self: None



    def loop(self) -> "boost::optional< openstudio::model::Loop >":

        return _openstudiomodelhvac.AvailabilityManager_loop(self)



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_AvailabilityManager(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

AvailabilityManager_swigregister = _openstudiomodelhvac.AvailabilityManager_swigregister

AvailabilityManager_swigregister(AvailabilityManager)





def toAvailabilityManager(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AvailabilityManager >":

    return _openstudiomodelhvac.toAvailabilityManager(idfObject)

toAvailabilityManager = _openstudiomodelhvac.toAvailabilityManager



def getAvailabilityManager(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AvailabilityManager >":

    return _openstudiomodelhvac.getAvailabilityManager(t_model, t_handle)

getAvailabilityManager = _openstudiomodelhvac.getAvailabilityManager



def getAvailabilityManagers(t_model: 'Model') -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":

    return _openstudiomodelhvac.getAvailabilityManagers(t_model)

getAvailabilityManagers = _openstudiomodelhvac.getAvailabilityManagers



def getAvailabilityManagerByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AvailabilityManager >":

    return _openstudiomodelhvac.getAvailabilityManagerByName(t_model, t_name)

getAvailabilityManagerByName = _openstudiomodelhvac.getAvailabilityManagerByName



def getAvailabilityManagersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AvailabilityManager,std::allocator< openstudio::model::AvailabilityManager > >":

    return _openstudiomodelhvac.getAvailabilityManagersByName(t_model, t_name, t_exactMatch)

getAvailabilityManagersByName = _openstudiomodelhvac.getAvailabilityManagersByName

class Splitter(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, Splitter, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, Splitter, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_Splitter

    __del__ = lambda self: None



    def inletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.Splitter_inletPort(self)



    def outletPort(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.Splitter_outletPort(self, branchIndex)



    def nextOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.Splitter_nextOutletPort(self)



    def inletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.Splitter_inletModelObject(self)



    def outletModelObject(self, branchIndex: 'unsigned int') -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.Splitter_outletModelObject(self, branchIndex)



    def lastOutletModelObject(self) -> "boost::optional< openstudio::model::ModelObject >":

        return _openstudiomodelhvac.Splitter_lastOutletModelObject(self)



    def outletModelObjects(self) -> "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > >":

        return _openstudiomodelhvac.Splitter_outletModelObjects(self)



    def newOutletPortAfterBranch(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.Splitter_newOutletPortAfterBranch(self, branchIndex)



    def branchIndexForOutletModelObject(self, modelObject: 'ModelObject') -> "unsigned int":

        return _openstudiomodelhvac.Splitter_branchIndexForOutletModelObject(self, modelObject)



    def nextBranchIndex(self) -> "unsigned int":

        return _openstudiomodelhvac.Splitter_nextBranchIndex(self)



    def removePortForBranch(self, branchIndex: 'unsigned int') -> "void":

        return _openstudiomodelhvac.Splitter_removePortForBranch(self, branchIndex)



    def isRemovable(self) -> "bool":

        return _openstudiomodelhvac.Splitter_isRemovable(self)

Splitter_swigregister = _openstudiomodelhvac.Splitter_swigregister

Splitter_swigregister(Splitter)





def toSplitter(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::Splitter >":

    return _openstudiomodelhvac.toSplitter(idfObject)

toSplitter = _openstudiomodelhvac.toSplitter



def getSplitter(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::Splitter >":

    return _openstudiomodelhvac.getSplitter(t_model, t_handle)

getSplitter = _openstudiomodelhvac.getSplitter



def getSplitters(t_model: 'Model') -> "std::vector< openstudio::model::Splitter,std::allocator< openstudio::model::Splitter > >":

    return _openstudiomodelhvac.getSplitters(t_model)

getSplitters = _openstudiomodelhvac.getSplitters



def getSplitterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::Splitter >":

    return _openstudiomodelhvac.getSplitterByName(t_model, t_name)

getSplitterByName = _openstudiomodelhvac.getSplitterByName



def getSplittersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::Splitter,std::allocator< openstudio::model::Splitter > >":

    return _openstudiomodelhvac.getSplittersByName(t_model, t_name, t_exactMatch)

getSplittersByName = _openstudiomodelhvac.getSplittersByName

class AirLoopHVACSupplyPlenum(Splitter):

    __swig_setmethods__ = {}

    for _s in [Splitter]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACSupplyPlenum, name, value)

    __swig_getmethods__ = {}

    for _s in [Splitter]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACSupplyPlenum, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_AirLoopHVACSupplyPlenum(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACSupplyPlenum

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AirLoopHVACSupplyPlenum_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AirLoopHVACSupplyPlenum_iddObjectType)



    def thermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_thermalZone(self)



    def setThermalZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_setThermalZone(self, thermalZone)



    def resetThermalZone(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_resetThermalZone(self)



    def inletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_inletPort(self)



    def outletPort(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_outletPort(self, branchIndex)



    def nextOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_nextOutletPort(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_addToNode(self, node)



    def addBranchForZone(self, *args) -> "bool":

        return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_addBranchForZone(self, *args)

AirLoopHVACSupplyPlenum_swigregister = _openstudiomodelhvac.AirLoopHVACSupplyPlenum_swigregister

AirLoopHVACSupplyPlenum_swigregister(AirLoopHVACSupplyPlenum)



def AirLoopHVACSupplyPlenum_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AirLoopHVACSupplyPlenum_iddObjectType()

AirLoopHVACSupplyPlenum_iddObjectType = _openstudiomodelhvac.AirLoopHVACSupplyPlenum_iddObjectType





def toAirLoopHVACSupplyPlenum(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirLoopHVACSupplyPlenum >":

    return _openstudiomodelhvac.toAirLoopHVACSupplyPlenum(idfObject)

toAirLoopHVACSupplyPlenum = _openstudiomodelhvac.toAirLoopHVACSupplyPlenum



def getAirLoopHVACSupplyPlenum(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirLoopHVACSupplyPlenum >":

    return _openstudiomodelhvac.getAirLoopHVACSupplyPlenum(t_model, t_handle)

getAirLoopHVACSupplyPlenum = _openstudiomodelhvac.getAirLoopHVACSupplyPlenum



def getAirLoopHVACSupplyPlenums(t_model: 'Model') -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum,std::allocator< openstudio::model::AirLoopHVACSupplyPlenum > >":

    return _openstudiomodelhvac.getAirLoopHVACSupplyPlenums(t_model)

getAirLoopHVACSupplyPlenums = _openstudiomodelhvac.getAirLoopHVACSupplyPlenums



def getAirLoopHVACSupplyPlenumByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirLoopHVACSupplyPlenum >":

    return _openstudiomodelhvac.getAirLoopHVACSupplyPlenumByName(t_model, t_name)

getAirLoopHVACSupplyPlenumByName = _openstudiomodelhvac.getAirLoopHVACSupplyPlenumByName



def getAirLoopHVACSupplyPlenumsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirLoopHVACSupplyPlenum,std::allocator< openstudio::model::AirLoopHVACSupplyPlenum > >":

    return _openstudiomodelhvac.getAirLoopHVACSupplyPlenumsByName(t_model, t_name, t_exactMatch)

getAirLoopHVACSupplyPlenumsByName = _openstudiomodelhvac.getAirLoopHVACSupplyPlenumsByName

class AirLoopHVACZoneSplitter(Splitter):

    __swig_setmethods__ = {}

    for _s in [Splitter]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirLoopHVACZoneSplitter, name, value)

    __swig_getmethods__ = {}

    for _s in [Splitter]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirLoopHVACZoneSplitter, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_AirLoopHVACZoneSplitter(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirLoopHVACZoneSplitter

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AirLoopHVACZoneSplitter_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AirLoopHVACZoneSplitter_iddObjectType)



    def inletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_inletPort(self)



    def outletPort(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_outletPort(self, branchIndex)



    def nextOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_nextOutletPort(self)



    def thermalZones(self) -> "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > >":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_thermalZones(self)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_remove(self)



    def disconnect(self) -> "void":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_disconnect(self)



    def getAirflowNetworkDistributionNode(self) -> "openstudio::model::AirflowNetworkDistributionNode":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_getAirflowNetworkDistributionNode(self)



    def airflowNetworkDistributionNode(self) -> "boost::optional< openstudio::model::AirflowNetworkDistributionNode >":

        return _openstudiomodelhvac.AirLoopHVACZoneSplitter_airflowNetworkDistributionNode(self)

AirLoopHVACZoneSplitter_swigregister = _openstudiomodelhvac.AirLoopHVACZoneSplitter_swigregister

AirLoopHVACZoneSplitter_swigregister(AirLoopHVACZoneSplitter)



def AirLoopHVACZoneSplitter_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AirLoopHVACZoneSplitter_iddObjectType()

AirLoopHVACZoneSplitter_iddObjectType = _openstudiomodelhvac.AirLoopHVACZoneSplitter_iddObjectType





def toAirLoopHVACZoneSplitter(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirLoopHVACZoneSplitter >":

    return _openstudiomodelhvac.toAirLoopHVACZoneSplitter(idfObject)

toAirLoopHVACZoneSplitter = _openstudiomodelhvac.toAirLoopHVACZoneSplitter



def getAirLoopHVACZoneSplitter(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirLoopHVACZoneSplitter >":

    return _openstudiomodelhvac.getAirLoopHVACZoneSplitter(t_model, t_handle)

getAirLoopHVACZoneSplitter = _openstudiomodelhvac.getAirLoopHVACZoneSplitter



def getAirLoopHVACZoneSplitters(t_model: 'Model') -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter,std::allocator< openstudio::model::AirLoopHVACZoneSplitter > >":

    return _openstudiomodelhvac.getAirLoopHVACZoneSplitters(t_model)

getAirLoopHVACZoneSplitters = _openstudiomodelhvac.getAirLoopHVACZoneSplitters



def getAirLoopHVACZoneSplitterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirLoopHVACZoneSplitter >":

    return _openstudiomodelhvac.getAirLoopHVACZoneSplitterByName(t_model, t_name)

getAirLoopHVACZoneSplitterByName = _openstudiomodelhvac.getAirLoopHVACZoneSplitterByName



def getAirLoopHVACZoneSplittersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirLoopHVACZoneSplitter,std::allocator< openstudio::model::AirLoopHVACZoneSplitter > >":

    return _openstudiomodelhvac.getAirLoopHVACZoneSplittersByName(t_model, t_name, t_exactMatch)

getAirLoopHVACZoneSplittersByName = _openstudiomodelhvac.getAirLoopHVACZoneSplittersByName

class ConnectorSplitter(Splitter):

    __swig_setmethods__ = {}

    for _s in [Splitter]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectorSplitter, name, value)

    __swig_getmethods__ = {}

    for _s in [Splitter]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ConnectorSplitter, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ConnectorSplitter(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ConnectorSplitter

    __del__ = lambda self: None



    def inletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.ConnectorSplitter_inletPort(self)



    def outletPort(self, branchIndex: 'unsigned int') -> "unsigned int":

        return _openstudiomodelhvac.ConnectorSplitter_outletPort(self, branchIndex)



    def nextOutletPort(self) -> "unsigned int":

        return _openstudiomodelhvac.ConnectorSplitter_nextOutletPort(self)



    def addToNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.ConnectorSplitter_addToNode(self, node)



    def remove(self) -> "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > >":

        return _openstudiomodelhvac.ConnectorSplitter_remove(self)



    def clone(self, model: 'Model') -> "openstudio::model::ModelObject":

        return _openstudiomodelhvac.ConnectorSplitter_clone(self, model)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ConnectorSplitter_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ConnectorSplitter_iddObjectType)

ConnectorSplitter_swigregister = _openstudiomodelhvac.ConnectorSplitter_swigregister

ConnectorSplitter_swigregister(ConnectorSplitter)



def ConnectorSplitter_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ConnectorSplitter_iddObjectType()

ConnectorSplitter_iddObjectType = _openstudiomodelhvac.ConnectorSplitter_iddObjectType





def toConnectorSplitter(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ConnectorSplitter >":

    return _openstudiomodelhvac.toConnectorSplitter(idfObject)

toConnectorSplitter = _openstudiomodelhvac.toConnectorSplitter



def getConnectorSplitter(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ConnectorSplitter >":

    return _openstudiomodelhvac.getConnectorSplitter(t_model, t_handle)

getConnectorSplitter = _openstudiomodelhvac.getConnectorSplitter



def getConnectorSplitters(t_model: 'Model') -> "std::vector< openstudio::model::ConnectorSplitter,std::allocator< openstudio::model::ConnectorSplitter > >":

    return _openstudiomodelhvac.getConnectorSplitters(t_model)

getConnectorSplitters = _openstudiomodelhvac.getConnectorSplitters



def getConnectorSplitterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ConnectorSplitter >":

    return _openstudiomodelhvac.getConnectorSplitterByName(t_model, t_name)

getConnectorSplitterByName = _openstudiomodelhvac.getConnectorSplitterByName



def getConnectorSplittersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ConnectorSplitter,std::allocator< openstudio::model::ConnectorSplitter > >":

    return _openstudiomodelhvac.getConnectorSplittersByName(t_model, t_name, t_exactMatch)

getConnectorSplittersByName = _openstudiomodelhvac.getConnectorSplittersByName

class AirTerminalDualDuctConstantVolume(Mixer):

    __swig_setmethods__ = {}

    for _s in [Mixer]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirTerminalDualDuctConstantVolume, name, value)

    __swig_getmethods__ = {}

    for _s in [Mixer]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirTerminalDualDuctConstantVolume, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_AirTerminalDualDuctConstantVolume(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctConstantVolume

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AirTerminalDualDuctConstantVolume_iddObjectType)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_availabilitySchedule(self)



    def maximumAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_maximumAirFlowRate(self)



    def isMaximumAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_isMaximumAirFlowRateAutosized(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_setAvailabilitySchedule(self, schedule)



    def setMaximumAirFlowRate(self, maximumAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_setMaximumAirFlowRate(self, maximumAirFlowRate)



    def autosizeMaximumAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_autosizeMaximumAirFlowRate(self)



    def hotAirInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_hotAirInletNode(self)



    def coldAirInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_coldAirInletNode(self)



    def autosizedMaximumAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_autosizedMaximumAirFlowRate(self)

AirTerminalDualDuctConstantVolume_swigregister = _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_swigregister

AirTerminalDualDuctConstantVolume_swigregister(AirTerminalDualDuctConstantVolume)



def AirTerminalDualDuctConstantVolume_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_iddObjectType()

AirTerminalDualDuctConstantVolume_iddObjectType = _openstudiomodelhvac.AirTerminalDualDuctConstantVolume_iddObjectType





def toAirTerminalDualDuctConstantVolume(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirTerminalDualDuctConstantVolume >":

    return _openstudiomodelhvac.toAirTerminalDualDuctConstantVolume(idfObject)

toAirTerminalDualDuctConstantVolume = _openstudiomodelhvac.toAirTerminalDualDuctConstantVolume



def getAirTerminalDualDuctConstantVolume(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirTerminalDualDuctConstantVolume >":

    return _openstudiomodelhvac.getAirTerminalDualDuctConstantVolume(t_model, t_handle)

getAirTerminalDualDuctConstantVolume = _openstudiomodelhvac.getAirTerminalDualDuctConstantVolume



def getAirTerminalDualDuctConstantVolumes(t_model: 'Model') -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume,std::allocator< openstudio::model::AirTerminalDualDuctConstantVolume > >":

    return _openstudiomodelhvac.getAirTerminalDualDuctConstantVolumes(t_model)

getAirTerminalDualDuctConstantVolumes = _openstudiomodelhvac.getAirTerminalDualDuctConstantVolumes



def getAirTerminalDualDuctConstantVolumeByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirTerminalDualDuctConstantVolume >":

    return _openstudiomodelhvac.getAirTerminalDualDuctConstantVolumeByName(t_model, t_name)

getAirTerminalDualDuctConstantVolumeByName = _openstudiomodelhvac.getAirTerminalDualDuctConstantVolumeByName



def getAirTerminalDualDuctConstantVolumesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirTerminalDualDuctConstantVolume,std::allocator< openstudio::model::AirTerminalDualDuctConstantVolume > >":

    return _openstudiomodelhvac.getAirTerminalDualDuctConstantVolumesByName(t_model, t_name, t_exactMatch)

getAirTerminalDualDuctConstantVolumesByName = _openstudiomodelhvac.getAirTerminalDualDuctConstantVolumesByName

class AirTerminalDualDuctVAV(Mixer):

    __swig_setmethods__ = {}

    for _s in [Mixer]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirTerminalDualDuctVAV, name, value)

    __swig_getmethods__ = {}

    for _s in [Mixer]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirTerminalDualDuctVAV, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_AirTerminalDualDuctVAV(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctVAV

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AirTerminalDualDuctVAV_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AirTerminalDualDuctVAV_iddObjectType)



    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_availabilitySchedule(self)



    def maximumDamperAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_maximumDamperAirFlowRate(self)



    def isMaximumDamperAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_isMaximumDamperAirFlowRateAutosized(self)



    def zoneMinimumAirFlowFraction(self) -> "double":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_zoneMinimumAirFlowFraction(self)



    def designSpecificationOutdoorAirObject(self) -> "boost::optional< openstudio::model::DesignSpecificationOutdoorAir >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_designSpecificationOutdoorAirObject(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_setAvailabilitySchedule(self, schedule)



    def resetAvailabilitySchedule(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_resetAvailabilitySchedule(self)



    def setMaximumDamperAirFlowRate(self, maximumDamperAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_setMaximumDamperAirFlowRate(self, maximumDamperAirFlowRate)



    def autosizeMaximumDamperAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_autosizeMaximumDamperAirFlowRate(self)



    def setZoneMinimumAirFlowFraction(self, zoneMinimumAirFlowFraction: 'double') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_setZoneMinimumAirFlowFraction(self, zoneMinimumAirFlowFraction)



    def setDesignSpecificationOutdoorAirObject(self, designSpecificationOutdoorAir: 'DesignSpecificationOutdoorAir') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_setDesignSpecificationOutdoorAirObject(self, designSpecificationOutdoorAir)



    def resetDesignSpecificationOutdoorAirObject(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_resetDesignSpecificationOutdoorAirObject(self)



    def hotAirInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_hotAirInletNode(self)



    def coldAirInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_coldAirInletNode(self)



    def autosizedMaximumDamperAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAV_autosizedMaximumDamperAirFlowRate(self)

AirTerminalDualDuctVAV_swigregister = _openstudiomodelhvac.AirTerminalDualDuctVAV_swigregister

AirTerminalDualDuctVAV_swigregister(AirTerminalDualDuctVAV)



def AirTerminalDualDuctVAV_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AirTerminalDualDuctVAV_iddObjectType()

AirTerminalDualDuctVAV_iddObjectType = _openstudiomodelhvac.AirTerminalDualDuctVAV_iddObjectType





def toAirTerminalDualDuctVAV(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirTerminalDualDuctVAV >":

    return _openstudiomodelhvac.toAirTerminalDualDuctVAV(idfObject)

toAirTerminalDualDuctVAV = _openstudiomodelhvac.toAirTerminalDualDuctVAV



def getAirTerminalDualDuctVAV(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirTerminalDualDuctVAV >":

    return _openstudiomodelhvac.getAirTerminalDualDuctVAV(t_model, t_handle)

getAirTerminalDualDuctVAV = _openstudiomodelhvac.getAirTerminalDualDuctVAV



def getAirTerminalDualDuctVAVs(t_model: 'Model') -> "std::vector< openstudio::model::AirTerminalDualDuctVAV,std::allocator< openstudio::model::AirTerminalDualDuctVAV > >":

    return _openstudiomodelhvac.getAirTerminalDualDuctVAVs(t_model)

getAirTerminalDualDuctVAVs = _openstudiomodelhvac.getAirTerminalDualDuctVAVs



def getAirTerminalDualDuctVAVByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirTerminalDualDuctVAV >":

    return _openstudiomodelhvac.getAirTerminalDualDuctVAVByName(t_model, t_name)

getAirTerminalDualDuctVAVByName = _openstudiomodelhvac.getAirTerminalDualDuctVAVByName



def getAirTerminalDualDuctVAVsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirTerminalDualDuctVAV,std::allocator< openstudio::model::AirTerminalDualDuctVAV > >":

    return _openstudiomodelhvac.getAirTerminalDualDuctVAVsByName(t_model, t_name, t_exactMatch)

getAirTerminalDualDuctVAVsByName = _openstudiomodelhvac.getAirTerminalDualDuctVAVsByName

class AirTerminalDualDuctVAVOutdoorAir(Mixer):

    __swig_setmethods__ = {}

    for _s in [Mixer]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirTerminalDualDuctVAVOutdoorAir, name, value)

    __swig_getmethods__ = {}

    for _s in [Mixer]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AirTerminalDualDuctVAVOutdoorAir, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_AirTerminalDualDuctVAVOutdoorAir(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_AirTerminalDualDuctVAVOutdoorAir

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_iddObjectType)

    __swig_getmethods__["perPersonVentilationRateModeValues"] = lambda x: _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateModeValues

    if _newclass:

        perPersonVentilationRateModeValues = staticmethod(_openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateModeValues)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_availabilitySchedule(self)



    def maximumTerminalAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_maximumTerminalAirFlowRate(self)



    def isMaximumTerminalAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_isMaximumTerminalAirFlowRateAutosized(self)



    def perPersonVentilationRateMode(self) -> "std::string":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateMode(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_setAvailabilitySchedule(self, schedule)



    def setMaximumTerminalAirFlowRate(self, maximumTerminalAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_setMaximumTerminalAirFlowRate(self, maximumTerminalAirFlowRate)



    def autosizeMaximumTerminalAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_autosizeMaximumTerminalAirFlowRate(self)



    def controlForOutdoorAir(self) -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_controlForOutdoorAir(self)



    def setControlForOutdoorAir(self, controlForOutdoorAir: 'bool') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_setControlForOutdoorAir(self, controlForOutdoorAir)



    def setPerPersonVentilationRateMode(self, perPersonVentilationRateMode: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_setPerPersonVentilationRateMode(self, perPersonVentilationRateMode)



    def outdoorAirInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_outdoorAirInletNode(self)



    def recirculatedAirInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_recirculatedAirInletNode(self)



    def autosizedMaximumTerminalAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_autosizedMaximumTerminalAirFlowRate(self)

AirTerminalDualDuctVAVOutdoorAir_swigregister = _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_swigregister

AirTerminalDualDuctVAVOutdoorAir_swigregister(AirTerminalDualDuctVAVOutdoorAir)



def AirTerminalDualDuctVAVOutdoorAir_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_iddObjectType()

AirTerminalDualDuctVAVOutdoorAir_iddObjectType = _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_iddObjectType



def AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateModeValues()

AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateModeValues = _openstudiomodelhvac.AirTerminalDualDuctVAVOutdoorAir_perPersonVentilationRateModeValues





def toAirTerminalDualDuctVAVOutdoorAir(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >":

    return _openstudiomodelhvac.toAirTerminalDualDuctVAVOutdoorAir(idfObject)

toAirTerminalDualDuctVAVOutdoorAir = _openstudiomodelhvac.toAirTerminalDualDuctVAVOutdoorAir



def getAirTerminalDualDuctVAVOutdoorAir(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >":

    return _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAir(t_model, t_handle)

getAirTerminalDualDuctVAVOutdoorAir = _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAir



def getAirTerminalDualDuctVAVOutdoorAirs(t_model: 'Model') -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir,std::allocator< openstudio::model::AirTerminalDualDuctVAVOutdoorAir > >":

    return _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAirs(t_model)

getAirTerminalDualDuctVAVOutdoorAirs = _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAirs



def getAirTerminalDualDuctVAVOutdoorAirByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::AirTerminalDualDuctVAVOutdoorAir >":

    return _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAirByName(t_model, t_name)

getAirTerminalDualDuctVAVOutdoorAirByName = _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAirByName



def getAirTerminalDualDuctVAVOutdoorAirsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::AirTerminalDualDuctVAVOutdoorAir,std::allocator< openstudio::model::AirTerminalDualDuctVAVOutdoorAir > >":

    return _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAirsByName(t_model, t_name, t_exactMatch)

getAirTerminalDualDuctVAVOutdoorAirsByName = _openstudiomodelhvac.getAirTerminalDualDuctVAVOutdoorAirsByName

class CentralHeatPumpSystem(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CentralHeatPumpSystem, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CentralHeatPumpSystem, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CentralHeatPumpSystem(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CentralHeatPumpSystem

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CentralHeatPumpSystem_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CentralHeatPumpSystem_iddObjectType)

    __swig_getmethods__["controlMethodValues"] = lambda x: _openstudiomodelhvac.CentralHeatPumpSystem_controlMethodValues

    if _newclass:

        controlMethodValues = staticmethod(_openstudiomodelhvac.CentralHeatPumpSystem_controlMethodValues)



    def controlMethod(self) -> "std::string":

        return _openstudiomodelhvac.CentralHeatPumpSystem_controlMethod(self)



    def ancillaryPower(self) -> "double":

        return _openstudiomodelhvac.CentralHeatPumpSystem_ancillaryPower(self)



    def ancillaryOperationSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.CentralHeatPumpSystem_ancillaryOperationSchedule(self)



    def setControlMethod(self, controlMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystem_setControlMethod(self, controlMethod)



    def setAncillaryPower(self, ancillaryPower: 'double') -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystem_setAncillaryPower(self, ancillaryPower)



    def setAncillaryOperationSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystem_setAncillaryOperationSchedule(self, schedule)



    def resetAncillaryOperationSchedule(self) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystem_resetAncillaryOperationSchedule(self)



    def addModule(self, centralHeatPumpSystemModule: 'CentralHeatPumpSystemModule') -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystem_addModule(self, centralHeatPumpSystemModule)



    def removeModule(self, centralHeatPumpSystemModule: 'CentralHeatPumpSystemModule') -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystem_removeModule(self, centralHeatPumpSystemModule)



    def removeAllModules(self) -> "void":

        return _openstudiomodelhvac.CentralHeatPumpSystem_removeAllModules(self)



    def modules(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > >":

        return _openstudiomodelhvac.CentralHeatPumpSystem_modules(self)



    def coolingPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.CentralHeatPumpSystem_coolingPlantLoop(self)



    def sourcePlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.CentralHeatPumpSystem_sourcePlantLoop(self)



    def heatingPlantLoop(self) -> "boost::optional< openstudio::model::PlantLoop >":

        return _openstudiomodelhvac.CentralHeatPumpSystem_heatingPlantLoop(self)

CentralHeatPumpSystem_swigregister = _openstudiomodelhvac.CentralHeatPumpSystem_swigregister

CentralHeatPumpSystem_swigregister(CentralHeatPumpSystem)



def CentralHeatPumpSystem_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CentralHeatPumpSystem_iddObjectType()

CentralHeatPumpSystem_iddObjectType = _openstudiomodelhvac.CentralHeatPumpSystem_iddObjectType



def CentralHeatPumpSystem_controlMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.CentralHeatPumpSystem_controlMethodValues()

CentralHeatPumpSystem_controlMethodValues = _openstudiomodelhvac.CentralHeatPumpSystem_controlMethodValues





def toCentralHeatPumpSystem(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CentralHeatPumpSystem >":

    return _openstudiomodelhvac.toCentralHeatPumpSystem(idfObject)

toCentralHeatPumpSystem = _openstudiomodelhvac.toCentralHeatPumpSystem



def getCentralHeatPumpSystem(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CentralHeatPumpSystem >":

    return _openstudiomodelhvac.getCentralHeatPumpSystem(t_model, t_handle)

getCentralHeatPumpSystem = _openstudiomodelhvac.getCentralHeatPumpSystem



def getCentralHeatPumpSystems(t_model: 'Model') -> "std::vector< openstudio::model::CentralHeatPumpSystem,std::allocator< openstudio::model::CentralHeatPumpSystem > >":

    return _openstudiomodelhvac.getCentralHeatPumpSystems(t_model)

getCentralHeatPumpSystems = _openstudiomodelhvac.getCentralHeatPumpSystems



def getCentralHeatPumpSystemByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CentralHeatPumpSystem >":

    return _openstudiomodelhvac.getCentralHeatPumpSystemByName(t_model, t_name)

getCentralHeatPumpSystemByName = _openstudiomodelhvac.getCentralHeatPumpSystemByName



def getCentralHeatPumpSystemsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CentralHeatPumpSystem,std::allocator< openstudio::model::CentralHeatPumpSystem > >":

    return _openstudiomodelhvac.getCentralHeatPumpSystemsByName(t_model, t_name, t_exactMatch)

getCentralHeatPumpSystemsByName = _openstudiomodelhvac.getCentralHeatPumpSystemsByName

class CentralHeatPumpSystemModule(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CentralHeatPumpSystemModule, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CentralHeatPumpSystemModule, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CentralHeatPumpSystemModule(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CentralHeatPumpSystemModule

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CentralHeatPumpSystemModule_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CentralHeatPumpSystemModule_iddObjectType)



    def chillerHeaterModulesPerformanceComponent(self) -> "openstudio::model::ChillerHeaterPerformanceElectricEIR":

        return _openstudiomodelhvac.CentralHeatPumpSystemModule_chillerHeaterModulesPerformanceComponent(self)



    def chillerHeaterModulesControlSchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.CentralHeatPumpSystemModule_chillerHeaterModulesControlSchedule(self)



    def numberofChillerHeaterModules(self) -> "int":

        return _openstudiomodelhvac.CentralHeatPumpSystemModule_numberofChillerHeaterModules(self)



    def setChillerHeaterModulesPerformanceComponent(self, chillerHeaterPerformanceElectricEIR: 'ChillerHeaterPerformanceElectricEIR') -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystemModule_setChillerHeaterModulesPerformanceComponent(self, chillerHeaterPerformanceElectricEIR)



    def setChillerHeaterModulesControlSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystemModule_setChillerHeaterModulesControlSchedule(self, schedule)



    def setNumberofChillerHeaterModules(self, numberofChillerHeaterModules: 'int') -> "bool":

        return _openstudiomodelhvac.CentralHeatPumpSystemModule_setNumberofChillerHeaterModules(self, numberofChillerHeaterModules)



    def centralHeatPumpSystem(self) -> "boost::optional< openstudio::model::CentralHeatPumpSystem >":

        return _openstudiomodelhvac.CentralHeatPumpSystemModule_centralHeatPumpSystem(self)

CentralHeatPumpSystemModule_swigregister = _openstudiomodelhvac.CentralHeatPumpSystemModule_swigregister

CentralHeatPumpSystemModule_swigregister(CentralHeatPumpSystemModule)



def CentralHeatPumpSystemModule_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CentralHeatPumpSystemModule_iddObjectType()

CentralHeatPumpSystemModule_iddObjectType = _openstudiomodelhvac.CentralHeatPumpSystemModule_iddObjectType





def toCentralHeatPumpSystemModule(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CentralHeatPumpSystemModule >":

    return _openstudiomodelhvac.toCentralHeatPumpSystemModule(idfObject)

toCentralHeatPumpSystemModule = _openstudiomodelhvac.toCentralHeatPumpSystemModule



def getCentralHeatPumpSystemModule(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CentralHeatPumpSystemModule >":

    return _openstudiomodelhvac.getCentralHeatPumpSystemModule(t_model, t_handle)

getCentralHeatPumpSystemModule = _openstudiomodelhvac.getCentralHeatPumpSystemModule



def getCentralHeatPumpSystemModules(t_model: 'Model') -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > >":

    return _openstudiomodelhvac.getCentralHeatPumpSystemModules(t_model)

getCentralHeatPumpSystemModules = _openstudiomodelhvac.getCentralHeatPumpSystemModules



def getCentralHeatPumpSystemModuleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CentralHeatPumpSystemModule >":

    return _openstudiomodelhvac.getCentralHeatPumpSystemModuleByName(t_model, t_name)

getCentralHeatPumpSystemModuleByName = _openstudiomodelhvac.getCentralHeatPumpSystemModuleByName



def getCentralHeatPumpSystemModulesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > >":

    return _openstudiomodelhvac.getCentralHeatPumpSystemModulesByName(t_model, t_name, t_exactMatch)

getCentralHeatPumpSystemModulesByName = _openstudiomodelhvac.getCentralHeatPumpSystemModulesByName

class ChillerHeaterPerformanceElectricEIR(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ChillerHeaterPerformanceElectricEIR, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ChillerHeaterPerformanceElectricEIR, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ChillerHeaterPerformanceElectricEIR(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerHeaterPerformanceElectricEIR

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_iddObjectType)

    __swig_getmethods__["chilledWaterFlowModeTypeValues"] = lambda x: _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeTypeValues

    if _newclass:

        chilledWaterFlowModeTypeValues = staticmethod(_openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeTypeValues)

    __swig_getmethods__["condenserTypeValues"] = lambda x: _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_condenserTypeValues

    if _newclass:

        condenserTypeValues = staticmethod(_openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_condenserTypeValues)

    __swig_getmethods__["coolingModeTemperatureCurveCondenserWaterIndependentVariableValues"] = lambda x: _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariableValues

    if _newclass:

        coolingModeTemperatureCurveCondenserWaterIndependentVariableValues = staticmethod(_openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariableValues)

    __swig_getmethods__["heatingModeTemperatureCurveCondenserWaterIndependentVariableValues"] = lambda x: _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariableValues

    if _newclass:

        heatingModeTemperatureCurveCondenserWaterIndependentVariableValues = staticmethod(_openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariableValues)



    def referenceCoolingModeEvaporatorCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeEvaporatorCapacity(self)



    def isReferenceCoolingModeEvaporatorCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_isReferenceCoolingModeEvaporatorCapacityAutosized(self)



    def referenceCoolingModeCOP(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeCOP(self)



    def referenceCoolingModeLeavingChilledWaterTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeLeavingChilledWaterTemperature(self)



    def referenceCoolingModeEnteringCondenserFluidTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeEnteringCondenserFluidTemperature(self)



    def referenceCoolingModeLeavingCondenserWaterTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceCoolingModeLeavingCondenserWaterTemperature(self)



    def referenceHeatingModeCoolingCapacityRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeCoolingCapacityRatio(self)



    def referenceHeatingModeCoolingPowerInputRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeCoolingPowerInputRatio(self)



    def referenceHeatingModeLeavingChilledWaterTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeLeavingChilledWaterTemperature(self)



    def referenceHeatingModeLeavingCondenserWaterTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeLeavingCondenserWaterTemperature(self)



    def referenceHeatingModeEnteringCondenserFluidTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_referenceHeatingModeEnteringCondenserFluidTemperature(self)



    def heatingModeEnteringChilledWaterTemperatureLowLimit(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeEnteringChilledWaterTemperatureLowLimit(self)



    def chilledWaterFlowModeType(self) -> "std::string":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeType(self)



    def designChilledWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_designChilledWaterFlowRate(self)



    def isDesignChilledWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_isDesignChilledWaterFlowRateAutosized(self)



    def designCondenserWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_designCondenserWaterFlowRate(self)



    def isDesignCondenserWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_isDesignCondenserWaterFlowRateAutosized(self)



    def designHotWaterFlowRate(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_designHotWaterFlowRate(self)



    def compressorMotorEfficiency(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_compressorMotorEfficiency(self)



    def condenserType(self) -> "std::string":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_condenserType(self)



    def coolingModeTemperatureCurveCondenserWaterIndependentVariable(self) -> "std::string":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariable(self)



    def coolingModeCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeCoolingCapacityFunctionOfTemperatureCurve(self)



    def coolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self)



    def coolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self)



    def coolingModeCoolingCapacityOptimumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeCoolingCapacityOptimumPartLoadRatio(self)



    def heatingModeTemperatureCurveCondenserWaterIndependentVariable(self) -> "std::string":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariable(self)



    def heatingModeCoolingCapacityFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeCoolingCapacityFunctionOfTemperatureCurve(self)



    def heatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self)



    def heatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self)



    def heatingModeCoolingCapacityOptimumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeCoolingCapacityOptimumPartLoadRatio(self)



    def sizingFactor(self) -> "double":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_sizingFactor(self)



    def setReferenceCoolingModeEvaporatorCapacity(self, referenceCoolingModeEvaporatorCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeEvaporatorCapacity(self, referenceCoolingModeEvaporatorCapacity)



    def autosizeReferenceCoolingModeEvaporatorCapacity(self) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizeReferenceCoolingModeEvaporatorCapacity(self)



    def setReferenceCoolingModeCOP(self, referenceCoolingModeCOP: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeCOP(self, referenceCoolingModeCOP)



    def setReferenceCoolingModeLeavingChilledWaterTemperature(self, referenceCoolingModeLeavingChilledWaterTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeLeavingChilledWaterTemperature(self, referenceCoolingModeLeavingChilledWaterTemperature)



    def setReferenceCoolingModeEnteringCondenserFluidTemperature(self, referenceCoolingModeEnteringCondenserFluidTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeEnteringCondenserFluidTemperature(self, referenceCoolingModeEnteringCondenserFluidTemperature)



    def setReferenceCoolingModeLeavingCondenserWaterTemperature(self, referenceCoolingModeLeavingCondenserWaterTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceCoolingModeLeavingCondenserWaterTemperature(self, referenceCoolingModeLeavingCondenserWaterTemperature)



    def setReferenceHeatingModeCoolingCapacityRatio(self, referenceHeatingModeCoolingCapacityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeCoolingCapacityRatio(self, referenceHeatingModeCoolingCapacityRatio)



    def setReferenceHeatingModeCoolingPowerInputRatio(self, referenceHeatingModeCoolingPowerInputRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeCoolingPowerInputRatio(self, referenceHeatingModeCoolingPowerInputRatio)



    def setReferenceHeatingModeLeavingChilledWaterTemperature(self, referenceHeatingModeLeavingChilledWaterTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeLeavingChilledWaterTemperature(self, referenceHeatingModeLeavingChilledWaterTemperature)



    def setReferenceHeatingModeLeavingCondenserWaterTemperature(self, referenceHeatingModeLeavingCondenserWaterTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeLeavingCondenserWaterTemperature(self, referenceHeatingModeLeavingCondenserWaterTemperature)



    def setReferenceHeatingModeEnteringCondenserFluidTemperature(self, referenceHeatingModeEnteringCondenserFluidTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setReferenceHeatingModeEnteringCondenserFluidTemperature(self, referenceHeatingModeEnteringCondenserFluidTemperature)



    def setHeatingModeEnteringChilledWaterTemperatureLowLimit(self, heatingModeEnteringChilledWaterTemperatureLowLimit: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeEnteringChilledWaterTemperatureLowLimit(self, heatingModeEnteringChilledWaterTemperatureLowLimit)



    def setChilledWaterFlowModeType(self, chilledWaterFlowModeType: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setChilledWaterFlowModeType(self, chilledWaterFlowModeType)



    def setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate)



    def resetDesignChilledWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_resetDesignChilledWaterFlowRate(self)



    def autosizeDesignChilledWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizeDesignChilledWaterFlowRate(self)



    def setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate)



    def resetDesignCondenserWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_resetDesignCondenserWaterFlowRate(self)



    def autosizeDesignCondenserWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizeDesignCondenserWaterFlowRate(self)



    def setDesignHotWaterFlowRate(self, designHotWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setDesignHotWaterFlowRate(self, designHotWaterFlowRate)



    def setCompressorMotorEfficiency(self, compressorMotorEfficiency: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCompressorMotorEfficiency(self, compressorMotorEfficiency)



    def setCondenserType(self, condenserType: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCondenserType(self, condenserType)



    def setCoolingModeTemperatureCurveCondenserWaterIndependentVariable(self, coolingModeTemperatureCurveCondenserWaterIndependentVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeTemperatureCurveCondenserWaterIndependentVariable(self, coolingModeTemperatureCurveCondenserWaterIndependentVariable)



    def setCoolingModeCoolingCapacityFunctionOfTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeCoolingCapacityFunctionOfTemperatureCurve(self, curve)



    def setCoolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self, curve)



    def setCoolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self, curve)



    def setCoolingModeCoolingCapacityOptimumPartLoadRatio(self, coolingModeCoolingCapacityOptimumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setCoolingModeCoolingCapacityOptimumPartLoadRatio(self, coolingModeCoolingCapacityOptimumPartLoadRatio)



    def setHeatingModeTemperatureCurveCondenserWaterIndependentVariable(self, heatingModeTemperatureCurveCondenserWaterIndependentVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeTemperatureCurveCondenserWaterIndependentVariable(self, heatingModeTemperatureCurveCondenserWaterIndependentVariable)



    def setHeatingModeCoolingCapacityFunctionOfTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeCoolingCapacityFunctionOfTemperatureCurve(self, curve)



    def setHeatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurve(self, curve)



    def setHeatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurve(self, curve)



    def setHeatingModeCoolingCapacityOptimumPartLoadRatio(self, heatingModeCoolingCapacityOptimumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setHeatingModeCoolingCapacityOptimumPartLoadRatio(self, heatingModeCoolingCapacityOptimumPartLoadRatio)



    def setSizingFactor(self, sizingFactor: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_setSizingFactor(self, sizingFactor)



    def autosizedReferenceCoolingModeEvaporatorCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizedReferenceCoolingModeEvaporatorCapacity(self)



    def autosizedDesignChilledWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizedDesignChilledWaterFlowRate(self)



    def autosizedDesignCondenserWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosizedDesignCondenserWaterFlowRate(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_applySizingValues(self)



    def centralHeatPumpSystemModules(self) -> "std::vector< openstudio::model::CentralHeatPumpSystemModule,std::allocator< openstudio::model::CentralHeatPumpSystemModule > >":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_centralHeatPumpSystemModules(self)



    def centralHeatPumpSystems(self) -> "std::vector< openstudio::model::CentralHeatPumpSystem,std::allocator< openstudio::model::CentralHeatPumpSystem > >":

        return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_centralHeatPumpSystems(self)

ChillerHeaterPerformanceElectricEIR_swigregister = _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_swigregister

ChillerHeaterPerformanceElectricEIR_swigregister(ChillerHeaterPerformanceElectricEIR)



def ChillerHeaterPerformanceElectricEIR_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_iddObjectType()

ChillerHeaterPerformanceElectricEIR_iddObjectType = _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_iddObjectType



def ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeTypeValues()

ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeTypeValues = _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_chilledWaterFlowModeTypeValues



def ChillerHeaterPerformanceElectricEIR_condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_condenserTypeValues()

ChillerHeaterPerformanceElectricEIR_condenserTypeValues = _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_condenserTypeValues



def ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariableValues()

ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariableValues = _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_coolingModeTemperatureCurveCondenserWaterIndependentVariableValues



def ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariableValues()

ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariableValues = _openstudiomodelhvac.ChillerHeaterPerformanceElectricEIR_heatingModeTemperatureCurveCondenserWaterIndependentVariableValues





def toChillerHeaterPerformanceElectricEIR(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ChillerHeaterPerformanceElectricEIR >":

    return _openstudiomodelhvac.toChillerHeaterPerformanceElectricEIR(idfObject)

toChillerHeaterPerformanceElectricEIR = _openstudiomodelhvac.toChillerHeaterPerformanceElectricEIR



def getChillerHeaterPerformanceElectricEIR(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ChillerHeaterPerformanceElectricEIR >":

    return _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIR(t_model, t_handle)

getChillerHeaterPerformanceElectricEIR = _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIR



def getChillerHeaterPerformanceElectricEIRs(t_model: 'Model') -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR,std::allocator< openstudio::model::ChillerHeaterPerformanceElectricEIR > >":

    return _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIRs(t_model)

getChillerHeaterPerformanceElectricEIRs = _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIRs



def getChillerHeaterPerformanceElectricEIRByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ChillerHeaterPerformanceElectricEIR >":

    return _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIRByName(t_model, t_name)

getChillerHeaterPerformanceElectricEIRByName = _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIRByName



def getChillerHeaterPerformanceElectricEIRsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ChillerHeaterPerformanceElectricEIR,std::allocator< openstudio::model::ChillerHeaterPerformanceElectricEIR > >":

    return _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIRsByName(t_model, t_name, t_exactMatch)

getChillerHeaterPerformanceElectricEIRsByName = _openstudiomodelhvac.getChillerHeaterPerformanceElectricEIRsByName

class ChillerElectricEIR(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ChillerElectricEIR, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ChillerElectricEIR, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_ChillerElectricEIR(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerElectricEIR

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ChillerElectricEIR_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ChillerElectricEIR_iddObjectType)

    __swig_getmethods__["validCondenserTypeValues"] = lambda x: _openstudiomodelhvac.ChillerElectricEIR_validCondenserTypeValues

    if _newclass:

        validCondenserTypeValues = staticmethod(_openstudiomodelhvac.ChillerElectricEIR_validCondenserTypeValues)

    __swig_getmethods__["validChillerFlowModeValues"] = lambda x: _openstudiomodelhvac.ChillerElectricEIR_validChillerFlowModeValues

    if _newclass:

        validChillerFlowModeValues = staticmethod(_openstudiomodelhvac.ChillerElectricEIR_validChillerFlowModeValues)



    def referenceCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerElectricEIR_referenceCapacity(self)



    def isReferenceCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceCapacityAutosized(self)



    def referenceCOP(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_referenceCOP(self)



    def referenceLeavingChilledWaterTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_referenceLeavingChilledWaterTemperature(self)



    def isReferenceLeavingChilledWaterTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceLeavingChilledWaterTemperatureDefaulted(self)



    def referenceEnteringCondenserFluidTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_referenceEnteringCondenserFluidTemperature(self)



    def isReferenceEnteringCondenserFluidTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceEnteringCondenserFluidTemperatureDefaulted(self)



    def referenceChilledWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerElectricEIR_referenceChilledWaterFlowRate(self)



    def isReferenceChilledWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceChilledWaterFlowRateAutosized(self)



    def referenceCondenserFluidFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerElectricEIR_referenceCondenserFluidFlowRate(self)



    def isReferenceCondenserFluidFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isReferenceCondenserFluidFlowRateAutosized(self)



    def coolingCapacityFunctionOfTemperature(self) -> "openstudio::model::CurveBiquadratic":

        return _openstudiomodelhvac.ChillerElectricEIR_coolingCapacityFunctionOfTemperature(self)



    def electricInputToCoolingOutputRatioFunctionOfTemperature(self) -> "openstudio::model::CurveBiquadratic":

        return _openstudiomodelhvac.ChillerElectricEIR_electricInputToCoolingOutputRatioFunctionOfTemperature(self)



    def electricInputToCoolingOutputRatioFunctionOfPLR(self) -> "openstudio::model::CurveQuadratic":

        return _openstudiomodelhvac.ChillerElectricEIR_electricInputToCoolingOutputRatioFunctionOfPLR(self)



    def minimumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_minimumPartLoadRatio(self)



    def isMinimumPartLoadRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isMinimumPartLoadRatioDefaulted(self)



    def maximumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_maximumPartLoadRatio(self)



    def isMaximumPartLoadRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isMaximumPartLoadRatioDefaulted(self)



    def optimumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_optimumPartLoadRatio(self)



    def isOptimumPartLoadRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isOptimumPartLoadRatioDefaulted(self)



    def minimumUnloadingRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_minimumUnloadingRatio(self)



    def isMinimumUnloadingRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isMinimumUnloadingRatioDefaulted(self)



    def chilledWaterInletNodeName(self) -> "std::string":

        return _openstudiomodelhvac.ChillerElectricEIR_chilledWaterInletNodeName(self)



    def chilledWaterOutletNodeName(self) -> "std::string":

        return _openstudiomodelhvac.ChillerElectricEIR_chilledWaterOutletNodeName(self)



    def condenserInletNodeName(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ChillerElectricEIR_condenserInletNodeName(self)



    def condenserOutletNodeName(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ChillerElectricEIR_condenserOutletNodeName(self)



    def condenserType(self) -> "std::string":

        return _openstudiomodelhvac.ChillerElectricEIR_condenserType(self)



    def isCondenserTypeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isCondenserTypeDefaulted(self)



    def condenserFanPowerRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_condenserFanPowerRatio(self)



    def isCondenserFanPowerRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isCondenserFanPowerRatioDefaulted(self)



    def compressorMotorEfficiency(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_compressorMotorEfficiency(self)



    def isCompressorMotorEfficiencyDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isCompressorMotorEfficiencyDefaulted(self)



    def leavingChilledWaterLowerTemperatureLimit(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_leavingChilledWaterLowerTemperatureLimit(self)



    def isLeavingChilledWaterLowerTemperatureLimitDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isLeavingChilledWaterLowerTemperatureLimitDefaulted(self)



    def chillerFlowMode(self) -> "std::string":

        return _openstudiomodelhvac.ChillerElectricEIR_chillerFlowMode(self)



    def isChillerFlowModeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isChillerFlowModeDefaulted(self)



    def designHeatRecoveryWaterFlowRate(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_designHeatRecoveryWaterFlowRate(self)



    def isDesignHeatRecoveryWaterFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isDesignHeatRecoveryWaterFlowRateDefaulted(self)



    def heatRecoveryInletNodeName(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ChillerElectricEIR_heatRecoveryInletNodeName(self)



    def heatRecoveryOutletNodeName(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ChillerElectricEIR_heatRecoveryOutletNodeName(self)



    def sizingFactor(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_sizingFactor(self)



    def isSizingFactorDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isSizingFactorDefaulted(self)



    def basinHeaterCapacity(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_basinHeaterCapacity(self)



    def isBasinHeaterCapacityDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isBasinHeaterCapacityDefaulted(self)



    def basinHeaterSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerElectricEIR_basinHeaterSetpointTemperature(self)



    def isBasinHeaterSetpointTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_isBasinHeaterSetpointTemperatureDefaulted(self)



    def basinHeaterSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ChillerElectricEIR_basinHeaterSchedule(self)



    def endUseSubcategory(self) -> "std::string":

        return _openstudiomodelhvac.ChillerElectricEIR_endUseSubcategory(self)



    def setReferenceCapacity(self, *args) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceCapacity(self, *args)



    def autosizeReferenceCapacity(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_autosizeReferenceCapacity(self)



    def setReferenceCOP(self, referenceCOP: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceCOP(self, referenceCOP)



    def setReferenceLeavingChilledWaterTemperature(self, referenceLeavingChilledWaterTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceLeavingChilledWaterTemperature(self, referenceLeavingChilledWaterTemperature)



    def resetReferenceLeavingChilledWaterTemperature(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetReferenceLeavingChilledWaterTemperature(self)



    def setReferenceEnteringCondenserFluidTemperature(self, referenceEnteringCondenserFluidTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceEnteringCondenserFluidTemperature(self, referenceEnteringCondenserFluidTemperature)



    def resetReferenceEnteringCondenserFluidTemperature(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetReferenceEnteringCondenserFluidTemperature(self)



    def setReferenceChilledWaterFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceChilledWaterFlowRate(self, *args)



    def resetReferenceChilledWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetReferenceChilledWaterFlowRate(self)



    def autosizeReferenceChilledWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_autosizeReferenceChilledWaterFlowRate(self)



    def setReferenceCondenserFluidFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setReferenceCondenserFluidFlowRate(self, *args)



    def resetReferenceCondenserFluidFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetReferenceCondenserFluidFlowRate(self)



    def autosizeReferenceCondenserFluidFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_autosizeReferenceCondenserFluidFlowRate(self)



    def setCoolingCapacityFunctionOfTemperature(self, arg2: 'CurveBiquadratic') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setCoolingCapacityFunctionOfTemperature(self, arg2)



    def setElectricInputToCoolingOutputRatioFunctionOfTemperature(self, arg2: 'CurveBiquadratic') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setElectricInputToCoolingOutputRatioFunctionOfTemperature(self, arg2)



    def setElectricInputToCoolingOutputRatioFunctionOfPLR(self, arg2: 'CurveQuadratic') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setElectricInputToCoolingOutputRatioFunctionOfPLR(self, arg2)



    def setMinimumPartLoadRatio(self, minimumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setMinimumPartLoadRatio(self, minimumPartLoadRatio)



    def resetMinimumPartLoadRatio(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetMinimumPartLoadRatio(self)



    def setMaximumPartLoadRatio(self, maximumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setMaximumPartLoadRatio(self, maximumPartLoadRatio)



    def resetMaximumPartLoadRatio(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetMaximumPartLoadRatio(self)



    def setOptimumPartLoadRatio(self, optimumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setOptimumPartLoadRatio(self, optimumPartLoadRatio)



    def resetOptimumPartLoadRatio(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetOptimumPartLoadRatio(self)



    def setMinimumUnloadingRatio(self, minimumUnloadingRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setMinimumUnloadingRatio(self, minimumUnloadingRatio)



    def resetMinimumUnloadingRatio(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetMinimumUnloadingRatio(self)



    def setChilledWaterInletNodeName(self, chilledWaterInletNodeName: 'std::string') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setChilledWaterInletNodeName(self, chilledWaterInletNodeName)



    def setChilledWaterOutletNodeName(self, chilledWaterOutletNodeName: 'std::string') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setChilledWaterOutletNodeName(self, chilledWaterOutletNodeName)



    def setCondenserInletNodeName(self, *args) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setCondenserInletNodeName(self, *args)



    def resetCondenserInletNodeName(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetCondenserInletNodeName(self)



    def setCondenserOutletNodeName(self, *args) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setCondenserOutletNodeName(self, *args)



    def resetCondenserOutletNodeName(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetCondenserOutletNodeName(self)



    def setCondenserType(self, condenserType: 'std::string') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setCondenserType(self, condenserType)



    def resetCondenserType(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetCondenserType(self)



    def setCondenserFanPowerRatio(self, condenserFanPowerRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setCondenserFanPowerRatio(self, condenserFanPowerRatio)



    def resetCondenserFanPowerRatio(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetCondenserFanPowerRatio(self)



    def setCompressorMotorEfficiency(self, compressorMotorEfficiency: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setCompressorMotorEfficiency(self, compressorMotorEfficiency)



    def resetCompressorMotorEfficiency(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetCompressorMotorEfficiency(self)



    def setLeavingChilledWaterLowerTemperatureLimit(self, leavingChilledWaterLowerTemperatureLimit: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setLeavingChilledWaterLowerTemperatureLimit(self, leavingChilledWaterLowerTemperatureLimit)



    def resetLeavingChilledWaterLowerTemperatureLimit(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetLeavingChilledWaterLowerTemperatureLimit(self)



    def setChillerFlowMode(self, chillerFlowMode: 'std::string') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setChillerFlowMode(self, chillerFlowMode)



    def resetChillerFlowMode(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetChillerFlowMode(self)



    def setDesignHeatRecoveryWaterFlowRate(self, designHeatRecoveryWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setDesignHeatRecoveryWaterFlowRate(self, designHeatRecoveryWaterFlowRate)



    def resetDesignHeatRecoveryWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetDesignHeatRecoveryWaterFlowRate(self)



    def setHeatRecoveryInletNodeName(self, *args) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setHeatRecoveryInletNodeName(self, *args)



    def resetHeatRecoveryInletNodeName(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetHeatRecoveryInletNodeName(self)



    def setHeatRecoveryOutletNodeName(self, *args) -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setHeatRecoveryOutletNodeName(self, *args)



    def resetHeatRecoveryOutletNodeName(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetHeatRecoveryOutletNodeName(self)



    def setSizingFactor(self, sizingFactor: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setSizingFactor(self, sizingFactor)



    def resetSizingFactor(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetSizingFactor(self)



    def setBasinHeaterCapacity(self, basinHeaterCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setBasinHeaterCapacity(self, basinHeaterCapacity)



    def resetBasinHeaterCapacity(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetBasinHeaterCapacity(self)



    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)



    def resetBasinHeaterSetpointTemperature(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetBasinHeaterSetpointTemperature(self)



    def setBasinHeaterSchedule(self, s: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setBasinHeaterSchedule(self, s)



    def resetBasinHeaterSchedule(self) -> "void":

        return _openstudiomodelhvac.ChillerElectricEIR_resetBasinHeaterSchedule(self)



    def autosizedReferenceCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerElectricEIR_autosizedReferenceCapacity(self)



    def autosizedReferenceChilledWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerElectricEIR_autosizedReferenceChilledWaterFlowRate(self)



    def autosizedReferenceCondenserFluidFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerElectricEIR_autosizedReferenceCondenserFluidFlowRate(self)



    def setEndUseSubcategory(self, endUseSubcategory: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.ChillerElectricEIR_setEndUseSubcategory(self, endUseSubcategory)

ChillerElectricEIR_swigregister = _openstudiomodelhvac.ChillerElectricEIR_swigregister

ChillerElectricEIR_swigregister(ChillerElectricEIR)



def ChillerElectricEIR_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ChillerElectricEIR_iddObjectType()

ChillerElectricEIR_iddObjectType = _openstudiomodelhvac.ChillerElectricEIR_iddObjectType



def ChillerElectricEIR_validCondenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerElectricEIR_validCondenserTypeValues()

ChillerElectricEIR_validCondenserTypeValues = _openstudiomodelhvac.ChillerElectricEIR_validCondenserTypeValues



def ChillerElectricEIR_validChillerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerElectricEIR_validChillerFlowModeValues()

ChillerElectricEIR_validChillerFlowModeValues = _openstudiomodelhvac.ChillerElectricEIR_validChillerFlowModeValues





def toChillerElectricEIR(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ChillerElectricEIR >":

    return _openstudiomodelhvac.toChillerElectricEIR(idfObject)

toChillerElectricEIR = _openstudiomodelhvac.toChillerElectricEIR



def getChillerElectricEIR(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ChillerElectricEIR >":

    return _openstudiomodelhvac.getChillerElectricEIR(t_model, t_handle)

getChillerElectricEIR = _openstudiomodelhvac.getChillerElectricEIR



def getChillerElectricEIRs(t_model: 'Model') -> "std::vector< openstudio::model::ChillerElectricEIR,std::allocator< openstudio::model::ChillerElectricEIR > >":

    return _openstudiomodelhvac.getChillerElectricEIRs(t_model)

getChillerElectricEIRs = _openstudiomodelhvac.getChillerElectricEIRs



def getChillerElectricEIRByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ChillerElectricEIR >":

    return _openstudiomodelhvac.getChillerElectricEIRByName(t_model, t_name)

getChillerElectricEIRByName = _openstudiomodelhvac.getChillerElectricEIRByName



def getChillerElectricEIRsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ChillerElectricEIR,std::allocator< openstudio::model::ChillerElectricEIR > >":

    return _openstudiomodelhvac.getChillerElectricEIRsByName(t_model, t_name, t_exactMatch)

getChillerElectricEIRsByName = _openstudiomodelhvac.getChillerElectricEIRsByName

class CoilCoolingDXMultiSpeedStageData(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingDXMultiSpeedStageData, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingDXMultiSpeedStageData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingDXMultiSpeedStageData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXMultiSpeedStageData

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_iddObjectType)



    def grossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_grossRatedTotalCoolingCapacity(self)



    def isGrossRatedTotalCoolingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isGrossRatedTotalCoolingCapacityAutosized(self)



    def grossRatedSensibleHeatRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_grossRatedSensibleHeatRatio(self)



    def isGrossRatedSensibleHeatRatioAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isGrossRatedSensibleHeatRatioAutosized(self)



    def grossRatedCoolingCOP(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_grossRatedCoolingCOP(self)



    def ratedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratedAirFlowRate(self)



    def isRatedAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isRatedAirFlowRateAutosized(self)



    def ratedEvaporatorFanPowerPerVolumeFlowRate(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratedEvaporatorFanPowerPerVolumeFlowRate(self)



    def totalCoolingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_totalCoolingCapacityFunctionofTemperatureCurve(self)



    def totalCoolingCapacityFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_totalCoolingCapacityFunctionofFlowFractionCurve(self)



    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_energyInputRatioFunctionofTemperatureCurve(self)



    def energyInputRatioFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_energyInputRatioFunctionofFlowFractionCurve(self)



    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_partLoadFractionCorrelationCurve(self)



    def nominalTimeforCondensateRemovaltoBegin(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_nominalTimeforCondensateRemovaltoBegin(self)



    def ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)



    def maximumCyclingRate(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_maximumCyclingRate(self)



    def latentCapacityTimeConstant(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_latentCapacityTimeConstant(self)



    def ratedWasteHeatFractionofPowerInput(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratedWasteHeatFractionofPowerInput(self)



    def wasteHeatFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_wasteHeatFunctionofTemperatureCurve(self)



    def evaporativeCondenserEffectiveness(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_evaporativeCondenserEffectiveness(self)



    def evaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_evaporativeCondenserAirFlowRate(self)



    def isEvaporativeCondenserAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isEvaporativeCondenserAirFlowRateAutosized(self)



    def ratedEvaporativeCondenserPumpPowerConsumption(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_ratedEvaporativeCondenserPumpPowerConsumption(self)



    def isRatedEvaporativeCondenserPumpPowerConsumptionAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_isRatedEvaporativeCondenserPumpPowerConsumptionAutosized(self)



    def setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity)



    def autosizeGrossRatedTotalCoolingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeGrossRatedTotalCoolingCapacity(self)



    def setGrossRatedSensibleHeatRatio(self, grossRatedSensibleHeatRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setGrossRatedSensibleHeatRatio(self, grossRatedSensibleHeatRatio)



    def autosizeGrossRatedSensibleHeatRatio(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeGrossRatedSensibleHeatRatio(self)



    def setGrossRatedCoolingCOP(self, grossRatedCoolingCOP: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setGrossRatedCoolingCOP(self, grossRatedCoolingCOP)



    def setRatedAirFlowRate(self, ratedAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatedAirFlowRate(self, ratedAirFlowRate)



    def autosizeRatedAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeRatedAirFlowRate(self)



    def setRatedEvaporatorFanPowerPerVolumeFlowRate(self, ratedEvaporatorFanPowerPerVolumeFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatedEvaporatorFanPowerPerVolumeFlowRate(self, ratedEvaporatorFanPowerPerVolumeFlowRate)



    def setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve)



    def setTotalCoolingCapacityFunctionofFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setTotalCoolingCapacityFunctionofFlowFractionCurve(self, curve)



    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)



    def setEnergyInputRatioFunctionofFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setEnergyInputRatioFunctionofFlowFractionCurve(self, curve)



    def setPartLoadFractionCorrelationCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setPartLoadFractionCorrelationCurve(self, curve)



    def setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin)



    def setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity)



    def setMaximumCyclingRate(self, maximumCyclingRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setMaximumCyclingRate(self, maximumCyclingRate)



    def setLatentCapacityTimeConstant(self, latentCapacityTimeConstant: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setLatentCapacityTimeConstant(self, latentCapacityTimeConstant)



    def setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput)



    def setWasteHeatFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setWasteHeatFunctionofTemperatureCurve(self, curve)



    def setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness)



    def setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate)



    def autosizeEvaporativeCondenserAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeEvaporativeCondenserAirFlowRate(self)



    def setRatedEvaporativeCondenserPumpPowerConsumption(self, ratedEvaporativeCondenserPumpPowerConsumption: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_setRatedEvaporativeCondenserPumpPowerConsumption(self, ratedEvaporativeCondenserPumpPowerConsumption)



    def autosizeRatedEvaporativeCondenserPumpPowerConsumption(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizeRatedEvaporativeCondenserPumpPowerConsumption(self)



    def autosizedGrossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedGrossRatedTotalCoolingCapacity(self)



    def autosizedGrossRatedSensibleHeatRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedGrossRatedSensibleHeatRatio(self)



    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedRatedAirFlowRate(self)



    def autosizedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedEvaporativeCondenserAirFlowRate(self)



    def autosizedRatedEvaporativeCondenserPumpPowerConsumption(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosizedRatedEvaporativeCondenserPumpPowerConsumption(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_applySizingValues(self)

CoilCoolingDXMultiSpeedStageData_swigregister = _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_swigregister

CoilCoolingDXMultiSpeedStageData_swigregister(CoilCoolingDXMultiSpeedStageData)



def CoilCoolingDXMultiSpeedStageData_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_iddObjectType()

CoilCoolingDXMultiSpeedStageData_iddObjectType = _openstudiomodelhvac.CoilCoolingDXMultiSpeedStageData_iddObjectType





def toCoilCoolingDXMultiSpeedStageData(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeedStageData >":

    return _openstudiomodelhvac.toCoilCoolingDXMultiSpeedStageData(idfObject)

toCoilCoolingDXMultiSpeedStageData = _openstudiomodelhvac.toCoilCoolingDXMultiSpeedStageData



def getCoilCoolingDXMultiSpeedStageData(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeedStageData >":

    return _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageData(t_model, t_handle)

getCoilCoolingDXMultiSpeedStageData = _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageData



def getCoilCoolingDXMultiSpeedStageDatas(t_model: 'Model') -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilCoolingDXMultiSpeedStageData > >":

    return _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageDatas(t_model)

getCoilCoolingDXMultiSpeedStageDatas = _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageDatas



def getCoilCoolingDXMultiSpeedStageDataByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilCoolingDXMultiSpeedStageData >":

    return _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageDataByName(t_model, t_name)

getCoilCoolingDXMultiSpeedStageDataByName = _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageDataByName



def getCoilCoolingDXMultiSpeedStageDatasByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilCoolingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilCoolingDXMultiSpeedStageData > >":

    return _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageDatasByName(t_model, t_name, t_exactMatch)

getCoilCoolingDXMultiSpeedStageDatasByName = _openstudiomodelhvac.getCoilCoolingDXMultiSpeedStageDatasByName

class CoilCoolingDXVariableRefrigerantFlow(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingDXVariableRefrigerantFlow, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingDXVariableRefrigerantFlow, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CoilCoolingDXVariableRefrigerantFlow(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXVariableRefrigerantFlow

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_iddObjectType)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_availabilitySchedule(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setAvailabilitySchedule(self, schedule)



    def ratedTotalCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_ratedTotalCoolingCapacity(self)



    def isRatedTotalCoolingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_isRatedTotalCoolingCapacityAutosized(self)



    def setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity)



    def autosizeRatedTotalCoolingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizeRatedTotalCoolingCapacity(self)



    def ratedSensibleHeatRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_ratedSensibleHeatRatio(self)



    def isRatedSensibleHeatRatioAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_isRatedSensibleHeatRatioAutosized(self)



    def setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio)



    def autosizeRatedSensibleHeatRatio(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizeRatedSensibleHeatRatio(self)



    def ratedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_ratedAirFlowRate(self)



    def isRatedAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_isRatedAirFlowRateAutosized(self)



    def setRatedAirFlowRate(self, ratedAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setRatedAirFlowRate(self, ratedAirFlowRate)



    def autosizeRatedAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizeRatedAirFlowRate(self)



    def coolingCapacityRatioModifierFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_coolingCapacityRatioModifierFunctionofTemperatureCurve(self)



    def setCoolingCapacityRatioModifierFunctionofTemperatureCurve(self, lcurve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setCoolingCapacityRatioModifierFunctionofTemperatureCurve(self, lcurve)



    def coolingCapacityModifierCurveFunctionofFlowFraction(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_coolingCapacityModifierCurveFunctionofFlowFraction(self)



    def setCoolingCapacityModifierCurveFunctionofFlowFraction(self, lcurve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_setCoolingCapacityModifierCurveFunctionofFlowFraction(self, lcurve)



    def autosizedRatedTotalCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizedRatedTotalCoolingCapacity(self)



    def autosizedRatedSensibleHeatRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizedRatedSensibleHeatRatio(self)



    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_autosizedRatedAirFlowRate(self)

CoilCoolingDXVariableRefrigerantFlow_swigregister = _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_swigregister

CoilCoolingDXVariableRefrigerantFlow_swigregister(CoilCoolingDXVariableRefrigerantFlow)



def CoilCoolingDXVariableRefrigerantFlow_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_iddObjectType()

CoilCoolingDXVariableRefrigerantFlow_iddObjectType = _openstudiomodelhvac.CoilCoolingDXVariableRefrigerantFlow_iddObjectType





def toCoilCoolingDXVariableRefrigerantFlow(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >":

    return _openstudiomodelhvac.toCoilCoolingDXVariableRefrigerantFlow(idfObject)

toCoilCoolingDXVariableRefrigerantFlow = _openstudiomodelhvac.toCoilCoolingDXVariableRefrigerantFlow



def getCoilCoolingDXVariableRefrigerantFlow(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >":

    return _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlow(t_model, t_handle)

getCoilCoolingDXVariableRefrigerantFlow = _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlow



def getCoilCoolingDXVariableRefrigerantFlows(t_model: 'Model') -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilCoolingDXVariableRefrigerantFlow > >":

    return _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlows(t_model)

getCoilCoolingDXVariableRefrigerantFlows = _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlows



def getCoilCoolingDXVariableRefrigerantFlowByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilCoolingDXVariableRefrigerantFlow >":

    return _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlowByName(t_model, t_name)

getCoilCoolingDXVariableRefrigerantFlowByName = _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlowByName



def getCoilCoolingDXVariableRefrigerantFlowsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilCoolingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilCoolingDXVariableRefrigerantFlow > >":

    return _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlowsByName(t_model, t_name, t_exactMatch)

getCoilCoolingDXVariableRefrigerantFlowsByName = _openstudiomodelhvac.getCoilCoolingDXVariableRefrigerantFlowsByName

class CoilCoolingDXVariableSpeedSpeedData(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingDXVariableSpeedSpeedData, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingDXVariableSpeedSpeedData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingDXVariableSpeedSpeedData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingDXVariableSpeedSpeedData

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_iddObjectType)



    def referenceUnitGrossRatedTotalCoolingCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitGrossRatedTotalCoolingCapacity(self)



    def referenceUnitGrossRatedSensibleHeatRatio(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitGrossRatedSensibleHeatRatio(self)



    def referenceUnitGrossRatedCoolingCOP(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitGrossRatedCoolingCOP(self)



    def referenceUnitRatedAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitRatedAirFlowRate(self)



    def referenceUnitRatedCondenserAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitRatedCondenserAirFlowRate(self)



    def referenceUnitRatedPadEffectivenessofEvapPrecooling(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_referenceUnitRatedPadEffectivenessofEvapPrecooling(self)



    def totalCoolingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_totalCoolingCapacityFunctionofTemperatureCurve(self)



    def totalCoolingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_totalCoolingCapacityFunctionofAirFlowFractionCurve(self)



    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_energyInputRatioFunctionofTemperatureCurve(self)



    def energyInputRatioFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_energyInputRatioFunctionofAirFlowFractionCurve(self)



    def setReferenceUnitGrossRatedTotalCoolingCapacity(self, referenceUnitGrossRatedTotalCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedTotalCoolingCapacity(self, referenceUnitGrossRatedTotalCoolingCapacity)



    def setReferenceUnitGrossRatedSensibleHeatRatio(self, referenceUnitGrossRatedSensibleHeatRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedSensibleHeatRatio(self, referenceUnitGrossRatedSensibleHeatRatio)



    def setReferenceUnitGrossRatedCoolingCOP(self, referenceUnitGrossRatedCoolingCOP: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedCoolingCOP(self, referenceUnitGrossRatedCoolingCOP)



    def setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate)



    def setReferenceUnitRatedCondenserAirFlowRate(self, referenceUnitRatedCondenserAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitRatedCondenserAirFlowRate(self, referenceUnitRatedCondenserAirFlowRate)



    def resetReferenceUnitRatedCondenserAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_resetReferenceUnitRatedCondenserAirFlowRate(self)



    def setReferenceUnitRatedPadEffectivenessofEvapPrecooling(self, referenceUnitRatedPadEffectivenessofEvapPrecooling: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setReferenceUnitRatedPadEffectivenessofEvapPrecooling(self, referenceUnitRatedPadEffectivenessofEvapPrecooling)



    def resetReferenceUnitRatedPadEffectivenessofEvapPrecooling(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_resetReferenceUnitRatedPadEffectivenessofEvapPrecooling(self)



    def setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve)



    def setTotalCoolingCapacityFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setTotalCoolingCapacityFunctionofAirFlowFractionCurve(self, curve)



    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)



    def setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve)

CoilCoolingDXVariableSpeedSpeedData_swigregister = _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_swigregister

CoilCoolingDXVariableSpeedSpeedData_swigregister(CoilCoolingDXVariableSpeedSpeedData)



def CoilCoolingDXVariableSpeedSpeedData_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_iddObjectType()

CoilCoolingDXVariableSpeedSpeedData_iddObjectType = _openstudiomodelhvac.CoilCoolingDXVariableSpeedSpeedData_iddObjectType





def toCoilCoolingDXVariableSpeedSpeedData(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >":

    return _openstudiomodelhvac.toCoilCoolingDXVariableSpeedSpeedData(idfObject)

toCoilCoolingDXVariableSpeedSpeedData = _openstudiomodelhvac.toCoilCoolingDXVariableSpeedSpeedData



def getCoilCoolingDXVariableSpeedSpeedData(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >":

    return _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedData(t_model, t_handle)

getCoilCoolingDXVariableSpeedSpeedData = _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedData



def getCoilCoolingDXVariableSpeedSpeedDatas(t_model: 'Model') -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilCoolingDXVariableSpeedSpeedData > >":

    return _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedDatas(t_model)

getCoilCoolingDXVariableSpeedSpeedDatas = _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedDatas



def getCoilCoolingDXVariableSpeedSpeedDataByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilCoolingDXVariableSpeedSpeedData >":

    return _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedDataByName(t_model, t_name)

getCoilCoolingDXVariableSpeedSpeedDataByName = _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedDataByName



def getCoilCoolingDXVariableSpeedSpeedDatasByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilCoolingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilCoolingDXVariableSpeedSpeedData > >":

    return _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedDatasByName(t_model, t_name, t_exactMatch)

getCoilCoolingDXVariableSpeedSpeedDatasByName = _openstudiomodelhvac.getCoilCoolingDXVariableSpeedSpeedDatasByName

class CoilCoolingWater(WaterToAirComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingWater, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingWater, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingWater(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWater

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilCoolingWater_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilCoolingWater_iddObjectType)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.CoilCoolingWater_availabilitySchedule(self)



    def availableSchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.CoilCoolingWater_availableSchedule(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setAvailabilitySchedule(self, schedule)



    def setAvailableSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setAvailableSchedule(self, schedule)



    def designWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_designWaterFlowRate(self)



    def setDesignWaterFlowRate(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setDesignWaterFlowRate(self, value)



    def isDesignWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_isDesignWaterFlowRateAutosized(self)



    def autosizeDesignWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignWaterFlowRate(self)



    def designAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_designAirFlowRate(self)



    def setDesignAirFlowRate(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setDesignAirFlowRate(self, value)



    def isDesignAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_isDesignAirFlowRateAutosized(self)



    def autosizeDesignAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignAirFlowRate(self)



    def designInletWaterTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_designInletWaterTemperature(self)



    def setDesignInletWaterTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setDesignInletWaterTemperature(self, value)



    def isDesignInletWaterTemperatureAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_isDesignInletWaterTemperatureAutosized(self)



    def autosizeDesignInletWaterTemperature(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignInletWaterTemperature(self)



    def designInletAirTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_designInletAirTemperature(self)



    def setDesignInletAirTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setDesignInletAirTemperature(self, value)



    def isDesignInletAirTemperatureAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_isDesignInletAirTemperatureAutosized(self)



    def autosizeDesignInletAirTemperature(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignInletAirTemperature(self)



    def designOutletAirTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_designOutletAirTemperature(self)



    def setDesignOutletAirTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setDesignOutletAirTemperature(self, value)



    def isDesignOutletAirTemperatureAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_isDesignOutletAirTemperatureAutosized(self)



    def autosizeDesignOutletAirTemperature(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignOutletAirTemperature(self)



    def designInletAirHumidityRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_designInletAirHumidityRatio(self)



    def setDesignInletAirHumidityRatio(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setDesignInletAirHumidityRatio(self, value)



    def isDesignInletAirHumidityRatioAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_isDesignInletAirHumidityRatioAutosized(self)



    def autosizeDesignInletAirHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignInletAirHumidityRatio(self)



    def designOutletAirHumidityRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_designOutletAirHumidityRatio(self)



    def setDesignOutletAirHumidityRatio(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setDesignOutletAirHumidityRatio(self, value)



    def isDesignOutletAirHumidityRatioAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_isDesignOutletAirHumidityRatioAutosized(self)



    def autosizeDesignOutletAirHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWater_autosizeDesignOutletAirHumidityRatio(self)



    def typeOfAnalysis(self) -> "std::string":

        return _openstudiomodelhvac.CoilCoolingWater_typeOfAnalysis(self)



    def setTypeOfAnalysis(self, value: 'std::string') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setTypeOfAnalysis(self, value)



    def heatExchangerConfiguration(self) -> "std::string":

        return _openstudiomodelhvac.CoilCoolingWater_heatExchangerConfiguration(self)



    def setHeatExchangerConfiguration(self, value: 'std::string') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWater_setHeatExchangerConfiguration(self, value)



    def controllerWaterCoil(self) -> "boost::optional< openstudio::model::ControllerWaterCoil >":

        return _openstudiomodelhvac.CoilCoolingWater_controllerWaterCoil(self)



    def getAirflowNetworkEquivalentDuct(self, length: 'double', diameter: 'double') -> "openstudio::model::AirflowNetworkEquivalentDuct":

        return _openstudiomodelhvac.CoilCoolingWater_getAirflowNetworkEquivalentDuct(self, length, diameter)



    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":

        return _openstudiomodelhvac.CoilCoolingWater_airflowNetworkEquivalentDuct(self)



    def autosizedDesignWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignWaterFlowRate(self)



    def autosizedDesignAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignAirFlowRate(self)



    def autosizedDesignInletWaterTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignInletWaterTemperature(self)



    def autosizedDesignInletAirTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignInletAirTemperature(self)



    def autosizedDesignOutletAirTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignOutletAirTemperature(self)



    def autosizedDesignInletAirHumidityRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignInletAirHumidityRatio(self)



    def autosizedDesignOutletAirHumidityRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWater_autosizedDesignOutletAirHumidityRatio(self)

CoilCoolingWater_swigregister = _openstudiomodelhvac.CoilCoolingWater_swigregister

CoilCoolingWater_swigregister(CoilCoolingWater)



def CoilCoolingWater_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilCoolingWater_iddObjectType()

CoilCoolingWater_iddObjectType = _openstudiomodelhvac.CoilCoolingWater_iddObjectType





def toCoilCoolingWater(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilCoolingWater >":

    return _openstudiomodelhvac.toCoilCoolingWater(idfObject)

toCoilCoolingWater = _openstudiomodelhvac.toCoilCoolingWater



def getCoilCoolingWater(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilCoolingWater >":

    return _openstudiomodelhvac.getCoilCoolingWater(t_model, t_handle)

getCoilCoolingWater = _openstudiomodelhvac.getCoilCoolingWater



def getCoilCoolingWaters(t_model: 'Model') -> "std::vector< openstudio::model::CoilCoolingWater,std::allocator< openstudio::model::CoilCoolingWater > >":

    return _openstudiomodelhvac.getCoilCoolingWaters(t_model)

getCoilCoolingWaters = _openstudiomodelhvac.getCoilCoolingWaters



def getCoilCoolingWaterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilCoolingWater >":

    return _openstudiomodelhvac.getCoilCoolingWaterByName(t_model, t_name)

getCoilCoolingWaterByName = _openstudiomodelhvac.getCoilCoolingWaterByName



def getCoilCoolingWatersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilCoolingWater,std::allocator< openstudio::model::CoilCoolingWater > >":

    return _openstudiomodelhvac.getCoilCoolingWatersByName(t_model, t_name, t_exactMatch)

getCoilCoolingWatersByName = _openstudiomodelhvac.getCoilCoolingWatersByName

class CoilCoolingWaterToAirHeatPumpEquationFit(WaterToAirComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingWaterToAirHeatPumpEquationFit, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingWaterToAirHeatPumpEquationFit, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpEquationFit(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpEquationFit

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_iddObjectType)



    def ratedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedAirFlowRate(self)



    def isRatedAirFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedAirFlowRateDefaulted(self)



    def isRatedAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedAirFlowRateAutosized(self)



    def ratedWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedWaterFlowRate(self)



    def isRatedWaterFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedWaterFlowRateDefaulted(self)



    def isRatedWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedWaterFlowRateAutosized(self)



    def ratedTotalCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedTotalCoolingCapacity(self)



    def isRatedTotalCoolingCapacityDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedTotalCoolingCapacityDefaulted(self)



    def isRatedTotalCoolingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedTotalCoolingCapacityAutosized(self)



    def ratedSensibleCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedSensibleCoolingCapacity(self)



    def isRatedSensibleCoolingCapacityDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedSensibleCoolingCapacityDefaulted(self)



    def isRatedSensibleCoolingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedSensibleCoolingCapacityAutosized(self)



    def ratedCoolingCoefficientofPerformance(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratedCoolingCoefficientofPerformance(self)



    def isRatedCoolingCoefficientofPerformanceDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatedCoolingCoefficientofPerformanceDefaulted(self)



    def totalCoolingCapacityCoefficient1(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient1(self)



    def totalCoolingCapacityCoefficient2(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient2(self)



    def totalCoolingCapacityCoefficient3(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient3(self)



    def totalCoolingCapacityCoefficient4(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient4(self)



    def totalCoolingCapacityCoefficient5(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_totalCoolingCapacityCoefficient5(self)



    def sensibleCoolingCapacityCoefficient1(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient1(self)



    def sensibleCoolingCapacityCoefficient2(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient2(self)



    def sensibleCoolingCapacityCoefficient3(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient3(self)



    def sensibleCoolingCapacityCoefficient4(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient4(self)



    def sensibleCoolingCapacityCoefficient5(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient5(self)



    def sensibleCoolingCapacityCoefficient6(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_sensibleCoolingCapacityCoefficient6(self)



    def coolingPowerConsumptionCoefficient1(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient1(self)



    def coolingPowerConsumptionCoefficient2(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient2(self)



    def coolingPowerConsumptionCoefficient3(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient3(self)



    def coolingPowerConsumptionCoefficient4(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient4(self)



    def coolingPowerConsumptionCoefficient5(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_coolingPowerConsumptionCoefficient5(self)



    def nominalTimeforCondensateRemovaltoBegin(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_nominalTimeforCondensateRemovaltoBegin(self)



    def isNominalTimeforCondensateRemovaltoBeginDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isNominalTimeforCondensateRemovaltoBeginDefaulted(self)



    def ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)



    def isRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacityDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_isRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacityDefaulted(self)



    def setRatedAirFlowRate(self, ratedAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedAirFlowRate(self, ratedAirFlowRate)



    def resetRatedAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatedAirFlowRate(self)



    def autosizeRatedAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizeRatedAirFlowRate(self)



    def setRatedWaterFlowRate(self, ratedWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedWaterFlowRate(self, ratedWaterFlowRate)



    def resetRatedWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatedWaterFlowRate(self)



    def autosizeRatedWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizeRatedWaterFlowRate(self)



    def setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedTotalCoolingCapacity(self, ratedTotalCoolingCapacity)



    def resetRatedTotalCoolingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatedTotalCoolingCapacity(self)



    def autosizeRatedTotalCoolingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizeRatedTotalCoolingCapacity(self)



    def setRatedSensibleCoolingCapacity(self, ratedSensibleCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedSensibleCoolingCapacity(self, ratedSensibleCoolingCapacity)



    def resetRatedSensibleCoolingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatedSensibleCoolingCapacity(self)



    def autosizeRatedSensibleCoolingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizeRatedSensibleCoolingCapacity(self)



    def setRatedCoolingCoefficientofPerformance(self, ratedCoolingCoefficientofPerformance: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatedCoolingCoefficientofPerformance(self, ratedCoolingCoefficientofPerformance)



    def setTotalCoolingCapacityCoefficient1(self, totalCoolingCapacityCoefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient1(self, totalCoolingCapacityCoefficient1)



    def setTotalCoolingCapacityCoefficient2(self, totalCoolingCapacityCoefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient2(self, totalCoolingCapacityCoefficient2)



    def setTotalCoolingCapacityCoefficient3(self, totalCoolingCapacityCoefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient3(self, totalCoolingCapacityCoefficient3)



    def setTotalCoolingCapacityCoefficient4(self, totalCoolingCapacityCoefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient4(self, totalCoolingCapacityCoefficient4)



    def setTotalCoolingCapacityCoefficient5(self, totalCoolingCapacityCoefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setTotalCoolingCapacityCoefficient5(self, totalCoolingCapacityCoefficient5)



    def setSensibleCoolingCapacityCoefficient1(self, sensibleCoolingCapacityCoefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient1(self, sensibleCoolingCapacityCoefficient1)



    def setSensibleCoolingCapacityCoefficient2(self, sensibleCoolingCapacityCoefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient2(self, sensibleCoolingCapacityCoefficient2)



    def setSensibleCoolingCapacityCoefficient3(self, sensibleCoolingCapacityCoefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient3(self, sensibleCoolingCapacityCoefficient3)



    def setSensibleCoolingCapacityCoefficient4(self, sensibleCoolingCapacityCoefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient4(self, sensibleCoolingCapacityCoefficient4)



    def setSensibleCoolingCapacityCoefficient5(self, sensibleCoolingCapacityCoefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient5(self, sensibleCoolingCapacityCoefficient5)



    def setSensibleCoolingCapacityCoefficient6(self, sensibleCoolingCapacityCoefficient6: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setSensibleCoolingCapacityCoefficient6(self, sensibleCoolingCapacityCoefficient6)



    def setCoolingPowerConsumptionCoefficient1(self, coolingPowerConsumptionCoefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient1(self, coolingPowerConsumptionCoefficient1)



    def setCoolingPowerConsumptionCoefficient2(self, coolingPowerConsumptionCoefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient2(self, coolingPowerConsumptionCoefficient2)



    def setCoolingPowerConsumptionCoefficient3(self, coolingPowerConsumptionCoefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient3(self, coolingPowerConsumptionCoefficient3)



    def setCoolingPowerConsumptionCoefficient4(self, coolingPowerConsumptionCoefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient4(self, coolingPowerConsumptionCoefficient4)



    def setCoolingPowerConsumptionCoefficient5(self, coolingPowerConsumptionCoefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setCoolingPowerConsumptionCoefficient5(self, coolingPowerConsumptionCoefficient5)



    def setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin)



    def resetNominalTimeforCondensateRemovaltoBegin(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetNominalTimeforCondensateRemovaltoBegin(self)



    def setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity)



    def resetRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_resetRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)



    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizedRatedAirFlowRate(self)



    def autosizedRatedWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizedRatedWaterFlowRate(self)



    def autosizedRatedTotalCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizedRatedTotalCoolingCapacity(self)



    def autosizedRatedSensibleCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_autosizedRatedSensibleCoolingCapacity(self)

CoilCoolingWaterToAirHeatPumpEquationFit_swigregister = _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_swigregister

CoilCoolingWaterToAirHeatPumpEquationFit_swigregister(CoilCoolingWaterToAirHeatPumpEquationFit)



def CoilCoolingWaterToAirHeatPumpEquationFit_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_iddObjectType()

CoilCoolingWaterToAirHeatPumpEquationFit_iddObjectType = _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpEquationFit_iddObjectType





def toCoilCoolingWaterToAirHeatPumpEquationFit(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >":

    return _openstudiomodelhvac.toCoilCoolingWaterToAirHeatPumpEquationFit(idfObject)

toCoilCoolingWaterToAirHeatPumpEquationFit = _openstudiomodelhvac.toCoilCoolingWaterToAirHeatPumpEquationFit



def getCoilCoolingWaterToAirHeatPumpEquationFit(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFit(t_model, t_handle)

getCoilCoolingWaterToAirHeatPumpEquationFit = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFit



def getCoilCoolingWaterToAirHeatPumpEquationFits(t_model: 'Model') -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit > >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFits(t_model)

getCoilCoolingWaterToAirHeatPumpEquationFits = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFits



def getCoilCoolingWaterToAirHeatPumpEquationFitByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFitByName(t_model, t_name)

getCoilCoolingWaterToAirHeatPumpEquationFitByName = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFitByName



def getCoilCoolingWaterToAirHeatPumpEquationFitsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpEquationFit > >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFitsByName(t_model, t_name, t_exactMatch)

getCoilCoolingWaterToAirHeatPumpEquationFitsByName = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpEquationFitsByName

class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(WaterToAirComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType)



    def nominalSpeedLevel(self) -> "int":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_nominalSpeedLevel(self)



    def grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self)



    def isGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevelAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_isGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevelAutosized(self)



    def ratedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_ratedAirFlowRateAtSelectedNominalSpeedLevel(self)



    def isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self)



    def ratedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_ratedWaterFlowRateAtSelectedNominalSpeedLevel(self)



    def isRatedWaterFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedWaterFlowRateAtSelectedNominalSpeedLevelAutosized(self)



    def nominalTimeforCondensatetoBeginLeavingtheCoil(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_nominalTimeforCondensatetoBeginLeavingtheCoil(self)



    def initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self)



    def useHotGasReheat(self) -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_useHotGasReheat(self)



    def energyPartLoadFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_energyPartLoadFractionCurve(self)



    def setNominalSpeedLevel(self, nominalSpeedLevel: 'int') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setNominalSpeedLevel(self, nominalSpeedLevel)



    def setGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self, grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self, grossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel)



    def autosizeGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self)



    def setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel)



    def autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self)



    def setRatedWaterFlowRateAtSelectedNominalSpeedLevel(self, ratedWaterFlowRateAtSelectedNominalSpeedLevel: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedWaterFlowRateAtSelectedNominalSpeedLevel(self, ratedWaterFlowRateAtSelectedNominalSpeedLevel)



    def autosizeRatedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedWaterFlowRateAtSelectedNominalSpeedLevel(self)



    def setNominalTimeforCondensatetoBeginLeavingtheCoil(self, nominalTimeforCondensatetoBeginLeavingtheCoil: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setNominalTimeforCondensatetoBeginLeavingtheCoil(self, nominalTimeforCondensatetoBeginLeavingtheCoil)



    def setInitialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self, initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setInitialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity(self, initialMoistureEvaporationRateDividedbySteadyStateACLatentCapacity)



    def setUseHotGasReheat(self, useHotGasReheat: 'bool') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setUseHotGasReheat(self, useHotGasReheat)



    def setEnergyPartLoadFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_setEnergyPartLoadFractionCurve(self, curve)



    def speeds(self) -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_speeds(self)



    def addSpeed(self, speed: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_addSpeed(self, speed)



    def removeSpeed(self, speed: 'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_removeSpeed(self, speed)



    def removeAllSpeeds(self) -> "void":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_removeAllSpeeds(self)



    def autosizedGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedGrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel(self)



    def autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self)



    def autosizedRatedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedWaterFlowRateAtSelectedNominalSpeedLevel(self)

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister = _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister(CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit)



def CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType()

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType = _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType





def toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >":

    return _openstudiomodelhvac.toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(idfObject)

toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = _openstudiomodelhvac.toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit



def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(t_model, t_handle)

getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit



def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits(t_model: 'Model') -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit > >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits(t_model)

getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFits



def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName(t_model, t_name)

getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitByName



def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit > >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName(t_model, t_name, t_exactMatch)

getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitsByName

class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType)



    def referenceUnitGrossRatedTotalCoolingCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedTotalCoolingCapacity(self)



    def referenceUnitGrossRatedSensibleHeatRatio(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedSensibleHeatRatio(self)



    def referenceUnitGrossRatedCoolingCOP(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedCoolingCOP(self)



    def referenceUnitRatedAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitRatedAirFlowRate(self)



    def referenceUnitRatedWaterFlowRate(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitRatedWaterFlowRate(self)



    def totalCoolingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_totalCoolingCapacityFunctionofTemperatureCurve(self)



    def totalCoolingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_totalCoolingCapacityFunctionofAirFlowFractionCurve(self)



    def totalCoolingCapacityFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_totalCoolingCapacityFunctionofWaterFlowFractionCurve(self)



    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofTemperatureCurve(self)



    def energyInputRatioFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofAirFlowFractionCurve(self)



    def energyInputRatioFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofWaterFlowFractionCurve(self)



    def referenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self) -> "double":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self)



    def wasteHeatFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_wasteHeatFunctionofTemperatureCurve(self)



    def setReferenceUnitGrossRatedTotalCoolingCapacity(self, referenceUnitGrossRatedTotalCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedTotalCoolingCapacity(self, referenceUnitGrossRatedTotalCoolingCapacity)



    def setReferenceUnitGrossRatedSensibleHeatRatio(self, referenceUnitGrossRatedSensibleHeatRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedSensibleHeatRatio(self, referenceUnitGrossRatedSensibleHeatRatio)



    def setReferenceUnitGrossRatedCoolingCOP(self, referenceUnitGrossRatedCoolingCOP: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedCoolingCOP(self, referenceUnitGrossRatedCoolingCOP)



    def setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate)



    def setReferenceUnitRatedWaterFlowRate(self, referenceUnitRatedWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitRatedWaterFlowRate(self, referenceUnitRatedWaterFlowRate)



    def setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve)



    def setTotalCoolingCapacityFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setTotalCoolingCapacityFunctionofAirFlowFractionCurve(self, curve)



    def setTotalCoolingCapacityFunctionofWaterFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setTotalCoolingCapacityFunctionofWaterFlowFractionCurve(self, curve)



    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)



    def setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve)



    def setEnergyInputRatioFunctionofWaterFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofWaterFlowFractionCurve(self, curve)



    def setReferenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self, referenceUnitWasteHeatFractionofInputPowerAtRatedConditions: 'double') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self, referenceUnitWasteHeatFractionofInputPowerAtRatedConditions)



    def setWasteHeatFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setWasteHeatFunctionofTemperatureCurve(self, curve)

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister = _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister(CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData)



def CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType()

CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType = _openstudiomodelhvac.CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType





def toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":

    return _openstudiomodelhvac.toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(idfObject)

toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _openstudiomodelhvac.toCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData



def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(t_model, t_handle)

getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData



def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(t_model: 'Model') -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(t_model)

getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas



def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(t_model, t_name)

getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName



def getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":

    return _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(t_model, t_name, t_exactMatch)

getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName = _openstudiomodelhvac.getCoilCoolingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName

class CoilHeatingDXMultiSpeedStageData(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingDXMultiSpeedStageData, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingDXMultiSpeedStageData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingDXMultiSpeedStageData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXMultiSpeedStageData

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_iddObjectType)



    def grossRatedHeatingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_grossRatedHeatingCapacity(self)



    def isGrossRatedHeatingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_isGrossRatedHeatingCapacityAutosized(self)



    def grossRatedHeatingCOP(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_grossRatedHeatingCOP(self)



    def ratedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_ratedAirFlowRate(self)



    def isRatedAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_isRatedAirFlowRateAutosized(self)



    def ratedSupplyAirFanPowerPerVolumeFlowRate(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_ratedSupplyAirFanPowerPerVolumeFlowRate(self)



    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_heatingCapacityFunctionofTemperatureCurve(self)



    def heatingCapacityFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_heatingCapacityFunctionofFlowFractionCurve(self)



    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_energyInputRatioFunctionofTemperatureCurve(self)



    def energyInputRatioFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_energyInputRatioFunctionofFlowFractionCurve(self)



    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_partLoadFractionCorrelationCurve(self)



    def ratedWasteHeatFractionofPowerInput(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_ratedWasteHeatFractionofPowerInput(self)



    def wasteHeatFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_wasteHeatFunctionofTemperatureCurve(self)



    def setGrossRatedHeatingCapacity(self, grossRatedHeatingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setGrossRatedHeatingCapacity(self, grossRatedHeatingCapacity)



    def autosizeGrossRatedHeatingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosizeGrossRatedHeatingCapacity(self)



    def setGrossRatedHeatingCOP(self, grossRatedHeatingCOP: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setGrossRatedHeatingCOP(self, grossRatedHeatingCOP)



    def setRatedAirFlowRate(self, ratedAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setRatedAirFlowRate(self, ratedAirFlowRate)



    def autosizeRatedAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosizeRatedAirFlowRate(self)



    def setRatedSupplyAirFanPowerPerVolumeFlowRate(self, ratedSupplyAirFanPowerPerVolumeFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setRatedSupplyAirFanPowerPerVolumeFlowRate(self, ratedSupplyAirFanPowerPerVolumeFlowRate)



    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setHeatingCapacityFunctionofTemperatureCurve(self, curve)



    def setHeatingCapacityFunctionofFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setHeatingCapacityFunctionofFlowFractionCurve(self, curve)



    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)



    def setEnergyInputRatioFunctionofFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setEnergyInputRatioFunctionofFlowFractionCurve(self, curve)



    def setPartLoadFractionCorrelationCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setPartLoadFractionCorrelationCurve(self, curve)



    def setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput)



    def setWasteHeatFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_setWasteHeatFunctionofTemperatureCurve(self, curve)



    def autosizedGrossRatedHeatingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosizedGrossRatedHeatingCapacity(self)



    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosizedRatedAirFlowRate(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_applySizingValues(self)

CoilHeatingDXMultiSpeedStageData_swigregister = _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_swigregister

CoilHeatingDXMultiSpeedStageData_swigregister(CoilHeatingDXMultiSpeedStageData)



def CoilHeatingDXMultiSpeedStageData_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_iddObjectType()

CoilHeatingDXMultiSpeedStageData_iddObjectType = _openstudiomodelhvac.CoilHeatingDXMultiSpeedStageData_iddObjectType





def toCoilHeatingDXMultiSpeedStageData(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilHeatingDXMultiSpeedStageData >":

    return _openstudiomodelhvac.toCoilHeatingDXMultiSpeedStageData(idfObject)

toCoilHeatingDXMultiSpeedStageData = _openstudiomodelhvac.toCoilHeatingDXMultiSpeedStageData



def getCoilHeatingDXMultiSpeedStageData(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilHeatingDXMultiSpeedStageData >":

    return _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageData(t_model, t_handle)

getCoilHeatingDXMultiSpeedStageData = _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageData



def getCoilHeatingDXMultiSpeedStageDatas(t_model: 'Model') -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilHeatingDXMultiSpeedStageData > >":

    return _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageDatas(t_model)

getCoilHeatingDXMultiSpeedStageDatas = _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageDatas



def getCoilHeatingDXMultiSpeedStageDataByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilHeatingDXMultiSpeedStageData >":

    return _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageDataByName(t_model, t_name)

getCoilHeatingDXMultiSpeedStageDataByName = _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageDataByName



def getCoilHeatingDXMultiSpeedStageDatasByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilHeatingDXMultiSpeedStageData,std::allocator< openstudio::model::CoilHeatingDXMultiSpeedStageData > >":

    return _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageDatasByName(t_model, t_name, t_exactMatch)

getCoilHeatingDXMultiSpeedStageDatasByName = _openstudiomodelhvac.getCoilHeatingDXMultiSpeedStageDatasByName

class CoilHeatingDXVariableRefrigerantFlow(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingDXVariableRefrigerantFlow, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingDXVariableRefrigerantFlow, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CoilHeatingDXVariableRefrigerantFlow(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXVariableRefrigerantFlow

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_iddObjectType)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_availabilitySchedule(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setAvailabilitySchedule(self, schedule)



    def ratedTotalHeatingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_ratedTotalHeatingCapacity(self)



    def isRatedTotalHeatingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_isRatedTotalHeatingCapacityAutosized(self)



    def setRatedTotalHeatingCapacity(self, ratedTotalHeatingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setRatedTotalHeatingCapacity(self, ratedTotalHeatingCapacity)



    def autosizeRatedTotalHeatingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_autosizeRatedTotalHeatingCapacity(self)



    def ratedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_ratedAirFlowRate(self)



    def isRatedAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_isRatedAirFlowRateAutosized(self)



    def setRatedAirFlowRate(self, ratedAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setRatedAirFlowRate(self, ratedAirFlowRate)



    def autosizeRatedAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_autosizeRatedAirFlowRate(self)



    def heatingCapacityRatioModifierFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_heatingCapacityRatioModifierFunctionofTemperatureCurve(self)



    def setHeatingCapacityRatioModifierFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setHeatingCapacityRatioModifierFunctionofTemperatureCurve(self, curve)



    def heatingCapacityModifierFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_heatingCapacityModifierFunctionofFlowFractionCurve(self)



    def setHeatingCapacityModifierFunctionofFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_setHeatingCapacityModifierFunctionofFlowFractionCurve(self, curve)



    def autosizedRatedTotalHeatingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_autosizedRatedTotalHeatingCapacity(self)



    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_autosizedRatedAirFlowRate(self)

CoilHeatingDXVariableRefrigerantFlow_swigregister = _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_swigregister

CoilHeatingDXVariableRefrigerantFlow_swigregister(CoilHeatingDXVariableRefrigerantFlow)



def CoilHeatingDXVariableRefrigerantFlow_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_iddObjectType()

CoilHeatingDXVariableRefrigerantFlow_iddObjectType = _openstudiomodelhvac.CoilHeatingDXVariableRefrigerantFlow_iddObjectType





def toCoilHeatingDXVariableRefrigerantFlow(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >":

    return _openstudiomodelhvac.toCoilHeatingDXVariableRefrigerantFlow(idfObject)

toCoilHeatingDXVariableRefrigerantFlow = _openstudiomodelhvac.toCoilHeatingDXVariableRefrigerantFlow



def getCoilHeatingDXVariableRefrigerantFlow(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >":

    return _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlow(t_model, t_handle)

getCoilHeatingDXVariableRefrigerantFlow = _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlow



def getCoilHeatingDXVariableRefrigerantFlows(t_model: 'Model') -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilHeatingDXVariableRefrigerantFlow > >":

    return _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlows(t_model)

getCoilHeatingDXVariableRefrigerantFlows = _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlows



def getCoilHeatingDXVariableRefrigerantFlowByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilHeatingDXVariableRefrigerantFlow >":

    return _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlowByName(t_model, t_name)

getCoilHeatingDXVariableRefrigerantFlowByName = _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlowByName



def getCoilHeatingDXVariableRefrigerantFlowsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilHeatingDXVariableRefrigerantFlow,std::allocator< openstudio::model::CoilHeatingDXVariableRefrigerantFlow > >":

    return _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlowsByName(t_model, t_name, t_exactMatch)

getCoilHeatingDXVariableRefrigerantFlowsByName = _openstudiomodelhvac.getCoilHeatingDXVariableRefrigerantFlowsByName

class CoilHeatingGasMultiStageStageData(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingGasMultiStageStageData, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingGasMultiStageStageData, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CoilHeatingGasMultiStageStageData(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingGasMultiStageStageData

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilHeatingGasMultiStageStageData_iddObjectType)



    def gasBurnerEfficiency(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_gasBurnerEfficiency(self)



    def nominalCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_nominalCapacity(self)



    def isNominalCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_isNominalCapacityAutosized(self)



    def parasiticElectricLoad(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_parasiticElectricLoad(self)



    def setGasBurnerEfficiency(self, GasBurnerEfficiency: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_setGasBurnerEfficiency(self, GasBurnerEfficiency)



    def setNominalCapacity(self, StageNominalCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_setNominalCapacity(self, StageNominalCapacity)



    def autosizeNominalCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_autosizeNominalCapacity(self)



    def setParasiticElectricLoad(self, StageParasiticElectricLoad: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_setParasiticElectricLoad(self, StageParasiticElectricLoad)



    def autosizedNominalCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_autosizedNominalCapacity(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_applySizingValues(self)

CoilHeatingGasMultiStageStageData_swigregister = _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_swigregister

CoilHeatingGasMultiStageStageData_swigregister(CoilHeatingGasMultiStageStageData)



def CoilHeatingGasMultiStageStageData_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_iddObjectType()

CoilHeatingGasMultiStageStageData_iddObjectType = _openstudiomodelhvac.CoilHeatingGasMultiStageStageData_iddObjectType





def toCoilHeatingGasMultiStageStageData(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilHeatingGasMultiStageStageData >":

    return _openstudiomodelhvac.toCoilHeatingGasMultiStageStageData(idfObject)

toCoilHeatingGasMultiStageStageData = _openstudiomodelhvac.toCoilHeatingGasMultiStageStageData



def getCoilHeatingGasMultiStageStageData(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilHeatingGasMultiStageStageData >":

    return _openstudiomodelhvac.getCoilHeatingGasMultiStageStageData(t_model, t_handle)

getCoilHeatingGasMultiStageStageData = _openstudiomodelhvac.getCoilHeatingGasMultiStageStageData



def getCoilHeatingGasMultiStageStageDatas(t_model: 'Model') -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData,std::allocator< openstudio::model::CoilHeatingGasMultiStageStageData > >":

    return _openstudiomodelhvac.getCoilHeatingGasMultiStageStageDatas(t_model)

getCoilHeatingGasMultiStageStageDatas = _openstudiomodelhvac.getCoilHeatingGasMultiStageStageDatas



def getCoilHeatingGasMultiStageStageDataByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilHeatingGasMultiStageStageData >":

    return _openstudiomodelhvac.getCoilHeatingGasMultiStageStageDataByName(t_model, t_name)

getCoilHeatingGasMultiStageStageDataByName = _openstudiomodelhvac.getCoilHeatingGasMultiStageStageDataByName



def getCoilHeatingGasMultiStageStageDatasByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilHeatingGasMultiStageStageData,std::allocator< openstudio::model::CoilHeatingGasMultiStageStageData > >":

    return _openstudiomodelhvac.getCoilHeatingGasMultiStageStageDatasByName(t_model, t_name, t_exactMatch)

getCoilHeatingGasMultiStageStageDatasByName = _openstudiomodelhvac.getCoilHeatingGasMultiStageStageDatasByName

class CoilHeatingDXVariableSpeedSpeedData(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingDXVariableSpeedSpeedData, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingDXVariableSpeedSpeedData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingDXVariableSpeedSpeedData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingDXVariableSpeedSpeedData

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_iddObjectType)



    def referenceUnitGrossRatedHeatingCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_referenceUnitGrossRatedHeatingCapacity(self)



    def referenceUnitGrossRatedHeatingCOP(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_referenceUnitGrossRatedHeatingCOP(self)



    def referenceUnitRatedAirFlowRate(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_referenceUnitRatedAirFlowRate(self)



    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_heatingCapacityFunctionofTemperatureCurve(self)



    def totalHeatingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_totalHeatingCapacityFunctionofAirFlowFractionCurve(self)



    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_energyInputRatioFunctionofTemperatureCurve(self)



    def energyInputRatioFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_energyInputRatioFunctionofAirFlowFractionCurve(self)



    def setReferenceUnitGrossRatedHeatingCapacity(self, referenceUnitGrossRatedHeatingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedHeatingCapacity(self, referenceUnitGrossRatedHeatingCapacity)



    def setReferenceUnitGrossRatedHeatingCOP(self, referenceUnitGrossRatedHeatingCOP: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setReferenceUnitGrossRatedHeatingCOP(self, referenceUnitGrossRatedHeatingCOP)



    def setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setReferenceUnitRatedAirFlowRate(self, referenceUnitRatedAirFlowRate)



    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setHeatingCapacityFunctionofTemperatureCurve(self, curve)



    def setTotalHeatingCapacityFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setTotalHeatingCapacityFunctionofAirFlowFractionCurve(self, curve)



    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)



    def setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve)

CoilHeatingDXVariableSpeedSpeedData_swigregister = _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_swigregister

CoilHeatingDXVariableSpeedSpeedData_swigregister(CoilHeatingDXVariableSpeedSpeedData)



def CoilHeatingDXVariableSpeedSpeedData_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_iddObjectType()

CoilHeatingDXVariableSpeedSpeedData_iddObjectType = _openstudiomodelhvac.CoilHeatingDXVariableSpeedSpeedData_iddObjectType





def toCoilHeatingDXVariableSpeedSpeedData(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >":

    return _openstudiomodelhvac.toCoilHeatingDXVariableSpeedSpeedData(idfObject)

toCoilHeatingDXVariableSpeedSpeedData = _openstudiomodelhvac.toCoilHeatingDXVariableSpeedSpeedData



def getCoilHeatingDXVariableSpeedSpeedData(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >":

    return _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedData(t_model, t_handle)

getCoilHeatingDXVariableSpeedSpeedData = _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedData



def getCoilHeatingDXVariableSpeedSpeedDatas(t_model: 'Model') -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilHeatingDXVariableSpeedSpeedData > >":

    return _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedDatas(t_model)

getCoilHeatingDXVariableSpeedSpeedDatas = _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedDatas



def getCoilHeatingDXVariableSpeedSpeedDataByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilHeatingDXVariableSpeedSpeedData >":

    return _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedDataByName(t_model, t_name)

getCoilHeatingDXVariableSpeedSpeedDataByName = _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedDataByName



def getCoilHeatingDXVariableSpeedSpeedDatasByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilHeatingDXVariableSpeedSpeedData,std::allocator< openstudio::model::CoilHeatingDXVariableSpeedSpeedData > >":

    return _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedDatasByName(t_model, t_name, t_exactMatch)

getCoilHeatingDXVariableSpeedSpeedDatasByName = _openstudiomodelhvac.getCoilHeatingDXVariableSpeedSpeedDatasByName

class CoilHeatingWater(WaterToAirComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingWater, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingWater, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingWater(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWater

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilHeatingWater_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilHeatingWater_iddObjectType)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.CoilHeatingWater_availabilitySchedule(self)



    def availableSchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.CoilHeatingWater_availableSchedule(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setAvailabilitySchedule(self, schedule)



    def setAvailableSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setAvailableSchedule(self, schedule)



    def uFactorTimesAreaValue(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWater_uFactorTimesAreaValue(self)



    def setUFactorTimesAreaValue(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setUFactorTimesAreaValue(self, value)



    def isUFactorTimesAreaValueAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_isUFactorTimesAreaValueAutosized(self)



    def autosizeUFactorTimesAreaValue(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWater_autosizeUFactorTimesAreaValue(self)



    def maximumWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWater_maximumWaterFlowRate(self)



    def setMaximumWaterFlowRate(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setMaximumWaterFlowRate(self, value)



    def isMaximumWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_isMaximumWaterFlowRateAutosized(self)



    def autosizeMaximumWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWater_autosizeMaximumWaterFlowRate(self)



    def performanceInputMethod(self) -> "std::string":

        return _openstudiomodelhvac.CoilHeatingWater_performanceInputMethod(self)



    def setPerformanceInputMethod(self, value: 'std::string') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setPerformanceInputMethod(self, value)



    def ratedCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWater_ratedCapacity(self)



    def setRatedCapacity(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setRatedCapacity(self, value)



    def isRatedCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_isRatedCapacityAutosized(self)



    def autosizeRatedCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWater_autosizeRatedCapacity(self)



    def ratedInletWaterTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWater_ratedInletWaterTemperature(self)



    def setRatedInletWaterTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setRatedInletWaterTemperature(self, value)



    def ratedInletAirTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWater_ratedInletAirTemperature(self)



    def setRatedInletAirTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setRatedInletAirTemperature(self, value)



    def ratedOutletWaterTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWater_ratedOutletWaterTemperature(self)



    def setRatedOutletWaterTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setRatedOutletWaterTemperature(self, value)



    def ratedOutletAirTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWater_ratedOutletAirTemperature(self)



    def setRatedOutletAirTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setRatedOutletAirTemperature(self, value)



    def ratedRatioForAirAndWaterConvection(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWater_ratedRatioForAirAndWaterConvection(self)



    def setRatedRatioForAirAndWaterConvection(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWater_setRatedRatioForAirAndWaterConvection(self, value)



    def controllerWaterCoil(self) -> "boost::optional< openstudio::model::ControllerWaterCoil >":

        return _openstudiomodelhvac.CoilHeatingWater_controllerWaterCoil(self)



    def autosizedUFactorTimesAreaValue(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWater_autosizedUFactorTimesAreaValue(self)



    def autosizedMaximumWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWater_autosizedMaximumWaterFlowRate(self)



    def autosizedRatedCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWater_autosizedRatedCapacity(self)



    def getAirflowNetworkEquivalentDuct(self, length: 'double', diameter: 'double') -> "openstudio::model::AirflowNetworkEquivalentDuct":

        return _openstudiomodelhvac.CoilHeatingWater_getAirflowNetworkEquivalentDuct(self, length, diameter)



    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":

        return _openstudiomodelhvac.CoilHeatingWater_airflowNetworkEquivalentDuct(self)

CoilHeatingWater_swigregister = _openstudiomodelhvac.CoilHeatingWater_swigregister

CoilHeatingWater_swigregister(CoilHeatingWater)



def CoilHeatingWater_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilHeatingWater_iddObjectType()

CoilHeatingWater_iddObjectType = _openstudiomodelhvac.CoilHeatingWater_iddObjectType





def toCoilHeatingWater(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilHeatingWater >":

    return _openstudiomodelhvac.toCoilHeatingWater(idfObject)

toCoilHeatingWater = _openstudiomodelhvac.toCoilHeatingWater



def getCoilHeatingWater(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilHeatingWater >":

    return _openstudiomodelhvac.getCoilHeatingWater(t_model, t_handle)

getCoilHeatingWater = _openstudiomodelhvac.getCoilHeatingWater



def getCoilHeatingWaters(t_model: 'Model') -> "std::vector< openstudio::model::CoilHeatingWater,std::allocator< openstudio::model::CoilHeatingWater > >":

    return _openstudiomodelhvac.getCoilHeatingWaters(t_model)

getCoilHeatingWaters = _openstudiomodelhvac.getCoilHeatingWaters



def getCoilHeatingWaterByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilHeatingWater >":

    return _openstudiomodelhvac.getCoilHeatingWaterByName(t_model, t_name)

getCoilHeatingWaterByName = _openstudiomodelhvac.getCoilHeatingWaterByName



def getCoilHeatingWatersByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilHeatingWater,std::allocator< openstudio::model::CoilHeatingWater > >":

    return _openstudiomodelhvac.getCoilHeatingWatersByName(t_model, t_name, t_exactMatch)

getCoilHeatingWatersByName = _openstudiomodelhvac.getCoilHeatingWatersByName

class CoilHeatingWaterToAirHeatPumpEquationFit(WaterToAirComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingWaterToAirHeatPumpEquationFit, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingWaterToAirHeatPumpEquationFit, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpEquationFit(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpEquationFit

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_iddObjectType)



    def ratedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_ratedAirFlowRate(self)



    def isRatedAirFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedAirFlowRateDefaulted(self)



    def isRatedAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedAirFlowRateAutosized(self)



    def ratedWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_ratedWaterFlowRate(self)



    def isRatedWaterFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedWaterFlowRateDefaulted(self)



    def isRatedWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedWaterFlowRateAutosized(self)



    def ratedHeatingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_ratedHeatingCapacity(self)



    def isRatedHeatingCapacityDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedHeatingCapacityDefaulted(self)



    def isRatedHeatingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedHeatingCapacityAutosized(self)



    def ratedHeatingCoefficientofPerformance(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_ratedHeatingCoefficientofPerformance(self)



    def isRatedHeatingCoefficientofPerformanceDefaulted(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_isRatedHeatingCoefficientofPerformanceDefaulted(self)



    def heatingCapacityCoefficient1(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient1(self)



    def heatingCapacityCoefficient2(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient2(self)



    def heatingCapacityCoefficient3(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient3(self)



    def heatingCapacityCoefficient4(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient4(self)



    def heatingCapacityCoefficient5(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingCapacityCoefficient5(self)



    def heatingPowerConsumptionCoefficient1(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient1(self)



    def heatingPowerConsumptionCoefficient2(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient2(self)



    def heatingPowerConsumptionCoefficient3(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient3(self)



    def heatingPowerConsumptionCoefficient4(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient4(self)



    def heatingPowerConsumptionCoefficient5(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_heatingPowerConsumptionCoefficient5(self)



    def setRatedAirFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setRatedAirFlowRate(self, *args)



    def resetRatedAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_resetRatedAirFlowRate(self)



    def autosizeRatedAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizeRatedAirFlowRate(self)



    def setRatedWaterFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setRatedWaterFlowRate(self, *args)



    def resetRatedWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_resetRatedWaterFlowRate(self)



    def autosizeRatedWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizeRatedWaterFlowRate(self)



    def setRatedHeatingCapacity(self, *args) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setRatedHeatingCapacity(self, *args)



    def resetRatedHeatingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_resetRatedHeatingCapacity(self)



    def autosizeRatedHeatingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizeRatedHeatingCapacity(self)



    def setRatedHeatingCoefficientofPerformance(self, ratedHeatingCoefficientofPerformance: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setRatedHeatingCoefficientofPerformance(self, ratedHeatingCoefficientofPerformance)



    def resetRatedHeatingCoefficientofPerformance(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_resetRatedHeatingCoefficientofPerformance(self)



    def setHeatingCapacityCoefficient1(self, heatingCapacityCoefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient1(self, heatingCapacityCoefficient1)



    def setHeatingCapacityCoefficient2(self, heatingCapacityCoefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient2(self, heatingCapacityCoefficient2)



    def setHeatingCapacityCoefficient3(self, heatingCapacityCoefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient3(self, heatingCapacityCoefficient3)



    def setHeatingCapacityCoefficient4(self, heatingCapacityCoefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient4(self, heatingCapacityCoefficient4)



    def setHeatingCapacityCoefficient5(self, heatingCapacityCoefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingCapacityCoefficient5(self, heatingCapacityCoefficient5)



    def setHeatingPowerConsumptionCoefficient1(self, heatingPowerConsumptionCoefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient1(self, heatingPowerConsumptionCoefficient1)



    def setHeatingPowerConsumptionCoefficient2(self, heatingPowerConsumptionCoefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient2(self, heatingPowerConsumptionCoefficient2)



    def setHeatingPowerConsumptionCoefficient3(self, heatingPowerConsumptionCoefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient3(self, heatingPowerConsumptionCoefficient3)



    def setHeatingPowerConsumptionCoefficient4(self, heatingPowerConsumptionCoefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient4(self, heatingPowerConsumptionCoefficient4)



    def setHeatingPowerConsumptionCoefficient5(self, heatingPowerConsumptionCoefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_setHeatingPowerConsumptionCoefficient5(self, heatingPowerConsumptionCoefficient5)



    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizedRatedAirFlowRate(self)



    def autosizedRatedWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizedRatedWaterFlowRate(self)



    def autosizedRatedHeatingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_autosizedRatedHeatingCapacity(self)

CoilHeatingWaterToAirHeatPumpEquationFit_swigregister = _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_swigregister

CoilHeatingWaterToAirHeatPumpEquationFit_swigregister(CoilHeatingWaterToAirHeatPumpEquationFit)



def CoilHeatingWaterToAirHeatPumpEquationFit_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_iddObjectType()

CoilHeatingWaterToAirHeatPumpEquationFit_iddObjectType = _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpEquationFit_iddObjectType





def toCoilHeatingWaterToAirHeatPumpEquationFit(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >":

    return _openstudiomodelhvac.toCoilHeatingWaterToAirHeatPumpEquationFit(idfObject)

toCoilHeatingWaterToAirHeatPumpEquationFit = _openstudiomodelhvac.toCoilHeatingWaterToAirHeatPumpEquationFit



def getCoilHeatingWaterToAirHeatPumpEquationFit(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFit(t_model, t_handle)

getCoilHeatingWaterToAirHeatPumpEquationFit = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFit



def getCoilHeatingWaterToAirHeatPumpEquationFits(t_model: 'Model') -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit > >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFits(t_model)

getCoilHeatingWaterToAirHeatPumpEquationFits = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFits



def getCoilHeatingWaterToAirHeatPumpEquationFitByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFitByName(t_model, t_name)

getCoilHeatingWaterToAirHeatPumpEquationFitByName = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFitByName



def getCoilHeatingWaterToAirHeatPumpEquationFitsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpEquationFit > >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFitsByName(t_model, t_name, t_exactMatch)

getCoilHeatingWaterToAirHeatPumpEquationFitsByName = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpEquationFitsByName

class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(WaterToAirComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToAirComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType)



    def nominalSpeedLevel(self) -> "int":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_nominalSpeedLevel(self)



    def ratedHeatingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ratedHeatingCapacityAtSelectedNominalSpeedLevel(self)



    def isRatedHeatingCapacityAtSelectedNominalSpeedLevelAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedHeatingCapacityAtSelectedNominalSpeedLevelAutosized(self)



    def ratedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ratedAirFlowRateAtSelectedNominalSpeedLevel(self)



    def isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedAirFlowRateAtSelectedNominalSpeedLevelAutosized(self)



    def ratedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ratedWaterFlowRateAtSelectedNominalSpeedLevel(self)



    def isRatedWaterFlowRateAtSelectedNominalSpeedLevelAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_isRatedWaterFlowRateAtSelectedNominalSpeedLevelAutosized(self)



    def energyPartLoadFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_energyPartLoadFractionCurve(self)



    def setNominalSpeedLevel(self, nominalSpeedLevel: 'int') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setNominalSpeedLevel(self, nominalSpeedLevel)



    def setRatedHeatingCapacityAtSelectedNominalSpeedLevel(self, ratedHeatingCapacityAtSelectedNominalSpeedLevel: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedHeatingCapacityAtSelectedNominalSpeedLevel(self, ratedHeatingCapacityAtSelectedNominalSpeedLevel)



    def autosizeRatedHeatingCapacityAtSelectedNominalSpeedLevel(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedHeatingCapacityAtSelectedNominalSpeedLevel(self)



    def setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedAirFlowRateAtSelectedNominalSpeedLevel(self, ratedAirFlowRateAtSelectedNominalSpeedLevel)



    def autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedAirFlowRateAtSelectedNominalSpeedLevel(self)



    def setRatedWaterFlowRateAtSelectedNominalSpeedLevel(self, ratedWaterFlowRateAtSelectedNominalSpeedLevel: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setRatedWaterFlowRateAtSelectedNominalSpeedLevel(self, ratedWaterFlowRateAtSelectedNominalSpeedLevel)



    def autosizeRatedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizeRatedWaterFlowRateAtSelectedNominalSpeedLevel(self)



    def setEnergyPartLoadFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_setEnergyPartLoadFractionCurve(self, curve)



    def speeds(self) -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_speeds(self)



    def addSpeed(self, speed: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_addSpeed(self, speed)



    def removeSpeed(self, speed: 'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData') -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_removeSpeed(self, speed)



    def removeAllSpeeds(self) -> "void":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_removeAllSpeeds(self)



    def autosizedRatedHeatingCapacityAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedHeatingCapacityAtSelectedNominalSpeedLevel(self)



    def autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedAirFlowRateAtSelectedNominalSpeedLevel(self)



    def autosizedRatedWaterFlowRateAtSelectedNominalSpeedLevel(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_autosizedRatedWaterFlowRateAtSelectedNominalSpeedLevel(self)

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister = _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_swigregister(CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit)



def CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType()

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType = _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit_iddObjectType





def toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >":

    return _openstudiomodelhvac.toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(idfObject)

toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = _openstudiomodelhvac.toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit



def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(t_model, t_handle)

getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit



def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits(t_model: 'Model') -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit > >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits(t_model)

getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFits



def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName(t_model, t_name)

getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitByName



def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit > >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName(t_model, t_name, t_exactMatch)

getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitsByName

class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType)



    def referenceUnitGrossRatedHeatingCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedHeatingCapacity(self)



    def referenceUnitGrossRatedHeatingCOP(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitGrossRatedHeatingCOP(self)



    def referenceUnitRatedAirFlow(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitRatedAirFlow(self)



    def referenceUnitRatedWaterFlowRate(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitRatedWaterFlowRate(self)



    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_heatingCapacityFunctionofTemperatureCurve(self)



    def totalHeatingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_totalHeatingCapacityFunctionofAirFlowFractionCurve(self)



    def heatingCapacityFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_heatingCapacityFunctionofWaterFlowFractionCurve(self)



    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofTemperatureCurve(self)



    def energyInputRatioFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofAirFlowFractionCurve(self)



    def energyInputRatioFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_energyInputRatioFunctionofWaterFlowFractionCurve(self)



    def referenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self) -> "double":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_referenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self)



    def wasteHeatFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_wasteHeatFunctionofTemperatureCurve(self)



    def setReferenceUnitGrossRatedHeatingCapacity(self, referenceUnitGrossRatedHeatingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedHeatingCapacity(self, referenceUnitGrossRatedHeatingCapacity)



    def setReferenceUnitGrossRatedHeatingCOP(self, referenceUnitGrossRatedHeatingCOP: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitGrossRatedHeatingCOP(self, referenceUnitGrossRatedHeatingCOP)



    def setReferenceUnitRatedAirFlow(self, referenceUnitRatedAirFlow: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitRatedAirFlow(self, referenceUnitRatedAirFlow)



    def setReferenceUnitRatedWaterFlowRate(self, referenceUnitRatedWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitRatedWaterFlowRate(self, referenceUnitRatedWaterFlowRate)



    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setHeatingCapacityFunctionofTemperatureCurve(self, curve)



    def setTotalHeatingCapacityFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setTotalHeatingCapacityFunctionofAirFlowFractionCurve(self, curve)



    def setHeatingCapacityFunctionofWaterFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setHeatingCapacityFunctionofWaterFlowFractionCurve(self, curve)



    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)



    def setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofAirFlowFractionCurve(self, curve)



    def setEnergyInputRatioFunctionofWaterFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setEnergyInputRatioFunctionofWaterFlowFractionCurve(self, curve)



    def setReferenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self, referenceUnitWasteHeatFractionofInputPowerAtRatedConditions: 'double') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setReferenceUnitWasteHeatFractionofInputPowerAtRatedConditions(self, referenceUnitWasteHeatFractionofInputPowerAtRatedConditions)



    def setWasteHeatFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_setWasteHeatFunctionofTemperatureCurve(self, curve)

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister = _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_swigregister(CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData)



def CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType()

CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType = _openstudiomodelhvac.CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData_iddObjectType





def toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":

    return _openstudiomodelhvac.toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(idfObject)

toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _openstudiomodelhvac.toCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData



def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData(t_model, t_handle)

getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData



def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(t_model: 'Model') -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas(t_model)

getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatas



def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName(t_model, t_name)

getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDataByName



def getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData,std::allocator< openstudio::model::CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedData > >":

    return _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName(t_model, t_name, t_exactMatch)

getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName = _openstudiomodelhvac.getCoilHeatingWaterToAirHeatPumpVariableSpeedEquationFitSpeedDatasByName

class CoilPerformanceDXCooling(openstudiomodelcore.ParentObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilPerformanceDXCooling, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ParentObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilPerformanceDXCooling, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilPerformanceDXCooling(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilPerformanceDXCooling

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilPerformanceDXCooling_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilPerformanceDXCooling_iddObjectType)

    __swig_getmethods__["condenserTypeValues"] = lambda x: _openstudiomodelhvac.CoilPerformanceDXCooling_condenserTypeValues

    if _newclass:

        condenserTypeValues = staticmethod(_openstudiomodelhvac.CoilPerformanceDXCooling_condenserTypeValues)



    def grossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_grossRatedTotalCoolingCapacity(self)



    def isGrossRatedTotalCoolingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_isGrossRatedTotalCoolingCapacityAutosized(self)



    def grossRatedSensibleHeatRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_grossRatedSensibleHeatRatio(self)



    def isGrossRatedSensibleHeatRatioAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_isGrossRatedSensibleHeatRatioAutosized(self)



    def grossRatedCoolingCOP(self) -> "double":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_grossRatedCoolingCOP(self)



    def ratedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_ratedAirFlowRate(self)



    def isRatedAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_isRatedAirFlowRateAutosized(self)



    def fractionofAirFlowBypassedAroundCoil(self) -> "double":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_fractionofAirFlowBypassedAroundCoil(self)



    def totalCoolingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_totalCoolingCapacityFunctionofTemperatureCurve(self)



    def totalCoolingCapacityFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_totalCoolingCapacityFunctionofFlowFractionCurve(self)



    def energyInputRatioFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_energyInputRatioFunctionofTemperatureCurve(self)



    def energyInputRatioFunctionofFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_energyInputRatioFunctionofFlowFractionCurve(self)



    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_partLoadFractionCorrelationCurve(self)



    def nominalTimeforCondensateRemovaltoBegin(self) -> "double":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_nominalTimeforCondensateRemovaltoBegin(self)



    def ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)



    def maximumCyclingRate(self) -> "double":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_maximumCyclingRate(self)



    def latentCapacityTimeConstant(self) -> "double":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_latentCapacityTimeConstant(self)



    def condenserAirInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_condenserAirInletNode(self)



    def condenserType(self) -> "std::string":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_condenserType(self)



    def evaporativeCondenserEffectiveness(self) -> "double":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_evaporativeCondenserEffectiveness(self)



    def evaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_evaporativeCondenserAirFlowRate(self)



    def isEvaporativeCondenserAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_isEvaporativeCondenserAirFlowRateAutosized(self)



    def evaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_evaporativeCondenserPumpRatedPowerConsumption(self)



    def isEvaporativeCondenserPumpRatedPowerConsumptionAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_isEvaporativeCondenserPumpRatedPowerConsumptionAutosized(self)



    def sensibleHeatRatioFunctionofTemperatureCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_sensibleHeatRatioFunctionofTemperatureCurve(self)



    def sensibleHeatRatioFunctionofFlowFractionCurve(self) -> "boost::optional< openstudio::model::Curve >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_sensibleHeatRatioFunctionofFlowFractionCurve(self)



    def setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setGrossRatedTotalCoolingCapacity(self, grossRatedTotalCoolingCapacity)



    def autosizeGrossRatedTotalCoolingCapacity(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeGrossRatedTotalCoolingCapacity(self)



    def setGrossRatedSensibleHeatRatio(self, grossRatedSensibleHeatRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setGrossRatedSensibleHeatRatio(self, grossRatedSensibleHeatRatio)



    def autosizeGrossRatedSensibleHeatRatio(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeGrossRatedSensibleHeatRatio(self)



    def setGrossRatedCoolingCOP(self, grossRatedCoolingCOP: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setGrossRatedCoolingCOP(self, grossRatedCoolingCOP)



    def setRatedAirFlowRate(self, ratedAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setRatedAirFlowRate(self, ratedAirFlowRate)



    def autosizeRatedAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeRatedAirFlowRate(self)



    def setFractionofAirFlowBypassedAroundCoil(self, fractionofAirFlowBypassedAroundCoil: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setFractionofAirFlowBypassedAroundCoil(self, fractionofAirFlowBypassedAroundCoil)



    def setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setTotalCoolingCapacityFunctionofTemperatureCurve(self, curve)



    def setTotalCoolingCapacityFunctionofFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setTotalCoolingCapacityFunctionofFlowFractionCurve(self, curve)



    def setEnergyInputRatioFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEnergyInputRatioFunctionofTemperatureCurve(self, curve)



    def setEnergyInputRatioFunctionofFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEnergyInputRatioFunctionofFlowFractionCurve(self, curve)



    def setPartLoadFractionCorrelationCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setPartLoadFractionCorrelationCurve(self, curve)



    def setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin)



    def setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity)



    def setMaximumCyclingRate(self, maximumCyclingRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setMaximumCyclingRate(self, maximumCyclingRate)



    def setLatentCapacityTimeConstant(self, latentCapacityTimeConstant: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setLatentCapacityTimeConstant(self, latentCapacityTimeConstant)



    def setCondenserAirInletNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setCondenserAirInletNode(self, node)



    def resetCondenserAirInletNode(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_resetCondenserAirInletNode(self)



    def setCondenserType(self, condenserType: 'std::string') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setCondenserType(self, condenserType)



    def setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness)



    def setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate)



    def autosizeEvaporativeCondenserAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeEvaporativeCondenserAirFlowRate(self)



    def setEvaporativeCondenserPumpRatedPowerConsumption(self, evaporativeCondenserPumpRatedPowerConsumption: 'double') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setEvaporativeCondenserPumpRatedPowerConsumption(self, evaporativeCondenserPumpRatedPowerConsumption)



    def autosizeEvaporativeCondenserPumpRatedPowerConsumption(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizeEvaporativeCondenserPumpRatedPowerConsumption(self)



    def setSensibleHeatRatioFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setSensibleHeatRatioFunctionofTemperatureCurve(self, curve)



    def resetSensibleHeatRatioFunctionofTemperatureCurve(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_resetSensibleHeatRatioFunctionofTemperatureCurve(self)



    def setSensibleHeatRatioFunctionofFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_setSensibleHeatRatioFunctionofFlowFractionCurve(self, curve)



    def resetSensibleHeatRatioFunctionofFlowFractionCurve(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_resetSensibleHeatRatioFunctionofFlowFractionCurve(self)



    def autosizedGrossRatedTotalCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedGrossRatedTotalCoolingCapacity(self)



    def autosizedGrossRatedSensibleHeatRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedGrossRatedSensibleHeatRatio(self)



    def autosizedRatedAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedRatedAirFlowRate(self)



    def autosizedEvaporativeCondenserAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedEvaporativeCondenserAirFlowRate(self)



    def autosizedEvaporativeCondenserPumpRatedPowerConsumption(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosizedEvaporativeCondenserPumpRatedPowerConsumption(self)



    def autosize(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_autosize(self)



    def applySizingValues(self) -> "void":

        return _openstudiomodelhvac.CoilPerformanceDXCooling_applySizingValues(self)

CoilPerformanceDXCooling_swigregister = _openstudiomodelhvac.CoilPerformanceDXCooling_swigregister

CoilPerformanceDXCooling_swigregister(CoilPerformanceDXCooling)



def CoilPerformanceDXCooling_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilPerformanceDXCooling_iddObjectType()

CoilPerformanceDXCooling_iddObjectType = _openstudiomodelhvac.CoilPerformanceDXCooling_iddObjectType



def CoilPerformanceDXCooling_condenserTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.CoilPerformanceDXCooling_condenserTypeValues()

CoilPerformanceDXCooling_condenserTypeValues = _openstudiomodelhvac.CoilPerformanceDXCooling_condenserTypeValues





def toCoilPerformanceDXCooling(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":

    return _openstudiomodelhvac.toCoilPerformanceDXCooling(idfObject)

toCoilPerformanceDXCooling = _openstudiomodelhvac.toCoilPerformanceDXCooling



def getCoilPerformanceDXCooling(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":

    return _openstudiomodelhvac.getCoilPerformanceDXCooling(t_model, t_handle)

getCoilPerformanceDXCooling = _openstudiomodelhvac.getCoilPerformanceDXCooling



def getCoilPerformanceDXCoolings(t_model: 'Model') -> "std::vector< openstudio::model::CoilPerformanceDXCooling,std::allocator< openstudio::model::CoilPerformanceDXCooling > >":

    return _openstudiomodelhvac.getCoilPerformanceDXCoolings(t_model)

getCoilPerformanceDXCoolings = _openstudiomodelhvac.getCoilPerformanceDXCoolings



def getCoilPerformanceDXCoolingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilPerformanceDXCooling >":

    return _openstudiomodelhvac.getCoilPerformanceDXCoolingByName(t_model, t_name)

getCoilPerformanceDXCoolingByName = _openstudiomodelhvac.getCoilPerformanceDXCoolingByName



def getCoilPerformanceDXCoolingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilPerformanceDXCooling,std::allocator< openstudio::model::CoilPerformanceDXCooling > >":

    return _openstudiomodelhvac.getCoilPerformanceDXCoolingsByName(t_model, t_name, t_exactMatch)

getCoilPerformanceDXCoolingsByName = _openstudiomodelhvac.getCoilPerformanceDXCoolingsByName

class CoilWaterHeatingAirToWaterHeatPump(HVACComponent):

    __swig_setmethods__ = {}

    for _s in [HVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilWaterHeatingAirToWaterHeatPump, name, value)

    __swig_getmethods__ = {}

    for _s in [HVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilWaterHeatingAirToWaterHeatPump, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_CoilWaterHeatingAirToWaterHeatPump(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilWaterHeatingAirToWaterHeatPump

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_iddObjectType)

    __swig_getmethods__["evaporatorAirTemperatureTypeforCurveObjectsValues"] = lambda x: _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjectsValues

    if _newclass:

        evaporatorAirTemperatureTypeforCurveObjectsValues = staticmethod(_openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjectsValues)



    def ratedHeatingCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedHeatingCapacity(self)



    def ratedCOP(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedCOP(self)



    def ratedSensibleHeatRatio(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedSensibleHeatRatio(self)



    def ratedEvaporatorInletAirDryBulbTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedEvaporatorInletAirDryBulbTemperature(self)



    def ratedEvaporatorInletAirWetBulbTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedEvaporatorInletAirWetBulbTemperature(self)



    def ratedCondenserInletWaterTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedCondenserInletWaterTemperature(self)



    def ratedEvaporatorAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedEvaporatorAirFlowRate(self)



    def isRatedEvaporatorAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_isRatedEvaporatorAirFlowRateAutosized(self)



    def ratedCondenserWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_ratedCondenserWaterFlowRate(self)



    def isRatedCondenserWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_isRatedCondenserWaterFlowRateAutosized(self)



    def evaporatorFanPowerIncludedinRatedCOP(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorFanPowerIncludedinRatedCOP(self)



    def condenserPumpPowerIncludedinRatedCOP(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_condenserPumpPowerIncludedinRatedCOP(self)



    def condenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_condenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP(self)



    def condenserWaterPumpPower(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_condenserWaterPumpPower(self)



    def fractionofCondenserPumpHeattoWater(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_fractionofCondenserPumpHeattoWater(self)



    def crankcaseHeaterCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_crankcaseHeaterCapacity(self)



    def maximumAmbientTemperatureforCrankcaseHeaterOperation(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_maximumAmbientTemperatureforCrankcaseHeaterOperation(self)



    def evaporatorAirTemperatureTypeforCurveObjects(self) -> "std::string":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjects(self)



    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCapacityFunctionofTemperatureCurve(self)



    def heatingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCapacityFunctionofAirFlowFractionCurve(self)



    def heatingCapacityFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCapacityFunctionofWaterFlowFractionCurve(self)



    def heatingCOPFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCOPFunctionofTemperatureCurve(self)



    def heatingCOPFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCOPFunctionofAirFlowFractionCurve(self)



    def heatingCOPFunctionofWaterFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_heatingCOPFunctionofWaterFlowFractionCurve(self)



    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_partLoadFractionCorrelationCurve(self)



    def setRatedHeatingCapacity(self, ratedHeatingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedHeatingCapacity(self, ratedHeatingCapacity)



    def setRatedCOP(self, ratedCOP: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedCOP(self, ratedCOP)



    def setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio)



    def setRatedEvaporatorInletAirDryBulbTemperature(self, ratedEvaporatorInletAirDryBulbTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedEvaporatorInletAirDryBulbTemperature(self, ratedEvaporatorInletAirDryBulbTemperature)



    def setRatedEvaporatorInletAirWetBulbTemperature(self, ratedEvaporatorInletAirWetBulbTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedEvaporatorInletAirWetBulbTemperature(self, ratedEvaporatorInletAirWetBulbTemperature)



    def setRatedCondenserInletWaterTemperature(self, ratedCondenserInletWaterTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedCondenserInletWaterTemperature(self, ratedCondenserInletWaterTemperature)



    def setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate)



    def autosizeRatedEvaporatorAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_autosizeRatedEvaporatorAirFlowRate(self)



    def setRatedCondenserWaterFlowRate(self, ratedCondenserWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setRatedCondenserWaterFlowRate(self, ratedCondenserWaterFlowRate)



    def autosizeRatedCondenserWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_autosizeRatedCondenserWaterFlowRate(self)



    def setEvaporatorFanPowerIncludedinRatedCOP(self, evaporatorFanPowerIncludedinRatedCOP: 'bool') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setEvaporatorFanPowerIncludedinRatedCOP(self, evaporatorFanPowerIncludedinRatedCOP)



    def setCondenserPumpPowerIncludedinRatedCOP(self, condenserPumpPowerIncludedinRatedCOP: 'bool') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setCondenserPumpPowerIncludedinRatedCOP(self, condenserPumpPowerIncludedinRatedCOP)



    def setCondenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP(self, condenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP: 'bool') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setCondenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP(self, condenserPumpHeatIncludedinRatedHeatingCapacityandRatedCOP)



    def setCondenserWaterPumpPower(self, condenserWaterPumpPower: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setCondenserWaterPumpPower(self, condenserWaterPumpPower)



    def setFractionofCondenserPumpHeattoWater(self, fractionofCondenserPumpHeattoWater: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setFractionofCondenserPumpHeattoWater(self, fractionofCondenserPumpHeattoWater)



    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)



    def setMaximumAmbientTemperatureforCrankcaseHeaterOperation(self, maximumAmbientTemperatureforCrankcaseHeaterOperation: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setMaximumAmbientTemperatureforCrankcaseHeaterOperation(self, maximumAmbientTemperatureforCrankcaseHeaterOperation)



    def setEvaporatorAirTemperatureTypeforCurveObjects(self, evaporatorAirTemperatureTypeforCurveObjects: 'std::string') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setEvaporatorAirTemperatureTypeforCurveObjects(self, evaporatorAirTemperatureTypeforCurveObjects)



    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCapacityFunctionofTemperatureCurve(self, curve)



    def setHeatingCapacityFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCapacityFunctionofAirFlowFractionCurve(self, curve)



    def setHeatingCapacityFunctionofWaterFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCapacityFunctionofWaterFlowFractionCurve(self, curve)



    def setHeatingCOPFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCOPFunctionofTemperatureCurve(self, curve)



    def setHeatingCOPFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCOPFunctionofAirFlowFractionCurve(self, curve)



    def setHeatingCOPFunctionofWaterFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setHeatingCOPFunctionofWaterFlowFractionCurve(self, curve)



    def setPartLoadFractionCorrelationCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_setPartLoadFractionCorrelationCurve(self, curve)



    def autosizedRatedEvaporatorAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_autosizedRatedEvaporatorAirFlowRate(self)



    def autosizedRatedCondenserWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_autosizedRatedCondenserWaterFlowRate(self)

CoilWaterHeatingAirToWaterHeatPump_swigregister = _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_swigregister

CoilWaterHeatingAirToWaterHeatPump_swigregister(CoilWaterHeatingAirToWaterHeatPump)



def CoilWaterHeatingAirToWaterHeatPump_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_iddObjectType()

CoilWaterHeatingAirToWaterHeatPump_iddObjectType = _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_iddObjectType



def CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjectsValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjectsValues()

CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjectsValues = _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPump_evaporatorAirTemperatureTypeforCurveObjectsValues





def toCoilWaterHeatingAirToWaterHeatPump(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >":

    return _openstudiomodelhvac.toCoilWaterHeatingAirToWaterHeatPump(idfObject)

toCoilWaterHeatingAirToWaterHeatPump = _openstudiomodelhvac.toCoilWaterHeatingAirToWaterHeatPump



def getCoilWaterHeatingAirToWaterHeatPump(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >":

    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPump(t_model, t_handle)

getCoilWaterHeatingAirToWaterHeatPump = _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPump



def getCoilWaterHeatingAirToWaterHeatPumps(t_model: 'Model') -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPump > >":

    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumps(t_model)

getCoilWaterHeatingAirToWaterHeatPumps = _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumps



def getCoilWaterHeatingAirToWaterHeatPumpByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPump >":

    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpByName(t_model, t_name)

getCoilWaterHeatingAirToWaterHeatPumpByName = _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpByName



def getCoilWaterHeatingAirToWaterHeatPumpsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPump,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPump > >":

    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpsByName(t_model, t_name, t_exactMatch)

getCoilWaterHeatingAirToWaterHeatPumpsByName = _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpsByName

class CoilWaterHeatingAirToWaterHeatPumpWrapped(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoilWaterHeatingAirToWaterHeatPumpWrapped, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoilWaterHeatingAirToWaterHeatPumpWrapped, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CoilWaterHeatingAirToWaterHeatPumpWrapped(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoilWaterHeatingAirToWaterHeatPumpWrapped

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_iddObjectType)

    __swig_getmethods__["evaporatorAirTemperatureTypeforCurveObjectsValues"] = lambda x: _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjectsValues

    if _newclass:

        evaporatorAirTemperatureTypeforCurveObjectsValues = staticmethod(_openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjectsValues)



    def ratedHeatingCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedHeatingCapacity(self)



    def ratedCOP(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedCOP(self)



    def ratedSensibleHeatRatio(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedSensibleHeatRatio(self)



    def ratedEvaporatorInletAirDryBulbTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedEvaporatorInletAirDryBulbTemperature(self)



    def ratedEvaporatorInletAirWetBulbTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedEvaporatorInletAirWetBulbTemperature(self)



    def ratedCondenserWaterTemperature(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedCondenserWaterTemperature(self)



    def ratedEvaporatorAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_ratedEvaporatorAirFlowRate(self)



    def isRatedEvaporatorAirFlowRateAutocalculated(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_isRatedEvaporatorAirFlowRateAutocalculated(self)



    def evaporatorFanPowerIncludedinRatedCOP(self) -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorFanPowerIncludedinRatedCOP(self)



    def crankcaseHeaterCapacity(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_crankcaseHeaterCapacity(self)



    def maximumAmbientTemperatureforCrankcaseHeaterOperation(self) -> "double":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_maximumAmbientTemperatureforCrankcaseHeaterOperation(self)



    def evaporatorAirTemperatureTypeforCurveObjects(self) -> "std::string":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjects(self)



    def heatingCapacityFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_heatingCapacityFunctionofTemperatureCurve(self)



    def heatingCapacityFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_heatingCapacityFunctionofAirFlowFractionCurve(self)



    def heatingCOPFunctionofTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_heatingCOPFunctionofTemperatureCurve(self)



    def heatingCOPFunctionofAirFlowFractionCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_heatingCOPFunctionofAirFlowFractionCurve(self)



    def partLoadFractionCorrelationCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_partLoadFractionCorrelationCurve(self)



    def setRatedHeatingCapacity(self, ratedHeatingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedHeatingCapacity(self, ratedHeatingCapacity)



    def setRatedCOP(self, ratedCOP: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedCOP(self, ratedCOP)



    def setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedSensibleHeatRatio(self, ratedSensibleHeatRatio)



    def setRatedEvaporatorInletAirDryBulbTemperature(self, ratedEvaporatorInletAirDryBulbTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedEvaporatorInletAirDryBulbTemperature(self, ratedEvaporatorInletAirDryBulbTemperature)



    def setRatedEvaporatorInletAirWetBulbTemperature(self, ratedEvaporatorInletAirWetBulbTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedEvaporatorInletAirWetBulbTemperature(self, ratedEvaporatorInletAirWetBulbTemperature)



    def setRatedCondenserWaterTemperature(self, ratedCondenserWaterTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedCondenserWaterTemperature(self, ratedCondenserWaterTemperature)



    def setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate)



    def autocalculateRatedEvaporatorAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_autocalculateRatedEvaporatorAirFlowRate(self)



    def setEvaporatorFanPowerIncludedinRatedCOP(self, evaporatorFanPowerIncludedinRatedCOP: 'bool') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setEvaporatorFanPowerIncludedinRatedCOP(self, evaporatorFanPowerIncludedinRatedCOP)



    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)



    def setMaximumAmbientTemperatureforCrankcaseHeaterOperation(self, maximumAmbientTemperatureforCrankcaseHeaterOperation: 'double') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setMaximumAmbientTemperatureforCrankcaseHeaterOperation(self, maximumAmbientTemperatureforCrankcaseHeaterOperation)



    def setEvaporatorAirTemperatureTypeforCurveObjects(self, evaporatorAirTemperatureTypeforCurveObjects: 'std::string') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setEvaporatorAirTemperatureTypeforCurveObjects(self, evaporatorAirTemperatureTypeforCurveObjects)



    def setHeatingCapacityFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setHeatingCapacityFunctionofTemperatureCurve(self, curve)



    def setHeatingCapacityFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setHeatingCapacityFunctionofAirFlowFractionCurve(self, curve)



    def setHeatingCOPFunctionofTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setHeatingCOPFunctionofTemperatureCurve(self, curve)



    def setHeatingCOPFunctionofAirFlowFractionCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setHeatingCOPFunctionofAirFlowFractionCurve(self, curve)



    def setPartLoadFractionCorrelationCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_setPartLoadFractionCorrelationCurve(self, curve)

CoilWaterHeatingAirToWaterHeatPumpWrapped_swigregister = _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_swigregister

CoilWaterHeatingAirToWaterHeatPumpWrapped_swigregister(CoilWaterHeatingAirToWaterHeatPumpWrapped)



def CoilWaterHeatingAirToWaterHeatPumpWrapped_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_iddObjectType()

CoilWaterHeatingAirToWaterHeatPumpWrapped_iddObjectType = _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_iddObjectType



def CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjectsValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjectsValues()

CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjectsValues = _openstudiomodelhvac.CoilWaterHeatingAirToWaterHeatPumpWrapped_evaporatorAirTemperatureTypeforCurveObjectsValues





def toCoilWaterHeatingAirToWaterHeatPumpWrapped(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >":

    return _openstudiomodelhvac.toCoilWaterHeatingAirToWaterHeatPumpWrapped(idfObject)

toCoilWaterHeatingAirToWaterHeatPumpWrapped = _openstudiomodelhvac.toCoilWaterHeatingAirToWaterHeatPumpWrapped



def getCoilWaterHeatingAirToWaterHeatPumpWrapped(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >":

    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrapped(t_model, t_handle)

getCoilWaterHeatingAirToWaterHeatPumpWrapped = _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrapped



def getCoilWaterHeatingAirToWaterHeatPumpWrappeds(t_model: 'Model') -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped > >":

    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrappeds(t_model)

getCoilWaterHeatingAirToWaterHeatPumpWrappeds = _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrappeds



def getCoilWaterHeatingAirToWaterHeatPumpWrappedByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped >":

    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrappedByName(t_model, t_name)

getCoilWaterHeatingAirToWaterHeatPumpWrappedByName = _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrappedByName



def getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped,std::allocator< openstudio::model::CoilWaterHeatingAirToWaterHeatPumpWrapped > >":

    return _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName(t_model, t_name, t_exactMatch)

getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName = _openstudiomodelhvac.getCoilWaterHeatingAirToWaterHeatPumpWrappedsByName

class CoolingTowerPerformanceYorkCalc(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoolingTowerPerformanceYorkCalc, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoolingTowerPerformanceYorkCalc, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CoolingTowerPerformanceYorkCalc(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoolingTowerPerformanceYorkCalc

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_iddObjectType)



    def minimumInletAirWetBulbTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_minimumInletAirWetBulbTemperature(self)



    def maximumInletAirWetBulbTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumInletAirWetBulbTemperature(self)



    def minimumRangeTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_minimumRangeTemperature(self)



    def maximumRangeTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumRangeTemperature(self)



    def minimumApproachTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_minimumApproachTemperature(self)



    def maximumApproachTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumApproachTemperature(self)



    def minimumWaterFlowRateRatio(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_minimumWaterFlowRateRatio(self)



    def maximumWaterFlowRateRatio(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumWaterFlowRateRatio(self)



    def maximumLiquidtoGasRatio(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_maximumLiquidtoGasRatio(self)



    def coefficient1(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient1(self)



    def coefficient2(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient2(self)



    def coefficient3(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient3(self)



    def coefficient4(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient4(self)



    def coefficient5(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient5(self)



    def coefficient6(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient6(self)



    def coefficient7(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient7(self)



    def coefficient8(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient8(self)



    def coefficient9(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient9(self)



    def coefficient10(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient10(self)



    def coefficient11(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient11(self)



    def coefficient12(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient12(self)



    def coefficient13(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient13(self)



    def coefficient14(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient14(self)



    def coefficient15(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient15(self)



    def coefficient16(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient16(self)



    def coefficient17(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient17(self)



    def coefficient18(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient18(self)



    def coefficient19(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient19(self)



    def coefficient20(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient20(self)



    def coefficient21(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient21(self)



    def coefficient22(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient22(self)



    def coefficient23(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient23(self)



    def coefficient24(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient24(self)



    def coefficient25(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient25(self)



    def coefficient26(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient26(self)



    def coefficient27(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_coefficient27(self)



    def setMinimumInletAirWetBulbTemperature(self, minimumInletAirWetBulbTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMinimumInletAirWetBulbTemperature(self, minimumInletAirWetBulbTemperature)



    def setMaximumInletAirWetBulbTemperature(self, maximumInletAirWetBulbTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumInletAirWetBulbTemperature(self, maximumInletAirWetBulbTemperature)



    def setMinimumRangeTemperature(self, minimumRangeTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMinimumRangeTemperature(self, minimumRangeTemperature)



    def setMaximumRangeTemperature(self, maximumRangeTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumRangeTemperature(self, maximumRangeTemperature)



    def setMinimumApproachTemperature(self, minimumApproachTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMinimumApproachTemperature(self, minimumApproachTemperature)



    def setMaximumApproachTemperature(self, maximumApproachTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumApproachTemperature(self, maximumApproachTemperature)



    def setMinimumWaterFlowRateRatio(self, minimumWaterFlowRateRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMinimumWaterFlowRateRatio(self, minimumWaterFlowRateRatio)



    def setMaximumWaterFlowRateRatio(self, maximumWaterFlowRateRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumWaterFlowRateRatio(self, maximumWaterFlowRateRatio)



    def setMaximumLiquidtoGasRatio(self, maximumLiquidtoGasRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setMaximumLiquidtoGasRatio(self, maximumLiquidtoGasRatio)



    def setCoefficient1(self, coefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient1(self, coefficient1)



    def setCoefficient2(self, coefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient2(self, coefficient2)



    def setCoefficient3(self, coefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient3(self, coefficient3)



    def setCoefficient4(self, coefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient4(self, coefficient4)



    def setCoefficient5(self, coefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient5(self, coefficient5)



    def setCoefficient6(self, coefficient6: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient6(self, coefficient6)



    def setCoefficient7(self, coefficient7: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient7(self, coefficient7)



    def setCoefficient8(self, coefficient8: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient8(self, coefficient8)



    def setCoefficient9(self, coefficient9: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient9(self, coefficient9)



    def setCoefficient10(self, coefficient10: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient10(self, coefficient10)



    def setCoefficient11(self, coefficient11: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient11(self, coefficient11)



    def setCoefficient12(self, coefficient12: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient12(self, coefficient12)



    def setCoefficient13(self, coefficient13: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient13(self, coefficient13)



    def setCoefficient14(self, coefficient14: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient14(self, coefficient14)



    def setCoefficient15(self, coefficient15: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient15(self, coefficient15)



    def setCoefficient16(self, coefficient16: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient16(self, coefficient16)



    def setCoefficient17(self, coefficient17: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient17(self, coefficient17)



    def setCoefficient18(self, coefficient18: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient18(self, coefficient18)



    def setCoefficient19(self, coefficient19: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient19(self, coefficient19)



    def setCoefficient20(self, coefficient20: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient20(self, coefficient20)



    def setCoefficient21(self, coefficient21: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient21(self, coefficient21)



    def setCoefficient22(self, coefficient22: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient22(self, coefficient22)



    def setCoefficient23(self, coefficient23: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient23(self, coefficient23)



    def setCoefficient24(self, coefficient24: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient24(self, coefficient24)



    def setCoefficient25(self, coefficient25: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient25(self, coefficient25)



    def setCoefficient26(self, coefficient26: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient26(self, coefficient26)



    def setCoefficient27(self, coefficient27: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_setCoefficient27(self, coefficient27)

CoolingTowerPerformanceYorkCalc_swigregister = _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_swigregister

CoolingTowerPerformanceYorkCalc_swigregister(CoolingTowerPerformanceYorkCalc)



def CoolingTowerPerformanceYorkCalc_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_iddObjectType()

CoolingTowerPerformanceYorkCalc_iddObjectType = _openstudiomodelhvac.CoolingTowerPerformanceYorkCalc_iddObjectType





def toCoolingTowerPerformanceYorkCalc(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoolingTowerPerformanceYorkCalc >":

    return _openstudiomodelhvac.toCoolingTowerPerformanceYorkCalc(idfObject)

toCoolingTowerPerformanceYorkCalc = _openstudiomodelhvac.toCoolingTowerPerformanceYorkCalc



def getCoolingTowerPerformanceYorkCalc(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoolingTowerPerformanceYorkCalc >":

    return _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalc(t_model, t_handle)

getCoolingTowerPerformanceYorkCalc = _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalc



def getCoolingTowerPerformanceYorkCalcs(t_model: 'Model') -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc,std::allocator< openstudio::model::CoolingTowerPerformanceYorkCalc > >":

    return _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalcs(t_model)

getCoolingTowerPerformanceYorkCalcs = _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalcs



def getCoolingTowerPerformanceYorkCalcByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoolingTowerPerformanceYorkCalc >":

    return _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalcByName(t_model, t_name)

getCoolingTowerPerformanceYorkCalcByName = _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalcByName



def getCoolingTowerPerformanceYorkCalcsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoolingTowerPerformanceYorkCalc,std::allocator< openstudio::model::CoolingTowerPerformanceYorkCalc > >":

    return _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalcsByName(t_model, t_name, t_exactMatch)

getCoolingTowerPerformanceYorkCalcsByName = _openstudiomodelhvac.getCoolingTowerPerformanceYorkCalcsByName

class CoolingTowerPerformanceCoolTools(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CoolingTowerPerformanceCoolTools, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CoolingTowerPerformanceCoolTools, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_CoolingTowerPerformanceCoolTools(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_CoolingTowerPerformanceCoolTools

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.CoolingTowerPerformanceCoolTools_iddObjectType)



    def minimumInletAirWetBulbTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_minimumInletAirWetBulbTemperature(self)



    def maximumInletAirWetBulbTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_maximumInletAirWetBulbTemperature(self)



    def minimumRangeTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_minimumRangeTemperature(self)



    def maximumRangeTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_maximumRangeTemperature(self)



    def minimumApproachTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_minimumApproachTemperature(self)



    def maximumApproachTemperature(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_maximumApproachTemperature(self)



    def minimumWaterFlowRateRatio(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_minimumWaterFlowRateRatio(self)



    def maximumWaterFlowRateRatio(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_maximumWaterFlowRateRatio(self)



    def coefficient1(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient1(self)



    def coefficient2(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient2(self)



    def coefficient3(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient3(self)



    def coefficient4(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient4(self)



    def coefficient5(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient5(self)



    def coefficient6(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient6(self)



    def coefficient7(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient7(self)



    def coefficient8(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient8(self)



    def coefficient9(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient9(self)



    def coefficient10(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient10(self)



    def coefficient11(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient11(self)



    def coefficient12(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient12(self)



    def coefficient13(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient13(self)



    def coefficient14(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient14(self)



    def coefficient15(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient15(self)



    def coefficient16(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient16(self)



    def coefficient17(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient17(self)



    def coefficient18(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient18(self)



    def coefficient19(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient19(self)



    def coefficient20(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient20(self)



    def coefficient21(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient21(self)



    def coefficient22(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient22(self)



    def coefficient23(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient23(self)



    def coefficient24(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient24(self)



    def coefficient25(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient25(self)



    def coefficient26(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient26(self)



    def coefficient27(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient27(self)



    def coefficient28(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient28(self)



    def coefficient29(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient29(self)



    def coefficient30(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient30(self)



    def coefficient31(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient31(self)



    def coefficient32(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient32(self)



    def coefficient33(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient33(self)



    def coefficient34(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient34(self)



    def coefficient35(self) -> "double":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_coefficient35(self)



    def setMinimumInletAirWetBulbTemperature(self, minimumInletAirWetBulbTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMinimumInletAirWetBulbTemperature(self, minimumInletAirWetBulbTemperature)



    def setMaximumInletAirWetBulbTemperature(self, maximumInletAirWetBulbTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMaximumInletAirWetBulbTemperature(self, maximumInletAirWetBulbTemperature)



    def setMinimumRangeTemperature(self, minimumRangeTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMinimumRangeTemperature(self, minimumRangeTemperature)



    def setMaximumRangeTemperature(self, maximumRangeTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMaximumRangeTemperature(self, maximumRangeTemperature)



    def setMinimumApproachTemperature(self, minimumApproachTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMinimumApproachTemperature(self, minimumApproachTemperature)



    def setMaximumApproachTemperature(self, maximumApproachTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMaximumApproachTemperature(self, maximumApproachTemperature)



    def setMinimumWaterFlowRateRatio(self, minimumWaterFlowRateRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMinimumWaterFlowRateRatio(self, minimumWaterFlowRateRatio)



    def setMaximumWaterFlowRateRatio(self, maximumWaterFlowRateRatio: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setMaximumWaterFlowRateRatio(self, maximumWaterFlowRateRatio)



    def setCoefficient1(self, coefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient1(self, coefficient1)



    def setCoefficient2(self, coefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient2(self, coefficient2)



    def setCoefficient3(self, coefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient3(self, coefficient3)



    def setCoefficient4(self, coefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient4(self, coefficient4)



    def setCoefficient5(self, coefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient5(self, coefficient5)



    def setCoefficient6(self, coefficient6: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient6(self, coefficient6)



    def setCoefficient7(self, coefficient7: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient7(self, coefficient7)



    def setCoefficient8(self, coefficient8: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient8(self, coefficient8)



    def setCoefficient9(self, coefficient9: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient9(self, coefficient9)



    def setCoefficient10(self, coefficient10: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient10(self, coefficient10)



    def setCoefficient11(self, coefficient11: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient11(self, coefficient11)



    def setCoefficient12(self, coefficient12: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient12(self, coefficient12)



    def setCoefficient13(self, coefficient13: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient13(self, coefficient13)



    def setCoefficient14(self, coefficient14: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient14(self, coefficient14)



    def setCoefficient15(self, coefficient15: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient15(self, coefficient15)



    def setCoefficient16(self, coefficient16: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient16(self, coefficient16)



    def setCoefficient17(self, coefficient17: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient17(self, coefficient17)



    def setCoefficient18(self, coefficient18: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient18(self, coefficient18)



    def setCoefficient19(self, coefficient19: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient19(self, coefficient19)



    def setCoefficient20(self, coefficient20: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient20(self, coefficient20)



    def setCoefficient21(self, coefficient21: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient21(self, coefficient21)



    def setCoefficient22(self, coefficient22: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient22(self, coefficient22)



    def setCoefficient23(self, coefficient23: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient23(self, coefficient23)



    def setCoefficient24(self, coefficient24: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient24(self, coefficient24)



    def setCoefficient25(self, coefficient25: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient25(self, coefficient25)



    def setCoefficient26(self, coefficient26: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient26(self, coefficient26)



    def setCoefficient27(self, coefficient27: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient27(self, coefficient27)



    def setCoefficient28(self, coefficient28: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient28(self, coefficient28)



    def setCoefficient29(self, coefficient29: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient29(self, coefficient29)



    def setCoefficient30(self, coefficient30: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient30(self, coefficient30)



    def setCoefficient31(self, coefficient31: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient31(self, coefficient31)



    def setCoefficient32(self, coefficient32: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient32(self, coefficient32)



    def setCoefficient33(self, coefficient33: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient33(self, coefficient33)



    def setCoefficient34(self, coefficient34: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient34(self, coefficient34)



    def setCoefficient35(self, coefficient35: 'double') -> "bool":

        return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_setCoefficient35(self, coefficient35)

CoolingTowerPerformanceCoolTools_swigregister = _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_swigregister

CoolingTowerPerformanceCoolTools_swigregister(CoolingTowerPerformanceCoolTools)



def CoolingTowerPerformanceCoolTools_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_iddObjectType()

CoolingTowerPerformanceCoolTools_iddObjectType = _openstudiomodelhvac.CoolingTowerPerformanceCoolTools_iddObjectType





def toCoolingTowerPerformanceCoolTools(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::CoolingTowerPerformanceCoolTools >":

    return _openstudiomodelhvac.toCoolingTowerPerformanceCoolTools(idfObject)

toCoolingTowerPerformanceCoolTools = _openstudiomodelhvac.toCoolingTowerPerformanceCoolTools



def getCoolingTowerPerformanceCoolTools(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::CoolingTowerPerformanceCoolTools >":

    return _openstudiomodelhvac.getCoolingTowerPerformanceCoolTools(t_model, t_handle)

getCoolingTowerPerformanceCoolTools = _openstudiomodelhvac.getCoolingTowerPerformanceCoolTools



def getCoolingTowerPerformanceCoolToolss(t_model: 'Model') -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools,std::allocator< openstudio::model::CoolingTowerPerformanceCoolTools > >":

    return _openstudiomodelhvac.getCoolingTowerPerformanceCoolToolss(t_model)

getCoolingTowerPerformanceCoolToolss = _openstudiomodelhvac.getCoolingTowerPerformanceCoolToolss



def getCoolingTowerPerformanceCoolToolsByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::CoolingTowerPerformanceCoolTools >":

    return _openstudiomodelhvac.getCoolingTowerPerformanceCoolToolsByName(t_model, t_name)

getCoolingTowerPerformanceCoolToolsByName = _openstudiomodelhvac.getCoolingTowerPerformanceCoolToolsByName



def getCoolingTowerPerformanceCoolToolssByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::CoolingTowerPerformanceCoolTools,std::allocator< openstudio::model::CoolingTowerPerformanceCoolTools > >":

    return _openstudiomodelhvac.getCoolingTowerPerformanceCoolToolssByName(t_model, t_name, t_exactMatch)

getCoolingTowerPerformanceCoolToolssByName = _openstudiomodelhvac.getCoolingTowerPerformanceCoolToolssByName

class SupplyAirflowRatioField(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SupplyAirflowRatioField, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SupplyAirflowRatioField, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SupplyAirflowRatioField(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_getmethods__["fromHeatingRatio"] = lambda x: _openstudiomodelhvac.SupplyAirflowRatioField_fromHeatingRatio

    if _newclass:

        fromHeatingRatio = staticmethod(_openstudiomodelhvac.SupplyAirflowRatioField_fromHeatingRatio)

    __swig_getmethods__["fromCoolingRatio"] = lambda x: _openstudiomodelhvac.SupplyAirflowRatioField_fromCoolingRatio

    if _newclass:

        fromCoolingRatio = staticmethod(_openstudiomodelhvac.SupplyAirflowRatioField_fromCoolingRatio)



    def heatingRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SupplyAirflowRatioField_heatingRatio(self)



    def coolingRatio(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SupplyAirflowRatioField_coolingRatio(self)



    def isHeatingRatioAutosized(self) -> "bool":

        return _openstudiomodelhvac.SupplyAirflowRatioField_isHeatingRatioAutosized(self)



    def isCoolingRatioAutosized(self) -> "bool":

        return _openstudiomodelhvac.SupplyAirflowRatioField_isCoolingRatioAutosized(self)

    __swig_destroy__ = _openstudiomodelhvac.delete_SupplyAirflowRatioField

    __del__ = lambda self: None

SupplyAirflowRatioField_swigregister = _openstudiomodelhvac.SupplyAirflowRatioField_swigregister

SupplyAirflowRatioField_swigregister(SupplyAirflowRatioField)



def SupplyAirflowRatioField_fromHeatingRatio(heatingRatio: 'double') -> "openstudio::model::SupplyAirflowRatioField":

    return _openstudiomodelhvac.SupplyAirflowRatioField_fromHeatingRatio(heatingRatio)

SupplyAirflowRatioField_fromHeatingRatio = _openstudiomodelhvac.SupplyAirflowRatioField_fromHeatingRatio



def SupplyAirflowRatioField_fromCoolingRatio(coolingRatio: 'double') -> "openstudio::model::SupplyAirflowRatioField":

    return _openstudiomodelhvac.SupplyAirflowRatioField_fromCoolingRatio(coolingRatio)

SupplyAirflowRatioField_fromCoolingRatio = _openstudiomodelhvac.SupplyAirflowRatioField_fromCoolingRatio



class UnitarySystemPerformanceMultispeed(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitarySystemPerformanceMultispeed, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, UnitarySystemPerformanceMultispeed, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_UnitarySystemPerformanceMultispeed(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_UnitarySystemPerformanceMultispeed

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.UnitarySystemPerformanceMultispeed_iddObjectType)



    def singleModeOperation(self) -> "bool":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_singleModeOperation(self)



    def supplyAirflowRatioFields(self) -> "std::vector< openstudio::model::SupplyAirflowRatioField,std::allocator< openstudio::model::SupplyAirflowRatioField > >":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_supplyAirflowRatioFields(self)



    def setSingleModeOperation(self, singleMode: 'bool') -> "bool":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_setSingleModeOperation(self, singleMode)



    def resetSingleModeOperation(self) -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_resetSingleModeOperation(self)



    def setSupplyAirflowRatioFields(self, airflowRatioFields: 'SupplyAirflowRatioFieldVector') -> "bool":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_setSupplyAirflowRatioFields(self, airflowRatioFields)



    def addSupplyAirflowRatioField(self, *args) -> "bool":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_addSupplyAirflowRatioField(self, *args)



    def resetSupplyAirflowRatioFields(self) -> "void":

        return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_resetSupplyAirflowRatioFields(self)

UnitarySystemPerformanceMultispeed_swigregister = _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_swigregister

UnitarySystemPerformanceMultispeed_swigregister(UnitarySystemPerformanceMultispeed)



def UnitarySystemPerformanceMultispeed_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_iddObjectType()

UnitarySystemPerformanceMultispeed_iddObjectType = _openstudiomodelhvac.UnitarySystemPerformanceMultispeed_iddObjectType





def toUnitarySystemPerformanceMultispeed(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::UnitarySystemPerformanceMultispeed >":

    return _openstudiomodelhvac.toUnitarySystemPerformanceMultispeed(idfObject)

toUnitarySystemPerformanceMultispeed = _openstudiomodelhvac.toUnitarySystemPerformanceMultispeed



def getUnitarySystemPerformanceMultispeed(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::UnitarySystemPerformanceMultispeed >":

    return _openstudiomodelhvac.getUnitarySystemPerformanceMultispeed(t_model, t_handle)

getUnitarySystemPerformanceMultispeed = _openstudiomodelhvac.getUnitarySystemPerformanceMultispeed



def getUnitarySystemPerformanceMultispeeds(t_model: 'Model') -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed,std::allocator< openstudio::model::UnitarySystemPerformanceMultispeed > >":

    return _openstudiomodelhvac.getUnitarySystemPerformanceMultispeeds(t_model)

getUnitarySystemPerformanceMultispeeds = _openstudiomodelhvac.getUnitarySystemPerformanceMultispeeds



def getUnitarySystemPerformanceMultispeedByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::UnitarySystemPerformanceMultispeed >":

    return _openstudiomodelhvac.getUnitarySystemPerformanceMultispeedByName(t_model, t_name)

getUnitarySystemPerformanceMultispeedByName = _openstudiomodelhvac.getUnitarySystemPerformanceMultispeedByName



def getUnitarySystemPerformanceMultispeedsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::UnitarySystemPerformanceMultispeed,std::allocator< openstudio::model::UnitarySystemPerformanceMultispeed > >":

    return _openstudiomodelhvac.getUnitarySystemPerformanceMultispeedsByName(t_model, t_name, t_exactMatch)

getUnitarySystemPerformanceMultispeedsByName = _openstudiomodelhvac.getUnitarySystemPerformanceMultispeedsByName

class ZoneMixing(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneMixing, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneMixing, name)

    __repr__ = _swig_repr



    def __init__(self, thermalZone: 'ThermalZone'):

        this = _openstudiomodelhvac.new_ZoneMixing(thermalZone)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneMixing

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ZoneMixing_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ZoneMixing_iddObjectType)



    def zone(self) -> "openstudio::model::ThermalZone":

        return _openstudiomodelhvac.ZoneMixing_zone(self)



    def schedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.ZoneMixing_schedule(self)



    def designFlowRateCalculationMethod(self) -> "std::string":

        return _openstudiomodelhvac.ZoneMixing_designFlowRateCalculationMethod(self)



    def designFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ZoneMixing_designFlowRate(self)



    def flowRateperZoneFloorArea(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ZoneMixing_flowRateperZoneFloorArea(self)



    def flowRateperPerson(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ZoneMixing_flowRateperPerson(self)



    def airChangesperHour(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ZoneMixing_airChangesperHour(self)



    def sourceZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.ZoneMixing_sourceZone(self)



    def deltaTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ZoneMixing_deltaTemperature(self)



    def deltaTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneMixing_deltaTemperatureSchedule(self)



    def minimumZoneTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneMixing_minimumZoneTemperatureSchedule(self)



    def maximumZoneTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneMixing_maximumZoneTemperatureSchedule(self)



    def minimumSourceZoneTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneMixing_minimumSourceZoneTemperatureSchedule(self)



    def maximumSourceZoneTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneMixing_maximumSourceZoneTemperatureSchedule(self)



    def minimumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneMixing_minimumOutdoorTemperatureSchedule(self)



    def maximumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneMixing_maximumOutdoorTemperatureSchedule(self)



    def setSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setSchedule(self, schedule)



    def setDesignFlowRate(self, designFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setDesignFlowRate(self, designFlowRate)



    def setFlowRateperZoneFloorArea(self, flowRateperZoneFloorArea: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setFlowRateperZoneFloorArea(self, flowRateperZoneFloorArea)



    def setFlowRateperPerson(self, flowRateperPerson: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setFlowRateperPerson(self, flowRateperPerson)



    def setAirChangesperHour(self, airChangesperHour: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setAirChangesperHour(self, airChangesperHour)



    def setSourceZone(self, zone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setSourceZone(self, zone)



    def resetSourceZone(self) -> "void":

        return _openstudiomodelhvac.ZoneMixing_resetSourceZone(self)



    def setDeltaTemperature(self, deltaTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setDeltaTemperature(self, deltaTemperature)



    def resetDeltaTemperature(self) -> "void":

        return _openstudiomodelhvac.ZoneMixing_resetDeltaTemperature(self)



    def setDeltaTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setDeltaTemperatureSchedule(self, schedule)



    def resetDeltaTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneMixing_resetDeltaTemperatureSchedule(self)



    def setMinimumZoneTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setMinimumZoneTemperatureSchedule(self, schedule)



    def resetMinimumZoneTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneMixing_resetMinimumZoneTemperatureSchedule(self)



    def setMaximumZoneTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setMaximumZoneTemperatureSchedule(self, schedule)



    def resetMaximumZoneTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneMixing_resetMaximumZoneTemperatureSchedule(self)



    def setMinimumSourceZoneTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setMinimumSourceZoneTemperatureSchedule(self, schedule)



    def resetMinimumSourceZoneTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneMixing_resetMinimumSourceZoneTemperatureSchedule(self)



    def setMaximumSourceZoneTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setMaximumSourceZoneTemperatureSchedule(self, schedule)



    def resetMaximumSourceZoneTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneMixing_resetMaximumSourceZoneTemperatureSchedule(self)



    def setMinimumOutdoorTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setMinimumOutdoorTemperatureSchedule(self, schedule)



    def resetMinimumOutdoorTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneMixing_resetMinimumOutdoorTemperatureSchedule(self)



    def setMaximumOutdoorTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneMixing_setMaximumOutdoorTemperatureSchedule(self, schedule)



    def resetMaximumOutdoorTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneMixing_resetMaximumOutdoorTemperatureSchedule(self)

ZoneMixing_swigregister = _openstudiomodelhvac.ZoneMixing_swigregister

ZoneMixing_swigregister(ZoneMixing)



def ZoneMixing_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ZoneMixing_iddObjectType()

ZoneMixing_iddObjectType = _openstudiomodelhvac.ZoneMixing_iddObjectType





def toZoneMixing(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneMixing >":

    return _openstudiomodelhvac.toZoneMixing(idfObject)

toZoneMixing = _openstudiomodelhvac.toZoneMixing



def getZoneMixing(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneMixing >":

    return _openstudiomodelhvac.getZoneMixing(t_model, t_handle)

getZoneMixing = _openstudiomodelhvac.getZoneMixing



def getZoneMixings(t_model: 'Model') -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":

    return _openstudiomodelhvac.getZoneMixings(t_model)

getZoneMixings = _openstudiomodelhvac.getZoneMixings



def getZoneMixingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneMixing >":

    return _openstudiomodelhvac.getZoneMixingByName(t_model, t_name)

getZoneMixingByName = _openstudiomodelhvac.getZoneMixingByName



def getZoneMixingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneMixing,std::allocator< openstudio::model::ZoneMixing > >":

    return _openstudiomodelhvac.getZoneMixingsByName(t_model, t_name, t_exactMatch)

getZoneMixingsByName = _openstudiomodelhvac.getZoneMixingsByName

class ZoneVentilationDesignFlowRate(ZoneHVACComponent):

    __swig_setmethods__ = {}

    for _s in [ZoneHVACComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneVentilationDesignFlowRate, name, value)

    __swig_getmethods__ = {}

    for _s in [ZoneHVACComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ZoneVentilationDesignFlowRate, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ZoneVentilationDesignFlowRate(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ZoneVentilationDesignFlowRate

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ZoneVentilationDesignFlowRate_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ZoneVentilationDesignFlowRate_iddObjectType)

    __swig_getmethods__["designFlowRateCalculationMethodValues"] = lambda x: _openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRateCalculationMethodValues

    if _newclass:

        designFlowRateCalculationMethodValues = staticmethod(_openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRateCalculationMethodValues)

    __swig_getmethods__["ventilationTypeValues"] = lambda x: _openstudiomodelhvac.ZoneVentilationDesignFlowRate_ventilationTypeValues

    if _newclass:

        ventilationTypeValues = staticmethod(_openstudiomodelhvac.ZoneVentilationDesignFlowRate_ventilationTypeValues)



    def schedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_schedule(self)



    def designFlowRateCalculationMethod(self) -> "std::string":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRateCalculationMethod(self)



    def designFlowRate(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRate(self)



    def flowRateperZoneFloorArea(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_flowRateperZoneFloorArea(self)



    def flowRateperPerson(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_flowRateperPerson(self)



    def airChangesperHour(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_airChangesperHour(self)



    def ventilationType(self) -> "std::string":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_ventilationType(self)



    def fanPressureRise(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_fanPressureRise(self)



    def fanTotalEfficiency(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_fanTotalEfficiency(self)



    def constantTermCoefficient(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_constantTermCoefficient(self)



    def temperatureTermCoefficient(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_temperatureTermCoefficient(self)



    def velocityTermCoefficient(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_velocityTermCoefficient(self)



    def velocitySquaredTermCoefficient(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_velocitySquaredTermCoefficient(self)



    def minimumIndoorTemperature(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_minimumIndoorTemperature(self)



    def minimumIndoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_minimumIndoorTemperatureSchedule(self)



    def maximumIndoorTemperature(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumIndoorTemperature(self)



    def maximumIndoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumIndoorTemperatureSchedule(self)



    def deltaTemperature(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_deltaTemperature(self)



    def deltaTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_deltaTemperatureSchedule(self)



    def minimumOutdoorTemperature(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_minimumOutdoorTemperature(self)



    def minimumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_minimumOutdoorTemperatureSchedule(self)



    def maximumOutdoorTemperature(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumOutdoorTemperature(self)



    def maximumOutdoorTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumOutdoorTemperatureSchedule(self)



    def maximumWindSpeed(self) -> "double":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_maximumWindSpeed(self)



    def setSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setSchedule(self, schedule)



    def setDesignFlowRateCalculationMethod(self, designFlowRateCalculationMethod: 'std::string') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setDesignFlowRateCalculationMethod(self, designFlowRateCalculationMethod)



    def setDesignFlowRate(self, designFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setDesignFlowRate(self, designFlowRate)



    def setFlowRateperZoneFloorArea(self, flowRateperZoneFloorArea: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setFlowRateperZoneFloorArea(self, flowRateperZoneFloorArea)



    def setFlowRateperPerson(self, flowRateperPerson: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setFlowRateperPerson(self, flowRateperPerson)



    def setAirChangesperHour(self, airChangesperHour: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setAirChangesperHour(self, airChangesperHour)



    def setVentilationType(self, ventilationType: 'std::string') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setVentilationType(self, ventilationType)



    def setFanPressureRise(self, fanPressureRise: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setFanPressureRise(self, fanPressureRise)



    def setFanTotalEfficiency(self, fanTotalEfficiency: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setFanTotalEfficiency(self, fanTotalEfficiency)



    def setConstantTermCoefficient(self, constantTermCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setConstantTermCoefficient(self, constantTermCoefficient)



    def setTemperatureTermCoefficient(self, temperatureTermCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setTemperatureTermCoefficient(self, temperatureTermCoefficient)



    def setVelocityTermCoefficient(self, velocityTermCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setVelocityTermCoefficient(self, velocityTermCoefficient)



    def setVelocitySquaredTermCoefficient(self, velocitySquaredTermCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setVelocitySquaredTermCoefficient(self, velocitySquaredTermCoefficient)



    def setMinimumIndoorTemperature(self, minimumIndoorTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMinimumIndoorTemperature(self, minimumIndoorTemperature)



    def setMinimumIndoorTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMinimumIndoorTemperatureSchedule(self, schedule)



    def resetMinimumIndoorTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetMinimumIndoorTemperatureSchedule(self)



    def setMaximumIndoorTemperature(self, maximumIndoorTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumIndoorTemperature(self, maximumIndoorTemperature)



    def setMaximumIndoorTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumIndoorTemperatureSchedule(self, schedule)



    def resetMaximumIndoorTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetMaximumIndoorTemperatureSchedule(self)



    def setDeltaTemperature(self, deltaTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setDeltaTemperature(self, deltaTemperature)



    def setDeltaTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setDeltaTemperatureSchedule(self, schedule)



    def resetDeltaTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetDeltaTemperatureSchedule(self)



    def setMinimumOutdoorTemperature(self, minimumOutdoorTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMinimumOutdoorTemperature(self, minimumOutdoorTemperature)



    def setMinimumOutdoorTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMinimumOutdoorTemperatureSchedule(self, schedule)



    def resetMinimumOutdoorTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetMinimumOutdoorTemperatureSchedule(self)



    def setMaximumOutdoorTemperature(self, maximumOutdoorTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumOutdoorTemperature(self, maximumOutdoorTemperature)



    def setMaximumOutdoorTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumOutdoorTemperatureSchedule(self, schedule)



    def resetMaximumOutdoorTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_resetMaximumOutdoorTemperatureSchedule(self)



    def setMaximumWindSpeed(self, maximumWindSpeed: 'double') -> "bool":

        return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_setMaximumWindSpeed(self, maximumWindSpeed)

ZoneVentilationDesignFlowRate_swigregister = _openstudiomodelhvac.ZoneVentilationDesignFlowRate_swigregister

ZoneVentilationDesignFlowRate_swigregister(ZoneVentilationDesignFlowRate)



def ZoneVentilationDesignFlowRate_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_iddObjectType()

ZoneVentilationDesignFlowRate_iddObjectType = _openstudiomodelhvac.ZoneVentilationDesignFlowRate_iddObjectType



def ZoneVentilationDesignFlowRate_designFlowRateCalculationMethodValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRateCalculationMethodValues()

ZoneVentilationDesignFlowRate_designFlowRateCalculationMethodValues = _openstudiomodelhvac.ZoneVentilationDesignFlowRate_designFlowRateCalculationMethodValues



def ZoneVentilationDesignFlowRate_ventilationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ZoneVentilationDesignFlowRate_ventilationTypeValues()

ZoneVentilationDesignFlowRate_ventilationTypeValues = _openstudiomodelhvac.ZoneVentilationDesignFlowRate_ventilationTypeValues





def toZoneVentilationDesignFlowRate(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ZoneVentilationDesignFlowRate >":

    return _openstudiomodelhvac.toZoneVentilationDesignFlowRate(idfObject)

toZoneVentilationDesignFlowRate = _openstudiomodelhvac.toZoneVentilationDesignFlowRate



def getZoneVentilationDesignFlowRate(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ZoneVentilationDesignFlowRate >":

    return _openstudiomodelhvac.getZoneVentilationDesignFlowRate(t_model, t_handle)

getZoneVentilationDesignFlowRate = _openstudiomodelhvac.getZoneVentilationDesignFlowRate



def getZoneVentilationDesignFlowRates(t_model: 'Model') -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate,std::allocator< openstudio::model::ZoneVentilationDesignFlowRate > >":

    return _openstudiomodelhvac.getZoneVentilationDesignFlowRates(t_model)

getZoneVentilationDesignFlowRates = _openstudiomodelhvac.getZoneVentilationDesignFlowRates



def getZoneVentilationDesignFlowRateByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ZoneVentilationDesignFlowRate >":

    return _openstudiomodelhvac.getZoneVentilationDesignFlowRateByName(t_model, t_name)

getZoneVentilationDesignFlowRateByName = _openstudiomodelhvac.getZoneVentilationDesignFlowRateByName



def getZoneVentilationDesignFlowRatesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ZoneVentilationDesignFlowRate,std::allocator< openstudio::model::ZoneVentilationDesignFlowRate > >":

    return _openstudiomodelhvac.getZoneVentilationDesignFlowRatesByName(t_model, t_name, t_exactMatch)

getZoneVentilationDesignFlowRatesByName = _openstudiomodelhvac.getZoneVentilationDesignFlowRatesByName

class WaterHeaterMixed(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterHeaterMixed, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WaterHeaterMixed, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_WaterHeaterMixed(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterHeaterMixed

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.WaterHeaterMixed_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.WaterHeaterMixed_iddObjectType)

    __swig_getmethods__["heaterControlTypeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterMixed_heaterControlTypeValues

    if _newclass:

        heaterControlTypeValues = staticmethod(_openstudiomodelhvac.WaterHeaterMixed_heaterControlTypeValues)

    __swig_getmethods__["heaterFuelTypeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterMixed_heaterFuelTypeValues

    if _newclass:

        heaterFuelTypeValues = staticmethod(_openstudiomodelhvac.WaterHeaterMixed_heaterFuelTypeValues)

    __swig_getmethods__["offCycleParasiticFuelTypeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelTypeValues

    if _newclass:

        offCycleParasiticFuelTypeValues = staticmethod(_openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelTypeValues)

    __swig_getmethods__["onCycleParasiticFuelTypeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelTypeValues

    if _newclass:

        onCycleParasiticFuelTypeValues = staticmethod(_openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelTypeValues)

    __swig_getmethods__["ambientTemperatureIndicatorValues"] = lambda x: _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureIndicatorValues

    if _newclass:

        ambientTemperatureIndicatorValues = staticmethod(_openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureIndicatorValues)

    __swig_getmethods__["sourceSideFlowControlModeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterMixed_sourceSideFlowControlModeValues

    if _newclass:

        sourceSideFlowControlModeValues = staticmethod(_openstudiomodelhvac.WaterHeaterMixed_sourceSideFlowControlModeValues)



    def tankVolume(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_tankVolume(self)



    def getTankVolume(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getTankVolume(self, returnIP)



    def isTankVolumeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isTankVolumeDefaulted(self)



    def isTankVolumeAutosized(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isTankVolumeAutosized(self)



    def setpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterHeaterMixed_setpointTemperatureSchedule(self)



    def deadbandTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_deadbandTemperatureDifference(self)



    def getDeadbandTemperatureDifference(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getDeadbandTemperatureDifference(self, returnIP)



    def isDeadbandTemperatureDifferenceDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isDeadbandTemperatureDifferenceDefaulted(self)



    def maximumTemperatureLimit(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_maximumTemperatureLimit(self)



    def getMaximumTemperatureLimit(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getMaximumTemperatureLimit(self, returnIP)



    def heaterControlType(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterMixed_heaterControlType(self)



    def isHeaterControlTypeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isHeaterControlTypeDefaulted(self)



    def heaterMaximumCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_heaterMaximumCapacity(self)



    def getHeaterMaximumCapacity(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getHeaterMaximumCapacity(self, returnIP)



    def isHeaterMaximumCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isHeaterMaximumCapacityAutosized(self)



    def heaterMinimumCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_heaterMinimumCapacity(self)



    def getHeaterMinimumCapacity(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getHeaterMinimumCapacity(self, returnIP)



    def heaterIgnitionMinimumFlowRate(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_heaterIgnitionMinimumFlowRate(self)



    def getHeaterIgnitionMinimumFlowRate(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getHeaterIgnitionMinimumFlowRate(self, returnIP)



    def isHeaterIgnitionMinimumFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isHeaterIgnitionMinimumFlowRateDefaulted(self)



    def heaterIgnitionDelay(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_heaterIgnitionDelay(self)



    def getHeaterIgnitionDelay(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getHeaterIgnitionDelay(self, returnIP)



    def isHeaterIgnitionDelayDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isHeaterIgnitionDelayDefaulted(self)



    def heaterFuelType(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterMixed_heaterFuelType(self)



    def heaterThermalEfficiency(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_heaterThermalEfficiency(self)



    def getHeaterThermalEfficiency(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getHeaterThermalEfficiency(self, returnIP)



    def partLoadFactorCurve(self) -> "boost::optional< openstudio::model::CurveCubic >":

        return _openstudiomodelhvac.WaterHeaterMixed_partLoadFactorCurve(self)



    def offCycleParasiticFuelConsumptionRate(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelConsumptionRate(self)



    def getOffCycleParasiticFuelConsumptionRate(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getOffCycleParasiticFuelConsumptionRate(self, returnIP)



    def isOffCycleParasiticFuelConsumptionRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isOffCycleParasiticFuelConsumptionRateDefaulted(self)



    def offCycleParasiticFuelType(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelType(self)



    def offCycleParasiticHeatFractiontoTank(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticHeatFractiontoTank(self)



    def getOffCycleParasiticHeatFractiontoTank(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getOffCycleParasiticHeatFractiontoTank(self, returnIP)



    def isOffCycleParasiticHeatFractiontoTankDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isOffCycleParasiticHeatFractiontoTankDefaulted(self)



    def onCycleParasiticFuelConsumptionRate(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelConsumptionRate(self)



    def getOnCycleParasiticFuelConsumptionRate(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getOnCycleParasiticFuelConsumptionRate(self, returnIP)



    def isOnCycleParasiticFuelConsumptionRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isOnCycleParasiticFuelConsumptionRateDefaulted(self)



    def onCycleParasiticFuelType(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelType(self)



    def onCycleParasiticHeatFractiontoTank(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticHeatFractiontoTank(self)



    def getOnCycleParasiticHeatFractiontoTank(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getOnCycleParasiticHeatFractiontoTank(self, returnIP)



    def isOnCycleParasiticHeatFractiontoTankDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isOnCycleParasiticHeatFractiontoTankDefaulted(self)



    def ambientTemperatureIndicator(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureIndicator(self)



    def ambientTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureSchedule(self)



    def ambientTemperatureThermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureThermalZone(self)



    def ambientTemperatureOutdoorAirNodeName(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureOutdoorAirNodeName(self)



    def offCycleLossCoefficienttoAmbientTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_offCycleLossCoefficienttoAmbientTemperature(self)



    def getOffCycleLossCoefficienttoAmbientTemperature(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getOffCycleLossCoefficienttoAmbientTemperature(self, returnIP)



    def offCycleLossFractiontoThermalZone(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_offCycleLossFractiontoThermalZone(self)



    def getOffCycleLossFractiontoThermalZone(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getOffCycleLossFractiontoThermalZone(self, returnIP)



    def isOffCycleLossFractiontoThermalZoneDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isOffCycleLossFractiontoThermalZoneDefaulted(self)



    def onCycleLossCoefficienttoAmbientTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_onCycleLossCoefficienttoAmbientTemperature(self)



    def getOnCycleLossCoefficienttoAmbientTemperature(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getOnCycleLossCoefficienttoAmbientTemperature(self, returnIP)



    def onCycleLossFractiontoThermalZone(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_onCycleLossFractiontoThermalZone(self)



    def getOnCycleLossFractiontoThermalZone(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getOnCycleLossFractiontoThermalZone(self, returnIP)



    def isOnCycleLossFractiontoThermalZoneDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isOnCycleLossFractiontoThermalZoneDefaulted(self)



    def peakUseFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_peakUseFlowRate(self)



    def getPeakUseFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getPeakUseFlowRate(self, returnIP)



    def useFlowRateFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterHeaterMixed_useFlowRateFractionSchedule(self)



    def coldWaterSupplyTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterHeaterMixed_coldWaterSupplyTemperatureSchedule(self)



    def useSideEffectiveness(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_useSideEffectiveness(self)



    def getUseSideEffectiveness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getUseSideEffectiveness(self, returnIP)



    def isUseSideEffectivenessDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isUseSideEffectivenessDefaulted(self)



    def sourceSideEffectiveness(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_sourceSideEffectiveness(self)



    def getSourceSideEffectiveness(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getSourceSideEffectiveness(self, returnIP)



    def isSourceSideEffectivenessDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isSourceSideEffectivenessDefaulted(self)



    def useSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_useSideDesignFlowRate(self)



    def getUseSideDesignFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getUseSideDesignFlowRate(self, returnIP)



    def isUseSideDesignFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isUseSideDesignFlowRateDefaulted(self)



    def isUseSideDesignFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isUseSideDesignFlowRateAutosized(self)



    def sourceSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_sourceSideDesignFlowRate(self)



    def getSourceSideDesignFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getSourceSideDesignFlowRate(self, returnIP)



    def isSourceSideDesignFlowRateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isSourceSideDesignFlowRateDefaulted(self)



    def isSourceSideDesignFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isSourceSideDesignFlowRateAutosized(self)



    def indirectWaterHeatingRecoveryTime(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterMixed_indirectWaterHeatingRecoveryTime(self)



    def getIndirectWaterHeatingRecoveryTime(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterHeaterMixed_getIndirectWaterHeatingRecoveryTime(self, returnIP)



    def isIndirectWaterHeatingRecoveryTimeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_isIndirectWaterHeatingRecoveryTimeDefaulted(self)



    def sourceSideFlowControlMode(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterMixed_sourceSideFlowControlMode(self)



    def indirectAlternateSetpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterHeaterMixed_indirectAlternateSetpointTemperatureSchedule(self)



    def endUseSubcategory(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterMixed_endUseSubcategory(self)



    def setTankVolume(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setTankVolume(self, *args)



    def resetTankVolume(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetTankVolume(self)



    def autosizeTankVolume(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_autosizeTankVolume(self)



    def setSetpointTemperatureSchedule(self, setpointTemperatureSchedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setSetpointTemperatureSchedule(self, setpointTemperatureSchedule)



    def resetSetpointTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetSetpointTemperatureSchedule(self)



    def setDeadbandTemperatureDifference(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setDeadbandTemperatureDifference(self, *args)



    def resetDeadbandTemperatureDifference(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetDeadbandTemperatureDifference(self)



    def setMaximumTemperatureLimit(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setMaximumTemperatureLimit(self, *args)



    def resetMaximumTemperatureLimit(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetMaximumTemperatureLimit(self)



    def setHeaterControlType(self, heaterControlType: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterControlType(self, heaterControlType)



    def resetHeaterControlType(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterControlType(self)



    def setHeaterMaximumCapacity(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterMaximumCapacity(self, *args)



    def resetHeaterMaximumCapacity(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterMaximumCapacity(self)



    def autosizeHeaterMaximumCapacity(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_autosizeHeaterMaximumCapacity(self)



    def setHeaterMinimumCapacity(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterMinimumCapacity(self, *args)



    def resetHeaterMinimumCapacity(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterMinimumCapacity(self)



    def setHeaterIgnitionMinimumFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterIgnitionMinimumFlowRate(self, *args)



    def resetHeaterIgnitionMinimumFlowRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterIgnitionMinimumFlowRate(self)



    def setHeaterIgnitionDelay(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterIgnitionDelay(self, *args)



    def resetHeaterIgnitionDelay(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterIgnitionDelay(self)



    def setHeaterFuelType(self, heaterFuelType: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterFuelType(self, heaterFuelType)



    def setHeaterThermalEfficiency(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setHeaterThermalEfficiency(self, *args)



    def resetHeaterThermalEfficiency(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetHeaterThermalEfficiency(self)



    def setPartLoadFactorCurve(self, partLoadFactorCurve: 'CurveCubic') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setPartLoadFactorCurve(self, partLoadFactorCurve)



    def resetPartLoadFactorCurve(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetPartLoadFactorCurve(self)



    def setOffCycleParasiticFuelConsumptionRate(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleParasiticFuelConsumptionRate(self, *args)



    def resetOffCycleParasiticFuelConsumptionRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleParasiticFuelConsumptionRate(self)



    def setOffCycleParasiticFuelType(self, offCycleParasiticFuelType: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleParasiticFuelType(self, offCycleParasiticFuelType)



    def resetOffCycleParasiticFuelType(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleParasiticFuelType(self)



    def setOffCycleParasiticHeatFractiontoTank(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleParasiticHeatFractiontoTank(self, *args)



    def resetOffCycleParasiticHeatFractiontoTank(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleParasiticHeatFractiontoTank(self)



    def setOnCycleParasiticFuelConsumptionRate(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleParasiticFuelConsumptionRate(self, *args)



    def resetOnCycleParasiticFuelConsumptionRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleParasiticFuelConsumptionRate(self)



    def setOnCycleParasiticFuelType(self, onCycleParasiticFuelType: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleParasiticFuelType(self, onCycleParasiticFuelType)



    def resetOnCycleParasiticFuelType(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleParasiticFuelType(self)



    def setOnCycleParasiticHeatFractiontoTank(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleParasiticHeatFractiontoTank(self, *args)



    def resetOnCycleParasiticHeatFractiontoTank(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleParasiticHeatFractiontoTank(self)



    def setAmbientTemperatureIndicator(self, ambientTemperatureIndicator: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setAmbientTemperatureIndicator(self, ambientTemperatureIndicator)



    def setAmbientTemperatureSchedule(self, ambientTemperatureSchedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setAmbientTemperatureSchedule(self, ambientTemperatureSchedule)



    def resetAmbientTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetAmbientTemperatureSchedule(self)



    def setAmbientTemperatureThermalZone(self, ambientTemperatureThermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setAmbientTemperatureThermalZone(self, ambientTemperatureThermalZone)



    def resetAmbientTemperatureThermalZone(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetAmbientTemperatureThermalZone(self)



    def setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName)



    def resetAmbientTemperatureOutdoorAirNodeName(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetAmbientTemperatureOutdoorAirNodeName(self)



    def setOffCycleLossCoefficienttoAmbientTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleLossCoefficienttoAmbientTemperature(self, *args)



    def resetOffCycleLossCoefficienttoAmbientTemperature(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleLossCoefficienttoAmbientTemperature(self)



    def setOffCycleLossFractiontoThermalZone(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOffCycleLossFractiontoThermalZone(self, *args)



    def resetOffCycleLossFractiontoThermalZone(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOffCycleLossFractiontoThermalZone(self)



    def setOnCycleLossCoefficienttoAmbientTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleLossCoefficienttoAmbientTemperature(self, *args)



    def resetOnCycleLossCoefficienttoAmbientTemperature(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleLossCoefficienttoAmbientTemperature(self)



    def setOnCycleLossFractiontoThermalZone(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setOnCycleLossFractiontoThermalZone(self, *args)



    def resetOnCycleLossFractiontoThermalZone(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetOnCycleLossFractiontoThermalZone(self)



    def setPeakUseFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setPeakUseFlowRate(self, *args)



    def resetPeakUseFlowRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetPeakUseFlowRate(self)



    def setUseFlowRateFractionSchedule(self, useFlowRateFractionSchedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setUseFlowRateFractionSchedule(self, useFlowRateFractionSchedule)



    def resetUseFlowRateFractionSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetUseFlowRateFractionSchedule(self)



    def setColdWaterSupplyTemperatureSchedule(self, coldWaterSupplyTemperatureSchedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setColdWaterSupplyTemperatureSchedule(self, coldWaterSupplyTemperatureSchedule)



    def resetColdWaterSupplyTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetColdWaterSupplyTemperatureSchedule(self)



    def setUseSideEffectiveness(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setUseSideEffectiveness(self, *args)



    def resetUseSideEffectiveness(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetUseSideEffectiveness(self)



    def setSourceSideEffectiveness(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setSourceSideEffectiveness(self, *args)



    def resetSourceSideEffectiveness(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetSourceSideEffectiveness(self)



    def setUseSideDesignFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setUseSideDesignFlowRate(self, *args)



    def resetUseSideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetUseSideDesignFlowRate(self)



    def autosizeUseSideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_autosizeUseSideDesignFlowRate(self)



    def setSourceSideDesignFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setSourceSideDesignFlowRate(self, *args)



    def resetSourceSideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetSourceSideDesignFlowRate(self)



    def autosizeSourceSideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_autosizeSourceSideDesignFlowRate(self)



    def setIndirectWaterHeatingRecoveryTime(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setIndirectWaterHeatingRecoveryTime(self, *args)



    def resetIndirectWaterHeatingRecoveryTime(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetIndirectWaterHeatingRecoveryTime(self)



    def autosizedTankVolume(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_autosizedTankVolume(self)



    def autosizedHeaterMaximumCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_autosizedHeaterMaximumCapacity(self)



    def autosizedUseSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_autosizedUseSideDesignFlowRate(self)



    def autosizedSourceSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterMixed_autosizedSourceSideDesignFlowRate(self)



    def setSourceSideFlowControlMode(self, sourceSideFlowControlMode: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setSourceSideFlowControlMode(self, sourceSideFlowControlMode)



    def setIndirectAlternateSetpointTemperatureSchedule(self, indirectAlternateSetpointTemperatureSchedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setIndirectAlternateSetpointTemperatureSchedule(self, indirectAlternateSetpointTemperatureSchedule)



    def resetIndirectAlternateSetpointTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterMixed_resetIndirectAlternateSetpointTemperatureSchedule(self)



    def setEndUseSubcategory(self, endUseSubcategory: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.WaterHeaterMixed_setEndUseSubcategory(self, endUseSubcategory)

WaterHeaterMixed_swigregister = _openstudiomodelhvac.WaterHeaterMixed_swigregister

WaterHeaterMixed_swigregister(WaterHeaterMixed)



def WaterHeaterMixed_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.WaterHeaterMixed_iddObjectType()

WaterHeaterMixed_iddObjectType = _openstudiomodelhvac.WaterHeaterMixed_iddObjectType



def WaterHeaterMixed_heaterControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterMixed_heaterControlTypeValues()

WaterHeaterMixed_heaterControlTypeValues = _openstudiomodelhvac.WaterHeaterMixed_heaterControlTypeValues



def WaterHeaterMixed_heaterFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterMixed_heaterFuelTypeValues()

WaterHeaterMixed_heaterFuelTypeValues = _openstudiomodelhvac.WaterHeaterMixed_heaterFuelTypeValues



def WaterHeaterMixed_offCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelTypeValues()

WaterHeaterMixed_offCycleParasiticFuelTypeValues = _openstudiomodelhvac.WaterHeaterMixed_offCycleParasiticFuelTypeValues



def WaterHeaterMixed_onCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelTypeValues()

WaterHeaterMixed_onCycleParasiticFuelTypeValues = _openstudiomodelhvac.WaterHeaterMixed_onCycleParasiticFuelTypeValues



def WaterHeaterMixed_ambientTemperatureIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureIndicatorValues()

WaterHeaterMixed_ambientTemperatureIndicatorValues = _openstudiomodelhvac.WaterHeaterMixed_ambientTemperatureIndicatorValues



def WaterHeaterMixed_sourceSideFlowControlModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterMixed_sourceSideFlowControlModeValues()

WaterHeaterMixed_sourceSideFlowControlModeValues = _openstudiomodelhvac.WaterHeaterMixed_sourceSideFlowControlModeValues





def toWaterHeaterMixed(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WaterHeaterMixed >":

    return _openstudiomodelhvac.toWaterHeaterMixed(idfObject)

toWaterHeaterMixed = _openstudiomodelhvac.toWaterHeaterMixed



def getWaterHeaterMixed(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WaterHeaterMixed >":

    return _openstudiomodelhvac.getWaterHeaterMixed(t_model, t_handle)

getWaterHeaterMixed = _openstudiomodelhvac.getWaterHeaterMixed



def getWaterHeaterMixeds(t_model: 'Model') -> "std::vector< openstudio::model::WaterHeaterMixed,std::allocator< openstudio::model::WaterHeaterMixed > >":

    return _openstudiomodelhvac.getWaterHeaterMixeds(t_model)

getWaterHeaterMixeds = _openstudiomodelhvac.getWaterHeaterMixeds



def getWaterHeaterMixedByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WaterHeaterMixed >":

    return _openstudiomodelhvac.getWaterHeaterMixedByName(t_model, t_name)

getWaterHeaterMixedByName = _openstudiomodelhvac.getWaterHeaterMixedByName



def getWaterHeaterMixedsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WaterHeaterMixed,std::allocator< openstudio::model::WaterHeaterMixed > >":

    return _openstudiomodelhvac.getWaterHeaterMixedsByName(t_model, t_name, t_exactMatch)

getWaterHeaterMixedsByName = _openstudiomodelhvac.getWaterHeaterMixedsByName

class WaterHeaterStratified(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterHeaterStratified, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WaterHeaterStratified, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_WaterHeaterStratified(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterHeaterStratified

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.WaterHeaterStratified_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.WaterHeaterStratified_iddObjectType)

    __swig_getmethods__["tankShapeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterStratified_tankShapeValues

    if _newclass:

        tankShapeValues = staticmethod(_openstudiomodelhvac.WaterHeaterStratified_tankShapeValues)

    __swig_getmethods__["heaterPriorityControlValues"] = lambda x: _openstudiomodelhvac.WaterHeaterStratified_heaterPriorityControlValues

    if _newclass:

        heaterPriorityControlValues = staticmethod(_openstudiomodelhvac.WaterHeaterStratified_heaterPriorityControlValues)

    __swig_getmethods__["heaterFuelTypeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterStratified_heaterFuelTypeValues

    if _newclass:

        heaterFuelTypeValues = staticmethod(_openstudiomodelhvac.WaterHeaterStratified_heaterFuelTypeValues)

    __swig_getmethods__["offCycleParasiticFuelTypeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelTypeValues

    if _newclass:

        offCycleParasiticFuelTypeValues = staticmethod(_openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelTypeValues)

    __swig_getmethods__["onCycleParasiticFuelTypeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelTypeValues

    if _newclass:

        onCycleParasiticFuelTypeValues = staticmethod(_openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelTypeValues)

    __swig_getmethods__["ambientTemperatureIndicatorValues"] = lambda x: _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureIndicatorValues

    if _newclass:

        ambientTemperatureIndicatorValues = staticmethod(_openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureIndicatorValues)

    __swig_getmethods__["inletModeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterStratified_inletModeValues

    if _newclass:

        inletModeValues = staticmethod(_openstudiomodelhvac.WaterHeaterStratified_inletModeValues)

    __swig_getmethods__["sourceSideFlowControlModeValues"] = lambda x: _openstudiomodelhvac.WaterHeaterStratified_sourceSideFlowControlModeValues

    if _newclass:

        sourceSideFlowControlModeValues = staticmethod(_openstudiomodelhvac.WaterHeaterStratified_sourceSideFlowControlModeValues)



    def endUseSubcategory(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterStratified_endUseSubcategory(self)



    def tankVolume(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_tankVolume(self)



    def isTankVolumeAutosized(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_isTankVolumeAutosized(self)



    def tankHeight(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_tankHeight(self)



    def isTankHeightAutosized(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_isTankHeightAutosized(self)



    def tankShape(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterStratified_tankShape(self)



    def tankPerimeter(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_tankPerimeter(self)



    def maximumTemperatureLimit(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_maximumTemperatureLimit(self)



    def heaterPriorityControl(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterStratified_heaterPriorityControl(self)



    def heater1SetpointTemperatureSchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.WaterHeaterStratified_heater1SetpointTemperatureSchedule(self)



    def heater1DeadbandTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_heater1DeadbandTemperatureDifference(self)



    def heater1Capacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_heater1Capacity(self)



    def isHeater1CapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_isHeater1CapacityAutosized(self)



    def heater1Height(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_heater1Height(self)



    def heater2SetpointTemperatureSchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.WaterHeaterStratified_heater2SetpointTemperatureSchedule(self)



    def heater2DeadbandTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_heater2DeadbandTemperatureDifference(self)



    def heater2Capacity(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_heater2Capacity(self)



    def heater2Height(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_heater2Height(self)



    def heaterFuelType(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterStratified_heaterFuelType(self)



    def heaterThermalEfficiency(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_heaterThermalEfficiency(self)



    def offCycleParasiticFuelConsumptionRate(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelConsumptionRate(self)



    def offCycleParasiticFuelType(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelType(self)



    def offCycleParasiticHeatFractiontoTank(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticHeatFractiontoTank(self)



    def offCycleParasiticHeight(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticHeight(self)



    def onCycleParasiticFuelConsumptionRate(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelConsumptionRate(self)



    def onCycleParasiticFuelType(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelType(self)



    def onCycleParasiticHeatFractiontoTank(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticHeatFractiontoTank(self)



    def onCycleParasiticHeight(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticHeight(self)



    def ambientTemperatureIndicator(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureIndicator(self)



    def ambientTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureSchedule(self)



    def ambientTemperatureThermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureThermalZone(self)



    def ambientTemperatureOutdoorAirNodeName(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureOutdoorAirNodeName(self)



    def uniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_uniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self)



    def skinLossFractiontoZone(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_skinLossFractiontoZone(self)



    def offCycleFlueLossCoefficienttoAmbientTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_offCycleFlueLossCoefficienttoAmbientTemperature(self)



    def offCycleFlueLossFractiontoZone(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_offCycleFlueLossFractiontoZone(self)



    def peakUseFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_peakUseFlowRate(self)



    def useFlowRateFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterHeaterStratified_useFlowRateFractionSchedule(self)



    def coldWaterSupplyTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterHeaterStratified_coldWaterSupplyTemperatureSchedule(self)



    def useSideEffectiveness(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_useSideEffectiveness(self)



    def useSideInletHeight(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_useSideInletHeight(self)



    def useSideOutletHeight(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_useSideOutletHeight(self)



    def isUseSideOutletHeightAutocalculated(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_isUseSideOutletHeightAutocalculated(self)



    def sourceSideEffectiveness(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideEffectiveness(self)



    def sourceSideInletHeight(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideInletHeight(self)



    def isSourceSideInletHeightAutocalculated(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_isSourceSideInletHeightAutocalculated(self)



    def sourceSideOutletHeight(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideOutletHeight(self)



    def inletMode(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterStratified_inletMode(self)



    def useSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_useSideDesignFlowRate(self)



    def isUseSideDesignFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_isUseSideDesignFlowRateAutosized(self)



    def sourceSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideDesignFlowRate(self)



    def isSourceSideDesignFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_isSourceSideDesignFlowRateAutosized(self)



    def indirectWaterHeatingRecoveryTime(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_indirectWaterHeatingRecoveryTime(self)



    def numberofNodes(self) -> "int":

        return _openstudiomodelhvac.WaterHeaterStratified_numberofNodes(self)



    def additionalDestratificationConductivity(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_additionalDestratificationConductivity(self)



    def node1AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node1AdditionalLossCoefficient(self)



    def node2AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node2AdditionalLossCoefficient(self)



    def node3AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node3AdditionalLossCoefficient(self)



    def node4AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node4AdditionalLossCoefficient(self)



    def node5AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node5AdditionalLossCoefficient(self)



    def node6AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node6AdditionalLossCoefficient(self)



    def node7AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node7AdditionalLossCoefficient(self)



    def node8AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node8AdditionalLossCoefficient(self)



    def node9AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node9AdditionalLossCoefficient(self)



    def node10AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node10AdditionalLossCoefficient(self)



    def node11AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node11AdditionalLossCoefficient(self)



    def node12AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.WaterHeaterStratified_node12AdditionalLossCoefficient(self)



    def sourceSideFlowControlMode(self) -> "std::string":

        return _openstudiomodelhvac.WaterHeaterStratified_sourceSideFlowControlMode(self)



    def indirectAlternateSetpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterHeaterStratified_indirectAlternateSetpointTemperatureSchedule(self)



    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setEndUseSubcategory(self, endUseSubcategory)



    def setTankVolume(self, tankVolume: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setTankVolume(self, tankVolume)



    def autosizeTankVolume(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizeTankVolume(self)



    def setTankHeight(self, tankHeight: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setTankHeight(self, tankHeight)



    def autosizeTankHeight(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizeTankHeight(self)



    def setTankShape(self, tankShape: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setTankShape(self, tankShape)



    def setTankPerimeter(self, tankPerimeter: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setTankPerimeter(self, tankPerimeter)



    def resetTankPerimeter(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetTankPerimeter(self)



    def setMaximumTemperatureLimit(self, maximumTemperatureLimit: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setMaximumTemperatureLimit(self, maximumTemperatureLimit)



    def setHeaterPriorityControl(self, heaterPriorityControl: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeaterPriorityControl(self, heaterPriorityControl)



    def setHeater1SetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeater1SetpointTemperatureSchedule(self, schedule)



    def setHeater1DeadbandTemperatureDifference(self, heater1DeadbandTemperatureDifference: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeater1DeadbandTemperatureDifference(self, heater1DeadbandTemperatureDifference)



    def setHeater1Capacity(self, heater1Capacity: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeater1Capacity(self, heater1Capacity)



    def autosizeHeater1Capacity(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizeHeater1Capacity(self)



    def setHeater1Height(self, heater1Height: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeater1Height(self, heater1Height)



    def setHeater2SetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeater2SetpointTemperatureSchedule(self, schedule)



    def setHeater2DeadbandTemperatureDifference(self, heater2DeadbandTemperatureDifference: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeater2DeadbandTemperatureDifference(self, heater2DeadbandTemperatureDifference)



    def setHeater2Capacity(self, heater2Capacity: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeater2Capacity(self, heater2Capacity)



    def setHeater2Height(self, heater2Height: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeater2Height(self, heater2Height)



    def setHeaterFuelType(self, heaterFuelType: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeaterFuelType(self, heaterFuelType)



    def setHeaterThermalEfficiency(self, heaterThermalEfficiency: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setHeaterThermalEfficiency(self, heaterThermalEfficiency)



    def setOffCycleParasiticFuelConsumptionRate(self, offCycleParasiticFuelConsumptionRate: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleParasiticFuelConsumptionRate(self, offCycleParasiticFuelConsumptionRate)



    def setOffCycleParasiticFuelType(self, offCycleParasiticFuelType: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleParasiticFuelType(self, offCycleParasiticFuelType)



    def setOffCycleParasiticHeatFractiontoTank(self, offCycleParasiticHeatFractiontoTank: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleParasiticHeatFractiontoTank(self, offCycleParasiticHeatFractiontoTank)



    def setOffCycleParasiticHeight(self, offCycleParasiticHeight: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleParasiticHeight(self, offCycleParasiticHeight)



    def setOnCycleParasiticFuelConsumptionRate(self, onCycleParasiticFuelConsumptionRate: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOnCycleParasiticFuelConsumptionRate(self, onCycleParasiticFuelConsumptionRate)



    def setOnCycleParasiticFuelType(self, onCycleParasiticFuelType: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOnCycleParasiticFuelType(self, onCycleParasiticFuelType)



    def setOnCycleParasiticHeatFractiontoTank(self, onCycleParasiticHeatFractiontoTank: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOnCycleParasiticHeatFractiontoTank(self, onCycleParasiticHeatFractiontoTank)



    def setOnCycleParasiticHeight(self, onCycleParasiticHeight: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOnCycleParasiticHeight(self, onCycleParasiticHeight)



    def setAmbientTemperatureIndicator(self, ambientTemperatureIndicator: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setAmbientTemperatureIndicator(self, ambientTemperatureIndicator)



    def setAmbientTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setAmbientTemperatureSchedule(self, schedule)



    def resetAmbientTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetAmbientTemperatureSchedule(self)



    def setAmbientTemperatureThermalZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setAmbientTemperatureThermalZone(self, thermalZone)



    def resetAmbientTemperatureThermalZone(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetAmbientTemperatureThermalZone(self)



    def setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName)



    def resetAmbientTemperatureOutdoorAirNodeName(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetAmbientTemperatureOutdoorAirNodeName(self)



    def setUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self, uniformSkinLossCoefficientperUnitAreatoAmbientTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self, uniformSkinLossCoefficientperUnitAreatoAmbientTemperature)



    def resetUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self)



    def setSkinLossFractiontoZone(self, skinLossFractiontoZone: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setSkinLossFractiontoZone(self, skinLossFractiontoZone)



    def setOffCycleFlueLossCoefficienttoAmbientTemperature(self, offCycleFlueLossCoefficienttoAmbientTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleFlueLossCoefficienttoAmbientTemperature(self, offCycleFlueLossCoefficienttoAmbientTemperature)



    def resetOffCycleFlueLossCoefficienttoAmbientTemperature(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetOffCycleFlueLossCoefficienttoAmbientTemperature(self)



    def setOffCycleFlueLossFractiontoZone(self, offCycleFlueLossFractiontoZone: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setOffCycleFlueLossFractiontoZone(self, offCycleFlueLossFractiontoZone)



    def setPeakUseFlowRate(self, peakUseFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setPeakUseFlowRate(self, peakUseFlowRate)



    def resetPeakUseFlowRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetPeakUseFlowRate(self)



    def setUseFlowRateFractionSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setUseFlowRateFractionSchedule(self, schedule)



    def resetUseFlowRateFractionSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetUseFlowRateFractionSchedule(self)



    def setColdWaterSupplyTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setColdWaterSupplyTemperatureSchedule(self, schedule)



    def resetColdWaterSupplyTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetColdWaterSupplyTemperatureSchedule(self)



    def setUseSideEffectiveness(self, useSideEffectiveness: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setUseSideEffectiveness(self, useSideEffectiveness)



    def setUseSideInletHeight(self, useSideInletHeight: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setUseSideInletHeight(self, useSideInletHeight)



    def setUseSideOutletHeight(self, useSideOutletHeight: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setUseSideOutletHeight(self, useSideOutletHeight)



    def autocalculateUseSideOutletHeight(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_autocalculateUseSideOutletHeight(self)



    def setSourceSideEffectiveness(self, sourceSideEffectiveness: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideEffectiveness(self, sourceSideEffectiveness)



    def setSourceSideInletHeight(self, sourceSideInletHeight: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideInletHeight(self, sourceSideInletHeight)



    def autocalculateSourceSideInletHeight(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_autocalculateSourceSideInletHeight(self)



    def setSourceSideOutletHeight(self, sourceSideOutletHeight: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideOutletHeight(self, sourceSideOutletHeight)



    def setInletMode(self, inletMode: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setInletMode(self, inletMode)



    def setUseSideDesignFlowRate(self, useSideDesignFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setUseSideDesignFlowRate(self, useSideDesignFlowRate)



    def autosizeUseSideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizeUseSideDesignFlowRate(self)



    def setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate)



    def autosizeSourceSideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizeSourceSideDesignFlowRate(self)



    def setIndirectWaterHeatingRecoveryTime(self, indirectWaterHeatingRecoveryTime: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setIndirectWaterHeatingRecoveryTime(self, indirectWaterHeatingRecoveryTime)



    def setNumberofNodes(self, numberofNodes: 'int') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNumberofNodes(self, numberofNodes)



    def setAdditionalDestratificationConductivity(self, additionalDestratificationConductivity: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setAdditionalDestratificationConductivity(self, additionalDestratificationConductivity)



    def setNode1AdditionalLossCoefficient(self, node1AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode1AdditionalLossCoefficient(self, node1AdditionalLossCoefficient)



    def setNode2AdditionalLossCoefficient(self, node2AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode2AdditionalLossCoefficient(self, node2AdditionalLossCoefficient)



    def setNode3AdditionalLossCoefficient(self, node3AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode3AdditionalLossCoefficient(self, node3AdditionalLossCoefficient)



    def setNode4AdditionalLossCoefficient(self, node4AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode4AdditionalLossCoefficient(self, node4AdditionalLossCoefficient)



    def setNode5AdditionalLossCoefficient(self, node5AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode5AdditionalLossCoefficient(self, node5AdditionalLossCoefficient)



    def setNode6AdditionalLossCoefficient(self, node6AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode6AdditionalLossCoefficient(self, node6AdditionalLossCoefficient)



    def setNode7AdditionalLossCoefficient(self, node7AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode7AdditionalLossCoefficient(self, node7AdditionalLossCoefficient)



    def setNode8AdditionalLossCoefficient(self, node8AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode8AdditionalLossCoefficient(self, node8AdditionalLossCoefficient)



    def setNode9AdditionalLossCoefficient(self, node9AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode9AdditionalLossCoefficient(self, node9AdditionalLossCoefficient)



    def setNode10AdditionalLossCoefficient(self, node10AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode10AdditionalLossCoefficient(self, node10AdditionalLossCoefficient)



    def setNode11AdditionalLossCoefficient(self, node11AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode11AdditionalLossCoefficient(self, node11AdditionalLossCoefficient)



    def setNode12AdditionalLossCoefficient(self, node12AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setNode12AdditionalLossCoefficient(self, node12AdditionalLossCoefficient)



    def setSourceSideFlowControlMode(self, sourceSideFlowControlMode: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setSourceSideFlowControlMode(self, sourceSideFlowControlMode)



    def setIndirectAlternateSetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterHeaterStratified_setIndirectAlternateSetpointTemperatureSchedule(self, schedule)



    def resetIndirectAlternateSetpointTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterHeaterStratified_resetIndirectAlternateSetpointTemperatureSchedule(self)



    def autosizedTankVolume(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizedTankVolume(self)



    def autosizedTankHeight(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizedTankHeight(self)



    def autosizedHeater1Capacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizedHeater1Capacity(self)



    def autosizedUseSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizedUseSideDesignFlowRate(self)



    def autosizedSourceSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.WaterHeaterStratified_autosizedSourceSideDesignFlowRate(self)

WaterHeaterStratified_swigregister = _openstudiomodelhvac.WaterHeaterStratified_swigregister

WaterHeaterStratified_swigregister(WaterHeaterStratified)



def WaterHeaterStratified_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.WaterHeaterStratified_iddObjectType()

WaterHeaterStratified_iddObjectType = _openstudiomodelhvac.WaterHeaterStratified_iddObjectType



def WaterHeaterStratified_tankShapeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterStratified_tankShapeValues()

WaterHeaterStratified_tankShapeValues = _openstudiomodelhvac.WaterHeaterStratified_tankShapeValues



def WaterHeaterStratified_heaterPriorityControlValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterStratified_heaterPriorityControlValues()

WaterHeaterStratified_heaterPriorityControlValues = _openstudiomodelhvac.WaterHeaterStratified_heaterPriorityControlValues



def WaterHeaterStratified_heaterFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterStratified_heaterFuelTypeValues()

WaterHeaterStratified_heaterFuelTypeValues = _openstudiomodelhvac.WaterHeaterStratified_heaterFuelTypeValues



def WaterHeaterStratified_offCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelTypeValues()

WaterHeaterStratified_offCycleParasiticFuelTypeValues = _openstudiomodelhvac.WaterHeaterStratified_offCycleParasiticFuelTypeValues



def WaterHeaterStratified_onCycleParasiticFuelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelTypeValues()

WaterHeaterStratified_onCycleParasiticFuelTypeValues = _openstudiomodelhvac.WaterHeaterStratified_onCycleParasiticFuelTypeValues



def WaterHeaterStratified_ambientTemperatureIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureIndicatorValues()

WaterHeaterStratified_ambientTemperatureIndicatorValues = _openstudiomodelhvac.WaterHeaterStratified_ambientTemperatureIndicatorValues



def WaterHeaterStratified_inletModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterStratified_inletModeValues()

WaterHeaterStratified_inletModeValues = _openstudiomodelhvac.WaterHeaterStratified_inletModeValues



def WaterHeaterStratified_sourceSideFlowControlModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.WaterHeaterStratified_sourceSideFlowControlModeValues()

WaterHeaterStratified_sourceSideFlowControlModeValues = _openstudiomodelhvac.WaterHeaterStratified_sourceSideFlowControlModeValues





def toWaterHeaterStratified(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WaterHeaterStratified >":

    return _openstudiomodelhvac.toWaterHeaterStratified(idfObject)

toWaterHeaterStratified = _openstudiomodelhvac.toWaterHeaterStratified



def getWaterHeaterStratified(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WaterHeaterStratified >":

    return _openstudiomodelhvac.getWaterHeaterStratified(t_model, t_handle)

getWaterHeaterStratified = _openstudiomodelhvac.getWaterHeaterStratified



def getWaterHeaterStratifieds(t_model: 'Model') -> "std::vector< openstudio::model::WaterHeaterStratified,std::allocator< openstudio::model::WaterHeaterStratified > >":

    return _openstudiomodelhvac.getWaterHeaterStratifieds(t_model)

getWaterHeaterStratifieds = _openstudiomodelhvac.getWaterHeaterStratifieds



def getWaterHeaterStratifiedByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WaterHeaterStratified >":

    return _openstudiomodelhvac.getWaterHeaterStratifiedByName(t_model, t_name)

getWaterHeaterStratifiedByName = _openstudiomodelhvac.getWaterHeaterStratifiedByName



def getWaterHeaterStratifiedsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WaterHeaterStratified,std::allocator< openstudio::model::WaterHeaterStratified > >":

    return _openstudiomodelhvac.getWaterHeaterStratifiedsByName(t_model, t_name, t_exactMatch)

getWaterHeaterStratifiedsByName = _openstudiomodelhvac.getWaterHeaterStratifiedsByName

class WaterUseEquipmentDefinition(openstudiomodelresources.SpaceLoadDefinition):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelresources.SpaceLoadDefinition]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterUseEquipmentDefinition, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelresources.SpaceLoadDefinition]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WaterUseEquipmentDefinition, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_WaterUseEquipmentDefinition(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterUseEquipmentDefinition

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.WaterUseEquipmentDefinition_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.WaterUseEquipmentDefinition_iddObjectType)



    def endUseSubcategory(self) -> "std::string":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_endUseSubcategory(self)



    def isEndUseSubcategoryDefaulted(self) -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_isEndUseSubcategoryDefaulted(self)



    def setEndUseSubcategory(self, endUseSubcategory: 'std::string') -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setEndUseSubcategory(self, endUseSubcategory)



    def resetEndUseSubcategory(self) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_resetEndUseSubcategory(self)



    def peakFlowRate(self) -> "double":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_peakFlowRate(self)



    def getPeakFlowRate(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_getPeakFlowRate(self, returnIP)



    def setPeakFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setPeakFlowRate(self, *args)



    def targetTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_targetTemperatureSchedule(self)



    def setTargetTemperatureSchedule(self, targetTemperatureSchedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setTargetTemperatureSchedule(self, targetTemperatureSchedule)



    def resetTargetTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_resetTargetTemperatureSchedule(self)



    def sensibleFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_sensibleFractionSchedule(self)



    def setSensibleFractionSchedule(self, sensibleFractionSchedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setSensibleFractionSchedule(self, sensibleFractionSchedule)



    def resetSensibleFractionSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_resetSensibleFractionSchedule(self)



    def latentFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_latentFractionSchedule(self)



    def setLatentFractionSchedule(self, latentFractionSchedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_setLatentFractionSchedule(self, latentFractionSchedule)



    def resetLatentFractionSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterUseEquipmentDefinition_resetLatentFractionSchedule(self)

WaterUseEquipmentDefinition_swigregister = _openstudiomodelhvac.WaterUseEquipmentDefinition_swigregister

WaterUseEquipmentDefinition_swigregister(WaterUseEquipmentDefinition)



def WaterUseEquipmentDefinition_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.WaterUseEquipmentDefinition_iddObjectType()

WaterUseEquipmentDefinition_iddObjectType = _openstudiomodelhvac.WaterUseEquipmentDefinition_iddObjectType





def toWaterUseEquipmentDefinition(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WaterUseEquipmentDefinition >":

    return _openstudiomodelhvac.toWaterUseEquipmentDefinition(idfObject)

toWaterUseEquipmentDefinition = _openstudiomodelhvac.toWaterUseEquipmentDefinition



def getWaterUseEquipmentDefinition(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WaterUseEquipmentDefinition >":

    return _openstudiomodelhvac.getWaterUseEquipmentDefinition(t_model, t_handle)

getWaterUseEquipmentDefinition = _openstudiomodelhvac.getWaterUseEquipmentDefinition



def getWaterUseEquipmentDefinitions(t_model: 'Model') -> "std::vector< openstudio::model::WaterUseEquipmentDefinition,std::allocator< openstudio::model::WaterUseEquipmentDefinition > >":

    return _openstudiomodelhvac.getWaterUseEquipmentDefinitions(t_model)

getWaterUseEquipmentDefinitions = _openstudiomodelhvac.getWaterUseEquipmentDefinitions



def getWaterUseEquipmentDefinitionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WaterUseEquipmentDefinition >":

    return _openstudiomodelhvac.getWaterUseEquipmentDefinitionByName(t_model, t_name)

getWaterUseEquipmentDefinitionByName = _openstudiomodelhvac.getWaterUseEquipmentDefinitionByName



def getWaterUseEquipmentDefinitionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WaterUseEquipmentDefinition,std::allocator< openstudio::model::WaterUseEquipmentDefinition > >":

    return _openstudiomodelhvac.getWaterUseEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

getWaterUseEquipmentDefinitionsByName = _openstudiomodelhvac.getWaterUseEquipmentDefinitionsByName

class WaterUseEquipment(openstudiomodelgeometry.SpaceLoadInstance):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelgeometry.SpaceLoadInstance]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, WaterUseEquipment, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelgeometry.SpaceLoadInstance]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, WaterUseEquipment, name)

    __repr__ = _swig_repr



    def __init__(self, waterUseEquipmentDefinition: 'WaterUseEquipmentDefinition'):

        this = _openstudiomodelhvac.new_WaterUseEquipment(waterUseEquipmentDefinition)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_WaterUseEquipment

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.WaterUseEquipment_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.WaterUseEquipment_iddObjectType)



    def flowRateFractionSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.WaterUseEquipment_flowRateFractionSchedule(self)



    def setFlowRateFractionSchedule(self, flowRateFractionSchedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.WaterUseEquipment_setFlowRateFractionSchedule(self, flowRateFractionSchedule)



    def resetFlowRateFractionSchedule(self) -> "void":

        return _openstudiomodelhvac.WaterUseEquipment_resetFlowRateFractionSchedule(self)



    def waterUseEquipmentDefinition(self) -> "openstudio::model::WaterUseEquipmentDefinition":

        return _openstudiomodelhvac.WaterUseEquipment_waterUseEquipmentDefinition(self)



    def setWaterUseEquipmentDefinition(self, definition: 'WaterUseEquipmentDefinition') -> "bool":

        return _openstudiomodelhvac.WaterUseEquipment_setWaterUseEquipmentDefinition(self, definition)



    def waterUseConnections(self) -> "boost::optional< openstudio::model::WaterUseConnections >":

        return _openstudiomodelhvac.WaterUseEquipment_waterUseConnections(self)

WaterUseEquipment_swigregister = _openstudiomodelhvac.WaterUseEquipment_swigregister

WaterUseEquipment_swigregister(WaterUseEquipment)



def WaterUseEquipment_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.WaterUseEquipment_iddObjectType()

WaterUseEquipment_iddObjectType = _openstudiomodelhvac.WaterUseEquipment_iddObjectType





def toWaterUseEquipment(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::WaterUseEquipment >":

    return _openstudiomodelhvac.toWaterUseEquipment(idfObject)

toWaterUseEquipment = _openstudiomodelhvac.toWaterUseEquipment



def getWaterUseEquipment(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::WaterUseEquipment >":

    return _openstudiomodelhvac.getWaterUseEquipment(t_model, t_handle)

getWaterUseEquipment = _openstudiomodelhvac.getWaterUseEquipment



def getWaterUseEquipments(t_model: 'Model') -> "std::vector< openstudio::model::WaterUseEquipment,std::allocator< openstudio::model::WaterUseEquipment > >":

    return _openstudiomodelhvac.getWaterUseEquipments(t_model)

getWaterUseEquipments = _openstudiomodelhvac.getWaterUseEquipments



def getWaterUseEquipmentByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::WaterUseEquipment >":

    return _openstudiomodelhvac.getWaterUseEquipmentByName(t_model, t_name)

getWaterUseEquipmentByName = _openstudiomodelhvac.getWaterUseEquipmentByName



def getWaterUseEquipmentsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::WaterUseEquipment,std::allocator< openstudio::model::WaterUseEquipment > >":

    return _openstudiomodelhvac.getWaterUseEquipmentsByName(t_model, t_name, t_exactMatch)

getWaterUseEquipmentsByName = _openstudiomodelhvac.getWaterUseEquipmentsByName

class HeatExchangerAirToAirSensibleAndLatent(AirToAirComponent):

    __swig_setmethods__ = {}

    for _s in [AirToAirComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatExchangerAirToAirSensibleAndLatent, name, value)

    __swig_getmethods__ = {}

    for _s in [AirToAirComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, HeatExchangerAirToAirSensibleAndLatent, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_HeatExchangerAirToAirSensibleAndLatent(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_HeatExchangerAirToAirSensibleAndLatent

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_iddObjectType)

    __swig_getmethods__["heatExchangerTypeValues"] = lambda x: _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_heatExchangerTypeValues

    if _newclass:

        heatExchangerTypeValues = staticmethod(_openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_heatExchangerTypeValues)

    __swig_getmethods__["frostControlTypeValues"] = lambda x: _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_frostControlTypeValues

    if _newclass:

        frostControlTypeValues = staticmethod(_openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_frostControlTypeValues)



    def availabilitySchedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_availabilitySchedule(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setAvailabilitySchedule(self, schedule)



    def nominalSupplyAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_nominalSupplyAirFlowRate(self)



    def getNominalSupplyAirFlowRate(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getNominalSupplyAirFlowRate(self, returnIP)



    def isNominalSupplyAirFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_isNominalSupplyAirFlowRateAutosized(self)



    def setNominalSupplyAirFlowRate(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setNominalSupplyAirFlowRate(self, *args)



    def autosizeNominalSupplyAirFlowRate(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_autosizeNominalSupplyAirFlowRate(self)



    def sensibleEffectivenessat100HeatingAirFlow(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_sensibleEffectivenessat100HeatingAirFlow(self)



    def getSensibleEffectivenessat100HeatingAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getSensibleEffectivenessat100HeatingAirFlow(self, returnIP)



    def setSensibleEffectivenessat100HeatingAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSensibleEffectivenessat100HeatingAirFlow(self, *args)



    def latentEffectivenessat100HeatingAirFlow(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_latentEffectivenessat100HeatingAirFlow(self)



    def getLatentEffectivenessat100HeatingAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getLatentEffectivenessat100HeatingAirFlow(self, returnIP)



    def setLatentEffectivenessat100HeatingAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setLatentEffectivenessat100HeatingAirFlow(self, *args)



    def sensibleEffectivenessat75HeatingAirFlow(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_sensibleEffectivenessat75HeatingAirFlow(self)



    def getSensibleEffectivenessat75HeatingAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getSensibleEffectivenessat75HeatingAirFlow(self, returnIP)



    def setSensibleEffectivenessat75HeatingAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSensibleEffectivenessat75HeatingAirFlow(self, *args)



    def latentEffectivenessat75HeatingAirFlow(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_latentEffectivenessat75HeatingAirFlow(self)



    def getLatentEffectivenessat75HeatingAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getLatentEffectivenessat75HeatingAirFlow(self, returnIP)



    def setLatentEffectivenessat75HeatingAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setLatentEffectivenessat75HeatingAirFlow(self, *args)



    def sensibleEffectivenessat100CoolingAirFlow(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_sensibleEffectivenessat100CoolingAirFlow(self)



    def getSensibleEffectivenessat100CoolingAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getSensibleEffectivenessat100CoolingAirFlow(self, returnIP)



    def setSensibleEffectivenessat100CoolingAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSensibleEffectivenessat100CoolingAirFlow(self, *args)



    def latentEffectivenessat100CoolingAirFlow(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_latentEffectivenessat100CoolingAirFlow(self)



    def getLatentEffectivenessat100CoolingAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getLatentEffectivenessat100CoolingAirFlow(self, returnIP)



    def setLatentEffectivenessat100CoolingAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setLatentEffectivenessat100CoolingAirFlow(self, *args)



    def sensibleEffectivenessat75CoolingAirFlow(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_sensibleEffectivenessat75CoolingAirFlow(self)



    def getSensibleEffectivenessat75CoolingAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getSensibleEffectivenessat75CoolingAirFlow(self, returnIP)



    def setSensibleEffectivenessat75CoolingAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSensibleEffectivenessat75CoolingAirFlow(self, *args)



    def latentEffectivenessat75CoolingAirFlow(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_latentEffectivenessat75CoolingAirFlow(self)



    def getLatentEffectivenessat75CoolingAirFlow(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getLatentEffectivenessat75CoolingAirFlow(self, returnIP)



    def setLatentEffectivenessat75CoolingAirFlow(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setLatentEffectivenessat75CoolingAirFlow(self, *args)



    def nominalElectricPower(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_nominalElectricPower(self)



    def getNominalElectricPower(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getNominalElectricPower(self, returnIP)



    def setNominalElectricPower(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setNominalElectricPower(self, *args)



    def supplyAirOutletTemperatureControl(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_supplyAirOutletTemperatureControl(self)



    def setSupplyAirOutletTemperatureControl(self, supplyAirOutletTemperatureControl: 'bool') -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setSupplyAirOutletTemperatureControl(self, supplyAirOutletTemperatureControl)



    def heatExchangerType(self) -> "std::string":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_heatExchangerType(self)



    def setHeatExchangerType(self, heatExchangerType: 'std::string') -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setHeatExchangerType(self, heatExchangerType)



    def frostControlType(self) -> "std::string":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_frostControlType(self)



    def setFrostControlType(self, frostControlType: 'std::string') -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setFrostControlType(self, frostControlType)



    def thresholdTemperature(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_thresholdTemperature(self)



    def getThresholdTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getThresholdTemperature(self, returnIP)



    def isThresholdTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_isThresholdTemperatureDefaulted(self)



    def setThresholdTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setThresholdTemperature(self, *args)



    def resetThresholdTemperature(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_resetThresholdTemperature(self)



    def initialDefrostTimeFraction(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_initialDefrostTimeFraction(self)



    def getInitialDefrostTimeFraction(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getInitialDefrostTimeFraction(self, returnIP)



    def setInitialDefrostTimeFraction(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setInitialDefrostTimeFraction(self, *args)



    def resetInitialDefrostTimeFraction(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_resetInitialDefrostTimeFraction(self)



    def rateofDefrostTimeFractionIncrease(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_rateofDefrostTimeFractionIncrease(self)



    def getRateofDefrostTimeFractionIncrease(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getRateofDefrostTimeFractionIncrease(self, returnIP)



    def setRateofDefrostTimeFractionIncrease(self, *args) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setRateofDefrostTimeFractionIncrease(self, *args)



    def resetRateofDefrostTimeFractionIncrease(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_resetRateofDefrostTimeFractionIncrease(self)



    def economizerLockout(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_economizerLockout(self)



    def setEconomizerLockout(self, economizerLockout: 'bool') -> "bool":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_setEconomizerLockout(self, economizerLockout)



    def autosizedNominalSupplyAirFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_autosizedNominalSupplyAirFlowRate(self)



    def getAirflowNetworkEquivalentDuct(self, length: 'double', diameter: 'double') -> "openstudio::model::AirflowNetworkEquivalentDuct":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_getAirflowNetworkEquivalentDuct(self, length, diameter)



    def airflowNetworkEquivalentDuct(self) -> "boost::optional< openstudio::model::AirflowNetworkEquivalentDuct >":

        return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_airflowNetworkEquivalentDuct(self)

HeatExchangerAirToAirSensibleAndLatent_swigregister = _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_swigregister

HeatExchangerAirToAirSensibleAndLatent_swigregister(HeatExchangerAirToAirSensibleAndLatent)



def HeatExchangerAirToAirSensibleAndLatent_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_iddObjectType()

HeatExchangerAirToAirSensibleAndLatent_iddObjectType = _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_iddObjectType



def HeatExchangerAirToAirSensibleAndLatent_heatExchangerTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_heatExchangerTypeValues()

HeatExchangerAirToAirSensibleAndLatent_heatExchangerTypeValues = _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_heatExchangerTypeValues



def HeatExchangerAirToAirSensibleAndLatent_frostControlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_frostControlTypeValues()

HeatExchangerAirToAirSensibleAndLatent_frostControlTypeValues = _openstudiomodelhvac.HeatExchangerAirToAirSensibleAndLatent_frostControlTypeValues





def toHeatExchangerAirToAirSensibleAndLatent(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >":

    return _openstudiomodelhvac.toHeatExchangerAirToAirSensibleAndLatent(idfObject)

toHeatExchangerAirToAirSensibleAndLatent = _openstudiomodelhvac.toHeatExchangerAirToAirSensibleAndLatent



def getHeatExchangerAirToAirSensibleAndLatent(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >":

    return _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatent(t_model, t_handle)

getHeatExchangerAirToAirSensibleAndLatent = _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatent



def getHeatExchangerAirToAirSensibleAndLatents(t_model: 'Model') -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent,std::allocator< openstudio::model::HeatExchangerAirToAirSensibleAndLatent > >":

    return _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatents(t_model)

getHeatExchangerAirToAirSensibleAndLatents = _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatents



def getHeatExchangerAirToAirSensibleAndLatentByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::HeatExchangerAirToAirSensibleAndLatent >":

    return _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatentByName(t_model, t_name)

getHeatExchangerAirToAirSensibleAndLatentByName = _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatentByName



def getHeatExchangerAirToAirSensibleAndLatentsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::HeatExchangerAirToAirSensibleAndLatent,std::allocator< openstudio::model::HeatExchangerAirToAirSensibleAndLatent > >":

    return _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatentsByName(t_model, t_name, t_exactMatch)

getHeatExchangerAirToAirSensibleAndLatentsByName = _openstudiomodelhvac.getHeatExchangerAirToAirSensibleAndLatentsByName

class HeatExchangerFluidToFluid(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatExchangerFluidToFluid, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, HeatExchangerFluidToFluid, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_HeatExchangerFluidToFluid(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_HeatExchangerFluidToFluid

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.HeatExchangerFluidToFluid_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.HeatExchangerFluidToFluid_iddObjectType)

    __swig_getmethods__["heatExchangeModelTypeValues"] = lambda x: _openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangeModelTypeValues

    if _newclass:

        heatExchangeModelTypeValues = staticmethod(_openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangeModelTypeValues)

    __swig_getmethods__["controlTypeValues"] = lambda x: _openstudiomodelhvac.HeatExchangerFluidToFluid_controlTypeValues

    if _newclass:

        controlTypeValues = staticmethod(_openstudiomodelhvac.HeatExchangerFluidToFluid_controlTypeValues)

    __swig_getmethods__["heatTransferMeteringEndUseTypeValues"] = lambda x: _openstudiomodelhvac.HeatExchangerFluidToFluid_heatTransferMeteringEndUseTypeValues

    if _newclass:

        heatTransferMeteringEndUseTypeValues = staticmethod(_openstudiomodelhvac.HeatExchangerFluidToFluid_heatTransferMeteringEndUseTypeValues)

    __swig_getmethods__["componentOverrideCoolingControlTemperatureModeValues"] = lambda x: _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureModeValues

    if _newclass:

        componentOverrideCoolingControlTemperatureModeValues = staticmethod(_openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureModeValues)



    def availabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_availabilitySchedule(self)



    def loopDemandSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_loopDemandSideDesignFlowRate(self)



    def isLoopDemandSideDesignFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isLoopDemandSideDesignFlowRateAutosized(self)



    def loopSupplySideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_loopSupplySideDesignFlowRate(self)



    def isLoopSupplySideDesignFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isLoopSupplySideDesignFlowRateAutosized(self)



    def heatExchangeModelType(self) -> "std::string":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangeModelType(self)



    def isHeatExchangeModelTypeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isHeatExchangeModelTypeDefaulted(self)



    def heatExchangerUFactorTimesAreaValue(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangerUFactorTimesAreaValue(self)



    def isHeatExchangerUFactorTimesAreaValueAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isHeatExchangerUFactorTimesAreaValueAutosized(self)



    def controlType(self) -> "std::string":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_controlType(self)



    def isControlTypeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isControlTypeDefaulted(self)



    def minimumTemperatureDifferencetoActivateHeatExchanger(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_minimumTemperatureDifferencetoActivateHeatExchanger(self)



    def isMinimumTemperatureDifferencetoActivateHeatExchangerDefaulted(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isMinimumTemperatureDifferencetoActivateHeatExchangerDefaulted(self)



    def heatTransferMeteringEndUseType(self) -> "std::string":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatTransferMeteringEndUseType(self)



    def isHeatTransferMeteringEndUseTypeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isHeatTransferMeteringEndUseTypeDefaulted(self)



    def componentOverrideLoopSupplySideInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideLoopSupplySideInletNode(self)



    def componentOverrideLoopDemandSideInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideLoopDemandSideInletNode(self)



    def componentOverrideCoolingControlTemperatureMode(self) -> "std::string":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureMode(self)



    def isComponentOverrideCoolingControlTemperatureModeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isComponentOverrideCoolingControlTemperatureModeDefaulted(self)



    def sizingFactor(self) -> "double":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_sizingFactor(self)



    def isSizingFactorDefaulted(self) -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_isSizingFactorDefaulted(self)



    def operationMinimumTemperatureLimit(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_operationMinimumTemperatureLimit(self)



    def operationMaximumTemperatureLimit(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_operationMaximumTemperatureLimit(self)



    def setAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setAvailabilitySchedule(self, schedule)



    def resetAvailabilitySchedule(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetAvailabilitySchedule(self)



    def setLoopDemandSideDesignFlowRate(self, loopDemandSideDesignFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setLoopDemandSideDesignFlowRate(self, loopDemandSideDesignFlowRate)



    def autosizeLoopDemandSideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizeLoopDemandSideDesignFlowRate(self)



    def setLoopSupplySideDesignFlowRate(self, loopSupplySideDesignFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setLoopSupplySideDesignFlowRate(self, loopSupplySideDesignFlowRate)



    def autosizeLoopSupplySideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizeLoopSupplySideDesignFlowRate(self)



    def setHeatExchangeModelType(self, heatExchangeModelType: 'std::string') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setHeatExchangeModelType(self, heatExchangeModelType)



    def resetHeatExchangeModelType(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetHeatExchangeModelType(self)



    def setHeatExchangerUFactorTimesAreaValue(self, heatExchangerUFactorTimesAreaValue: 'double') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setHeatExchangerUFactorTimesAreaValue(self, heatExchangerUFactorTimesAreaValue)



    def autosizeHeatExchangerUFactorTimesAreaValue(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizeHeatExchangerUFactorTimesAreaValue(self)



    def setControlType(self, controlType: 'std::string') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setControlType(self, controlType)



    def resetControlType(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetControlType(self)



    def setMinimumTemperatureDifferencetoActivateHeatExchanger(self, minimumTemperatureDifferencetoActivateHeatExchanger: 'double') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setMinimumTemperatureDifferencetoActivateHeatExchanger(self, minimumTemperatureDifferencetoActivateHeatExchanger)



    def resetMinimumTemperatureDifferencetoActivateHeatExchanger(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetMinimumTemperatureDifferencetoActivateHeatExchanger(self)



    def setHeatTransferMeteringEndUseType(self, heatTransferMeteringEndUseType: 'std::string') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setHeatTransferMeteringEndUseType(self, heatTransferMeteringEndUseType)



    def resetHeatTransferMeteringEndUseType(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetHeatTransferMeteringEndUseType(self)



    def setComponentOverrideLoopSupplySideInletNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setComponentOverrideLoopSupplySideInletNode(self, node)



    def resetComponentOverrideLoopSupplySideInletNode(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetComponentOverrideLoopSupplySideInletNode(self)



    def setComponentOverrideLoopDemandSideInletNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setComponentOverrideLoopDemandSideInletNode(self, node)



    def resetComponentOverrideLoopDemandSideInletNode(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetComponentOverrideLoopDemandSideInletNode(self)



    def setComponentOverrideCoolingControlTemperatureMode(self, componentOverrideCoolingControlTemperatureMode: 'std::string') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setComponentOverrideCoolingControlTemperatureMode(self, componentOverrideCoolingControlTemperatureMode)



    def resetComponentOverrideCoolingControlTemperatureMode(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetComponentOverrideCoolingControlTemperatureMode(self)



    def setSizingFactor(self, sizingFactor: 'double') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setSizingFactor(self, sizingFactor)



    def resetSizingFactor(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetSizingFactor(self)



    def setOperationMinimumTemperatureLimit(self, operationMinimumTemperatureLimit: 'double') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setOperationMinimumTemperatureLimit(self, operationMinimumTemperatureLimit)



    def resetOperationMinimumTemperatureLimit(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetOperationMinimumTemperatureLimit(self)



    def setOperationMaximumTemperatureLimit(self, operationMaximumTemperatureLimit: 'double') -> "bool":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_setOperationMaximumTemperatureLimit(self, operationMaximumTemperatureLimit)



    def resetOperationMaximumTemperatureLimit(self) -> "void":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_resetOperationMaximumTemperatureLimit(self)



    def autosizedLoopDemandSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizedLoopDemandSideDesignFlowRate(self)



    def autosizedLoopSupplySideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizedLoopSupplySideDesignFlowRate(self)



    def autosizedHeatExchangerUFactorTimesAreaValue(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatExchangerFluidToFluid_autosizedHeatExchangerUFactorTimesAreaValue(self)

HeatExchangerFluidToFluid_swigregister = _openstudiomodelhvac.HeatExchangerFluidToFluid_swigregister

HeatExchangerFluidToFluid_swigregister(HeatExchangerFluidToFluid)



def HeatExchangerFluidToFluid_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.HeatExchangerFluidToFluid_iddObjectType()

HeatExchangerFluidToFluid_iddObjectType = _openstudiomodelhvac.HeatExchangerFluidToFluid_iddObjectType



def HeatExchangerFluidToFluid_heatExchangeModelTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangeModelTypeValues()

HeatExchangerFluidToFluid_heatExchangeModelTypeValues = _openstudiomodelhvac.HeatExchangerFluidToFluid_heatExchangeModelTypeValues



def HeatExchangerFluidToFluid_controlTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.HeatExchangerFluidToFluid_controlTypeValues()

HeatExchangerFluidToFluid_controlTypeValues = _openstudiomodelhvac.HeatExchangerFluidToFluid_controlTypeValues



def HeatExchangerFluidToFluid_heatTransferMeteringEndUseTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.HeatExchangerFluidToFluid_heatTransferMeteringEndUseTypeValues()

HeatExchangerFluidToFluid_heatTransferMeteringEndUseTypeValues = _openstudiomodelhvac.HeatExchangerFluidToFluid_heatTransferMeteringEndUseTypeValues



def HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureModeValues()

HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureModeValues = _openstudiomodelhvac.HeatExchangerFluidToFluid_componentOverrideCoolingControlTemperatureModeValues





def toHeatExchangerFluidToFluid(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::HeatExchangerFluidToFluid >":

    return _openstudiomodelhvac.toHeatExchangerFluidToFluid(idfObject)

toHeatExchangerFluidToFluid = _openstudiomodelhvac.toHeatExchangerFluidToFluid



def getHeatExchangerFluidToFluid(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::HeatExchangerFluidToFluid >":

    return _openstudiomodelhvac.getHeatExchangerFluidToFluid(t_model, t_handle)

getHeatExchangerFluidToFluid = _openstudiomodelhvac.getHeatExchangerFluidToFluid



def getHeatExchangerFluidToFluids(t_model: 'Model') -> "std::vector< openstudio::model::HeatExchangerFluidToFluid,std::allocator< openstudio::model::HeatExchangerFluidToFluid > >":

    return _openstudiomodelhvac.getHeatExchangerFluidToFluids(t_model)

getHeatExchangerFluidToFluids = _openstudiomodelhvac.getHeatExchangerFluidToFluids



def getHeatExchangerFluidToFluidByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::HeatExchangerFluidToFluid >":

    return _openstudiomodelhvac.getHeatExchangerFluidToFluidByName(t_model, t_name)

getHeatExchangerFluidToFluidByName = _openstudiomodelhvac.getHeatExchangerFluidToFluidByName



def getHeatExchangerFluidToFluidsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::HeatExchangerFluidToFluid,std::allocator< openstudio::model::HeatExchangerFluidToFluid > >":

    return _openstudiomodelhvac.getHeatExchangerFluidToFluidsByName(t_model, t_name, t_exactMatch)

getHeatExchangerFluidToFluidsByName = _openstudiomodelhvac.getHeatExchangerFluidToFluidsByName

class HeatPumpWaterToWaterEquationFitCooling(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatPumpWaterToWaterEquationFitCooling, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, HeatPumpWaterToWaterEquationFitCooling, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_HeatPumpWaterToWaterEquationFitCooling(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_HeatPumpWaterToWaterEquationFitCooling

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_iddObjectType)



    def referenceLoadSideFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_referenceLoadSideFlowRate(self)



    def ratedLoadSideFlowRate(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_ratedLoadSideFlowRate(self)



    def isReferenceLoadSideFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_isReferenceLoadSideFlowRateAutosized(self)



    def referenceSourceSideFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_referenceSourceSideFlowRate(self)



    def ratedSourceSideFlowRate(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_ratedSourceSideFlowRate(self)



    def isReferenceSourceSideFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_isReferenceSourceSideFlowRateAutosized(self)



    def ratedCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_ratedCoolingCapacity(self)



    def isRatedCoolingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_isRatedCoolingCapacityAutosized(self)



    def ratedCoolingPowerConsumption(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_ratedCoolingPowerConsumption(self)



    def isRatedCoolingPowerConsumptionAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_isRatedCoolingPowerConsumptionAutosized(self)



    def coolingCapacityCoefficient1(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient1(self)



    def coolingCapacityCoefficient2(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient2(self)



    def coolingCapacityCoefficient3(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient3(self)



    def coolingCapacityCoefficient4(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient4(self)



    def coolingCapacityCoefficient5(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCapacityCoefficient5(self)



    def coolingCompressorPowerCoefficient1(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient1(self)



    def coolingCompressorPowerCoefficient2(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient2(self)



    def coolingCompressorPowerCoefficient3(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient3(self)



    def coolingCompressorPowerCoefficient4(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient4(self)



    def coolingCompressorPowerCoefficient5(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_coolingCompressorPowerCoefficient5(self)



    def referenceCoefficientofPerformance(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_referenceCoefficientofPerformance(self)



    def sizingFactor(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_sizingFactor(self)



    def companionHeatingHeatPump(self) -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_companionHeatingHeatPump(self)



    def setReferenceLoadSideFlowRate(self, referenceLoadSideFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setReferenceLoadSideFlowRate(self, referenceLoadSideFlowRate)



    def setRatedLoadSideFlowRate(self, ratedLoadSideFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setRatedLoadSideFlowRate(self, ratedLoadSideFlowRate)



    def autosizeReferenceLoadSideFlowRate(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizeReferenceLoadSideFlowRate(self)



    def setReferenceSourceSideFlowRate(self, referenceSourceSideFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setReferenceSourceSideFlowRate(self, referenceSourceSideFlowRate)



    def setRatedSourceSideFlowRate(self, ratedSourceSideFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setRatedSourceSideFlowRate(self, ratedSourceSideFlowRate)



    def autosizeReferenceSourceSideFlowRate(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizeReferenceSourceSideFlowRate(self)



    def setRatedCoolingCapacity(self, ratedCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setRatedCoolingCapacity(self, ratedCoolingCapacity)



    def autosizeRatedCoolingCapacity(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizeRatedCoolingCapacity(self)



    def setRatedCoolingPowerConsumption(self, ratedCoolingPowerConsumption: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setRatedCoolingPowerConsumption(self, ratedCoolingPowerConsumption)



    def autosizeRatedCoolingPowerConsumption(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizeRatedCoolingPowerConsumption(self)



    def setCoolingCapacityCoefficient1(self, coolingCapacityCoefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient1(self, coolingCapacityCoefficient1)



    def setCoolingCapacityCoefficient2(self, coolingCapacityCoefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient2(self, coolingCapacityCoefficient2)



    def setCoolingCapacityCoefficient3(self, coolingCapacityCoefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient3(self, coolingCapacityCoefficient3)



    def setCoolingCapacityCoefficient4(self, coolingCapacityCoefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient4(self, coolingCapacityCoefficient4)



    def setCoolingCapacityCoefficient5(self, coolingCapacityCoefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCapacityCoefficient5(self, coolingCapacityCoefficient5)



    def setCoolingCompressorPowerCoefficient1(self, coolingCompressorPowerCoefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient1(self, coolingCompressorPowerCoefficient1)



    def setCoolingCompressorPowerCoefficient2(self, coolingCompressorPowerCoefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient2(self, coolingCompressorPowerCoefficient2)



    def setCoolingCompressorPowerCoefficient3(self, coolingCompressorPowerCoefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient3(self, coolingCompressorPowerCoefficient3)



    def setCoolingCompressorPowerCoefficient4(self, coolingCompressorPowerCoefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient4(self, coolingCompressorPowerCoefficient4)



    def setCoolingCompressorPowerCoefficient5(self, coolingCompressorPowerCoefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCoolingCompressorPowerCoefficient5(self, coolingCompressorPowerCoefficient5)



    def setReferenceCoefficientofPerformance(self, referenceCoefficientofPerformance: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setReferenceCoefficientofPerformance(self, referenceCoefficientofPerformance)



    def setSizingFactor(self, sizingFactor: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setSizingFactor(self, sizingFactor)



    def setCompanionHeatingHeatPump(self, companionHP: 'HeatPumpWaterToWaterEquationFitHeating') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_setCompanionHeatingHeatPump(self, companionHP)



    def autosizedReferenceLoadSideFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizedReferenceLoadSideFlowRate(self)



    def autosizedReferenceSourceSideFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizedReferenceSourceSideFlowRate(self)



    def autosizedRatedCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizedRatedCoolingCapacity(self)



    def autosizedRatedCoolingPowerConsumption(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_autosizedRatedCoolingPowerConsumption(self)

HeatPumpWaterToWaterEquationFitCooling_swigregister = _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_swigregister

HeatPumpWaterToWaterEquationFitCooling_swigregister(HeatPumpWaterToWaterEquationFitCooling)



def HeatPumpWaterToWaterEquationFitCooling_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_iddObjectType()

HeatPumpWaterToWaterEquationFitCooling_iddObjectType = _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitCooling_iddObjectType





def toHeatPumpWaterToWaterEquationFitCooling(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >":

    return _openstudiomodelhvac.toHeatPumpWaterToWaterEquationFitCooling(idfObject)

toHeatPumpWaterToWaterEquationFitCooling = _openstudiomodelhvac.toHeatPumpWaterToWaterEquationFitCooling



def getHeatPumpWaterToWaterEquationFitCooling(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >":

    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCooling(t_model, t_handle)

getHeatPumpWaterToWaterEquationFitCooling = _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCooling



def getHeatPumpWaterToWaterEquationFitCoolings(t_model: 'Model') -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitCooling > >":

    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCoolings(t_model)

getHeatPumpWaterToWaterEquationFitCoolings = _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCoolings



def getHeatPumpWaterToWaterEquationFitCoolingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >":

    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCoolingByName(t_model, t_name)

getHeatPumpWaterToWaterEquationFitCoolingByName = _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCoolingByName



def getHeatPumpWaterToWaterEquationFitCoolingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitCooling,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitCooling > >":

    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCoolingsByName(t_model, t_name, t_exactMatch)

getHeatPumpWaterToWaterEquationFitCoolingsByName = _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitCoolingsByName

class HeatPumpWaterToWaterEquationFitHeating(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, HeatPumpWaterToWaterEquationFitHeating, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, HeatPumpWaterToWaterEquationFitHeating, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_HeatPumpWaterToWaterEquationFitHeating(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_HeatPumpWaterToWaterEquationFitHeating

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_iddObjectType)



    def referenceLoadSideFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_referenceLoadSideFlowRate(self)



    def ratedLoadSideFlowRate(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_ratedLoadSideFlowRate(self)



    def isReferenceLoadSideFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_isReferenceLoadSideFlowRateAutosized(self)



    def referenceSourceSideFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_referenceSourceSideFlowRate(self)



    def ratedSourceSideFlowRate(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_ratedSourceSideFlowRate(self)



    def isReferenceSourceSideFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_isReferenceSourceSideFlowRateAutosized(self)



    def ratedHeatingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_ratedHeatingCapacity(self)



    def isRatedHeatingCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_isRatedHeatingCapacityAutosized(self)



    def ratedHeatingPowerConsumption(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_ratedHeatingPowerConsumption(self)



    def isRatedHeatingPowerConsumptionAutosized(self) -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_isRatedHeatingPowerConsumptionAutosized(self)



    def heatingCapacityCoefficient1(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient1(self)



    def heatingCapacityCoefficient2(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient2(self)



    def heatingCapacityCoefficient3(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient3(self)



    def heatingCapacityCoefficient4(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient4(self)



    def heatingCapacityCoefficient5(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCapacityCoefficient5(self)



    def heatingCompressorPowerCoefficient1(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient1(self)



    def heatingCompressorPowerCoefficient2(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient2(self)



    def heatingCompressorPowerCoefficient3(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient3(self)



    def heatingCompressorPowerCoefficient4(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient4(self)



    def heatingCompressorPowerCoefficient5(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_heatingCompressorPowerCoefficient5(self)



    def referenceCoefficientofPerformance(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_referenceCoefficientofPerformance(self)



    def sizingFactor(self) -> "double":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_sizingFactor(self)



    def companionCoolingHeatPump(self) -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitCooling >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_companionCoolingHeatPump(self)



    def setReferenceLoadSideFlowRate(self, referenceLoadSideFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setReferenceLoadSideFlowRate(self, referenceLoadSideFlowRate)



    def setRatedLoadSideFlowRate(self, ratedLoadSideFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setRatedLoadSideFlowRate(self, ratedLoadSideFlowRate)



    def autosizeReferenceLoadSideFlowRate(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizeReferenceLoadSideFlowRate(self)



    def setReferenceSourceSideFlowRate(self, referenceSourceSideFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setReferenceSourceSideFlowRate(self, referenceSourceSideFlowRate)



    def setRatedSourceSideFlowRate(self, ratedLoadSideFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setRatedSourceSideFlowRate(self, ratedLoadSideFlowRate)



    def autosizeReferenceSourceSideFlowRate(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizeReferenceSourceSideFlowRate(self)



    def setRatedHeatingCapacity(self, ratedHeatingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setRatedHeatingCapacity(self, ratedHeatingCapacity)



    def autosizeRatedHeatingCapacity(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizeRatedHeatingCapacity(self)



    def setRatedHeatingPowerConsumption(self, ratedHeatingPowerConsumption: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setRatedHeatingPowerConsumption(self, ratedHeatingPowerConsumption)



    def autosizeRatedHeatingPowerConsumption(self) -> "void":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizeRatedHeatingPowerConsumption(self)



    def setHeatingCapacityCoefficient1(self, heatingCapacityCoefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient1(self, heatingCapacityCoefficient1)



    def setHeatingCapacityCoefficient2(self, heatingCapacityCoefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient2(self, heatingCapacityCoefficient2)



    def setHeatingCapacityCoefficient3(self, heatingCapacityCoefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient3(self, heatingCapacityCoefficient3)



    def setHeatingCapacityCoefficient4(self, heatingCapacityCoefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient4(self, heatingCapacityCoefficient4)



    def setHeatingCapacityCoefficient5(self, heatingCapacityCoefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCapacityCoefficient5(self, heatingCapacityCoefficient5)



    def setHeatingCompressorPowerCoefficient1(self, heatingCompressorPowerCoefficient1: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient1(self, heatingCompressorPowerCoefficient1)



    def setHeatingCompressorPowerCoefficient2(self, heatingCompressorPowerCoefficient2: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient2(self, heatingCompressorPowerCoefficient2)



    def setHeatingCompressorPowerCoefficient3(self, heatingCompressorPowerCoefficient3: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient3(self, heatingCompressorPowerCoefficient3)



    def setHeatingCompressorPowerCoefficient4(self, heatingCompressorPowerCoefficient4: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient4(self, heatingCompressorPowerCoefficient4)



    def setHeatingCompressorPowerCoefficient5(self, heatingCompressorPowerCoefficient5: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setHeatingCompressorPowerCoefficient5(self, heatingCompressorPowerCoefficient5)



    def setReferenceCoefficientofPerformance(self, referenceCoefficientofPerformance: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setReferenceCoefficientofPerformance(self, referenceCoefficientofPerformance)



    def setSizingFactor(self, sizingFactor: 'double') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setSizingFactor(self, sizingFactor)



    def setCompanionCoolingHeatPump(self, companionHP: 'HeatPumpWaterToWaterEquationFitCooling') -> "bool":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_setCompanionCoolingHeatPump(self, companionHP)



    def autosizedReferenceLoadSideFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizedReferenceLoadSideFlowRate(self)



    def autosizedReferenceSourceSideFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizedReferenceSourceSideFlowRate(self)



    def autosizedRatedHeatingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizedRatedHeatingCapacity(self)



    def autosizedRatedHeatingPowerConsumption(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_autosizedRatedHeatingPowerConsumption(self)

HeatPumpWaterToWaterEquationFitHeating_swigregister = _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_swigregister

HeatPumpWaterToWaterEquationFitHeating_swigregister(HeatPumpWaterToWaterEquationFitHeating)



def HeatPumpWaterToWaterEquationFitHeating_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_iddObjectType()

HeatPumpWaterToWaterEquationFitHeating_iddObjectType = _openstudiomodelhvac.HeatPumpWaterToWaterEquationFitHeating_iddObjectType





def toHeatPumpWaterToWaterEquationFitHeating(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >":

    return _openstudiomodelhvac.toHeatPumpWaterToWaterEquationFitHeating(idfObject)

toHeatPumpWaterToWaterEquationFitHeating = _openstudiomodelhvac.toHeatPumpWaterToWaterEquationFitHeating



def getHeatPumpWaterToWaterEquationFitHeating(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >":

    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeating(t_model, t_handle)

getHeatPumpWaterToWaterEquationFitHeating = _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeating



def getHeatPumpWaterToWaterEquationFitHeatings(t_model: 'Model') -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitHeating > >":

    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeatings(t_model)

getHeatPumpWaterToWaterEquationFitHeatings = _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeatings



def getHeatPumpWaterToWaterEquationFitHeatingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::HeatPumpWaterToWaterEquationFitHeating >":

    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeatingByName(t_model, t_name)

getHeatPumpWaterToWaterEquationFitHeatingByName = _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeatingByName



def getHeatPumpWaterToWaterEquationFitHeatingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::HeatPumpWaterToWaterEquationFitHeating,std::allocator< openstudio::model::HeatPumpWaterToWaterEquationFitHeating > >":

    return _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeatingsByName(t_model, t_name, t_exactMatch)

getHeatPumpWaterToWaterEquationFitHeatingsByName = _openstudiomodelhvac.getHeatPumpWaterToWaterEquationFitHeatingsByName

class ThermalStorageChilledWaterStratified(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ThermalStorageChilledWaterStratified, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ThermalStorageChilledWaterStratified, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ThermalStorageChilledWaterStratified(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ThermalStorageChilledWaterStratified

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ThermalStorageChilledWaterStratified_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ThermalStorageChilledWaterStratified_iddObjectType)

    __swig_getmethods__["tankShapeValues"] = lambda x: _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankShapeValues

    if _newclass:

        tankShapeValues = staticmethod(_openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankShapeValues)

    __swig_getmethods__["ambientTemperatureIndicatorValues"] = lambda x: _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureIndicatorValues

    if _newclass:

        ambientTemperatureIndicatorValues = staticmethod(_openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureIndicatorValues)

    __swig_getmethods__["inletModeValues"] = lambda x: _openstudiomodelhvac.ThermalStorageChilledWaterStratified_inletModeValues

    if _newclass:

        inletModeValues = staticmethod(_openstudiomodelhvac.ThermalStorageChilledWaterStratified_inletModeValues)



    def tankVolume(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankVolume(self)



    def tankHeight(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankHeight(self)



    def tankShape(self) -> "std::string":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankShape(self)



    def tankPerimeter(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankPerimeter(self)



    def setpointTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setpointTemperatureSchedule(self)



    def deadbandTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_deadbandTemperatureDifference(self)



    def temperatureSensorHeight(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_temperatureSensorHeight(self)



    def minimumTemperatureLimit(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_minimumTemperatureLimit(self)



    def nominalCoolingCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_nominalCoolingCapacity(self)



    def ambientTemperatureIndicator(self) -> "std::string":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureIndicator(self)



    def ambientTemperatureSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureSchedule(self)



    def ambientTemperatureThermalZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureThermalZone(self)



    def ambientTemperatureOutdoorAirNodeName(self) -> "boost::optional< std::string >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureOutdoorAirNodeName(self)



    def uniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_uniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self)



    def useSideHeatTransferEffectiveness(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideHeatTransferEffectiveness(self)



    def useSideAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideAvailabilitySchedule(self)



    def useSideInletHeight(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideInletHeight(self)



    def isUseSideInletHeightAutocalculated(self) -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_isUseSideInletHeightAutocalculated(self)



    def useSideOutletHeight(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideOutletHeight(self)



    def useSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_useSideDesignFlowRate(self)



    def isUseSideDesignFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_isUseSideDesignFlowRateAutosized(self)



    def sourceSideHeatTransferEffectiveness(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideHeatTransferEffectiveness(self)



    def sourceSideAvailabilitySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideAvailabilitySchedule(self)



    def sourceSideInletHeight(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideInletHeight(self)



    def sourceSideOutletHeight(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideOutletHeight(self)



    def isSourceSideOutletHeightAutocalculated(self) -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_isSourceSideOutletHeightAutocalculated(self)



    def sourceSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_sourceSideDesignFlowRate(self)



    def isSourceSideDesignFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_isSourceSideDesignFlowRateAutosized(self)



    def tankRecoveryTime(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankRecoveryTime(self)



    def inletMode(self) -> "std::string":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_inletMode(self)



    def numberofNodes(self) -> "int":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_numberofNodes(self)



    def additionalDestratificationConductivity(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_additionalDestratificationConductivity(self)



    def node1AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node1AdditionalLossCoefficient(self)



    def node2AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node2AdditionalLossCoefficient(self)



    def node3AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node3AdditionalLossCoefficient(self)



    def node4AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node4AdditionalLossCoefficient(self)



    def node5AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node5AdditionalLossCoefficient(self)



    def node6AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node6AdditionalLossCoefficient(self)



    def node7AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node7AdditionalLossCoefficient(self)



    def node8AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node8AdditionalLossCoefficient(self)



    def node9AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node9AdditionalLossCoefficient(self)



    def node10AdditionalLossCoefficient(self) -> "double":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_node10AdditionalLossCoefficient(self)



    def setTankVolume(self, tankVolume: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankVolume(self, tankVolume)



    def setTankHeight(self, tankHeight: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankHeight(self, tankHeight)



    def setTankShape(self, tankShape: 'std::string') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankShape(self, tankShape)



    def setTankPerimeter(self, tankPerimeter: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankPerimeter(self, tankPerimeter)



    def resetTankPerimeter(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetTankPerimeter(self)



    def setSetpointTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSetpointTemperatureSchedule(self, schedule)



    def resetSetpointTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetSetpointTemperatureSchedule(self)



    def setDeadbandTemperatureDifference(self, deadbandTemperatureDifference: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setDeadbandTemperatureDifference(self, deadbandTemperatureDifference)



    def setTemperatureSensorHeight(self, temperatureSensorHeight: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTemperatureSensorHeight(self, temperatureSensorHeight)



    def resetTemperatureSensorHeight(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetTemperatureSensorHeight(self)



    def setMinimumTemperatureLimit(self, minimumTemperatureLimit: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setMinimumTemperatureLimit(self, minimumTemperatureLimit)



    def resetMinimumTemperatureLimit(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetMinimumTemperatureLimit(self)



    def setNominalCoolingCapacity(self, nominalCoolingCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNominalCoolingCapacity(self, nominalCoolingCapacity)



    def resetNominalCoolingCapacity(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetNominalCoolingCapacity(self)



    def setAmbientTemperatureIndicator(self, ambientTemperatureIndicator: 'std::string') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAmbientTemperatureIndicator(self, ambientTemperatureIndicator)



    def setAmbientTemperatureSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAmbientTemperatureSchedule(self, schedule)



    def resetAmbientTemperatureSchedule(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetAmbientTemperatureSchedule(self)



    def setAmbientTemperatureThermalZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAmbientTemperatureThermalZone(self, thermalZone)



    def resetAmbientTemperatureThermalZone(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetAmbientTemperatureThermalZone(self)



    def setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName: 'std::string') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAmbientTemperatureOutdoorAirNodeName(self, ambientTemperatureOutdoorAirNodeName)



    def resetAmbientTemperatureOutdoorAirNodeName(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetAmbientTemperatureOutdoorAirNodeName(self)



    def setUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self, uniformSkinLossCoefficientperUnitAreatoAmbientTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self, uniformSkinLossCoefficientperUnitAreatoAmbientTemperature)



    def resetUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetUniformSkinLossCoefficientperUnitAreatoAmbientTemperature(self)



    def setUseSideHeatTransferEffectiveness(self, useSideHeatTransferEffectiveness: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideHeatTransferEffectiveness(self, useSideHeatTransferEffectiveness)



    def setUseSideAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideAvailabilitySchedule(self, schedule)



    def resetUseSideAvailabilitySchedule(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetUseSideAvailabilitySchedule(self)



    def setUseSideInletHeight(self, useSideInletHeight: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideInletHeight(self, useSideInletHeight)



    def autocalculateUseSideInletHeight(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autocalculateUseSideInletHeight(self)



    def setUseSideOutletHeight(self, useSideOutletHeight: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideOutletHeight(self, useSideOutletHeight)



    def setUseSideDesignFlowRate(self, useSideDesignFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setUseSideDesignFlowRate(self, useSideDesignFlowRate)



    def autosizeUseSideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autosizeUseSideDesignFlowRate(self)



    def setSourceSideHeatTransferEffectiveness(self, sourceSideHeatTransferEffectiveness: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideHeatTransferEffectiveness(self, sourceSideHeatTransferEffectiveness)



    def setSourceSideAvailabilitySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideAvailabilitySchedule(self, schedule)



    def resetSourceSideAvailabilitySchedule(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_resetSourceSideAvailabilitySchedule(self)



    def setSourceSideInletHeight(self, sourceSideInletHeight: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideInletHeight(self, sourceSideInletHeight)



    def setSourceSideOutletHeight(self, sourceSideOutletHeight: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideOutletHeight(self, sourceSideOutletHeight)



    def autocalculateSourceSideOutletHeight(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autocalculateSourceSideOutletHeight(self)



    def setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setSourceSideDesignFlowRate(self, sourceSideDesignFlowRate)



    def autosizeSourceSideDesignFlowRate(self) -> "void":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autosizeSourceSideDesignFlowRate(self)



    def setTankRecoveryTime(self, tankRecoveryTime: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setTankRecoveryTime(self, tankRecoveryTime)



    def setInletMode(self, inletMode: 'std::string') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setInletMode(self, inletMode)



    def setNumberofNodes(self, numberofNodes: 'int') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNumberofNodes(self, numberofNodes)



    def setAdditionalDestratificationConductivity(self, additionalDestratificationConductivity: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setAdditionalDestratificationConductivity(self, additionalDestratificationConductivity)



    def setNode1AdditionalLossCoefficient(self, node1AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode1AdditionalLossCoefficient(self, node1AdditionalLossCoefficient)



    def setNode2AdditionalLossCoefficient(self, node2AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode2AdditionalLossCoefficient(self, node2AdditionalLossCoefficient)



    def setNode3AdditionalLossCoefficient(self, node3AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode3AdditionalLossCoefficient(self, node3AdditionalLossCoefficient)



    def setNode4AdditionalLossCoefficient(self, node4AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode4AdditionalLossCoefficient(self, node4AdditionalLossCoefficient)



    def setNode5AdditionalLossCoefficient(self, node5AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode5AdditionalLossCoefficient(self, node5AdditionalLossCoefficient)



    def setNode6AdditionalLossCoefficient(self, node6AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode6AdditionalLossCoefficient(self, node6AdditionalLossCoefficient)



    def setNode7AdditionalLossCoefficient(self, node7AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode7AdditionalLossCoefficient(self, node7AdditionalLossCoefficient)



    def setNode8AdditionalLossCoefficient(self, node8AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode8AdditionalLossCoefficient(self, node8AdditionalLossCoefficient)



    def setNode9AdditionalLossCoefficient(self, node9AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode9AdditionalLossCoefficient(self, node9AdditionalLossCoefficient)



    def setNode10AdditionalLossCoefficient(self, node10AdditionalLossCoefficient: 'double') -> "bool":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_setNode10AdditionalLossCoefficient(self, node10AdditionalLossCoefficient)



    def autosizedUseSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autosizedUseSideDesignFlowRate(self)



    def autosizedSourceSideDesignFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_autosizedSourceSideDesignFlowRate(self)

ThermalStorageChilledWaterStratified_swigregister = _openstudiomodelhvac.ThermalStorageChilledWaterStratified_swigregister

ThermalStorageChilledWaterStratified_swigregister(ThermalStorageChilledWaterStratified)



def ThermalStorageChilledWaterStratified_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_iddObjectType()

ThermalStorageChilledWaterStratified_iddObjectType = _openstudiomodelhvac.ThermalStorageChilledWaterStratified_iddObjectType



def ThermalStorageChilledWaterStratified_tankShapeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankShapeValues()

ThermalStorageChilledWaterStratified_tankShapeValues = _openstudiomodelhvac.ThermalStorageChilledWaterStratified_tankShapeValues



def ThermalStorageChilledWaterStratified_ambientTemperatureIndicatorValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureIndicatorValues()

ThermalStorageChilledWaterStratified_ambientTemperatureIndicatorValues = _openstudiomodelhvac.ThermalStorageChilledWaterStratified_ambientTemperatureIndicatorValues



def ThermalStorageChilledWaterStratified_inletModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ThermalStorageChilledWaterStratified_inletModeValues()

ThermalStorageChilledWaterStratified_inletModeValues = _openstudiomodelhvac.ThermalStorageChilledWaterStratified_inletModeValues





def toThermalStorageChilledWaterStratified(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ThermalStorageChilledWaterStratified >":

    return _openstudiomodelhvac.toThermalStorageChilledWaterStratified(idfObject)

toThermalStorageChilledWaterStratified = _openstudiomodelhvac.toThermalStorageChilledWaterStratified



def getThermalStorageChilledWaterStratified(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ThermalStorageChilledWaterStratified >":

    return _openstudiomodelhvac.getThermalStorageChilledWaterStratified(t_model, t_handle)

getThermalStorageChilledWaterStratified = _openstudiomodelhvac.getThermalStorageChilledWaterStratified



def getThermalStorageChilledWaterStratifieds(t_model: 'Model') -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified,std::allocator< openstudio::model::ThermalStorageChilledWaterStratified > >":

    return _openstudiomodelhvac.getThermalStorageChilledWaterStratifieds(t_model)

getThermalStorageChilledWaterStratifieds = _openstudiomodelhvac.getThermalStorageChilledWaterStratifieds



def getThermalStorageChilledWaterStratifiedByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ThermalStorageChilledWaterStratified >":

    return _openstudiomodelhvac.getThermalStorageChilledWaterStratifiedByName(t_model, t_name)

getThermalStorageChilledWaterStratifiedByName = _openstudiomodelhvac.getThermalStorageChilledWaterStratifiedByName



def getThermalStorageChilledWaterStratifiedsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ThermalStorageChilledWaterStratified,std::allocator< openstudio::model::ThermalStorageChilledWaterStratified > >":

    return _openstudiomodelhvac.getThermalStorageChilledWaterStratifiedsByName(t_model, t_name, t_exactMatch)

getThermalStorageChilledWaterStratifiedsByName = _openstudiomodelhvac.getThermalStorageChilledWaterStratifiedsByName

class ChillerAbsorptionIndirect(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ChillerAbsorptionIndirect, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ChillerAbsorptionIndirect, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ChillerAbsorptionIndirect(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerAbsorptionIndirect

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ChillerAbsorptionIndirect_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ChillerAbsorptionIndirect_iddObjectType)

    __swig_getmethods__["chillerFlowModeValues"] = lambda x: _openstudiomodelhvac.ChillerAbsorptionIndirect_chillerFlowModeValues

    if _newclass:

        chillerFlowModeValues = staticmethod(_openstudiomodelhvac.ChillerAbsorptionIndirect_chillerFlowModeValues)

    __swig_getmethods__["generatorHeatSourceTypeValues"] = lambda x: _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatSourceTypeValues

    if _newclass:

        generatorHeatSourceTypeValues = staticmethod(_openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatSourceTypeValues)



    def nominalCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_nominalCapacity(self)



    def isNominalCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isNominalCapacityAutosized(self)



    def nominalPumpingPower(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_nominalPumpingPower(self)



    def isNominalPumpingPowerAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isNominalPumpingPowerAutosized(self)



    def minimumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_minimumPartLoadRatio(self)



    def maximumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_maximumPartLoadRatio(self)



    def optimumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_optimumPartLoadRatio(self)



    def designCondenserInletTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_designCondenserInletTemperature(self)



    def condenserInletTemperatureLowerLimit(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_condenserInletTemperatureLowerLimit(self)



    def chilledWaterOutletTemperatureLowerLimit(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_chilledWaterOutletTemperatureLowerLimit(self)



    def designChilledWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_designChilledWaterFlowRate(self)



    def isDesignChilledWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isDesignChilledWaterFlowRateAutosized(self)



    def designCondenserWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_designCondenserWaterFlowRate(self)



    def isDesignCondenserWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isDesignCondenserWaterFlowRateAutosized(self)



    def chillerFlowMode(self) -> "std::string":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_chillerFlowMode(self)



    def generatorHeatInputFunctionofPartLoadRatioCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatInputFunctionofPartLoadRatioCurve(self)



    def pumpElectricInputFunctionofPartLoadRatioCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_pumpElectricInputFunctionofPartLoadRatioCurve(self)



    def capacityCorrectionFunctionofCondenserTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_capacityCorrectionFunctionofCondenserTemperatureCurve(self)



    def capacityCorrectionFunctionofChilledWaterTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_capacityCorrectionFunctionofChilledWaterTemperatureCurve(self)



    def capacityCorrectionFunctionofGeneratorTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_capacityCorrectionFunctionofGeneratorTemperatureCurve(self)



    def generatorHeatInputCorrectionFunctionofCondenserTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatInputCorrectionFunctionofCondenserTemperatureCurve(self)



    def generatorHeatInputCorrectionFunctionofChilledWaterTemperatureCurve(self) -> "openstudio::model::Curve":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatInputCorrectionFunctionofChilledWaterTemperatureCurve(self)



    def generatorHeatSourceType(self) -> "std::string":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatSourceType(self)



    def designGeneratorFluidFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_designGeneratorFluidFlowRate(self)



    def isDesignGeneratorFluidFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_isDesignGeneratorFluidFlowRateAutosized(self)



    def temperatureLowerLimitGeneratorInlet(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_temperatureLowerLimitGeneratorInlet(self)



    def degreeofSubcoolinginSteamGenerator(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_degreeofSubcoolinginSteamGenerator(self)



    def degreeofSubcoolinginSteamCondensateLoop(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_degreeofSubcoolinginSteamCondensateLoop(self)



    def sizingFactor(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_sizingFactor(self)



    def setNominalCapacity(self, nominalCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setNominalCapacity(self, nominalCapacity)



    def autosizeNominalCapacity(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeNominalCapacity(self)



    def setNominalPumpingPower(self, nominalPumpingPower: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setNominalPumpingPower(self, nominalPumpingPower)



    def autosizeNominalPumpingPower(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeNominalPumpingPower(self)



    def setMinimumPartLoadRatio(self, minimumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setMinimumPartLoadRatio(self, minimumPartLoadRatio)



    def setMaximumPartLoadRatio(self, maximumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setMaximumPartLoadRatio(self, maximumPartLoadRatio)



    def setOptimumPartLoadRatio(self, optimumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setOptimumPartLoadRatio(self, optimumPartLoadRatio)



    def setDesignCondenserInletTemperature(self, designCondenserInletTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDesignCondenserInletTemperature(self, designCondenserInletTemperature)



    def setCondenserInletTemperatureLowerLimit(self, condenserInletTemperatureLowerLimit: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setCondenserInletTemperatureLowerLimit(self, condenserInletTemperatureLowerLimit)



    def setChilledWaterOutletTemperatureLowerLimit(self, chilledWaterOutletTemperatureLowerLimit: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setChilledWaterOutletTemperatureLowerLimit(self, chilledWaterOutletTemperatureLowerLimit)



    def setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate)



    def autosizeDesignChilledWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeDesignChilledWaterFlowRate(self)



    def setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate)



    def autosizeDesignCondenserWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeDesignCondenserWaterFlowRate(self)



    def setChillerFlowMode(self, chillerFlowMode: 'std::string') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setChillerFlowMode(self, chillerFlowMode)



    def setGeneratorHeatInputFunctionofPartLoadRatioCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setGeneratorHeatInputFunctionofPartLoadRatioCurve(self, curve)



    def setPumpElectricInputFunctionofPartLoadRatioCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setPumpElectricInputFunctionofPartLoadRatioCurve(self, curve)



    def setCapacityCorrectionFunctionofCondenserTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setCapacityCorrectionFunctionofCondenserTemperatureCurve(self, curve)



    def setCapacityCorrectionFunctionofChilledWaterTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setCapacityCorrectionFunctionofChilledWaterTemperatureCurve(self, curve)



    def setCapacityCorrectionFunctionofGeneratorTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setCapacityCorrectionFunctionofGeneratorTemperatureCurve(self, curve)



    def setGeneratorHeatInputCorrectionFunctionofCondenserTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setGeneratorHeatInputCorrectionFunctionofCondenserTemperatureCurve(self, curve)



    def setGeneratorHeatInputCorrectionFunctionofChilledWaterTemperatureCurve(self, curve: 'Curve') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setGeneratorHeatInputCorrectionFunctionofChilledWaterTemperatureCurve(self, curve)



    def setGeneratorHeatSourceType(self, generatorHeatSourceType: 'std::string') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setGeneratorHeatSourceType(self, generatorHeatSourceType)



    def setDesignGeneratorFluidFlowRate(self, designGeneratorFluidFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDesignGeneratorFluidFlowRate(self, designGeneratorFluidFlowRate)



    def autosizeDesignGeneratorFluidFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizeDesignGeneratorFluidFlowRate(self)



    def setTemperatureLowerLimitGeneratorInlet(self, temperatureLowerLimitGeneratorInlet: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setTemperatureLowerLimitGeneratorInlet(self, temperatureLowerLimitGeneratorInlet)



    def setDegreeofSubcoolinginSteamGenerator(self, degreeofSubcoolinginSteamGenerator: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDegreeofSubcoolinginSteamGenerator(self, degreeofSubcoolinginSteamGenerator)



    def setDegreeofSubcoolinginSteamCondensateLoop(self, degreeofSubcoolinginSteamCondensateLoop: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setDegreeofSubcoolinginSteamCondensateLoop(self, degreeofSubcoolinginSteamCondensateLoop)



    def setSizingFactor(self, sizingFactor: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_setSizingFactor(self, sizingFactor)



    def autosizedNominalCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedNominalCapacity(self)



    def autosizedNominalPumpingPower(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedNominalPumpingPower(self)



    def autosizedDesignChilledWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedDesignChilledWaterFlowRate(self)



    def autosizedDesignCondenserWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedDesignCondenserWaterFlowRate(self)



    def autosizedDesignGeneratorFluidFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorptionIndirect_autosizedDesignGeneratorFluidFlowRate(self)

ChillerAbsorptionIndirect_swigregister = _openstudiomodelhvac.ChillerAbsorptionIndirect_swigregister

ChillerAbsorptionIndirect_swigregister(ChillerAbsorptionIndirect)



def ChillerAbsorptionIndirect_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ChillerAbsorptionIndirect_iddObjectType()

ChillerAbsorptionIndirect_iddObjectType = _openstudiomodelhvac.ChillerAbsorptionIndirect_iddObjectType



def ChillerAbsorptionIndirect_chillerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerAbsorptionIndirect_chillerFlowModeValues()

ChillerAbsorptionIndirect_chillerFlowModeValues = _openstudiomodelhvac.ChillerAbsorptionIndirect_chillerFlowModeValues



def ChillerAbsorptionIndirect_generatorHeatSourceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatSourceTypeValues()

ChillerAbsorptionIndirect_generatorHeatSourceTypeValues = _openstudiomodelhvac.ChillerAbsorptionIndirect_generatorHeatSourceTypeValues





def toChillerAbsorptionIndirect(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ChillerAbsorptionIndirect >":

    return _openstudiomodelhvac.toChillerAbsorptionIndirect(idfObject)

toChillerAbsorptionIndirect = _openstudiomodelhvac.toChillerAbsorptionIndirect



def getChillerAbsorptionIndirect(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ChillerAbsorptionIndirect >":

    return _openstudiomodelhvac.getChillerAbsorptionIndirect(t_model, t_handle)

getChillerAbsorptionIndirect = _openstudiomodelhvac.getChillerAbsorptionIndirect



def getChillerAbsorptionIndirects(t_model: 'Model') -> "std::vector< openstudio::model::ChillerAbsorptionIndirect,std::allocator< openstudio::model::ChillerAbsorptionIndirect > >":

    return _openstudiomodelhvac.getChillerAbsorptionIndirects(t_model)

getChillerAbsorptionIndirects = _openstudiomodelhvac.getChillerAbsorptionIndirects



def getChillerAbsorptionIndirectByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ChillerAbsorptionIndirect >":

    return _openstudiomodelhvac.getChillerAbsorptionIndirectByName(t_model, t_name)

getChillerAbsorptionIndirectByName = _openstudiomodelhvac.getChillerAbsorptionIndirectByName



def getChillerAbsorptionIndirectsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ChillerAbsorptionIndirect,std::allocator< openstudio::model::ChillerAbsorptionIndirect > >":

    return _openstudiomodelhvac.getChillerAbsorptionIndirectsByName(t_model, t_name, t_exactMatch)

getChillerAbsorptionIndirectsByName = _openstudiomodelhvac.getChillerAbsorptionIndirectsByName

class ChillerAbsorption(WaterToWaterComponent):

    __swig_setmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, ChillerAbsorption, name, value)

    __swig_getmethods__ = {}

    for _s in [WaterToWaterComponent]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, ChillerAbsorption, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_ChillerAbsorption(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_ChillerAbsorption

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.ChillerAbsorption_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.ChillerAbsorption_iddObjectType)

    __swig_getmethods__["chillerFlowModeValues"] = lambda x: _openstudiomodelhvac.ChillerAbsorption_chillerFlowModeValues

    if _newclass:

        chillerFlowModeValues = staticmethod(_openstudiomodelhvac.ChillerAbsorption_chillerFlowModeValues)

    __swig_getmethods__["generatorHeatSourceTypeValues"] = lambda x: _openstudiomodelhvac.ChillerAbsorption_generatorHeatSourceTypeValues

    if _newclass:

        generatorHeatSourceTypeValues = staticmethod(_openstudiomodelhvac.ChillerAbsorption_generatorHeatSourceTypeValues)



    def nominalCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_nominalCapacity(self)



    def isNominalCapacityAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_isNominalCapacityAutosized(self)



    def nominalPumpingPower(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_nominalPumpingPower(self)



    def isNominalPumpingPowerAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_isNominalPumpingPowerAutosized(self)



    def minimumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_minimumPartLoadRatio(self)



    def maximumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_maximumPartLoadRatio(self)



    def optimumPartLoadRatio(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_optimumPartLoadRatio(self)



    def designCondenserInletTemperature(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_designCondenserInletTemperature(self)



    def designChilledWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_designChilledWaterFlowRate(self)



    def isDesignChilledWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_isDesignChilledWaterFlowRateAutosized(self)



    def designCondenserWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_designCondenserWaterFlowRate(self)



    def isDesignCondenserWaterFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_isDesignCondenserWaterFlowRateAutosized(self)



    def coefficient1oftheHotWaterorSteamUsePartLoadRatioCurve(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_coefficient1oftheHotWaterorSteamUsePartLoadRatioCurve(self)



    def coefficient2oftheHotWaterorSteamUsePartLoadRatioCurve(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_coefficient2oftheHotWaterorSteamUsePartLoadRatioCurve(self)



    def coefficient3oftheHotWaterorSteamUsePartLoadRatioCurve(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_coefficient3oftheHotWaterorSteamUsePartLoadRatioCurve(self)



    def coefficient1ofthePumpElectricUsePartLoadRatioCurve(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_coefficient1ofthePumpElectricUsePartLoadRatioCurve(self)



    def coefficient2ofthePumpElectricUsePartLoadRatioCurve(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_coefficient2ofthePumpElectricUsePartLoadRatioCurve(self)



    def coefficient3ofthePumpElectricUsePartLoadRatioCurve(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_coefficient3ofthePumpElectricUsePartLoadRatioCurve(self)



    def chilledWaterOutletTemperatureLowerLimit(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_chilledWaterOutletTemperatureLowerLimit(self)



    def chillerFlowMode(self) -> "std::string":

        return _openstudiomodelhvac.ChillerAbsorption_chillerFlowMode(self)



    def generatorHeatSourceType(self) -> "std::string":

        return _openstudiomodelhvac.ChillerAbsorption_generatorHeatSourceType(self)



    def designGeneratorFluidFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_designGeneratorFluidFlowRate(self)



    def isDesignGeneratorFluidFlowRateAutosized(self) -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_isDesignGeneratorFluidFlowRateAutosized(self)



    def degreeofSubcoolinginSteamGenerator(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_degreeofSubcoolinginSteamGenerator(self)



    def sizingFactor(self) -> "double":

        return _openstudiomodelhvac.ChillerAbsorption_sizingFactor(self)



    def setNominalCapacity(self, nominalCapacity: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setNominalCapacity(self, nominalCapacity)



    def autosizeNominalCapacity(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorption_autosizeNominalCapacity(self)



    def setNominalPumpingPower(self, nominalPumpingPower: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setNominalPumpingPower(self, nominalPumpingPower)



    def autosizeNominalPumpingPower(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorption_autosizeNominalPumpingPower(self)



    def setMinimumPartLoadRatio(self, minimumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setMinimumPartLoadRatio(self, minimumPartLoadRatio)



    def setMaximumPartLoadRatio(self, maximumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setMaximumPartLoadRatio(self, maximumPartLoadRatio)



    def setOptimumPartLoadRatio(self, optimumPartLoadRatio: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setOptimumPartLoadRatio(self, optimumPartLoadRatio)



    def setDesignCondenserInletTemperature(self, designCondenserInletTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setDesignCondenserInletTemperature(self, designCondenserInletTemperature)



    def setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setDesignChilledWaterFlowRate(self, designChilledWaterFlowRate)



    def autosizeDesignChilledWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorption_autosizeDesignChilledWaterFlowRate(self)



    def setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setDesignCondenserWaterFlowRate(self, designCondenserWaterFlowRate)



    def autosizeDesignCondenserWaterFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorption_autosizeDesignCondenserWaterFlowRate(self)



    def setCoefficient1oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient1oftheHotWaterorSteamUsePartLoadRatioCurve: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient1oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient1oftheHotWaterorSteamUsePartLoadRatioCurve)



    def setCoefficient2oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient2oftheHotWaterorSteamUsePartLoadRatioCurve: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient2oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient2oftheHotWaterorSteamUsePartLoadRatioCurve)



    def setCoefficient3oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient3oftheHotWaterorSteamUsePartLoadRatioCurve: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient3oftheHotWaterorSteamUsePartLoadRatioCurve(self, coefficient3oftheHotWaterorSteamUsePartLoadRatioCurve)



    def setCoefficient1ofthePumpElectricUsePartLoadRatioCurve(self, coefficient1ofthePumpElectricUsePartLoadRatioCurve: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient1ofthePumpElectricUsePartLoadRatioCurve(self, coefficient1ofthePumpElectricUsePartLoadRatioCurve)



    def setCoefficient2ofthePumpElectricUsePartLoadRatioCurve(self, coefficient2ofthePumpElectricUsePartLoadRatioCurve: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient2ofthePumpElectricUsePartLoadRatioCurve(self, coefficient2ofthePumpElectricUsePartLoadRatioCurve)



    def setCoefficient3ofthePumpElectricUsePartLoadRatioCurve(self, coefficient3ofthePumpElectricUsePartLoadRatioCurve: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setCoefficient3ofthePumpElectricUsePartLoadRatioCurve(self, coefficient3ofthePumpElectricUsePartLoadRatioCurve)



    def setChilledWaterOutletTemperatureLowerLimit(self, chilledWaterOutletTemperatureLowerLimit: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setChilledWaterOutletTemperatureLowerLimit(self, chilledWaterOutletTemperatureLowerLimit)



    def setChillerFlowMode(self, chillerFlowMode: 'std::string') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setChillerFlowMode(self, chillerFlowMode)



    def setGeneratorHeatSourceType(self, generatorHeatSourceType: 'std::string') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setGeneratorHeatSourceType(self, generatorHeatSourceType)



    def setDesignGeneratorFluidFlowRate(self, designGeneratorFluidFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setDesignGeneratorFluidFlowRate(self, designGeneratorFluidFlowRate)



    def autosizeDesignGeneratorFluidFlowRate(self) -> "void":

        return _openstudiomodelhvac.ChillerAbsorption_autosizeDesignGeneratorFluidFlowRate(self)



    def setDegreeofSubcoolinginSteamGenerator(self, degreeofSubcoolinginSteamGenerator: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setDegreeofSubcoolinginSteamGenerator(self, degreeofSubcoolinginSteamGenerator)



    def setSizingFactor(self, sizingFactor: 'double') -> "bool":

        return _openstudiomodelhvac.ChillerAbsorption_setSizingFactor(self, sizingFactor)



    def autosizedNominalCapacity(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_autosizedNominalCapacity(self)



    def autosizedNominalPumpingPower(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_autosizedNominalPumpingPower(self)



    def autosizedDesignChilledWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_autosizedDesignChilledWaterFlowRate(self)



    def autosizedDesignCondenserWaterFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_autosizedDesignCondenserWaterFlowRate(self)



    def autosizedDesignGeneratorFluidFlowRate(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.ChillerAbsorption_autosizedDesignGeneratorFluidFlowRate(self)

ChillerAbsorption_swigregister = _openstudiomodelhvac.ChillerAbsorption_swigregister

ChillerAbsorption_swigregister(ChillerAbsorption)



def ChillerAbsorption_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.ChillerAbsorption_iddObjectType()

ChillerAbsorption_iddObjectType = _openstudiomodelhvac.ChillerAbsorption_iddObjectType



def ChillerAbsorption_chillerFlowModeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerAbsorption_chillerFlowModeValues()

ChillerAbsorption_chillerFlowModeValues = _openstudiomodelhvac.ChillerAbsorption_chillerFlowModeValues



def ChillerAbsorption_generatorHeatSourceTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.ChillerAbsorption_generatorHeatSourceTypeValues()

ChillerAbsorption_generatorHeatSourceTypeValues = _openstudiomodelhvac.ChillerAbsorption_generatorHeatSourceTypeValues





def toChillerAbsorption(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::ChillerAbsorption >":

    return _openstudiomodelhvac.toChillerAbsorption(idfObject)

toChillerAbsorption = _openstudiomodelhvac.toChillerAbsorption



def getChillerAbsorption(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::ChillerAbsorption >":

    return _openstudiomodelhvac.getChillerAbsorption(t_model, t_handle)

getChillerAbsorption = _openstudiomodelhvac.getChillerAbsorption



def getChillerAbsorptions(t_model: 'Model') -> "std::vector< openstudio::model::ChillerAbsorption,std::allocator< openstudio::model::ChillerAbsorption > >":

    return _openstudiomodelhvac.getChillerAbsorptions(t_model)

getChillerAbsorptions = _openstudiomodelhvac.getChillerAbsorptions



def getChillerAbsorptionByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::ChillerAbsorption >":

    return _openstudiomodelhvac.getChillerAbsorptionByName(t_model, t_name)

getChillerAbsorptionByName = _openstudiomodelhvac.getChillerAbsorptionByName



def getChillerAbsorptionsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::ChillerAbsorption,std::allocator< openstudio::model::ChillerAbsorption > >":

    return _openstudiomodelhvac.getChillerAbsorptionsByName(t_model, t_name, t_exactMatch)

getChillerAbsorptionsByName = _openstudiomodelhvac.getChillerAbsorptionsByName

class SolarCollectorPerformanceFlatPlate(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SolarCollectorPerformanceFlatPlate, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SolarCollectorPerformanceFlatPlate, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformanceFlatPlate

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_iddObjectType)

    __swig_getmethods__["testFluidValues"] = lambda x: _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFluidValues

    if _newclass:

        testFluidValues = staticmethod(_openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFluidValues)

    __swig_getmethods__["testCorrelationTypeValues"] = lambda x: _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testCorrelationTypeValues

    if _newclass:

        testCorrelationTypeValues = staticmethod(_openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testCorrelationTypeValues)



    def grossArea(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_grossArea(self)



    def testFluid(self) -> "std::string":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFluid(self)



    def isTestFluidDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_isTestFluidDefaulted(self)



    def testFlowRate(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFlowRate(self)



    def testCorrelationType(self) -> "std::string":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testCorrelationType(self)



    def coefficient1ofEfficiencyEquation(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient1ofEfficiencyEquation(self)



    def coefficient2ofEfficiencyEquation(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient2ofEfficiencyEquation(self)



    def coefficient3ofEfficiencyEquation(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient3ofEfficiencyEquation(self)



    def coefficient2ofIncidentAngleModifier(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient2ofIncidentAngleModifier(self)



    def coefficient3ofIncidentAngleModifier(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_coefficient3ofIncidentAngleModifier(self)



    def setGrossArea(self, grossArea: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setGrossArea(self, grossArea)



    def setTestFluid(self, testFluid: 'std::string') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setTestFluid(self, testFluid)



    def resetTestFluid(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_resetTestFluid(self)



    def setTestFlowRate(self, testFlowRate: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setTestFlowRate(self, testFlowRate)



    def setTestCorrelationType(self, testCorrelationType: 'std::string') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setTestCorrelationType(self, testCorrelationType)



    def setCoefficient1ofEfficiencyEquation(self, coefficient1ofEfficiencyEquation: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient1ofEfficiencyEquation(self, coefficient1ofEfficiencyEquation)



    def setCoefficient2ofEfficiencyEquation(self, coefficient2ofEfficiencyEquation: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient2ofEfficiencyEquation(self, coefficient2ofEfficiencyEquation)



    def setCoefficient3ofEfficiencyEquation(self, coefficient3ofEfficiencyEquation: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient3ofEfficiencyEquation(self, coefficient3ofEfficiencyEquation)



    def resetCoefficient3ofEfficiencyEquation(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_resetCoefficient3ofEfficiencyEquation(self)



    def setCoefficient2ofIncidentAngleModifier(self, coefficient2ofIncidentAngleModifier: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient2ofIncidentAngleModifier(self, coefficient2ofIncidentAngleModifier)



    def resetCoefficient2ofIncidentAngleModifier(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_resetCoefficient2ofIncidentAngleModifier(self)



    def setCoefficient3ofIncidentAngleModifier(self, coefficient3ofIncidentAngleModifier: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_setCoefficient3ofIncidentAngleModifier(self, coefficient3ofIncidentAngleModifier)



    def resetCoefficient3ofIncidentAngleModifier(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_resetCoefficient3ofIncidentAngleModifier(self)

SolarCollectorPerformanceFlatPlate_swigregister = _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_swigregister

SolarCollectorPerformanceFlatPlate_swigregister(SolarCollectorPerformanceFlatPlate)



def SolarCollectorPerformanceFlatPlate_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_iddObjectType()

SolarCollectorPerformanceFlatPlate_iddObjectType = _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_iddObjectType



def SolarCollectorPerformanceFlatPlate_testFluidValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFluidValues()

SolarCollectorPerformanceFlatPlate_testFluidValues = _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testFluidValues



def SolarCollectorPerformanceFlatPlate_testCorrelationTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testCorrelationTypeValues()

SolarCollectorPerformanceFlatPlate_testCorrelationTypeValues = _openstudiomodelhvac.SolarCollectorPerformanceFlatPlate_testCorrelationTypeValues





def toSolarCollectorPerformanceFlatPlate(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SolarCollectorPerformanceFlatPlate >":

    return _openstudiomodelhvac.toSolarCollectorPerformanceFlatPlate(idfObject)

toSolarCollectorPerformanceFlatPlate = _openstudiomodelhvac.toSolarCollectorPerformanceFlatPlate



def getSolarCollectorPerformanceFlatPlate(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SolarCollectorPerformanceFlatPlate >":

    return _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlate(t_model, t_handle)

getSolarCollectorPerformanceFlatPlate = _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlate



def getSolarCollectorPerformanceFlatPlates(t_model: 'Model') -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate,std::allocator< openstudio::model::SolarCollectorPerformanceFlatPlate > >":

    return _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlates(t_model)

getSolarCollectorPerformanceFlatPlates = _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlates



def getSolarCollectorPerformanceFlatPlateByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SolarCollectorPerformanceFlatPlate >":

    return _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlateByName(t_model, t_name)

getSolarCollectorPerformanceFlatPlateByName = _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlateByName



def getSolarCollectorPerformanceFlatPlatesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SolarCollectorPerformanceFlatPlate,std::allocator< openstudio::model::SolarCollectorPerformanceFlatPlate > >":

    return _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlatesByName(t_model, t_name, t_exactMatch)

getSolarCollectorPerformanceFlatPlatesByName = _openstudiomodelhvac.getSolarCollectorPerformanceFlatPlatesByName

class SolarCollectorPerformanceIntegralCollectorStorage(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SolarCollectorPerformanceIntegralCollectorStorage, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SolarCollectorPerformanceIntegralCollectorStorage, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformanceIntegralCollectorStorage

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iddObjectType)

    __swig_getmethods__["iCSCollectorTypeValues"] = lambda x: _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorTypeValues

    if _newclass:

        iCSCollectorTypeValues = staticmethod(_openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorTypeValues)



    def iCSCollectorType(self) -> "std::string":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorType(self)



    def isICSCollectorTypeDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isICSCollectorTypeDefaulted(self)



    def grossArea(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_grossArea(self)



    def collectorWaterVolume(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_collectorWaterVolume(self)



    def bottomHeatLossConductance(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_bottomHeatLossConductance(self)



    def isBottomHeatLossConductanceDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isBottomHeatLossConductanceDefaulted(self)



    def sideHeatLossConductance(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_sideHeatLossConductance(self)



    def isSideHeatLossConductanceDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isSideHeatLossConductanceDefaulted(self)



    def aspectRatio(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_aspectRatio(self)



    def isAspectRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isAspectRatioDefaulted(self)



    def collectorSideHeight(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_collectorSideHeight(self)



    def isCollectorSideHeightDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isCollectorSideHeightDefaulted(self)



    def thermalMassOfAbsorberPlate(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_thermalMassOfAbsorberPlate(self)



    def isThermalMassOfAbsorberPlateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isThermalMassOfAbsorberPlateDefaulted(self)



    def numberOfCovers(self) -> "int":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_numberOfCovers(self)



    def isNumberOfCoversDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isNumberOfCoversDefaulted(self)



    def coverSpacing(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_coverSpacing(self)



    def isCoverSpacingDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isCoverSpacingDefaulted(self)



    def refractiveIndexOfOuterCover(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_refractiveIndexOfOuterCover(self)



    def isRefractiveIndexOfOuterCoverDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isRefractiveIndexOfOuterCoverDefaulted(self)



    def extinctionCoefficientTimesThicknessOfOuterCover(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_extinctionCoefficientTimesThicknessOfOuterCover(self)



    def isExtinctionCoefficientTimesThicknessOfOuterCoverDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isExtinctionCoefficientTimesThicknessOfOuterCoverDefaulted(self)



    def emissivityOfOuterCover(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_emissivityOfOuterCover(self)



    def isEmissivityOfOuterCoverDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isEmissivityOfOuterCoverDefaulted(self)



    def refractiveIndexOfInnerCover(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_refractiveIndexOfInnerCover(self)



    def isRefractiveIndexOfInnerCoverDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isRefractiveIndexOfInnerCoverDefaulted(self)



    def extinctionCoefficientTimesThicknessOfTheInnerCover(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_extinctionCoefficientTimesThicknessOfTheInnerCover(self)



    def isExtinctionCoefficientTimesThicknessOfTheInnerCoverDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isExtinctionCoefficientTimesThicknessOfTheInnerCoverDefaulted(self)



    def emissivityOfInnerCover(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_emissivityOfInnerCover(self)



    def isEmissivityOfInnerCoverDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isEmissivityOfInnerCoverDefaulted(self)



    def absorptanceOfAbsorberPlate(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_absorptanceOfAbsorberPlate(self)



    def isAbsorptanceOfAbsorberPlateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isAbsorptanceOfAbsorberPlateDefaulted(self)



    def emissivityOfAbsorberPlate(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_emissivityOfAbsorberPlate(self)



    def isEmissivityOfAbsorberPlateDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_isEmissivityOfAbsorberPlateDefaulted(self)



    def setICSCollectorType(self, iCSCollectorType: 'std::string') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setICSCollectorType(self, iCSCollectorType)



    def resetICSCollectorType(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetICSCollectorType(self)



    def setGrossArea(self, grossArea: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setGrossArea(self, grossArea)



    def setCollectorWaterVolume(self, collectorWaterVolume: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setCollectorWaterVolume(self, collectorWaterVolume)



    def setBottomHeatLossConductance(self, bottomHeatLossConductance: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setBottomHeatLossConductance(self, bottomHeatLossConductance)



    def resetBottomHeatLossConductance(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetBottomHeatLossConductance(self)



    def setSideHeatLossConductance(self, sideHeatLossConductance: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setSideHeatLossConductance(self, sideHeatLossConductance)



    def resetSideHeatLossConductance(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetSideHeatLossConductance(self)



    def setAspectRatio(self, aspectRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setAspectRatio(self, aspectRatio)



    def resetAspectRatio(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetAspectRatio(self)



    def setCollectorSideHeight(self, collectorSideHeight: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setCollectorSideHeight(self, collectorSideHeight)



    def resetCollectorSideHeight(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetCollectorSideHeight(self)



    def setThermalMassOfAbsorberPlate(self, thermalMassOfAbsorberPlate: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setThermalMassOfAbsorberPlate(self, thermalMassOfAbsorberPlate)



    def resetThermalMassOfAbsorberPlate(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetThermalMassOfAbsorberPlate(self)



    def setNumberOfCovers(self, numberOfCovers: 'int') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setNumberOfCovers(self, numberOfCovers)



    def resetNumberOfCovers(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetNumberOfCovers(self)



    def setCoverSpacing(self, coverSpacing: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setCoverSpacing(self, coverSpacing)



    def resetCoverSpacing(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetCoverSpacing(self)



    def setRefractiveIndexOfOuterCover(self, refractiveIndexOfOuterCover: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setRefractiveIndexOfOuterCover(self, refractiveIndexOfOuterCover)



    def resetRefractiveIndexOfOuterCover(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetRefractiveIndexOfOuterCover(self)



    def setExtinctionCoefficientTimesThicknessOfOuterCover(self, extinctionCoefficientTimesThicknessOfOuterCover: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setExtinctionCoefficientTimesThicknessOfOuterCover(self, extinctionCoefficientTimesThicknessOfOuterCover)



    def resetExtinctionCoefficientTimesThicknessOfOuterCover(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetExtinctionCoefficientTimesThicknessOfOuterCover(self)



    def setEmissivityOfOuterCover(self, emissivityOfOuterCover: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setEmissivityOfOuterCover(self, emissivityOfOuterCover)



    def resetEmissivityOfOuterCover(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetEmissivityOfOuterCover(self)



    def setRefractiveIndexOfInnerCover(self, refractiveIndexOfInnerCover: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setRefractiveIndexOfInnerCover(self, refractiveIndexOfInnerCover)



    def resetRefractiveIndexOfInnerCover(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetRefractiveIndexOfInnerCover(self)



    def setExtinctionCoefficientTimesThicknessOfTheInnerCover(self, extinctionCoefficientTimesThicknessOfTheInnerCover: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setExtinctionCoefficientTimesThicknessOfTheInnerCover(self, extinctionCoefficientTimesThicknessOfTheInnerCover)



    def resetExtinctionCoefficientTimesThicknessOfTheInnerCover(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetExtinctionCoefficientTimesThicknessOfTheInnerCover(self)



    def setEmissivityOfInnerCover(self, emissivityOfInnerCover: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setEmissivityOfInnerCover(self, emissivityOfInnerCover)



    def resetEmissivityOfInnerCover(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetEmissivityOfInnerCover(self)



    def setAbsorptanceOfAbsorberPlate(self, absorptanceOfAbsorberPlate: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setAbsorptanceOfAbsorberPlate(self, absorptanceOfAbsorberPlate)



    def resetAbsorptanceOfAbsorberPlate(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetAbsorptanceOfAbsorberPlate(self)



    def setEmissivityOfAbsorberPlate(self, emissivityOfAbsorberPlate: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_setEmissivityOfAbsorberPlate(self, emissivityOfAbsorberPlate)



    def resetEmissivityOfAbsorberPlate(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_resetEmissivityOfAbsorberPlate(self)

SolarCollectorPerformanceIntegralCollectorStorage_swigregister = _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_swigregister

SolarCollectorPerformanceIntegralCollectorStorage_swigregister(SolarCollectorPerformanceIntegralCollectorStorage)



def SolarCollectorPerformanceIntegralCollectorStorage_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iddObjectType()

SolarCollectorPerformanceIntegralCollectorStorage_iddObjectType = _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iddObjectType



def SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorTypeValues()

SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorTypeValues = _openstudiomodelhvac.SolarCollectorPerformanceIntegralCollectorStorage_iCSCollectorTypeValues





def toSolarCollectorPerformanceIntegralCollectorStorage(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >":

    return _openstudiomodelhvac.toSolarCollectorPerformanceIntegralCollectorStorage(idfObject)

toSolarCollectorPerformanceIntegralCollectorStorage = _openstudiomodelhvac.toSolarCollectorPerformanceIntegralCollectorStorage



def getSolarCollectorPerformanceIntegralCollectorStorage(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >":

    return _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStorage(t_model, t_handle)

getSolarCollectorPerformanceIntegralCollectorStorage = _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStorage



def getSolarCollectorPerformanceIntegralCollectorStorages(t_model: 'Model') -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage,std::allocator< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage > >":

    return _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStorages(t_model)

getSolarCollectorPerformanceIntegralCollectorStorages = _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStorages



def getSolarCollectorPerformanceIntegralCollectorStorageByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage >":

    return _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStorageByName(t_model, t_name)

getSolarCollectorPerformanceIntegralCollectorStorageByName = _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStorageByName



def getSolarCollectorPerformanceIntegralCollectorStoragesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage,std::allocator< openstudio::model::SolarCollectorPerformanceIntegralCollectorStorage > >":

    return _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStoragesByName(t_model, t_name, t_exactMatch)

getSolarCollectorPerformanceIntegralCollectorStoragesByName = _openstudiomodelhvac.getSolarCollectorPerformanceIntegralCollectorStoragesByName

class SolarCollectorPerformancePhotovoltaicThermalSimple(openstudiomodelcore.ModelObject):

    __swig_setmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SolarCollectorPerformancePhotovoltaicThermalSimple, name, value)

    __swig_getmethods__ = {}

    for _s in [openstudiomodelcore.ModelObject]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SolarCollectorPerformancePhotovoltaicThermalSimple, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_SolarCollectorPerformancePhotovoltaicThermalSimple

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_iddObjectType)

    __swig_getmethods__["thermalConversionEfficiencyInputModeTypeValues"] = lambda x: _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeTypeValues

    if _newclass:

        thermalConversionEfficiencyInputModeTypeValues = staticmethod(_openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeTypeValues)



    def fractionOfSurfaceAreaWithActiveThermalCollector(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_fractionOfSurfaceAreaWithActiveThermalCollector(self)



    def thermalConversionEfficiencyInputModeType(self) -> "std::string":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeType(self)



    def thermalConversionEfficiency(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiency(self)



    def thermalConversionEfficiencySchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencySchedule(self)



    def frontSurfaceEmittance(self) -> "double":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_frontSurfaceEmittance(self)



    def isFrontSurfaceEmittanceDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_isFrontSurfaceEmittanceDefaulted(self)



    def setFractionOfSurfaceAreaWithActiveThermalCollector(self, fractionofSurfaceAreawithActiveThermalCollector: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_setFractionOfSurfaceAreaWithActiveThermalCollector(self, fractionofSurfaceAreawithActiveThermalCollector)



    def setThermalConversionEfficiency(self, fixedThermalConversionEfficiency: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_setThermalConversionEfficiency(self, fixedThermalConversionEfficiency)



    def resetThermalConversionEfficiency(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_resetThermalConversionEfficiency(self)



    def setThermalConversionEfficiencySchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_setThermalConversionEfficiencySchedule(self, schedule)



    def resetThermalConversionEfficiencySchedule(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_resetThermalConversionEfficiencySchedule(self)



    def setFrontSurfaceEmittance(self, frontSurfaceEmittance: 'double') -> "bool":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_setFrontSurfaceEmittance(self, frontSurfaceEmittance)



    def resetFrontSurfaceEmittance(self) -> "void":

        return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_resetFrontSurfaceEmittance(self)

SolarCollectorPerformancePhotovoltaicThermalSimple_swigregister = _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_swigregister

SolarCollectorPerformancePhotovoltaicThermalSimple_swigregister(SolarCollectorPerformancePhotovoltaicThermalSimple)



def SolarCollectorPerformancePhotovoltaicThermalSimple_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_iddObjectType()

SolarCollectorPerformancePhotovoltaicThermalSimple_iddObjectType = _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_iddObjectType



def SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeTypeValues()

SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeTypeValues = _openstudiomodelhvac.SolarCollectorPerformancePhotovoltaicThermalSimple_thermalConversionEfficiencyInputModeTypeValues





def toSolarCollectorPerformancePhotovoltaicThermalSimple(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >":

    return _openstudiomodelhvac.toSolarCollectorPerformancePhotovoltaicThermalSimple(idfObject)

toSolarCollectorPerformancePhotovoltaicThermalSimple = _openstudiomodelhvac.toSolarCollectorPerformancePhotovoltaicThermalSimple



def getSolarCollectorPerformancePhotovoltaicThermalSimple(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >":

    return _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimple(t_model, t_handle)

getSolarCollectorPerformancePhotovoltaicThermalSimple = _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimple



def getSolarCollectorPerformancePhotovoltaicThermalSimples(t_model: 'Model') -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple,std::allocator< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple > >":

    return _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimples(t_model)

getSolarCollectorPerformancePhotovoltaicThermalSimples = _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimples



def getSolarCollectorPerformancePhotovoltaicThermalSimpleByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple >":

    return _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimpleByName(t_model, t_name)

getSolarCollectorPerformancePhotovoltaicThermalSimpleByName = _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimpleByName



def getSolarCollectorPerformancePhotovoltaicThermalSimplesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple,std::allocator< openstudio::model::SolarCollectorPerformancePhotovoltaicThermalSimple > >":

    return _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimplesByName(t_model, t_name, t_exactMatch)

getSolarCollectorPerformancePhotovoltaicThermalSimplesByName = _openstudiomodelhvac.getSolarCollectorPerformancePhotovoltaicThermalSimplesByName

class SetpointManagerFollowOutdoorAirTemperature(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerFollowOutdoorAirTemperature, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerFollowOutdoorAirTemperature, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerFollowOutdoorAirTemperature(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowOutdoorAirTemperature

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_iddObjectType)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setpointNode(self)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_controlVariable(self)



    def setControlVariable(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setControlVariable(self, value)



    def referenceTemperatureType(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_referenceTemperatureType(self)



    def setReferenceTemperatureType(self, value: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setReferenceTemperatureType(self, value)



    def offsetTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_offsetTemperatureDifference(self)



    def setOffsetTemperatureDifference(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setOffsetTemperatureDifference(self, value)



    def maximumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_maximumSetpointTemperature(self)



    def setMaximumSetpointTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setMaximumSetpointTemperature(self, value)



    def minimumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_minimumSetpointTemperature(self)



    def setMinimumSetpointTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_setMinimumSetpointTemperature(self, value)

SetpointManagerFollowOutdoorAirTemperature_swigregister = _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_swigregister

SetpointManagerFollowOutdoorAirTemperature_swigregister(SetpointManagerFollowOutdoorAirTemperature)



def SetpointManagerFollowOutdoorAirTemperature_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_iddObjectType()

SetpointManagerFollowOutdoorAirTemperature_iddObjectType = _openstudiomodelhvac.SetpointManagerFollowOutdoorAirTemperature_iddObjectType





def toSetpointManagerFollowOutdoorAirTemperature(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >":

    return _openstudiomodelhvac.toSetpointManagerFollowOutdoorAirTemperature(idfObject)

toSetpointManagerFollowOutdoorAirTemperature = _openstudiomodelhvac.toSetpointManagerFollowOutdoorAirTemperature



def getSetpointManagerFollowOutdoorAirTemperature(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >":

    return _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperature(t_model, t_handle)

getSetpointManagerFollowOutdoorAirTemperature = _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperature



def getSetpointManagerFollowOutdoorAirTemperatures(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature,std::allocator< openstudio::model::SetpointManagerFollowOutdoorAirTemperature > >":

    return _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperatures(t_model)

getSetpointManagerFollowOutdoorAirTemperatures = _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperatures



def getSetpointManagerFollowOutdoorAirTemperatureByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerFollowOutdoorAirTemperature >":

    return _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperatureByName(t_model, t_name)

getSetpointManagerFollowOutdoorAirTemperatureByName = _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperatureByName



def getSetpointManagerFollowOutdoorAirTemperaturesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerFollowOutdoorAirTemperature,std::allocator< openstudio::model::SetpointManagerFollowOutdoorAirTemperature > >":

    return _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperaturesByName(t_model, t_name, t_exactMatch)

getSetpointManagerFollowOutdoorAirTemperaturesByName = _openstudiomodelhvac.getSetpointManagerFollowOutdoorAirTemperaturesByName

class SetpointManagerFollowSystemNodeTemperature(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerFollowSystemNodeTemperature, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerFollowSystemNodeTemperature, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerFollowSystemNodeTemperature(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowSystemNodeTemperature

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_controlVariableValues)

    __swig_getmethods__["referenceTemperatureTypeValues"] = lambda x: _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceTemperatureTypeValues

    if _newclass:

        referenceTemperatureTypeValues = staticmethod(_openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceTemperatureTypeValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_controlVariable(self)



    def referenceNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceNode(self)



    def referenceTemperatureType(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceTemperatureType(self)



    def offsetTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_offsetTemperatureDifference(self)



    def maximumLimitSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_maximumLimitSetpointTemperature(self)



    def minimumLimitSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_minimumLimitSetpointTemperature(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setControlVariable(self, controlVariable)



    def setReferenceNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setReferenceNode(self, node)



    def resetReferenceNode(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_resetReferenceNode(self)



    def setReferenceTemperatureType(self, referenceTemperatureType: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setReferenceTemperatureType(self, referenceTemperatureType)



    def setOffsetTemperatureDifference(self, offsetTemperatureDifference: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setOffsetTemperatureDifference(self, offsetTemperatureDifference)



    def setMaximumLimitSetpointTemperature(self, maximumLimitSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setMaximumLimitSetpointTemperature(self, maximumLimitSetpointTemperature)



    def setMinimumLimitSetpointTemperature(self, minimumLimitSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_setMinimumLimitSetpointTemperature(self, minimumLimitSetpointTemperature)

SetpointManagerFollowSystemNodeTemperature_swigregister = _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_swigregister

SetpointManagerFollowSystemNodeTemperature_swigregister(SetpointManagerFollowSystemNodeTemperature)



def SetpointManagerFollowSystemNodeTemperature_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_iddObjectType()

SetpointManagerFollowSystemNodeTemperature_iddObjectType = _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_iddObjectType



def SetpointManagerFollowSystemNodeTemperature_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_controlVariableValues()

SetpointManagerFollowSystemNodeTemperature_controlVariableValues = _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_controlVariableValues



def SetpointManagerFollowSystemNodeTemperature_referenceTemperatureTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceTemperatureTypeValues()

SetpointManagerFollowSystemNodeTemperature_referenceTemperatureTypeValues = _openstudiomodelhvac.SetpointManagerFollowSystemNodeTemperature_referenceTemperatureTypeValues





def toSetpointManagerFollowSystemNodeTemperature(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerFollowSystemNodeTemperature >":

    return _openstudiomodelhvac.toSetpointManagerFollowSystemNodeTemperature(idfObject)

toSetpointManagerFollowSystemNodeTemperature = _openstudiomodelhvac.toSetpointManagerFollowSystemNodeTemperature



def getSetpointManagerFollowSystemNodeTemperature(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerFollowSystemNodeTemperature >":

    return _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperature(t_model, t_handle)

getSetpointManagerFollowSystemNodeTemperature = _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperature



def getSetpointManagerFollowSystemNodeTemperatures(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature,std::allocator< openstudio::model::SetpointManagerFollowSystemNodeTemperature > >":

    return _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperatures(t_model)

getSetpointManagerFollowSystemNodeTemperatures = _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperatures



def getSetpointManagerFollowSystemNodeTemperatureByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerFollowSystemNodeTemperature >":

    return _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperatureByName(t_model, t_name)

getSetpointManagerFollowSystemNodeTemperatureByName = _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperatureByName



def getSetpointManagerFollowSystemNodeTemperaturesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerFollowSystemNodeTemperature,std::allocator< openstudio::model::SetpointManagerFollowSystemNodeTemperature > >":

    return _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperaturesByName(t_model, t_name, t_exactMatch)

getSetpointManagerFollowSystemNodeTemperaturesByName = _openstudiomodelhvac.getSetpointManagerFollowSystemNodeTemperaturesByName

class SetpointManagerMixedAir(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMixedAir, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMixedAir, name)

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMixedAir

    __del__ = lambda self: None



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerMixedAir(model)

        try:

            self.this.append(this)

        except:

            self.this = this



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerMixedAir_controlVariable(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMixedAir_setControlVariable(self, controlVariable)



    def referenceSetpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMixedAir_referenceSetpointNode(self)



    def setReferenceSetpointNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMixedAir_setReferenceSetpointNode(self, node)



    def fanInletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMixedAir_fanInletNode(self)



    def setFanInletNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMixedAir_setFanInletNode(self, node)



    def fanOutletNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMixedAir_fanOutletNode(self)



    def setFanOutletNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMixedAir_setFanOutletNode(self, node)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMixedAir_setpointNode(self)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerMixedAir_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerMixedAir_iddObjectType)

    __swig_getmethods__["updateFanInletOutletNodes"] = lambda x: _openstudiomodelhvac.SetpointManagerMixedAir_updateFanInletOutletNodes

    if _newclass:

        updateFanInletOutletNodes = staticmethod(_openstudiomodelhvac.SetpointManagerMixedAir_updateFanInletOutletNodes)

SetpointManagerMixedAir_swigregister = _openstudiomodelhvac.SetpointManagerMixedAir_swigregister

SetpointManagerMixedAir_swigregister(SetpointManagerMixedAir)



def SetpointManagerMixedAir_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerMixedAir_iddObjectType()

SetpointManagerMixedAir_iddObjectType = _openstudiomodelhvac.SetpointManagerMixedAir_iddObjectType



def SetpointManagerMixedAir_updateFanInletOutletNodes(airLoopHVAC: 'AirLoopHVAC') -> "void":

    return _openstudiomodelhvac.SetpointManagerMixedAir_updateFanInletOutletNodes(airLoopHVAC)

SetpointManagerMixedAir_updateFanInletOutletNodes = _openstudiomodelhvac.SetpointManagerMixedAir_updateFanInletOutletNodes





def toSetpointManagerMixedAir(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerMixedAir >":

    return _openstudiomodelhvac.toSetpointManagerMixedAir(idfObject)

toSetpointManagerMixedAir = _openstudiomodelhvac.toSetpointManagerMixedAir



def getSetpointManagerMixedAir(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerMixedAir >":

    return _openstudiomodelhvac.getSetpointManagerMixedAir(t_model, t_handle)

getSetpointManagerMixedAir = _openstudiomodelhvac.getSetpointManagerMixedAir



def getSetpointManagerMixedAirs(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerMixedAir,std::allocator< openstudio::model::SetpointManagerMixedAir > >":

    return _openstudiomodelhvac.getSetpointManagerMixedAirs(t_model)

getSetpointManagerMixedAirs = _openstudiomodelhvac.getSetpointManagerMixedAirs



def getSetpointManagerMixedAirByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerMixedAir >":

    return _openstudiomodelhvac.getSetpointManagerMixedAirByName(t_model, t_name)

getSetpointManagerMixedAirByName = _openstudiomodelhvac.getSetpointManagerMixedAirByName



def getSetpointManagerMixedAirsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerMixedAir,std::allocator< openstudio::model::SetpointManagerMixedAir > >":

    return _openstudiomodelhvac.getSetpointManagerMixedAirsByName(t_model, t_name, t_exactMatch)

getSetpointManagerMixedAirsByName = _openstudiomodelhvac.getSetpointManagerMixedAirsByName

class SetpointManagerMultiZoneCoolingAverage(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneCoolingAverage, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneCoolingAverage, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneCoolingAverage(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneCoolingAverage

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_controlVariable(self)



    def minimumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_minimumSetpointTemperature(self)



    def maximumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_maximumSetpointTemperature(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_setControlVariable(self, controlVariable)



    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_setMinimumSetpointTemperature(self, minimumSetpointTemperature)



    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_setMaximumSetpointTemperature(self, maximumSetpointTemperature)

SetpointManagerMultiZoneCoolingAverage_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_swigregister

SetpointManagerMultiZoneCoolingAverage_swigregister(SetpointManagerMultiZoneCoolingAverage)



def SetpointManagerMultiZoneCoolingAverage_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_iddObjectType()

SetpointManagerMultiZoneCoolingAverage_iddObjectType = _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_iddObjectType



def SetpointManagerMultiZoneCoolingAverage_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_controlVariableValues()

SetpointManagerMultiZoneCoolingAverage_controlVariableValues = _openstudiomodelhvac.SetpointManagerMultiZoneCoolingAverage_controlVariableValues





def toSetpointManagerMultiZoneCoolingAverage(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneCoolingAverage >":

    return _openstudiomodelhvac.toSetpointManagerMultiZoneCoolingAverage(idfObject)

toSetpointManagerMultiZoneCoolingAverage = _openstudiomodelhvac.toSetpointManagerMultiZoneCoolingAverage



def getSetpointManagerMultiZoneCoolingAverage(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneCoolingAverage >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAverage(t_model, t_handle)

getSetpointManagerMultiZoneCoolingAverage = _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAverage



def getSetpointManagerMultiZoneCoolingAverages(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneCoolingAverage > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAverages(t_model)

getSetpointManagerMultiZoneCoolingAverages = _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAverages



def getSetpointManagerMultiZoneCoolingAverageByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneCoolingAverage >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAverageByName(t_model, t_name)

getSetpointManagerMultiZoneCoolingAverageByName = _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAverageByName



def getSetpointManagerMultiZoneCoolingAveragesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerMultiZoneCoolingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneCoolingAverage > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAveragesByName(t_model, t_name, t_exactMatch)

getSetpointManagerMultiZoneCoolingAveragesByName = _openstudiomodelhvac.getSetpointManagerMultiZoneCoolingAveragesByName

class SetpointManagerMultiZoneHeatingAverage(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneHeatingAverage, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneHeatingAverage, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneHeatingAverage(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHeatingAverage

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_controlVariable(self)



    def minimumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_minimumSetpointTemperature(self)



    def maximumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_maximumSetpointTemperature(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_setControlVariable(self, controlVariable)



    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_setMinimumSetpointTemperature(self, minimumSetpointTemperature)



    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_setMaximumSetpointTemperature(self, maximumSetpointTemperature)

SetpointManagerMultiZoneHeatingAverage_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_swigregister

SetpointManagerMultiZoneHeatingAverage_swigregister(SetpointManagerMultiZoneHeatingAverage)



def SetpointManagerMultiZoneHeatingAverage_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_iddObjectType()

SetpointManagerMultiZoneHeatingAverage_iddObjectType = _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_iddObjectType



def SetpointManagerMultiZoneHeatingAverage_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_controlVariableValues()

SetpointManagerMultiZoneHeatingAverage_controlVariableValues = _openstudiomodelhvac.SetpointManagerMultiZoneHeatingAverage_controlVariableValues





def toSetpointManagerMultiZoneHeatingAverage(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHeatingAverage >":

    return _openstudiomodelhvac.toSetpointManagerMultiZoneHeatingAverage(idfObject)

toSetpointManagerMultiZoneHeatingAverage = _openstudiomodelhvac.toSetpointManagerMultiZoneHeatingAverage



def getSetpointManagerMultiZoneHeatingAverage(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHeatingAverage >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAverage(t_model, t_handle)

getSetpointManagerMultiZoneHeatingAverage = _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAverage



def getSetpointManagerMultiZoneHeatingAverages(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneHeatingAverage > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAverages(t_model)

getSetpointManagerMultiZoneHeatingAverages = _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAverages



def getSetpointManagerMultiZoneHeatingAverageByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHeatingAverage >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAverageByName(t_model, t_name)

getSetpointManagerMultiZoneHeatingAverageByName = _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAverageByName



def getSetpointManagerMultiZoneHeatingAveragesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerMultiZoneHeatingAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneHeatingAverage > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAveragesByName(t_model, t_name, t_exactMatch)

getSetpointManagerMultiZoneHeatingAveragesByName = _openstudiomodelhvac.getSetpointManagerMultiZoneHeatingAveragesByName

class SetpointManagerMultiZoneHumidityMaximum(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneHumidityMaximum, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneHumidityMaximum, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneHumidityMaximum(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHumidityMaximum

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_controlVariable(self)



    def minimumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_minimumSetpointHumidityRatio(self)



    def maximumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_maximumSetpointHumidityRatio(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_setControlVariable(self, controlVariable)



    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)



    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)

SetpointManagerMultiZoneHumidityMaximum_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_swigregister

SetpointManagerMultiZoneHumidityMaximum_swigregister(SetpointManagerMultiZoneHumidityMaximum)



def SetpointManagerMultiZoneHumidityMaximum_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_iddObjectType()

SetpointManagerMultiZoneHumidityMaximum_iddObjectType = _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_iddObjectType



def SetpointManagerMultiZoneHumidityMaximum_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_controlVariableValues()

SetpointManagerMultiZoneHumidityMaximum_controlVariableValues = _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMaximum_controlVariableValues





def toSetpointManagerMultiZoneHumidityMaximum(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >":

    return _openstudiomodelhvac.toSetpointManagerMultiZoneHumidityMaximum(idfObject)

toSetpointManagerMultiZoneHumidityMaximum = _openstudiomodelhvac.toSetpointManagerMultiZoneHumidityMaximum



def getSetpointManagerMultiZoneHumidityMaximum(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximum(t_model, t_handle)

getSetpointManagerMultiZoneHumidityMaximum = _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximum



def getSetpointManagerMultiZoneHumidityMaximums(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMaximum > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximums(t_model)

getSetpointManagerMultiZoneHumidityMaximums = _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximums



def getSetpointManagerMultiZoneHumidityMaximumByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMaximum >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximumByName(t_model, t_name)

getSetpointManagerMultiZoneHumidityMaximumByName = _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximumByName



def getSetpointManagerMultiZoneHumidityMaximumsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMaximum > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximumsByName(t_model, t_name, t_exactMatch)

getSetpointManagerMultiZoneHumidityMaximumsByName = _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMaximumsByName

class SetpointManagerMultiZoneHumidityMinimum(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneHumidityMinimum, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneHumidityMinimum, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneHumidityMinimum(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneHumidityMinimum

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_controlVariableValues)



    def minimumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_minimumSetpointHumidityRatio(self)



    def isMinimumSetpointHumidityRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_isMinimumSetpointHumidityRatioDefaulted(self)



    def maximumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_maximumSetpointHumidityRatio(self)



    def isMaximumSetpointHumidityRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_isMaximumSetpointHumidityRatioDefaulted(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_setpointNode(self)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_controlVariable(self)



    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)



    def resetMinimumSetpointHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_resetMinimumSetpointHumidityRatio(self)



    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)



    def resetMaximumSetpointHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_resetMaximumSetpointHumidityRatio(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_setControlVariable(self, controlVariable)

SetpointManagerMultiZoneHumidityMinimum_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_swigregister

SetpointManagerMultiZoneHumidityMinimum_swigregister(SetpointManagerMultiZoneHumidityMinimum)



def SetpointManagerMultiZoneHumidityMinimum_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_iddObjectType()

SetpointManagerMultiZoneHumidityMinimum_iddObjectType = _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_iddObjectType



def SetpointManagerMultiZoneHumidityMinimum_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_controlVariableValues()

SetpointManagerMultiZoneHumidityMinimum_controlVariableValues = _openstudiomodelhvac.SetpointManagerMultiZoneHumidityMinimum_controlVariableValues





def toSetpointManagerMultiZoneHumidityMinimum(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >":

    return _openstudiomodelhvac.toSetpointManagerMultiZoneHumidityMinimum(idfObject)

toSetpointManagerMultiZoneHumidityMinimum = _openstudiomodelhvac.toSetpointManagerMultiZoneHumidityMinimum



def getSetpointManagerMultiZoneHumidityMinimum(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimum(t_model, t_handle)

getSetpointManagerMultiZoneHumidityMinimum = _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimum



def getSetpointManagerMultiZoneHumidityMinimums(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMinimum > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimums(t_model)

getSetpointManagerMultiZoneHumidityMinimums = _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimums



def getSetpointManagerMultiZoneHumidityMinimumByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneHumidityMinimum >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimumByName(t_model, t_name)

getSetpointManagerMultiZoneHumidityMinimumByName = _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimumByName



def getSetpointManagerMultiZoneHumidityMinimumsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerMultiZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerMultiZoneHumidityMinimum > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimumsByName(t_model, t_name, t_exactMatch)

getSetpointManagerMultiZoneHumidityMinimumsByName = _openstudiomodelhvac.getSetpointManagerMultiZoneHumidityMinimumsByName

class SetpointManagerMultiZoneMaximumHumidityAverage(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneMaximumHumidityAverage, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneMaximumHumidityAverage, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneMaximumHumidityAverage(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneMaximumHumidityAverage

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_controlVariable(self)



    def minimumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_minimumSetpointHumidityRatio(self)



    def maximumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_maximumSetpointHumidityRatio(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_setControlVariable(self, controlVariable)



    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)



    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)

SetpointManagerMultiZoneMaximumHumidityAverage_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_swigregister

SetpointManagerMultiZoneMaximumHumidityAverage_swigregister(SetpointManagerMultiZoneMaximumHumidityAverage)



def SetpointManagerMultiZoneMaximumHumidityAverage_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_iddObjectType()

SetpointManagerMultiZoneMaximumHumidityAverage_iddObjectType = _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_iddObjectType



def SetpointManagerMultiZoneMaximumHumidityAverage_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_controlVariableValues()

SetpointManagerMultiZoneMaximumHumidityAverage_controlVariableValues = _openstudiomodelhvac.SetpointManagerMultiZoneMaximumHumidityAverage_controlVariableValues





def toSetpointManagerMultiZoneMaximumHumidityAverage(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >":

    return _openstudiomodelhvac.toSetpointManagerMultiZoneMaximumHumidityAverage(idfObject)

toSetpointManagerMultiZoneMaximumHumidityAverage = _openstudiomodelhvac.toSetpointManagerMultiZoneMaximumHumidityAverage



def getSetpointManagerMultiZoneMaximumHumidityAverage(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAverage(t_model, t_handle)

getSetpointManagerMultiZoneMaximumHumidityAverage = _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAverage



def getSetpointManagerMultiZoneMaximumHumidityAverages(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAverages(t_model)

getSetpointManagerMultiZoneMaximumHumidityAverages = _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAverages



def getSetpointManagerMultiZoneMaximumHumidityAverageByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAverageByName(t_model, t_name)

getSetpointManagerMultiZoneMaximumHumidityAverageByName = _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAverageByName



def getSetpointManagerMultiZoneMaximumHumidityAveragesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMaximumHumidityAverage > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAveragesByName(t_model, t_name, t_exactMatch)

getSetpointManagerMultiZoneMaximumHumidityAveragesByName = _openstudiomodelhvac.getSetpointManagerMultiZoneMaximumHumidityAveragesByName

class SetpointManagerMultiZoneMinimumHumidityAverage(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerMultiZoneMinimumHumidityAverage, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerMultiZoneMinimumHumidityAverage, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerMultiZoneMinimumHumidityAverage(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerMultiZoneMinimumHumidityAverage

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_controlVariableValues)



    def minimumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_minimumSetpointHumidityRatio(self)



    def isMinimumSetpointHumidityRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_isMinimumSetpointHumidityRatioDefaulted(self)



    def maximumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_maximumSetpointHumidityRatio(self)



    def isMaximumSetpointHumidityRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_isMaximumSetpointHumidityRatioDefaulted(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_setpointNode(self)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_controlVariable(self)



    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)



    def resetMinimumSetpointHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_resetMinimumSetpointHumidityRatio(self)



    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)



    def resetMaximumSetpointHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_resetMaximumSetpointHumidityRatio(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_setControlVariable(self, controlVariable)

SetpointManagerMultiZoneMinimumHumidityAverage_swigregister = _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_swigregister

SetpointManagerMultiZoneMinimumHumidityAverage_swigregister(SetpointManagerMultiZoneMinimumHumidityAverage)



def SetpointManagerMultiZoneMinimumHumidityAverage_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_iddObjectType()

SetpointManagerMultiZoneMinimumHumidityAverage_iddObjectType = _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_iddObjectType



def SetpointManagerMultiZoneMinimumHumidityAverage_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_controlVariableValues()

SetpointManagerMultiZoneMinimumHumidityAverage_controlVariableValues = _openstudiomodelhvac.SetpointManagerMultiZoneMinimumHumidityAverage_controlVariableValues





def toSetpointManagerMultiZoneMinimumHumidityAverage(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >":

    return _openstudiomodelhvac.toSetpointManagerMultiZoneMinimumHumidityAverage(idfObject)

toSetpointManagerMultiZoneMinimumHumidityAverage = _openstudiomodelhvac.toSetpointManagerMultiZoneMinimumHumidityAverage



def getSetpointManagerMultiZoneMinimumHumidityAverage(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAverage(t_model, t_handle)

getSetpointManagerMultiZoneMinimumHumidityAverage = _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAverage



def getSetpointManagerMultiZoneMinimumHumidityAverages(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAverages(t_model)

getSetpointManagerMultiZoneMinimumHumidityAverages = _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAverages



def getSetpointManagerMultiZoneMinimumHumidityAverageByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAverageByName(t_model, t_name)

getSetpointManagerMultiZoneMinimumHumidityAverageByName = _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAverageByName



def getSetpointManagerMultiZoneMinimumHumidityAveragesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage,std::allocator< openstudio::model::SetpointManagerMultiZoneMinimumHumidityAverage > >":

    return _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAveragesByName(t_model, t_name, t_exactMatch)

getSetpointManagerMultiZoneMinimumHumidityAveragesByName = _openstudiomodelhvac.getSetpointManagerMultiZoneMinimumHumidityAveragesByName

class SetpointManagerOutdoorAirPretreat(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerOutdoorAirPretreat, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerOutdoorAirPretreat, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerOutdoorAirPretreat(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerOutdoorAirPretreat

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_controlVariable(self)



    def minimumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_minimumSetpointTemperature(self)



    def isMinimumSetpointTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_isMinimumSetpointTemperatureDefaulted(self)



    def maximumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_maximumSetpointTemperature(self)



    def isMaximumSetpointTemperatureDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_isMaximumSetpointTemperatureDefaulted(self)



    def minimumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_minimumSetpointHumidityRatio(self)



    def isMinimumSetpointHumidityRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_isMinimumSetpointHumidityRatioDefaulted(self)



    def maximumSetpointHumidityRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_maximumSetpointHumidityRatio(self)



    def isMaximumSetpointHumidityRatioDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_isMaximumSetpointHumidityRatioDefaulted(self)



    def referenceSetpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_referenceSetpointNode(self)



    def mixedAirStreamNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_mixedAirStreamNode(self)



    def outdoorAirStreamNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_outdoorAirStreamNode(self)



    def returnAirStreamNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_returnAirStreamNode(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setControlVariable(self, controlVariable)



    def resetControlVariable(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetControlVariable(self)



    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMinimumSetpointTemperature(self, minimumSetpointTemperature)



    def resetMinimumSetpointTemperature(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMinimumSetpointTemperature(self)



    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMaximumSetpointTemperature(self, maximumSetpointTemperature)



    def resetMaximumSetpointTemperature(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMaximumSetpointTemperature(self)



    def setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMinimumSetpointHumidityRatio(self, minimumSetpointHumidityRatio)



    def resetMinimumSetpointHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMinimumSetpointHumidityRatio(self)



    def setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMaximumSetpointHumidityRatio(self, maximumSetpointHumidityRatio)



    def resetMaximumSetpointHumidityRatio(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMaximumSetpointHumidityRatio(self)



    def setReferenceSetpointNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setReferenceSetpointNode(self, node)



    def resetReferenceSetpointNode(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetReferenceSetpointNode(self)



    def setMixedAirStreamNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setMixedAirStreamNode(self, node)



    def resetMixedAirStreamNode(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetMixedAirStreamNode(self)



    def setOutdoorAirStreamNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setOutdoorAirStreamNode(self, node)



    def resetOutdoorAirStreamNode(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetOutdoorAirStreamNode(self)



    def setReturnAirStreamNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_setReturnAirStreamNode(self, node)



    def resetReturnAirStreamNode(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_resetReturnAirStreamNode(self)

SetpointManagerOutdoorAirPretreat_swigregister = _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_swigregister

SetpointManagerOutdoorAirPretreat_swigregister(SetpointManagerOutdoorAirPretreat)



def SetpointManagerOutdoorAirPretreat_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_iddObjectType()

SetpointManagerOutdoorAirPretreat_iddObjectType = _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_iddObjectType



def SetpointManagerOutdoorAirPretreat_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_controlVariableValues()

SetpointManagerOutdoorAirPretreat_controlVariableValues = _openstudiomodelhvac.SetpointManagerOutdoorAirPretreat_controlVariableValues





def toSetpointManagerOutdoorAirPretreat(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirPretreat >":

    return _openstudiomodelhvac.toSetpointManagerOutdoorAirPretreat(idfObject)

toSetpointManagerOutdoorAirPretreat = _openstudiomodelhvac.toSetpointManagerOutdoorAirPretreat



def getSetpointManagerOutdoorAirPretreat(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirPretreat >":

    return _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreat(t_model, t_handle)

getSetpointManagerOutdoorAirPretreat = _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreat



def getSetpointManagerOutdoorAirPretreats(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat,std::allocator< openstudio::model::SetpointManagerOutdoorAirPretreat > >":

    return _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreats(t_model)

getSetpointManagerOutdoorAirPretreats = _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreats



def getSetpointManagerOutdoorAirPretreatByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirPretreat >":

    return _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreatByName(t_model, t_name)

getSetpointManagerOutdoorAirPretreatByName = _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreatByName



def getSetpointManagerOutdoorAirPretreatsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerOutdoorAirPretreat,std::allocator< openstudio::model::SetpointManagerOutdoorAirPretreat > >":

    return _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreatsByName(t_model, t_name, t_exactMatch)

getSetpointManagerOutdoorAirPretreatsByName = _openstudiomodelhvac.getSetpointManagerOutdoorAirPretreatsByName

class SetpointManagerOutdoorAirReset(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerOutdoorAirReset, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerOutdoorAirReset, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerOutdoorAirReset(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerOutdoorAirReset

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerOutdoorAirReset_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerOutdoorAirReset_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerOutdoorAirReset_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerOutdoorAirReset_controlVariableValues)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointNode(self)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_controlVariable(self)



    def isControlVariableDefaulted(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_isControlVariableDefaulted(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setControlVariable(self, controlVariable)



    def resetControlVariable(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetControlVariable(self)



    def setpointatOutdoorLowTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointatOutdoorLowTemperature(self)



    def getSetpointatOutdoorLowTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_getSetpointatOutdoorLowTemperature(self, returnIP)



    def setSetpointatOutdoorLowTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSetpointatOutdoorLowTemperature(self, *args)



    def outdoorLowTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_outdoorLowTemperature(self)



    def getOutdoorLowTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_getOutdoorLowTemperature(self, returnIP)



    def setOutdoorLowTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setOutdoorLowTemperature(self, *args)



    def setpointatOutdoorHighTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointatOutdoorHighTemperature(self)



    def getSetpointatOutdoorHighTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_getSetpointatOutdoorHighTemperature(self, returnIP)



    def setSetpointatOutdoorHighTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSetpointatOutdoorHighTemperature(self, *args)



    def outdoorHighTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_outdoorHighTemperature(self)



    def getOutdoorHighTemperature(self, returnIP: 'bool'=False) -> "openstudio::Quantity":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_getOutdoorHighTemperature(self, returnIP)



    def setOutdoorHighTemperature(self, *args) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setOutdoorHighTemperature(self, *args)



    def schedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_schedule(self)



    def setSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSchedule(self, schedule)



    def resetSchedule(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetSchedule(self)



    def setpointatOutdoorLowTemperature2(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointatOutdoorLowTemperature2(self)



    def getSetpointatOutdoorLowTemperature2(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_getSetpointatOutdoorLowTemperature2(self, returnIP)



    def setSetpointatOutdoorLowTemperature2(self, *args) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSetpointatOutdoorLowTemperature2(self, *args)



    def resetSetpointatOutdoorLowTemperature2(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetSetpointatOutdoorLowTemperature2(self)



    def outdoorLowTemperature2(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_outdoorLowTemperature2(self)



    def getOutdoorLowTemperature2(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_getOutdoorLowTemperature2(self, returnIP)



    def setOutdoorLowTemperature2(self, *args) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setOutdoorLowTemperature2(self, *args)



    def resetOutdoorLowTemperature2(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetOutdoorLowTemperature2(self)



    def setpointatOutdoorHighTemperature2(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setpointatOutdoorHighTemperature2(self)



    def getSetpointatOutdoorHighTemperature2(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_getSetpointatOutdoorHighTemperature2(self, returnIP)



    def setSetpointatOutdoorHighTemperature2(self, *args) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setSetpointatOutdoorHighTemperature2(self, *args)



    def resetSetpointatOutdoorHighTemperature2(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetSetpointatOutdoorHighTemperature2(self)



    def outdoorHighTemperature2(self) -> "boost::optional< double >":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_outdoorHighTemperature2(self)



    def getOutdoorHighTemperature2(self, returnIP: 'bool'=False) -> "openstudio::OSOptionalQuantity":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_getOutdoorHighTemperature2(self, returnIP)



    def setOutdoorHighTemperature2(self, *args) -> "bool":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_setOutdoorHighTemperature2(self, *args)



    def resetOutdoorHighTemperature2(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_resetOutdoorHighTemperature2(self)

SetpointManagerOutdoorAirReset_swigregister = _openstudiomodelhvac.SetpointManagerOutdoorAirReset_swigregister

SetpointManagerOutdoorAirReset_swigregister(SetpointManagerOutdoorAirReset)



def SetpointManagerOutdoorAirReset_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_iddObjectType()

SetpointManagerOutdoorAirReset_iddObjectType = _openstudiomodelhvac.SetpointManagerOutdoorAirReset_iddObjectType



def SetpointManagerOutdoorAirReset_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerOutdoorAirReset_controlVariableValues()

SetpointManagerOutdoorAirReset_controlVariableValues = _openstudiomodelhvac.SetpointManagerOutdoorAirReset_controlVariableValues





def toSetpointManagerOutdoorAirReset(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirReset >":

    return _openstudiomodelhvac.toSetpointManagerOutdoorAirReset(idfObject)

toSetpointManagerOutdoorAirReset = _openstudiomodelhvac.toSetpointManagerOutdoorAirReset



def getSetpointManagerOutdoorAirReset(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirReset >":

    return _openstudiomodelhvac.getSetpointManagerOutdoorAirReset(t_model, t_handle)

getSetpointManagerOutdoorAirReset = _openstudiomodelhvac.getSetpointManagerOutdoorAirReset



def getSetpointManagerOutdoorAirResets(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset,std::allocator< openstudio::model::SetpointManagerOutdoorAirReset > >":

    return _openstudiomodelhvac.getSetpointManagerOutdoorAirResets(t_model)

getSetpointManagerOutdoorAirResets = _openstudiomodelhvac.getSetpointManagerOutdoorAirResets



def getSetpointManagerOutdoorAirResetByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerOutdoorAirReset >":

    return _openstudiomodelhvac.getSetpointManagerOutdoorAirResetByName(t_model, t_name)

getSetpointManagerOutdoorAirResetByName = _openstudiomodelhvac.getSetpointManagerOutdoorAirResetByName



def getSetpointManagerOutdoorAirResetsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerOutdoorAirReset,std::allocator< openstudio::model::SetpointManagerOutdoorAirReset > >":

    return _openstudiomodelhvac.getSetpointManagerOutdoorAirResetsByName(t_model, t_name, t_exactMatch)

getSetpointManagerOutdoorAirResetsByName = _openstudiomodelhvac.getSetpointManagerOutdoorAirResetsByName

class SetpointManagerScheduled(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerScheduled, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerScheduled, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudiomodelhvac.new_SetpointManagerScheduled(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerScheduled

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerScheduled_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerScheduled_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerScheduled_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerScheduled_controlVariableValues)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerScheduled_setpointNode(self)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerScheduled_controlVariable(self)



    def schedule(self) -> "openstudio::model::Schedule":

        return _openstudiomodelhvac.SetpointManagerScheduled_schedule(self)



    def hasSchedule(self) -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduled_hasSchedule(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduled_setControlVariable(self, controlVariable)



    def setSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduled_setSchedule(self, schedule)



    def setControlVariableAndSchedule(self, controlVariable: 'std::string const &', schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduled_setControlVariableAndSchedule(self, controlVariable, schedule)

SetpointManagerScheduled_swigregister = _openstudiomodelhvac.SetpointManagerScheduled_swigregister

SetpointManagerScheduled_swigregister(SetpointManagerScheduled)



def SetpointManagerScheduled_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerScheduled_iddObjectType()

SetpointManagerScheduled_iddObjectType = _openstudiomodelhvac.SetpointManagerScheduled_iddObjectType



def SetpointManagerScheduled_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerScheduled_controlVariableValues()

SetpointManagerScheduled_controlVariableValues = _openstudiomodelhvac.SetpointManagerScheduled_controlVariableValues





def toSetpointManagerScheduled(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerScheduled >":

    return _openstudiomodelhvac.toSetpointManagerScheduled(idfObject)

toSetpointManagerScheduled = _openstudiomodelhvac.toSetpointManagerScheduled



def getSetpointManagerScheduled(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerScheduled >":

    return _openstudiomodelhvac.getSetpointManagerScheduled(t_model, t_handle)

getSetpointManagerScheduled = _openstudiomodelhvac.getSetpointManagerScheduled



def getSetpointManagerScheduleds(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerScheduled,std::allocator< openstudio::model::SetpointManagerScheduled > >":

    return _openstudiomodelhvac.getSetpointManagerScheduleds(t_model)

getSetpointManagerScheduleds = _openstudiomodelhvac.getSetpointManagerScheduleds



def getSetpointManagerScheduledByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerScheduled >":

    return _openstudiomodelhvac.getSetpointManagerScheduledByName(t_model, t_name)

getSetpointManagerScheduledByName = _openstudiomodelhvac.getSetpointManagerScheduledByName



def getSetpointManagerScheduledsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerScheduled,std::allocator< openstudio::model::SetpointManagerScheduled > >":

    return _openstudiomodelhvac.getSetpointManagerScheduledsByName(t_model, t_name, t_exactMatch)

getSetpointManagerScheduledsByName = _openstudiomodelhvac.getSetpointManagerScheduledsByName

class SetpointManagerScheduledDualSetpoint(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerScheduledDualSetpoint, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerScheduledDualSetpoint, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerScheduledDualSetpoint(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerScheduledDualSetpoint

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_controlVariable(self)



    def highSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_highSetpointSchedule(self)



    def lowSetpointSchedule(self) -> "boost::optional< openstudio::model::Schedule >":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_lowSetpointSchedule(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_setControlVariable(self, controlVariable)



    def setHighSetpointSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_setHighSetpointSchedule(self, schedule)



    def resetHighSetpointSchedule(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_resetHighSetpointSchedule(self)



    def setLowSetpointSchedule(self, schedule: 'Schedule') -> "bool":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_setLowSetpointSchedule(self, schedule)



    def resetLowSetpointSchedule(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_resetLowSetpointSchedule(self)

SetpointManagerScheduledDualSetpoint_swigregister = _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_swigregister

SetpointManagerScheduledDualSetpoint_swigregister(SetpointManagerScheduledDualSetpoint)



def SetpointManagerScheduledDualSetpoint_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_iddObjectType()

SetpointManagerScheduledDualSetpoint_iddObjectType = _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_iddObjectType



def SetpointManagerScheduledDualSetpoint_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_controlVariableValues()

SetpointManagerScheduledDualSetpoint_controlVariableValues = _openstudiomodelhvac.SetpointManagerScheduledDualSetpoint_controlVariableValues





def toSetpointManagerScheduledDualSetpoint(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerScheduledDualSetpoint >":

    return _openstudiomodelhvac.toSetpointManagerScheduledDualSetpoint(idfObject)

toSetpointManagerScheduledDualSetpoint = _openstudiomodelhvac.toSetpointManagerScheduledDualSetpoint



def getSetpointManagerScheduledDualSetpoint(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerScheduledDualSetpoint >":

    return _openstudiomodelhvac.getSetpointManagerScheduledDualSetpoint(t_model, t_handle)

getSetpointManagerScheduledDualSetpoint = _openstudiomodelhvac.getSetpointManagerScheduledDualSetpoint



def getSetpointManagerScheduledDualSetpoints(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint,std::allocator< openstudio::model::SetpointManagerScheduledDualSetpoint > >":

    return _openstudiomodelhvac.getSetpointManagerScheduledDualSetpoints(t_model)

getSetpointManagerScheduledDualSetpoints = _openstudiomodelhvac.getSetpointManagerScheduledDualSetpoints



def getSetpointManagerScheduledDualSetpointByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerScheduledDualSetpoint >":

    return _openstudiomodelhvac.getSetpointManagerScheduledDualSetpointByName(t_model, t_name)

getSetpointManagerScheduledDualSetpointByName = _openstudiomodelhvac.getSetpointManagerScheduledDualSetpointByName



def getSetpointManagerScheduledDualSetpointsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerScheduledDualSetpoint,std::allocator< openstudio::model::SetpointManagerScheduledDualSetpoint > >":

    return _openstudiomodelhvac.getSetpointManagerScheduledDualSetpointsByName(t_model, t_name, t_exactMatch)

getSetpointManagerScheduledDualSetpointsByName = _openstudiomodelhvac.getSetpointManagerScheduledDualSetpointsByName

class SetpointManagerSingleZoneHumidityMaximum(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneHumidityMaximum, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneHumidityMaximum, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneHumidityMaximum(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHumidityMaximum

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlVariable(self)



    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlZone(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_setControlVariable(self, controlVariable)



    def setControlZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_setControlZone(self, thermalZone)



    def resetControlZone(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_resetControlZone(self)

SetpointManagerSingleZoneHumidityMaximum_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_swigregister

SetpointManagerSingleZoneHumidityMaximum_swigregister(SetpointManagerSingleZoneHumidityMaximum)



def SetpointManagerSingleZoneHumidityMaximum_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_iddObjectType()

SetpointManagerSingleZoneHumidityMaximum_iddObjectType = _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_iddObjectType



def SetpointManagerSingleZoneHumidityMaximum_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlVariableValues()

SetpointManagerSingleZoneHumidityMaximum_controlVariableValues = _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMaximum_controlVariableValues





def toSetpointManagerSingleZoneHumidityMaximum(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >":

    return _openstudiomodelhvac.toSetpointManagerSingleZoneHumidityMaximum(idfObject)

toSetpointManagerSingleZoneHumidityMaximum = _openstudiomodelhvac.toSetpointManagerSingleZoneHumidityMaximum



def getSetpointManagerSingleZoneHumidityMaximum(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximum(t_model, t_handle)

getSetpointManagerSingleZoneHumidityMaximum = _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximum



def getSetpointManagerSingleZoneHumidityMaximums(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMaximum > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximums(t_model)

getSetpointManagerSingleZoneHumidityMaximums = _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximums



def getSetpointManagerSingleZoneHumidityMaximumByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMaximum >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximumByName(t_model, t_name)

getSetpointManagerSingleZoneHumidityMaximumByName = _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximumByName



def getSetpointManagerSingleZoneHumidityMaximumsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMaximum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMaximum > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximumsByName(t_model, t_name, t_exactMatch)

getSetpointManagerSingleZoneHumidityMaximumsByName = _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMaximumsByName

class SetpointManagerSingleZoneHumidityMinimum(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneHumidityMinimum, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneHumidityMinimum, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneHumidityMinimum(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHumidityMinimum

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlVariable(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_setpointNode(self)



    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlZone(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_setControlVariable(self, controlVariable)



    def setControlZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_setControlZone(self, thermalZone)



    def resetControlZone(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_resetControlZone(self)

SetpointManagerSingleZoneHumidityMinimum_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_swigregister

SetpointManagerSingleZoneHumidityMinimum_swigregister(SetpointManagerSingleZoneHumidityMinimum)



def SetpointManagerSingleZoneHumidityMinimum_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_iddObjectType()

SetpointManagerSingleZoneHumidityMinimum_iddObjectType = _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_iddObjectType



def SetpointManagerSingleZoneHumidityMinimum_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlVariableValues()

SetpointManagerSingleZoneHumidityMinimum_controlVariableValues = _openstudiomodelhvac.SetpointManagerSingleZoneHumidityMinimum_controlVariableValues





def toSetpointManagerSingleZoneHumidityMinimum(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >":

    return _openstudiomodelhvac.toSetpointManagerSingleZoneHumidityMinimum(idfObject)

toSetpointManagerSingleZoneHumidityMinimum = _openstudiomodelhvac.toSetpointManagerSingleZoneHumidityMinimum



def getSetpointManagerSingleZoneHumidityMinimum(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimum(t_model, t_handle)

getSetpointManagerSingleZoneHumidityMinimum = _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimum



def getSetpointManagerSingleZoneHumidityMinimums(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMinimum > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimums(t_model)

getSetpointManagerSingleZoneHumidityMinimums = _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimums



def getSetpointManagerSingleZoneHumidityMinimumByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHumidityMinimum >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimumByName(t_model, t_name)

getSetpointManagerSingleZoneHumidityMinimumByName = _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimumByName



def getSetpointManagerSingleZoneHumidityMinimumsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerSingleZoneHumidityMinimum,std::allocator< openstudio::model::SetpointManagerSingleZoneHumidityMinimum > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimumsByName(t_model, t_name, t_exactMatch)

getSetpointManagerSingleZoneHumidityMinimumsByName = _openstudiomodelhvac.getSetpointManagerSingleZoneHumidityMinimumsByName

class SetpointManagerSingleZoneOneStageCooling(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneOneStageCooling, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneOneStageCooling, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneOneStageCooling(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneOneStageCooling

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlVariable(self)



    def coolingStageOnSupplyAirSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_coolingStageOnSupplyAirSetpointTemperature(self)



    def coolingStageOffSupplyAirSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_coolingStageOffSupplyAirSetpointTemperature(self)



    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlZone(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setControlVariable(self, controlVariable)



    def setCoolingStageOnSupplyAirSetpointTemperature(self, coolingStageOnSupplyAirSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setCoolingStageOnSupplyAirSetpointTemperature(self, coolingStageOnSupplyAirSetpointTemperature)



    def setCoolingStageOffSupplyAirSetpointTemperature(self, coolingStageOffSupplyAirSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setCoolingStageOffSupplyAirSetpointTemperature(self, coolingStageOffSupplyAirSetpointTemperature)



    def setControlZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_setControlZone(self, thermalZone)



    def resetControlZone(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_resetControlZone(self)

SetpointManagerSingleZoneOneStageCooling_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_swigregister

SetpointManagerSingleZoneOneStageCooling_swigregister(SetpointManagerSingleZoneOneStageCooling)



def SetpointManagerSingleZoneOneStageCooling_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_iddObjectType()

SetpointManagerSingleZoneOneStageCooling_iddObjectType = _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_iddObjectType



def SetpointManagerSingleZoneOneStageCooling_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlVariableValues()

SetpointManagerSingleZoneOneStageCooling_controlVariableValues = _openstudiomodelhvac.SetpointManagerSingleZoneOneStageCooling_controlVariableValues





def toSetpointManagerSingleZoneOneStageCooling(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageCooling >":

    return _openstudiomodelhvac.toSetpointManagerSingleZoneOneStageCooling(idfObject)

toSetpointManagerSingleZoneOneStageCooling = _openstudiomodelhvac.toSetpointManagerSingleZoneOneStageCooling



def getSetpointManagerSingleZoneOneStageCooling(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageCooling >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCooling(t_model, t_handle)

getSetpointManagerSingleZoneOneStageCooling = _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCooling



def getSetpointManagerSingleZoneOneStageCoolings(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageCooling > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCoolings(t_model)

getSetpointManagerSingleZoneOneStageCoolings = _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCoolings



def getSetpointManagerSingleZoneOneStageCoolingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageCooling >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCoolingByName(t_model, t_name)

getSetpointManagerSingleZoneOneStageCoolingByName = _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCoolingByName



def getSetpointManagerSingleZoneOneStageCoolingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageCooling > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCoolingsByName(t_model, t_name, t_exactMatch)

getSetpointManagerSingleZoneOneStageCoolingsByName = _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageCoolingsByName

class SetpointManagerSingleZoneOneStageHeating(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneOneStageHeating, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneOneStageHeating, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneOneStageHeating(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneOneStageHeating

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlVariableValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlVariable(self)



    def heatingStageOnSupplyAirSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_heatingStageOnSupplyAirSetpointTemperature(self)



    def heatingStageOffSupplyAirSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_heatingStageOffSupplyAirSetpointTemperature(self)



    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlZone(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setControlVariable(self, controlVariable)



    def setHeatingStageOnSupplyAirSetpointTemperature(self, heatingStageOnSupplyAirSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setHeatingStageOnSupplyAirSetpointTemperature(self, heatingStageOnSupplyAirSetpointTemperature)



    def setHeatingStageOffSupplyAirSetpointTemperature(self, heatingStageOffSupplyAirSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setHeatingStageOffSupplyAirSetpointTemperature(self, heatingStageOffSupplyAirSetpointTemperature)



    def setControlZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_setControlZone(self, thermalZone)



    def resetControlZone(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_resetControlZone(self)

SetpointManagerSingleZoneOneStageHeating_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_swigregister

SetpointManagerSingleZoneOneStageHeating_swigregister(SetpointManagerSingleZoneOneStageHeating)



def SetpointManagerSingleZoneOneStageHeating_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_iddObjectType()

SetpointManagerSingleZoneOneStageHeating_iddObjectType = _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_iddObjectType



def SetpointManagerSingleZoneOneStageHeating_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlVariableValues()

SetpointManagerSingleZoneOneStageHeating_controlVariableValues = _openstudiomodelhvac.SetpointManagerSingleZoneOneStageHeating_controlVariableValues





def toSetpointManagerSingleZoneOneStageHeating(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageHeating >":

    return _openstudiomodelhvac.toSetpointManagerSingleZoneOneStageHeating(idfObject)

toSetpointManagerSingleZoneOneStageHeating = _openstudiomodelhvac.toSetpointManagerSingleZoneOneStageHeating



def getSetpointManagerSingleZoneOneStageHeating(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageHeating >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeating(t_model, t_handle)

getSetpointManagerSingleZoneOneStageHeating = _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeating



def getSetpointManagerSingleZoneOneStageHeatings(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageHeating > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeatings(t_model)

getSetpointManagerSingleZoneOneStageHeatings = _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeatings



def getSetpointManagerSingleZoneOneStageHeatingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneOneStageHeating >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeatingByName(t_model, t_name)

getSetpointManagerSingleZoneOneStageHeatingByName = _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeatingByName



def getSetpointManagerSingleZoneOneStageHeatingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerSingleZoneOneStageHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneOneStageHeating > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeatingsByName(t_model, t_name, t_exactMatch)

getSetpointManagerSingleZoneOneStageHeatingsByName = _openstudiomodelhvac.getSetpointManagerSingleZoneOneStageHeatingsByName

class SetpointManagerSingleZoneCooling(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneCooling, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneCooling, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneCooling(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneCooling

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneCooling_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneCooling_iddObjectType)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_controlVariable(self)



    def minimumSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_minimumSupplyAirTemperature(self)



    def maximumSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_maximumSupplyAirTemperature(self)



    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_controlZone(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_setControlVariable(self, controlVariable)



    def setMinimumSupplyAirTemperature(self, minimumSupplyAirTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_setMinimumSupplyAirTemperature(self, minimumSupplyAirTemperature)



    def setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature)



    def setControlZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_setControlZone(self, thermalZone)



    def resetControlZone(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_resetControlZone(self)

SetpointManagerSingleZoneCooling_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneCooling_swigregister

SetpointManagerSingleZoneCooling_swigregister(SetpointManagerSingleZoneCooling)



def SetpointManagerSingleZoneCooling_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerSingleZoneCooling_iddObjectType()

SetpointManagerSingleZoneCooling_iddObjectType = _openstudiomodelhvac.SetpointManagerSingleZoneCooling_iddObjectType





def toSetpointManagerSingleZoneCooling(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneCooling >":

    return _openstudiomodelhvac.toSetpointManagerSingleZoneCooling(idfObject)

toSetpointManagerSingleZoneCooling = _openstudiomodelhvac.toSetpointManagerSingleZoneCooling



def getSetpointManagerSingleZoneCooling(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneCooling >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneCooling(t_model, t_handle)

getSetpointManagerSingleZoneCooling = _openstudiomodelhvac.getSetpointManagerSingleZoneCooling



def getSetpointManagerSingleZoneCoolings(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneCooling > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneCoolings(t_model)

getSetpointManagerSingleZoneCoolings = _openstudiomodelhvac.getSetpointManagerSingleZoneCoolings



def getSetpointManagerSingleZoneCoolingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneCooling >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneCoolingByName(t_model, t_name)

getSetpointManagerSingleZoneCoolingByName = _openstudiomodelhvac.getSetpointManagerSingleZoneCoolingByName



def getSetpointManagerSingleZoneCoolingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerSingleZoneCooling,std::allocator< openstudio::model::SetpointManagerSingleZoneCooling > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneCoolingsByName(t_model, t_name, t_exactMatch)

getSetpointManagerSingleZoneCoolingsByName = _openstudiomodelhvac.getSetpointManagerSingleZoneCoolingsByName

class SetpointManagerSingleZoneHeating(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneHeating, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneHeating, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneHeating(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneHeating

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneHeating_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneHeating_iddObjectType)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_controlVariable(self)



    def minimumSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_minimumSupplyAirTemperature(self)



    def maximumSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_maximumSupplyAirTemperature(self)



    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_controlZone(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_setControlVariable(self, controlVariable)



    def setMinimumSupplyAirTemperature(self, minimumSupplyAirTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_setMinimumSupplyAirTemperature(self, minimumSupplyAirTemperature)



    def setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature)



    def setControlZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_setControlZone(self, thermalZone)



    def resetControlZone(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_resetControlZone(self)

SetpointManagerSingleZoneHeating_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneHeating_swigregister

SetpointManagerSingleZoneHeating_swigregister(SetpointManagerSingleZoneHeating)



def SetpointManagerSingleZoneHeating_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerSingleZoneHeating_iddObjectType()

SetpointManagerSingleZoneHeating_iddObjectType = _openstudiomodelhvac.SetpointManagerSingleZoneHeating_iddObjectType





def toSetpointManagerSingleZoneHeating(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHeating >":

    return _openstudiomodelhvac.toSetpointManagerSingleZoneHeating(idfObject)

toSetpointManagerSingleZoneHeating = _openstudiomodelhvac.toSetpointManagerSingleZoneHeating



def getSetpointManagerSingleZoneHeating(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHeating >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHeating(t_model, t_handle)

getSetpointManagerSingleZoneHeating = _openstudiomodelhvac.getSetpointManagerSingleZoneHeating



def getSetpointManagerSingleZoneHeatings(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneHeating > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHeatings(t_model)

getSetpointManagerSingleZoneHeatings = _openstudiomodelhvac.getSetpointManagerSingleZoneHeatings



def getSetpointManagerSingleZoneHeatingByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneHeating >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHeatingByName(t_model, t_name)

getSetpointManagerSingleZoneHeatingByName = _openstudiomodelhvac.getSetpointManagerSingleZoneHeatingByName



def getSetpointManagerSingleZoneHeatingsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerSingleZoneHeating,std::allocator< openstudio::model::SetpointManagerSingleZoneHeating > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneHeatingsByName(t_model, t_name, t_exactMatch)

getSetpointManagerSingleZoneHeatingsByName = _openstudiomodelhvac.getSetpointManagerSingleZoneHeatingsByName

class SetpointManagerSingleZoneReheat(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerSingleZoneReheat, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerSingleZoneReheat, name)

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerSingleZoneReheat

    __del__ = lambda self: None



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerSingleZoneReheat(model)

        try:

            self.this.append(this)

        except:

            self.this = this



    def minimumSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_minimumSupplyAirTemperature(self)



    def setMinimumSupplyAirTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setMinimumSupplyAirTemperature(self, value)



    def maximumSupplyAirTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_maximumSupplyAirTemperature(self)



    def setMaximumSupplyAirTemperature(self, value: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setMaximumSupplyAirTemperature(self, value)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setpointNode(self)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlVariable(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setControlVariable(self, controlVariable)



    def controlZone(self) -> "boost::optional< openstudio::model::ThermalZone >":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlZone(self)



    def setControlZone(self, thermalZone: 'ThermalZone') -> "bool":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_setControlZone(self, thermalZone)



    def resetControlZone(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_resetControlZone(self)

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneReheat_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneReheat_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlVariableValues)

SetpointManagerSingleZoneReheat_swigregister = _openstudiomodelhvac.SetpointManagerSingleZoneReheat_swigregister

SetpointManagerSingleZoneReheat_swigregister(SetpointManagerSingleZoneReheat)



def SetpointManagerSingleZoneReheat_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_iddObjectType()

SetpointManagerSingleZoneReheat_iddObjectType = _openstudiomodelhvac.SetpointManagerSingleZoneReheat_iddObjectType



def SetpointManagerSingleZoneReheat_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlVariableValues()

SetpointManagerSingleZoneReheat_controlVariableValues = _openstudiomodelhvac.SetpointManagerSingleZoneReheat_controlVariableValues





def toSetpointManagerSingleZoneReheat(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneReheat >":

    return _openstudiomodelhvac.toSetpointManagerSingleZoneReheat(idfObject)

toSetpointManagerSingleZoneReheat = _openstudiomodelhvac.toSetpointManagerSingleZoneReheat



def getSetpointManagerSingleZoneReheat(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneReheat >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneReheat(t_model, t_handle)

getSetpointManagerSingleZoneReheat = _openstudiomodelhvac.getSetpointManagerSingleZoneReheat



def getSetpointManagerSingleZoneReheats(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat,std::allocator< openstudio::model::SetpointManagerSingleZoneReheat > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneReheats(t_model)

getSetpointManagerSingleZoneReheats = _openstudiomodelhvac.getSetpointManagerSingleZoneReheats



def getSetpointManagerSingleZoneReheatByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerSingleZoneReheat >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneReheatByName(t_model, t_name)

getSetpointManagerSingleZoneReheatByName = _openstudiomodelhvac.getSetpointManagerSingleZoneReheatByName



def getSetpointManagerSingleZoneReheatsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerSingleZoneReheat,std::allocator< openstudio::model::SetpointManagerSingleZoneReheat > >":

    return _openstudiomodelhvac.getSetpointManagerSingleZoneReheatsByName(t_model, t_name, t_exactMatch)

getSetpointManagerSingleZoneReheatsByName = _openstudiomodelhvac.getSetpointManagerSingleZoneReheatsByName

class SetpointManagerWarmest(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerWarmest, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerWarmest, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerWarmest(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerWarmest

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerWarmest_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerWarmest_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerWarmest_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerWarmest_controlVariableValues)

    __swig_getmethods__["strategyValues"] = lambda x: _openstudiomodelhvac.SetpointManagerWarmest_strategyValues

    if _newclass:

        strategyValues = staticmethod(_openstudiomodelhvac.SetpointManagerWarmest_strategyValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerWarmest_controlVariable(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmest_setControlVariable(self, controlVariable)



    def minimumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerWarmest_minimumSetpointTemperature(self)



    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmest_setMinimumSetpointTemperature(self, minimumSetpointTemperature)



    def maximumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerWarmest_maximumSetpointTemperature(self)



    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmest_setMaximumSetpointTemperature(self, maximumSetpointTemperature)



    def strategy(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerWarmest_strategy(self)



    def setStrategy(self, strategy: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmest_setStrategy(self, strategy)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerWarmest_setpointNode(self)

SetpointManagerWarmest_swigregister = _openstudiomodelhvac.SetpointManagerWarmest_swigregister

SetpointManagerWarmest_swigregister(SetpointManagerWarmest)



def SetpointManagerWarmest_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerWarmest_iddObjectType()

SetpointManagerWarmest_iddObjectType = _openstudiomodelhvac.SetpointManagerWarmest_iddObjectType



def SetpointManagerWarmest_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerWarmest_controlVariableValues()

SetpointManagerWarmest_controlVariableValues = _openstudiomodelhvac.SetpointManagerWarmest_controlVariableValues



def SetpointManagerWarmest_strategyValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerWarmest_strategyValues()

SetpointManagerWarmest_strategyValues = _openstudiomodelhvac.SetpointManagerWarmest_strategyValues





def toSetpointManagerWarmest(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerWarmest >":

    return _openstudiomodelhvac.toSetpointManagerWarmest(idfObject)

toSetpointManagerWarmest = _openstudiomodelhvac.toSetpointManagerWarmest



def getSetpointManagerWarmest(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerWarmest >":

    return _openstudiomodelhvac.getSetpointManagerWarmest(t_model, t_handle)

getSetpointManagerWarmest = _openstudiomodelhvac.getSetpointManagerWarmest



def getSetpointManagerWarmests(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerWarmest,std::allocator< openstudio::model::SetpointManagerWarmest > >":

    return _openstudiomodelhvac.getSetpointManagerWarmests(t_model)

getSetpointManagerWarmests = _openstudiomodelhvac.getSetpointManagerWarmests



def getSetpointManagerWarmestByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerWarmest >":

    return _openstudiomodelhvac.getSetpointManagerWarmestByName(t_model, t_name)

getSetpointManagerWarmestByName = _openstudiomodelhvac.getSetpointManagerWarmestByName



def getSetpointManagerWarmestsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerWarmest,std::allocator< openstudio::model::SetpointManagerWarmest > >":

    return _openstudiomodelhvac.getSetpointManagerWarmestsByName(t_model, t_name, t_exactMatch)

getSetpointManagerWarmestsByName = _openstudiomodelhvac.getSetpointManagerWarmestsByName

class SetpointManagerWarmestTemperatureFlow(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerWarmestTemperatureFlow, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerWarmestTemperatureFlow, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerWarmestTemperatureFlow(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerWarmestTemperatureFlow

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_controlVariableValues)

    __swig_getmethods__["strategyValues"] = lambda x: _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_strategyValues

    if _newclass:

        strategyValues = staticmethod(_openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_strategyValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_controlVariable(self)



    def minimumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_minimumSetpointTemperature(self)



    def maximumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_maximumSetpointTemperature(self)



    def strategy(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_strategy(self)



    def minimumTurndownRatio(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_minimumTurndownRatio(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setControlVariable(self, controlVariable)



    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setMinimumSetpointTemperature(self, minimumSetpointTemperature)



    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setMaximumSetpointTemperature(self, maximumSetpointTemperature)



    def setStrategy(self, strategy: 'std::string') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setStrategy(self, strategy)



    def setMinimumTurndownRatio(self, minimumTurndownRatio: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setMinimumTurndownRatio(self, minimumTurndownRatio)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setpointNode(self)



    def setSetpointNode(self, node: 'Node') -> "bool":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_setSetpointNode(self, node)



    def resetSetpointNode(self) -> "void":

        return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_resetSetpointNode(self)

SetpointManagerWarmestTemperatureFlow_swigregister = _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_swigregister

SetpointManagerWarmestTemperatureFlow_swigregister(SetpointManagerWarmestTemperatureFlow)



def SetpointManagerWarmestTemperatureFlow_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_iddObjectType()

SetpointManagerWarmestTemperatureFlow_iddObjectType = _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_iddObjectType



def SetpointManagerWarmestTemperatureFlow_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_controlVariableValues()

SetpointManagerWarmestTemperatureFlow_controlVariableValues = _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_controlVariableValues



def SetpointManagerWarmestTemperatureFlow_strategyValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_strategyValues()

SetpointManagerWarmestTemperatureFlow_strategyValues = _openstudiomodelhvac.SetpointManagerWarmestTemperatureFlow_strategyValues





def toSetpointManagerWarmestTemperatureFlow(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerWarmestTemperatureFlow >":

    return _openstudiomodelhvac.toSetpointManagerWarmestTemperatureFlow(idfObject)

toSetpointManagerWarmestTemperatureFlow = _openstudiomodelhvac.toSetpointManagerWarmestTemperatureFlow



def getSetpointManagerWarmestTemperatureFlow(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerWarmestTemperatureFlow >":

    return _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlow(t_model, t_handle)

getSetpointManagerWarmestTemperatureFlow = _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlow



def getSetpointManagerWarmestTemperatureFlows(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow,std::allocator< openstudio::model::SetpointManagerWarmestTemperatureFlow > >":

    return _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlows(t_model)

getSetpointManagerWarmestTemperatureFlows = _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlows



def getSetpointManagerWarmestTemperatureFlowByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerWarmestTemperatureFlow >":

    return _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlowByName(t_model, t_name)

getSetpointManagerWarmestTemperatureFlowByName = _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlowByName



def getSetpointManagerWarmestTemperatureFlowsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerWarmestTemperatureFlow,std::allocator< openstudio::model::SetpointManagerWarmestTemperatureFlow > >":

    return _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlowsByName(t_model, t_name, t_exactMatch)

getSetpointManagerWarmestTemperatureFlowsByName = _openstudiomodelhvac.getSetpointManagerWarmestTemperatureFlowsByName

class SetpointManagerColdest(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerColdest, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerColdest, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerColdest(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerColdest

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerColdest_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerColdest_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerColdest_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerColdest_controlVariableValues)

    __swig_getmethods__["strategyValues"] = lambda x: _openstudiomodelhvac.SetpointManagerColdest_strategyValues

    if _newclass:

        strategyValues = staticmethod(_openstudiomodelhvac.SetpointManagerColdest_strategyValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerColdest_controlVariable(self)



    def minimumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerColdest_minimumSetpointTemperature(self)



    def maximumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerColdest_maximumSetpointTemperature(self)



    def strategy(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerColdest_strategy(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerColdest_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerColdest_setControlVariable(self, controlVariable)



    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerColdest_setMinimumSetpointTemperature(self, minimumSetpointTemperature)



    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerColdest_setMaximumSetpointTemperature(self, maximumSetpointTemperature)



    def setStrategy(self, strategy: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerColdest_setStrategy(self, strategy)

SetpointManagerColdest_swigregister = _openstudiomodelhvac.SetpointManagerColdest_swigregister

SetpointManagerColdest_swigregister(SetpointManagerColdest)



def SetpointManagerColdest_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerColdest_iddObjectType()

SetpointManagerColdest_iddObjectType = _openstudiomodelhvac.SetpointManagerColdest_iddObjectType



def SetpointManagerColdest_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerColdest_controlVariableValues()

SetpointManagerColdest_controlVariableValues = _openstudiomodelhvac.SetpointManagerColdest_controlVariableValues



def SetpointManagerColdest_strategyValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerColdest_strategyValues()

SetpointManagerColdest_strategyValues = _openstudiomodelhvac.SetpointManagerColdest_strategyValues





def toSetpointManagerColdest(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerColdest >":

    return _openstudiomodelhvac.toSetpointManagerColdest(idfObject)

toSetpointManagerColdest = _openstudiomodelhvac.toSetpointManagerColdest



def getSetpointManagerColdest(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerColdest >":

    return _openstudiomodelhvac.getSetpointManagerColdest(t_model, t_handle)

getSetpointManagerColdest = _openstudiomodelhvac.getSetpointManagerColdest



def getSetpointManagerColdests(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerColdest,std::allocator< openstudio::model::SetpointManagerColdest > >":

    return _openstudiomodelhvac.getSetpointManagerColdests(t_model)

getSetpointManagerColdests = _openstudiomodelhvac.getSetpointManagerColdests



def getSetpointManagerColdestByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerColdest >":

    return _openstudiomodelhvac.getSetpointManagerColdestByName(t_model, t_name)

getSetpointManagerColdestByName = _openstudiomodelhvac.getSetpointManagerColdestByName



def getSetpointManagerColdestsByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerColdest,std::allocator< openstudio::model::SetpointManagerColdest > >":

    return _openstudiomodelhvac.getSetpointManagerColdestsByName(t_model, t_name, t_exactMatch)

getSetpointManagerColdestsByName = _openstudiomodelhvac.getSetpointManagerColdestsByName

class SetpointManagerFollowGroundTemperature(SetpointManager):

    __swig_setmethods__ = {}

    for _s in [SetpointManager]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, SetpointManagerFollowGroundTemperature, name, value)

    __swig_getmethods__ = {}

    for _s in [SetpointManager]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, SetpointManagerFollowGroundTemperature, name)

    __repr__ = _swig_repr



    def __init__(self, model: 'Model'):

        this = _openstudiomodelhvac.new_SetpointManagerFollowGroundTemperature(model)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudiomodelhvac.delete_SetpointManagerFollowGroundTemperature

    __del__ = lambda self: None

    __swig_getmethods__["iddObjectType"] = lambda x: _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_iddObjectType

    if _newclass:

        iddObjectType = staticmethod(_openstudiomodelhvac.SetpointManagerFollowGroundTemperature_iddObjectType)

    __swig_getmethods__["controlVariableValues"] = lambda x: _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_controlVariableValues

    if _newclass:

        controlVariableValues = staticmethod(_openstudiomodelhvac.SetpointManagerFollowGroundTemperature_controlVariableValues)

    __swig_getmethods__["referenceGroundTemperatureObjectTypeValues"] = lambda x: _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectTypeValues

    if _newclass:

        referenceGroundTemperatureObjectTypeValues = staticmethod(_openstudiomodelhvac.SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectTypeValues)



    def controlVariable(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_controlVariable(self)



    def referenceGroundTemperatureObjectType(self) -> "std::string":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectType(self)



    def offsetTemperatureDifference(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_offsetTemperatureDifference(self)



    def maximumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_maximumSetpointTemperature(self)



    def minimumSetpointTemperature(self) -> "double":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_minimumSetpointTemperature(self)



    def setpointNode(self) -> "boost::optional< openstudio::model::Node >":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setpointNode(self)



    def setControlVariable(self, controlVariable: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setControlVariable(self, controlVariable)



    def setReferenceGroundTemperatureObjectType(self, groundTemperatureObjType: 'std::string const &') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setReferenceGroundTemperatureObjectType(self, groundTemperatureObjType)



    def setOffsetTemperatureDifference(self, offsetTemperatureDifference: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setOffsetTemperatureDifference(self, offsetTemperatureDifference)



    def setMaximumSetpointTemperature(self, maximumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setMaximumSetpointTemperature(self, maximumSetpointTemperature)



    def setMinimumSetpointTemperature(self, minimumSetpointTemperature: 'double') -> "bool":

        return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_setMinimumSetpointTemperature(self, minimumSetpointTemperature)

SetpointManagerFollowGroundTemperature_swigregister = _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_swigregister

SetpointManagerFollowGroundTemperature_swigregister(SetpointManagerFollowGroundTemperature)



def SetpointManagerFollowGroundTemperature_iddObjectType() -> "openstudio::IddObjectType":

    return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_iddObjectType()

SetpointManagerFollowGroundTemperature_iddObjectType = _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_iddObjectType



def SetpointManagerFollowGroundTemperature_controlVariableValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_controlVariableValues()

SetpointManagerFollowGroundTemperature_controlVariableValues = _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_controlVariableValues



def SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectTypeValues() -> "std::vector< std::string,std::allocator< std::string > >":

    return _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectTypeValues()

SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectTypeValues = _openstudiomodelhvac.SetpointManagerFollowGroundTemperature_referenceGroundTemperatureObjectTypeValues





def toSetpointManagerFollowGroundTemperature(idfObject: 'IdfObject') -> "boost::optional< openstudio::model::SetpointManagerFollowGroundTemperature >":

    return _openstudiomodelhvac.toSetpointManagerFollowGroundTemperature(idfObject)

toSetpointManagerFollowGroundTemperature = _openstudiomodelhvac.toSetpointManagerFollowGroundTemperature



def getSetpointManagerFollowGroundTemperature(t_model: 'Model', t_handle: 'UUID') -> "boost::optional< openstudio::model::SetpointManagerFollowGroundTemperature >":

    return _openstudiomodelhvac.getSetpointManagerFollowGroundTemperature(t_model, t_handle)

getSetpointManagerFollowGroundTemperature = _openstudiomodelhvac.getSetpointManagerFollowGroundTemperature



def getSetpointManagerFollowGroundTemperatures(t_model: 'Model') -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature,std::allocator< openstudio::model::SetpointManagerFollowGroundTemperature > >":

    return _openstudiomodelhvac.getSetpointManagerFollowGroundTemperatures(t_model)

getSetpointManagerFollowGroundTemperatures = _openstudiomodelhvac.getSetpointManagerFollowGroundTemperatures



def getSetpointManagerFollowGroundTemperatureByName(t_model: 'Model', t_name: 'std::string const &') -> "boost::optional< openstudio::model::SetpointManagerFollowGroundTemperature >":

    return _openstudiomodelhvac.getSetpointManagerFollowGroundTemperatureByName(t_model, t_name)

getSetpointManagerFollowGroundTemperatureByName = _openstudiomodelhvac.getSetpointManagerFollowGroundTemperatureByName



def getSetpointManagerFollowGroundTemperaturesByName(t_model: 'Model', t_name: 'std::string const &', t_exactMatch: 'bool') -> "std::vector< openstudio::model::SetpointManagerFollowGroundTemperature,std::allocator< openstudio::model::SetpointManagerFollowGroundTemperature > >":

    return _openstudiomodelhvac.getSetpointManagerFollowGroundTemperaturesByName(t_model, t_name, t_exactMatch)

getSetpointManagerFollowGroundTemperaturesByName = _openstudiomodelhvac.getSetpointManagerFollowGroundTemperaturesByName



def addSystemType1(model: 'Model', zones: 'ThermalZoneVector') -> "void":

    return _openstudiomodelhvac.addSystemType1(model, zones)

addSystemType1 = _openstudiomodelhvac.addSystemType1



def addSystemType2(model: 'Model', zones: 'ThermalZoneVector') -> "void":

    return _openstudiomodelhvac.addSystemType2(model, zones)

addSystemType2 = _openstudiomodelhvac.addSystemType2



def addSystemType3(model: 'Model') -> "openstudio::model::Loop":

    return _openstudiomodelhvac.addSystemType3(model)

addSystemType3 = _openstudiomodelhvac.addSystemType3



def addSystemType4(model: 'Model') -> "openstudio::model::Loop":

    return _openstudiomodelhvac.addSystemType4(model)

addSystemType4 = _openstudiomodelhvac.addSystemType4



def addSystemType5(model: 'Model') -> "openstudio::model::Loop":

    return _openstudiomodelhvac.addSystemType5(model)

addSystemType5 = _openstudiomodelhvac.addSystemType5



def addSystemType6(model: 'Model') -> "openstudio::model::Loop":

    return _openstudiomodelhvac.addSystemType6(model)

addSystemType6 = _openstudiomodelhvac.addSystemType6



def addSystemType7(model: 'Model') -> "openstudio::model::Loop":

    return _openstudiomodelhvac.addSystemType7(model)

addSystemType7 = _openstudiomodelhvac.addSystemType7



def addSystemType8(model: 'Model') -> "openstudio::model::Loop":

    return _openstudiomodelhvac.addSystemType8(model)

addSystemType8 = _openstudiomodelhvac.addSystemType8



def addSystemType9(model: 'Model') -> "openstudio::model::Loop":

    return _openstudiomodelhvac.addSystemType9(model)

addSystemType9 = _openstudiomodelhvac.addSystemType9



def addSystemType10(model: 'Model') -> "openstudio::model::Loop":

    return _openstudiomodelhvac.addSystemType10(model)

addSystemType10 = _openstudiomodelhvac.addSystemType10

# This file is compatible with both classic and new-style classes.





