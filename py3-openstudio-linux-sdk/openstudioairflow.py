# This file was automatically generated by SWIG (http://www.swig.org).

# Version 3.0.7

#

# Do not make changes to this file unless you know what you are doing--modify

# the SWIG interface file instead.











from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():

        from os.path import dirname

        import imp

        fp = None

        try:

            fp, pathname, description = imp.find_module('_openstudioairflow', [dirname(__file__)])

        except ImportError:

            import _openstudioairflow

            return _openstudioairflow

        if fp is not None:

            try:

                _mod = imp.load_module('_openstudioairflow', fp, pathname, description)

            finally:

                fp.close()

            return _mod

    _openstudioairflow = swig_import_helper()

    del swig_import_helper

else:

    import _openstudioairflow

del version_info

try:

    _swig_property = property

except NameError:

    pass  # Python < 2.2 doesn't have 'property'.





def _swig_setattr_nondynamic(self, class_type, name, value, static=1):

    if (name == "thisown"):

        return self.this.own(value)

    if (name == "this"):

        if type(value).__name__ == 'SwigPyObject':

            self.__dict__[name] = value

            return

    method = class_type.__swig_setmethods__.get(name, None)

    if method:

        return method(self, value)

    if (not static):

        if _newclass:

            object.__setattr__(self, name, value)

        else:

            self.__dict__[name] = value

    else:

        raise AttributeError("You cannot add attributes to %s" % self)





def _swig_setattr(self, class_type, name, value):

    return _swig_setattr_nondynamic(self, class_type, name, value, 0)





def _swig_getattr_nondynamic(self, class_type, name, static=1):

    if (name == "thisown"):

        return self.this.own()

    method = class_type.__swig_getmethods__.get(name, None)

    if method:

        return method(self)

    if (not static):

        return object.__getattr__(self, name)

    else:

        raise AttributeError(name)



def _swig_getattr(self, class_type, name):

    return _swig_getattr_nondynamic(self, class_type, name, 0)





def _swig_repr(self):

    try:

        strthis = "proxy of " + self.this.__repr__()

    except:

        strthis = ""

    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)



try:

    _object = object

    _newclass = 1

except AttributeError:

    class _object:

        pass

    _newclass = 0





try:

    import weakref

    weakref_proxy = weakref.proxy

except:

    weakref_proxy = lambda x: x





class SwigPyIterator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioairflow.delete_SwigPyIterator

    __del__ = lambda self: None



    def value(self):

        return _openstudioairflow.SwigPyIterator_value(self)



    def incr(self, n):

        return _openstudioairflow.SwigPyIterator_incr(self, n)



    def decr(self, n):

        return _openstudioairflow.SwigPyIterator_decr(self, n)



    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":

        return _openstudioairflow.SwigPyIterator_distance(self, x)



    def equal(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioairflow.SwigPyIterator_equal(self, x)



    def copy(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.SwigPyIterator_copy(self)



    def next(self) -> "PyObject *":

        return _openstudioairflow.SwigPyIterator_next(self)



    def __next__(self) -> "PyObject *":

        return _openstudioairflow.SwigPyIterator___next__(self)



    def previous(self) -> "PyObject *":

        return _openstudioairflow.SwigPyIterator_previous(self)



    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioairflow.SwigPyIterator_advance(self, n)



    def __eq__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioairflow.SwigPyIterator___eq__(self, x)



    def __ne__(self, x: 'SwigPyIterator') -> "bool":

        return _openstudioairflow.SwigPyIterator___ne__(self, x)



    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioairflow.SwigPyIterator___iadd__(self, n)



    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":

        return _openstudioairflow.SwigPyIterator___isub__(self, n)



    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":

        return _openstudioairflow.SwigPyIterator___add__(self, n)



    def __sub__(self, *args) -> "ptrdiff_t":

        return _openstudioairflow.SwigPyIterator___sub__(self, *args)

    def __iter__(self):

        return self

SwigPyIterator_swigregister = _openstudioairflow.SwigPyIterator_swigregister

SwigPyIterator_swigregister(SwigPyIterator)





_openstudioairflow.SHARED_PTR_DISOWN_swigconstant(_openstudioairflow)

SHARED_PTR_DISOWN = _openstudioairflow.SHARED_PTR_DISOWN

from .import openstudioutilities

from .import openstudioutilitiescore

from .import openstudioutilitiestime

from .import openstudioutilitiesdata

from .import openstudioutilitiesunits

from .import openstudioutilitiesplot

from .import openstudioutilitiesgeometry

from .import openstudioutilitiessql

from .import openstudioutilitiesbcl

from .import openstudioutilitiesidd

from .import openstudioutilitiesidf

from .import openstudioutilitiesfiletypes

from .import openstudiomodel

from .import openstudiomodelcore

from .import openstudiomodelsimulation

from .import openstudiomodelresources

from .import openstudiomodelgeometry

from .import openstudiomodelhvac

from .import openstudiomodelzonehvac

from .import openstudiomodelavailabilitymanager

from .import openstudiomodelplantequipmentoperationscheme

from .import openstudiomodelstraightcomponent

from .import openstudiomodelairflow

from .import openstudiomodelrefrigeration

from .import openstudiomodelgenerators

class OptionalContamIndexModel(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalContamIndexModel, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, OptionalContamIndexModel, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_OptionalContamIndexModel(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def reset(self) -> "void":

        return _openstudioairflow.OptionalContamIndexModel_reset(self)



    def __ref__(self) -> "openstudio::contam::IndexModel":

        return _openstudioairflow.OptionalContamIndexModel___ref__(self)



    def is_initialized(self) -> "bool":

        return _openstudioairflow.OptionalContamIndexModel_is_initialized(self)



    def isNull(self) -> "bool":

        return _openstudioairflow.OptionalContamIndexModel_isNull(self)



    def get(self) -> "openstudio::contam::IndexModel":

        return _openstudioairflow.OptionalContamIndexModel_get(self)



    def set(self, t: 'IndexModel') -> "void":

        return _openstudioairflow.OptionalContamIndexModel_set(self, t)

    __swig_destroy__ = _openstudioairflow.delete_OptionalContamIndexModel

    __del__ = lambda self: None

OptionalContamIndexModel_swigregister = _openstudioairflow.OptionalContamIndexModel_swigregister

OptionalContamIndexModel_swigregister(OptionalContamIndexModel)



class ContamSpeciesVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamSpeciesVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamSpeciesVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamSpeciesVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamSpeciesVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamSpeciesVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::Species >::size_type":

        return _openstudioairflow.ContamSpeciesVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::Species >::value_type":

        return _openstudioairflow.ContamSpeciesVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::Species >::difference_type', j: 'std::vector< openstudio::contam::Species >::difference_type') -> "std::vector< openstudio::contam::Species,std::allocator< openstudio::contam::Species > > *":

        return _openstudioairflow.ContamSpeciesVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamSpeciesVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::Species >::difference_type', j: 'std::vector< openstudio::contam::Species >::difference_type') -> "void":

        return _openstudioairflow.ContamSpeciesVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamSpeciesVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::Species >::value_type const &":

        return _openstudioairflow.ContamSpeciesVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamSpeciesVector___setitem__(self, *args)



    def append(self, x: 'Species') -> "void":

        return _openstudioairflow.ContamSpeciesVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamSpeciesVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::Species >::size_type":

        return _openstudioairflow.ContamSpeciesVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamSpeciesVector_clear(self)



    def swap(self, v: 'ContamSpeciesVector') -> "void":

        return _openstudioairflow.ContamSpeciesVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::Species >::allocator_type":

        return _openstudioairflow.ContamSpeciesVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::Species >::iterator":

        return _openstudioairflow.ContamSpeciesVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::Species >::iterator":

        return _openstudioairflow.ContamSpeciesVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::Species >::reverse_iterator":

        return _openstudioairflow.ContamSpeciesVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::Species >::reverse_iterator":

        return _openstudioairflow.ContamSpeciesVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamSpeciesVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::Species >::iterator":

        return _openstudioairflow.ContamSpeciesVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamSpeciesVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Species') -> "void":

        return _openstudioairflow.ContamSpeciesVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::Species >::value_type const &":

        return _openstudioairflow.ContamSpeciesVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::Species >::value_type const &":

        return _openstudioairflow.ContamSpeciesVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::Species >::size_type', x: 'Species') -> "void":

        return _openstudioairflow.ContamSpeciesVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamSpeciesVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamSpeciesVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::Species >::size_type') -> "void":

        return _openstudioairflow.ContamSpeciesVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::Species >::size_type":

        return _openstudioairflow.ContamSpeciesVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamSpeciesVector

    __del__ = lambda self: None

ContamSpeciesVector_swigregister = _openstudioairflow.ContamSpeciesVector_swigregister

ContamSpeciesVector_swigregister(ContamSpeciesVector)



class ContamLevelVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamLevelVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamLevelVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamLevelVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamLevelVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamLevelVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::Level >::size_type":

        return _openstudioairflow.ContamLevelVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::Level >::value_type":

        return _openstudioairflow.ContamLevelVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::Level >::difference_type', j: 'std::vector< openstudio::contam::Level >::difference_type') -> "std::vector< openstudio::contam::Level,std::allocator< openstudio::contam::Level > > *":

        return _openstudioairflow.ContamLevelVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamLevelVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::Level >::difference_type', j: 'std::vector< openstudio::contam::Level >::difference_type') -> "void":

        return _openstudioairflow.ContamLevelVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamLevelVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::Level >::value_type const &":

        return _openstudioairflow.ContamLevelVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamLevelVector___setitem__(self, *args)



    def append(self, x: 'Level') -> "void":

        return _openstudioairflow.ContamLevelVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamLevelVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::Level >::size_type":

        return _openstudioairflow.ContamLevelVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamLevelVector_clear(self)



    def swap(self, v: 'ContamLevelVector') -> "void":

        return _openstudioairflow.ContamLevelVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::Level >::allocator_type":

        return _openstudioairflow.ContamLevelVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::Level >::iterator":

        return _openstudioairflow.ContamLevelVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::Level >::iterator":

        return _openstudioairflow.ContamLevelVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::Level >::reverse_iterator":

        return _openstudioairflow.ContamLevelVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::Level >::reverse_iterator":

        return _openstudioairflow.ContamLevelVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamLevelVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::Level >::iterator":

        return _openstudioairflow.ContamLevelVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamLevelVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Level') -> "void":

        return _openstudioairflow.ContamLevelVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::Level >::value_type const &":

        return _openstudioairflow.ContamLevelVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::Level >::value_type const &":

        return _openstudioairflow.ContamLevelVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::Level >::size_type', x: 'Level') -> "void":

        return _openstudioairflow.ContamLevelVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamLevelVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamLevelVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::Level >::size_type') -> "void":

        return _openstudioairflow.ContamLevelVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::Level >::size_type":

        return _openstudioairflow.ContamLevelVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamLevelVector

    __del__ = lambda self: None

ContamLevelVector_swigregister = _openstudioairflow.ContamLevelVector_swigregister

ContamLevelVector_swigregister(ContamLevelVector)



class ContamDayScheduleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamDayScheduleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamDayScheduleVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamDayScheduleVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamDayScheduleVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamDayScheduleVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::DaySchedule >::size_type":

        return _openstudioairflow.ContamDayScheduleVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::DaySchedule >::value_type":

        return _openstudioairflow.ContamDayScheduleVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::DaySchedule >::difference_type', j: 'std::vector< openstudio::contam::DaySchedule >::difference_type') -> "std::vector< openstudio::contam::DaySchedule,std::allocator< openstudio::contam::DaySchedule > > *":

        return _openstudioairflow.ContamDayScheduleVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamDayScheduleVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::DaySchedule >::difference_type', j: 'std::vector< openstudio::contam::DaySchedule >::difference_type') -> "void":

        return _openstudioairflow.ContamDayScheduleVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamDayScheduleVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::DaySchedule >::value_type const &":

        return _openstudioairflow.ContamDayScheduleVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamDayScheduleVector___setitem__(self, *args)



    def append(self, x: 'DaySchedule') -> "void":

        return _openstudioairflow.ContamDayScheduleVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamDayScheduleVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::DaySchedule >::size_type":

        return _openstudioairflow.ContamDayScheduleVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamDayScheduleVector_clear(self)



    def swap(self, v: 'ContamDayScheduleVector') -> "void":

        return _openstudioairflow.ContamDayScheduleVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::DaySchedule >::allocator_type":

        return _openstudioairflow.ContamDayScheduleVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::DaySchedule >::iterator":

        return _openstudioairflow.ContamDayScheduleVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::DaySchedule >::iterator":

        return _openstudioairflow.ContamDayScheduleVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::DaySchedule >::reverse_iterator":

        return _openstudioairflow.ContamDayScheduleVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::DaySchedule >::reverse_iterator":

        return _openstudioairflow.ContamDayScheduleVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamDayScheduleVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::DaySchedule >::iterator":

        return _openstudioairflow.ContamDayScheduleVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamDayScheduleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'DaySchedule') -> "void":

        return _openstudioairflow.ContamDayScheduleVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::DaySchedule >::value_type const &":

        return _openstudioairflow.ContamDayScheduleVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::DaySchedule >::value_type const &":

        return _openstudioairflow.ContamDayScheduleVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::DaySchedule >::size_type', x: 'DaySchedule') -> "void":

        return _openstudioairflow.ContamDayScheduleVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamDayScheduleVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamDayScheduleVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::DaySchedule >::size_type') -> "void":

        return _openstudioairflow.ContamDayScheduleVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::DaySchedule >::size_type":

        return _openstudioairflow.ContamDayScheduleVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamDayScheduleVector

    __del__ = lambda self: None

ContamDayScheduleVector_swigregister = _openstudioairflow.ContamDayScheduleVector_swigregister

ContamDayScheduleVector_swigregister(ContamDayScheduleVector)



class ContamWeekScheduleVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamWeekScheduleVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamWeekScheduleVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamWeekScheduleVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamWeekScheduleVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamWeekScheduleVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::WeekSchedule >::size_type":

        return _openstudioairflow.ContamWeekScheduleVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::WeekSchedule >::value_type":

        return _openstudioairflow.ContamWeekScheduleVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::WeekSchedule >::difference_type', j: 'std::vector< openstudio::contam::WeekSchedule >::difference_type') -> "std::vector< openstudio::contam::WeekSchedule,std::allocator< openstudio::contam::WeekSchedule > > *":

        return _openstudioairflow.ContamWeekScheduleVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamWeekScheduleVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::WeekSchedule >::difference_type', j: 'std::vector< openstudio::contam::WeekSchedule >::difference_type') -> "void":

        return _openstudioairflow.ContamWeekScheduleVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamWeekScheduleVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::WeekSchedule >::value_type const &":

        return _openstudioairflow.ContamWeekScheduleVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamWeekScheduleVector___setitem__(self, *args)



    def append(self, x: 'WeekSchedule') -> "void":

        return _openstudioairflow.ContamWeekScheduleVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamWeekScheduleVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::WeekSchedule >::size_type":

        return _openstudioairflow.ContamWeekScheduleVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamWeekScheduleVector_clear(self)



    def swap(self, v: 'ContamWeekScheduleVector') -> "void":

        return _openstudioairflow.ContamWeekScheduleVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::WeekSchedule >::allocator_type":

        return _openstudioairflow.ContamWeekScheduleVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::WeekSchedule >::iterator":

        return _openstudioairflow.ContamWeekScheduleVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::WeekSchedule >::iterator":

        return _openstudioairflow.ContamWeekScheduleVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::WeekSchedule >::reverse_iterator":

        return _openstudioairflow.ContamWeekScheduleVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::WeekSchedule >::reverse_iterator":

        return _openstudioairflow.ContamWeekScheduleVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamWeekScheduleVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::WeekSchedule >::iterator":

        return _openstudioairflow.ContamWeekScheduleVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamWeekScheduleVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WeekSchedule') -> "void":

        return _openstudioairflow.ContamWeekScheduleVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::WeekSchedule >::value_type const &":

        return _openstudioairflow.ContamWeekScheduleVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::WeekSchedule >::value_type const &":

        return _openstudioairflow.ContamWeekScheduleVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::WeekSchedule >::size_type', x: 'WeekSchedule') -> "void":

        return _openstudioairflow.ContamWeekScheduleVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamWeekScheduleVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamWeekScheduleVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::WeekSchedule >::size_type') -> "void":

        return _openstudioairflow.ContamWeekScheduleVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::WeekSchedule >::size_type":

        return _openstudioairflow.ContamWeekScheduleVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamWeekScheduleVector

    __del__ = lambda self: None

ContamWeekScheduleVector_swigregister = _openstudioairflow.ContamWeekScheduleVector_swigregister

ContamWeekScheduleVector_swigregister(ContamWeekScheduleVector)



class ContamWindPressureProfileVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamWindPressureProfileVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamWindPressureProfileVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamWindPressureProfileVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamWindPressureProfileVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamWindPressureProfileVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::WindPressureProfile >::size_type":

        return _openstudioairflow.ContamWindPressureProfileVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::WindPressureProfile >::value_type":

        return _openstudioairflow.ContamWindPressureProfileVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::WindPressureProfile >::difference_type', j: 'std::vector< openstudio::contam::WindPressureProfile >::difference_type') -> "std::vector< openstudio::contam::WindPressureProfile,std::allocator< openstudio::contam::WindPressureProfile > > *":

        return _openstudioairflow.ContamWindPressureProfileVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::WindPressureProfile >::difference_type', j: 'std::vector< openstudio::contam::WindPressureProfile >::difference_type') -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::WindPressureProfile >::value_type const &":

        return _openstudioairflow.ContamWindPressureProfileVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector___setitem__(self, *args)



    def append(self, x: 'WindPressureProfile') -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamWindPressureProfileVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::WindPressureProfile >::size_type":

        return _openstudioairflow.ContamWindPressureProfileVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector_clear(self)



    def swap(self, v: 'ContamWindPressureProfileVector') -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::WindPressureProfile >::allocator_type":

        return _openstudioairflow.ContamWindPressureProfileVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::WindPressureProfile >::iterator":

        return _openstudioairflow.ContamWindPressureProfileVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::WindPressureProfile >::iterator":

        return _openstudioairflow.ContamWindPressureProfileVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::WindPressureProfile >::reverse_iterator":

        return _openstudioairflow.ContamWindPressureProfileVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::WindPressureProfile >::reverse_iterator":

        return _openstudioairflow.ContamWindPressureProfileVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::WindPressureProfile >::iterator":

        return _openstudioairflow.ContamWindPressureProfileVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamWindPressureProfileVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'WindPressureProfile') -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::WindPressureProfile >::value_type const &":

        return _openstudioairflow.ContamWindPressureProfileVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::WindPressureProfile >::value_type const &":

        return _openstudioairflow.ContamWindPressureProfileVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::WindPressureProfile >::size_type', x: 'WindPressureProfile') -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::WindPressureProfile >::size_type') -> "void":

        return _openstudioairflow.ContamWindPressureProfileVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::WindPressureProfile >::size_type":

        return _openstudioairflow.ContamWindPressureProfileVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamWindPressureProfileVector

    __del__ = lambda self: None

ContamWindPressureProfileVector_swigregister = _openstudioairflow.ContamWindPressureProfileVector_swigregister

ContamWindPressureProfileVector_swigregister(ContamWindPressureProfileVector)



class ContamPressureCoefficientPointVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamPressureCoefficientPointVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamPressureCoefficientPointVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamPressureCoefficientPointVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamPressureCoefficientPointVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamPressureCoefficientPointVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::size_type":

        return _openstudioairflow.ContamPressureCoefficientPointVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::value_type":

        return _openstudioairflow.ContamPressureCoefficientPointVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::PressureCoefficientPoint >::difference_type', j: 'std::vector< openstudio::contam::PressureCoefficientPoint >::difference_type') -> "std::vector< openstudio::contam::PressureCoefficientPoint,std::allocator< openstudio::contam::PressureCoefficientPoint > > *":

        return _openstudioairflow.ContamPressureCoefficientPointVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::PressureCoefficientPoint >::difference_type', j: 'std::vector< openstudio::contam::PressureCoefficientPoint >::difference_type') -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::value_type const &":

        return _openstudioairflow.ContamPressureCoefficientPointVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector___setitem__(self, *args)



    def append(self, x: 'PressureCoefficientPoint') -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamPressureCoefficientPointVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::size_type":

        return _openstudioairflow.ContamPressureCoefficientPointVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector_clear(self)



    def swap(self, v: 'ContamPressureCoefficientPointVector') -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::allocator_type":

        return _openstudioairflow.ContamPressureCoefficientPointVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::iterator":

        return _openstudioairflow.ContamPressureCoefficientPointVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::iterator":

        return _openstudioairflow.ContamPressureCoefficientPointVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::reverse_iterator":

        return _openstudioairflow.ContamPressureCoefficientPointVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::reverse_iterator":

        return _openstudioairflow.ContamPressureCoefficientPointVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::iterator":

        return _openstudioairflow.ContamPressureCoefficientPointVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamPressureCoefficientPointVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PressureCoefficientPoint') -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::value_type const &":

        return _openstudioairflow.ContamPressureCoefficientPointVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::value_type const &":

        return _openstudioairflow.ContamPressureCoefficientPointVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::PressureCoefficientPoint >::size_type', x: 'PressureCoefficientPoint') -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::PressureCoefficientPoint >::size_type') -> "void":

        return _openstudioairflow.ContamPressureCoefficientPointVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint >::size_type":

        return _openstudioairflow.ContamPressureCoefficientPointVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamPressureCoefficientPointVector

    __del__ = lambda self: None

ContamPressureCoefficientPointVector_swigregister = _openstudioairflow.ContamPressureCoefficientPointVector_swigregister

ContamPressureCoefficientPointVector_swigregister(ContamPressureCoefficientPointVector)



class ContamPlrTest1Vector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamPlrTest1Vector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamPlrTest1Vector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamPlrTest1Vector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamPlrTest1Vector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamPlrTest1Vector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::PlrTest1 >::size_type":

        return _openstudioairflow.ContamPlrTest1Vector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::PlrTest1 >::value_type":

        return _openstudioairflow.ContamPlrTest1Vector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::PlrTest1 >::difference_type', j: 'std::vector< openstudio::contam::PlrTest1 >::difference_type') -> "std::vector< openstudio::contam::PlrTest1,std::allocator< openstudio::contam::PlrTest1 > > *":

        return _openstudioairflow.ContamPlrTest1Vector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest1Vector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::PlrTest1 >::difference_type', j: 'std::vector< openstudio::contam::PlrTest1 >::difference_type') -> "void":

        return _openstudioairflow.ContamPlrTest1Vector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest1Vector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::PlrTest1 >::value_type const &":

        return _openstudioairflow.ContamPlrTest1Vector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest1Vector___setitem__(self, *args)



    def append(self, x: 'PlrTest1') -> "void":

        return _openstudioairflow.ContamPlrTest1Vector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamPlrTest1Vector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::PlrTest1 >::size_type":

        return _openstudioairflow.ContamPlrTest1Vector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamPlrTest1Vector_clear(self)



    def swap(self, v: 'ContamPlrTest1Vector') -> "void":

        return _openstudioairflow.ContamPlrTest1Vector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::PlrTest1 >::allocator_type":

        return _openstudioairflow.ContamPlrTest1Vector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::PlrTest1 >::iterator":

        return _openstudioairflow.ContamPlrTest1Vector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::PlrTest1 >::iterator":

        return _openstudioairflow.ContamPlrTest1Vector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::PlrTest1 >::reverse_iterator":

        return _openstudioairflow.ContamPlrTest1Vector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::PlrTest1 >::reverse_iterator":

        return _openstudioairflow.ContamPlrTest1Vector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamPlrTest1Vector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::PlrTest1 >::iterator":

        return _openstudioairflow.ContamPlrTest1Vector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamPlrTest1Vector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PlrTest1') -> "void":

        return _openstudioairflow.ContamPlrTest1Vector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::PlrTest1 >::value_type const &":

        return _openstudioairflow.ContamPlrTest1Vector_front(self)



    def back(self) -> "std::vector< openstudio::contam::PlrTest1 >::value_type const &":

        return _openstudioairflow.ContamPlrTest1Vector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::PlrTest1 >::size_type', x: 'PlrTest1') -> "void":

        return _openstudioairflow.ContamPlrTest1Vector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest1Vector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest1Vector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::PlrTest1 >::size_type') -> "void":

        return _openstudioairflow.ContamPlrTest1Vector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::PlrTest1 >::size_type":

        return _openstudioairflow.ContamPlrTest1Vector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamPlrTest1Vector

    __del__ = lambda self: None

ContamPlrTest1Vector_swigregister = _openstudioairflow.ContamPlrTest1Vector_swigregister

ContamPlrTest1Vector_swigregister(ContamPlrTest1Vector)



class ContamPlrTest2Vector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamPlrTest2Vector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamPlrTest2Vector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamPlrTest2Vector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamPlrTest2Vector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamPlrTest2Vector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::PlrTest2 >::size_type":

        return _openstudioairflow.ContamPlrTest2Vector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::PlrTest2 >::value_type":

        return _openstudioairflow.ContamPlrTest2Vector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::PlrTest2 >::difference_type', j: 'std::vector< openstudio::contam::PlrTest2 >::difference_type') -> "std::vector< openstudio::contam::PlrTest2,std::allocator< openstudio::contam::PlrTest2 > > *":

        return _openstudioairflow.ContamPlrTest2Vector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest2Vector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::PlrTest2 >::difference_type', j: 'std::vector< openstudio::contam::PlrTest2 >::difference_type') -> "void":

        return _openstudioairflow.ContamPlrTest2Vector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest2Vector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::PlrTest2 >::value_type const &":

        return _openstudioairflow.ContamPlrTest2Vector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest2Vector___setitem__(self, *args)



    def append(self, x: 'PlrTest2') -> "void":

        return _openstudioairflow.ContamPlrTest2Vector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamPlrTest2Vector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::PlrTest2 >::size_type":

        return _openstudioairflow.ContamPlrTest2Vector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamPlrTest2Vector_clear(self)



    def swap(self, v: 'ContamPlrTest2Vector') -> "void":

        return _openstudioairflow.ContamPlrTest2Vector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::PlrTest2 >::allocator_type":

        return _openstudioairflow.ContamPlrTest2Vector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::PlrTest2 >::iterator":

        return _openstudioairflow.ContamPlrTest2Vector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::PlrTest2 >::iterator":

        return _openstudioairflow.ContamPlrTest2Vector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::PlrTest2 >::reverse_iterator":

        return _openstudioairflow.ContamPlrTest2Vector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::PlrTest2 >::reverse_iterator":

        return _openstudioairflow.ContamPlrTest2Vector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamPlrTest2Vector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::PlrTest2 >::iterator":

        return _openstudioairflow.ContamPlrTest2Vector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamPlrTest2Vector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'PlrTest2') -> "void":

        return _openstudioairflow.ContamPlrTest2Vector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::PlrTest2 >::value_type const &":

        return _openstudioairflow.ContamPlrTest2Vector_front(self)



    def back(self) -> "std::vector< openstudio::contam::PlrTest2 >::value_type const &":

        return _openstudioairflow.ContamPlrTest2Vector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::PlrTest2 >::size_type', x: 'PlrTest2') -> "void":

        return _openstudioairflow.ContamPlrTest2Vector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest2Vector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamPlrTest2Vector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::PlrTest2 >::size_type') -> "void":

        return _openstudioairflow.ContamPlrTest2Vector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::PlrTest2 >::size_type":

        return _openstudioairflow.ContamPlrTest2Vector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamPlrTest2Vector

    __del__ = lambda self: None

ContamPlrTest2Vector_swigregister = _openstudioairflow.ContamPlrTest2Vector_swigregister

ContamPlrTest2Vector_swigregister(ContamPlrTest2Vector)



class ContamCvfDatVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamCvfDatVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamCvfDatVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamCvfDatVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamCvfDatVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamCvfDatVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::CvfDat >::size_type":

        return _openstudioairflow.ContamCvfDatVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::CvfDat >::value_type":

        return _openstudioairflow.ContamCvfDatVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::CvfDat >::difference_type', j: 'std::vector< openstudio::contam::CvfDat >::difference_type') -> "std::vector< openstudio::contam::CvfDat,std::allocator< openstudio::contam::CvfDat > > *":

        return _openstudioairflow.ContamCvfDatVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamCvfDatVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::CvfDat >::difference_type', j: 'std::vector< openstudio::contam::CvfDat >::difference_type') -> "void":

        return _openstudioairflow.ContamCvfDatVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamCvfDatVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::CvfDat >::value_type const &":

        return _openstudioairflow.ContamCvfDatVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamCvfDatVector___setitem__(self, *args)



    def append(self, x: 'CvfDat') -> "void":

        return _openstudioairflow.ContamCvfDatVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamCvfDatVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::CvfDat >::size_type":

        return _openstudioairflow.ContamCvfDatVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamCvfDatVector_clear(self)



    def swap(self, v: 'ContamCvfDatVector') -> "void":

        return _openstudioairflow.ContamCvfDatVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::CvfDat >::allocator_type":

        return _openstudioairflow.ContamCvfDatVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::CvfDat >::iterator":

        return _openstudioairflow.ContamCvfDatVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::CvfDat >::iterator":

        return _openstudioairflow.ContamCvfDatVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::CvfDat >::reverse_iterator":

        return _openstudioairflow.ContamCvfDatVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::CvfDat >::reverse_iterator":

        return _openstudioairflow.ContamCvfDatVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamCvfDatVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::CvfDat >::iterator":

        return _openstudioairflow.ContamCvfDatVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamCvfDatVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'CvfDat') -> "void":

        return _openstudioairflow.ContamCvfDatVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::CvfDat >::value_type const &":

        return _openstudioairflow.ContamCvfDatVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::CvfDat >::value_type const &":

        return _openstudioairflow.ContamCvfDatVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::CvfDat >::size_type', x: 'CvfDat') -> "void":

        return _openstudioairflow.ContamCvfDatVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamCvfDatVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamCvfDatVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::CvfDat >::size_type') -> "void":

        return _openstudioairflow.ContamCvfDatVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::CvfDat >::size_type":

        return _openstudioairflow.ContamCvfDatVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamCvfDatVector

    __del__ = lambda self: None

ContamCvfDatVector_swigregister = _openstudioairflow.ContamCvfDatVector_swigregister

ContamCvfDatVector_swigregister(ContamCvfDatVector)



class ContamSimpleAhsVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamSimpleAhsVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamSimpleAhsVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamSimpleAhsVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamSimpleAhsVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamSimpleAhsVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::Ahs >::size_type":

        return _openstudioairflow.ContamSimpleAhsVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::Ahs >::value_type":

        return _openstudioairflow.ContamSimpleAhsVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::Ahs >::difference_type', j: 'std::vector< openstudio::contam::Ahs >::difference_type') -> "std::vector< openstudio::contam::Ahs,std::allocator< openstudio::contam::Ahs > > *":

        return _openstudioairflow.ContamSimpleAhsVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamSimpleAhsVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::Ahs >::difference_type', j: 'std::vector< openstudio::contam::Ahs >::difference_type') -> "void":

        return _openstudioairflow.ContamSimpleAhsVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamSimpleAhsVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::Ahs >::value_type const &":

        return _openstudioairflow.ContamSimpleAhsVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamSimpleAhsVector___setitem__(self, *args)



    def append(self, x: 'Ahs') -> "void":

        return _openstudioairflow.ContamSimpleAhsVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamSimpleAhsVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::Ahs >::size_type":

        return _openstudioairflow.ContamSimpleAhsVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamSimpleAhsVector_clear(self)



    def swap(self, v: 'ContamSimpleAhsVector') -> "void":

        return _openstudioairflow.ContamSimpleAhsVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::Ahs >::allocator_type":

        return _openstudioairflow.ContamSimpleAhsVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::Ahs >::iterator":

        return _openstudioairflow.ContamSimpleAhsVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::Ahs >::iterator":

        return _openstudioairflow.ContamSimpleAhsVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::Ahs >::reverse_iterator":

        return _openstudioairflow.ContamSimpleAhsVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::Ahs >::reverse_iterator":

        return _openstudioairflow.ContamSimpleAhsVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamSimpleAhsVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::Ahs >::iterator":

        return _openstudioairflow.ContamSimpleAhsVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamSimpleAhsVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Ahs') -> "void":

        return _openstudioairflow.ContamSimpleAhsVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::Ahs >::value_type const &":

        return _openstudioairflow.ContamSimpleAhsVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::Ahs >::value_type const &":

        return _openstudioairflow.ContamSimpleAhsVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::Ahs >::size_type', x: 'Ahs') -> "void":

        return _openstudioairflow.ContamSimpleAhsVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamSimpleAhsVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamSimpleAhsVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::Ahs >::size_type') -> "void":

        return _openstudioairflow.ContamSimpleAhsVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::Ahs >::size_type":

        return _openstudioairflow.ContamSimpleAhsVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamSimpleAhsVector

    __del__ = lambda self: None

ContamSimpleAhsVector_swigregister = _openstudioairflow.ContamSimpleAhsVector_swigregister

ContamSimpleAhsVector_swigregister(ContamSimpleAhsVector)



class ContamZoneVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamZoneVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamZoneVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamZoneVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamZoneVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamZoneVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::Zone >::size_type":

        return _openstudioairflow.ContamZoneVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::Zone >::value_type":

        return _openstudioairflow.ContamZoneVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::Zone >::difference_type', j: 'std::vector< openstudio::contam::Zone >::difference_type') -> "std::vector< openstudio::contam::Zone,std::allocator< openstudio::contam::Zone > > *":

        return _openstudioairflow.ContamZoneVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamZoneVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::Zone >::difference_type', j: 'std::vector< openstudio::contam::Zone >::difference_type') -> "void":

        return _openstudioairflow.ContamZoneVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamZoneVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::Zone >::value_type const &":

        return _openstudioairflow.ContamZoneVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamZoneVector___setitem__(self, *args)



    def append(self, x: 'Zone') -> "void":

        return _openstudioairflow.ContamZoneVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamZoneVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::Zone >::size_type":

        return _openstudioairflow.ContamZoneVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamZoneVector_clear(self)



    def swap(self, v: 'ContamZoneVector') -> "void":

        return _openstudioairflow.ContamZoneVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::Zone >::allocator_type":

        return _openstudioairflow.ContamZoneVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::Zone >::iterator":

        return _openstudioairflow.ContamZoneVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::Zone >::iterator":

        return _openstudioairflow.ContamZoneVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::Zone >::reverse_iterator":

        return _openstudioairflow.ContamZoneVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::Zone >::reverse_iterator":

        return _openstudioairflow.ContamZoneVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamZoneVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::Zone >::iterator":

        return _openstudioairflow.ContamZoneVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamZoneVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Zone') -> "void":

        return _openstudioairflow.ContamZoneVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::Zone >::value_type const &":

        return _openstudioairflow.ContamZoneVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::Zone >::value_type const &":

        return _openstudioairflow.ContamZoneVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::Zone >::size_type', x: 'Zone') -> "void":

        return _openstudioairflow.ContamZoneVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamZoneVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamZoneVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::Zone >::size_type') -> "void":

        return _openstudioairflow.ContamZoneVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::Zone >::size_type":

        return _openstudioairflow.ContamZoneVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamZoneVector

    __del__ = lambda self: None

ContamZoneVector_swigregister = _openstudioairflow.ContamZoneVector_swigregister

ContamZoneVector_swigregister(ContamZoneVector)



class ContamAirflowPathVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamAirflowPathVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamAirflowPathVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamAirflowPathVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamAirflowPathVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamAirflowPathVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::AirflowPath >::size_type":

        return _openstudioairflow.ContamAirflowPathVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::AirflowPath >::value_type":

        return _openstudioairflow.ContamAirflowPathVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::AirflowPath >::difference_type', j: 'std::vector< openstudio::contam::AirflowPath >::difference_type') -> "std::vector< openstudio::contam::AirflowPath,std::allocator< openstudio::contam::AirflowPath > > *":

        return _openstudioairflow.ContamAirflowPathVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowPathVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::AirflowPath >::difference_type', j: 'std::vector< openstudio::contam::AirflowPath >::difference_type') -> "void":

        return _openstudioairflow.ContamAirflowPathVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowPathVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::AirflowPath >::value_type const &":

        return _openstudioairflow.ContamAirflowPathVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowPathVector___setitem__(self, *args)



    def append(self, x: 'AirflowPath') -> "void":

        return _openstudioairflow.ContamAirflowPathVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamAirflowPathVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::AirflowPath >::size_type":

        return _openstudioairflow.ContamAirflowPathVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamAirflowPathVector_clear(self)



    def swap(self, v: 'ContamAirflowPathVector') -> "void":

        return _openstudioairflow.ContamAirflowPathVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::AirflowPath >::allocator_type":

        return _openstudioairflow.ContamAirflowPathVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::AirflowPath >::iterator":

        return _openstudioairflow.ContamAirflowPathVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::AirflowPath >::iterator":

        return _openstudioairflow.ContamAirflowPathVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::AirflowPath >::reverse_iterator":

        return _openstudioairflow.ContamAirflowPathVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::AirflowPath >::reverse_iterator":

        return _openstudioairflow.ContamAirflowPathVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamAirflowPathVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::AirflowPath >::iterator":

        return _openstudioairflow.ContamAirflowPathVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamAirflowPathVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirflowPath') -> "void":

        return _openstudioairflow.ContamAirflowPathVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::AirflowPath >::value_type const &":

        return _openstudioairflow.ContamAirflowPathVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::AirflowPath >::value_type const &":

        return _openstudioairflow.ContamAirflowPathVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::AirflowPath >::size_type', x: 'AirflowPath') -> "void":

        return _openstudioairflow.ContamAirflowPathVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowPathVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowPathVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::AirflowPath >::size_type') -> "void":

        return _openstudioairflow.ContamAirflowPathVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::AirflowPath >::size_type":

        return _openstudioairflow.ContamAirflowPathVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamAirflowPathVector

    __del__ = lambda self: None

ContamAirflowPathVector_swigregister = _openstudioairflow.ContamAirflowPathVector_swigregister

ContamAirflowPathVector_swigregister(ContamAirflowPathVector)



class ContamSketchPadIconVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamSketchPadIconVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamSketchPadIconVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamSketchPadIconVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamSketchPadIconVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamSketchPadIconVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::Icon >::size_type":

        return _openstudioairflow.ContamSketchPadIconVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::Icon >::value_type":

        return _openstudioairflow.ContamSketchPadIconVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::Icon >::difference_type', j: 'std::vector< openstudio::contam::Icon >::difference_type') -> "std::vector< openstudio::contam::Icon,std::allocator< openstudio::contam::Icon > > *":

        return _openstudioairflow.ContamSketchPadIconVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamSketchPadIconVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::Icon >::difference_type', j: 'std::vector< openstudio::contam::Icon >::difference_type') -> "void":

        return _openstudioairflow.ContamSketchPadIconVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamSketchPadIconVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::Icon >::value_type const &":

        return _openstudioairflow.ContamSketchPadIconVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamSketchPadIconVector___setitem__(self, *args)



    def append(self, x: 'Icon') -> "void":

        return _openstudioairflow.ContamSketchPadIconVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamSketchPadIconVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::Icon >::size_type":

        return _openstudioairflow.ContamSketchPadIconVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamSketchPadIconVector_clear(self)



    def swap(self, v: 'ContamSketchPadIconVector') -> "void":

        return _openstudioairflow.ContamSketchPadIconVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::Icon >::allocator_type":

        return _openstudioairflow.ContamSketchPadIconVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::Icon >::iterator":

        return _openstudioairflow.ContamSketchPadIconVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::Icon >::iterator":

        return _openstudioairflow.ContamSketchPadIconVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::Icon >::reverse_iterator":

        return _openstudioairflow.ContamSketchPadIconVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::Icon >::reverse_iterator":

        return _openstudioairflow.ContamSketchPadIconVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamSketchPadIconVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::Icon >::iterator":

        return _openstudioairflow.ContamSketchPadIconVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamSketchPadIconVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'Icon') -> "void":

        return _openstudioairflow.ContamSketchPadIconVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::Icon >::value_type const &":

        return _openstudioairflow.ContamSketchPadIconVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::Icon >::value_type const &":

        return _openstudioairflow.ContamSketchPadIconVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::Icon >::size_type', x: 'Icon') -> "void":

        return _openstudioairflow.ContamSketchPadIconVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamSketchPadIconVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamSketchPadIconVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::Icon >::size_type') -> "void":

        return _openstudioairflow.ContamSketchPadIconVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::Icon >::size_type":

        return _openstudioairflow.ContamSketchPadIconVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamSketchPadIconVector

    __del__ = lambda self: None

ContamSketchPadIconVector_swigregister = _openstudioairflow.ContamSketchPadIconVector_swigregister

ContamSketchPadIconVector_swigregister(ContamSketchPadIconVector)



class ContamSchedulePointVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamSchedulePointVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamSchedulePointVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamSchedulePointVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamSchedulePointVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamSchedulePointVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::SchedulePoint >::size_type":

        return _openstudioairflow.ContamSchedulePointVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::SchedulePoint >::value_type":

        return _openstudioairflow.ContamSchedulePointVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::SchedulePoint >::difference_type', j: 'std::vector< openstudio::contam::SchedulePoint >::difference_type') -> "std::vector< openstudio::contam::SchedulePoint,std::allocator< openstudio::contam::SchedulePoint > > *":

        return _openstudioairflow.ContamSchedulePointVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamSchedulePointVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::SchedulePoint >::difference_type', j: 'std::vector< openstudio::contam::SchedulePoint >::difference_type') -> "void":

        return _openstudioairflow.ContamSchedulePointVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamSchedulePointVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::SchedulePoint >::value_type const &":

        return _openstudioairflow.ContamSchedulePointVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamSchedulePointVector___setitem__(self, *args)



    def append(self, x: 'SchedulePoint') -> "void":

        return _openstudioairflow.ContamSchedulePointVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamSchedulePointVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::SchedulePoint >::size_type":

        return _openstudioairflow.ContamSchedulePointVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamSchedulePointVector_clear(self)



    def swap(self, v: 'ContamSchedulePointVector') -> "void":

        return _openstudioairflow.ContamSchedulePointVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::SchedulePoint >::allocator_type":

        return _openstudioairflow.ContamSchedulePointVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::SchedulePoint >::iterator":

        return _openstudioairflow.ContamSchedulePointVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::SchedulePoint >::iterator":

        return _openstudioairflow.ContamSchedulePointVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::SchedulePoint >::reverse_iterator":

        return _openstudioairflow.ContamSchedulePointVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::SchedulePoint >::reverse_iterator":

        return _openstudioairflow.ContamSchedulePointVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamSchedulePointVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::SchedulePoint >::iterator":

        return _openstudioairflow.ContamSchedulePointVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamSchedulePointVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'SchedulePoint') -> "void":

        return _openstudioairflow.ContamSchedulePointVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::SchedulePoint >::value_type const &":

        return _openstudioairflow.ContamSchedulePointVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::SchedulePoint >::value_type const &":

        return _openstudioairflow.ContamSchedulePointVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::SchedulePoint >::size_type', x: 'SchedulePoint') -> "void":

        return _openstudioairflow.ContamSchedulePointVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamSchedulePointVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamSchedulePointVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::SchedulePoint >::size_type') -> "void":

        return _openstudioairflow.ContamSchedulePointVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::SchedulePoint >::size_type":

        return _openstudioairflow.ContamSchedulePointVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamSchedulePointVector

    __del__ = lambda self: None

ContamSchedulePointVector_swigregister = _openstudioairflow.ContamSchedulePointVector_swigregister

ContamSchedulePointVector_swigregister(ContamSchedulePointVector)



class ContamFanDataPointVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamFanDataPointVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamFanDataPointVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamFanDataPointVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamFanDataPointVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamFanDataPointVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::FanDataPoint >::size_type":

        return _openstudioairflow.ContamFanDataPointVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::FanDataPoint >::value_type":

        return _openstudioairflow.ContamFanDataPointVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::FanDataPoint >::difference_type', j: 'std::vector< openstudio::contam::FanDataPoint >::difference_type') -> "std::vector< openstudio::contam::FanDataPoint,std::allocator< openstudio::contam::FanDataPoint > > *":

        return _openstudioairflow.ContamFanDataPointVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamFanDataPointVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::FanDataPoint >::difference_type', j: 'std::vector< openstudio::contam::FanDataPoint >::difference_type') -> "void":

        return _openstudioairflow.ContamFanDataPointVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamFanDataPointVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::FanDataPoint >::value_type const &":

        return _openstudioairflow.ContamFanDataPointVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamFanDataPointVector___setitem__(self, *args)



    def append(self, x: 'FanDataPoint') -> "void":

        return _openstudioairflow.ContamFanDataPointVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamFanDataPointVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::FanDataPoint >::size_type":

        return _openstudioairflow.ContamFanDataPointVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamFanDataPointVector_clear(self)



    def swap(self, v: 'ContamFanDataPointVector') -> "void":

        return _openstudioairflow.ContamFanDataPointVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::FanDataPoint >::allocator_type":

        return _openstudioairflow.ContamFanDataPointVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::FanDataPoint >::iterator":

        return _openstudioairflow.ContamFanDataPointVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::FanDataPoint >::iterator":

        return _openstudioairflow.ContamFanDataPointVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::FanDataPoint >::reverse_iterator":

        return _openstudioairflow.ContamFanDataPointVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::FanDataPoint >::reverse_iterator":

        return _openstudioairflow.ContamFanDataPointVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamFanDataPointVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::FanDataPoint >::iterator":

        return _openstudioairflow.ContamFanDataPointVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamFanDataPointVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'FanDataPoint') -> "void":

        return _openstudioairflow.ContamFanDataPointVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::FanDataPoint >::value_type const &":

        return _openstudioairflow.ContamFanDataPointVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::FanDataPoint >::value_type const &":

        return _openstudioairflow.ContamFanDataPointVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::FanDataPoint >::size_type', x: 'FanDataPoint') -> "void":

        return _openstudioairflow.ContamFanDataPointVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamFanDataPointVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamFanDataPointVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::FanDataPoint >::size_type') -> "void":

        return _openstudioairflow.ContamFanDataPointVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::FanDataPoint >::size_type":

        return _openstudioairflow.ContamFanDataPointVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamFanDataPointVector

    __del__ = lambda self: None

ContamFanDataPointVector_swigregister = _openstudioairflow.ContamFanDataPointVector_swigregister

ContamFanDataPointVector_swigregister(ContamFanDataPointVector)



class ContamXyDataPointVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamXyDataPointVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamXyDataPointVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamXyDataPointVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamXyDataPointVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamXyDataPointVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::XyDataPoint >::size_type":

        return _openstudioairflow.ContamXyDataPointVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::XyDataPoint >::value_type":

        return _openstudioairflow.ContamXyDataPointVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::XyDataPoint >::difference_type', j: 'std::vector< openstudio::contam::XyDataPoint >::difference_type') -> "std::vector< openstudio::contam::XyDataPoint,std::allocator< openstudio::contam::XyDataPoint > > *":

        return _openstudioairflow.ContamXyDataPointVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamXyDataPointVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::XyDataPoint >::difference_type', j: 'std::vector< openstudio::contam::XyDataPoint >::difference_type') -> "void":

        return _openstudioairflow.ContamXyDataPointVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamXyDataPointVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::XyDataPoint >::value_type const &":

        return _openstudioairflow.ContamXyDataPointVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamXyDataPointVector___setitem__(self, *args)



    def append(self, x: 'XyDataPoint') -> "void":

        return _openstudioairflow.ContamXyDataPointVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamXyDataPointVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::XyDataPoint >::size_type":

        return _openstudioairflow.ContamXyDataPointVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamXyDataPointVector_clear(self)



    def swap(self, v: 'ContamXyDataPointVector') -> "void":

        return _openstudioairflow.ContamXyDataPointVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::XyDataPoint >::allocator_type":

        return _openstudioairflow.ContamXyDataPointVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::XyDataPoint >::iterator":

        return _openstudioairflow.ContamXyDataPointVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::XyDataPoint >::iterator":

        return _openstudioairflow.ContamXyDataPointVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::XyDataPoint >::reverse_iterator":

        return _openstudioairflow.ContamXyDataPointVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::XyDataPoint >::reverse_iterator":

        return _openstudioairflow.ContamXyDataPointVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamXyDataPointVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::XyDataPoint >::iterator":

        return _openstudioairflow.ContamXyDataPointVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamXyDataPointVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'XyDataPoint') -> "void":

        return _openstudioairflow.ContamXyDataPointVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::XyDataPoint >::value_type const &":

        return _openstudioairflow.ContamXyDataPointVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::XyDataPoint >::value_type const &":

        return _openstudioairflow.ContamXyDataPointVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::XyDataPoint >::size_type', x: 'XyDataPoint') -> "void":

        return _openstudioairflow.ContamXyDataPointVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamXyDataPointVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamXyDataPointVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::XyDataPoint >::size_type') -> "void":

        return _openstudioairflow.ContamXyDataPointVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::XyDataPoint >::size_type":

        return _openstudioairflow.ContamXyDataPointVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamXyDataPointVector

    __del__ = lambda self: None

ContamXyDataPointVector_swigregister = _openstudioairflow.ContamXyDataPointVector_swigregister

ContamXyDataPointVector_swigregister(ContamXyDataPointVector)



class ContamAirflowSubelementDataVector(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamAirflowSubelementDataVector, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamAirflowSubelementDataVector, name)

    __repr__ = _swig_repr



    def iterator(self) -> "swig::SwigPyIterator *":

        return _openstudioairflow.ContamAirflowSubelementDataVector_iterator(self)

    def __iter__(self):

        return self.iterator()



    def __nonzero__(self) -> "bool":

        return _openstudioairflow.ContamAirflowSubelementDataVector___nonzero__(self)



    def __bool__(self) -> "bool":

        return _openstudioairflow.ContamAirflowSubelementDataVector___bool__(self)



    def __len__(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::size_type":

        return _openstudioairflow.ContamAirflowSubelementDataVector___len__(self)



    def pop(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::value_type":

        return _openstudioairflow.ContamAirflowSubelementDataVector_pop(self)



    def __getslice__(self, i: 'std::vector< openstudio::contam::AirflowSubelementData >::difference_type', j: 'std::vector< openstudio::contam::AirflowSubelementData >::difference_type') -> "std::vector< openstudio::contam::AirflowSubelementData,std::allocator< openstudio::contam::AirflowSubelementData > > *":

        return _openstudioairflow.ContamAirflowSubelementDataVector___getslice__(self, i, j)



    def __setslice__(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector___setslice__(self, *args)



    def __delslice__(self, i: 'std::vector< openstudio::contam::AirflowSubelementData >::difference_type', j: 'std::vector< openstudio::contam::AirflowSubelementData >::difference_type') -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector___delslice__(self, i, j)



    def __delitem__(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector___delitem__(self, *args)



    def __getitem__(self, *args) -> "std::vector< openstudio::contam::AirflowSubelementData >::value_type const &":

        return _openstudioairflow.ContamAirflowSubelementDataVector___getitem__(self, *args)



    def __setitem__(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector___setitem__(self, *args)



    def append(self, x: 'AirflowSubelementData') -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector_append(self, x)



    def empty(self) -> "bool":

        return _openstudioairflow.ContamAirflowSubelementDataVector_empty(self)



    def size(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::size_type":

        return _openstudioairflow.ContamAirflowSubelementDataVector_size(self)



    def clear(self) -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector_clear(self)



    def swap(self, v: 'ContamAirflowSubelementDataVector') -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector_swap(self, v)



    def get_allocator(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::allocator_type":

        return _openstudioairflow.ContamAirflowSubelementDataVector_get_allocator(self)



    def begin(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::iterator":

        return _openstudioairflow.ContamAirflowSubelementDataVector_begin(self)



    def end(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::iterator":

        return _openstudioairflow.ContamAirflowSubelementDataVector_end(self)



    def rbegin(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::reverse_iterator":

        return _openstudioairflow.ContamAirflowSubelementDataVector_rbegin(self)



    def rend(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::reverse_iterator":

        return _openstudioairflow.ContamAirflowSubelementDataVector_rend(self)



    def pop_back(self) -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector_pop_back(self)



    def erase(self, *args) -> "std::vector< openstudio::contam::AirflowSubelementData >::iterator":

        return _openstudioairflow.ContamAirflowSubelementDataVector_erase(self, *args)



    def __init__(self, *args):

        this = _openstudioairflow.new_ContamAirflowSubelementDataVector(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def push_back(self, x: 'AirflowSubelementData') -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector_push_back(self, x)



    def front(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::value_type const &":

        return _openstudioairflow.ContamAirflowSubelementDataVector_front(self)



    def back(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::value_type const &":

        return _openstudioairflow.ContamAirflowSubelementDataVector_back(self)



    def assign(self, n: 'std::vector< openstudio::contam::AirflowSubelementData >::size_type', x: 'AirflowSubelementData') -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector_assign(self, n, x)



    def resize(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector_resize(self, *args)



    def insert(self, *args) -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector_insert(self, *args)



    def reserve(self, n: 'std::vector< openstudio::contam::AirflowSubelementData >::size_type') -> "void":

        return _openstudioairflow.ContamAirflowSubelementDataVector_reserve(self, n)



    def capacity(self) -> "std::vector< openstudio::contam::AirflowSubelementData >::size_type":

        return _openstudioairflow.ContamAirflowSubelementDataVector_capacity(self)

    __swig_destroy__ = _openstudioairflow.delete_ContamAirflowSubelementDataVector

    __del__ = lambda self: None

ContamAirflowSubelementDataVector_swigregister = _openstudioairflow.ContamAirflowSubelementDataVector_swigregister

ContamAirflowSubelementDataVector_swigregister(ContamAirflowSubelementDataVector)



class WeatherData(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WeatherData, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WeatherData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_WeatherData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_WeatherData

    __del__ = lambda self: None



    def __eq__(self, other: 'WeatherData') -> "bool":

        return _openstudioairflow.WeatherData___eq__(self, other)



    def __ne__(self, other: 'WeatherData') -> "bool":

        return _openstudioairflow.WeatherData___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.WeatherData_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.WeatherData_write(self)



    def Tambt(self) -> "double":

        return _openstudioairflow.WeatherData_Tambt(self)



    def setTambt(self, *args) -> "bool":

        return _openstudioairflow.WeatherData_setTambt(self, *args)



    def barpres(self) -> "double":

        return _openstudioairflow.WeatherData_barpres(self)



    def setBarpres(self, *args) -> "bool":

        return _openstudioairflow.WeatherData_setBarpres(self, *args)



    def windspd(self) -> "double":

        return _openstudioairflow.WeatherData_windspd(self)



    def setWindspd(self, *args) -> "bool":

        return _openstudioairflow.WeatherData_setWindspd(self, *args)



    def winddir(self) -> "double":

        return _openstudioairflow.WeatherData_winddir(self)



    def setWinddir(self, *args) -> "bool":

        return _openstudioairflow.WeatherData_setWinddir(self, *args)



    def relhum(self) -> "double":

        return _openstudioairflow.WeatherData_relhum(self)



    def setRelhum(self, *args) -> "bool":

        return _openstudioairflow.WeatherData_setRelhum(self, *args)



    def daytyp(self) -> "int":

        return _openstudioairflow.WeatherData_daytyp(self)



    def setDaytyp(self, daytyp: 'int const') -> "void":

        return _openstudioairflow.WeatherData_setDaytyp(self, daytyp)



    def uTa(self) -> "int":

        return _openstudioairflow.WeatherData_uTa(self)



    def setUTa(self, uTa: 'int const') -> "void":

        return _openstudioairflow.WeatherData_setUTa(self, uTa)



    def ubP(self) -> "int":

        return _openstudioairflow.WeatherData_ubP(self)



    def setUbP(self, ubP: 'int const') -> "void":

        return _openstudioairflow.WeatherData_setUbP(self, ubP)



    def uws(self) -> "int":

        return _openstudioairflow.WeatherData_uws(self)



    def setUws(self, uws: 'int const') -> "void":

        return _openstudioairflow.WeatherData_setUws(self, uws)



    def uwd(self) -> "int":

        return _openstudioairflow.WeatherData_uwd(self)



    def setUwd(self, uwd: 'int const') -> "void":

        return _openstudioairflow.WeatherData_setUwd(self, uwd)

WeatherData_swigregister = _openstudioairflow.WeatherData_swigregister

WeatherData_swigregister(WeatherData)



class Icon(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Icon, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Icon, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_Icon(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_Icon

    __del__ = lambda self: None



    def __eq__(self, other: 'Icon') -> "bool":

        return _openstudioairflow.Icon___eq__(self, other)



    def __ne__(self, other: 'Icon') -> "bool":

        return _openstudioairflow.Icon___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.Icon_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.Icon_write(self)



    def icon(self) -> "int":

        return _openstudioairflow.Icon_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.Icon_setIcon(self, icon)



    def col(self) -> "int":

        return _openstudioairflow.Icon_col(self)



    def setCol(self, col: 'int const') -> "void":

        return _openstudioairflow.Icon_setCol(self, col)



    def row(self) -> "int":

        return _openstudioairflow.Icon_row(self)



    def setRow(self, row: 'int const') -> "void":

        return _openstudioairflow.Icon_setRow(self, row)



    def nr(self) -> "int":

        return _openstudioairflow.Icon_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.Icon_setNr(self, nr)



    def isWall(self) -> "bool":

        return _openstudioairflow.Icon_isWall(self)

Icon_swigregister = _openstudioairflow.Icon_swigregister

Icon_swigregister(Icon)



class FanDataPoint(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, FanDataPoint, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, FanDataPoint, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_FanDataPoint(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def read(self, reader: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.FanDataPoint_read(self, reader)



    def write(self) -> "std::string":

        return _openstudioairflow.FanDataPoint_write(self)



    def mF(self) -> "double":

        return _openstudioairflow.FanDataPoint_mF(self)



    def setMF(self, *args) -> "bool":

        return _openstudioairflow.FanDataPoint_setMF(self, *args)



    def u_mF(self) -> "int":

        return _openstudioairflow.FanDataPoint_u_mF(self)



    def setU_mF(self, u_mF: 'int const') -> "void":

        return _openstudioairflow.FanDataPoint_setU_mF(self, u_mF)



    def dP(self) -> "double":

        return _openstudioairflow.FanDataPoint_dP(self)



    def setDP(self, *args) -> "bool":

        return _openstudioairflow.FanDataPoint_setDP(self, *args)



    def u_dP(self) -> "int":

        return _openstudioairflow.FanDataPoint_u_dP(self)



    def setU_dP(self, u_dP: 'int const') -> "void":

        return _openstudioairflow.FanDataPoint_setU_dP(self, u_dP)



    def rP(self) -> "double":

        return _openstudioairflow.FanDataPoint_rP(self)



    def setRP(self, *args) -> "bool":

        return _openstudioairflow.FanDataPoint_setRP(self, *args)



    def u_rP(self) -> "int":

        return _openstudioairflow.FanDataPoint_u_rP(self)



    def setU_rP(self, u_rP: 'int const') -> "void":

        return _openstudioairflow.FanDataPoint_setU_rP(self, u_rP)

    __swig_destroy__ = _openstudioairflow.delete_FanDataPoint

    __del__ = lambda self: None

FanDataPoint_swigregister = _openstudioairflow.FanDataPoint_swigregister

FanDataPoint_swigregister(FanDataPoint)



class XyDataPoint(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, XyDataPoint, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, XyDataPoint, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_XyDataPoint(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def read(self, reader: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.XyDataPoint_read(self, reader)



    def write(self) -> "std::string":

        return _openstudioairflow.XyDataPoint_write(self)



    def x(self) -> "double":

        return _openstudioairflow.XyDataPoint_x(self)



    def setX(self, *args) -> "bool":

        return _openstudioairflow.XyDataPoint_setX(self, *args)



    def y(self) -> "double":

        return _openstudioairflow.XyDataPoint_y(self)



    def setY(self, *args) -> "bool":

        return _openstudioairflow.XyDataPoint_setY(self, *args)

    __swig_destroy__ = _openstudioairflow.delete_XyDataPoint

    __del__ = lambda self: None

XyDataPoint_swigregister = _openstudioairflow.XyDataPoint_swigregister

XyDataPoint_swigregister(XyDataPoint)



class AirflowSubelementData(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirflowSubelementData, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirflowSubelementData, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AirflowSubelementData(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def read(self, reader: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AirflowSubelementData_read(self, reader)



    def write(self) -> "std::string":

        return _openstudioairflow.AirflowSubelementData_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.AirflowSubelementData_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.AirflowSubelementData_setNr(self, nr)



    def relHt(self) -> "double":

        return _openstudioairflow.AirflowSubelementData_relHt(self)



    def setRelHt(self, *args) -> "bool":

        return _openstudioairflow.AirflowSubelementData_setRelHt(self, *args)



    def filt(self) -> "int":

        return _openstudioairflow.AirflowSubelementData_filt(self)



    def setFilt(self, filt: 'int const') -> "void":

        return _openstudioairflow.AirflowSubelementData_setFilt(self, filt)

    __swig_destroy__ = _openstudioairflow.delete_AirflowSubelementData

    __del__ = lambda self: None

AirflowSubelementData_swigregister = _openstudioairflow.AirflowSubelementData_swigregister

AirflowSubelementData_swigregister(AirflowSubelementData)



class PressureCoefficientPoint(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, PressureCoefficientPoint, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, PressureCoefficientPoint, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PressureCoefficientPoint(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def read(self, reader: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PressureCoefficientPoint_read(self, reader)



    def write(self) -> "std::string":

        return _openstudioairflow.PressureCoefficientPoint_write(self)



    def azm(self) -> "double":

        return _openstudioairflow.PressureCoefficientPoint_azm(self)



    def setAzm(self, *args) -> "bool":

        return _openstudioairflow.PressureCoefficientPoint_setAzm(self, *args)



    def coef(self) -> "double":

        return _openstudioairflow.PressureCoefficientPoint_coef(self)



    def setCoef(self, *args) -> "bool":

        return _openstudioairflow.PressureCoefficientPoint_setCoef(self, *args)

    __swig_destroy__ = _openstudioairflow.delete_PressureCoefficientPoint

    __del__ = lambda self: None

PressureCoefficientPoint_swigregister = _openstudioairflow.PressureCoefficientPoint_swigregister

PressureCoefficientPoint_swigregister(PressureCoefficientPoint)



class SchedulePoint(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, SchedulePoint, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, SchedulePoint, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_SchedulePoint(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def read(self, reader: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.SchedulePoint_read(self, reader)



    def write(self) -> "std::string":

        return _openstudioairflow.SchedulePoint_write(self)



    def time(self) -> "std::string":

        return _openstudioairflow.SchedulePoint_time(self)



    def setTime(self, time: 'std::string const &') -> "void":

        return _openstudioairflow.SchedulePoint_setTime(self, time)



    def ctrl(self) -> "double":

        return _openstudioairflow.SchedulePoint_ctrl(self)



    def setCtrl(self, *args) -> "bool":

        return _openstudioairflow.SchedulePoint_setCtrl(self, *args)

    __swig_destroy__ = _openstudioairflow.delete_SchedulePoint

    __del__ = lambda self: None

SchedulePoint_swigregister = _openstudioairflow.SchedulePoint_swigregister

SchedulePoint_swigregister(SchedulePoint)



class Zone(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Zone, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Zone, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_Zone(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_Zone

    __del__ = lambda self: None



    def __eq__(self, other: 'Zone') -> "bool":

        return _openstudioairflow.Zone___eq__(self, other)



    def __ne__(self, other: 'Zone') -> "bool":

        return _openstudioairflow.Zone___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.Zone_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.Zone_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.Zone_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.Zone_setNr(self, nr)



    def flags(self) -> "unsigned int":

        return _openstudioairflow.Zone_flags(self)



    def setFlags(self, flags: 'unsigned int const') -> "void":

        return _openstudioairflow.Zone_setFlags(self, flags)



    def ps(self) -> "int":

        return _openstudioairflow.Zone_ps(self)



    def setPs(self, ps: 'int const') -> "void":

        return _openstudioairflow.Zone_setPs(self, ps)



    def pc(self) -> "int":

        return _openstudioairflow.Zone_pc(self)



    def setPc(self, pc: 'int const') -> "void":

        return _openstudioairflow.Zone_setPc(self, pc)



    def pk(self) -> "int":

        return _openstudioairflow.Zone_pk(self)



    def setPk(self, pk: 'int const') -> "void":

        return _openstudioairflow.Zone_setPk(self, pk)



    def pl(self) -> "int":

        return _openstudioairflow.Zone_pl(self)



    def setPl(self, pl: 'int const') -> "void":

        return _openstudioairflow.Zone_setPl(self, pl)



    def relHt(self) -> "double":

        return _openstudioairflow.Zone_relHt(self)



    def setRelHt(self, *args) -> "bool":

        return _openstudioairflow.Zone_setRelHt(self, *args)



    def Vol(self) -> "double":

        return _openstudioairflow.Zone_Vol(self)



    def setVol(self, *args) -> "bool":

        return _openstudioairflow.Zone_setVol(self, *args)



    def T0(self) -> "double":

        return _openstudioairflow.Zone_T0(self)



    def setT0(self, *args) -> "bool":

        return _openstudioairflow.Zone_setT0(self, *args)



    def P0(self) -> "double":

        return _openstudioairflow.Zone_P0(self)



    def setP0(self, *args) -> "bool":

        return _openstudioairflow.Zone_setP0(self, *args)



    def name(self) -> "std::string":

        return _openstudioairflow.Zone_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.Zone_setName(self, name)



    def color(self) -> "int":

        return _openstudioairflow.Zone_color(self)



    def setColor(self, color: 'int const') -> "void":

        return _openstudioairflow.Zone_setColor(self, color)



    def u_Ht(self) -> "int":

        return _openstudioairflow.Zone_u_Ht(self)



    def setU_Ht(self, u_Ht: 'int const') -> "void":

        return _openstudioairflow.Zone_setU_Ht(self, u_Ht)



    def u_V(self) -> "int":

        return _openstudioairflow.Zone_u_V(self)



    def setU_V(self, u_V: 'int const') -> "void":

        return _openstudioairflow.Zone_setU_V(self, u_V)



    def u_T(self) -> "int":

        return _openstudioairflow.Zone_u_T(self)



    def setU_T(self, u_T: 'int const') -> "void":

        return _openstudioairflow.Zone_setU_T(self, u_T)



    def u_P(self) -> "int":

        return _openstudioairflow.Zone_u_P(self)



    def setU_P(self, u_P: 'int const') -> "void":

        return _openstudioairflow.Zone_setU_P(self, u_P)



    def cdaxis(self) -> "int":

        return _openstudioairflow.Zone_cdaxis(self)



    def setCdaxis(self, cdaxis: 'int const') -> "void":

        return _openstudioairflow.Zone_setCdaxis(self, cdaxis)



    def cfd(self) -> "int":

        return _openstudioairflow.Zone_cfd(self)



    def setCfd(self, cfd: 'int const') -> "void":

        return _openstudioairflow.Zone_setCfd(self, cfd)



    def cfdname(self) -> "std::string":

        return _openstudioairflow.Zone_cfdname(self)



    def setCfdname(self, cfdname: 'std::string const &') -> "void":

        return _openstudioairflow.Zone_setCfdname(self, cfdname)



    def X1(self) -> "double":

        return _openstudioairflow.Zone_X1(self)



    def setX1(self, *args) -> "bool":

        return _openstudioairflow.Zone_setX1(self, *args)



    def Y1(self) -> "double":

        return _openstudioairflow.Zone_Y1(self)



    def setY1(self, *args) -> "bool":

        return _openstudioairflow.Zone_setY1(self, *args)



    def H1(self) -> "double":

        return _openstudioairflow.Zone_H1(self)



    def setH1(self, *args) -> "bool":

        return _openstudioairflow.Zone_setH1(self, *args)



    def X2(self) -> "double":

        return _openstudioairflow.Zone_X2(self)



    def setX2(self, *args) -> "bool":

        return _openstudioairflow.Zone_setX2(self, *args)



    def Y2(self) -> "double":

        return _openstudioairflow.Zone_Y2(self)



    def setY2(self, *args) -> "bool":

        return _openstudioairflow.Zone_setY2(self, *args)



    def H2(self) -> "double":

        return _openstudioairflow.Zone_H2(self)



    def setH2(self, *args) -> "bool":

        return _openstudioairflow.Zone_setH2(self, *args)



    def celldx(self) -> "double":

        return _openstudioairflow.Zone_celldx(self)



    def setCelldx(self, *args) -> "bool":

        return _openstudioairflow.Zone_setCelldx(self, *args)



    def axialD(self) -> "double":

        return _openstudioairflow.Zone_axialD(self)



    def setAxialD(self, *args) -> "bool":

        return _openstudioairflow.Zone_setAxialD(self, *args)



    def u_aD(self) -> "int":

        return _openstudioairflow.Zone_u_aD(self)



    def setU_aD(self, u_aD: 'int const') -> "void":

        return _openstudioairflow.Zone_setU_aD(self, u_aD)



    def u_L(self) -> "int":

        return _openstudioairflow.Zone_u_L(self)



    def setU_L(self, u_L: 'int const') -> "void":

        return _openstudioairflow.Zone_setU_L(self, u_L)



    def variablePressure(self) -> "bool":

        return _openstudioairflow.Zone_variablePressure(self)



    def setVariablePressure(self, b: 'bool') -> "void":

        return _openstudioairflow.Zone_setVariablePressure(self, b)



    def variableContaminants(self) -> "bool":

        return _openstudioairflow.Zone_variableContaminants(self)



    def setVariableContaminants(self, b: 'bool') -> "void":

        return _openstudioairflow.Zone_setVariableContaminants(self, b)



    def system(self) -> "bool":

        return _openstudioairflow.Zone_system(self)



    def setSystem(self, b: 'bool') -> "void":

        return _openstudioairflow.Zone_setSystem(self, b)



    def ic(self, *args) -> "std::vector< double,std::allocator< double > >":

        return _openstudioairflow.Zone_ic(self, *args)



    def setIc(self, *args) -> "bool":

        return _openstudioairflow.Zone_setIc(self, *args)

Zone_swigregister = _openstudioairflow.Zone_swigregister

Zone_swigregister(Zone)



class Species(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Species, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Species, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_Species(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_Species

    __del__ = lambda self: None



    def __eq__(self, other: 'Species') -> "bool":

        return _openstudioairflow.Species___eq__(self, other)



    def __ne__(self, other: 'Species') -> "bool":

        return _openstudioairflow.Species___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.Species_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.Species_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.Species_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.Species_setNr(self, nr)



    def sflag(self) -> "bool":

        return _openstudioairflow.Species_sflag(self)



    def setSflag(self, sflag: 'bool const') -> "void":

        return _openstudioairflow.Species_setSflag(self, sflag)



    def ntflag(self) -> "bool":

        return _openstudioairflow.Species_ntflag(self)



    def setNtflag(self, ntflag: 'bool const') -> "void":

        return _openstudioairflow.Species_setNtflag(self, ntflag)



    def molwt(self) -> "double":

        return _openstudioairflow.Species_molwt(self)



    def setMolwt(self, *args) -> "bool":

        return _openstudioairflow.Species_setMolwt(self, *args)



    def mdiam(self) -> "double":

        return _openstudioairflow.Species_mdiam(self)



    def setMdiam(self, *args) -> "bool":

        return _openstudioairflow.Species_setMdiam(self, *args)



    def edens(self) -> "double":

        return _openstudioairflow.Species_edens(self)



    def setEdens(self, *args) -> "bool":

        return _openstudioairflow.Species_setEdens(self, *args)



    def decay(self) -> "double":

        return _openstudioairflow.Species_decay(self)



    def setDecay(self, *args) -> "bool":

        return _openstudioairflow.Species_setDecay(self, *args)



    def Dm(self) -> "double":

        return _openstudioairflow.Species_Dm(self)



    def setDm(self, *args) -> "bool":

        return _openstudioairflow.Species_setDm(self, *args)



    def ccdef(self) -> "double":

        return _openstudioairflow.Species_ccdef(self)



    def setCcdef(self, *args) -> "bool":

        return _openstudioairflow.Species_setCcdef(self, *args)



    def Cp(self) -> "double":

        return _openstudioairflow.Species_Cp(self)



    def setCp(self, *args) -> "bool":

        return _openstudioairflow.Species_setCp(self, *args)



    def ucc(self) -> "int":

        return _openstudioairflow.Species_ucc(self)



    def setUcc(self, ucc: 'int const') -> "void":

        return _openstudioairflow.Species_setUcc(self, ucc)



    def umd(self) -> "int":

        return _openstudioairflow.Species_umd(self)



    def setUmd(self, umd: 'int const') -> "void":

        return _openstudioairflow.Species_setUmd(self, umd)



    def ued(self) -> "int":

        return _openstudioairflow.Species_ued(self)



    def setUed(self, ued: 'int const') -> "void":

        return _openstudioairflow.Species_setUed(self, ued)



    def udm(self) -> "int":

        return _openstudioairflow.Species_udm(self)



    def setUdm(self, udm: 'int const') -> "void":

        return _openstudioairflow.Species_setUdm(self, udm)



    def ucp(self) -> "int":

        return _openstudioairflow.Species_ucp(self)



    def setUcp(self, ucp: 'int const') -> "void":

        return _openstudioairflow.Species_setUcp(self, ucp)



    def name(self) -> "std::string":

        return _openstudioairflow.Species_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.Species_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.Species_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.Species_setDesc(self, desc)

Species_swigregister = _openstudioairflow.Species_swigregister

Species_swigregister(Species)



class Ahs(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Ahs, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Ahs, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_Ahs(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_Ahs

    __del__ = lambda self: None



    def __eq__(self, other: 'Ahs') -> "bool":

        return _openstudioairflow.Ahs___eq__(self, other)



    def __ne__(self, other: 'Ahs') -> "bool":

        return _openstudioairflow.Ahs___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.Ahs_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.Ahs_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.Ahs_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.Ahs_setNr(self, nr)



    def zone_r(self) -> "int":

        return _openstudioairflow.Ahs_zone_r(self)



    def setZone_r(self, zone_r: 'int const') -> "void":

        return _openstudioairflow.Ahs_setZone_r(self, zone_r)



    def zone_s(self) -> "int":

        return _openstudioairflow.Ahs_zone_s(self)



    def setZone_s(self, zone_s: 'int const') -> "void":

        return _openstudioairflow.Ahs_setZone_s(self, zone_s)



    def path_r(self) -> "int":

        return _openstudioairflow.Ahs_path_r(self)



    def setPath_r(self, path_r: 'int const') -> "void":

        return _openstudioairflow.Ahs_setPath_r(self, path_r)



    def path_s(self) -> "int":

        return _openstudioairflow.Ahs_path_s(self)



    def setPath_s(self, path_s: 'int const') -> "void":

        return _openstudioairflow.Ahs_setPath_s(self, path_s)



    def path_x(self) -> "int":

        return _openstudioairflow.Ahs_path_x(self)



    def setPath_x(self, path_x: 'int const') -> "void":

        return _openstudioairflow.Ahs_setPath_x(self, path_x)



    def name(self) -> "std::string":

        return _openstudioairflow.Ahs_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.Ahs_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.Ahs_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.Ahs_setDesc(self, desc)

Ahs_swigregister = _openstudioairflow.Ahs_swigregister

Ahs_swigregister(Ahs)



class AirflowPath(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirflowPath, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirflowPath, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AirflowPath(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AirflowPath

    __del__ = lambda self: None



    def __eq__(self, other: 'AirflowPath') -> "bool":

        return _openstudioairflow.AirflowPath___eq__(self, other)



    def __ne__(self, other: 'AirflowPath') -> "bool":

        return _openstudioairflow.AirflowPath___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AirflowPath_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.AirflowPath_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.AirflowPath_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setNr(self, nr)



    def flags(self) -> "int":

        return _openstudioairflow.AirflowPath_flags(self)



    def setFlags(self, flags: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setFlags(self, flags)



    def pzn(self) -> "int":

        return _openstudioairflow.AirflowPath_pzn(self)



    def setPzn(self, pzn: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setPzn(self, pzn)



    def pzm(self) -> "int":

        return _openstudioairflow.AirflowPath_pzm(self)



    def setPzm(self, pzm: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setPzm(self, pzm)



    def pe(self) -> "int":

        return _openstudioairflow.AirflowPath_pe(self)



    def setPe(self, pe: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setPe(self, pe)



    def pf(self) -> "int":

        return _openstudioairflow.AirflowPath_pf(self)



    def setPf(self, pf: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setPf(self, pf)



    def pw(self) -> "int":

        return _openstudioairflow.AirflowPath_pw(self)



    def setPw(self, pw: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setPw(self, pw)



    def pa(self) -> "int":

        return _openstudioairflow.AirflowPath_pa(self)



    def setPa(self, pa: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setPa(self, pa)



    def ps(self) -> "int":

        return _openstudioairflow.AirflowPath_ps(self)



    def setPs(self, ps: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setPs(self, ps)



    def pc(self) -> "int":

        return _openstudioairflow.AirflowPath_pc(self)



    def setPc(self, pc: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setPc(self, pc)



    def pld(self) -> "int":

        return _openstudioairflow.AirflowPath_pld(self)



    def setPld(self, pld: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setPld(self, pld)



    def X(self) -> "double":

        return _openstudioairflow.AirflowPath_X(self)



    def setX(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setX(self, *args)



    def Y(self) -> "double":

        return _openstudioairflow.AirflowPath_Y(self)



    def setY(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setY(self, *args)



    def relHt(self) -> "double":

        return _openstudioairflow.AirflowPath_relHt(self)



    def setRelHt(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setRelHt(self, *args)



    def mult(self) -> "double":

        return _openstudioairflow.AirflowPath_mult(self)



    def setMult(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setMult(self, *args)



    def wPset(self) -> "double":

        return _openstudioairflow.AirflowPath_wPset(self)



    def setWPset(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setWPset(self, *args)



    def wPmod(self) -> "double":

        return _openstudioairflow.AirflowPath_wPmod(self)



    def setWPmod(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setWPmod(self, *args)



    def wazm(self) -> "double":

        return _openstudioairflow.AirflowPath_wazm(self)



    def setWazm(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setWazm(self, *args)



    def Fahs(self) -> "double":

        return _openstudioairflow.AirflowPath_Fahs(self)



    def setFahs(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setFahs(self, *args)



    def Xmax(self) -> "double":

        return _openstudioairflow.AirflowPath_Xmax(self)



    def setXmax(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setXmax(self, *args)



    def Xmin(self) -> "double":

        return _openstudioairflow.AirflowPath_Xmin(self)



    def setXmin(self, *args) -> "bool":

        return _openstudioairflow.AirflowPath_setXmin(self, *args)



    def icon(self) -> "unsigned int":

        return _openstudioairflow.AirflowPath_icon(self)



    def setIcon(self, icon: 'unsigned int const') -> "void":

        return _openstudioairflow.AirflowPath_setIcon(self, icon)



    def dir(self) -> "unsigned int":

        return _openstudioairflow.AirflowPath_dir(self)



    def setDir(self, dir: 'unsigned int const') -> "void":

        return _openstudioairflow.AirflowPath_setDir(self, dir)



    def u_Ht(self) -> "int":

        return _openstudioairflow.AirflowPath_u_Ht(self)



    def setU_Ht(self, u_Ht: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setU_Ht(self, u_Ht)



    def u_XY(self) -> "int":

        return _openstudioairflow.AirflowPath_u_XY(self)



    def setU_XY(self, u_XY: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setU_XY(self, u_XY)



    def u_dP(self) -> "int":

        return _openstudioairflow.AirflowPath_u_dP(self)



    def setU_dP(self, u_dP: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setU_dP(self, u_dP)



    def u_F(self) -> "int":

        return _openstudioairflow.AirflowPath_u_F(self)



    def setU_F(self, u_F: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setU_F(self, u_F)



    def cfd(self) -> "int":

        return _openstudioairflow.AirflowPath_cfd(self)



    def setCfd(self, cfd: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setCfd(self, cfd)



    def cfd_name(self) -> "std::string":

        return _openstudioairflow.AirflowPath_cfd_name(self)



    def setCfd_name(self, cfd_name: 'std::string const &') -> "void":

        return _openstudioairflow.AirflowPath_setCfd_name(self, cfd_name)



    def cfd_ptype(self) -> "int":

        return _openstudioairflow.AirflowPath_cfd_ptype(self)



    def setCfd_ptype(self, cfd_ptype: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setCfd_ptype(self, cfd_ptype)



    def cfd_btype(self) -> "int":

        return _openstudioairflow.AirflowPath_cfd_btype(self)



    def setCfd_btype(self, cfd_btype: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setCfd_btype(self, cfd_btype)



    def cfd_capp(self) -> "int":

        return _openstudioairflow.AirflowPath_cfd_capp(self)



    def setCfd_capp(self, cfd_capp: 'int const') -> "void":

        return _openstudioairflow.AirflowPath_setCfd_capp(self, cfd_capp)



    def windPressure(self) -> "bool":

        return _openstudioairflow.AirflowPath_windPressure(self)



    def setWindPressure(self, b: 'bool') -> "void":

        return _openstudioairflow.AirflowPath_setWindPressure(self, b)



    def system(self) -> "bool":

        return _openstudioairflow.AirflowPath_system(self)



    def setSystem(self, b: 'bool') -> "void":

        return _openstudioairflow.AirflowPath_setSystem(self, b)



    def exhaust(self) -> "bool":

        return _openstudioairflow.AirflowPath_exhaust(self)



    def setExhaust(self, b: 'bool') -> "void":

        return _openstudioairflow.AirflowPath_setExhaust(self, b)



    def recirculation(self) -> "bool":

        return _openstudioairflow.AirflowPath_recirculation(self)



    def setRecirculation(self, b: 'bool') -> "void":

        return _openstudioairflow.AirflowPath_setRecirculation(self, b)



    def outsideAir(self) -> "bool":

        return _openstudioairflow.AirflowPath_outsideAir(self)



    def setOutsideAir(self, b: 'bool') -> "void":

        return _openstudioairflow.AirflowPath_setOutsideAir(self, b)

AirflowPath_swigregister = _openstudioairflow.AirflowPath_swigregister

AirflowPath_swigregister(AirflowPath)



class RunControl(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, RunControl, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, RunControl, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_RunControl(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_RunControl

    __del__ = lambda self: None



    def __eq__(self, other: 'RunControl') -> "bool":

        return _openstudioairflow.RunControl___eq__(self, other)



    def __ne__(self, other: 'RunControl') -> "bool":

        return _openstudioairflow.RunControl___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.RunControl_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.RunControl_write(self)



    def sim_af(self) -> "int":

        return _openstudioairflow.RunControl_sim_af(self)



    def setSim_af(self, sim_af: 'int const') -> "void":

        return _openstudioairflow.RunControl_setSim_af(self, sim_af)



    def afcalc(self) -> "int":

        return _openstudioairflow.RunControl_afcalc(self)



    def setAfcalc(self, afcalc: 'int const') -> "void":

        return _openstudioairflow.RunControl_setAfcalc(self, afcalc)



    def afmaxi(self) -> "int":

        return _openstudioairflow.RunControl_afmaxi(self)



    def setAfmaxi(self, afmaxi: 'int const') -> "void":

        return _openstudioairflow.RunControl_setAfmaxi(self, afmaxi)



    def afrcnvg(self) -> "double":

        return _openstudioairflow.RunControl_afrcnvg(self)



    def setAfrcnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setAfrcnvg(self, *args)



    def afacnvg(self) -> "double":

        return _openstudioairflow.RunControl_afacnvg(self)



    def setAfacnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setAfacnvg(self, *args)



    def afrelax(self) -> "double":

        return _openstudioairflow.RunControl_afrelax(self)



    def setAfrelax(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setAfrelax(self, *args)



    def uac2(self) -> "int":

        return _openstudioairflow.RunControl_uac2(self)



    def setUac2(self, uac2: 'int const') -> "void":

        return _openstudioairflow.RunControl_setUac2(self, uac2)



    def Pres(self) -> "double":

        return _openstudioairflow.RunControl_Pres(self)



    def setPres(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setPres(self, *args)



    def uPres(self) -> "int":

        return _openstudioairflow.RunControl_uPres(self)



    def setUPres(self, uPres: 'int const') -> "void":

        return _openstudioairflow.RunControl_setUPres(self, uPres)



    def afslae(self) -> "int":

        return _openstudioairflow.RunControl_afslae(self)



    def setAfslae(self, afslae: 'int const') -> "void":

        return _openstudioairflow.RunControl_setAfslae(self, afslae)



    def afrseq(self) -> "int":

        return _openstudioairflow.RunControl_afrseq(self)



    def setAfrseq(self, afrseq: 'int const') -> "void":

        return _openstudioairflow.RunControl_setAfrseq(self, afrseq)



    def aflmaxi(self) -> "int":

        return _openstudioairflow.RunControl_aflmaxi(self)



    def setAflmaxi(self, aflmaxi: 'int const') -> "void":

        return _openstudioairflow.RunControl_setAflmaxi(self, aflmaxi)



    def aflcnvg(self) -> "double":

        return _openstudioairflow.RunControl_aflcnvg(self)



    def setAflcnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setAflcnvg(self, *args)



    def aflinit(self) -> "int":

        return _openstudioairflow.RunControl_aflinit(self)



    def setAflinit(self, aflinit: 'int const') -> "void":

        return _openstudioairflow.RunControl_setAflinit(self, aflinit)



    def Tadj(self) -> "int":

        return _openstudioairflow.RunControl_Tadj(self)



    def setTadj(self, Tadj: 'int const') -> "void":

        return _openstudioairflow.RunControl_setTadj(self, Tadj)



    def sim_mf(self) -> "int":

        return _openstudioairflow.RunControl_sim_mf(self)



    def setSim_mf(self, sim_mf: 'int const') -> "void":

        return _openstudioairflow.RunControl_setSim_mf(self, sim_mf)



    def ccmaxi(self) -> "int":

        return _openstudioairflow.RunControl_ccmaxi(self)



    def setCcmaxi(self, ccmaxi: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCcmaxi(self, ccmaxi)



    def ccrcnvg(self) -> "double":

        return _openstudioairflow.RunControl_ccrcnvg(self)



    def setCcrcnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setCcrcnvg(self, *args)



    def ccacnvg(self) -> "double":

        return _openstudioairflow.RunControl_ccacnvg(self)



    def setCcacnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setCcacnvg(self, *args)



    def ccrelax(self) -> "double":

        return _openstudioairflow.RunControl_ccrelax(self)



    def setCcrelax(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setCcrelax(self, *args)



    def uccc(self) -> "int":

        return _openstudioairflow.RunControl_uccc(self)



    def setUccc(self, uccc: 'int const') -> "void":

        return _openstudioairflow.RunControl_setUccc(self, uccc)



    def mfnmthd(self) -> "int":

        return _openstudioairflow.RunControl_mfnmthd(self)



    def setMfnmthd(self, mfnmthd: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMfnmthd(self, mfnmthd)



    def mfnrseq(self) -> "int":

        return _openstudioairflow.RunControl_mfnrseq(self)



    def setMfnrseq(self, mfnrseq: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMfnrseq(self, mfnrseq)



    def mfnmaxi(self) -> "int":

        return _openstudioairflow.RunControl_mfnmaxi(self)



    def setMfnmaxi(self, mfnmaxi: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMfnmaxi(self, mfnmaxi)



    def mfnrcnvg(self) -> "double":

        return _openstudioairflow.RunControl_mfnrcnvg(self)



    def setMfnrcnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMfnrcnvg(self, *args)



    def mfnacnvg(self) -> "double":

        return _openstudioairflow.RunControl_mfnacnvg(self)



    def setMfnacnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMfnacnvg(self, *args)



    def mfnrelax(self) -> "double":

        return _openstudioairflow.RunControl_mfnrelax(self)



    def setMfnrelax(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMfnrelax(self, *args)



    def mfngamma(self) -> "double":

        return _openstudioairflow.RunControl_mfngamma(self)



    def setMfngamma(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMfngamma(self, *args)



    def uccn(self) -> "int":

        return _openstudioairflow.RunControl_uccn(self)



    def setUccn(self, uccn: 'int const') -> "void":

        return _openstudioairflow.RunControl_setUccn(self, uccn)



    def mftmthd(self) -> "int":

        return _openstudioairflow.RunControl_mftmthd(self)



    def setMftmthd(self, mftmthd: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMftmthd(self, mftmthd)



    def mftrseq(self) -> "int":

        return _openstudioairflow.RunControl_mftrseq(self)



    def setMftrseq(self, mftrseq: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMftrseq(self, mftrseq)



    def mftmaxi(self) -> "int":

        return _openstudioairflow.RunControl_mftmaxi(self)



    def setMftmaxi(self, mftmaxi: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMftmaxi(self, mftmaxi)



    def mftrcnvg(self) -> "double":

        return _openstudioairflow.RunControl_mftrcnvg(self)



    def setMftrcnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMftrcnvg(self, *args)



    def mftacnvg(self) -> "double":

        return _openstudioairflow.RunControl_mftacnvg(self)



    def setMftacnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMftacnvg(self, *args)



    def mftrelax(self) -> "double":

        return _openstudioairflow.RunControl_mftrelax(self)



    def setMftrelax(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMftrelax(self, *args)



    def mftgamma(self) -> "double":

        return _openstudioairflow.RunControl_mftgamma(self)



    def setMftgamma(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMftgamma(self, *args)



    def ucct(self) -> "int":

        return _openstudioairflow.RunControl_ucct(self)



    def setUcct(self, ucct: 'int const') -> "void":

        return _openstudioairflow.RunControl_setUcct(self, ucct)



    def mfvmthd(self) -> "int":

        return _openstudioairflow.RunControl_mfvmthd(self)



    def setMfvmthd(self, mfvmthd: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMfvmthd(self, mfvmthd)



    def mfvrseq(self) -> "int":

        return _openstudioairflow.RunControl_mfvrseq(self)



    def setMfvrseq(self, mfvrseq: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMfvrseq(self, mfvrseq)



    def mfvmaxi(self) -> "int":

        return _openstudioairflow.RunControl_mfvmaxi(self)



    def setMfvmaxi(self, mfvmaxi: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMfvmaxi(self, mfvmaxi)



    def mfvrcnvg(self) -> "double":

        return _openstudioairflow.RunControl_mfvrcnvg(self)



    def setMfvrcnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMfvrcnvg(self, *args)



    def mfvacnvg(self) -> "double":

        return _openstudioairflow.RunControl_mfvacnvg(self)



    def setMfvacnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMfvacnvg(self, *args)



    def mfvrelax(self) -> "double":

        return _openstudioairflow.RunControl_mfvrelax(self)



    def setMfvrelax(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setMfvrelax(self, *args)



    def uccv(self) -> "int":

        return _openstudioairflow.RunControl_uccv(self)



    def setUccv(self, uccv: 'int const') -> "void":

        return _openstudioairflow.RunControl_setUccv(self, uccv)



    def mf_solver(self) -> "int":

        return _openstudioairflow.RunControl_mf_solver(self)



    def setMf_solver(self, mf_solver: 'int const') -> "void":

        return _openstudioairflow.RunControl_setMf_solver(self, mf_solver)



    def sim_1dz(self) -> "int":

        return _openstudioairflow.RunControl_sim_1dz(self)



    def setSim_1dz(self, sim_1dz: 'int const') -> "void":

        return _openstudioairflow.RunControl_setSim_1dz(self, sim_1dz)



    def sim_1dd(self) -> "int":

        return _openstudioairflow.RunControl_sim_1dd(self)



    def setSim_1dd(self, sim_1dd: 'int const') -> "void":

        return _openstudioairflow.RunControl_setSim_1dd(self, sim_1dd)



    def celldx(self) -> "double":

        return _openstudioairflow.RunControl_celldx(self)



    def setCelldx(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setCelldx(self, *args)



    def sim_vjt(self) -> "int":

        return _openstudioairflow.RunControl_sim_vjt(self)



    def setSim_vjt(self, sim_vjt: 'int const') -> "void":

        return _openstudioairflow.RunControl_setSim_vjt(self, sim_vjt)



    def udx(self) -> "int":

        return _openstudioairflow.RunControl_udx(self)



    def setUdx(self, udx: 'int const') -> "void":

        return _openstudioairflow.RunControl_setUdx(self, udx)



    def cvode_mth(self) -> "int":

        return _openstudioairflow.RunControl_cvode_mth(self)



    def setCvode_mth(self, cvode_mth: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCvode_mth(self, cvode_mth)



    def cvode_rcnvg(self) -> "double":

        return _openstudioairflow.RunControl_cvode_rcnvg(self)



    def setCvode_rcnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setCvode_rcnvg(self, *args)



    def cvode_acnvg(self) -> "double":

        return _openstudioairflow.RunControl_cvode_acnvg(self)



    def setCvode_acnvg(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setCvode_acnvg(self, *args)



    def cvode_dtmax(self) -> "double":

        return _openstudioairflow.RunControl_cvode_dtmax(self)



    def setCvode_dtmax(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setCvode_dtmax(self, *args)



    def tsdens(self) -> "int":

        return _openstudioairflow.RunControl_tsdens(self)



    def setTsdens(self, tsdens: 'int const') -> "void":

        return _openstudioairflow.RunControl_setTsdens(self, tsdens)



    def tsrelax(self) -> "double":

        return _openstudioairflow.RunControl_tsrelax(self)



    def setTsrelax(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setTsrelax(self, *args)



    def tsmaxi(self) -> "int":

        return _openstudioairflow.RunControl_tsmaxi(self)



    def setTsmaxi(self, tsmaxi: 'int const') -> "void":

        return _openstudioairflow.RunControl_setTsmaxi(self, tsmaxi)



    def cnvgSS(self) -> "int":

        return _openstudioairflow.RunControl_cnvgSS(self)



    def setCnvgSS(self, cnvgSS: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCnvgSS(self, cnvgSS)



    def densZP(self) -> "int":

        return _openstudioairflow.RunControl_densZP(self)



    def setDensZP(self, densZP: 'int const') -> "void":

        return _openstudioairflow.RunControl_setDensZP(self, densZP)



    def stackD(self) -> "int":

        return _openstudioairflow.RunControl_stackD(self)



    def setStackD(self, stackD: 'int const') -> "void":

        return _openstudioairflow.RunControl_setStackD(self, stackD)



    def dodMdt(self) -> "int":

        return _openstudioairflow.RunControl_dodMdt(self)



    def setDodMdt(self, dodMdt: 'int const') -> "void":

        return _openstudioairflow.RunControl_setDodMdt(self, dodMdt)



    def date_st(self) -> "std::string":

        return _openstudioairflow.RunControl_date_st(self)



    def setDate_st(self, date_st: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setDate_st(self, date_st)



    def time_st(self) -> "std::string":

        return _openstudioairflow.RunControl_time_st(self)



    def setTime_st(self, time_st: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setTime_st(self, time_st)



    def date_0(self) -> "std::string":

        return _openstudioairflow.RunControl_date_0(self)



    def setDate_0(self, date_0: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setDate_0(self, date_0)



    def time_0(self) -> "std::string":

        return _openstudioairflow.RunControl_time_0(self)



    def setTime_0(self, time_0: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setTime_0(self, time_0)



    def date_1(self) -> "std::string":

        return _openstudioairflow.RunControl_date_1(self)



    def setDate_1(self, date_1: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setDate_1(self, date_1)



    def time_1(self) -> "std::string":

        return _openstudioairflow.RunControl_time_1(self)



    def setTime_1(self, time_1: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setTime_1(self, time_1)



    def time_step(self) -> "std::string":

        return _openstudioairflow.RunControl_time_step(self)



    def setTime_step(self, time_step: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setTime_step(self, time_step)



    def time_list(self) -> "std::string":

        return _openstudioairflow.RunControl_time_list(self)



    def setTime_list(self, time_list: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setTime_list(self, time_list)



    def time_scrn(self) -> "std::string":

        return _openstudioairflow.RunControl_time_scrn(self)



    def setTime_scrn(self, time_scrn: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setTime_scrn(self, time_scrn)



    def restart(self) -> "int":

        return _openstudioairflow.RunControl_restart(self)



    def setRestart(self, restart: 'int const') -> "void":

        return _openstudioairflow.RunControl_setRestart(self, restart)



    def rstdate(self) -> "std::string":

        return _openstudioairflow.RunControl_rstdate(self)



    def setRstdate(self, rstdate: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setRstdate(self, rstdate)



    def rsttime(self) -> "std::string":

        return _openstudioairflow.RunControl_rsttime(self)



    def setRsttime(self, rsttime: 'std::string const &') -> "void":

        return _openstudioairflow.RunControl_setRsttime(self, rsttime)



    def list(self) -> "int":

        return _openstudioairflow.RunControl_list(self)



    def setList(self, list: 'int const') -> "void":

        return _openstudioairflow.RunControl_setList(self, list)



    def doDlg(self) -> "int":

        return _openstudioairflow.RunControl_doDlg(self)



    def setDoDlg(self, doDlg: 'int const') -> "void":

        return _openstudioairflow.RunControl_setDoDlg(self, doDlg)



    def pfsave(self) -> "int":

        return _openstudioairflow.RunControl_pfsave(self)



    def setPfsave(self, pfsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setPfsave(self, pfsave)



    def zfsave(self) -> "int":

        return _openstudioairflow.RunControl_zfsave(self)



    def setZfsave(self, zfsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setZfsave(self, zfsave)



    def zcsave(self) -> "int":

        return _openstudioairflow.RunControl_zcsave(self)



    def setZcsave(self, zcsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setZcsave(self, zcsave)



    def achvol(self) -> "int":

        return _openstudioairflow.RunControl_achvol(self)



    def setAchvol(self, achvol: 'int const') -> "void":

        return _openstudioairflow.RunControl_setAchvol(self, achvol)



    def achsave(self) -> "int":

        return _openstudioairflow.RunControl_achsave(self)



    def setAchsave(self, achsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setAchsave(self, achsave)



    def abwsave(self) -> "int":

        return _openstudioairflow.RunControl_abwsave(self)



    def setAbwsave(self, abwsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setAbwsave(self, abwsave)



    def cbwsave(self) -> "int":

        return _openstudioairflow.RunControl_cbwsave(self)



    def setCbwsave(self, cbwsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCbwsave(self, cbwsave)



    def expsave(self) -> "int":

        return _openstudioairflow.RunControl_expsave(self)



    def setExpsave(self, expsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setExpsave(self, expsave)



    def ebwsave(self) -> "int":

        return _openstudioairflow.RunControl_ebwsave(self)



    def setEbwsave(self, ebwsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setEbwsave(self, ebwsave)



    def zaasave(self) -> "int":

        return _openstudioairflow.RunControl_zaasave(self)



    def setZaasave(self, zaasave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setZaasave(self, zaasave)



    def zbwsave(self) -> "int":

        return _openstudioairflow.RunControl_zbwsave(self)



    def setZbwsave(self, zbwsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setZbwsave(self, zbwsave)



    def rzfsave(self) -> "int":

        return _openstudioairflow.RunControl_rzfsave(self)



    def setRzfsave(self, rzfsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setRzfsave(self, rzfsave)



    def rzmsave(self) -> "int":

        return _openstudioairflow.RunControl_rzmsave(self)



    def setRzmsave(self, rzmsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setRzmsave(self, rzmsave)



    def rz1save(self) -> "int":

        return _openstudioairflow.RunControl_rz1save(self)



    def setRz1save(self, rz1save: 'int const') -> "void":

        return _openstudioairflow.RunControl_setRz1save(self, rz1save)



    def csmsave(self) -> "int":

        return _openstudioairflow.RunControl_csmsave(self)



    def setCsmsave(self, csmsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCsmsave(self, csmsave)



    def srfsave(self) -> "int":

        return _openstudioairflow.RunControl_srfsave(self)



    def setSrfsave(self, srfsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setSrfsave(self, srfsave)



    def logsave(self) -> "int":

        return _openstudioairflow.RunControl_logsave(self)



    def setLogsave(self, logsave: 'int const') -> "void":

        return _openstudioairflow.RunControl_setLogsave(self, logsave)



    def save(self) -> "std::vector< int,std::allocator< int > >":

        return _openstudioairflow.RunControl_save(self)



    def setSave(self, save: 'IntVector') -> "void":

        return _openstudioairflow.RunControl_setSave(self, save)



    def rvals(self) -> "std::vector< double,std::allocator< double > >":

        return _openstudioairflow.RunControl_rvals(self)



    def setRvals(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setRvals(self, *args)



    def BldgFlowZ(self) -> "int":

        return _openstudioairflow.RunControl_BldgFlowZ(self)



    def setBldgFlowZ(self, BldgFlowZ: 'int const') -> "void":

        return _openstudioairflow.RunControl_setBldgFlowZ(self, BldgFlowZ)



    def BldgFlowD(self) -> "int":

        return _openstudioairflow.RunControl_BldgFlowD(self)



    def setBldgFlowD(self, BldgFlowD: 'int const') -> "void":

        return _openstudioairflow.RunControl_setBldgFlowD(self, BldgFlowD)



    def BldgFlowC(self) -> "int":

        return _openstudioairflow.RunControl_BldgFlowC(self)



    def setBldgFlowC(self, BldgFlowC: 'int const') -> "void":

        return _openstudioairflow.RunControl_setBldgFlowC(self, BldgFlowC)



    def cfd_ctype(self) -> "int":

        return _openstudioairflow.RunControl_cfd_ctype(self)



    def setCfd_ctype(self, cfd_ctype: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCfd_ctype(self, cfd_ctype)



    def cfd_convcpl(self) -> "double":

        return _openstudioairflow.RunControl_cfd_convcpl(self)



    def setCfd_convcpl(self, *args) -> "bool":

        return _openstudioairflow.RunControl_setCfd_convcpl(self, *args)



    def cfd_var(self) -> "int":

        return _openstudioairflow.RunControl_cfd_var(self)



    def setCfd_var(self, cfd_var: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCfd_var(self, cfd_var)



    def cfd_zref(self) -> "int":

        return _openstudioairflow.RunControl_cfd_zref(self)



    def setCfd_zref(self, cfd_zref: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCfd_zref(self, cfd_zref)



    def cfd_imax(self) -> "int":

        return _openstudioairflow.RunControl_cfd_imax(self)



    def setCfd_imax(self, cfd_imax: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCfd_imax(self, cfd_imax)



    def cfd_dtcmo(self) -> "int":

        return _openstudioairflow.RunControl_cfd_dtcmo(self)



    def setCfd_dtcmo(self, cfd_dtcmo: 'int const') -> "void":

        return _openstudioairflow.RunControl_setCfd_dtcmo(self, cfd_dtcmo)

RunControl_swigregister = _openstudioairflow.RunControl_swigregister

RunControl_swigregister(RunControl)



class Level(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, Level, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, Level, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_Level(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_Level

    __del__ = lambda self: None



    def __eq__(self, other: 'Level') -> "bool":

        return _openstudioairflow.Level___eq__(self, other)



    def __ne__(self, other: 'Level') -> "bool":

        return _openstudioairflow.Level___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.Level_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.Level_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.Level_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.Level_setNr(self, nr)



    def refht(self) -> "double":

        return _openstudioairflow.Level_refht(self)



    def setRefht(self, *args) -> "bool":

        return _openstudioairflow.Level_setRefht(self, *args)



    def delht(self) -> "double":

        return _openstudioairflow.Level_delht(self)



    def setDelht(self, *args) -> "bool":

        return _openstudioairflow.Level_setDelht(self, *args)



    def u_rfht(self) -> "int":

        return _openstudioairflow.Level_u_rfht(self)



    def setU_rfht(self, u_rfht: 'int const') -> "void":

        return _openstudioairflow.Level_setU_rfht(self, u_rfht)



    def u_dlht(self) -> "int":

        return _openstudioairflow.Level_u_dlht(self)



    def setU_dlht(self, u_dlht: 'int const') -> "void":

        return _openstudioairflow.Level_setU_dlht(self, u_dlht)



    def name(self) -> "std::string":

        return _openstudioairflow.Level_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.Level_setName(self, name)



    def icons(self) -> "std::vector< openstudio::contam::Icon,std::allocator< openstudio::contam::Icon > >":

        return _openstudioairflow.Level_icons(self)



    def setIcons(self, icons: 'ContamSketchPadIconVector') -> "void":

        return _openstudioairflow.Level_setIcons(self, icons)

Level_swigregister = _openstudioairflow.Level_swigregister

Level_swigregister(Level)



class DaySchedule(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, DaySchedule, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, DaySchedule, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_DaySchedule(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_DaySchedule

    __del__ = lambda self: None



    def __eq__(self, other: 'DaySchedule') -> "bool":

        return _openstudioairflow.DaySchedule___eq__(self, other)



    def __ne__(self, other: 'DaySchedule') -> "bool":

        return _openstudioairflow.DaySchedule___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.DaySchedule_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.DaySchedule_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.DaySchedule_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.DaySchedule_setNr(self, nr)



    def shape(self) -> "int":

        return _openstudioairflow.DaySchedule_shape(self)



    def setShape(self, shape: 'int const') -> "void":

        return _openstudioairflow.DaySchedule_setShape(self, shape)



    def utyp(self) -> "int":

        return _openstudioairflow.DaySchedule_utyp(self)



    def setUtyp(self, utyp: 'int const') -> "void":

        return _openstudioairflow.DaySchedule_setUtyp(self, utyp)



    def ucnv(self) -> "int":

        return _openstudioairflow.DaySchedule_ucnv(self)



    def setUcnv(self, ucnv: 'int const') -> "void":

        return _openstudioairflow.DaySchedule_setUcnv(self, ucnv)



    def name(self) -> "std::string":

        return _openstudioairflow.DaySchedule_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.DaySchedule_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.DaySchedule_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.DaySchedule_setDesc(self, desc)



    def points(self) -> "std::vector< openstudio::contam::SchedulePoint,std::allocator< openstudio::contam::SchedulePoint > >":

        return _openstudioairflow.DaySchedule_points(self)



    def setPoints(self, points: 'ContamSchedulePointVector') -> "void":

        return _openstudioairflow.DaySchedule_setPoints(self, points)

DaySchedule_swigregister = _openstudioairflow.DaySchedule_swigregister

DaySchedule_swigregister(DaySchedule)



class WeekSchedule(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WeekSchedule, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WeekSchedule, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_WeekSchedule(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_WeekSchedule

    __del__ = lambda self: None



    def __eq__(self, other: 'WeekSchedule') -> "bool":

        return _openstudioairflow.WeekSchedule___eq__(self, other)



    def __ne__(self, other: 'WeekSchedule') -> "bool":

        return _openstudioairflow.WeekSchedule___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.WeekSchedule_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.WeekSchedule_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.WeekSchedule_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.WeekSchedule_setNr(self, nr)



    def utyp(self) -> "int":

        return _openstudioairflow.WeekSchedule_utyp(self)



    def setUtyp(self, utyp: 'int const') -> "void":

        return _openstudioairflow.WeekSchedule_setUtyp(self, utyp)



    def ucnv(self) -> "int":

        return _openstudioairflow.WeekSchedule_ucnv(self)



    def setUcnv(self, ucnv: 'int const') -> "void":

        return _openstudioairflow.WeekSchedule_setUcnv(self, ucnv)



    def name(self) -> "std::string":

        return _openstudioairflow.WeekSchedule_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.WeekSchedule_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.WeekSchedule_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.WeekSchedule_setDesc(self, desc)



    def j(self) -> "std::vector< int,std::allocator< int > >":

        return _openstudioairflow.WeekSchedule_j(self)



    def setJ(self, j: 'IntVector') -> "void":

        return _openstudioairflow.WeekSchedule_setJ(self, j)

WeekSchedule_swigregister = _openstudioairflow.WeekSchedule_swigregister

WeekSchedule_swigregister(WeekSchedule)



class WindPressureProfile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, WindPressureProfile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, WindPressureProfile, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_WindPressureProfile(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_WindPressureProfile

    __del__ = lambda self: None



    def __eq__(self, other: 'WindPressureProfile') -> "bool":

        return _openstudioairflow.WindPressureProfile___eq__(self, other)



    def __ne__(self, other: 'WindPressureProfile') -> "bool":

        return _openstudioairflow.WindPressureProfile___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.WindPressureProfile_read(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.WindPressureProfile_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.WindPressureProfile_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.WindPressureProfile_setNr(self, nr)



    def type(self) -> "int":

        return _openstudioairflow.WindPressureProfile_type(self)



    def setType(self, type: 'int const') -> "void":

        return _openstudioairflow.WindPressureProfile_setType(self, type)



    def name(self) -> "std::string":

        return _openstudioairflow.WindPressureProfile_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.WindPressureProfile_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.WindPressureProfile_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.WindPressureProfile_setDesc(self, desc)



    def coeffs(self) -> "std::vector< openstudio::contam::PressureCoefficientPoint,std::allocator< openstudio::contam::PressureCoefficientPoint > >":

        return _openstudioairflow.WindPressureProfile_coeffs(self)



    def setCoeffs(self, coeffs: 'ContamPressureCoefficientPointVector') -> "void":

        return _openstudioairflow.WindPressureProfile_setCoeffs(self, coeffs)

WindPressureProfile_swigregister = _openstudioairflow.WindPressureProfile_swigregister

WindPressureProfile_swigregister(WindPressureProfile)



class ControlNode(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlNode, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ControlNode, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    CT_SNS = _openstudioairflow.ControlNode_CT_SNS

    CT_SCH = _openstudioairflow.ControlNode_CT_SCH

    CT_SET = _openstudioairflow.ControlNode_CT_SET

    CT_CVF = _openstudioairflow.ControlNode_CT_CVF

    CT_DVF = _openstudioairflow.ControlNode_CT_DVF

    CT_LOG = _openstudioairflow.ControlNode_CT_LOG

    CT_PAS = _openstudioairflow.ControlNode_CT_PAS

    CT_MOD = _openstudioairflow.ControlNode_CT_MOD

    CT_HYS = _openstudioairflow.ControlNode_CT_HYS

    CT_ABS = _openstudioairflow.ControlNode_CT_ABS

    CT_BIN = _openstudioairflow.ControlNode_CT_BIN

    CT_DLS = _openstudioairflow.ControlNode_CT_DLS

    CT_DLX = _openstudioairflow.ControlNode_CT_DLX

    CT_INT = _openstudioairflow.ControlNode_CT_INT

    CT_RAV = _openstudioairflow.ControlNode_CT_RAV

    CT_INV = _openstudioairflow.ControlNode_CT_INV

    CT_AND = _openstudioairflow.ControlNode_CT_AND

    CT_OR = _openstudioairflow.ControlNode_CT_OR

    CT_XOR = _openstudioairflow.ControlNode_CT_XOR

    CT_ADD = _openstudioairflow.ControlNode_CT_ADD

    CT_SUB = _openstudioairflow.ControlNode_CT_SUB

    CT_MUL = _openstudioairflow.ControlNode_CT_MUL

    CT_DIV = _openstudioairflow.ControlNode_CT_DIV

    CT_SUM = _openstudioairflow.ControlNode_CT_SUM

    CT_AVG = _openstudioairflow.ControlNode_CT_AVG

    CT_MAX = _openstudioairflow.ControlNode_CT_MAX

    CT_MIN = _openstudioairflow.ControlNode_CT_MIN

    CT_LLS = _openstudioairflow.ControlNode_CT_LLS

    CT_ULS = _openstudioairflow.ControlNode_CT_ULS

    CT_LBS = _openstudioairflow.ControlNode_CT_LBS

    CT_UBS = _openstudioairflow.ControlNode_CT_UBS

    CT_LLC = _openstudioairflow.ControlNode_CT_LLC

    CT_ULC = _openstudioairflow.ControlNode_CT_ULC

    CT_PC1 = _openstudioairflow.ControlNode_CT_PC1

    CT_PI1 = _openstudioairflow.ControlNode_CT_PI1

    CT_SUP = _openstudioairflow.ControlNode_CT_SUP

    CT_SPH = _openstudioairflow.ControlNode_CT_SPH

    UNKNOWN = _openstudioairflow.ControlNode_UNKNOWN

    __swig_destroy__ = _openstudioairflow.delete_ControlNode

    __del__ = lambda self: None



    def write(self) -> "std::string":

        return _openstudioairflow.ControlNode_write(self)

    __swig_getmethods__["convertTag"] = lambda x: _openstudioairflow.ControlNode_convertTag

    if _newclass:

        convertTag = staticmethod(_openstudioairflow.ControlNode_convertTag)

    __swig_getmethods__["readElement"] = lambda x: _openstudioairflow.ControlNode_readElement

    if _newclass:

        readElement = staticmethod(_openstudioairflow.ControlNode_readElement)



    def nr(self) -> "int":

        return _openstudioairflow.ControlNode_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.ControlNode_setNr(self, nr)



    def dataType(self) -> "std::string":

        return _openstudioairflow.ControlNode_dataType(self)



    def seqnr(self) -> "int":

        return _openstudioairflow.ControlNode_seqnr(self)



    def setSeqnr(self, seqnr: 'int const') -> "void":

        return _openstudioairflow.ControlNode_setSeqnr(self, seqnr)



    def flags(self) -> "unsigned int":

        return _openstudioairflow.ControlNode_flags(self)



    def setFlags(self, flags: 'unsigned int const') -> "void":

        return _openstudioairflow.ControlNode_setFlags(self, flags)



    def inreq(self) -> "int":

        return _openstudioairflow.ControlNode_inreq(self)



    def setInreq(self, inreq: 'int const') -> "void":

        return _openstudioairflow.ControlNode_setInreq(self, inreq)



    def n1(self) -> "int":

        return _openstudioairflow.ControlNode_n1(self)



    def setN1(self, n1: 'int const') -> "void":

        return _openstudioairflow.ControlNode_setN1(self, n1)



    def n2(self) -> "int":

        return _openstudioairflow.ControlNode_n2(self)



    def setN2(self, n2: 'int const') -> "void":

        return _openstudioairflow.ControlNode_setN2(self, n2)



    def name(self) -> "std::string":

        return _openstudioairflow.ControlNode_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.ControlNode_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.ControlNode_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.ControlNode_setDesc(self, desc)

ControlNode_swigregister = _openstudioairflow.ControlNode_swigregister

ControlNode_swigregister(ControlNode)



def ControlNode_convertTag(string: 'std::string &') -> "openstudio::contam::ControlNode::Type":

    return _openstudioairflow.ControlNode_convertTag(string)

ControlNode_convertTag = _openstudioairflow.ControlNode_convertTag



def ControlNode_readElement(input: 'openstudio::contam::Reader &') -> "openstudio::contam::ControlNode *":

    return _openstudioairflow.ControlNode_readElement(input)

ControlNode_readElement = _openstudioairflow.ControlNode_readElement



class CdvDat(ControlNode):

    __swig_setmethods__ = {}

    for _s in [ControlNode]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CdvDat, name, value)

    __swig_getmethods__ = {}

    for _s in [ControlNode]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CdvDat, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioairflow.delete_CdvDat

    __del__ = lambda self: None



    def __eq__(self, other: 'CdvDat') -> "bool":

        return _openstudioairflow.CdvDat___eq__(self, other)



    def __ne__(self, other: 'CdvDat') -> "bool":

        return _openstudioairflow.CdvDat___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.CdvDat_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.CdvDat_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.CdvDat_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.CdvDat_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.CdvDat_setNr(self, nr)



    def dataType(self) -> "std::string":

        return _openstudioairflow.CdvDat_dataType(self)



    def seqnr(self) -> "int":

        return _openstudioairflow.CdvDat_seqnr(self)



    def setSeqnr(self, seqnr: 'int const') -> "void":

        return _openstudioairflow.CdvDat_setSeqnr(self, seqnr)



    def flags(self) -> "unsigned int":

        return _openstudioairflow.CdvDat_flags(self)



    def setFlags(self, flags: 'unsigned int const') -> "void":

        return _openstudioairflow.CdvDat_setFlags(self, flags)



    def inreq(self) -> "int":

        return _openstudioairflow.CdvDat_inreq(self)



    def setInreq(self, inreq: 'int const') -> "void":

        return _openstudioairflow.CdvDat_setInreq(self, inreq)



    def n1(self) -> "int":

        return _openstudioairflow.CdvDat_n1(self)



    def setN1(self, n1: 'int const') -> "void":

        return _openstudioairflow.CdvDat_setN1(self, n1)



    def n2(self) -> "int":

        return _openstudioairflow.CdvDat_n2(self)



    def setN2(self, n2: 'int const') -> "void":

        return _openstudioairflow.CdvDat_setN2(self, n2)



    def name(self) -> "std::string":

        return _openstudioairflow.CdvDat_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.CdvDat_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.CdvDat_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.CdvDat_setDesc(self, desc)



    def valuename(self) -> "std::string":

        return _openstudioairflow.CdvDat_valuename(self)



    def setValuename(self, valuename: 'std::string const &') -> "void":

        return _openstudioairflow.CdvDat_setValuename(self, valuename)

CdvDat_swigregister = _openstudioairflow.CdvDat_swigregister

CdvDat_swigregister(CdvDat)



class CvfDat(CdvDat):

    __swig_setmethods__ = {}

    for _s in [CdvDat]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, CvfDat, name, value)

    __swig_getmethods__ = {}

    for _s in [CdvDat]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, CvfDat, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_CvfDat(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def dataType(self) -> "std::string":

        return _openstudioairflow.CvfDat_dataType(self)

    __swig_destroy__ = _openstudioairflow.delete_CvfDat

    __del__ = lambda self: None

CvfDat_swigregister = _openstudioairflow.CvfDat_swigregister

CvfDat_swigregister(CvfDat)



class DvfDat(CdvDat):

    __swig_setmethods__ = {}

    for _s in [CdvDat]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, DvfDat, name, value)

    __swig_getmethods__ = {}

    for _s in [CdvDat]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, DvfDat, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_DvfDat(*args)

        try:

            self.this.append(this)

        except:

            self.this = this



    def dataType(self) -> "std::string":

        return _openstudioairflow.DvfDat_dataType(self)

    __swig_destroy__ = _openstudioairflow.delete_DvfDat

    __del__ = lambda self: None

DvfDat_swigregister = _openstudioairflow.DvfDat_swigregister

DvfDat_swigregister(DvfDat)



class AirflowElement(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, AirflowElement, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, AirflowElement, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    PL_ORFC = _openstudioairflow.AirflowElement_PL_ORFC

    PL_LEAK1 = _openstudioairflow.AirflowElement_PL_LEAK1

    PL_LEAK2 = _openstudioairflow.AirflowElement_PL_LEAK2

    PL_LEAK3 = _openstudioairflow.AirflowElement_PL_LEAK3

    PL_CONN = _openstudioairflow.AirflowElement_PL_CONN

    PL_QCN = _openstudioairflow.AirflowElement_PL_QCN

    PL_FCN = _openstudioairflow.AirflowElement_PL_FCN

    PL_TEST1 = _openstudioairflow.AirflowElement_PL_TEST1

    PL_TEST2 = _openstudioairflow.AirflowElement_PL_TEST2

    PL_CRACK = _openstudioairflow.AirflowElement_PL_CRACK

    PL_STAIR = _openstudioairflow.AirflowElement_PL_STAIR

    PL_SHAFT = _openstudioairflow.AirflowElement_PL_SHAFT

    PL_BDQ = _openstudioairflow.AirflowElement_PL_BDQ

    PL_BDF = _openstudioairflow.AirflowElement_PL_BDF

    QFR_QAB = _openstudioairflow.AirflowElement_QFR_QAB

    QFR_QAF = _openstudioairflow.AirflowElement_QFR_QAF

    QFR_CRACK = _openstudioairflow.AirflowElement_QFR_CRACK

    QFR_TEST2 = _openstudioairflow.AirflowElement_QFR_TEST2

    DR_DOOR = _openstudioairflow.AirflowElement_DR_DOOR

    DR_PL2 = _openstudioairflow.AirflowElement_DR_PL2

    FN_CMF = _openstudioairflow.AirflowElement_FN_CMF

    FN_CVF = _openstudioairflow.AirflowElement_FN_CVF

    FN_FAN = _openstudioairflow.AirflowElement_FN_FAN

    CS_FSP = _openstudioairflow.AirflowElement_CS_FSP

    CS_QSP = _openstudioairflow.AirflowElement_CS_QSP

    CS_PSF = _openstudioairflow.AirflowElement_CS_PSF

    CS_PSQ = _openstudioairflow.AirflowElement_CS_PSQ

    AF_SUP = _openstudioairflow.AirflowElement_AF_SUP

    UNKNOWN = _openstudioairflow.AirflowElement_UNKNOWN

    __swig_destroy__ = _openstudioairflow.delete_AirflowElement

    __del__ = lambda self: None



    def write(self) -> "std::string":

        return _openstudioairflow.AirflowElement_write(self)

    __swig_getmethods__["convertTag"] = lambda x: _openstudioairflow.AirflowElement_convertTag

    if _newclass:

        convertTag = staticmethod(_openstudioairflow.AirflowElement_convertTag)

    __swig_getmethods__["readElement"] = lambda x: _openstudioairflow.AirflowElement_readElement

    if _newclass:

        readElement = staticmethod(_openstudioairflow.AirflowElement_readElement)



    def nr(self) -> "int":

        return _openstudioairflow.AirflowElement_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.AirflowElement_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.AirflowElement_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.AirflowElement_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.AirflowElement_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.AirflowElement_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.AirflowElement_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.AirflowElement_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.AirflowElement_setDesc(self, desc)

AirflowElement_swigregister = _openstudioairflow.AirflowElement_swigregister

AirflowElement_swigregister(AirflowElement)



def AirflowElement_convertTag(string: 'std::string') -> "openstudio::contam::AirflowElement::Type":

    return _openstudioairflow.AirflowElement_convertTag(string)

AirflowElement_convertTag = _openstudioairflow.AirflowElement_convertTag



def AirflowElement_readElement(input: 'openstudio::contam::Reader &') -> "openstudio::contam::AirflowElement *":

    return _openstudioairflow.AirflowElement_readElement(input)

AirflowElement_readElement = _openstudioairflow.AirflowElement_readElement



class PlrOrf(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrOrf, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrOrf, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrOrf(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrOrf

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrOrf') -> "bool":

        return _openstudioairflow.PlrOrf___eq__(self, other)



    def __ne__(self, other: 'PlrOrf') -> "bool":

        return _openstudioairflow.PlrOrf___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrOrf_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrOrf_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrOrf_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrOrf_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrOrf_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrOrf_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrOrf_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrOrf_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrOrf_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrOrf_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrOrf_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrOrf_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrOrf_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrOrf_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.PlrOrf_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.PlrOrf_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.PlrOrf_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.PlrOrf_setExpt(self, *args)



    def area(self) -> "double":

        return _openstudioairflow.PlrOrf_area(self)



    def setArea(self, *args) -> "bool":

        return _openstudioairflow.PlrOrf_setArea(self, *args)



    def dia(self) -> "double":

        return _openstudioairflow.PlrOrf_dia(self)



    def setDia(self, *args) -> "bool":

        return _openstudioairflow.PlrOrf_setDia(self, *args)



    def coef(self) -> "double":

        return _openstudioairflow.PlrOrf_coef(self)



    def setCoef(self, *args) -> "bool":

        return _openstudioairflow.PlrOrf_setCoef(self, *args)



    def Re(self) -> "double":

        return _openstudioairflow.PlrOrf_Re(self)



    def setRe(self, *args) -> "bool":

        return _openstudioairflow.PlrOrf_setRe(self, *args)



    def u_A(self) -> "int":

        return _openstudioairflow.PlrOrf_u_A(self)



    def setU_A(self, u_A: 'int const') -> "void":

        return _openstudioairflow.PlrOrf_setU_A(self, u_A)



    def u_D(self) -> "int":

        return _openstudioairflow.PlrOrf_u_D(self)



    def setU_D(self, u_D: 'int const') -> "void":

        return _openstudioairflow.PlrOrf_setU_D(self, u_D)

PlrOrf_swigregister = _openstudioairflow.PlrOrf_swigregister

PlrOrf_swigregister(PlrOrf)



class PlrLeak(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrLeak, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrLeak, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioairflow.delete_PlrLeak

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrLeak') -> "bool":

        return _openstudioairflow.PlrLeak___eq__(self, other)



    def __ne__(self, other: 'PlrLeak') -> "bool":

        return _openstudioairflow.PlrLeak___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrLeak_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrLeak_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrLeak_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrLeak_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrLeak_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrLeak_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrLeak_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrLeak_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrLeak_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrLeak_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrLeak_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrLeak_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrLeak_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrLeak_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.PlrLeak_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.PlrLeak_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.PlrLeak_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.PlrLeak_setExpt(self, *args)



    def coef(self) -> "double":

        return _openstudioairflow.PlrLeak_coef(self)



    def setCoef(self, *args) -> "bool":

        return _openstudioairflow.PlrLeak_setCoef(self, *args)



    def pres(self) -> "double":

        return _openstudioairflow.PlrLeak_pres(self)



    def setPres(self, *args) -> "bool":

        return _openstudioairflow.PlrLeak_setPres(self, *args)



    def area1(self) -> "double":

        return _openstudioairflow.PlrLeak_area1(self)



    def setArea1(self, *args) -> "bool":

        return _openstudioairflow.PlrLeak_setArea1(self, *args)



    def area2(self) -> "double":

        return _openstudioairflow.PlrLeak_area2(self)



    def setArea2(self, *args) -> "bool":

        return _openstudioairflow.PlrLeak_setArea2(self, *args)



    def area3(self) -> "double":

        return _openstudioairflow.PlrLeak_area3(self)



    def setArea3(self, *args) -> "bool":

        return _openstudioairflow.PlrLeak_setArea3(self, *args)



    def u_A1(self) -> "int":

        return _openstudioairflow.PlrLeak_u_A1(self)



    def setU_A1(self, u_A1: 'int const') -> "void":

        return _openstudioairflow.PlrLeak_setU_A1(self, u_A1)



    def u_A2(self) -> "int":

        return _openstudioairflow.PlrLeak_u_A2(self)



    def setU_A2(self, u_A2: 'int const') -> "void":

        return _openstudioairflow.PlrLeak_setU_A2(self, u_A2)



    def u_A3(self) -> "int":

        return _openstudioairflow.PlrLeak_u_A3(self)



    def setU_A3(self, u_A3: 'int const') -> "void":

        return _openstudioairflow.PlrLeak_setU_A3(self, u_A3)



    def u_dP(self) -> "int":

        return _openstudioairflow.PlrLeak_u_dP(self)



    def setU_dP(self, u_dP: 'int const') -> "void":

        return _openstudioairflow.PlrLeak_setU_dP(self, u_dP)

PlrLeak_swigregister = _openstudioairflow.PlrLeak_swigregister

PlrLeak_swigregister(PlrLeak)



class PlrLeak1(PlrLeak):

    __swig_setmethods__ = {}

    for _s in [PlrLeak]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrLeak1, name, value)

    __swig_getmethods__ = {}

    for _s in [PlrLeak]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrLeak1, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrLeak1(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrLeak1

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrLeak1_dataType(self)

PlrLeak1_swigregister = _openstudioairflow.PlrLeak1_swigregister

PlrLeak1_swigregister(PlrLeak1)



class PlrLeak2(PlrLeak):

    __swig_setmethods__ = {}

    for _s in [PlrLeak]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrLeak2, name, value)

    __swig_getmethods__ = {}

    for _s in [PlrLeak]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrLeak2, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrLeak2(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrLeak2

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrLeak2_dataType(self)

PlrLeak2_swigregister = _openstudioairflow.PlrLeak2_swigregister

PlrLeak2_swigregister(PlrLeak2)



class PlrLeak3(PlrLeak):

    __swig_setmethods__ = {}

    for _s in [PlrLeak]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrLeak3, name, value)

    __swig_getmethods__ = {}

    for _s in [PlrLeak]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrLeak3, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrLeak3(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrLeak3

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrLeak3_dataType(self)

PlrLeak3_swigregister = _openstudioairflow.PlrLeak3_swigregister

PlrLeak3_swigregister(PlrLeak3)



class PlrConn(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrConn, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrConn, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrConn(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrConn

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrConn') -> "bool":

        return _openstudioairflow.PlrConn___eq__(self, other)



    def __ne__(self, other: 'PlrConn') -> "bool":

        return _openstudioairflow.PlrConn___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrConn_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrConn_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrConn_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrConn_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrConn_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrConn_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrConn_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrConn_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrConn_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrConn_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrConn_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrConn_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrConn_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrConn_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.PlrConn_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.PlrConn_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.PlrConn_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.PlrConn_setExpt(self, *args)



    def area(self) -> "double":

        return _openstudioairflow.PlrConn_area(self)



    def setArea(self, *args) -> "bool":

        return _openstudioairflow.PlrConn_setArea(self, *args)



    def coef(self) -> "double":

        return _openstudioairflow.PlrConn_coef(self)



    def setCoef(self, *args) -> "bool":

        return _openstudioairflow.PlrConn_setCoef(self, *args)



    def u_A(self) -> "int":

        return _openstudioairflow.PlrConn_u_A(self)



    def setU_A(self, u_A1: 'int const') -> "void":

        return _openstudioairflow.PlrConn_setU_A(self, u_A1)

PlrConn_swigregister = _openstudioairflow.PlrConn_swigregister

PlrConn_swigregister(PlrConn)



class PlrGeneral(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrGeneral, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrGeneral, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioairflow.delete_PlrGeneral

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrGeneral') -> "bool":

        return _openstudioairflow.PlrGeneral___eq__(self, other)



    def __ne__(self, other: 'PlrGeneral') -> "bool":

        return _openstudioairflow.PlrGeneral___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrGeneral_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrGeneral_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrGeneral_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrGeneral_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrGeneral_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrGeneral_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrGeneral_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrGeneral_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrGeneral_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrGeneral_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrGeneral_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrGeneral_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrGeneral_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrGeneral_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.PlrGeneral_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.PlrGeneral_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.PlrGeneral_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.PlrGeneral_setExpt(self, *args)

PlrGeneral_swigregister = _openstudioairflow.PlrGeneral_swigregister

PlrGeneral_swigregister(PlrGeneral)



class PlrQcn(PlrGeneral):

    __swig_setmethods__ = {}

    for _s in [PlrGeneral]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrQcn, name, value)

    __swig_getmethods__ = {}

    for _s in [PlrGeneral]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrQcn, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrQcn(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrQcn

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrQcn_dataType(self)

PlrQcn_swigregister = _openstudioairflow.PlrQcn_swigregister

PlrQcn_swigregister(PlrQcn)



class PlrFcn(PlrGeneral):

    __swig_setmethods__ = {}

    for _s in [PlrGeneral]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrFcn, name, value)

    __swig_getmethods__ = {}

    for _s in [PlrGeneral]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrFcn, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrFcn(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrFcn

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrFcn_dataType(self)

PlrFcn_swigregister = _openstudioairflow.PlrFcn_swigregister

PlrFcn_swigregister(PlrFcn)



class PlrTest1(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrTest1, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrTest1, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrTest1(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrTest1

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrTest1') -> "bool":

        return _openstudioairflow.PlrTest1___eq__(self, other)



    def __ne__(self, other: 'PlrTest1') -> "bool":

        return _openstudioairflow.PlrTest1___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrTest1_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrTest1_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrTest1_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrTest1_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrTest1_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrTest1_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrTest1_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrTest1_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrTest1_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrTest1_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrTest1_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrTest1_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrTest1_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrTest1_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.PlrTest1_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.PlrTest1_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.PlrTest1_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.PlrTest1_setExpt(self, *args)



    def dP(self) -> "double":

        return _openstudioairflow.PlrTest1_dP(self)



    def setDP(self, *args) -> "bool":

        return _openstudioairflow.PlrTest1_setDP(self, *args)



    def Flow(self) -> "double":

        return _openstudioairflow.PlrTest1_Flow(self)



    def setFlow(self, *args) -> "bool":

        return _openstudioairflow.PlrTest1_setFlow(self, *args)



    def u_P(self) -> "int":

        return _openstudioairflow.PlrTest1_u_P(self)



    def setU_P(self, u_P: 'int const') -> "void":

        return _openstudioairflow.PlrTest1_setU_P(self, u_P)



    def u_F(self) -> "int":

        return _openstudioairflow.PlrTest1_u_F(self)



    def setU_F(self, u_F: 'int const') -> "void":

        return _openstudioairflow.PlrTest1_setU_F(self, u_F)

PlrTest1_swigregister = _openstudioairflow.PlrTest1_swigregister

PlrTest1_swigregister(PlrTest1)



class PlrTest2(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrTest2, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrTest2, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrTest2(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrTest2

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrTest2') -> "bool":

        return _openstudioairflow.PlrTest2___eq__(self, other)



    def __ne__(self, other: 'PlrTest2') -> "bool":

        return _openstudioairflow.PlrTest2___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrTest2_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrTest2_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrTest2_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrTest2_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrTest2_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrTest2_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrTest2_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrTest2_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrTest2_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrTest2_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrTest2_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrTest2_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrTest2_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrTest2_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.PlrTest2_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.PlrTest2_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.PlrTest2_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.PlrTest2_setExpt(self, *args)



    def dP1(self) -> "double":

        return _openstudioairflow.PlrTest2_dP1(self)



    def setDP1(self, *args) -> "bool":

        return _openstudioairflow.PlrTest2_setDP1(self, *args)



    def F1(self) -> "double":

        return _openstudioairflow.PlrTest2_F1(self)



    def setF1(self, *args) -> "bool":

        return _openstudioairflow.PlrTest2_setF1(self, *args)



    def dP2(self) -> "double":

        return _openstudioairflow.PlrTest2_dP2(self)



    def setDP2(self, *args) -> "bool":

        return _openstudioairflow.PlrTest2_setDP2(self, *args)



    def F2(self) -> "double":

        return _openstudioairflow.PlrTest2_F2(self)



    def setF2(self, *args) -> "bool":

        return _openstudioairflow.PlrTest2_setF2(self, *args)



    def u_P1(self) -> "int":

        return _openstudioairflow.PlrTest2_u_P1(self)



    def setU_P1(self, u_P: 'int const') -> "void":

        return _openstudioairflow.PlrTest2_setU_P1(self, u_P)



    def u_F1(self) -> "int":

        return _openstudioairflow.PlrTest2_u_F1(self)



    def setU_F1(self, u_F: 'int const') -> "void":

        return _openstudioairflow.PlrTest2_setU_F1(self, u_F)



    def u_P2(self) -> "int":

        return _openstudioairflow.PlrTest2_u_P2(self)



    def setU_P2(self, u_P: 'int const') -> "void":

        return _openstudioairflow.PlrTest2_setU_P2(self, u_P)



    def u_F2(self) -> "int":

        return _openstudioairflow.PlrTest2_u_F2(self)



    def setU_F2(self, u_F: 'int const') -> "void":

        return _openstudioairflow.PlrTest2_setU_F2(self, u_F)

PlrTest2_swigregister = _openstudioairflow.PlrTest2_swigregister

PlrTest2_swigregister(PlrTest2)



class PlrCrack(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrCrack, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrCrack, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrCrack(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrCrack

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrCrack') -> "bool":

        return _openstudioairflow.PlrCrack___eq__(self, other)



    def __ne__(self, other: 'PlrCrack') -> "bool":

        return _openstudioairflow.PlrCrack___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrCrack_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrCrack_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrCrack_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrCrack_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrCrack_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrCrack_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrCrack_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrCrack_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrCrack_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrCrack_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrCrack_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrCrack_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrCrack_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrCrack_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.PlrCrack_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.PlrCrack_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.PlrCrack_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.PlrCrack_setExpt(self, *args)



    def length(self) -> "double":

        return _openstudioairflow.PlrCrack_length(self)



    def setLength(self, *args) -> "bool":

        return _openstudioairflow.PlrCrack_setLength(self, *args)



    def width(self) -> "double":

        return _openstudioairflow.PlrCrack_width(self)



    def setWidth(self, *args) -> "bool":

        return _openstudioairflow.PlrCrack_setWidth(self, *args)



    def u_L(self) -> "int":

        return _openstudioairflow.PlrCrack_u_L(self)



    def setU_L(self, u_L: 'int const') -> "void":

        return _openstudioairflow.PlrCrack_setU_L(self, u_L)



    def u_W(self) -> "int":

        return _openstudioairflow.PlrCrack_u_W(self)



    def setU_W(self, u_W: 'int const') -> "void":

        return _openstudioairflow.PlrCrack_setU_W(self, u_W)

PlrCrack_swigregister = _openstudioairflow.PlrCrack_swigregister

PlrCrack_swigregister(PlrCrack)



class PlrStair(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrStair, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrStair, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrStair(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrStair

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrStair') -> "bool":

        return _openstudioairflow.PlrStair___eq__(self, other)



    def __ne__(self, other: 'PlrStair') -> "bool":

        return _openstudioairflow.PlrStair___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrStair_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrStair_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrStair_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrStair_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrStair_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrStair_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrStair_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrStair_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrStair_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrStair_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrStair_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrStair_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrStair_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrStair_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.PlrStair_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.PlrStair_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.PlrStair_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.PlrStair_setExpt(self, *args)



    def Ht(self) -> "double":

        return _openstudioairflow.PlrStair_Ht(self)



    def setHt(self, *args) -> "bool":

        return _openstudioairflow.PlrStair_setHt(self, *args)



    def area(self) -> "double":

        return _openstudioairflow.PlrStair_area(self)



    def setArea(self, *args) -> "bool":

        return _openstudioairflow.PlrStair_setArea(self, *args)



    def people(self) -> "double":

        return _openstudioairflow.PlrStair_people(self)



    def setPeople(self, *args) -> "bool":

        return _openstudioairflow.PlrStair_setPeople(self, *args)



    def tread(self) -> "int":

        return _openstudioairflow.PlrStair_tread(self)



    def setTread(self, tread: 'int const') -> "void":

        return _openstudioairflow.PlrStair_setTread(self, tread)



    def u_A(self) -> "int":

        return _openstudioairflow.PlrStair_u_A(self)



    def setU_A(self, u_A: 'int const') -> "void":

        return _openstudioairflow.PlrStair_setU_A(self, u_A)



    def u_D(self) -> "int":

        return _openstudioairflow.PlrStair_u_D(self)



    def setU_D(self, u_D: 'int const') -> "void":

        return _openstudioairflow.PlrStair_setU_D(self, u_D)

PlrStair_swigregister = _openstudioairflow.PlrStair_swigregister

PlrStair_swigregister(PlrStair)



class PlrShaft(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrShaft, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrShaft, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrShaft(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrShaft

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrShaft') -> "bool":

        return _openstudioairflow.PlrShaft___eq__(self, other)



    def __ne__(self, other: 'PlrShaft') -> "bool":

        return _openstudioairflow.PlrShaft___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrShaft_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrShaft_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrShaft_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrShaft_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrShaft_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrShaft_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrShaft_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrShaft_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrShaft_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrShaft_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrShaft_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrShaft_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrShaft_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrShaft_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.PlrShaft_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.PlrShaft_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.PlrShaft_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.PlrShaft_setExpt(self, *args)



    def Ht(self) -> "double":

        return _openstudioairflow.PlrShaft_Ht(self)



    def setHt(self, *args) -> "bool":

        return _openstudioairflow.PlrShaft_setHt(self, *args)



    def area(self) -> "double":

        return _openstudioairflow.PlrShaft_area(self)



    def setArea(self, *args) -> "bool":

        return _openstudioairflow.PlrShaft_setArea(self, *args)



    def perim(self) -> "double":

        return _openstudioairflow.PlrShaft_perim(self)



    def setPerim(self, *args) -> "bool":

        return _openstudioairflow.PlrShaft_setPerim(self, *args)



    def rough(self) -> "double":

        return _openstudioairflow.PlrShaft_rough(self)



    def setRough(self, *args) -> "bool":

        return _openstudioairflow.PlrShaft_setRough(self, *args)



    def u_A(self) -> "int":

        return _openstudioairflow.PlrShaft_u_A(self)



    def setU_A(self, u_A: 'int const') -> "void":

        return _openstudioairflow.PlrShaft_setU_A(self, u_A)



    def u_D(self) -> "int":

        return _openstudioairflow.PlrShaft_u_D(self)



    def setU_D(self, u_D: 'int const') -> "void":

        return _openstudioairflow.PlrShaft_setU_D(self, u_D)



    def u_P(self) -> "int":

        return _openstudioairflow.PlrShaft_u_P(self)



    def setU_P(self, u_P: 'int const') -> "void":

        return _openstudioairflow.PlrShaft_setU_P(self, u_P)



    def u_R(self) -> "int":

        return _openstudioairflow.PlrShaft_u_R(self)



    def setU_R(self, u_R: 'int const') -> "void":

        return _openstudioairflow.PlrShaft_setU_R(self, u_R)

PlrShaft_swigregister = _openstudioairflow.PlrShaft_swigregister

PlrShaft_swigregister(PlrShaft)



class PlrBackDamper(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrBackDamper, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrBackDamper, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioairflow.delete_PlrBackDamper

    __del__ = lambda self: None



    def __eq__(self, other: 'PlrBackDamper') -> "bool":

        return _openstudioairflow.PlrBackDamper___eq__(self, other)



    def __ne__(self, other: 'PlrBackDamper') -> "bool":

        return _openstudioairflow.PlrBackDamper___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrBackDamper_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.PlrBackDamper_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.PlrBackDamper_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.PlrBackDamper_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.PlrBackDamper_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.PlrBackDamper_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.PlrBackDamper_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrBackDamper_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.PlrBackDamper_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.PlrBackDamper_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.PlrBackDamper_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.PlrBackDamper_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.PlrBackDamper_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.PlrBackDamper_setLam(self, *args)



    def Cp(self) -> "double":

        return _openstudioairflow.PlrBackDamper_Cp(self)



    def setCp(self, *args) -> "bool":

        return _openstudioairflow.PlrBackDamper_setCp(self, *args)



    def xp(self) -> "double":

        return _openstudioairflow.PlrBackDamper_xp(self)



    def setXp(self, *args) -> "bool":

        return _openstudioairflow.PlrBackDamper_setXp(self, *args)



    def Cn(self) -> "double":

        return _openstudioairflow.PlrBackDamper_Cn(self)



    def setCn(self, *args) -> "bool":

        return _openstudioairflow.PlrBackDamper_setCn(self, *args)



    def xn(self) -> "double":

        return _openstudioairflow.PlrBackDamper_xn(self)



    def setXn(self, *args) -> "bool":

        return _openstudioairflow.PlrBackDamper_setXn(self, *args)

PlrBackDamper_swigregister = _openstudioairflow.PlrBackDamper_swigregister

PlrBackDamper_swigregister(PlrBackDamper)



class PlrBdq(PlrBackDamper):

    __swig_setmethods__ = {}

    for _s in [PlrBackDamper]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrBdq, name, value)

    __swig_getmethods__ = {}

    for _s in [PlrBackDamper]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrBdq, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrBdq(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrBdq

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrBdq_dataType(self)

PlrBdq_swigregister = _openstudioairflow.PlrBdq_swigregister

PlrBdq_swigregister(PlrBdq)



class PlrBdf(PlrBackDamper):

    __swig_setmethods__ = {}

    for _s in [PlrBackDamper]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, PlrBdf, name, value)

    __swig_getmethods__ = {}

    for _s in [PlrBackDamper]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, PlrBdf, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_PlrBdf(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_PlrBdf

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.PlrBdf_dataType(self)

PlrBdf_swigregister = _openstudioairflow.PlrBdf_swigregister

PlrBdf_swigregister(PlrBdf)



class QfrGeneral(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QfrGeneral, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QfrGeneral, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioairflow.delete_QfrGeneral

    __del__ = lambda self: None



    def __eq__(self, other: 'QfrGeneral') -> "bool":

        return _openstudioairflow.QfrGeneral___eq__(self, other)



    def __ne__(self, other: 'QfrGeneral') -> "bool":

        return _openstudioairflow.QfrGeneral___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.QfrGeneral_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.QfrGeneral_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.QfrGeneral_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.QfrGeneral_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.QfrGeneral_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.QfrGeneral_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.QfrGeneral_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.QfrGeneral_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.QfrGeneral_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.QfrGeneral_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.QfrGeneral_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.QfrGeneral_setDesc(self, desc)



    def a(self) -> "double":

        return _openstudioairflow.QfrGeneral_a(self)



    def setA(self, *args) -> "bool":

        return _openstudioairflow.QfrGeneral_setA(self, *args)



    def b(self) -> "double":

        return _openstudioairflow.QfrGeneral_b(self)



    def setB(self, *args) -> "bool":

        return _openstudioairflow.QfrGeneral_setB(self, *args)

QfrGeneral_swigregister = _openstudioairflow.QfrGeneral_swigregister

QfrGeneral_swigregister(QfrGeneral)



class QfrQab(QfrGeneral):

    __swig_setmethods__ = {}

    for _s in [QfrGeneral]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QfrQab, name, value)

    __swig_getmethods__ = {}

    for _s in [QfrGeneral]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QfrQab, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_QfrQab(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_QfrQab

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.QfrQab_dataType(self)

QfrQab_swigregister = _openstudioairflow.QfrQab_swigregister

QfrQab_swigregister(QfrQab)



class QfrFab(QfrGeneral):

    __swig_setmethods__ = {}

    for _s in [QfrGeneral]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QfrFab, name, value)

    __swig_getmethods__ = {}

    for _s in [QfrGeneral]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QfrFab, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_QfrFab(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_QfrFab

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.QfrFab_dataType(self)

QfrFab_swigregister = _openstudioairflow.QfrFab_swigregister

QfrFab_swigregister(QfrFab)



class QfrCrack(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QfrCrack, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QfrCrack, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_QfrCrack(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_QfrCrack

    __del__ = lambda self: None



    def __eq__(self, other: 'QfrCrack') -> "bool":

        return _openstudioairflow.QfrCrack___eq__(self, other)



    def __ne__(self, other: 'QfrCrack') -> "bool":

        return _openstudioairflow.QfrCrack___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.QfrCrack_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.QfrCrack_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.QfrCrack_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.QfrCrack_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.QfrCrack_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.QfrCrack_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.QfrCrack_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.QfrCrack_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.QfrCrack_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.QfrCrack_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.QfrCrack_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.QfrCrack_setDesc(self, desc)



    def a(self) -> "double":

        return _openstudioairflow.QfrCrack_a(self)



    def setA(self, *args) -> "bool":

        return _openstudioairflow.QfrCrack_setA(self, *args)



    def b(self) -> "double":

        return _openstudioairflow.QfrCrack_b(self)



    def setB(self, *args) -> "bool":

        return _openstudioairflow.QfrCrack_setB(self, *args)



    def length(self) -> "double":

        return _openstudioairflow.QfrCrack_length(self)



    def setLength(self, *args) -> "bool":

        return _openstudioairflow.QfrCrack_setLength(self, *args)



    def width(self) -> "double":

        return _openstudioairflow.QfrCrack_width(self)



    def setWidth(self, *args) -> "bool":

        return _openstudioairflow.QfrCrack_setWidth(self, *args)



    def depth(self) -> "double":

        return _openstudioairflow.QfrCrack_depth(self)



    def setDepth(self, *args) -> "bool":

        return _openstudioairflow.QfrCrack_setDepth(self, *args)



    def nB(self) -> "int":

        return _openstudioairflow.QfrCrack_nB(self)



    def setNB(self, nB: 'int const') -> "void":

        return _openstudioairflow.QfrCrack_setNB(self, nB)



    def u_L(self) -> "int":

        return _openstudioairflow.QfrCrack_u_L(self)



    def setU_L(self, u_L: 'int const') -> "void":

        return _openstudioairflow.QfrCrack_setU_L(self, u_L)



    def u_W(self) -> "int":

        return _openstudioairflow.QfrCrack_u_W(self)



    def setU_W(self, u_W: 'int const') -> "void":

        return _openstudioairflow.QfrCrack_setU_W(self, u_W)



    def u_D(self) -> "int":

        return _openstudioairflow.QfrCrack_u_D(self)



    def setU_D(self, u_D: 'int const') -> "void":

        return _openstudioairflow.QfrCrack_setU_D(self, u_D)

QfrCrack_swigregister = _openstudioairflow.QfrCrack_swigregister

QfrCrack_swigregister(QfrCrack)



class QfrTest2(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, QfrTest2, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, QfrTest2, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_QfrTest2(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_QfrTest2

    __del__ = lambda self: None



    def __eq__(self, other: 'QfrTest2') -> "bool":

        return _openstudioairflow.QfrTest2___eq__(self, other)



    def __ne__(self, other: 'QfrTest2') -> "bool":

        return _openstudioairflow.QfrTest2___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.QfrTest2_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.QfrTest2_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.QfrTest2_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.QfrTest2_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.QfrTest2_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.QfrTest2_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.QfrTest2_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.QfrTest2_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.QfrTest2_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.QfrTest2_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.QfrTest2_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.QfrTest2_setDesc(self, desc)



    def a(self) -> "double":

        return _openstudioairflow.QfrTest2_a(self)



    def setA(self, *args) -> "bool":

        return _openstudioairflow.QfrTest2_setA(self, *args)



    def b(self) -> "double":

        return _openstudioairflow.QfrTest2_b(self)



    def setB(self, *args) -> "bool":

        return _openstudioairflow.QfrTest2_setB(self, *args)



    def dP1(self) -> "double":

        return _openstudioairflow.QfrTest2_dP1(self)



    def setDP1(self, *args) -> "bool":

        return _openstudioairflow.QfrTest2_setDP1(self, *args)



    def F1(self) -> "double":

        return _openstudioairflow.QfrTest2_F1(self)



    def setF1(self, *args) -> "bool":

        return _openstudioairflow.QfrTest2_setF1(self, *args)



    def dP2(self) -> "double":

        return _openstudioairflow.QfrTest2_dP2(self)



    def setDP2(self, *args) -> "bool":

        return _openstudioairflow.QfrTest2_setDP2(self, *args)



    def F2(self) -> "double":

        return _openstudioairflow.QfrTest2_F2(self)



    def setF2(self, *args) -> "bool":

        return _openstudioairflow.QfrTest2_setF2(self, *args)



    def u_P1(self) -> "int":

        return _openstudioairflow.QfrTest2_u_P1(self)



    def setU_P1(self, u_P: 'int const') -> "void":

        return _openstudioairflow.QfrTest2_setU_P1(self, u_P)



    def u_F1(self) -> "int":

        return _openstudioairflow.QfrTest2_u_F1(self)



    def setU_F1(self, u_F: 'int const') -> "void":

        return _openstudioairflow.QfrTest2_setU_F1(self, u_F)



    def u_P2(self) -> "int":

        return _openstudioairflow.QfrTest2_u_P2(self)



    def setU_P2(self, u_P: 'int const') -> "void":

        return _openstudioairflow.QfrTest2_setU_P2(self, u_P)



    def u_F2(self) -> "int":

        return _openstudioairflow.QfrTest2_u_F2(self)



    def setU_F2(self, u_F: 'int const') -> "void":

        return _openstudioairflow.QfrTest2_setU_F2(self, u_F)

QfrTest2_swigregister = _openstudioairflow.QfrTest2_swigregister

QfrTest2_swigregister(QfrTest2)



class AfeDor(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfeDor, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfeDor, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AfeDor(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AfeDor

    __del__ = lambda self: None



    def __eq__(self, other: 'AfeDor') -> "bool":

        return _openstudioairflow.AfeDor___eq__(self, other)



    def __ne__(self, other: 'AfeDor') -> "bool":

        return _openstudioairflow.AfeDor___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeDor_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeDor_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.AfeDor_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.AfeDor_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.AfeDor_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.AfeDor_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.AfeDor_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfeDor_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.AfeDor_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.AfeDor_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.AfeDor_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.AfeDor_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.AfeDor_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.AfeDor_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.AfeDor_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.AfeDor_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.AfeDor_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.AfeDor_setExpt(self, *args)



    def dTmin(self) -> "double":

        return _openstudioairflow.AfeDor_dTmin(self)



    def setDTmin(self, *args) -> "bool":

        return _openstudioairflow.AfeDor_setDTmin(self, *args)



    def height(self) -> "double":

        return _openstudioairflow.AfeDor_height(self)



    def setHeight(self, *args) -> "bool":

        return _openstudioairflow.AfeDor_setHeight(self, *args)



    def width(self) -> "double":

        return _openstudioairflow.AfeDor_width(self)



    def setWidth(self, *args) -> "bool":

        return _openstudioairflow.AfeDor_setWidth(self, *args)



    def cd(self) -> "double":

        return _openstudioairflow.AfeDor_cd(self)



    def setCd(self, *args) -> "bool":

        return _openstudioairflow.AfeDor_setCd(self, *args)



    def u_T(self) -> "int":

        return _openstudioairflow.AfeDor_u_T(self)



    def setU_T(self, u_T: 'int const') -> "void":

        return _openstudioairflow.AfeDor_setU_T(self, u_T)



    def u_H(self) -> "int":

        return _openstudioairflow.AfeDor_u_H(self)



    def setU_H(self, u_H: 'int const') -> "void":

        return _openstudioairflow.AfeDor_setU_H(self, u_H)



    def u_W(self) -> "int":

        return _openstudioairflow.AfeDor_u_W(self)



    def setU_W(self, u_W: 'int const') -> "void":

        return _openstudioairflow.AfeDor_setU_W(self, u_W)

AfeDor_swigregister = _openstudioairflow.AfeDor_swigregister

AfeDor_swigregister(AfeDor)



class DrPl2(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, DrPl2, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, DrPl2, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_DrPl2(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_DrPl2

    __del__ = lambda self: None



    def __eq__(self, other: 'DrPl2') -> "bool":

        return _openstudioairflow.DrPl2___eq__(self, other)



    def __ne__(self, other: 'DrPl2') -> "bool":

        return _openstudioairflow.DrPl2___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.DrPl2_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.DrPl2_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.DrPl2_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.DrPl2_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.DrPl2_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.DrPl2_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.DrPl2_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.DrPl2_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.DrPl2_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.DrPl2_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.DrPl2_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.DrPl2_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.DrPl2_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.DrPl2_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.DrPl2_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.DrPl2_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.DrPl2_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.DrPl2_setExpt(self, *args)



    def dH(self) -> "double":

        return _openstudioairflow.DrPl2_dH(self)



    def setDH(self, *args) -> "bool":

        return _openstudioairflow.DrPl2_setDH(self, *args)



    def height(self) -> "double":

        return _openstudioairflow.DrPl2_height(self)



    def setHeight(self, *args) -> "bool":

        return _openstudioairflow.DrPl2_setHeight(self, *args)



    def width(self) -> "double":

        return _openstudioairflow.DrPl2_width(self)



    def setWidth(self, *args) -> "bool":

        return _openstudioairflow.DrPl2_setWidth(self, *args)



    def cd(self) -> "double":

        return _openstudioairflow.DrPl2_cd(self)



    def setCd(self, *args) -> "bool":

        return _openstudioairflow.DrPl2_setCd(self, *args)



    def u_H(self) -> "int":

        return _openstudioairflow.DrPl2_u_H(self)



    def setU_H(self, u_H: 'int const') -> "void":

        return _openstudioairflow.DrPl2_setU_H(self, u_H)



    def u_W(self) -> "int":

        return _openstudioairflow.DrPl2_u_W(self)



    def setU_W(self, u_W: 'int const') -> "void":

        return _openstudioairflow.DrPl2_setU_W(self, u_W)

DrPl2_swigregister = _openstudioairflow.DrPl2_swigregister

DrPl2_swigregister(DrPl2)



class AfeFlow(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfeFlow, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfeFlow, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioairflow.delete_AfeFlow

    __del__ = lambda self: None



    def __eq__(self, other: 'AfeFlow') -> "bool":

        return _openstudioairflow.AfeFlow___eq__(self, other)



    def __ne__(self, other: 'AfeFlow') -> "bool":

        return _openstudioairflow.AfeFlow___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeFlow_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeFlow_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.AfeFlow_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.AfeFlow_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.AfeFlow_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.AfeFlow_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.AfeFlow_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfeFlow_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.AfeFlow_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.AfeFlow_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.AfeFlow_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.AfeFlow_setDesc(self, desc)



    def Flow(self) -> "double":

        return _openstudioairflow.AfeFlow_Flow(self)



    def setFlow(self, *args) -> "bool":

        return _openstudioairflow.AfeFlow_setFlow(self, *args)



    def u_F(self) -> "int":

        return _openstudioairflow.AfeFlow_u_F(self)



    def setU_F(self, u_F: 'int const') -> "void":

        return _openstudioairflow.AfeFlow_setU_F(self, u_F)

AfeFlow_swigregister = _openstudioairflow.AfeFlow_swigregister

AfeFlow_swigregister(AfeFlow)



class AfeCmf(AfeFlow):

    __swig_setmethods__ = {}

    for _s in [AfeFlow]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfeCmf, name, value)

    __swig_getmethods__ = {}

    for _s in [AfeFlow]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfeCmf, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AfeCmf(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AfeCmf

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfeCmf_dataType(self)

AfeCmf_swigregister = _openstudioairflow.AfeCmf_swigregister

AfeCmf_swigregister(AfeCmf)



class AfeCvf(AfeFlow):

    __swig_setmethods__ = {}

    for _s in [AfeFlow]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfeCvf, name, value)

    __swig_getmethods__ = {}

    for _s in [AfeFlow]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfeCvf, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AfeCvf(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AfeCvf

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfeCvf_dataType(self)

AfeCvf_swigregister = _openstudioairflow.AfeCvf_swigregister

AfeCvf_swigregister(AfeCvf)



class AfeFan(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfeFan, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfeFan, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AfeFan(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AfeFan

    __del__ = lambda self: None



    def __eq__(self, other: 'AfeFan') -> "bool":

        return _openstudioairflow.AfeFan___eq__(self, other)



    def __ne__(self, other: 'AfeFan') -> "bool":

        return _openstudioairflow.AfeFan___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeFan_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeFan_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.AfeFan_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.AfeFan_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.AfeFan_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.AfeFan_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.AfeFan_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfeFan_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.AfeFan_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.AfeFan_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.AfeFan_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.AfeFan_setDesc(self, desc)



    def lam(self) -> "double":

        return _openstudioairflow.AfeFan_lam(self)



    def setLam(self, *args) -> "bool":

        return _openstudioairflow.AfeFan_setLam(self, *args)



    def turb(self) -> "double":

        return _openstudioairflow.AfeFan_turb(self)



    def setTurb(self, *args) -> "bool":

        return _openstudioairflow.AfeFan_setTurb(self, *args)



    def expt(self) -> "double":

        return _openstudioairflow.AfeFan_expt(self)



    def setExpt(self, *args) -> "bool":

        return _openstudioairflow.AfeFan_setExpt(self, *args)



    def rdens(self) -> "double":

        return _openstudioairflow.AfeFan_rdens(self)



    def setRdens(self, *args) -> "bool":

        return _openstudioairflow.AfeFan_setRdens(self, *args)



    def fdf(self) -> "double":

        return _openstudioairflow.AfeFan_fdf(self)



    def setFdf(self, *args) -> "bool":

        return _openstudioairflow.AfeFan_setFdf(self, *args)



    def sop(self) -> "double":

        return _openstudioairflow.AfeFan_sop(self)



    def setSop(self, *args) -> "bool":

        return _openstudioairflow.AfeFan_setSop(self, *args)



    def off(self) -> "double":

        return _openstudioairflow.AfeFan_off(self)



    def setOff(self, *args) -> "bool":

        return _openstudioairflow.AfeFan_setOff(self, *args)



    def fpc(self) -> "std::vector< double,std::allocator< double > >":

        return _openstudioairflow.AfeFan_fpc(self)



    def setFpc(self, *args) -> "bool":

        return _openstudioairflow.AfeFan_setFpc(self, *args)



    def Sarea(self) -> "double":

        return _openstudioairflow.AfeFan_Sarea(self)



    def setSarea(self, *args) -> "bool":

        return _openstudioairflow.AfeFan_setSarea(self, *args)



    def u_Sa(self) -> "int":

        return _openstudioairflow.AfeFan_u_Sa(self)



    def setU_Sa(self, u_Sa: 'int const') -> "void":

        return _openstudioairflow.AfeFan_setU_Sa(self, u_Sa)



    def data(self) -> "std::vector< openstudio::contam::FanDataPoint,std::allocator< openstudio::contam::FanDataPoint > >":

        return _openstudioairflow.AfeFan_data(self)



    def setData(self, data: 'ContamFanDataPointVector') -> "void":

        return _openstudioairflow.AfeFan_setData(self, data)

AfeFan_swigregister = _openstudioairflow.AfeFan_swigregister

AfeFan_swigregister(AfeFan)



class AfeCsf(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfeCsf, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfeCsf, name)



    def __init__(self, *args, **kwargs):

        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr

    __swig_destroy__ = _openstudioairflow.delete_AfeCsf

    __del__ = lambda self: None



    def __eq__(self, other: 'AfeCsf') -> "bool":

        return _openstudioairflow.AfeCsf___eq__(self, other)



    def __ne__(self, other: 'AfeCsf') -> "bool":

        return _openstudioairflow.AfeCsf___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeCsf_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeCsf_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.AfeCsf_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.AfeCsf_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.AfeCsf_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.AfeCsf_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.AfeCsf_setIcon(self, icon)



    def name(self) -> "std::string":

        return _openstudioairflow.AfeCsf_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.AfeCsf_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.AfeCsf_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.AfeCsf_setDesc(self, desc)



    def u_x(self) -> "int":

        return _openstudioairflow.AfeCsf_u_x(self)



    def setU_x(self, u_x: 'int const') -> "void":

        return _openstudioairflow.AfeCsf_setU_x(self, u_x)



    def u_y(self) -> "int":

        return _openstudioairflow.AfeCsf_u_y(self)



    def setU_y(self, u_y: 'int const') -> "void":

        return _openstudioairflow.AfeCsf_setU_y(self, u_y)



    def data(self) -> "std::vector< openstudio::contam::XyDataPoint,std::allocator< openstudio::contam::XyDataPoint > >":

        return _openstudioairflow.AfeCsf_data(self)



    def setData(self, data: 'ContamXyDataPointVector') -> "void":

        return _openstudioairflow.AfeCsf_setData(self, data)

AfeCsf_swigregister = _openstudioairflow.AfeCsf_swigregister

AfeCsf_swigregister(AfeCsf)



class AfeFsp(AfeCsf):

    __swig_setmethods__ = {}

    for _s in [AfeCsf]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfeFsp, name, value)

    __swig_getmethods__ = {}

    for _s in [AfeCsf]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfeFsp, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AfeFsp(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AfeFsp

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfeFsp_dataType(self)

AfeFsp_swigregister = _openstudioairflow.AfeFsp_swigregister

AfeFsp_swigregister(AfeFsp)



class AfeQsp(AfeCsf):

    __swig_setmethods__ = {}

    for _s in [AfeCsf]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfeQsp, name, value)

    __swig_getmethods__ = {}

    for _s in [AfeCsf]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfeQsp, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AfeQsp(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AfeQsp

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfeQsp_dataType(self)

AfeQsp_swigregister = _openstudioairflow.AfeQsp_swigregister

AfeQsp_swigregister(AfeQsp)



class AfePsf(AfeCsf):

    __swig_setmethods__ = {}

    for _s in [AfeCsf]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfePsf, name, value)

    __swig_getmethods__ = {}

    for _s in [AfeCsf]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfePsf, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AfePsf(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AfePsf

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfePsf_dataType(self)

AfePsf_swigregister = _openstudioairflow.AfePsf_swigregister

AfePsf_swigregister(AfePsf)



class AfePsq(AfeCsf):

    __swig_setmethods__ = {}

    for _s in [AfeCsf]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfePsq, name, value)

    __swig_getmethods__ = {}

    for _s in [AfeCsf]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfePsq, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AfePsq(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AfePsq

    __del__ = lambda self: None



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfePsq_dataType(self)

AfePsq_swigregister = _openstudioairflow.AfePsq_swigregister

AfePsq_swigregister(AfePsq)



class AfeSup(AirflowElement):

    __swig_setmethods__ = {}

    for _s in [AirflowElement]:

        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))

    __setattr__ = lambda self, name, value: _swig_setattr(self, AfeSup, name, value)

    __swig_getmethods__ = {}

    for _s in [AirflowElement]:

        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))

    __getattr__ = lambda self, name: _swig_getattr(self, AfeSup, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_AfeSup(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_AfeSup

    __del__ = lambda self: None



    def __eq__(self, other: 'AfeSup') -> "bool":

        return _openstudioairflow.AfeSup___eq__(self, other)



    def __ne__(self, other: 'AfeSup') -> "bool":

        return _openstudioairflow.AfeSup___ne__(self, other)



    def read(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeSup_read(self, input)



    def readDetails(self, input: 'openstudio::contam::Reader &') -> "void":

        return _openstudioairflow.AfeSup_readDetails(self, input)



    def write(self) -> "std::string":

        return _openstudioairflow.AfeSup_write(self)



    def nr(self) -> "int":

        return _openstudioairflow.AfeSup_nr(self)



    def setNr(self, nr: 'int const') -> "void":

        return _openstudioairflow.AfeSup_setNr(self, nr)



    def icon(self) -> "int":

        return _openstudioairflow.AfeSup_icon(self)



    def setIcon(self, icon: 'int const') -> "void":

        return _openstudioairflow.AfeSup_setIcon(self, icon)



    def dataType(self) -> "std::string":

        return _openstudioairflow.AfeSup_dataType(self)



    def name(self) -> "std::string":

        return _openstudioairflow.AfeSup_name(self)



    def setName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.AfeSup_setName(self, name)



    def desc(self) -> "std::string":

        return _openstudioairflow.AfeSup_desc(self)



    def setDesc(self, desc: 'std::string const &') -> "void":

        return _openstudioairflow.AfeSup_setDesc(self, desc)



    def sched(self) -> "int":

        return _openstudioairflow.AfeSup_sched(self)



    def setSched(self, sched: 'int const') -> "void":

        return _openstudioairflow.AfeSup_setSched(self, sched)



    def u_H(self) -> "int":

        return _openstudioairflow.AfeSup_u_H(self)



    def setU_H(self, u_H: 'int const') -> "void":

        return _openstudioairflow.AfeSup_setU_H(self, u_H)



    def subelements(self) -> "std::vector< openstudio::contam::AirflowSubelementData,std::allocator< openstudio::contam::AirflowSubelementData > >":

        return _openstudioairflow.AfeSup_subelements(self)



    def setSubelements(self, subelements: 'ContamAirflowSubelementDataVector') -> "void":

        return _openstudioairflow.AfeSup_setSubelements(self, subelements)

AfeSup_swigregister = _openstudioairflow.AfeSup_swigregister

AfeSup_swigregister(AfeSup)



class IndexModel(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexModel, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, IndexModel, name)

    __repr__ = _swig_repr



    def __init__(self, *args):

        this = _openstudioairflow.new_IndexModel(*args)

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_IndexModel

    __del__ = lambda self: None



    def __eq__(self, other: 'IndexModel') -> "bool":

        return _openstudioairflow.IndexModel___eq__(self, other)



    def __ne__(self, other: 'IndexModel') -> "bool":

        return _openstudioairflow.IndexModel___ne__(self, other)



    def programName(self) -> "std::string":

        return _openstudioairflow.IndexModel_programName(self)



    def setProgramName(self, name: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setProgramName(self, name)



    def version(self) -> "std::string":

        return _openstudioairflow.IndexModel_version(self)



    def setVersion(self, version: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setVersion(self, version)



    def echo(self) -> "int":

        return _openstudioairflow.IndexModel_echo(self)



    def setEcho(self, echo: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setEcho(self, echo)



    def desc(self) -> "std::string":

        return _openstudioairflow.IndexModel_desc(self)



    def setDesc(self, prjdesc: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setDesc(self, prjdesc)



    def skheight(self) -> "int":

        return _openstudioairflow.IndexModel_skheight(self)



    def setSkheight(self, skheight: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setSkheight(self, skheight)



    def skwidth(self) -> "int":

        return _openstudioairflow.IndexModel_skwidth(self)



    def setSkwidth(self, skwidth: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setSkwidth(self, skwidth)



    def def_units(self) -> "int":

        return _openstudioairflow.IndexModel_def_units(self)



    def setDef_units(self, def_units: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setDef_units(self, def_units)



    def def_flows(self) -> "int":

        return _openstudioairflow.IndexModel_def_flows(self)



    def setDef_flows(self, def_flows: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setDef_flows(self, def_flows)



    def def_T(self) -> "double":

        return _openstudioairflow.IndexModel_def_T(self)



    def setDef_T(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setDef_T(self, *args)



    def udefT(self) -> "int":

        return _openstudioairflow.IndexModel_udefT(self)



    def setUdefT(self, udefT: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setUdefT(self, udefT)



    def rel_N(self) -> "double":

        return _openstudioairflow.IndexModel_rel_N(self)



    def setRel_N(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setRel_N(self, *args)



    def wind_H(self) -> "double":

        return _openstudioairflow.IndexModel_wind_H(self)



    def setWind_H(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setWind_H(self, *args)



    def uwH(self) -> "int":

        return _openstudioairflow.IndexModel_uwH(self)



    def setUwH(self, uwH: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setUwH(self, uwH)



    def wind_Ao(self) -> "double":

        return _openstudioairflow.IndexModel_wind_Ao(self)



    def setWind_Ao(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setWind_Ao(self, *args)



    def wind_a(self) -> "double":

        return _openstudioairflow.IndexModel_wind_a(self)



    def setWind_a(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setWind_a(self, *args)



    def scale(self) -> "double":

        return _openstudioairflow.IndexModel_scale(self)



    def setScale(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setScale(self, *args)



    def uScale(self) -> "int":

        return _openstudioairflow.IndexModel_uScale(self)



    def setUScale(self, uScale: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setUScale(self, uScale)



    def orgRow(self) -> "int":

        return _openstudioairflow.IndexModel_orgRow(self)



    def setOrgRow(self, orgRow: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setOrgRow(self, orgRow)



    def orgCol(self) -> "int":

        return _openstudioairflow.IndexModel_orgCol(self)



    def setOrgCol(self, orgCol: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setOrgCol(self, orgCol)



    def invYaxis(self) -> "int":

        return _openstudioairflow.IndexModel_invYaxis(self)



    def setInvYaxis(self, invYaxis: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setInvYaxis(self, invYaxis)



    def showGeom(self) -> "int":

        return _openstudioairflow.IndexModel_showGeom(self)



    def setShowGeom(self, showGeom: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setShowGeom(self, showGeom)



    def ssWeather(self) -> "openstudio::contam::WeatherData":

        return _openstudioairflow.IndexModel_ssWeather(self)



    def setSsWeather(self, ssWeather: 'WeatherData') -> "void":

        return _openstudioairflow.IndexModel_setSsWeather(self, ssWeather)



    def wptWeather(self) -> "openstudio::contam::WeatherData":

        return _openstudioairflow.IndexModel_wptWeather(self)



    def setWptWeather(self, wptWeather: 'WeatherData') -> "void":

        return _openstudioairflow.IndexModel_setWptWeather(self, wptWeather)



    def WTHpath(self) -> "std::string":

        return _openstudioairflow.IndexModel_WTHpath(self)



    def setWTHpath(self, WTHpath: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setWTHpath(self, WTHpath)



    def CTMpath(self) -> "std::string":

        return _openstudioairflow.IndexModel_CTMpath(self)



    def setCTMpath(self, CTMpath: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setCTMpath(self, CTMpath)



    def CVFpath(self) -> "std::string":

        return _openstudioairflow.IndexModel_CVFpath(self)



    def setCVFpath(self, CVFpath: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setCVFpath(self, CVFpath)



    def DVFpath(self) -> "std::string":

        return _openstudioairflow.IndexModel_DVFpath(self)



    def setDVFpath(self, DVFpath: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setDVFpath(self, DVFpath)



    def WPCfile(self) -> "std::string":

        return _openstudioairflow.IndexModel_WPCfile(self)



    def setWPCfile(self, WPCfile: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setWPCfile(self, WPCfile)



    def EWCfile(self) -> "std::string":

        return _openstudioairflow.IndexModel_EWCfile(self)



    def setEWCfile(self, EWCfile: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setEWCfile(self, EWCfile)



    def WPCdesc(self) -> "std::string":

        return _openstudioairflow.IndexModel_WPCdesc(self)



    def setWPCdesc(self, WPCdesc: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setWPCdesc(self, WPCdesc)



    def X0(self) -> "double":

        return _openstudioairflow.IndexModel_X0(self)



    def setX0(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setX0(self, *args)



    def Y0(self) -> "double":

        return _openstudioairflow.IndexModel_Y0(self)



    def setY0(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setY0(self, *args)



    def Z0(self) -> "double":

        return _openstudioairflow.IndexModel_Z0(self)



    def setZ0(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setZ0(self, *args)



    def angle(self) -> "double":

        return _openstudioairflow.IndexModel_angle(self)



    def setAngle(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setAngle(self, *args)



    def u_XYZ(self) -> "int":

        return _openstudioairflow.IndexModel_u_XYZ(self)



    def setU_XYZ(self, u_XYZ: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setU_XYZ(self, u_XYZ)



    def epsPath(self) -> "double":

        return _openstudioairflow.IndexModel_epsPath(self)



    def setEpsPath(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setEpsPath(self, *args)



    def epsSpcs(self) -> "double":

        return _openstudioairflow.IndexModel_epsSpcs(self)



    def setEpsSpcs(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setEpsSpcs(self, *args)



    def tShift(self) -> "std::string":

        return _openstudioairflow.IndexModel_tShift(self)



    def setTShift(self, tShift: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setTShift(self, tShift)



    def dStart(self) -> "std::string":

        return _openstudioairflow.IndexModel_dStart(self)



    def setDStart(self, dStart: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setDStart(self, dStart)



    def dEnd(self) -> "std::string":

        return _openstudioairflow.IndexModel_dEnd(self)



    def setDEnd(self, dEnd: 'std::string const &') -> "void":

        return _openstudioairflow.IndexModel_setDEnd(self, dEnd)



    def useWPCwp(self) -> "int":

        return _openstudioairflow.IndexModel_useWPCwp(self)



    def setUseWPCwp(self, useWPCwp: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setUseWPCwp(self, useWPCwp)



    def useWPCmf(self) -> "int":

        return _openstudioairflow.IndexModel_useWPCmf(self)



    def setUseWPCmf(self, useWPCmf: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setUseWPCmf(self, useWPCmf)



    def wpctrig(self) -> "int":

        return _openstudioairflow.IndexModel_wpctrig(self)



    def setWpctrig(self, wpctrig: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setWpctrig(self, wpctrig)



    def latd(self) -> "double":

        return _openstudioairflow.IndexModel_latd(self)



    def setLatd(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setLatd(self, *args)



    def lgtd(self) -> "double":

        return _openstudioairflow.IndexModel_lgtd(self)



    def setLgtd(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setLgtd(self, *args)



    def Tznr(self) -> "double":

        return _openstudioairflow.IndexModel_Tznr(self)



    def setTznr(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setTznr(self, *args)



    def altd(self) -> "double":

        return _openstudioairflow.IndexModel_altd(self)



    def setAltd(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setAltd(self, *args)



    def Tgrnd(self) -> "double":

        return _openstudioairflow.IndexModel_Tgrnd(self)



    def setTgrnd(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_setTgrnd(self, *args)



    def utg(self) -> "int":

        return _openstudioairflow.IndexModel_utg(self)



    def setUtg(self, utg: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setUtg(self, utg)



    def u_a(self) -> "int":

        return _openstudioairflow.IndexModel_u_a(self)



    def setU_a(self, u_a: 'int const') -> "void":

        return _openstudioairflow.IndexModel_setU_a(self, u_a)



    def rc(self) -> "openstudio::contam::RunControl":

        return _openstudioairflow.IndexModel_rc(self)



    def setRc(self, rc: 'RunControl') -> "void":

        return _openstudioairflow.IndexModel_setRc(self, rc)



    def contaminants(self) -> "std::vector< int,std::allocator< int > >":

        return _openstudioairflow.IndexModel_contaminants(self)



    def species(self) -> "std::vector< openstudio::contam::Species,std::allocator< openstudio::contam::Species > >":

        return _openstudioairflow.IndexModel_species(self)



    def setSpecies(self, species: 'ContamSpeciesVector') -> "void":

        return _openstudioairflow.IndexModel_setSpecies(self, species)



    def addSpecies(self, species: 'Species') -> "void":

        return _openstudioairflow.IndexModel_addSpecies(self, species)



    def removeSpecies(self, species: 'Species') -> "bool":

        return _openstudioairflow.IndexModel_removeSpecies(self, species)



    def levels(self) -> "std::vector< openstudio::contam::Level,std::allocator< openstudio::contam::Level > >":

        return _openstudioairflow.IndexModel_levels(self)



    def setLevels(self, levels: 'ContamLevelVector') -> "void":

        return _openstudioairflow.IndexModel_setLevels(self, levels)



    def addLevel(self, level: 'Level') -> "void":

        return _openstudioairflow.IndexModel_addLevel(self, level)



    def daySchedules(self) -> "std::vector< openstudio::contam::DaySchedule,std::allocator< openstudio::contam::DaySchedule > >":

        return _openstudioairflow.IndexModel_daySchedules(self)



    def setDaySchedules(self, daySchedules: 'ContamDayScheduleVector') -> "void":

        return _openstudioairflow.IndexModel_setDaySchedules(self, daySchedules)



    def weekSchedules(self) -> "std::vector< openstudio::contam::WeekSchedule,std::allocator< openstudio::contam::WeekSchedule > >":

        return _openstudioairflow.IndexModel_weekSchedules(self)



    def setWeekSchedules(self, weekSchedules: 'ContamWeekScheduleVector') -> "void":

        return _openstudioairflow.IndexModel_setWeekSchedules(self, weekSchedules)



    def windPressureProfiles(self) -> "std::vector< openstudio::contam::WindPressureProfile,std::allocator< openstudio::contam::WindPressureProfile > >":

        return _openstudioairflow.IndexModel_windPressureProfiles(self)



    def setWindPressureProfiles(self, windPressureProfiles: 'ContamWindPressureProfileVector') -> "void":

        return _openstudioairflow.IndexModel_setWindPressureProfiles(self, windPressureProfiles)



    def getPlrTest1(self) -> "std::vector< openstudio::contam::PlrTest1,std::allocator< openstudio::contam::PlrTest1 > >":

        return _openstudioairflow.IndexModel_getPlrTest1(self)



    def getPlrTest2(self) -> "std::vector< openstudio::contam::PlrTest2,std::allocator< openstudio::contam::PlrTest2 > >":

        return _openstudioairflow.IndexModel_getPlrTest2(self)



    def getPlrLeak2(self) -> "std::vector< openstudio::contam::PlrLeak2,std::allocator< openstudio::contam::PlrLeak2 > >":

        return _openstudioairflow.IndexModel_getPlrLeak2(self)



    def addAirflowElement(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_addAirflowElement(self, *args)



    def airflowElementNrByName(self, name: 'std::string') -> "int":

        return _openstudioairflow.IndexModel_airflowElementNrByName(self, name)



    def replaceAirflowElement(self, nr: 'int', element: 'PlrTest1') -> "bool":

        return _openstudioairflow.IndexModel_replaceAirflowElement(self, nr, element)



    def getCvfDat(self) -> "std::vector< openstudio::contam::CvfDat,std::allocator< openstudio::contam::CvfDat > >":

        return _openstudioairflow.IndexModel_getCvfDat(self)



    def addControlNode(self, element: 'CvfDat', sequence: 'bool'=True) -> "bool":

        return _openstudioairflow.IndexModel_addControlNode(self, element, sequence)



    def ahs(self) -> "std::vector< openstudio::contam::Ahs,std::allocator< openstudio::contam::Ahs > >":

        return _openstudioairflow.IndexModel_ahs(self)



    def setAhs(self, ahs: 'ContamSimpleAhsVector') -> "void":

        return _openstudioairflow.IndexModel_setAhs(self, ahs)



    def addAhs(self, ahs: 'Ahs') -> "void":

        return _openstudioairflow.IndexModel_addAhs(self, ahs)



    def zones(self) -> "std::vector< openstudio::contam::Zone,std::allocator< openstudio::contam::Zone > >":

        return _openstudioairflow.IndexModel_zones(self)



    def setZones(self, zones: 'ContamZoneVector') -> "void":

        return _openstudioairflow.IndexModel_setZones(self, zones)



    def addZone(self, zone: 'Zone') -> "void":

        return _openstudioairflow.IndexModel_addZone(self, zone)



    def airflowPaths(self) -> "std::vector< openstudio::contam::AirflowPath,std::allocator< openstudio::contam::AirflowPath > >":

        return _openstudioairflow.IndexModel_airflowPaths(self)



    def setAirflowPaths(self, paths: 'ContamAirflowPathVector') -> "void":

        return _openstudioairflow.IndexModel_setAirflowPaths(self, paths)



    def addAirflowPath(self, path: 'AirflowPath') -> "void":

        return _openstudioairflow.IndexModel_addAirflowPath(self, path)



    def valid(self) -> "bool":

        return _openstudioairflow.IndexModel_valid(self)



    def read(self, *args) -> "bool":

        return _openstudioairflow.IndexModel_read(self, *args)



    def toString(self) -> "std::string":

        return _openstudioairflow.IndexModel_toString(self)



    def zoneExteriorFlowPaths(self) -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >":

        return _openstudioairflow.IndexModel_zoneExteriorFlowPaths(self)



    def zoneInfiltration(self, sim: 'openstudio::contam::SimFile *') -> "std::vector< openstudio::TimeSeries,std::allocator< openstudio::TimeSeries > >":

        return _openstudioairflow.IndexModel_zoneInfiltration(self, sim)



    def pathInfiltration(self, pathNrs: 'IntVector', sim: 'openstudio::contam::SimFile *') -> "std::vector< openstudio::TimeSeries,std::allocator< openstudio::TimeSeries > >":

        return _openstudioairflow.IndexModel_pathInfiltration(self, pathNrs, sim)

IndexModel_swigregister = _openstudioairflow.IndexModel_swigregister

IndexModel_swigregister(IndexModel)



class CvFile(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, CvFile, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, CvFile, name)

    __repr__ = _swig_repr



    def __init__(self):

        this = _openstudioairflow.new_CvFile()

        try:

            self.this.append(this)

        except:

            self.this = this



    def addTimeSeries(self, name: 'std::string', series: 'TimeSeries') -> "void":

        return _openstudioairflow.CvFile_addTimeSeries(self, name, series)



    def write(self, filepath: 'path') -> "bool":

        return _openstudioairflow.CvFile_write(self, filepath)



    def start(self) -> "openstudio::Date":

        return _openstudioairflow.CvFile_start(self)



    def setStart(self, date: 'Date') -> "void":

        return _openstudioairflow.CvFile_setStart(self, date)



    def end(self) -> "openstudio::Date":

        return _openstudioairflow.CvFile_end(self)



    def setEnd(self, date: 'Date') -> "void":

        return _openstudioairflow.CvFile_setEnd(self, date)



    def isEmpty(self) -> "bool":

        return _openstudioairflow.CvFile_isEmpty(self)



    def clear(self) -> "void":

        return _openstudioairflow.CvFile_clear(self)

    __swig_destroy__ = _openstudioairflow.delete_CvFile

    __del__ = lambda self: None

CvFile_swigregister = _openstudioairflow.CvFile_swigregister

CvFile_swigregister(CvFile)



class ContamForwardTranslator(_object):

    __swig_setmethods__ = {}

    __setattr__ = lambda self, name, value: _swig_setattr(self, ContamForwardTranslator, name, value)

    __swig_getmethods__ = {}

    __getattr__ = lambda self, name: _swig_getattr(self, ContamForwardTranslator, name)

    __repr__ = _swig_repr

    TranslationType_SurfacesOnly = _openstudioairflow.ContamForwardTranslator_TranslationType_SurfacesOnly

    TranslationType_SubSurfacesOnly = _openstudioairflow.ContamForwardTranslator_TranslationType_SubSurfacesOnly

    TranslationType_AllSurfaces = _openstudioairflow.ContamForwardTranslator_TranslationType_AllSurfaces



    def __init__(self):

        this = _openstudioairflow.new_ContamForwardTranslator()

        try:

            self.this.append(this)

        except:

            self.this = this

    __swig_destroy__ = _openstudioairflow.delete_ContamForwardTranslator

    __del__ = lambda self: None



    def translateModel(self, model: 'Model') -> "boost::optional< openstudio::contam::IndexModel >":

        return _openstudioairflow.ContamForwardTranslator_translateModel(self, model)

    __swig_getmethods__["modelToPrj"] = lambda x: _openstudioairflow.ContamForwardTranslator_modelToPrj

    if _newclass:

        modelToPrj = staticmethod(_openstudioairflow.ContamForwardTranslator_modelToPrj)



    def surfaceMap(self) -> "std::map< openstudio::Handle,int,std::less< openstudio::Handle >,std::allocator< std::pair< openstudio::Handle const,int > > >":

        return _openstudioairflow.ContamForwardTranslator_surfaceMap(self)



    def zoneMap(self) -> "std::map< openstudio::Handle,int,std::less< openstudio::Handle >,std::allocator< std::pair< openstudio::Handle const,int > > >":

        return _openstudioairflow.ContamForwardTranslator_zoneMap(self)



    def airtightnessLevel(self) -> "boost::optional< std::string >":

        return _openstudioairflow.ContamForwardTranslator_airtightnessLevel(self)



    def setAirtightnessLevel(self, level: 'std::string') -> "void":

        return _openstudioairflow.ContamForwardTranslator_setAirtightnessLevel(self, level)



    def exteriorFlowRate(self) -> "boost::optional< double >":

        return _openstudioairflow.ContamForwardTranslator_exteriorFlowRate(self)



    def exteriorExponent(self) -> "boost::optional< double >":

        return _openstudioairflow.ContamForwardTranslator_exteriorExponent(self)



    def exteriorDeltaP(self) -> "boost::optional< double >":

        return _openstudioairflow.ContamForwardTranslator_exteriorDeltaP(self)



    def setExteriorFlowRate(self, flow: 'double', n: 'double', deltaP: 'double') -> "bool":

        return _openstudioairflow.ContamForwardTranslator_setExteriorFlowRate(self, flow, n, deltaP)



    def returnSupplyRatio(self) -> "double":

        return _openstudioairflow.ContamForwardTranslator_returnSupplyRatio(self)



    def setReturnSupplyRatio(self, returnSupplyRatio: 'double') -> "void":

        return _openstudioairflow.ContamForwardTranslator_setReturnSupplyRatio(self, returnSupplyRatio)



    def ratioOverride(self) -> "bool":

        return _openstudioairflow.ContamForwardTranslator_ratioOverride(self)



    def setRatioOverride(self, ratioOverride: 'bool') -> "void":

        return _openstudioairflow.ContamForwardTranslator_setRatioOverride(self, ratioOverride)



    def translateHVAC(self) -> "bool":

        return _openstudioairflow.ContamForwardTranslator_translateHVAC(self)



    def setTranslateHVAC(self, translateHVAC: 'bool') -> "void":

        return _openstudioairflow.ContamForwardTranslator_setTranslateHVAC(self, translateHVAC)



    def startDateTime(self) -> "boost::optional< openstudio::DateTime >":

        return _openstudioairflow.ContamForwardTranslator_startDateTime(self)



    def endDateTime(self) -> "boost::optional< openstudio::DateTime >":

        return _openstudioairflow.ContamForwardTranslator_endDateTime(self)



    def writeCvFile(self, filepath: 'path') -> "bool":

        return _openstudioairflow.ContamForwardTranslator_writeCvFile(self, filepath)



    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudioairflow.ContamForwardTranslator_warnings(self)



    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":

        return _openstudioairflow.ContamForwardTranslator_errors(self)

ContamForwardTranslator_swigregister = _openstudioairflow.ContamForwardTranslator_swigregister

ContamForwardTranslator_swigregister(ContamForwardTranslator)



def ContamForwardTranslator_modelToPrj(*args) -> "bool":

    return _openstudioairflow.ContamForwardTranslator_modelToPrj(*args)

ContamForwardTranslator_modelToPrj = _openstudioairflow.ContamForwardTranslator_modelToPrj



# This file is compatible with both classic and new-style classes.





