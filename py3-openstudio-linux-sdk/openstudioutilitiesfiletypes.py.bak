# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openstudioutilitiesfiletypes', [dirname(__file__)])
        except ImportError:
            import _openstudioutilitiesfiletypes
            return _openstudioutilitiesfiletypes
        if fp is not None:
            try:
                _mod = imp.load_module('_openstudioutilitiesfiletypes', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openstudioutilitiesfiletypes = swig_import_helper()
    del swig_import_helper
else:
    import _openstudioutilitiesfiletypes
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _openstudioutilitiesfiletypes.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _openstudioutilitiesfiletypes.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioutilitiesfiletypes.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _openstudioutilitiesfiletypes.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _openstudioutilitiesfiletypes.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _openstudioutilitiesfiletypes.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioutilitiesfiletypes.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _openstudioutilitiesfiletypes.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioutilitiesfiletypes.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _openstudioutilitiesfiletypes.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _openstudioutilitiesfiletypes.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openstudioutilitiesfiletypes.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_openstudioutilitiesfiletypes.SHARED_PTR_DISOWN_swigconstant(_openstudioutilitiesfiletypes)
SHARED_PTR_DISOWN = _openstudioutilitiesfiletypes.SHARED_PTR_DISOWN
import openstudioutilitiescore
import openstudioutilitiesidf
import openstudioutilitiesidd
import openstudioutilitiesunits
import openstudioutilitiestime
import openstudioutilitiesdata
class EpwDataPointVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpwDataPointVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpwDataPointVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwDataPointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwDataPointVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::EpwDataPoint >::size_type":
        return _openstudioutilitiesfiletypes.EpwDataPointVector___len__(self)

    def pop(self) -> "std::vector< openstudio::EpwDataPoint >::value_type":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::EpwDataPoint >::difference_type', j: 'std::vector< openstudio::EpwDataPoint >::difference_type') -> "std::vector< openstudio::EpwDataPoint,std::allocator< openstudio::EpwDataPoint > > *":
        return _openstudioutilitiesfiletypes.EpwDataPointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::EpwDataPoint >::difference_type', j: 'std::vector< openstudio::EpwDataPoint >::difference_type') -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::EpwDataPoint >::value_type const &":
        return _openstudioutilitiesfiletypes.EpwDataPointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector___setitem__(self, *args)

    def append(self, x: 'EpwDataPoint') -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_empty(self)

    def size(self) -> "std::vector< openstudio::EpwDataPoint >::size_type":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_clear(self)

    def swap(self, v: 'EpwDataPointVector') -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::EpwDataPoint >::allocator_type":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::EpwDataPoint >::iterator":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_begin(self)

    def end(self) -> "std::vector< openstudio::EpwDataPoint >::iterator":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::EpwDataPoint >::reverse_iterator":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::EpwDataPoint >::reverse_iterator":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::EpwDataPoint >::iterator":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_EpwDataPointVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EpwDataPoint') -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::EpwDataPoint >::value_type const &":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_front(self)

    def back(self) -> "std::vector< openstudio::EpwDataPoint >::value_type const &":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_back(self)

    def assign(self, n: 'std::vector< openstudio::EpwDataPoint >::size_type', x: 'EpwDataPoint') -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::EpwDataPoint >::size_type') -> "void":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::EpwDataPoint >::size_type":
        return _openstudioutilitiesfiletypes.EpwDataPointVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_EpwDataPointVector
    __del__ = lambda self: None
EpwDataPointVector_swigregister = _openstudioutilitiesfiletypes.EpwDataPointVector_swigregister
EpwDataPointVector_swigregister(EpwDataPointVector)

class EpwDesignConditionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpwDesignConditionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpwDesignConditionVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::EpwDesignCondition >::size_type":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector___len__(self)

    def pop(self) -> "std::vector< openstudio::EpwDesignCondition >::value_type":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::EpwDesignCondition >::difference_type', j: 'std::vector< openstudio::EpwDesignCondition >::difference_type') -> "std::vector< openstudio::EpwDesignCondition,std::allocator< openstudio::EpwDesignCondition > > *":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::EpwDesignCondition >::difference_type', j: 'std::vector< openstudio::EpwDesignCondition >::difference_type') -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::EpwDesignCondition >::value_type const &":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector___setitem__(self, *args)

    def append(self, x: 'EpwDesignCondition') -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_empty(self)

    def size(self) -> "std::vector< openstudio::EpwDesignCondition >::size_type":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_clear(self)

    def swap(self, v: 'EpwDesignConditionVector') -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::EpwDesignCondition >::allocator_type":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::EpwDesignCondition >::iterator":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_begin(self)

    def end(self) -> "std::vector< openstudio::EpwDesignCondition >::iterator":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::EpwDesignCondition >::reverse_iterator":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::EpwDesignCondition >::reverse_iterator":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::EpwDesignCondition >::iterator":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_EpwDesignConditionVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EpwDesignCondition') -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::EpwDesignCondition >::value_type const &":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_front(self)

    def back(self) -> "std::vector< openstudio::EpwDesignCondition >::value_type const &":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_back(self)

    def assign(self, n: 'std::vector< openstudio::EpwDesignCondition >::size_type', x: 'EpwDesignCondition') -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::EpwDesignCondition >::size_type') -> "void":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::EpwDesignCondition >::size_type":
        return _openstudioutilitiesfiletypes.EpwDesignConditionVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_EpwDesignConditionVector
    __del__ = lambda self: None
EpwDesignConditionVector_swigregister = _openstudioutilitiesfiletypes.EpwDesignConditionVector_swigregister
EpwDesignConditionVector_swigregister(EpwDesignConditionVector)

class OptionalEpwDataPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEpwDataPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEpwDataPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalEpwDataPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalEpwDataPoint_reset(self)

    def __ref__(self) -> "openstudio::EpwDataPoint":
        return _openstudioutilitiesfiletypes.OptionalEpwDataPoint___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalEpwDataPoint_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalEpwDataPoint_isNull(self)

    def get(self) -> "openstudio::EpwDataPoint":
        return _openstudioutilitiesfiletypes.OptionalEpwDataPoint_get(self)

    def set(self, t: 'EpwDataPoint') -> "void":
        return _openstudioutilitiesfiletypes.OptionalEpwDataPoint_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalEpwDataPoint
    __del__ = lambda self: None
OptionalEpwDataPoint_swigregister = _openstudioutilitiesfiletypes.OptionalEpwDataPoint_swigregister
OptionalEpwDataPoint_swigregister(OptionalEpwDataPoint)

class OptionalAirState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalAirState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalAirState, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalAirState(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalAirState_reset(self)

    def __ref__(self) -> "openstudio::AirState":
        return _openstudioutilitiesfiletypes.OptionalAirState___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalAirState_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalAirState_isNull(self)

    def get(self) -> "openstudio::AirState":
        return _openstudioutilitiesfiletypes.OptionalAirState_get(self)

    def set(self, t: 'AirState') -> "void":
        return _openstudioutilitiesfiletypes.OptionalAirState_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalAirState
    __del__ = lambda self: None
OptionalAirState_swigregister = _openstudioutilitiesfiletypes.OptionalAirState_swigregister
OptionalAirState_swigregister(OptionalAirState)

class EpwFileVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpwFileVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpwFileVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.EpwFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwFileVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwFileVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::EpwFile >::size_type":
        return _openstudioutilitiesfiletypes.EpwFileVector___len__(self)

    def pop(self) -> "std::vector< openstudio::EpwFile >::value_type":
        return _openstudioutilitiesfiletypes.EpwFileVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::EpwFile >::difference_type', j: 'std::vector< openstudio::EpwFile >::difference_type') -> "std::vector< openstudio::EpwFile,std::allocator< openstudio::EpwFile > > *":
        return _openstudioutilitiesfiletypes.EpwFileVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::EpwFile >::difference_type', j: 'std::vector< openstudio::EpwFile >::difference_type') -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::EpwFile >::value_type const &":
        return _openstudioutilitiesfiletypes.EpwFileVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector___setitem__(self, *args)

    def append(self, x: 'EpwFile') -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwFileVector_empty(self)

    def size(self) -> "std::vector< openstudio::EpwFile >::size_type":
        return _openstudioutilitiesfiletypes.EpwFileVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector_clear(self)

    def swap(self, v: 'EpwFileVector') -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::EpwFile >::allocator_type":
        return _openstudioutilitiesfiletypes.EpwFileVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::EpwFile >::iterator":
        return _openstudioutilitiesfiletypes.EpwFileVector_begin(self)

    def end(self) -> "std::vector< openstudio::EpwFile >::iterator":
        return _openstudioutilitiesfiletypes.EpwFileVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::EpwFile >::reverse_iterator":
        return _openstudioutilitiesfiletypes.EpwFileVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::EpwFile >::reverse_iterator":
        return _openstudioutilitiesfiletypes.EpwFileVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::EpwFile >::iterator":
        return _openstudioutilitiesfiletypes.EpwFileVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_EpwFileVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'EpwFile') -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::EpwFile >::value_type const &":
        return _openstudioutilitiesfiletypes.EpwFileVector_front(self)

    def back(self) -> "std::vector< openstudio::EpwFile >::value_type const &":
        return _openstudioutilitiesfiletypes.EpwFileVector_back(self)

    def assign(self, n: 'std::vector< openstudio::EpwFile >::size_type', x: 'EpwFile') -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::EpwFile >::size_type', x: 'EpwFile') -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::EpwFile >::size_type') -> "void":
        return _openstudioutilitiesfiletypes.EpwFileVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::EpwFile >::size_type":
        return _openstudioutilitiesfiletypes.EpwFileVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_EpwFileVector
    __del__ = lambda self: None
EpwFileVector_swigregister = _openstudioutilitiesfiletypes.EpwFileVector_swigregister
EpwFileVector_swigregister(EpwFileVector)

class OptionalEpwFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalEpwFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalEpwFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalEpwFile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalEpwFile_reset(self)

    def __ref__(self) -> "openstudio::EpwFile":
        return _openstudioutilitiesfiletypes.OptionalEpwFile___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalEpwFile_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalEpwFile_isNull(self)

    def get(self) -> "openstudio::EpwFile":
        return _openstudioutilitiesfiletypes.OptionalEpwFile_get(self)

    def set(self, t: 'EpwFile') -> "void":
        return _openstudioutilitiesfiletypes.OptionalEpwFile_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalEpwFile
    __del__ = lambda self: None
OptionalEpwFile_swigregister = _openstudioutilitiesfiletypes.OptionalEpwFile_swigregister
OptionalEpwFile_swigregister(OptionalEpwFile)

class OptionalCustomOutputAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalCustomOutputAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalCustomOutputAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalCustomOutputAdapter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalCustomOutputAdapter_reset(self)

    def __ref__(self) -> "openstudio::CustomOutputAdapter":
        return _openstudioutilitiesfiletypes.OptionalCustomOutputAdapter___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalCustomOutputAdapter_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalCustomOutputAdapter_isNull(self)

    def get(self) -> "openstudio::CustomOutputAdapter":
        return _openstudioutilitiesfiletypes.OptionalCustomOutputAdapter_get(self)

    def set(self, t: 'CustomOutputAdapter') -> "void":
        return _openstudioutilitiesfiletypes.OptionalCustomOutputAdapter_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalCustomOutputAdapter
    __del__ = lambda self: None
OptionalCustomOutputAdapter_swigregister = _openstudioutilitiesfiletypes.OptionalCustomOutputAdapter_swigregister
OptionalCustomOutputAdapter_swigregister(OptionalCustomOutputAdapter)

class OptionalRunOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalRunOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalRunOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalRunOptions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalRunOptions_reset(self)

    def __ref__(self) -> "openstudio::RunOptions":
        return _openstudioutilitiesfiletypes.OptionalRunOptions___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalRunOptions_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalRunOptions_isNull(self)

    def get(self) -> "openstudio::RunOptions":
        return _openstudioutilitiesfiletypes.OptionalRunOptions_get(self)

    def set(self, t: 'RunOptions') -> "void":
        return _openstudioutilitiesfiletypes.OptionalRunOptions_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalRunOptions
    __del__ = lambda self: None
OptionalRunOptions_swigregister = _openstudioutilitiesfiletypes.OptionalRunOptions_swigregister
OptionalRunOptions_swigregister(OptionalRunOptions)

class OptionalStepResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalStepResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalStepResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalStepResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalStepResult_reset(self)

    def __ref__(self) -> "openstudio::StepResult":
        return _openstudioutilitiesfiletypes.OptionalStepResult___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalStepResult_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalStepResult_isNull(self)

    def get(self) -> "openstudio::StepResult":
        return _openstudioutilitiesfiletypes.OptionalStepResult_get(self)

    def set(self, t: 'StepResult') -> "void":
        return _openstudioutilitiesfiletypes.OptionalStepResult_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalStepResult
    __del__ = lambda self: None
OptionalStepResult_swigregister = _openstudioutilitiesfiletypes.OptionalStepResult_swigregister
OptionalStepResult_swigregister(OptionalStepResult)

class WorkflowStepValueVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkflowStepValueVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkflowStepValueVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::WorkflowStepValue >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector___len__(self)

    def pop(self) -> "std::vector< openstudio::WorkflowStepValue >::value_type":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::WorkflowStepValue >::difference_type', j: 'std::vector< openstudio::WorkflowStepValue >::difference_type') -> "std::vector< openstudio::WorkflowStepValue,std::allocator< openstudio::WorkflowStepValue > > *":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::WorkflowStepValue >::difference_type', j: 'std::vector< openstudio::WorkflowStepValue >::difference_type') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::WorkflowStepValue >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector___setitem__(self, *args)

    def append(self, x: 'WorkflowStepValue') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_empty(self)

    def size(self) -> "std::vector< openstudio::WorkflowStepValue >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_clear(self)

    def swap(self, v: 'WorkflowStepValueVector') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::WorkflowStepValue >::allocator_type":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::WorkflowStepValue >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_begin(self)

    def end(self) -> "std::vector< openstudio::WorkflowStepValue >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::WorkflowStepValue >::reverse_iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::WorkflowStepValue >::reverse_iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::WorkflowStepValue >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_WorkflowStepValueVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WorkflowStepValue') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::WorkflowStepValue >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_front(self)

    def back(self) -> "std::vector< openstudio::WorkflowStepValue >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_back(self)

    def assign(self, n: 'std::vector< openstudio::WorkflowStepValue >::size_type', x: 'WorkflowStepValue') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::WorkflowStepValue >::size_type', x: 'WorkflowStepValue') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::WorkflowStepValue >::size_type') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::WorkflowStepValue >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowStepValueVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_WorkflowStepValueVector
    __del__ = lambda self: None
WorkflowStepValueVector_swigregister = _openstudioutilitiesfiletypes.WorkflowStepValueVector_swigregister
WorkflowStepValueVector_swigregister(WorkflowStepValueVector)

class OptionalWorkflowStepValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWorkflowStepValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWorkflowStepValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalWorkflowStepValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepValue_reset(self)

    def __ref__(self) -> "openstudio::WorkflowStepValue":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepValue___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepValue_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepValue_isNull(self)

    def get(self) -> "openstudio::WorkflowStepValue":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepValue_get(self)

    def set(self, t: 'WorkflowStepValue') -> "void":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepValue_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalWorkflowStepValue
    __del__ = lambda self: None
OptionalWorkflowStepValue_swigregister = _openstudioutilitiesfiletypes.OptionalWorkflowStepValue_swigregister
OptionalWorkflowStepValue_swigregister(OptionalWorkflowStepValue)

class WorkflowStepResultVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkflowStepResultVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkflowStepResultVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::WorkflowStepResult >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector___len__(self)

    def pop(self) -> "std::vector< openstudio::WorkflowStepResult >::value_type":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::WorkflowStepResult >::difference_type', j: 'std::vector< openstudio::WorkflowStepResult >::difference_type') -> "std::vector< openstudio::WorkflowStepResult,std::allocator< openstudio::WorkflowStepResult > > *":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::WorkflowStepResult >::difference_type', j: 'std::vector< openstudio::WorkflowStepResult >::difference_type') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::WorkflowStepResult >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector___setitem__(self, *args)

    def append(self, x: 'WorkflowStepResult') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_empty(self)

    def size(self) -> "std::vector< openstudio::WorkflowStepResult >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_clear(self)

    def swap(self, v: 'WorkflowStepResultVector') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::WorkflowStepResult >::allocator_type":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::WorkflowStepResult >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_begin(self)

    def end(self) -> "std::vector< openstudio::WorkflowStepResult >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::WorkflowStepResult >::reverse_iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::WorkflowStepResult >::reverse_iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::WorkflowStepResult >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_WorkflowStepResultVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WorkflowStepResult') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::WorkflowStepResult >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_front(self)

    def back(self) -> "std::vector< openstudio::WorkflowStepResult >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_back(self)

    def assign(self, n: 'std::vector< openstudio::WorkflowStepResult >::size_type', x: 'WorkflowStepResult') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::WorkflowStepResult >::size_type') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::WorkflowStepResult >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowStepResultVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_WorkflowStepResultVector
    __del__ = lambda self: None
WorkflowStepResultVector_swigregister = _openstudioutilitiesfiletypes.WorkflowStepResultVector_swigregister
WorkflowStepResultVector_swigregister(WorkflowStepResultVector)

class OptionalWorkflowStepResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWorkflowStepResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWorkflowStepResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalWorkflowStepResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepResult_reset(self)

    def __ref__(self) -> "openstudio::WorkflowStepResult":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepResult___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepResult_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepResult_isNull(self)

    def get(self) -> "openstudio::WorkflowStepResult":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepResult_get(self)

    def set(self, t: 'WorkflowStepResult') -> "void":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStepResult_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalWorkflowStepResult
    __del__ = lambda self: None
OptionalWorkflowStepResult_swigregister = _openstudioutilitiesfiletypes.OptionalWorkflowStepResult_swigregister
OptionalWorkflowStepResult_swigregister(OptionalWorkflowStepResult)

class WorkflowStepVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkflowStepVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkflowStepVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::WorkflowStep >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowStepVector___len__(self)

    def pop(self) -> "std::vector< openstudio::WorkflowStep >::value_type":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::WorkflowStep >::difference_type', j: 'std::vector< openstudio::WorkflowStep >::difference_type') -> "std::vector< openstudio::WorkflowStep,std::allocator< openstudio::WorkflowStep > > *":
        return _openstudioutilitiesfiletypes.WorkflowStepVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::WorkflowStep >::difference_type', j: 'std::vector< openstudio::WorkflowStep >::difference_type') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::WorkflowStep >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowStepVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector___setitem__(self, *args)

    def append(self, x: 'WorkflowStep') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_empty(self)

    def size(self) -> "std::vector< openstudio::WorkflowStep >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_clear(self)

    def swap(self, v: 'WorkflowStepVector') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::WorkflowStep >::allocator_type":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::WorkflowStep >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_begin(self)

    def end(self) -> "std::vector< openstudio::WorkflowStep >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::WorkflowStep >::reverse_iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::WorkflowStep >::reverse_iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::WorkflowStep >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_WorkflowStepVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WorkflowStep') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::WorkflowStep >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_front(self)

    def back(self) -> "std::vector< openstudio::WorkflowStep >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_back(self)

    def assign(self, n: 'std::vector< openstudio::WorkflowStep >::size_type', x: 'WorkflowStep') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::WorkflowStep >::size_type', x: 'WorkflowStep') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::WorkflowStep >::size_type') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::WorkflowStep >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowStepVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_WorkflowStepVector
    __del__ = lambda self: None
WorkflowStepVector_swigregister = _openstudioutilitiesfiletypes.WorkflowStepVector_swigregister
WorkflowStepVector_swigregister(WorkflowStepVector)

class OptionalWorkflowStep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWorkflowStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWorkflowStep, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalWorkflowStep(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStep_reset(self)

    def __ref__(self) -> "openstudio::WorkflowStep":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStep___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStep_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStep_isNull(self)

    def get(self) -> "openstudio::WorkflowStep":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStep_get(self)

    def set(self, t: 'WorkflowStep') -> "void":
        return _openstudioutilitiesfiletypes.OptionalWorkflowStep_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalWorkflowStep
    __del__ = lambda self: None
OptionalWorkflowStep_swigregister = _openstudioutilitiesfiletypes.OptionalWorkflowStep_swigregister
OptionalWorkflowStep_swigregister(OptionalWorkflowStep)

class MeasureStepVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasureStepVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeasureStepVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.MeasureStepVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesfiletypes.MeasureStepVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesfiletypes.MeasureStepVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::MeasureStep >::size_type":
        return _openstudioutilitiesfiletypes.MeasureStepVector___len__(self)

    def pop(self) -> "std::vector< openstudio::MeasureStep >::value_type":
        return _openstudioutilitiesfiletypes.MeasureStepVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::MeasureStep >::difference_type', j: 'std::vector< openstudio::MeasureStep >::difference_type') -> "std::vector< openstudio::MeasureStep,std::allocator< openstudio::MeasureStep > > *":
        return _openstudioutilitiesfiletypes.MeasureStepVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::MeasureStep >::difference_type', j: 'std::vector< openstudio::MeasureStep >::difference_type') -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::MeasureStep >::value_type const &":
        return _openstudioutilitiesfiletypes.MeasureStepVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector___setitem__(self, *args)

    def append(self, x: 'MeasureStep') -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesfiletypes.MeasureStepVector_empty(self)

    def size(self) -> "std::vector< openstudio::MeasureStep >::size_type":
        return _openstudioutilitiesfiletypes.MeasureStepVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector_clear(self)

    def swap(self, v: 'MeasureStepVector') -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::MeasureStep >::allocator_type":
        return _openstudioutilitiesfiletypes.MeasureStepVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::MeasureStep >::iterator":
        return _openstudioutilitiesfiletypes.MeasureStepVector_begin(self)

    def end(self) -> "std::vector< openstudio::MeasureStep >::iterator":
        return _openstudioutilitiesfiletypes.MeasureStepVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::MeasureStep >::reverse_iterator":
        return _openstudioutilitiesfiletypes.MeasureStepVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::MeasureStep >::reverse_iterator":
        return _openstudioutilitiesfiletypes.MeasureStepVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::MeasureStep >::iterator":
        return _openstudioutilitiesfiletypes.MeasureStepVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_MeasureStepVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'MeasureStep') -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::MeasureStep >::value_type const &":
        return _openstudioutilitiesfiletypes.MeasureStepVector_front(self)

    def back(self) -> "std::vector< openstudio::MeasureStep >::value_type const &":
        return _openstudioutilitiesfiletypes.MeasureStepVector_back(self)

    def assign(self, n: 'std::vector< openstudio::MeasureStep >::size_type', x: 'MeasureStep') -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector_assign(self, n, x)

    def resize(self, new_size: 'std::vector< openstudio::MeasureStep >::size_type', x: 'MeasureStep') -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector_resize(self, new_size, x)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::MeasureStep >::size_type') -> "void":
        return _openstudioutilitiesfiletypes.MeasureStepVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::MeasureStep >::size_type":
        return _openstudioutilitiesfiletypes.MeasureStepVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_MeasureStepVector
    __del__ = lambda self: None
MeasureStepVector_swigregister = _openstudioutilitiesfiletypes.MeasureStepVector_swigregister
MeasureStepVector_swigregister(MeasureStepVector)

class OptionalMeasureStep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalMeasureStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalMeasureStep, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalMeasureStep(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalMeasureStep_reset(self)

    def __ref__(self) -> "openstudio::MeasureStep":
        return _openstudioutilitiesfiletypes.OptionalMeasureStep___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalMeasureStep_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalMeasureStep_isNull(self)

    def get(self) -> "openstudio::MeasureStep":
        return _openstudioutilitiesfiletypes.OptionalMeasureStep_get(self)

    def set(self, t: 'MeasureStep') -> "void":
        return _openstudioutilitiesfiletypes.OptionalMeasureStep_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalMeasureStep
    __del__ = lambda self: None
OptionalMeasureStep_swigregister = _openstudioutilitiesfiletypes.OptionalMeasureStep_swigregister
OptionalMeasureStep_swigregister(OptionalMeasureStep)

class WorkflowJSONVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkflowJSONVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkflowJSONVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector___bool__(self)

    def __len__(self) -> "std::vector< openstudio::WorkflowJSON >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector___len__(self)

    def pop(self) -> "std::vector< openstudio::WorkflowJSON >::value_type":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_pop(self)

    def __getslice__(self, i: 'std::vector< openstudio::WorkflowJSON >::difference_type', j: 'std::vector< openstudio::WorkflowJSON >::difference_type') -> "std::vector< openstudio::WorkflowJSON,std::allocator< openstudio::WorkflowJSON > > *":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< openstudio::WorkflowJSON >::difference_type', j: 'std::vector< openstudio::WorkflowJSON >::difference_type') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< openstudio::WorkflowJSON >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector___setitem__(self, *args)

    def append(self, x: 'WorkflowJSON') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_append(self, x)

    def empty(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_empty(self)

    def size(self) -> "std::vector< openstudio::WorkflowJSON >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_size(self)

    def clear(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_clear(self)

    def swap(self, v: 'WorkflowJSONVector') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_swap(self, v)

    def get_allocator(self) -> "std::vector< openstudio::WorkflowJSON >::allocator_type":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_get_allocator(self)

    def begin(self) -> "std::vector< openstudio::WorkflowJSON >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_begin(self)

    def end(self) -> "std::vector< openstudio::WorkflowJSON >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_end(self)

    def rbegin(self) -> "std::vector< openstudio::WorkflowJSON >::reverse_iterator":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_rbegin(self)

    def rend(self) -> "std::vector< openstudio::WorkflowJSON >::reverse_iterator":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_rend(self)

    def pop_back(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_pop_back(self)

    def erase(self, *args) -> "std::vector< openstudio::WorkflowJSON >::iterator":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_erase(self, *args)

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_WorkflowJSONVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x: 'WorkflowJSON') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_push_back(self, x)

    def front(self) -> "std::vector< openstudio::WorkflowJSON >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_front(self)

    def back(self) -> "std::vector< openstudio::WorkflowJSON >::value_type const &":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_back(self)

    def assign(self, n: 'std::vector< openstudio::WorkflowJSON >::size_type', x: 'WorkflowJSON') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_insert(self, *args)

    def reserve(self, n: 'std::vector< openstudio::WorkflowJSON >::size_type') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_reserve(self, n)

    def capacity(self) -> "std::vector< openstudio::WorkflowJSON >::size_type":
        return _openstudioutilitiesfiletypes.WorkflowJSONVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_WorkflowJSONVector
    __del__ = lambda self: None
WorkflowJSONVector_swigregister = _openstudioutilitiesfiletypes.WorkflowJSONVector_swigregister
WorkflowJSONVector_swigregister(WorkflowJSONVector)

class OptionalWorkflowJSON(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalWorkflowJSON, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalWorkflowJSON, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_OptionalWorkflowJSON(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.OptionalWorkflowJSON_reset(self)

    def __ref__(self) -> "openstudio::WorkflowJSON":
        return _openstudioutilitiesfiletypes.OptionalWorkflowJSON___ref__(self)

    def is_initialized(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalWorkflowJSON_is_initialized(self)

    def isNull(self) -> "bool":
        return _openstudioutilitiesfiletypes.OptionalWorkflowJSON_isNull(self)

    def get(self) -> "openstudio::WorkflowJSON":
        return _openstudioutilitiesfiletypes.OptionalWorkflowJSON_get(self)

    def set(self, t: 'WorkflowJSON') -> "void":
        return _openstudioutilitiesfiletypes.OptionalWorkflowJSON_set(self, t)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_OptionalWorkflowJSON
    __del__ = lambda self: None
OptionalWorkflowJSON_swigregister = _openstudioutilitiesfiletypes.OptionalWorkflowJSON_swigregister
OptionalWorkflowJSON_swigregister(OptionalWorkflowJSON)

class AirState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AirState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AirState, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudioutilitiesfiletypes.new_AirState()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["fromDryBulbDewPointPressure"] = lambda x: _openstudioutilitiesfiletypes.AirState_fromDryBulbDewPointPressure
    if _newclass:
        fromDryBulbDewPointPressure = staticmethod(_openstudioutilitiesfiletypes.AirState_fromDryBulbDewPointPressure)
    __swig_getmethods__["fromDryBulbRelativeHumidityPressure"] = lambda x: _openstudioutilitiesfiletypes.AirState_fromDryBulbRelativeHumidityPressure
    if _newclass:
        fromDryBulbRelativeHumidityPressure = staticmethod(_openstudioutilitiesfiletypes.AirState_fromDryBulbRelativeHumidityPressure)

    def drybulb(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_drybulb(self)

    def dewpoint(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_dewpoint(self)

    def wetbulb(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_wetbulb(self)

    def relativeHumidity(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_relativeHumidity(self)

    def pressure(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_pressure(self)

    def enthalpy(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_enthalpy(self)

    def saturationPressure(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_saturationPressure(self)

    def density(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_density(self)

    def specificVolume(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_specificVolume(self)

    def humidityRatio(self) -> "double":
        return _openstudioutilitiesfiletypes.AirState_humidityRatio(self)
    __swig_getmethods__["R"] = lambda x: _openstudioutilitiesfiletypes.AirState_R
    if _newclass:
        R = staticmethod(_openstudioutilitiesfiletypes.AirState_R)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_AirState
    __del__ = lambda self: None
AirState_swigregister = _openstudioutilitiesfiletypes.AirState_swigregister
AirState_swigregister(AirState)

def AirState_fromDryBulbDewPointPressure(drybulb: 'double', dewpoint: 'double', pressure: 'double') -> "boost::optional< openstudio::AirState >":
    return _openstudioutilitiesfiletypes.AirState_fromDryBulbDewPointPressure(drybulb, dewpoint, pressure)
AirState_fromDryBulbDewPointPressure = _openstudioutilitiesfiletypes.AirState_fromDryBulbDewPointPressure

def AirState_fromDryBulbRelativeHumidityPressure(drybulb: 'double', RH: 'double', pressure: 'double') -> "boost::optional< openstudio::AirState >":
    return _openstudioutilitiesfiletypes.AirState_fromDryBulbRelativeHumidityPressure(drybulb, RH, pressure)
AirState_fromDryBulbRelativeHumidityPressure = _openstudioutilitiesfiletypes.AirState_fromDryBulbRelativeHumidityPressure

def AirState_R() -> "double":
    return _openstudioutilitiesfiletypes.AirState_R()
AirState_R = _openstudioutilitiesfiletypes.AirState_R

class EpwDataField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpwDataField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpwDataField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_EpwDataField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueName(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwDataField_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataField_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwDataField_valueDescription(self)

    def __eq__(self, other: 'EpwDataField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDataField___eq__(self, other)

    def __ne__(self, other: 'EpwDataField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDataField___ne__(self, other)

    def __gt__(self, other: 'EpwDataField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDataField___gt__(self, other)

    def __ge__(self, other: 'EpwDataField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDataField___ge__(self, other)

    def __lt__(self, other: 'EpwDataField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDataField___lt__(self, other)

    def __le__(self, other: 'EpwDataField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDataField___le__(self, other)
    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesfiletypes.EpwDataField_enumName
    if _newclass:
        enumName = staticmethod(_openstudioutilitiesfiletypes.EpwDataField_enumName)
    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesfiletypes.EpwDataField_getValues
    if _newclass:
        getValues = staticmethod(_openstudioutilitiesfiletypes.EpwDataField_getValues)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_EpwDataField
    __del__ = lambda self: None
EpwDataField_swigregister = _openstudioutilitiesfiletypes.EpwDataField_swigregister
EpwDataField_swigregister(EpwDataField)

def EpwDataField_enumName() -> "std::string":
    return _openstudioutilitiesfiletypes.EpwDataField_enumName()
EpwDataField_enumName = _openstudioutilitiesfiletypes.EpwDataField_enumName

def EpwDataField_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiesfiletypes.EpwDataField_getValues()
EpwDataField_getValues = _openstudioutilitiesfiletypes.EpwDataField_getValues

class EpwComputedField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpwComputedField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpwComputedField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_EpwComputedField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueName(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwComputedField_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwComputedField_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwComputedField_valueDescription(self)

    def __eq__(self, other: 'EpwComputedField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwComputedField___eq__(self, other)

    def __ne__(self, other: 'EpwComputedField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwComputedField___ne__(self, other)

    def __gt__(self, other: 'EpwComputedField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwComputedField___gt__(self, other)

    def __ge__(self, other: 'EpwComputedField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwComputedField___ge__(self, other)

    def __lt__(self, other: 'EpwComputedField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwComputedField___lt__(self, other)

    def __le__(self, other: 'EpwComputedField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwComputedField___le__(self, other)
    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesfiletypes.EpwComputedField_enumName
    if _newclass:
        enumName = staticmethod(_openstudioutilitiesfiletypes.EpwComputedField_enumName)
    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesfiletypes.EpwComputedField_getValues
    if _newclass:
        getValues = staticmethod(_openstudioutilitiesfiletypes.EpwComputedField_getValues)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_EpwComputedField
    __del__ = lambda self: None
EpwComputedField_swigregister = _openstudioutilitiesfiletypes.EpwComputedField_swigregister
EpwComputedField_swigregister(EpwComputedField)

def EpwComputedField_enumName() -> "std::string":
    return _openstudioutilitiesfiletypes.EpwComputedField_enumName()
EpwComputedField_enumName = _openstudioutilitiesfiletypes.EpwComputedField_enumName

def EpwComputedField_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiesfiletypes.EpwComputedField_getValues()
EpwComputedField_getValues = _openstudioutilitiesfiletypes.EpwComputedField_getValues

class EpwDesignField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpwDesignField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpwDesignField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_EpwDesignField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueName(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwDesignField_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDesignField_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwDesignField_valueDescription(self)

    def __eq__(self, other: 'EpwDesignField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDesignField___eq__(self, other)

    def __ne__(self, other: 'EpwDesignField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDesignField___ne__(self, other)

    def __gt__(self, other: 'EpwDesignField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDesignField___gt__(self, other)

    def __ge__(self, other: 'EpwDesignField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDesignField___ge__(self, other)

    def __lt__(self, other: 'EpwDesignField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDesignField___lt__(self, other)

    def __le__(self, other: 'EpwDesignField') -> "bool":
        return _openstudioutilitiesfiletypes.EpwDesignField___le__(self, other)
    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesfiletypes.EpwDesignField_enumName
    if _newclass:
        enumName = staticmethod(_openstudioutilitiesfiletypes.EpwDesignField_enumName)
    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesfiletypes.EpwDesignField_getValues
    if _newclass:
        getValues = staticmethod(_openstudioutilitiesfiletypes.EpwDesignField_getValues)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_EpwDesignField
    __del__ = lambda self: None
EpwDesignField_swigregister = _openstudioutilitiesfiletypes.EpwDesignField_swigregister
EpwDesignField_swigregister(EpwDesignField)

def EpwDesignField_enumName() -> "std::string":
    return _openstudioutilitiesfiletypes.EpwDesignField_enumName()
EpwDesignField_enumName = _openstudioutilitiesfiletypes.EpwDesignField_enumName

def EpwDesignField_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiesfiletypes.EpwDesignField_getValues()
EpwDesignField_getValues = _openstudioutilitiesfiletypes.EpwDesignField_getValues

class EpwDataPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpwDataPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpwDataPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_EpwDataPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["getUnitsByName"] = lambda x: _openstudioutilitiesfiletypes.EpwDataPoint_getUnitsByName
    if _newclass:
        getUnitsByName = staticmethod(_openstudioutilitiesfiletypes.EpwDataPoint_getUnitsByName)
    __swig_getmethods__["getUnits"] = lambda x: _openstudioutilitiesfiletypes.EpwDataPoint_getUnits
    if _newclass:
        getUnits = staticmethod(_openstudioutilitiesfiletypes.EpwDataPoint_getUnits)

    def getFieldByName(self, name: 'std::string const &') -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_getFieldByName(self, name)

    def getField(self, id: 'EpwDataField') -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_getField(self, id)

    def airState(self) -> "boost::optional< openstudio::AirState >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_airState(self)
    __swig_getmethods__["fromEpwString"] = lambda x: _openstudioutilitiesfiletypes.EpwDataPoint_fromEpwString
    if _newclass:
        fromEpwString = staticmethod(_openstudioutilitiesfiletypes.EpwDataPoint_fromEpwString)
    __swig_getmethods__["fromEpwStrings"] = lambda x: _openstudioutilitiesfiletypes.EpwDataPoint_fromEpwStrings
    if _newclass:
        fromEpwStrings = staticmethod(_openstudioutilitiesfiletypes.EpwDataPoint_fromEpwStrings)

    def toEpwStrings(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_toEpwStrings(self)

    def toWthString(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_toWthString(self)

    def date(self) -> "openstudio::Date":
        return _openstudioutilitiesfiletypes.EpwDataPoint_date(self)

    def time(self) -> "openstudio::Time":
        return _openstudioutilitiesfiletypes.EpwDataPoint_time(self)

    def dateTime(self) -> "openstudio::DateTime":
        return _openstudioutilitiesfiletypes.EpwDataPoint_dateTime(self)

    def year(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataPoint_year(self)

    def month(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataPoint_month(self)

    def day(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataPoint_day(self)

    def hour(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataPoint_hour(self)

    def minute(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataPoint_minute(self)

    def dataSourceandUncertaintyFlags(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwDataPoint_dataSourceandUncertaintyFlags(self)

    def dryBulbTemperature(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_dryBulbTemperature(self)

    def dewPointTemperature(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_dewPointTemperature(self)

    def relativeHumidity(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_relativeHumidity(self)

    def atmosphericStationPressure(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_atmosphericStationPressure(self)

    def extraterrestrialHorizontalRadiation(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_extraterrestrialHorizontalRadiation(self)

    def extraterrestrialDirectNormalRadiation(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_extraterrestrialDirectNormalRadiation(self)

    def horizontalInfraredRadiationIntensity(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_horizontalInfraredRadiationIntensity(self)

    def globalHorizontalRadiation(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_globalHorizontalRadiation(self)

    def directNormalRadiation(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_directNormalRadiation(self)

    def diffuseHorizontalRadiation(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_diffuseHorizontalRadiation(self)

    def globalHorizontalIlluminance(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_globalHorizontalIlluminance(self)

    def directNormalIlluminance(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_directNormalIlluminance(self)

    def diffuseHorizontalIlluminance(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_diffuseHorizontalIlluminance(self)

    def zenithLuminance(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_zenithLuminance(self)

    def windDirection(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_windDirection(self)

    def windSpeed(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_windSpeed(self)

    def totalSkyCover(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataPoint_totalSkyCover(self)

    def opaqueSkyCover(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataPoint_opaqueSkyCover(self)

    def visibility(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_visibility(self)

    def ceilingHeight(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_ceilingHeight(self)

    def presentWeatherObservation(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataPoint_presentWeatherObservation(self)

    def presentWeatherCodes(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDataPoint_presentWeatherCodes(self)

    def precipitableWater(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_precipitableWater(self)

    def aerosolOpticalDepth(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_aerosolOpticalDepth(self)

    def snowDepth(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_snowDepth(self)

    def daysSinceLastSnowfall(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_daysSinceLastSnowfall(self)

    def albedo(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_albedo(self)

    def liquidPrecipitationDepth(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_liquidPrecipitationDepth(self)

    def liquidPrecipitationQuantity(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_liquidPrecipitationQuantity(self)

    def saturationPressure(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_saturationPressure(self)

    def enthalpy(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_enthalpy(self)

    def humidityRatio(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_humidityRatio(self)

    def density(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_density(self)

    def specificVolume(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_specificVolume(self)

    def wetbulb(self) -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDataPoint_wetbulb(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_EpwDataPoint
    __del__ = lambda self: None
EpwDataPoint_swigregister = _openstudioutilitiesfiletypes.EpwDataPoint_swigregister
EpwDataPoint_swigregister(EpwDataPoint)

def EpwDataPoint_getUnitsByName(name: 'std::string const &') -> "boost::optional< std::string >":
    return _openstudioutilitiesfiletypes.EpwDataPoint_getUnitsByName(name)
EpwDataPoint_getUnitsByName = _openstudioutilitiesfiletypes.EpwDataPoint_getUnitsByName

def EpwDataPoint_getUnits(*args) -> "std::string":
    return _openstudioutilitiesfiletypes.EpwDataPoint_getUnits(*args)
EpwDataPoint_getUnits = _openstudioutilitiesfiletypes.EpwDataPoint_getUnits

def EpwDataPoint_fromEpwString(line: 'std::string const &') -> "boost::optional< openstudio::EpwDataPoint >":
    return _openstudioutilitiesfiletypes.EpwDataPoint_fromEpwString(line)
EpwDataPoint_fromEpwString = _openstudioutilitiesfiletypes.EpwDataPoint_fromEpwString

def EpwDataPoint_fromEpwStrings(*args) -> "boost::optional< openstudio::EpwDataPoint >":
    return _openstudioutilitiesfiletypes.EpwDataPoint_fromEpwStrings(*args)
EpwDataPoint_fromEpwStrings = _openstudioutilitiesfiletypes.EpwDataPoint_fromEpwStrings

class EpwDesignCondition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpwDesignCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpwDesignCondition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_EpwDesignCondition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["getUnitsByName"] = lambda x: _openstudioutilitiesfiletypes.EpwDesignCondition_getUnitsByName
    if _newclass:
        getUnitsByName = staticmethod(_openstudioutilitiesfiletypes.EpwDesignCondition_getUnitsByName)
    __swig_getmethods__["getUnits"] = lambda x: _openstudioutilitiesfiletypes.EpwDesignCondition_getUnits
    if _newclass:
        getUnits = staticmethod(_openstudioutilitiesfiletypes.EpwDesignCondition_getUnits)

    def getFieldByName(self, name: 'std::string const &') -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_getFieldByName(self, name)

    def getField(self, id: 'EpwDesignField') -> "boost::optional< double >":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_getField(self, id)
    __swig_getmethods__["fromDesignConditionsString"] = lambda x: _openstudioutilitiesfiletypes.EpwDesignCondition_fromDesignConditionsString
    if _newclass:
        fromDesignConditionsString = staticmethod(_openstudioutilitiesfiletypes.EpwDesignCondition_fromDesignConditionsString)
    __swig_getmethods__["fromDesignConditionsStrings"] = lambda x: _openstudioutilitiesfiletypes.EpwDesignCondition_fromDesignConditionsStrings
    if _newclass:
        fromDesignConditionsStrings = staticmethod(_openstudioutilitiesfiletypes.EpwDesignCondition_fromDesignConditionsStrings)

    def titleOfDesignCondition(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_titleOfDesignCondition(self)

    def heatingColdestMonth(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingColdestMonth(self)

    def heatingDryBulb99pt6(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingDryBulb99pt6(self)

    def heatingDryBulb99(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingDryBulb99(self)

    def heatingHumidificationDewPoint99pt6(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingHumidificationDewPoint99pt6(self)

    def heatingHumidificationHumidityRatio99pt6(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingHumidificationHumidityRatio99pt6(self)

    def heatingHumidificationMeanCoincidentDryBulb99pt6(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingHumidificationMeanCoincidentDryBulb99pt6(self)

    def heatingHumidificationDewPoint99(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingHumidificationDewPoint99(self)

    def heatingHumidificationHumidityRatio99(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingHumidificationHumidityRatio99(self)

    def heatingHumidificationMeanCoincidentDryBulb99(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingHumidificationMeanCoincidentDryBulb99(self)

    def heatingColdestMonthWindSpeed0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingColdestMonthWindSpeed0pt4(self)

    def heatingColdestMonthMeanCoincidentDryBulb0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingColdestMonthMeanCoincidentDryBulb0pt4(self)

    def heatingColdestMonthWindSpeed1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingColdestMonthWindSpeed1(self)

    def heatingColdestMonthMeanCoincidentDryBulb1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingColdestMonthMeanCoincidentDryBulb1(self)

    def heatingMeanCoincidentWindSpeed99pt6(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingMeanCoincidentWindSpeed99pt6(self)

    def heatingPrevailingCoincidentWindDirection99pt6(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_heatingPrevailingCoincidentWindDirection99pt6(self)

    def coolingHottestMonth(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingHottestMonth(self)

    def coolingDryBulbRange(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDryBulbRange(self)

    def coolingDryBulb0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDryBulb0pt4(self)

    def coolingMeanCoincidentWetBulb0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingMeanCoincidentWetBulb0pt4(self)

    def coolingDryBulb1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDryBulb1(self)

    def coolingMeanCoincidentWetBulb1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingMeanCoincidentWetBulb1(self)

    def coolingDryBulb2(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDryBulb2(self)

    def coolingMeanCoincidentWetBulb2(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingMeanCoincidentWetBulb2(self)

    def coolingEvaporationWetBulb0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEvaporationWetBulb0pt4(self)

    def coolingEvaporationMeanCoincidentDryBulb0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEvaporationMeanCoincidentDryBulb0pt4(self)

    def coolingEvaporationWetBulb1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEvaporationWetBulb1(self)

    def coolingEvaporationMeanCoincidentDryBulb1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEvaporationMeanCoincidentDryBulb1(self)

    def coolingEvaporationWetBulb2(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEvaporationWetBulb2(self)

    def coolingEvaporationMeanCoincidentDryBulb2(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEvaporationMeanCoincidentDryBulb2(self)

    def coolingMeanCoincidentWindSpeed0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingMeanCoincidentWindSpeed0pt4(self)

    def coolingPrevailingCoincidentWindDirection0pt4(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingPrevailingCoincidentWindDirection0pt4(self)

    def coolingDehumidificationDewPoint0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDehumidificationDewPoint0pt4(self)

    def coolingDehumidificationHumidityRatio0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDehumidificationHumidityRatio0pt4(self)

    def coolingDehumidificationMeanCoincidentDryBulb0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDehumidificationMeanCoincidentDryBulb0pt4(self)

    def coolingDehumidificationDewPoint1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDehumidificationDewPoint1(self)

    def coolingDehumidificationHumidityRatio1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDehumidificationHumidityRatio1(self)

    def coolingDehumidificationMeanCoincidentDryBulb1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDehumidificationMeanCoincidentDryBulb1(self)

    def coolingDehumidificationDewPoint2(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDehumidificationDewPoint2(self)

    def coolingDehumidificationHumidityRatio2(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDehumidificationHumidityRatio2(self)

    def coolingDehumidificationMeanCoincidentDryBulb2(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingDehumidificationMeanCoincidentDryBulb2(self)

    def coolingEnthalpy0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEnthalpy0pt4(self)

    def coolingEnthalpyMeanCoincidentDryBulb0pt4(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEnthalpyMeanCoincidentDryBulb0pt4(self)

    def coolingEnthalpy1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEnthalpy1(self)

    def coolingEnthalpyMeanCoincidentDryBulb1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEnthalpyMeanCoincidentDryBulb1(self)

    def coolingEnthalpy2(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEnthalpy2(self)

    def coolingEnthalpyMeanCoincidentDryBulb2(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingEnthalpyMeanCoincidentDryBulb2(self)

    def coolingHours8To4AndDryBulb12pt8To20pt6(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_coolingHours8To4AndDryBulb12pt8To20pt6(self)

    def extremeWindSpeed1(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeWindSpeed1(self)

    def extremeWindSpeed2pt5(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeWindSpeed2pt5(self)

    def extremeWindSpeed5(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeWindSpeed5(self)

    def extremeMaxWetBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeMaxWetBulb(self)

    def extremeMeanMinDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeMeanMinDryBulb(self)

    def extremeMeanMaxDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeMeanMaxDryBulb(self)

    def extremeStdDevMinDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeStdDevMinDryBulb(self)

    def extremeStdDevMaxDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeStdDevMaxDryBulb(self)

    def extremeN5YearsMinDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeN5YearsMinDryBulb(self)

    def extremeN5YearsMaxDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeN5YearsMaxDryBulb(self)

    def extremeN10YearsMinDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeN10YearsMinDryBulb(self)

    def extremeN10YearsMaxDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeN10YearsMaxDryBulb(self)

    def extremeN20YearsMinDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeN20YearsMinDryBulb(self)

    def extremeN20YearsMaxDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeN20YearsMaxDryBulb(self)

    def extremeN50YearsMinDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeN50YearsMinDryBulb(self)

    def extremeN50YearsMaxDryBulb(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwDesignCondition_extremeN50YearsMaxDryBulb(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_EpwDesignCondition
    __del__ = lambda self: None
EpwDesignCondition_swigregister = _openstudioutilitiesfiletypes.EpwDesignCondition_swigregister
EpwDesignCondition_swigregister(EpwDesignCondition)

def EpwDesignCondition_getUnitsByName(name: 'std::string const &') -> "boost::optional< std::string >":
    return _openstudioutilitiesfiletypes.EpwDesignCondition_getUnitsByName(name)
EpwDesignCondition_getUnitsByName = _openstudioutilitiesfiletypes.EpwDesignCondition_getUnitsByName

def EpwDesignCondition_getUnits(field: 'EpwDesignField') -> "std::string":
    return _openstudioutilitiesfiletypes.EpwDesignCondition_getUnits(field)
EpwDesignCondition_getUnits = _openstudioutilitiesfiletypes.EpwDesignCondition_getUnits

def EpwDesignCondition_fromDesignConditionsString(line: 'std::string const &') -> "boost::optional< openstudio::EpwDesignCondition >":
    return _openstudioutilitiesfiletypes.EpwDesignCondition_fromDesignConditionsString(line)
EpwDesignCondition_fromDesignConditionsString = _openstudioutilitiesfiletypes.EpwDesignCondition_fromDesignConditionsString

def EpwDesignCondition_fromDesignConditionsStrings(list: 'StringVector') -> "boost::optional< openstudio::EpwDesignCondition >":
    return _openstudioutilitiesfiletypes.EpwDesignCondition_fromDesignConditionsStrings(list)
EpwDesignCondition_fromDesignConditionsStrings = _openstudioutilitiesfiletypes.EpwDesignCondition_fromDesignConditionsStrings

class EpwFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpwFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpwFile, name)
    __repr__ = _swig_repr

    def __init__(self, p: 'path', storeData: 'bool'=False):
        this = _openstudioutilitiesfiletypes.new_EpwFile(p, storeData)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesfiletypes.EpwFile_load
    if _newclass:
        load = staticmethod(_openstudioutilitiesfiletypes.EpwFile_load)
    __swig_getmethods__["loadFromString"] = lambda x: _openstudioutilitiesfiletypes.EpwFile_loadFromString
    if _newclass:
        loadFromString = staticmethod(_openstudioutilitiesfiletypes.EpwFile_loadFromString)

    def path(self) -> "openstudio::path":
        return _openstudioutilitiesfiletypes.EpwFile_path(self)

    def checksum(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwFile_checksum(self)

    def city(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwFile_city(self)

    def stateProvinceRegion(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwFile_stateProvinceRegion(self)

    def country(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwFile_country(self)

    def dataSource(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwFile_dataSource(self)

    def wmoNumber(self) -> "std::string":
        return _openstudioutilitiesfiletypes.EpwFile_wmoNumber(self)

    def latitude(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwFile_latitude(self)

    def longitude(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwFile_longitude(self)

    def timeZone(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwFile_timeZone(self)

    def elevation(self) -> "double":
        return _openstudioutilitiesfiletypes.EpwFile_elevation(self)

    def timeStep(self) -> "openstudio::Time":
        return _openstudioutilitiesfiletypes.EpwFile_timeStep(self)

    def recordsPerHour(self) -> "int":
        return _openstudioutilitiesfiletypes.EpwFile_recordsPerHour(self)

    def startDayOfWeek(self) -> "openstudio::DayOfWeek":
        return _openstudioutilitiesfiletypes.EpwFile_startDayOfWeek(self)

    def startDate(self) -> "openstudio::Date":
        return _openstudioutilitiesfiletypes.EpwFile_startDate(self)

    def endDate(self) -> "openstudio::Date":
        return _openstudioutilitiesfiletypes.EpwFile_endDate(self)

    def startDateActualYear(self) -> "boost::optional< int >":
        return _openstudioutilitiesfiletypes.EpwFile_startDateActualYear(self)

    def endDateActualYear(self) -> "boost::optional< int >":
        return _openstudioutilitiesfiletypes.EpwFile_endDateActualYear(self)

    def data(self) -> "std::vector< openstudio::EpwDataPoint,std::allocator< openstudio::EpwDataPoint > >":
        return _openstudioutilitiesfiletypes.EpwFile_data(self)

    def designConditions(self) -> "std::vector< openstudio::EpwDesignCondition,std::allocator< openstudio::EpwDesignCondition > >":
        return _openstudioutilitiesfiletypes.EpwFile_designConditions(self)

    def getTimeSeries(self, field: 'std::string const &') -> "boost::optional< openstudio::TimeSeries >":
        return _openstudioutilitiesfiletypes.EpwFile_getTimeSeries(self, field)

    def getComputedTimeSeries(self, field: 'std::string const &') -> "boost::optional< openstudio::TimeSeries >":
        return _openstudioutilitiesfiletypes.EpwFile_getComputedTimeSeries(self, field)

    def translateToWth(self, *args) -> "bool":
        return _openstudioutilitiesfiletypes.EpwFile_translateToWth(self, *args)

    def isActual(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwFile_isActual(self)

    def minutesMatch(self) -> "bool":
        return _openstudioutilitiesfiletypes.EpwFile_minutesMatch(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_EpwFile
    __del__ = lambda self: None
EpwFile_swigregister = _openstudioutilitiesfiletypes.EpwFile_swigregister
EpwFile_swigregister(EpwFile)

def EpwFile_load(p: 'path', storeData: 'bool'=False) -> "boost::optional< openstudio::EpwFile >":
    return _openstudioutilitiesfiletypes.EpwFile_load(p, storeData)
EpwFile_load = _openstudioutilitiesfiletypes.EpwFile_load

def EpwFile_loadFromString(str: 'std::string const &', storeData: 'bool'=False) -> "boost::optional< openstudio::EpwFile >":
    return _openstudioutilitiesfiletypes.EpwFile_loadFromString(str, storeData)
EpwFile_loadFromString = _openstudioutilitiesfiletypes.EpwFile_loadFromString


def toIdfObject(epwFile: 'EpwFile') -> "openstudio::IdfObject":
    return _openstudioutilitiesfiletypes.toIdfObject(epwFile)
toIdfObject = _openstudioutilitiesfiletypes.toIdfObject
class CustomOutputAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomOutputAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomOutputAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, customFileName: 'std::string const &', className: 'std::string const &', options: 'std::string const &'):
        this = _openstudioutilitiesfiletypes.new_CustomOutputAdapter(customFileName, className, options)
        try:
            self.this.append(this)
        except:
            self.this = this

    def customFileName(self) -> "std::string":
        return _openstudioutilitiesfiletypes.CustomOutputAdapter_customFileName(self)

    def className(self) -> "std::string":
        return _openstudioutilitiesfiletypes.CustomOutputAdapter_className(self)

    def options(self) -> "std::string":
        return _openstudioutilitiesfiletypes.CustomOutputAdapter_options(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_CustomOutputAdapter
    __del__ = lambda self: None
CustomOutputAdapter_swigregister = _openstudioutilitiesfiletypes.CustomOutputAdapter_swigregister
CustomOutputAdapter_swigregister(CustomOutputAdapter)

class RunOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _openstudioutilitiesfiletypes.new_RunOptions()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_RunOptions
    __del__ = lambda self: None
    __swig_getmethods__["fromString"] = lambda x: _openstudioutilitiesfiletypes.RunOptions_fromString
    if _newclass:
        fromString = staticmethod(_openstudioutilitiesfiletypes.RunOptions_fromString)

    def string(self) -> "std::string":
        return _openstudioutilitiesfiletypes.RunOptions_string(self)

    def debug(self) -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_debug(self)

    def setDebug(self, debug: 'bool') -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_setDebug(self, debug)

    def resetDebug(self) -> "void":
        return _openstudioutilitiesfiletypes.RunOptions_resetDebug(self)

    def fast(self) -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_fast(self)

    def setFast(self, fast: 'bool') -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_setFast(self, fast)

    def resetFast(self) -> "void":
        return _openstudioutilitiesfiletypes.RunOptions_resetFast(self)

    def preserveRunDir(self) -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_preserveRunDir(self)

    def setPreserveRunDir(self, preserve: 'bool') -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_setPreserveRunDir(self, preserve)

    def resetPreserveRunDir(self) -> "void":
        return _openstudioutilitiesfiletypes.RunOptions_resetPreserveRunDir(self)

    def skipExpandObjects(self) -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_skipExpandObjects(self)

    def setSkipExpandObjects(self, skip: 'bool') -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_setSkipExpandObjects(self, skip)

    def resetSkipExpandObjects(self) -> "void":
        return _openstudioutilitiesfiletypes.RunOptions_resetSkipExpandObjects(self)

    def skipEnergyPlusPreprocess(self) -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_skipEnergyPlusPreprocess(self)

    def setSkipEnergyPlusPreprocess(self, skip: 'bool') -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_setSkipEnergyPlusPreprocess(self, skip)

    def resetSkipEnergyPlusPreprocess(self) -> "void":
        return _openstudioutilitiesfiletypes.RunOptions_resetSkipEnergyPlusPreprocess(self)

    def cleanup(self) -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_cleanup(self)

    def setCleanup(self, cleanup: 'bool') -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_setCleanup(self, cleanup)

    def resetCleanup(self) -> "void":
        return _openstudioutilitiesfiletypes.RunOptions_resetCleanup(self)

    def customOutputAdapter(self) -> "boost::optional< openstudio::CustomOutputAdapter >":
        return _openstudioutilitiesfiletypes.RunOptions_customOutputAdapter(self)

    def setCustomOutputAdapter(self, adapter: 'CustomOutputAdapter') -> "bool":
        return _openstudioutilitiesfiletypes.RunOptions_setCustomOutputAdapter(self, adapter)

    def resetCustomOutputAdapter(self) -> "void":
        return _openstudioutilitiesfiletypes.RunOptions_resetCustomOutputAdapter(self)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesfiletypes.RunOptions___str__(self)
RunOptions_swigregister = _openstudioutilitiesfiletypes.RunOptions_swigregister
RunOptions_swigregister(RunOptions)

def RunOptions_fromString(s: 'std::string const &') -> "boost::optional< openstudio::RunOptions >":
    return _openstudioutilitiesfiletypes.RunOptions_fromString(s)
RunOptions_fromString = _openstudioutilitiesfiletypes.RunOptions_fromString

class StepResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_StepResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueName(self) -> "std::string":
        return _openstudioutilitiesfiletypes.StepResult_valueName(self)

    def value(self) -> "int":
        return _openstudioutilitiesfiletypes.StepResult_value(self)

    def valueDescription(self) -> "std::string":
        return _openstudioutilitiesfiletypes.StepResult_valueDescription(self)

    def __eq__(self, other: 'StepResult') -> "bool":
        return _openstudioutilitiesfiletypes.StepResult___eq__(self, other)

    def __ne__(self, other: 'StepResult') -> "bool":
        return _openstudioutilitiesfiletypes.StepResult___ne__(self, other)

    def __gt__(self, other: 'StepResult') -> "bool":
        return _openstudioutilitiesfiletypes.StepResult___gt__(self, other)

    def __ge__(self, other: 'StepResult') -> "bool":
        return _openstudioutilitiesfiletypes.StepResult___ge__(self, other)

    def __lt__(self, other: 'StepResult') -> "bool":
        return _openstudioutilitiesfiletypes.StepResult___lt__(self, other)

    def __le__(self, other: 'StepResult') -> "bool":
        return _openstudioutilitiesfiletypes.StepResult___le__(self, other)
    __swig_getmethods__["enumName"] = lambda x: _openstudioutilitiesfiletypes.StepResult_enumName
    if _newclass:
        enumName = staticmethod(_openstudioutilitiesfiletypes.StepResult_enumName)
    __swig_getmethods__["getValues"] = lambda x: _openstudioutilitiesfiletypes.StepResult_getValues
    if _newclass:
        getValues = staticmethod(_openstudioutilitiesfiletypes.StepResult_getValues)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_StepResult
    __del__ = lambda self: None
StepResult_swigregister = _openstudioutilitiesfiletypes.StepResult_swigregister
StepResult_swigregister(StepResult)

def StepResult_enumName() -> "std::string":
    return _openstudioutilitiesfiletypes.StepResult_enumName()
StepResult_enumName = _openstudioutilitiesfiletypes.StepResult_enumName

def StepResult_getValues() -> "std::set< int,std::less< int >,std::allocator< int > >":
    return _openstudioutilitiesfiletypes.StepResult_getValues()
StepResult_getValues = _openstudioutilitiesfiletypes.StepResult_getValues

class WorkflowStepValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkflowStepValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkflowStepValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_WorkflowStepValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["fromString"] = lambda x: _openstudioutilitiesfiletypes.WorkflowStepValue_fromString
    if _newclass:
        fromString = staticmethod(_openstudioutilitiesfiletypes.WorkflowStepValue_fromString)

    def string(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_string(self)

    def name(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_name(self)

    def displayName(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_displayName(self)

    def units(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_units(self)

    def variantType(self) -> "openstudio::VariantType":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_variantType(self)

    def valueAsVariant(self) -> "openstudio::Variant":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_valueAsVariant(self)

    def valueAsBoolean(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_valueAsBoolean(self)

    def valueAsInteger(self) -> "int":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_valueAsInteger(self)

    def valueAsDouble(self) -> "double":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_valueAsDouble(self)

    def valueAsString(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_valueAsString(self)

    def setName(self, name: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_setName(self, name)

    def setDisplayName(self, displayName: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_setDisplayName(self, displayName)

    def resetDisplayName(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_resetDisplayName(self)

    def setUnits(self, units: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_setUnits(self, units)

    def resetUnits(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepValue_resetUnits(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_WorkflowStepValue
    __del__ = lambda self: None
WorkflowStepValue_swigregister = _openstudioutilitiesfiletypes.WorkflowStepValue_swigregister
WorkflowStepValue_swigregister(WorkflowStepValue)

def WorkflowStepValue_fromString(s: 'std::string const &') -> "boost::optional< openstudio::WorkflowStepValue >":
    return _openstudioutilitiesfiletypes.WorkflowStepValue_fromString(s)
WorkflowStepValue_fromString = _openstudioutilitiesfiletypes.WorkflowStepValue_fromString

class WorkflowStepResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkflowStepResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkflowStepResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_WorkflowStepResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["fromString"] = lambda x: _openstudioutilitiesfiletypes.WorkflowStepResult_fromString
    if _newclass:
        fromString = staticmethod(_openstudioutilitiesfiletypes.WorkflowStepResult_fromString)

    def string(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_string(self)

    def startedAt(self) -> "boost::optional< openstudio::DateTime >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_startedAt(self)

    def completedAt(self) -> "boost::optional< openstudio::DateTime >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_completedAt(self)

    def measureType(self) -> "boost::optional< openstudio::MeasureType >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureType(self)

    def measureName(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureName(self)

    def measureId(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureId(self)

    def measureUUID(self) -> "boost::optional< openstudio::UUID >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureUUID(self)

    def measureVersionId(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureVersionId(self)

    def measureVersionUUID(self) -> "boost::optional< openstudio::UUID >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureVersionUUID(self)

    def measureVersionModified(self) -> "boost::optional< openstudio::DateTime >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureVersionModified(self)

    def measureXmlChecksum(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureXmlChecksum(self)

    def measureClassName(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureClassName(self)

    def measureDisplayName(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureDisplayName(self)

    def measureTaxonomy(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_measureTaxonomy(self)

    def stepResult(self) -> "boost::optional< openstudio::StepResult >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stepResult(self)

    def stepInitialCondition(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stepInitialCondition(self)

    def stepFinalCondition(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stepFinalCondition(self)

    def stepErrors(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stepErrors(self)

    def stepWarnings(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stepWarnings(self)

    def stepInfo(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stepInfo(self)

    def stepValues(self) -> "std::vector< openstudio::WorkflowStepValue,std::allocator< openstudio::WorkflowStepValue > >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stepValues(self)

    def stepFiles(self) -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stepFiles(self)

    def stdOut(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stdOut(self)

    def stdErr(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_stdErr(self)

    def value(self) -> "openstudio::StepResult":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_value(self)

    def errors(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_errors(self)

    def warnings(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_warnings(self)

    def info(self) -> "std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_info(self)

    def initialCondition(self) -> "boost::optional< openstudio::LogMessage >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_initialCondition(self)

    def finalCondition(self) -> "boost::optional< openstudio::LogMessage >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_finalCondition(self)

    def attributes(self) -> "std::vector< openstudio::Attribute,std::allocator< openstudio::Attribute > >":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_attributes(self)

    def setStartedAt(self, dateTime: 'DateTime') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setStartedAt(self, dateTime)

    def resetStartedAt(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStartedAt(self)

    def setCompletedAt(self, dateTime: 'DateTime') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setCompletedAt(self, dateTime)

    def resetCompletedAt(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetCompletedAt(self)

    def setMeasureType(self, measureType: 'openstudio::MeasureType const &') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureType(self, measureType)

    def resetMeasureType(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureType(self)

    def setMeasureName(self, name: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureName(self, name)

    def resetMeasureName(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureName(self)

    def setMeasureId(self, id: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureId(self, id)

    def resetMeasureId(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureId(self)

    def setMeasureUUID(self, uuid: 'UUID') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureUUID(self, uuid)

    def resetMeasureUUID(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureUUID(self)

    def setMeasureVersionId(self, id: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureVersionId(self, id)

    def resetMeasureVersionId(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureVersionId(self)

    def setMeasureVersionUUID(self, uuid: 'UUID') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureVersionUUID(self, uuid)

    def resetMeasureVersionUUID(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureVersionUUID(self)

    def setMeasureVersionModified(self, modified: 'DateTime') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureVersionModified(self, modified)

    def resetMeasureVersionModified(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureVersionModified(self)

    def setMeasureXmlChecksum(self, checksum: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureXmlChecksum(self, checksum)

    def resetMeasureXmlChecksum(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureXmlChecksum(self)

    def setMeasureClassName(self, className: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureClassName(self, className)

    def resetMeasureClassName(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureClassName(self)

    def setMeasureDisplayName(self, displayName: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureDisplayName(self, displayName)

    def resetMeasureDisplayName(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureDisplayName(self)

    def setMeasureTaxonomy(self, taxonomy: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setMeasureTaxonomy(self, taxonomy)

    def resetMeasureTaxonomy(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetMeasureTaxonomy(self)

    def setStepResult(self, result: 'StepResult') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setStepResult(self, result)

    def resetStepResult(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStepResult(self)

    def setStepInitialCondition(self, initialCondition: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setStepInitialCondition(self, initialCondition)

    def resetStepInitialCondition(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStepInitialCondition(self)

    def setStepFinalCondition(self, finalCondition: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setStepFinalCondition(self, finalCondition)

    def resetStepFinalCondition(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStepFinalCondition(self)

    def addStepError(self, error: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_addStepError(self, error)

    def resetStepErrors(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStepErrors(self)

    def addStepWarning(self, warning: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_addStepWarning(self, warning)

    def resetStepWarnings(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStepWarnings(self)

    def addStepInfo(self, info: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_addStepInfo(self, info)

    def resetStepInfo(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStepInfo(self)

    def addStepValue(self, value: 'WorkflowStepValue') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_addStepValue(self, value)

    def resetStepValues(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStepValues(self)

    def addStepFile(self, path: 'path') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_addStepFile(self, path)

    def resetStepFiles(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStepFiles(self)

    def setStdOut(self, stdOut: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setStdOut(self, stdOut)

    def resetStdOut(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStdOut(self)

    def setStdErr(self, stdErr: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_setStdErr(self, stdErr)

    def resetStdErr(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStepResult_resetStdErr(self)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowStepResult___str__(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_WorkflowStepResult
    __del__ = lambda self: None
WorkflowStepResult_swigregister = _openstudioutilitiesfiletypes.WorkflowStepResult_swigregister
WorkflowStepResult_swigregister(WorkflowStepResult)

def WorkflowStepResult_fromString(s: 'std::string const &') -> "boost::optional< openstudio::WorkflowStepResult >":
    return _openstudioutilitiesfiletypes.WorkflowStepResult_fromString(s)
WorkflowStepResult_fromString = _openstudioutilitiesfiletypes.WorkflowStepResult_fromString

class WorkflowStep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkflowStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkflowStep, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_WorkflowStep
    __del__ = lambda self: None
    __swig_getmethods__["fromString"] = lambda x: _openstudioutilitiesfiletypes.WorkflowStep_fromString
    if _newclass:
        fromString = staticmethod(_openstudioutilitiesfiletypes.WorkflowStep_fromString)

    def string(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowStep_string(self)

    def result(self) -> "boost::optional< openstudio::WorkflowStepResult >":
        return _openstudioutilitiesfiletypes.WorkflowStep_result(self)

    def setResult(self, result: 'WorkflowStepResult') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStep_setResult(self, result)

    def resetResult(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowStep_resetResult(self)

    def __eq__(self, other: 'WorkflowStep') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowStep___eq__(self, other)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowStep___str__(self)

    def to_MeasureStep(self) -> "boost::optional< openstudio::MeasureStep >":
        return _openstudioutilitiesfiletypes.WorkflowStep_to_MeasureStep(self)
WorkflowStep_swigregister = _openstudioutilitiesfiletypes.WorkflowStep_swigregister
WorkflowStep_swigregister(WorkflowStep)

def WorkflowStep_fromString(s: 'std::string const &') -> "boost::optional< openstudio::WorkflowStep >":
    return _openstudioutilitiesfiletypes.WorkflowStep_fromString(s)
WorkflowStep_fromString = _openstudioutilitiesfiletypes.WorkflowStep_fromString

class MeasureStep(WorkflowStep):
    __swig_setmethods__ = {}
    for _s in [WorkflowStep]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasureStep, name, value)
    __swig_getmethods__ = {}
    for _s in [WorkflowStep]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeasureStep, name)
    __repr__ = _swig_repr

    def __init__(self, measureDirName: 'std::string const &'):
        this = _openstudioutilitiesfiletypes.new_MeasureStep(measureDirName)
        try:
            self.this.append(this)
        except:
            self.this = this

    def measureDirName(self) -> "std::string":
        return _openstudioutilitiesfiletypes.MeasureStep_measureDirName(self)

    def name(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.MeasureStep_name(self)

    def setName(self, name: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.MeasureStep_setName(self, name)

    def resetName(self) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStep_resetName(self)

    def description(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.MeasureStep_description(self)

    def setDescription(self, description: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.MeasureStep_setDescription(self, description)

    def resetDescription(self) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStep_resetDescription(self)

    def modelerDescription(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.MeasureStep_modelerDescription(self)

    def setModelerDescription(self, modelerDescription: 'std::string const &') -> "bool":
        return _openstudioutilitiesfiletypes.MeasureStep_setModelerDescription(self, modelerDescription)

    def resetModelerDescription(self) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStep_resetModelerDescription(self)

    def arguments(self) -> "std::map< std::string,openstudio::Variant,std::less< std::string >,std::allocator< std::pair< std::string const,openstudio::Variant > > >":
        return _openstudioutilitiesfiletypes.MeasureStep_arguments(self)

    def getArgument(self, name: 'std::string const &') -> "boost::optional< openstudio::Variant >":
        return _openstudioutilitiesfiletypes.MeasureStep_getArgument(self, name)

    def setArgument(self, *args) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStep_setArgument(self, *args)

    def removeArgument(self, name: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.MeasureStep_removeArgument(self, name)

    def clearArguments(self) -> "void":
        return _openstudioutilitiesfiletypes.MeasureStep_clearArguments(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_MeasureStep
    __del__ = lambda self: None
MeasureStep_swigregister = _openstudioutilitiesfiletypes.MeasureStep_swigregister
MeasureStep_swigregister(MeasureStep)

class WorkflowJSON(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkflowJSON, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkflowJSON, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openstudioutilitiesfiletypes.new_WorkflowJSON(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def clone(self) -> "openstudio::WorkflowJSON":
        return _openstudioutilitiesfiletypes.WorkflowJSON_clone(self)
    __swig_getmethods__["load"] = lambda x: _openstudioutilitiesfiletypes.WorkflowJSON_load
    if _newclass:
        load = staticmethod(_openstudioutilitiesfiletypes.WorkflowJSON_load)

    def string(self, includeHash: 'bool'=True) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowJSON_string(self, includeHash)

    def hash(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowJSON_hash(self)

    def computeHash(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowJSON_computeHash(self)

    def checkForUpdates(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_checkForUpdates(self)

    def save(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_save(self)

    def saveAs(self, p: 'path') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_saveAs(self, p)

    def reset(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_reset(self)

    def start(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_start(self)

    def currentStepIndex(self) -> "unsigned int":
        return _openstudioutilitiesfiletypes.WorkflowJSON_currentStepIndex(self)

    def currentStep(self) -> "boost::optional< openstudio::WorkflowStep >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_currentStep(self)

    def incrementStep(self) -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_incrementStep(self)

    def completedStatus(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_completedStatus(self)

    def setCompletedStatus(self, status: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_setCompletedStatus(self, status)

    def createdAt(self) -> "boost::optional< openstudio::DateTime >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_createdAt(self)

    def startedAt(self) -> "boost::optional< openstudio::DateTime >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_startedAt(self)

    def updatedAt(self) -> "boost::optional< openstudio::DateTime >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_updatedAt(self)

    def completedAt(self) -> "boost::optional< openstudio::DateTime >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_completedAt(self)

    def eplusoutErr(self) -> "boost::optional< std::string >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_eplusoutErr(self)

    def setEplusoutErr(self, eplusoutErr: 'std::string const &') -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_setEplusoutErr(self, eplusoutErr)

    def oswPath(self) -> "boost::optional< openstudio::path >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_oswPath(self)

    def setOswPath(self, path: 'path') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_setOswPath(self, path)

    def oswDir(self) -> "openstudio::path":
        return _openstudioutilitiesfiletypes.WorkflowJSON_oswDir(self)

    def setOswDir(self, path: 'path') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_setOswDir(self, path)

    def rootDir(self) -> "openstudio::path":
        return _openstudioutilitiesfiletypes.WorkflowJSON_rootDir(self)

    def absoluteRootDir(self) -> "openstudio::path":
        return _openstudioutilitiesfiletypes.WorkflowJSON_absoluteRootDir(self)

    def runDir(self) -> "openstudio::path":
        return _openstudioutilitiesfiletypes.WorkflowJSON_runDir(self)

    def absoluteRunDir(self) -> "openstudio::path":
        return _openstudioutilitiesfiletypes.WorkflowJSON_absoluteRunDir(self)

    def outPath(self) -> "openstudio::path":
        return _openstudioutilitiesfiletypes.WorkflowJSON_outPath(self)

    def absoluteOutPath(self) -> "openstudio::path":
        return _openstudioutilitiesfiletypes.WorkflowJSON_absoluteOutPath(self)

    def filePaths(self) -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_filePaths(self)

    def absoluteFilePaths(self) -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_absoluteFilePaths(self)

    def addFilePath(self, path: 'path') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_addFilePath(self, path)

    def resetFilePaths(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_resetFilePaths(self)

    def findFile(self, *args) -> "boost::optional< openstudio::path >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_findFile(self, *args)

    def measurePaths(self) -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_measurePaths(self)

    def absoluteMeasurePaths(self) -> "std::vector< openstudio::path,std::allocator< openstudio::path > >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_absoluteMeasurePaths(self)

    def addMeasurePath(self, path: 'path') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_addMeasurePath(self, path)

    def resetMeasurePaths(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_resetMeasurePaths(self)

    def findMeasure(self, *args) -> "boost::optional< openstudio::path >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_findMeasure(self, *args)

    def seedFile(self) -> "boost::optional< openstudio::path >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_seedFile(self)

    def setSeedFile(self, seedFile: 'path') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_setSeedFile(self, seedFile)

    def resetSeedFile(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_resetSeedFile(self)

    def weatherFile(self) -> "boost::optional< openstudio::path >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_weatherFile(self)

    def setWeatherFile(self, weatherFile: 'path') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_setWeatherFile(self, weatherFile)

    def resetWeatherFile(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_resetWeatherFile(self)

    def workflowSteps(self) -> "std::vector< openstudio::WorkflowStep,std::allocator< openstudio::WorkflowStep > >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_workflowSteps(self)

    def setWorkflowSteps(self, steps: 'WorkflowStepVector') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_setWorkflowSteps(self, steps)

    def resetWorkflowSteps(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_resetWorkflowSteps(self)

    def getMeasureSteps(self, measureType: 'openstudio::MeasureType const &') -> "std::vector< openstudio::MeasureStep,std::allocator< openstudio::MeasureStep > >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_getMeasureSteps(self, measureType)

    def setMeasureSteps(self, measureType: 'openstudio::MeasureType const &', steps: 'MeasureStepVector') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_setMeasureSteps(self, measureType, steps)

    def getBCLMeasure(self, step: 'MeasureStep') -> "boost::optional< BCLMeasure >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_getBCLMeasure(self, step)

    def getBCLMeasureByUUID(self, id: 'UUID') -> "boost::optional< BCLMeasure >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_getBCLMeasureByUUID(self, id)

    def addMeasure(self, bclMeasure: 'BCLMeasure const &') -> "boost::optional< BCLMeasure >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_addMeasure(self, bclMeasure)

    def runOptions(self) -> "boost::optional< openstudio::RunOptions >":
        return _openstudioutilitiesfiletypes.WorkflowJSON_runOptions(self)

    def setRunOptions(self, options: 'RunOptions') -> "bool":
        return _openstudioutilitiesfiletypes.WorkflowJSON_setRunOptions(self, options)

    def resetRunOptions(self) -> "void":
        return _openstudioutilitiesfiletypes.WorkflowJSON_resetRunOptions(self)

    def __str__(self) -> "std::string":
        return _openstudioutilitiesfiletypes.WorkflowJSON___str__(self)
    __swig_destroy__ = _openstudioutilitiesfiletypes.delete_WorkflowJSON
    __del__ = lambda self: None
WorkflowJSON_swigregister = _openstudioutilitiesfiletypes.WorkflowJSON_swigregister
WorkflowJSON_swigregister(WorkflowJSON)

def WorkflowJSON_load(*args) -> "boost::optional< openstudio::WorkflowJSON >":
    return _openstudioutilitiesfiletypes.WorkflowJSON_load(*args)
WorkflowJSON_load = _openstudioutilitiesfiletypes.WorkflowJSON_load


def __lshift__(*args) -> "std::ostream &":
    return _openstudioutilitiesfiletypes.__lshift__(*args)
__lshift__ = _openstudioutilitiesfiletypes.__lshift__
# This file is compatible with both classic and new-style classes.


